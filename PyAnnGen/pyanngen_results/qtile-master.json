{
    "qtile-master/setup.py": {
        "get_cffi_modules": {
            "name": "get_cffi_modules",
            "location": 67,
            "return": [
                "List[str]"
            ],
            "arguments": {}
        },
        "CheckCairoXcb.cairo_xcb_check": {
            "name": "cairo_xcb_check",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckCairoXcb.finalize_options": {
            "name": "finalize_options",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/docs/conf.py": {
        "setup": {
            "name": "setup",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "Tuple[Callable, Callable]"
                ]
            }
        },
        "Mock.__dir__": {
            "name": "__dir__",
            "location": 24,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/docs/sphinx_qtile.py": {
        "sphinx_escape": {
            "name": "sphinx_escape",
            "location": 126,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "Dict[str, int]",
                    "bool",
                    "Optional[List[str]]"
                ]
            }
        },
        "generate_keybinding_images": {
            "name": "generate_keybinding_images",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "generate_widget_screenshots": {
            "name": "generate_widget_screenshots",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "setup": {
            "name": "setup",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "sphinx.application.Sphinx"
                ]
            }
        },
        "SimpleDirectiveMixin.make_rst": {
            "name": "make_rst",
            "location": 113,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleDirectiveMixin.run": {
            "name": "run",
            "location": 116,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "QtileClass.make_rst": {
            "name": "make_rst",
            "location": 133,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QtileHooks.make_rst": {
            "name": "make_rst",
            "location": 200,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QtileModule.make_rst": {
            "name": "make_rst",
            "location": 215,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/docs/screenshots/config.py": {
        "env": {
            "name": "env",
            "location": 8,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, str]",
                "bool",
                "Union[str, bytes]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[int]"
                ],
                "default": [
                    "str",
                    "Optional[int]"
                ]
            }
        }
    },
    "qtile-master/docs/screenshots/screenshots.py": {
        "Client.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.current_group": {
            "name": "current_group",
            "location": 30,
            "return": [
                "libqtile.command.client.InteractiveCommandClient"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.switch_to_group": {
            "name": "switch_to_group",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "group": [
                    "int",
                    "bool",
                    "str",
                    "dict"
                ]
            }
        },
        "Client.spawn_window": {
            "name": "spawn_window",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "color": [
                    "None",
                    "str",
                    "int",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Optional[Set[str]]"
                ]
            }
        },
        "Client.prepare_layout": {
            "name": "prepare_layout",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "layout": [
                    "str",
                    "Optional[AbstractSet[str]]"
                ],
                "windows": [
                    "List[datetime.time]",
                    "int",
                    "List[str]",
                    "float"
                ],
                "commands": [
                    "Optional[List]",
                    "list",
                    "int"
                ]
            }
        },
        "Client.clean_layout": {
            "name": "clean_layout",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "commands": [
                    "str",
                    "Callable[..., None]",
                    "bool"
                ]
            }
        },
        "Client.run_layout_command": {
            "name": "run_layout_command",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cmd": [
                    "str",
                    "List[Dict]",
                    "bool",
                    "Coroutine"
                ]
            }
        },
        "Client.kill_group_windows": {
            "name": "kill_group_windows",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Screenshooter.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_prefix": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "geometry": [
                    "bool",
                    "int",
                    "set",
                    "dict",
                    "List[str]"
                ],
                "animation_delay": [
                    "bool",
                    "int",
                    "set",
                    "dict",
                    "List[str]"
                ]
            }
        },
        "Screenshooter.shoot": {
            "name": "shoot",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "numbered": [
                    "bool",
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict"
                ],
                "compress": [
                    "typing.Text",
                    "str",
                    "int",
                    "Exception"
                ]
            }
        },
        "Screenshooter.compress": {
            "name": "compress",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str"
                ],
                "file_path": [
                    "str"
                ]
            }
        },
        "Screenshooter.animate": {
            "name": "animate",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "delays": [
                    "None",
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "clear": [
                    "bool",
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict"
                ]
            }
        }
    },
    "qtile-master/docs/screenshots/take_all.py": {
        "env": {
            "name": "env",
            "location": 14,
            "return": [
                "Union[(str, _T1)]"
            ],
            "arguments": {
                "name": [],
                "default": [
                    "_T1"
                ]
            }
        },
        "take": {
            "name": "take",
            "location": 399,
            "return": [
                "Tuple[(bool, str)]"
            ],
            "arguments": {
                "name": [],
                "layout": [],
                "spec": []
            }
        },
        "get_selection": {
            "name": "get_selection",
            "location": 446,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "args": []
            }
        },
        "main": {
            "name": "main",
            "location": 478,
            "return": [
                "int"
            ],
            "arguments": {
                "args": [
                    "None"
                ]
            }
        }
    },
    "qtile-master/docs/screenshots/take_one.py": {
        "env": {
            "name": "env",
            "location": 10,
            "return": [
                "Union[(str, _T1)]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[int]"
                ],
                "default": [
                    "_T1"
                ]
            }
        }
    },
    "qtile-master/libqtile/bar.py": {
        "Gap.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "Union[Tuple[int, int], int]",
                    "bool"
                ]
            }
        },
        "Gap._configure": {
            "name": "_configure",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtile": [
                    "int",
                    "Callable",
                    "str"
                ],
                "screen": [
                    "int",
                    "float"
                ]
            }
        },
        "Gap.draw": {
            "name": "draw",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gap.finalize": {
            "name": "finalize",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gap.geometry": {
            "name": "geometry",
            "location": 108,
            "return": [
                "Tuple[(Any, Any, Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gap._items": {
            "name": "_items",
            "location": 111,
            "return": [
                "Optional[Tuple[(bool, list)]]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Gap._select": {
            "name": "_select",
            "location": 116,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ],
                "sel": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "Gap.position": {
            "name": "position",
            "location": 121,
            "return": [
                "typing.Text",
                "int",
                "slice",
                "str",
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gap.info": {
            "name": "info",
            "location": 126,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gap.cmd_info": {
            "name": "cmd_info",
            "location": 129,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Obj.__init__": {
            "name": "__init__",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "Obj.__str__": {
            "name": "__str__",
            "location": 140,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Obj.__repr__": {
            "name": "__repr__",
            "location": 143,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bar.__init__": {
            "name": "__init__",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "widgets": [
                    "dict",
                    "str",
                    "list"
                ],
                "size": [
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ]
            }
        },
        "Bar._configure": {
            "name": "_configure",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtile": [
                    "bytes"
                ],
                "screen": [
                    "int",
                    "float",
                    "bool"
                ],
                "reconfigure": [
                    "int",
                    "bool"
                ]
            }
        },
        "Bar._configure_widget": {
            "name": "_configure_widget",
            "location": 329,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "widget": [
                    "bool"
                ]
            }
        },
        "Bar._remove_crashed_widgets": {
            "name": "_remove_crashed_widgets",
            "location": 359,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bar._items": {
            "name": "_items",
            "location": 380,
            "return": [
                "Optional[Tuple[(bool, list)]]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Bar._select": {
            "name": "_select",
            "location": 387,
            "return": [
                "None",
                "str",
                "Optional[str]",
                "Optional[List[Any]]",
                "list",
                "Optional[BaseException]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]"
                ],
                "sel": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "Bar.finalize": {
            "name": "finalize",
            "location": 396,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bar.kill_window": {
            "name": "kill_window",
            "location": 402,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bar._resize": {
            "name": "_resize",
            "location": 408,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "length": [
                    "int",
                    "float",
                    "raiden.utils.Optional[int]"
                ],
                "widgets": [
                    "int",
                    "bool",
                    "dict"
                ]
            }
        },
        "Bar.get_widget_in_position": {
            "name": "get_widget_in_position",
            "location": 475,
            "return": [
                "None",
                "str",
                "Optional[str]",
                "Tuple[int, int]",
                "dict",
                "Optional[int]",
                "Optional[T]",
                "Iterator[\"pytesmark.structures.ParameterSet[CaseInfo]\"]",
                "T"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "Bar.process_button_click": {
            "name": "process_button_click",
            "location": 486,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ],
                "button": [
                    "int"
                ]
            }
        },
        "Bar.process_button_release": {
            "name": "process_button_release",
            "location": 500,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ],
                "button": [
                    "int"
                ]
            }
        },
        "Bar.process_pointer_enter": {
            "name": "process_pointer_enter",
            "location": 509,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "Bar.process_pointer_leave": {
            "name": "process_pointer_leave",
            "location": 518,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "Bar.process_pointer_motion": {
            "name": "process_pointer_motion",
            "location": 526,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "Bar.process_key_press": {
            "name": "process_key_press",
            "location": 539,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keycode": [
                    "int"
                ]
            }
        },
        "Bar.widget_grab_keyboard": {
            "name": "widget_grab_keyboard",
            "location": 543,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "widget": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Bar.widget_ungrab_keyboard": {
            "name": "widget_ungrab_keyboard",
            "location": 553,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bar.process_window_expose": {
            "name": "process_window_expose",
            "location": 561,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bar.draw": {
            "name": "draw",
            "location": 568,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bar._actual_draw": {
            "name": "_actual_draw",
            "location": 575,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bar.info": {
            "name": "info",
            "location": 639,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bar.is_show": {
            "name": "is_show",
            "location": 650,
            "return": [
                "bool",
                "Sequence[int]",
                "int",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bar.show": {
            "name": "show",
            "location": 653,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "is_show": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "Bar.adjust_for_strut": {
            "name": "adjust_for_strut",
            "location": 665,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "Union[Tuple[int, int], int]"
                ]
            }
        },
        "Bar.cmd_fake_button_press": {
            "name": "cmd_fake_button_press",
            "location": 674,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "screen": [
                    "bool",
                    "List[int]",
                    "Optional[float]",
                    "int"
                ],
                "position": [
                    "bool",
                    "List[int]",
                    "Optional[float]",
                    "int"
                ],
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ],
                "button": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "qtile-master/libqtile/command_client.py": {},
    "qtile-master/libqtile/command_graph.py": {},
    "qtile-master/libqtile/command_interface.py": {},
    "qtile-master/libqtile/command_object.py": {},
    "qtile-master/libqtile/config.py": {
        "Key.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "modifiers": [
                    "List[str]"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "Key.__repr__": {
            "name": "__repr__",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyChord.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "modifiers": [
                    "List[str]"
                ],
                "key": [
                    "str"
                ],
                "submappings": [
                    "list"
                ],
                "mode": [
                    "str"
                ]
            }
        },
        "KeyChord.__repr__": {
            "name": "__repr__",
            "location": 116,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mouse.__init__": {
            "name": "__init__",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "modifiers": [
                    "List[str]"
                ],
                "button": [
                    "str"
                ]
            }
        },
        "Drag.__init__": {
            "name": "__init__",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "modifiers": [
                    "List[str]"
                ],
                "button": [
                    "str"
                ]
            }
        },
        "Drag.__repr__": {
            "name": "__repr__",
            "location": 161,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Click.__repr__": {
            "name": "__repr__",
            "location": 182,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EzConfig.parse": {
            "name": "parse",
            "location": 207,
            "return": [
                "Tuple[(List[str], str)]"
            ],
            "arguments": {
                "self": [],
                "spec": [
                    "str"
                ]
            }
        },
        "EzKey.__init__": {
            "name": "__init__",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keydef": [
                    "str"
                ]
            }
        },
        "EzClick.__init__": {
            "name": "__init__",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "btndef": [
                    "str"
                ]
            }
        },
        "EzDrag.__init__": {
            "name": "__init__",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "btndef": [
                    "str"
                ]
            }
        },
        "ScreenRect.__init__": {
            "name": "__init__",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ],
                "width": [
                    "int"
                ],
                "height": [
                    "int"
                ]
            }
        },
        "ScreenRect.__repr__": {
            "name": "__repr__",
            "location": 305,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScreenRect.hsplit": {
            "name": "hsplit",
            "location": 314,
            "return": [
                "Tuple[(ScreenRect, ScreenRect)]"
            ],
            "arguments": {
                "self": [],
                "columnwidth": [
                    "int"
                ]
            }
        },
        "ScreenRect.vsplit": {
            "name": "vsplit",
            "location": 321,
            "return": [
                "Tuple[(ScreenRect, ScreenRect)]"
            ],
            "arguments": {
                "self": [],
                "rowheight": [
                    "int"
                ]
            }
        },
        "Screen.__init__": {
            "name": "__init__",
            "location": 350,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "top": [
                    "None"
                ],
                "bottom": [
                    "None"
                ],
                "left": [
                    "None"
                ],
                "right": [
                    "None"
                ],
                "wallpaper": [
                    "None"
                ],
                "wallpaper_mode": [
                    "None"
                ],
                "x": [
                    "None"
                ],
                "y": [
                    "None"
                ],
                "width": [
                    "None"
                ],
                "height": [
                    "None"
                ]
            }
        },
        "Screen._configure": {
            "name": "_configure",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtile": [
                    "libqtile.core.manager.Qtile"
                ],
                "index": [
                    "int"
                ],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ],
                "width": [
                    "int"
                ],
                "height": [
                    "int"
                ],
                "group": [
                    "libqtile.group._Group"
                ],
                "reconfigure_gaps": [
                    "bool"
                ]
            }
        },
        "Screen.paint": {
            "name": "paint",
            "location": 402,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "mode": [
                    "None"
                ]
            }
        },
        "Screen.gaps": {
            "name": "gaps",
            "location": 407,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "Screen.dx": {
            "name": "dx",
            "location": 411,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Screen.dy": {
            "name": "dy",
            "location": 415,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Screen.dwidth": {
            "name": "dwidth",
            "location": 419,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Screen.dheight": {
            "name": "dheight",
            "location": 428,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Screen.get_rect": {
            "name": "get_rect",
            "location": 436,
            "return": [
                "ScreenRect"
            ],
            "arguments": {
                "self": []
            }
        },
        "Screen.set_group": {
            "name": "set_group",
            "location": 439,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_group": [],
                "save_prev": [
                    "bool"
                ],
                "warp": [
                    "bool"
                ]
            }
        },
        "Screen.toggle_group": {
            "name": "toggle_group",
            "location": 487,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "group": [
                    "None"
                ],
                "warp": [
                    "bool"
                ]
            }
        },
        "Screen._items": {
            "name": "_items",
            "location": 493,
            "return": [
                "Optional[Tuple[(bool, list)]]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Screen._select": {
            "name": "_select",
            "location": 507,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "sel": []
            }
        },
        "Screen.resize": {
            "name": "resize",
            "location": 538,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "None"
                ],
                "y": [
                    "None"
                ],
                "w": [
                    "None"
                ],
                "h": [
                    "None"
                ]
            }
        },
        "Screen.cmd_info": {
            "name": "cmd_info",
            "location": 560,
            "return": [
                "Dict[(str, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Screen.cmd_resize": {
            "name": "cmd_resize",
            "location": 564,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "None"
                ],
                "y": [
                    "None"
                ],
                "w": [
                    "None"
                ],
                "h": [
                    "None"
                ]
            }
        },
        "Screen.cmd_next_group": {
            "name": "cmd_next_group",
            "location": 574,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "skip_empty": [
                    "bool"
                ],
                "skip_managed": [
                    "bool"
                ]
            }
        },
        "Screen.cmd_prev_group": {
            "name": "cmd_prev_group",
            "location": 580,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "skip_empty": [
                    "bool"
                ],
                "skip_managed": [
                    "bool"
                ],
                "warp": [
                    "bool"
                ]
            }
        },
        "Screen.cmd_toggle_group": {
            "name": "cmd_toggle_group",
            "location": 588,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "group_name": [
                    "None"
                ],
                "warp": [
                    "bool"
                ]
            }
        },
        "Screen.cmd_set_wallpaper": {
            "name": "cmd_set_wallpaper",
            "location": 594,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "mode": [
                    "None"
                ]
            }
        },
        "Group.__init__": {
            "name": "__init__",
            "location": 641,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "matches": [
                    "None"
                ],
                "exclusive": [
                    "bool"
                ],
                "spawn": [
                    "None"
                ],
                "layout": [
                    "None"
                ],
                "layouts": [
                    "None"
                ],
                "persist": [
                    "bool"
                ],
                "init": [
                    "bool"
                ],
                "layout_opts": [
                    "None"
                ],
                "screen_affinity": [
                    "None"
                ],
                "position": [
                    "int"
                ],
                "label": [
                    "None"
                ]
            }
        },
        "Group.__repr__": {
            "name": "__repr__",
            "location": 670,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScratchPad.__init__": {
            "name": "__init__",
            "location": 712,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "dropdowns": [
                    "None"
                ],
                "position": [
                    "int"
                ],
                "label": [
                    "str"
                ],
                "single": [
                    "bool"
                ]
            }
        },
        "ScratchPad.__repr__": {
            "name": "__repr__",
            "location": 732,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Match.__init__": {
            "name": "__init__",
            "location": 771,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "None"
                ],
                "wm_class": [
                    "None"
                ],
                "role": [
                    "None"
                ],
                "wm_type": [
                    "None"
                ],
                "wm_instance_class": [
                    "None"
                ],
                "net_wm_pid": [
                    "None"
                ],
                "func": [
                    "None"
                ],
                "wid": [
                    "None"
                ]
            }
        },
        "Match._get_property_predicate": {
            "name": "_get_property_predicate",
            "location": 807,
            "return": [
                "Callable[(..., bool)]"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "value": []
            }
        },
        "Match.compare": {
            "name": "compare",
            "location": 827,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "base.Window"
                ]
            }
        },
        "Match.map": {
            "name": "map",
            "location": 863,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "Callable[([base.Window], Any)]"
                ],
                "clients": [
                    "List[base.Window]"
                ]
            }
        },
        "Match.__repr__": {
            "name": "__repr__",
            "location": 869,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rule.__init__": {
            "name": "__init__",
            "location": 893,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "match": [],
                "group": [
                    "None"
                ],
                "float": [
                    "bool"
                ],
                "intrusive": [
                    "bool"
                ],
                "break_on_match": [
                    "bool"
                ]
            }
        },
        "Rule.matches": {
            "name": "matches",
            "location": 910,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "w": [
                    "base.Window"
                ]
            }
        },
        "Rule.__repr__": {
            "name": "__repr__",
            "location": 913,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DropDown.__init__": {
            "name": "__init__",
            "location": 967,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "cmd": [
                    "str"
                ]
            }
        },
        "DropDown.info": {
            "name": "info",
            "location": 986,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Match._get_property_predicate.predicate": {
            "name": "predicate",
            "location": 820,
            "return": [
                "bool"
            ],
            "arguments": {
                "other": []
            }
        }
    },
    "qtile-master/libqtile/configurable.py": {
        "Configurable.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Configurable.add_defaults": {
            "name": "add_defaults",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "defaults": [
                    "dict",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "Configurable.__getattr__": {
            "name": "__getattr__",
            "location": 39,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "Configurable._find_default": {
            "name": "_find_default",
            "location": 50,
            "return": [
                "Tuple[(bool, Any)]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[str]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "ExtraFallback.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "Callable[[str], bool]",
                    "Union[str, List[str]]"
                ],
                "fallback": [
                    "int",
                    "str",
                    "Sequence",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "ExtraFallback.__get__": {
            "name": "__get__",
            "location": 72,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "owner": [
                    "None",
                    "Type['Signature']",
                    "Type[Any]"
                ]
            }
        },
        "ExtraFallback.__set__": {
            "name": "__set__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "float",
                    "int",
                    "str"
                ],
                "value": [
                    "float",
                    "int",
                    "str"
                ]
            }
        }
    },
    "qtile-master/libqtile/confreader.py": {
        "Config.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "None"
                ]
            }
        },
        "Config.update": {
            "name": "update",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config._reload_config_submodules": {
            "name": "_reload_config_submodules",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "pathlib.Path"
                ]
            }
        },
        "Config.load": {
            "name": "load",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.validate": {
            "name": "validate",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/dgroups.py": {
        "simple_key_binder": {
            "name": "simple_key_binder",
            "location": 37,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "mod": [
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "List[Dict[str, Any]]",
                    "Optional[int]"
                ],
                "keynames": [
                    "None",
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "List[Dict[str, Any]]",
                    "Optional[int]"
                ]
            }
        },
        "simple_key_binder.func": {
            "name": "func",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "dgroup": [
                    "Mapping",
                    "MutableMapping[str, Any]",
                    "Dict[str, List[Any]]",
                    "MutableMapping[str, str]"
                ]
            }
        },
        "DGroups.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtile": [
                    "str",
                    "bytes",
                    "Optional[str]"
                ],
                "dgroups": [
                    "int",
                    "Mapping[str, Any]"
                ],
                "key_binder": [
                    "None",
                    "str",
                    "List[str]"
                ],
                "delay": [
                    "int",
                    "Mapping[str, Any]"
                ]
            }
        },
        "DGroups.add_rule": {
            "name": "add_rule",
            "location": 95,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "rule": [
                    "List[List[str]]",
                    "dict",
                    "int"
                ],
                "last": [
                    "bool",
                    "List[str]",
                    "Iterable",
                    "Optional[List[str]]"
                ]
            }
        },
        "DGroups.remove_rule": {
            "name": "remove_rule",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rule_id": [
                    "int",
                    "str",
                    "Union[str, int]"
                ]
            }
        },
        "DGroups.add_dgroup": {
            "name": "add_dgroup",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "group": [
                    "str",
                    "int",
                    "dict"
                ],
                "start": [
                    "bool",
                    "int",
                    "AsyncIterator[T]"
                ]
            }
        },
        "DGroups._setup_groups": {
            "name": "_setup_groups",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DGroups._setup_hooks": {
            "name": "_setup_hooks",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DGroups._addgroup": {
            "name": "_addgroup",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "group_name": [
                    "str",
                    "Optional[bool]",
                    "Optional[str]"
                ]
            }
        },
        "DGroups._add": {
            "name": "_add",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "vimiv.config.styles.Style",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "DGroups.sort_groups": {
            "name": "sort_groups",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DGroups._del": {
            "name": "_del",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "DGroups._del.delete_client": {
            "name": "delete_client",
            "location": 239,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "qtile-master/libqtile/drawer.py": {
        "TextLayout.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "drawer": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Optional[float]"
                ],
                "text": [
                    "float",
                    "Optional[bool]",
                    "str",
                    "bool"
                ],
                "colour": [
                    "float",
                    "Optional[bool]",
                    "str",
                    "bool"
                ],
                "font_family": [
                    "Optional[bool]",
                    "str",
                    "Optional[str]"
                ],
                "font_size": [
                    "int",
                    "bool"
                ],
                "font_shadow": [
                    "float",
                    "Optional[bool]",
                    "str",
                    "bool"
                ],
                "wrap": [
                    "bool",
                    "int",
                    "str"
                ],
                "markup": [
                    "bool",
                    "float",
                    "Optional[bool]",
                    "str"
                ]
            }
        },
        "TextLayout.finalize": {
            "name": "finalize",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextLayout.finalized": {
            "name": "finalized",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextLayout.text": {
            "name": "text",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[str]",
                    "Optional[bytes]",
                    "bytes",
                    "Exception",
                    "str"
                ]
            }
        },
        "TextLayout.width": {
            "name": "width",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TextLayout.height": {
            "name": "height",
            "location": 94,
            "return": [
                "List[str]",
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextLayout.fontdescription": {
            "name": "fontdescription",
            "location": 97,
            "return": [
                "List[str]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextLayout.font_family": {
            "name": "font_family",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "font": [
                    "int",
                    "str"
                ]
            }
        },
        "TextLayout.font_size": {
            "name": "font_size",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        },
        "TextLayout.draw": {
            "name": "draw",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int",
                    "T"
                ],
                "y": [
                    "float",
                    "int",
                    "T"
                ]
            }
        },
        "TextLayout.framed": {
            "name": "framed",
            "location": 133,
            "return": [
                "TextFrame"
            ],
            "arguments": {
                "self": [],
                "border_width": [
                    "int",
                    "Optional[int]"
                ],
                "border_color": [
                    "int",
                    "Optional[int]"
                ],
                "pad_x": [
                    "int",
                    "Optional[int]"
                ],
                "pad_y": [
                    "int",
                    "Optional[int]"
                ],
                "highlight_color": [
                    "None",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "TextFrame.__init__": {
            "name": "__init__",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "layout": [
                    "int",
                    "Dict[str, Any]",
                    "bytes",
                    "List[int]",
                    "bool",
                    "List[float]"
                ],
                "border_width": [
                    "int",
                    "Optional[int]",
                    "bool"
                ],
                "border_color": [
                    "int",
                    "Dict[str, Any]",
                    "bytes",
                    "List[int]",
                    "bool",
                    "List[float]"
                ],
                "pad_x": [
                    "int",
                    "Dict[str, Any]",
                    "bytes",
                    "List[int]",
                    "bool",
                    "List[float]"
                ],
                "pad_y": [
                    "int",
                    "Dict[str, Any]",
                    "bytes",
                    "List[int]",
                    "bool",
                    "List[float]"
                ],
                "highlight_color": [
                    "None",
                    "int",
                    "Dict[str, Any]",
                    "bytes",
                    "List[int]",
                    "bool",
                    "List[float]"
                ]
            }
        },
        "TextFrame.draw": {
            "name": "draw",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "Dict[int, Tuple[int, int]]"
                ],
                "y": [
                    "int",
                    "Dict[int, Tuple[int, int]]"
                ],
                "rounded": [
                    "bool",
                    "int",
                    "str",
                    "Iterable['cirq.Qid']",
                    "Optional[T]"
                ],
                "fill": [
                    "bool",
                    "int",
                    "str",
                    "Iterable['cirq.Qid']",
                    "Optional[T]"
                ],
                "line": [
                    "bool",
                    "int",
                    "str",
                    "Iterable['cirq.Qid']",
                    "Optional[T]"
                ],
                "highlight": [
                    "bool",
                    "int",
                    "str",
                    "Iterable['cirq.Qid']",
                    "Optional[T]"
                ]
            }
        },
        "TextFrame.draw_fill": {
            "name": "draw_fill",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "Tuple[int]"
                ],
                "y": [
                    "float",
                    "Tuple[int]"
                ],
                "rounded": [
                    "bool",
                    "float",
                    "Tuple[int]"
                ]
            }
        },
        "TextFrame.draw_line": {
            "name": "draw_line",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int",
                    "Tuple[float, float]"
                ],
                "y": [
                    "float",
                    "int",
                    "Tuple[float, float]"
                ],
                "highlighted": [
                    "float",
                    "int",
                    "Tuple[float, float]"
                ]
            }
        },
        "TextFrame.height": {
            "name": "height",
            "location": 199,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextFrame.width": {
            "name": "width",
            "location": 203,
            "return": [
                "bool",
                "raiden.utils.ChannelID",
                "dict",
                "int",
                "List[int]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/group.py": {
        "_Group.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional['InstrumentBase']"
                ],
                "layout": [
                    "None",
                    "bool",
                    "str",
                    "Callable",
                    "Union[tuple, list]",
                    "int"
                ],
                "label": [
                    "None",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "_Group._configure": {
            "name": "_configure",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "layouts": [
                    "list"
                ],
                "floating_layout": [
                    "int",
                    "float",
                    "str"
                ],
                "qtile": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_Group.current_window": {
            "name": "current_window",
            "location": 91,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "win": [
                    "int",
                    "bool",
                    "bytearray",
                    "Dict[str, Callable[[str], Any]]"
                ]
            }
        },
        "_Group._remove_from_focus_history": {
            "name": "_remove_from_focus_history",
            "location": 99,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "win": [
                    "str",
                    "int",
                    "dict",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "_Group.layout": {
            "name": "layout",
            "location": 115,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {
                "self": [],
                "layout": [
                    "List[str]",
                    "Union[str, List[str]]",
                    "str",
                    "Pattern"
                ]
            }
        },
        "_Group.use_layout": {
            "name": "use_layout",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str",
                    "list",
                    "List[int]",
                    "List[str]"
                ]
            }
        },
        "_Group.use_next_layout": {
            "name": "use_next_layout",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Group.use_previous_layout": {
            "name": "use_previous_layout",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Group.layout_all": {
            "name": "layout_all",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "warp": [
                    "bool",
                    "int",
                    "Callable[..., None]"
                ]
            }
        },
        "_Group.set_screen": {
            "name": "set_screen",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "screen": [
                    "str",
                    "Callable",
                    "Sequence[int]"
                ],
                "warp": [
                    "bool",
                    "dict"
                ]
            }
        },
        "_Group.hide": {
            "name": "hide",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Group.focus": {
            "name": "focus",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "win": [
                    "int",
                    "str",
                    "List[str]",
                    "Dict[utils.types.Id, List[Any]]",
                    "dict",
                    "bool"
                ],
                "warp": [
                    "bool",
                    "int",
                    "str",
                    "bytes"
                ],
                "force": [
                    "bool",
                    "int",
                    "str",
                    "float",
                    "[str]",
                    "bytes"
                ]
            }
        },
        "_Group.info": {
            "name": "info",
            "location": 234,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Group.add": {
            "name": "add",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "win": [
                    "dict",
                    "str",
                    "Tuple[bool, str]",
                    "int",
                    "float"
                ],
                "focus": [
                    "bool",
                    "str",
                    "List[T]",
                    "List[str]"
                ],
                "force": [
                    "bool",
                    "str",
                    "List[T]",
                    "List[str]"
                ]
            }
        },
        "_Group.remove": {
            "name": "remove",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "win": [
                    "int",
                    "Optional[bool]",
                    "Optional[float]",
                    "Optional[Callable]",
                    "T",
                    "Callable[[dict], None]",
                    "List[str]",
                    "str"
                ],
                "force": [
                    "bool",
                    "str",
                    "dict",
                    "Dict[utils.types.Id, List[Any]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "_Group.mark_floating": {
            "name": "mark_floating",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "win": [
                    "str",
                    "Dict[str, Any]",
                    "Final",
                    "Optional[float]"
                ],
                "floating": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "_Group._items": {
            "name": "_items",
            "location": 337,
            "return": [
                "Optional[Tuple[(bool, list)]]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[str]",
                    "Optional[int]",
                    "Sequence[int]",
                    "Optional[Dict[str, Any]]",
                    "bool",
                    "str",
                    "Callable[[], None]",
                    "Optional[Any]"
                ]
            }
        },
        "_Group._select": {
            "name": "_select",
            "location": 346,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "sel": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "_Group.cmd_setlayout": {
            "name": "cmd_setlayout",
            "location": 361,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "layout": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_Group.cmd_info": {
            "name": "cmd_info",
            "location": 364,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Group.cmd_toscreen": {
            "name": "cmd_toscreen",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "screen": [
                    "None",
                    "Optional[int]",
                    "Dict[str, Any]",
                    "int"
                ],
                "toggle": [
                    "bool",
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict"
                ]
            }
        },
        "_Group._get_group": {
            "name": "_get_group",
            "location": 400,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "direction": [
                    "str",
                    "int",
                    "List[List[str]]",
                    "list",
                    "bool"
                ],
                "skip_empty": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ],
                "skip_managed": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "_Group.get_previous_group": {
            "name": "get_previous_group",
            "location": 428,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "skip_empty": [
                    "bool",
                    "str"
                ],
                "skip_managed": [
                    "bool",
                    "str"
                ]
            }
        },
        "_Group.get_next_group": {
            "name": "get_next_group",
            "location": 431,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "skip_empty": [
                    "bool",
                    "str"
                ],
                "skip_managed": [
                    "bool",
                    "str"
                ]
            }
        },
        "_Group.cmd_unminimize_all": {
            "name": "cmd_unminimize_all",
            "location": 434,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Group.cmd_next_window": {
            "name": "cmd_next_window",
            "location": 440,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Group.cmd_prev_window": {
            "name": "cmd_prev_window",
            "location": 464,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Group.cmd_focus_back": {
            "name": "cmd_focus_back",
            "location": 488,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Group.cmd_focus_by_name": {
            "name": "cmd_focus_by_name",
            "location": 503,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Union[str, None]"
                ]
            }
        },
        "_Group.cmd_info_by_name": {
            "name": "cmd_info_by_name",
            "location": 513,
            "return": [
                "str",
                "bool",
                "Optional[List[str]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Union[str, None]"
                ]
            }
        },
        "_Group.cmd_switch_groups": {
            "name": "cmd_switch_groups",
            "location": 522,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int"
                ]
            }
        },
        "_Group.cmd_set_label": {
            "name": "cmd_set_label",
            "location": 526,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "Dict[str, List[str]]",
                    "Set[str]",
                    "str",
                    "Optional[Dict[str, str]]",
                    "Optional[dict]",
                    "Optional[Tuple[float, float]]",
                    "Optional[str]"
                ]
            }
        },
        "_Group.__repr__": {
            "name": "__repr__",
            "location": 535,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Group._get_group.match": {
            "name": "match",
            "location": 411,
            "return": [
                "bool"
            ],
            "arguments": {
                "group": [
                    "str",
                    "Type['Frame']",
                    "hackathon.utils.utils.DataMessage"
                ]
            }
        }
    },
    "qtile-master/libqtile/hook.py": {
        "clear": {
            "name": "clear",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_fire_async_event": {
            "name": "_fire_async_event",
            "location": 381,
            "return": [
                "None"
            ],
            "arguments": {
                "co": [
                    "asyncio.AbstractEventLoop",
                    "asyncio.futures.Future[Any]"
                ]
            }
        },
        "fire": {
            "name": "fire",
            "location": 392,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "dict"
                ]
            }
        },
        "Subscribe.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Subscribe._subscribe": {
            "name": "_subscribe",
            "location": 55,
            "return": [
                "_T1"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Optional[str]",
                    "Optional[int]",
                    "int",
                    "str",
                    "bool"
                ],
                "func": [
                    "_T1"
                ]
            }
        },
        "Subscribe.startup_once": {
            "name": "startup_once",
            "location": 61,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "_T0"
                ]
            }
        },
        "Subscribe.startup": {
            "name": "startup",
            "location": 73,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "_T0"
                ]
            }
        },
        "Subscribe.startup_complete": {
            "name": "startup_complete",
            "location": 82,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "_T0"
                ]
            }
        },
        "Subscribe.shutdown": {
            "name": "shutdown",
            "location": 91,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "_T0"
                ]
            }
        },
        "Subscribe.restart": {
            "name": "restart",
            "location": 100,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "_T0"
                ]
            }
        },
        "Subscribe.setgroup": {
            "name": "setgroup",
            "location": 109,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "_T0"
                ]
            }
        },
        "Subscribe.addgroup": {
            "name": "addgroup",
            "location": 118,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "_T0"
                ]
            }
        },
        "Subscribe.delgroup": {
            "name": "delgroup",
            "location": 127,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "_T0"
                ]
            }
        },
        "Subscribe.changegroup": {
            "name": "changegroup",
            "location": 136,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "_T0"
                ]
            }
        },
        "Subscribe.focus_change": {
            "name": "focus_change",
            "location": 145,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "_T0"
                ]
            }
        },
        "Subscribe.float_change": {
            "name": "float_change",
            "location": 155,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "_T0"
                ]
            }
        },
        "Subscribe.group_window_add": {
            "name": "group_window_add",
            "location": 164,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "_T0"
                ]
            }
        },
        "Subscribe.client_new": {
            "name": "client_new",
            "location": 174,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "_T0"
                ]
            }
        },
        "Subscribe.client_managed": {
            "name": "client_managed",
            "location": 198,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "_T0"
                ]
            }
        },
        "Subscribe.client_killed": {
            "name": "client_killed",
            "location": 210,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "_T0"
                ]
            }
        },
        "Subscribe.client_focus": {
            "name": "client_focus",
            "location": 219,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "_T0"
                ]
            }
        },
        "Subscribe.client_mouse_enter": {
            "name": "client_mouse_enter",
            "location": 228,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "_T0"
                ]
            }
        },
        "Subscribe.client_name_updated": {
            "name": "client_name_updated",
            "location": 237,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "_T0"
                ]
            }
        },
        "Subscribe.client_urgent_hint_changed": {
            "name": "client_urgent_hint_changed",
            "location": 246,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "_T0"
                ]
            }
        },
        "Subscribe.layout_change": {
            "name": "layout_change",
            "location": 255,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "_T0"
                ]
            }
        },
        "Subscribe.net_wm_icon_change": {
            "name": "net_wm_icon_change",
            "location": 265,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "_T0"
                ]
            }
        },
        "Subscribe.selection_notify": {
            "name": "selection_notify",
            "location": 274,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "_T0"
                ]
            }
        },
        "Subscribe.selection_change": {
            "name": "selection_change",
            "location": 285,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "_T0"
                ]
            }
        },
        "Subscribe.screen_change": {
            "name": "screen_change",
            "location": 296,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "_T0"
                ]
            }
        },
        "Subscribe.screens_reconfigured": {
            "name": "screens_reconfigured",
            "location": 306,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "_T0"
                ]
            }
        },
        "Subscribe.current_screen_change": {
            "name": "current_screen_change",
            "location": 316,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "_T0"
                ]
            }
        },
        "Subscribe.enter_chord": {
            "name": "enter_chord",
            "location": 325,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "_T0"
                ]
            }
        },
        "Subscribe.leave_chord": {
            "name": "leave_chord",
            "location": 334,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "_T0"
                ]
            }
        },
        "Subscribe.resume": {
            "name": "resume",
            "location": 343,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "_T0"
                ]
            }
        },
        "Unsubscribe._subscribe": {
            "name": "_subscribe",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Optional[str]",
                    "Optional[int]",
                    "int",
                    "str",
                    "bool"
                ],
                "func": [
                    "int",
                    "raiden.utils.TokenAmount",
                    "Union[str, float]",
                    "float",
                    "str",
                    "raiden.utils.Locksroot"
                ]
            }
        }
    },
    "qtile-master/libqtile/images.py": {
        "_decode_to_image_surface": {
            "name": "_decode_to_image_surface",
            "location": 38,
            "return": [
                "_SurfaceInfo"
            ],
            "arguments": {
                "bytes_img": [
                    "int",
                    "bool"
                ],
                "width": [
                    "None",
                    "Optional[int]",
                    "List[str]",
                    "Sequence[Sequence[Any]]",
                    "Sequence['cirq.Qid']",
                    "Iterable[float]"
                ],
                "height": [
                    "None",
                    "Optional[int]",
                    "List[str]",
                    "Sequence[Sequence[Any]]",
                    "Sequence['cirq.Qid']",
                    "Iterable[float]"
                ]
            }
        },
        "get_cairo_surface": {
            "name": "get_cairo_surface",
            "location": 54,
            "return": [
                "_SurfaceInfo"
            ],
            "arguments": {
                "bytes_img": [
                    "io.BytesIO"
                ],
                "width": [
                    "None",
                    "int",
                    "Callable"
                ],
                "height": [
                    "None",
                    "int",
                    "Callable"
                ]
            }
        },
        "get_cairo_pattern": {
            "name": "get_cairo_pattern",
            "location": 63,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "surface": [
                    "int",
                    "bool"
                ],
                "width": [
                    "None",
                    "Optional[int]",
                    "int",
                    "float"
                ],
                "height": [
                    "None",
                    "int",
                    "Optional[int]",
                    "Optional[float]",
                    "Union[int, None]"
                ],
                "theta": [
                    "float",
                    "int",
                    "Union[str, float]",
                    "bool"
                ]
            }
        },
        "_Descriptor.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "cmk.utils.type_defs.HostNameConditions"
                ],
                "default": [
                    "None",
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "_Descriptor.__get__": {
            "name": "__get__",
            "location": 108,
            "return": [
                "_Descriptor",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "Optional[bool]",
                    "bool",
                    "dict"
                ],
                "cls": [
                    "type",
                    "Type",
                    "Callable",
                    "Optional[type]",
                    "raiden.utils.Any",
                    "Callable[[], None]"
                ]
            }
        },
        "_Descriptor.get_default": {
            "name": "get_default",
            "location": 117,
            "return": [
                "list",
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bool",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "int",
                    "T",
                    "Mapping[str, Any]",
                    "List[dict]"
                ]
            }
        },
        "_Descriptor.__set__": {
            "name": "__set__",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "Optional[Iterable]"
                ],
                "value": [
                    "str",
                    "Optional[Iterable]"
                ]
            }
        },
        "_Descriptor.__delete__": {
            "name": "__delete__",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "dict",
                    "Dict[str, List[str]]",
                    "Callable[[KT, VT], bool]",
                    "Dict[str, Any]"
                ]
            }
        },
        "_Resetter.__set__": {
            "name": "__set__",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "List[str]",
                    "Dict[str, str]",
                    "int",
                    "str"
                ],
                "value": [
                    "str",
                    "List[str]",
                    "list",
                    "Dict[Any, list]",
                    "List[int]",
                    "Optional[str]"
                ]
            }
        },
        "_PixelSize.__set__": {
            "name": "__set__",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "List[str]",
                    "list",
                    "Dict[Any, list]",
                    "List[int]",
                    "Optional[str]"
                ],
                "value": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "cmk.gui.plugins.metrics.utils.TranslatedMetrics"
                ]
            }
        },
        "_PixelSize.get_default": {
            "name": "get_default",
            "location": 138,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "Tuple[int, int]",
                    "int"
                ]
            }
        },
        "_Rotation.__set__": {
            "name": "__set__",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "List[str]",
                    "list",
                    "Dict[Any, list]",
                    "List[int]",
                    "Optional[str]"
                ],
                "value": [
                    "float",
                    "str",
                    "int",
                    "Dict[str, List[float]]"
                ]
            }
        },
        "Img.__init__": {
            "name": "__init__",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bytes_img": [
                    "str",
                    "bytes",
                    "Dict[str, str]",
                    "Tuple[int, int]",
                    "Optional[str]"
                ],
                "name": [
                    "typing.Text",
                    "str",
                    "List[str]"
                ],
                "path": [
                    "typing.Text",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Img._reset": {
            "name": "_reset",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Img.from_path": {
            "name": "from_path",
            "location": 180,
            "return": [
                "Img"
            ],
            "arguments": {
                "cls": [
                    "Type[_TImg]"
                ],
                "image_path": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "Img.default_surface": {
            "name": "default_surface",
            "location": 189,
            "return": [
                "list",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Img.default_size": {
            "name": "default_size",
            "location": 198,
            "return": [
                "int",
                "Union['AbstractSetIntStr', 'MappingIntStrAny']",
                "Dict[str, int]",
                "Union[int, float, complex]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Img.resize": {
            "name": "resize",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "width": [
                    "None",
                    "int",
                    "bool",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "height": [
                    "None",
                    "int",
                    "bool",
                    "Optional[int]",
                    "Optional[float]"
                ]
            }
        },
        "Img.scale": {
            "name": "scale",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "width_factor": [
                    "None",
                    "int",
                    "Optional[str]",
                    "bool",
                    "float"
                ],
                "height_factor": [
                    "None",
                    "int",
                    "Optional[str]",
                    "bool",
                    "float"
                ],
                "lock_aspect_ratio": [
                    "bool",
                    "Optional[List[str]]"
                ]
            }
        },
        "Img._scale_lock": {
            "name": "_scale_lock",
            "location": 235,
            "return": [
                "_ImgSize"
            ],
            "arguments": {
                "width_factor": [
                    "int",
                    "float"
                ],
                "height_factor": [
                    "int",
                    "float"
                ],
                "initial_size": [
                    "int",
                    "float"
                ]
            }
        },
        "Img._scale_free": {
            "name": "_scale_free",
            "location": 252,
            "return": [
                "_ImgSize"
            ],
            "arguments": {
                "width_factor": [
                    "int",
                    "Optional[int]",
                    "List[float]",
                    "float"
                ],
                "height_factor": [
                    "int",
                    "Optional[int]",
                    "List[float]",
                    "float"
                ],
                "initial_size": [
                    "int",
                    "float"
                ]
            }
        },
        "Img.surface": {
            "name": "surface",
            "location": 268,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Img.pattern": {
            "name": "pattern",
            "location": 284,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Img.__repr__": {
            "name": "__repr__",
            "location": 290,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Img.__eq__": {
            "name": "__eq__",
            "location": 300,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "dict",
                    "raiden.utils.Any"
                ]
            }
        },
        "Loader.__init__": {
            "name": "__init__",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Loader.__call__": {
            "name": "__call__",
            "location": 321,
            "return": [
                "Dict[(str, Img)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/ipc.py": {
        "find_sockfile": {
            "name": "find_sockfile",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "display": [
                    "None",
                    "str",
                    "Optional[int]",
                    "bytes"
                ]
            }
        },
        "_IPC.unpack": {
            "name": "unpack",
            "location": 95,
            "return": [
                "Tuple[(Any, bool)]"
            ],
            "arguments": {
                "data": [
                    "bytes"
                ]
            }
        },
        "_IPC.pack": {
            "name": "pack",
            "location": 129,
            "return": [
                "bytes"
            ],
            "arguments": {
                "msg": [
                    "int",
                    "Sequence"
                ]
            }
        },
        "_IPC._json_encoder": {
            "name": "_json_encoder",
            "location": 140,
            "return": [
                "list",
                "List[str]",
                "Optional[Iterable[str]]",
                "Tuple[str]",
                "Callable"
            ],
            "arguments": {
                "field": [
                    "str"
                ]
            }
        },
        "Client.__init__": {
            "name": "__init__",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "socket_path": [
                    "str"
                ],
                "is_json": [
                    "bool",
                    "str",
                    "Sequence[str]",
                    "dict"
                ]
            }
        },
        "Client.call": {
            "name": "call",
            "location": 162,
            "return": [
                "raiden.utils.signer.Signer",
                "dict",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "T",
                    "bytes",
                    "Union[bytes, bytearray, memoryview]"
                ]
            }
        },
        "Client.send": {
            "name": "send",
            "location": 165,
            "return": [
                "int",
                "dict",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "List[str]",
                    "str",
                    "torch.utils.data.DataLoader"
                ]
            }
        },
        "Server.__init__": {
            "name": "__init__",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "socket_path": [
                    "str"
                ],
                "handler": [
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "qtile-master/libqtile/lazy.py": {
        "LazyCall.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "call": [
                    "libqtile.command.graph.CommandGraphCall"
                ],
                "args": [
                    "tuple"
                ],
                "kwargs": [
                    "dict"
                ]
            }
        },
        "LazyCall.__call__": {
            "name": "__call__",
            "location": 57,
            "return": [
                "LazyCall"
            ],
            "arguments": {
                "self": [
                    "_TLazyCall"
                ]
            }
        },
        "LazyCall.selectors": {
            "name": "selectors",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LazyCall.name": {
            "name": "name",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LazyCall.args": {
            "name": "args",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LazyCall.kwargs": {
            "name": "kwargs",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LazyCall.when": {
            "name": "when",
            "location": 94,
            "return": [
                "LazyCall"
            ],
            "arguments": {
                "self": [
                    "_TLazyCall"
                ],
                "focused": [
                    "None"
                ],
                "if_no_focused": [
                    "bool"
                ],
                "layout": [
                    "None"
                ],
                "when_floating": [
                    "bool"
                ]
            }
        },
        "LazyCall.check": {
            "name": "check",
            "location": 131,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "q": []
            }
        },
        "LazyCommandInterface.execute": {
            "name": "execute",
            "location": 157,
            "return": [
                "LazyCall"
            ],
            "arguments": {
                "self": [],
                "call": [
                    "libqtile.command.graph.CommandGraphCall"
                ],
                "args": [
                    "tuple"
                ],
                "kwargs": [
                    "dict"
                ]
            }
        },
        "LazyCommandInterface.has_command": {
            "name": "has_command",
            "location": 161,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "libqtile.command.graph.CommandGraphNode"
                ],
                "command": [
                    "str"
                ]
            }
        },
        "LazyCommandInterface.has_item": {
            "name": "has_item",
            "location": 165,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "libqtile.command.graph.CommandGraphNode"
                ],
                "object_type": [
                    "str"
                ],
                "item": []
            }
        }
    },
    "qtile-master/libqtile/log_utils.py": {
        "get_default_log": {
            "name": "get_default_log",
            "location": 81,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {}
        },
        "init_log": {
            "name": "init_log",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "log_level": [
                    "int"
                ],
                "log_path": [
                    "None",
                    "bool",
                    "Optional[int]",
                    "Optional[str]",
                    "Union[str, pathlib.Path]"
                ],
                "log_size": [
                    "int"
                ],
                "log_numbackups": [
                    "int"
                ],
                "logger": [
                    "logging.Logger"
                ]
            }
        },
        "ColorFormatter.format": {
            "name": "format",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "logging.LogRecord"
                ]
            }
        }
    },
    "qtile-master/libqtile/notify.py": {
        "NotificationService.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "NotificationService.GetCapabilities": {
            "name": "GetCapabilities",
            "location": 60,
            "return": [
                "list",
                "str",
                "List[Dict]",
                "List[int]",
                "List[List[Any]]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotificationService.register_capabilities": {
            "name": "register_capabilities",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "capabilities": [
                    "Optional[Union[str, Any]]",
                    "dict",
                    "str"
                ]
            }
        },
        "NotificationService.Notify": {
            "name": "Notify",
            "location": 70,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "app_name": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "replaces_id": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "app_icon": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "summary": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "body": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "actions": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "hints": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "timeout": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "NotificationService.CloseNotification": {
            "name": "CloseNotification",
            "location": 87,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "nid": [
                    "Dict[str, Any]",
                    "asyncio.AbstractEventLoop"
                ]
            }
        },
        "NotificationService.NotificationClosed": {
            "name": "NotificationClosed",
            "location": 91,
            "return": [
                "list",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "nid": [
                    "int",
                    "Callable",
                    "str"
                ],
                "reason": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "NotificationService.ActionInvoked": {
            "name": "ActionInvoked",
            "location": 97,
            "return": [
                "list",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "nid": [
                    "bytes",
                    "str",
                    "List[str]",
                    "int",
                    "Tuple[int, int]",
                    "Optional[bytes]"
                ],
                "action_key": [
                    "bytes",
                    "str",
                    "List[str]",
                    "int",
                    "Tuple[int, int]",
                    "Optional[bytes]"
                ]
            }
        },
        "NotificationService.GetServerInformation": {
            "name": "GetServerInformation",
            "location": 103,
            "return": [
                "list[typing.Text]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Notification.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "summary": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "list"
                ],
                "body": [
                    "typing.Text",
                    "str",
                    "bool",
                    "Optional[str]",
                    "list"
                ],
                "timeout": [
                    "int",
                    "str",
                    "bool",
                    "Optional[str]",
                    "list"
                ],
                "hints": [
                    "None",
                    "str",
                    "bool",
                    "Optional[str]",
                    "list"
                ],
                "app_name": [
                    "typing.Text",
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "replaces_id": [
                    "None",
                    "str",
                    "int"
                ],
                "app_icon": [
                    "None",
                    "str",
                    "dict",
                    "bool",
                    "Any"
                ],
                "actions": [
                    "None",
                    "str",
                    "bool",
                    "Optional[str]",
                    "list"
                ]
            }
        },
        "NotificationManager.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotificationManager.unregister": {
            "name": "unregister",
            "location": 159,
            "return": [
                "Optional[asyncio.tasks.Task[None]]"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "int",
                    "Callable",
                    "str"
                ],
                "on_close": [
                    "None",
                    "int",
                    "bool",
                    "bytes",
                    "AsyncGenerator",
                    "Coroutine"
                ]
            }
        },
        "NotificationManager.add": {
            "name": "add",
            "location": 188,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "notif": [
                    "list",
                    "str",
                    "List[int]",
                    "List[bytes]",
                    "List[List[int]]",
                    "List[str]"
                ]
            }
        },
        "NotificationManager.show": {
            "name": "show",
            "location": 198,
            "return": [
                "Tuple[(Notification, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotificationManager.close": {
            "name": "close",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nid": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "qtile-master/libqtile/pangocffi.py": {
        "patch_cairo_context": {
            "name": "patch_cairo_context",
            "location": 60,
            "return": [
                "_T0"
            ],
            "arguments": {
                "cairo_t": [
                    "_T0"
                ]
            }
        },
        "parse_markup": {
            "name": "parse_markup",
            "location": 177,
            "return": [
                "Tuple[(Any, Any, str)]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "int"
                ],
                "accel_marker": [
                    "int",
                    "T",
                    "str",
                    "Union[int, float]",
                    "Optional[str]",
                    "list"
                ]
            }
        },
        "markup_escape_text": {
            "name": "markup_escape_text",
            "location": 191,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "patch_cairo_context.create_layout": {
            "name": "create_layout",
            "location": 61,
            "return": [
                "PangoLayout",
                "int",
                "str",
                "List[int]"
            ],
            "arguments": {}
        },
        "patch_cairo_context.show_layout": {
            "name": "show_layout",
            "location": 66,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "layout": [
                    "float"
                ]
            }
        },
        "PangoLayout.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cairo_t": [
                    "Optional[bool]",
                    "str",
                    "bool",
                    "int",
                    "Iterable"
                ]
            }
        },
        "PangoLayout.finalize": {
            "name": "finalize",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PangoLayout.finalized": {
            "name": "finalized",
            "location": 102,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PangoLayout.set_font_description": {
            "name": "set_font_description",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "desc": [
                    "str",
                    "int"
                ]
            }
        },
        "PangoLayout.get_font_description": {
            "name": "get_font_description",
            "location": 110,
            "return": [
                "FontDescription"
            ],
            "arguments": {
                "self": []
            }
        },
        "PangoLayout.set_alignment": {
            "name": "set_alignment",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "alignment": [
                    "str",
                    "int"
                ]
            }
        },
        "PangoLayout.set_attributes": {
            "name": "set_attributes",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attrs": [
                    "str",
                    "int"
                ]
            }
        },
        "PangoLayout.set_text": {
            "name": "set_text",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "bytes",
                    "AnyStr",
                    "Union[str, bytes]"
                ]
            }
        },
        "PangoLayout.get_text": {
            "name": "get_text",
            "location": 124,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PangoLayout.set_ellipsize": {
            "name": "set_ellipsize",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ellipzize": [
                    "str",
                    "int"
                ]
            }
        },
        "PangoLayout.get_ellipsize": {
            "name": "get_ellipsize",
            "location": 131,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PangoLayout.get_pixel_size": {
            "name": "get_pixel_size",
            "location": 134,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PangoLayout.set_width": {
            "name": "set_width",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "width": [
                    "int",
                    "List[int]",
                    "float"
                ]
            }
        },
        "FontDescription.__init__": {
            "name": "__init__",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pointer": [
                    "None",
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "Optional[bool]"
                ]
            }
        },
        "FontDescription.from_string": {
            "name": "from_string",
            "location": 155,
            "return": [
                "FontDescription"
            ],
            "arguments": {
                "cls": [
                    "Type[_TFontDescription]"
                ],
                "string": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "FontDescription.set_family": {
            "name": "set_family",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "family": [
                    "str",
                    "bytes"
                ]
            }
        },
        "FontDescription.get_family": {
            "name": "get_family",
            "location": 163,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FontDescription.set_absolute_size": {
            "name": "set_absolute_size",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "Dict[str, bytes]",
                    "List[int]",
                    "str"
                ]
            }
        },
        "FontDescription.set_size": {
            "name": "set_size",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "FontDescription.get_size": {
            "name": "get_size",
            "location": 173,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PangoLayout.__init__.free": {
            "name": "free",
            "location": 91,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "p": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "qtile-master/libqtile/pango_ffi_build.py": {},
    "qtile-master/libqtile/popup.py": {
        "Popup.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtile": [
                    "libqtile.core.manager.Qtile"
                ],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ],
                "width": [
                    "int"
                ],
                "height": [
                    "int"
                ]
            }
        },
        "Popup.process_button_click": {
            "name": "process_button_click",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ],
                "y": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ],
                "button": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "Popup.width": {
            "name": "width",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "bool",
                    "Iterable[Any]",
                    "tuple"
                ]
            }
        },
        "Popup.height": {
            "name": "height",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "Sequence[Any]",
                    "Mapping[starfish.core.types.Axes, int]",
                    "str"
                ]
            }
        },
        "Popup.text": {
            "name": "text",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Popup.foreground": {
            "name": "foreground",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int",
                    "Collection[str]"
                ]
            }
        },
        "Popup.set_border": {
            "name": "set_border",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "color": [
                    "Union[(str, Tuple[(float, ...)])]"
                ]
            }
        },
        "Popup.clear": {
            "name": "clear",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Popup.draw_text": {
            "name": "draw_text",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "None",
                    "int",
                    "str"
                ],
                "y": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "Popup.draw": {
            "name": "draw",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Popup.place": {
            "name": "place",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Popup.unhide": {
            "name": "unhide",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Popup.draw_image": {
            "name": "draw_image",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "int",
                    "List[int]"
                ],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "Popup.hide": {
            "name": "hide",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Popup.kill": {
            "name": "kill",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/scratchpad.py": {
        "WindowVisibilityToggler.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scratchpad_name": [],
                "window": [
                    "libqtile.backend.base.Window"
                ],
                "on_focus_lost_hide": [],
                "warp_pointer": []
            }
        },
        "WindowVisibilityToggler.info": {
            "name": "info",
            "location": 68,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowVisibilityToggler.visible": {
            "name": "visible",
            "location": 78,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowVisibilityToggler.toggle": {
            "name": "toggle",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowVisibilityToggler.show": {
            "name": "show",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowVisibilityToggler.hide": {
            "name": "hide",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowVisibilityToggler.unsubscribe": {
            "name": "unsubscribe",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowVisibilityToggler.on_focus_change": {
            "name": "on_focus_change",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DropDownToggler.__init__": {
            "name": "__init__",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "window": [],
                "scratchpad_name": [],
                "ddconfig": []
            }
        },
        "DropDownToggler.info": {
            "name": "info",
            "location": 182,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "DropDownToggler.show": {
            "name": "show",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScratchPad.__init__": {
            "name": "__init__",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "typing.Text"
                ],
                "dropdowns": [
                    "None"
                ],
                "label": [
                    "typing.Text"
                ],
                "single": [
                    "bool"
                ]
            }
        },
        "ScratchPad._check_unsubscribe": {
            "name": "_check_unsubscribe",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScratchPad._spawn": {
            "name": "_spawn",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ddconfig": []
            }
        },
        "ScratchPad.on_client_new": {
            "name": "on_client_new",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "ScratchPad.on_client_killed": {
            "name": "on_client_killed",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "ScratchPad.on_float_change": {
            "name": "on_float_change",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScratchPad.cmd_dropdown_toggle": {
            "name": "cmd_dropdown_toggle",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "ScratchPad.cmd_hide_all": {
            "name": "cmd_hide_all",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScratchPad.cmd_dropdown_reconfigure": {
            "name": "cmd_dropdown_reconfigure",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "ScratchPad.cmd_dropdown_info": {
            "name": "cmd_dropdown_info",
            "location": 348,
            "return": [
                "dict[typing.Text, list]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "None"
                ]
            }
        },
        "ScratchPad.get_state": {
            "name": "get_state",
            "location": 362,
            "return": [
                "List[Tuple[(str, int, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScratchPad.restore_state": {
            "name": "restore_state",
            "location": 373,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "state": [],
                "restart": [
                    "bool"
                ]
            }
        }
    },
    "qtile-master/libqtile/sh.py": {
        "terminal_width": {
            "name": "terminal_width",
            "location": 48,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "QSh.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "libqtile.command.interface.CommandInterface"
                ],
                "completekey": [
                    "typing.Text",
                    "str",
                    "float"
                ]
            }
        },
        "QSh.complete": {
            "name": "complete",
            "location": 70,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "Dict[\"core.Edge\", \"state.State\"]",
                    "Tuple[int]",
                    "int"
                ],
                "state": [
                    "List[int]",
                    "Dict[int, bool]",
                    "List[float]",
                    "int"
                ]
            }
        },
        "QSh._complete": {
            "name": "_complete",
            "location": 77,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "buf": [
                    "BinaryIO",
                    "bytes",
                    "str",
                    "T"
                ],
                "arg": [
                    "str",
                    "type"
                ]
            }
        },
        "QSh.prompt": {
            "name": "prompt",
            "location": 101,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "QSh.columnize": {
            "name": "columnize",
            "location": 104,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "lst": [
                    "List[str]"
                ],
                "update_termwidth": [
                    "bool"
                ]
            }
        },
        "QSh._ls": {
            "name": "_ls",
            "location": 124,
            "return": [
                "Tuple[(List[str], List[str])]"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "libqtile.command.client.CommandClient"
                ],
                "object_type": [
                    "str",
                    "Optional[Dict]",
                    "dict"
                ]
            }
        },
        "QSh._find_path": {
            "name": "_find_path",
            "location": 136,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "QSh._find_node": {
            "name": "_find_node",
            "location": 146,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "libqtile.command.client.CommandClient"
                ]
            }
        },
        "QSh.do_cd": {
            "name": "do_cd",
            "location": 187,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "str",
                    "Any",
                    "Optional[Any]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "QSh.do_ls": {
            "name": "do_ls",
            "location": 215,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "str"
                ]
            }
        },
        "QSh.do_pwd": {
            "name": "do_pwd",
            "location": 243,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "bool",
                    "int",
                    "set"
                ]
            }
        },
        "QSh.do_help": {
            "name": "do_help",
            "location": 260,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "bool",
                    "str",
                    "bytes"
                ]
            }
        },
        "QSh.do_exit": {
            "name": "do_exit",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "QSh.process_line": {
            "name": "process_line",
            "location": 310,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str"
                ]
            }
        },
        "QSh.loop": {
            "name": "loop",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/utils.py": {
        "lget": {
            "name": "lget",
            "location": 60,
            "return": [
                "None",
                "int",
                "Union[int, None]",
                "Optional[str]"
            ],
            "arguments": {
                "o": [
                    "List[T]"
                ],
                "v": [
                    "int"
                ]
            }
        },
        "rgb": {
            "name": "rgb",
            "location": 67,
            "return": [
                "Tuple[(float, float, float, float)]"
            ],
            "arguments": {
                "x": [
                    "Union[(str, Tuple[(float, ...)])]"
                ]
            }
        },
        "hex": {
            "name": "hex",
            "location": 109,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "Union[(str, Tuple[(float, ...)])]"
                ]
            }
        },
        "has_transparency": {
            "name": "has_transparency",
            "location": 114,
            "return": [
                "bool"
            ],
            "arguments": {
                "colour": [
                    "Union[(str, List[Union[(str, Tuple[(float, ...)])]], Tuple[(float, ...)])]"
                ]
            }
        },
        "remove_transparency": {
            "name": "remove_transparency",
            "location": 126,
            "return": [
                "Union[(list, Tuple[(float, ...)])]"
            ],
            "arguments": {
                "colour": [
                    "Union[(str, List[Union[(str, Tuple[(float, ...)])]], Tuple[(float, ...)])]"
                ]
            }
        },
        "scrub_to_utf8": {
            "name": "scrub_to_utf8",
            "location": 135,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Optional[str]",
                    "bytes"
                ]
            }
        },
        "get_cache_dir": {
            "name": "get_cache_dir",
            "location": 144,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "describe_attributes": {
            "name": "describe_attributes",
            "location": 159,
            "return": [
                "str"
            ],
            "arguments": {
                "obj": [
                    "tuple",
                    "Dict[str, Any]",
                    "Type[\"SerializationDialect\"]"
                ],
                "attrs": [
                    "List[str]"
                ],
                "func": [
                    "Callable"
                ]
            }
        },
        "import_class": {
            "name": "import_class",
            "location": 175,
            "return": [
                "type",
                "IO",
                "dict"
            ],
            "arguments": {
                "module_path": [
                    "str"
                ],
                "class_name": [
                    "str"
                ],
                "fallback": [
                    "None",
                    "Callable[[str], str]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "lazify_imports": {
            "name": "lazify_imports",
            "location": 196,
            "return": [
                "Tuple[(Tuple[(str, ...)], Callable, Callable)]"
            ],
            "arguments": {
                "registry": [
                    "Dict[(str, str)]"
                ],
                "package": [
                    "str"
                ],
                "fallback": [
                    "None",
                    "Iterable[str]",
                    "str",
                    "float"
                ]
            }
        },
        "send_notification": {
            "name": "send_notification",
            "location": 220,
            "return": [
                "int"
            ],
            "arguments": {
                "title": [
                    "str"
                ],
                "message": [
                    "str"
                ],
                "urgent": [
                    "bool"
                ],
                "timeout": [
                    "int"
                ],
                "id_": [
                    "None",
                    "Optional[bytes]",
                    "T",
                    "Optional[float]",
                    "Optional[Any]",
                    "str"
                ]
            }
        },
        "guess_terminal": {
            "name": "guess_terminal",
            "location": 290,
            "return": [
                "typing.Text",
                "Optional[str]",
                "None",
                "list",
                "str"
            ],
            "arguments": {
                "preference": [
                    "None",
                    "str",
                    "discord.Message"
                ]
            }
        },
        "scan_files": {
            "name": "scan_files",
            "location": 332,
            "return": [
                "collections.defaultdict[(str, List[str])]"
            ],
            "arguments": {
                "dirpath": [
                    "str"
                ]
            }
        },
        "subscribe_for_resume_events": {
            "name": "subscribe_for_resume_events",
            "location": 488,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_resume_callback": {
            "name": "_resume_callback",
            "location": 502,
            "return": [
                "None"
            ],
            "arguments": {
                "task": [
                    "asyncio.tasks.Task"
                ]
            }
        },
        "on_resume": {
            "name": "on_resume",
            "location": 508,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "Message",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "lazify_imports.__dir__": {
            "name": "__dir__",
            "location": 208,
            "return": [
                "List[str]",
                "str",
                "Optional[Iterable[str]]"
            ],
            "arguments": {}
        },
        "lazify_imports.__getattr__": {
            "name": "__getattr__",
            "location": 211,
            "return": [
                "int",
                "Message"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "qtile-master/libqtile/__init__.py": {
        "init": {
            "name": "init",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "q": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "qtile-master/libqtile/backend/base.py": {
        "Core.name": {
            "name": "name",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Core._items": {
            "name": "_items",
            "location": 35,
            "return": [
                "Optional[Tuple[(bool, list)]]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Core._select": {
            "name": "_select",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "sel": []
            }
        },
        "Core.finalize": {
            "name": "finalize",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Core.display_name": {
            "name": "display_name",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Core.setup_listener": {
            "name": "setup_listener",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtile": [
                    "libqtile.core.manager.Qtile"
                ]
            }
        },
        "Core.remove_listener": {
            "name": "remove_listener",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Core.update_desktops": {
            "name": "update_desktops",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "groups": [
                    "List[libqtile.group._Group]"
                ],
                "index": [
                    "int"
                ]
            }
        },
        "Core.get_screen_info": {
            "name": "get_screen_info",
            "location": 62,
            "return": [
                "List[Tuple[(int, int, int, int)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Core.grab_key": {
            "name": "grab_key",
            "location": 66,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Core.ungrab_key": {
            "name": "ungrab_key",
            "location": 70,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Core.ungrab_keys": {
            "name": "ungrab_keys",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Core.grab_button": {
            "name": "grab_button",
            "location": 78,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "mouse": [
                    "config.Mouse"
                ]
            }
        },
        "Core.ungrab_buttons": {
            "name": "ungrab_buttons",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Core.grab_pointer": {
            "name": "grab_pointer",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Core.ungrab_pointer": {
            "name": "ungrab_pointer",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Core.distribute_windows": {
            "name": "distribute_windows",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "initial": [
                    "bool"
                ]
            }
        },
        "Core.warp_pointer": {
            "name": "warp_pointer",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "Core.update_client_list": {
            "name": "update_client_list",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "windows_map": [
                    "Dict[(int, Union[(Internal, Static, Window)])]"
                ]
            }
        },
        "Core.masked": {
            "name": "masked",
            "location": 103,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "Core.create_internal": {
            "name": "create_internal",
            "location": 107,
            "return": [
                "Internal"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ],
                "width": [
                    "int"
                ],
                "height": [
                    "int"
                ]
            }
        },
        "Core.flush": {
            "name": "flush",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Core.graceful_shutdown": {
            "name": "graceful_shutdown",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Core.simulate_keypress": {
            "name": "simulate_keypress",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "modifiers": [
                    "List[str]"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "Core.keysym_from_name": {
            "name": "keysym_from_name",
            "location": 120,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Core.cmd_info": {
            "name": "cmd_info",
            "location": 124,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Window.__init__": {
            "name": "__init__",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Window.wid": {
            "name": "wid",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Window.hide": {
            "name": "hide",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Window.unhide": {
            "name": "unhide",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Window.cmd_is_visible": {
            "name": "cmd_is_visible",
            "location": 161,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Window.kill": {
            "name": "kill",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Window.get_wm_class": {
            "name": "get_wm_class",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Window.get_wm_type": {
            "name": "get_wm_type",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Window.get_wm_role": {
            "name": "get_wm_role",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Window.can_steal_focus": {
            "name": "can_steal_focus",
            "location": 182,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Window.has_fixed_ratio": {
            "name": "has_fixed_ratio",
            "location": 186,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Window.has_fixed_size": {
            "name": "has_fixed_size",
            "location": 190,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Window.urgent": {
            "name": "urgent",
            "location": 195,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Window.opacity": {
            "name": "opacity",
            "location": 205,
            "return": [],
            "arguments": {
                "self": [],
                "opacity": []
            }
        },
        "_Window.place": {
            "name": "place",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "width": [],
                "height": [],
                "borderwidth": [],
                "bordercolor": [],
                "above": [
                    "bool"
                ],
                "margin": [
                    "None"
                ],
                "respect_hints": [
                    "bool"
                ]
            }
        },
        "_Window._items": {
            "name": "_items",
            "location": 224,
            "return": [
                "Optional[Tuple[(bool, list)]]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "_Window._select": {
            "name": "_select",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "sel": []
            }
        },
        "_Window.info": {
            "name": "info",
            "location": 231,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Window.cmd_info": {
            "name": "cmd_info",
            "location": 248,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.__repr__": {
            "name": "__repr__",
            "location": 268,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.group": {
            "name": "group",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "group": []
            }
        },
        "Window.floating": {
            "name": "floating",
            "location": 286,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "do_float": []
            }
        },
        "Window.maximized": {
            "name": "maximized",
            "location": 295,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "do_maximize": []
            }
        },
        "Window.minimized": {
            "name": "minimized",
            "location": 304,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "do_minimize": []
            }
        },
        "Window.fullscreen": {
            "name": "fullscreen",
            "location": 313,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "do_full": []
            }
        },
        "Window.wants_to_fullscreen": {
            "name": "wants_to_fullscreen",
            "location": 317,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.match": {
            "name": "match",
            "location": 321,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "match": [
                    "config.Match"
                ]
            }
        },
        "Window.focus": {
            "name": "focus",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "warp": [
                    "bool"
                ]
            }
        },
        "Window.togroup": {
            "name": "togroup",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "group_name": [
                    "None"
                ]
            }
        },
        "Window.has_focus": {
            "name": "has_focus",
            "location": 342,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.has_user_set_position": {
            "name": "has_user_set_position",
            "location": 345,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.is_transient_for": {
            "name": "is_transient_for",
            "location": 349,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.get_pid": {
            "name": "get_pid",
            "location": 354,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.paint_borders": {
            "name": "paint_borders",
            "location": 357,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "color": [
                    "Union[(str, List[Union[(str, Tuple[(float, ...)])]], Tuple[(float, ...)])]"
                ],
                "width": [
                    "int"
                ]
            }
        },
        "Window.cmd_focus": {
            "name": "cmd_focus",
            "location": 361,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "warp": [
                    "bool"
                ]
            }
        },
        "Window.cmd_match": {
            "name": "cmd_match",
            "location": 364,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.cmd_get_position": {
            "name": "cmd_get_position",
            "location": 368,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.cmd_get_size": {
            "name": "cmd_get_size",
            "location": 372,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.cmd_move_floating": {
            "name": "cmd_move_floating",
            "location": 376,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dx": [
                    "int"
                ],
                "dy": [
                    "int"
                ]
            }
        },
        "Window.cmd_resize_floating": {
            "name": "cmd_resize_floating",
            "location": 380,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dw": [
                    "int"
                ],
                "dh": [
                    "int"
                ]
            }
        },
        "Window.cmd_set_position_floating": {
            "name": "cmd_set_position_floating",
            "location": 384,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "Window.cmd_set_position": {
            "name": "cmd_set_position",
            "location": 388,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "Window.cmd_set_size_floating": {
            "name": "cmd_set_size_floating",
            "location": 395,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "w": [
                    "int"
                ],
                "h": [
                    "int"
                ]
            }
        },
        "Window.cmd_place": {
            "name": "cmd_place",
            "location": 399,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "width": [],
                "height": [],
                "borderwidth": [],
                "bordercolor": [],
                "above": [
                    "bool"
                ],
                "margin": [
                    "None"
                ]
            }
        },
        "Window.cmd_toggle_floating": {
            "name": "cmd_toggle_floating",
            "location": 405,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.cmd_enable_floating": {
            "name": "cmd_enable_floating",
            "location": 409,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.cmd_disable_floating": {
            "name": "cmd_disable_floating",
            "location": 413,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.cmd_toggle_maximize": {
            "name": "cmd_toggle_maximize",
            "location": 417,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.cmd_toggle_minimize": {
            "name": "cmd_toggle_minimize",
            "location": 421,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.cmd_toggle_fullscreen": {
            "name": "cmd_toggle_fullscreen",
            "location": 425,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.cmd_enable_fullscreen": {
            "name": "cmd_enable_fullscreen",
            "location": 429,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.cmd_disable_fullscreen": {
            "name": "cmd_disable_fullscreen",
            "location": 433,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.cmd_bring_to_front": {
            "name": "cmd_bring_to_front",
            "location": 437,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.cmd_togroup": {
            "name": "cmd_togroup",
            "location": 440,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "group_name": [
                    "None"
                ],
                "groupName": [
                    "None"
                ],
                "switch_group": [
                    "bool"
                ],
                "toggle": [
                    "bool"
                ]
            }
        },
        "Window.cmd_toscreen": {
            "name": "cmd_toscreen",
            "location": 462,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "None"
                ]
            }
        },
        "Window.cmd_opacity": {
            "name": "cmd_opacity",
            "location": 487,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "opacity": [
                    "float"
                ]
            }
        },
        "Window.cmd_down_opacity": {
            "name": "cmd_down_opacity",
            "location": 499,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.cmd_up_opacity": {
            "name": "cmd_up_opacity",
            "location": 507,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.cmd_kill": {
            "name": "cmd_kill",
            "location": 515,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.cmd_static": {
            "name": "cmd_static",
            "location": 519,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "screen": [
                    "None"
                ],
                "x": [
                    "None"
                ],
                "y": [
                    "None"
                ],
                "width": [
                    "None"
                ],
                "height": [
                    "None"
                ]
            }
        },
        "Window.cmd_center": {
            "name": "cmd_center",
            "location": 533,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Internal.__repr__": {
            "name": "__repr__",
            "location": 561,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Internal.create_drawer": {
            "name": "create_drawer",
            "location": 565,
            "return": [
                "Drawer"
            ],
            "arguments": {
                "self": [],
                "width": [
                    "int"
                ],
                "height": [
                    "int"
                ]
            }
        },
        "Internal.process_window_expose": {
            "name": "process_window_expose",
            "location": 568,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Internal.process_button_click": {
            "name": "process_button_click",
            "location": 571,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ],
                "button": [
                    "int"
                ]
            }
        },
        "Internal.process_button_release": {
            "name": "process_button_release",
            "location": 574,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ],
                "button": [
                    "int"
                ]
            }
        },
        "Internal.process_pointer_enter": {
            "name": "process_pointer_enter",
            "location": 577,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "Internal.process_pointer_leave": {
            "name": "process_pointer_leave",
            "location": 580,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "Internal.process_pointer_motion": {
            "name": "process_pointer_motion",
            "location": 583,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "Internal.process_key_press": {
            "name": "process_key_press",
            "location": 586,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keycode": [
                    "int"
                ]
            }
        },
        "Static.__repr__": {
            "name": "__repr__",
            "location": 599,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Static.info": {
            "name": "info",
            "location": 602,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Static.cmd_bring_to_front": {
            "name": "cmd_bring_to_front",
            "location": 615,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Drawer.__init__": {
            "name": "__init__",
            "location": 633,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtile": [
                    "libqtile.core.manager.Qtile"
                ],
                "win": [
                    "Internal"
                ],
                "width": [
                    "int"
                ],
                "height": [
                    "int"
                ]
            }
        },
        "Drawer.finalize": {
            "name": "finalize",
            "location": 649,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Drawer.add_mirror": {
            "name": "add_mirror",
            "location": 654,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mirror": [
                    "Drawer"
                ]
            }
        },
        "Drawer.reset_mirrors": {
            "name": "reset_mirrors",
            "location": 658,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Drawer.mirrors_drawn": {
            "name": "mirrors_drawn",
            "location": 663,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Drawer.width": {
            "name": "width",
            "location": 672,
            "return": [],
            "arguments": {
                "self": [],
                "width": []
            }
        },
        "Drawer.height": {
            "name": "height",
            "location": 680,
            "return": [],
            "arguments": {
                "self": [],
                "height": []
            }
        },
        "Drawer._reset_surface": {
            "name": "_reset_surface",
            "location": 683,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Drawer._check_surface_reset": {
            "name": "_check_surface_reset",
            "location": 691,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Drawer.needs_update": {
            "name": "needs_update",
            "location": 700,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Drawer.paint_to": {
            "name": "paint_to",
            "location": 712,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "drawer": [
                    "Drawer"
                ]
            }
        },
        "Drawer._rounded_rect": {
            "name": "_rounded_rect",
            "location": 721,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "width": [],
                "height": [],
                "linewidth": []
            }
        },
        "Drawer.rounded_rectangle": {
            "name": "rounded_rectangle",
            "location": 736,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ],
                "width": [
                    "int"
                ],
                "height": [
                    "int"
                ],
                "linewidth": [
                    "int"
                ]
            }
        },
        "Drawer.rounded_fillrect": {
            "name": "rounded_fillrect",
            "location": 741,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ],
                "width": [
                    "int"
                ],
                "height": [
                    "int"
                ],
                "linewidth": [
                    "int"
                ]
            }
        },
        "Drawer.rectangle": {
            "name": "rectangle",
            "location": 745,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ],
                "width": [
                    "int"
                ],
                "height": [
                    "int"
                ],
                "linewidth": [
                    "int"
                ]
            }
        },
        "Drawer.fillrect": {
            "name": "fillrect",
            "location": 750,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ],
                "width": [
                    "int"
                ],
                "height": [
                    "int"
                ],
                "linewidth": [
                    "int"
                ]
            }
        },
        "Drawer.enable": {
            "name": "enable",
            "location": 756,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Drawer.disable": {
            "name": "disable",
            "location": 760,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Drawer.draw": {
            "name": "draw",
            "location": 764,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "offsetx": [
                    "int"
                ],
                "offsety": [
                    "int"
                ],
                "width": [
                    "None"
                ],
                "height": [
                    "None"
                ]
            }
        },
        "Drawer._draw": {
            "name": "_draw",
            "location": 797,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "offsetx": [
                    "int"
                ],
                "offsety": [
                    "int"
                ],
                "width": [
                    "None"
                ],
                "height": [
                    "None"
                ]
            }
        },
        "Drawer.new_ctx": {
            "name": "new_ctx",
            "location": 820,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Drawer.set_source_rgb": {
            "name": "set_source_rgb",
            "location": 823,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "colour": [
                    "Union[(str, List[Union[(str, Tuple[(float, ...)])]], Tuple[(float, ...)])]"
                ],
                "ctx": [
                    "None"
                ]
            }
        },
        "Drawer.clear": {
            "name": "clear",
            "location": 845,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "colour": []
            }
        },
        "Drawer.textlayout": {
            "name": "textlayout",
            "location": 850,
            "return": [
                "drawer.TextLayout"
            ],
            "arguments": {
                "self": [],
                "text": [],
                "colour": [],
                "font_family": [],
                "font_size": [],
                "font_shadow": [],
                "markup": [
                    "bool"
                ]
            }
        },
        "Drawer.max_layout_size": {
            "name": "max_layout_size",
            "location": 857,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "texts": [],
                "font_family": [],
                "font_size": []
            }
        },
        "Drawer.text_extents": {
            "name": "text_extents",
            "location": 866,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "Drawer.font_extents": {
            "name": "font_extents",
            "location": 869,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Drawer.fit_fontsize": {
            "name": "fit_fontsize",
            "location": 872,
            "return": [],
            "arguments": {
                "self": [],
                "heightlimit": []
            }
        },
        "Drawer.fit_text": {
            "name": "fit_text",
            "location": 879,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "strings": [],
                "heightlimit": []
            }
        },
        "Drawer.draw_vbar": {
            "name": "draw_vbar",
            "location": 893,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "color": [],
                "x": [],
                "y1": [],
                "y2": [],
                "linewidth": [
                    "int"
                ]
            }
        },
        "Drawer.draw_hbar": {
            "name": "draw_hbar",
            "location": 900,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "color": [],
                "x1": [],
                "x2": [],
                "y": [],
                "linewidth": [
                    "int"
                ]
            }
        }
    },
    "qtile-master/libqtile/backend/__init__.py": {
        "get_core": {
            "name": "get_core",
            "location": 11,
            "return": [
                "bool",
                "str",
                "cmk.utils.type_defs.HostName",
                "cmk.utils.type_defs.Item",
                "cmk.utils.type_defs.CheckPluginNameStr",
                "int"
            ],
            "arguments": {
                "backend": [
                    "bool"
                ]
            }
        }
    },
    "qtile-master/libqtile/backend/wayland/core.py": {
        "Core.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Core.name": {
            "name": "name",
            "location": 234,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Core.finalize": {
            "name": "finalize",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Core.display_name": {
            "name": "display_name",
            "location": 255,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Core._on_request_set_selection": {
            "name": "_on_request_set_selection",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "event": []
            }
        },
        "Core._on_request_set_primary_selection": {
            "name": "_on_request_set_primary_selection",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "event": []
            }
        },
        "Core._on_request_start_drag": {
            "name": "_on_request_start_drag",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "event": []
            }
        },
        "Core._on_start_drag": {
            "name": "_on_start_drag",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "event": []
            }
        },
        "Core._on_new_input": {
            "name": "_on_new_input",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "device": []
            }
        },
        "Core._on_new_output": {
            "name": "_on_new_output",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "wlr_output": []
            }
        },
        "Core._on_output_layout_change": {
            "name": "_on_output_layout_change",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "_data": []
            }
        },
        "Core._on_output_manager_apply": {
            "name": "_on_output_manager_apply",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "config": []
            }
        },
        "Core._on_output_manager_test": {
            "name": "_on_output_manager_test",
            "location": 347,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "config": []
            }
        },
        "Core._on_request_cursor": {
            "name": "_on_request_cursor",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "event": []
            }
        },
        "Core._on_new_xdg_surface": {
            "name": "_on_new_xdg_surface",
            "location": 361,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "surface": []
            }
        },
        "Core._on_cursor_axis": {
            "name": "_on_cursor_axis",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "event": []
            }
        },
        "Core._on_cursor_frame": {
            "name": "_on_cursor_frame",
            "location": 386,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "_data": []
            }
        },
        "Core._on_cursor_button": {
            "name": "_on_cursor_button",
            "location": 389,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "event": []
            }
        },
        "Core._on_cursor_motion": {
            "name": "_on_cursor_motion",
            "location": 405,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "event": []
            }
        },
        "Core._on_cursor_motion_absolute": {
            "name": "_on_cursor_motion_absolute",
            "location": 432,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "event": []
            }
        },
        "Core._on_new_pointer_constraint": {
            "name": "_on_new_pointer_constraint",
            "location": 445,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "wlr_constraint": []
            }
        },
        "Core._on_new_virtual_keyboard": {
            "name": "_on_new_virtual_keyboard",
            "location": 457,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "virtual_keyboard": []
            }
        },
        "Core._on_new_virtual_pointer": {
            "name": "_on_new_virtual_pointer",
            "location": 462,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "new_pointer_event": []
            }
        },
        "Core._on_new_inhibitor": {
            "name": "_on_new_inhibitor",
            "location": 467,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "idle_inhibitor": []
            }
        },
        "Core._on_output_power_manager_set_mode": {
            "name": "_on_output_power_manager_set_mode",
            "location": 479,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "mode": []
            }
        },
        "Core._on_new_layer_surface": {
            "name": "_on_new_layer_surface",
            "location": 505,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "layer_surface": []
            }
        },
        "Core._on_new_toplevel_decoration": {
            "name": "_on_new_toplevel_decoration",
            "location": 514,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "decoration": []
            }
        },
        "Core._on_xwayland_ready": {
            "name": "_on_xwayland_ready",
            "location": 520,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "_data": []
            }
        },
        "Core._on_xwayland_new_surface": {
            "name": "_on_xwayland_new_surface",
            "location": 540,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "surface": []
            }
        },
        "Core._output_manager_reconfigure": {
            "name": "_output_manager_reconfigure",
            "location": 546,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [],
                "apply": [
                    "bool"
                ]
            }
        },
        "Core._process_cursor_motion": {
            "name": "_process_cursor_motion",
            "location": 591,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "time_msec": [
                    "int"
                ],
                "cx": [
                    "float"
                ],
                "cy": [
                    "float"
                ]
            }
        },
        "Core._process_cursor_button": {
            "name": "_process_cursor_button",
            "location": 665,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "button": [
                    "int"
                ],
                "pressed": [
                    "bool"
                ]
            }
        },
        "Core._add_new_pointer": {
            "name": "_add_new_pointer",
            "location": 691,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device": []
            }
        },
        "Core._add_new_keyboard": {
            "name": "_add_new_keyboard",
            "location": 694,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device": []
            }
        },
        "Core._configure_pending_inputs": {
            "name": "_configure_pending_inputs",
            "location": 698,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Core.setup_listener": {
            "name": "setup_listener",
            "location": 705,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtile": [
                    "libqtile.core.manager.Qtile"
                ]
            }
        },
        "Core.remove_listener": {
            "name": "remove_listener",
            "location": 715,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Core._poll": {
            "name": "_poll",
            "location": 723,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Core.distribute_windows": {
            "name": "distribute_windows",
            "location": 729,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "initial": [
                    "bool"
                ]
            }
        },
        "Core.new_wid": {
            "name": "new_wid",
            "location": 765,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Core.focus_window": {
            "name": "focus_window",
            "location": 770,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "win": [
                    "Union[(window.Internal, window.Static, window.Window)]"
                ],
                "surface": [],
                "enter": [
                    "bool"
                ]
            }
        },
        "Core._focus_by_click": {
            "name": "_focus_by_click",
            "location": 831,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Core._under_pointer": {
            "name": "_under_pointer",
            "location": 860,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Core.stack_windows": {
            "name": "stack_windows",
            "location": 882,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Core.check_idle_inhibitor": {
            "name": "check_idle_inhibitor",
            "location": 896,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Core.get_screen_info": {
            "name": "get_screen_info",
            "location": 908,
            "return": [
                "List[Tuple[(int, int, int, int)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Core.grab_key": {
            "name": "grab_key",
            "location": 912,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Core.ungrab_key": {
            "name": "ungrab_key",
            "location": 919,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Core.ungrab_keys": {
            "name": "ungrab_keys",
            "location": 926,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Core.grab_button": {
            "name": "grab_button",
            "location": 930,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "mouse": [
                    "config.Mouse"
                ]
            }
        },
        "Core.ungrab_buttons": {
            "name": "ungrab_buttons",
            "location": 937,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Core.grab_pointer": {
            "name": "grab_pointer",
            "location": 941,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Core.ungrab_pointer": {
            "name": "ungrab_pointer",
            "location": 944,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Core.warp_pointer": {
            "name": "warp_pointer",
            "location": 947,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float"
                ],
                "y": [
                    "float"
                ]
            }
        },
        "Core.flush": {
            "name": "flush",
            "location": 951,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Core.create_internal": {
            "name": "create_internal",
            "location": 954,
            "return": [
                "base.Internal"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ],
                "width": [
                    "int"
                ],
                "height": [
                    "int"
                ]
            }
        },
        "Core.graceful_shutdown": {
            "name": "graceful_shutdown",
            "location": 960,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Core.painter": {
            "name": "painter",
            "location": 977,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Core.remove_output": {
            "name": "remove_output",
            "location": 980,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output": [
                    "libqtile.backend.wayland.output.Output"
                ]
            }
        },
        "Core.remove_pointer_constraints": {
            "name": "remove_pointer_constraints",
            "location": 986,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "window": []
            }
        },
        "Core.keysym_from_name": {
            "name": "keysym_from_name",
            "location": 991,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Core.simulate_keypress": {
            "name": "simulate_keypress",
            "location": 995,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "modifiers": [
                    "List[str]"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "Core.cmd_set_keymap": {
            "name": "cmd_set_keymap",
            "location": 1008,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "layout": [],
                "options": [],
                "variant": []
            }
        },
        "Core.cmd_change_vt": {
            "name": "cmd_change_vt",
            "location": 1027,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "vt": [
                    "int"
                ]
            }
        },
        "Core.cmd_hide_cursor": {
            "name": "cmd_hide_cursor",
            "location": 1034,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Core.cmd_unhide_cursor": {
            "name": "cmd_unhide_cursor",
            "location": 1040,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/backend/wayland/drawer.py": {
        "Drawer.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtile": [
                    "libqtile.core.manager.Qtile"
                ],
                "win": [
                    "libqtile.backend.wayland.window.Internal"
                ],
                "width": [
                    "int"
                ],
                "height": [
                    "int"
                ]
            }
        },
        "Drawer._draw": {
            "name": "_draw",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "offsetx": [
                    "int"
                ],
                "offsety": [
                    "int"
                ],
                "width": [
                    "None",
                    "int",
                    "float"
                ],
                "height": [
                    "None",
                    "int",
                    "float",
                    "Sequence[int]",
                    "List[int]",
                    "Optional[int]"
                ]
            }
        },
        "Drawer.clear": {
            "name": "clear",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "colour": [
                    "Union[(str, List[Union[(str, Tuple[(float, ...)])]], Tuple[(float, ...)])]"
                ]
            }
        }
    },
    "qtile-master/libqtile/backend/wayland/inputs.py": {
        "_configure_keyboard": {
            "name": "_configure_keyboard",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "device": [],
                "conf": [
                    "InputConfig"
                ]
            }
        },
        "_configure_pointer": {
            "name": "_configure_pointer",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "device": [],
                "conf": [
                    "InputConfig"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "configure_device": {
            "name": "configure_device",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {
                "device": [],
                "configs": []
            }
        },
        "InputConfig.__init__": {
            "name": "__init__",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Keyboard.__init__": {
            "name": "__init__",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "core": [
                    "libqtile.backend.wayland.core.Core"
                ],
                "device": []
            }
        },
        "Keyboard.finalize": {
            "name": "finalize",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Keyboard.set_keymap": {
            "name": "set_keymap",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "layout": [],
                "options": [],
                "variant": []
            }
        },
        "Keyboard._on_destroy": {
            "name": "_on_destroy",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "_data": []
            }
        },
        "Keyboard._on_modifier": {
            "name": "_on_modifier",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "_data": []
            }
        },
        "Keyboard._on_key": {
            "name": "_on_key",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "event": []
            }
        }
    },
    "qtile-master/libqtile/backend/wayland/libinput_ffi_build.py": {},
    "qtile-master/libqtile/backend/wayland/output.py": {
        "Output.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "core": [
                    "libqtile.backend.wayland.core.Core"
                ],
                "wlr_output": [
                    "int",
                    "str",
                    "List[str]",
                    "bool",
                    "dict"
                ]
            }
        },
        "Output.finalize": {
            "name": "finalize",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Output.screen": {
            "name": "screen",
            "location": 86,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Output._on_destroy": {
            "name": "_on_destroy",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [
                    "bool",
                    "str"
                ],
                "_data": [
                    "bool",
                    "str"
                ]
            }
        },
        "Output._on_frame": {
            "name": "_on_frame",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [
                    "bool",
                    "str"
                ],
                "_data": [
                    "bool",
                    "str"
                ]
            }
        },
        "Output._render_surface": {
            "name": "_render_surface",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "surface": [
                    "int"
                ],
                "sx": [
                    "int"
                ],
                "sy": [
                    "int"
                ],
                "rdata": [
                    "tuple"
                ]
            }
        },
        "Output._render_dnd_icon": {
            "name": "_render_dnd_icon",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dnd": [
                    "libqtile.backend.wayland.wlrq.Dnd"
                ],
                "now": [
                    "Iterable[List[T]]",
                    "bool",
                    "Iterable[T]"
                ],
                "scale": [
                    "float"
                ],
                "transform_matrix": [
                    "str",
                    "bool"
                ]
            }
        },
        "Output.get_geometry": {
            "name": "get_geometry",
            "location": 244,
            "return": [
                "Tuple[(int, int, int, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Output.organise_layers": {
            "name": "organise_layers",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Output.contains": {
            "name": "contains",
            "location": 324,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "rect": [
                    "List[list]",
                    "Iterable[Any]",
                    "Iterable",
                    "pygame.Surface",
                    "List[Tuple[int, int, str]]",
                    "int",
                    "list"
                ]
            }
        },
        "Output.damage": {
            "name": "damage",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/backend/wayland/window.py": {
        "_rgb": {
            "name": "_rgb",
            "location": 71,
            "return": [
                "ffi_@_CData"
            ],
            "arguments": {
                "color": []
            }
        },
        "_Base.wid": {
            "name": "wid",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_Base.width": {
            "name": "width",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "width": []
            }
        },
        "_Base.height": {
            "name": "height",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "height": []
            }
        },
        "Window.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "core": [
                    "libqtile.backend.wayland.core.Core"
                ],
                "qtile": [
                    "libqtile.core.manager.Qtile"
                ],
                "surface": [
                    "S"
                ]
            }
        },
        "Window.finalize": {
            "name": "finalize",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.wid": {
            "name": "wid",
            "location": 141,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Window.group": {
            "name": "group",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "group": []
            }
        },
        "Window.mapped": {
            "name": "mapped",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "mapped": []
            }
        },
        "Window._on_destroy": {
            "name": "_on_destroy",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "_data": []
            }
        },
        "Window._on_commit": {
            "name": "_on_commit",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "_data": []
            }
        },
        "Window._on_foreign_request_maximize": {
            "name": "_on_foreign_request_maximize",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "event": []
            }
        },
        "Window._on_foreign_request_minimize": {
            "name": "_on_foreign_request_minimize",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "event": []
            }
        },
        "Window._on_foreign_request_fullscreen": {
            "name": "_on_foreign_request_fullscreen",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "event": []
            }
        },
        "Window._on_foreign_request_activate": {
            "name": "_on_foreign_request_activate",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "event": []
            }
        },
        "Window._on_foreign_request_close": {
            "name": "_on_foreign_request_close",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "_data": []
            }
        },
        "Window._on_inhibitor_destroy": {
            "name": "_on_inhibitor_destroy",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "listener": [],
                "surface": []
            }
        },
        "Window._find_outputs": {
            "name": "_find_outputs",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.damage": {
            "name": "damage",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.get_wm_class": {
            "name": "get_wm_class",
            "location": 232,
            "return": [
                "list",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.focus": {
            "name": "focus",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "warp": [
                    "bool"
                ]
            }
        },
        "Window.togroup": {
            "name": "togroup",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "group_name": [
                    "None"
                ]
            }
        },
        "Window.paint_borders": {
            "name": "paint_borders",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "color": [],
                "width": [
                    "int"
                ]
            }
        },
        "Window.floating": {
            "name": "floating",
            "location": 303,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "do_float": []
            }
        },
        "Window._update_fullscreen": {
            "name": "_update_fullscreen",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "do_full": [
                    "bool"
                ]
            }
        },
        "Window.maximized": {
            "name": "maximized",
            "location": 339,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "do_maximize": []
            }
        },
        "Window.minimized": {
            "name": "minimized",
            "location": 363,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "do_minimize": []
            }
        },
        "Window._tweak_float": {
            "name": "_tweak_float",
            "location": 373,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "None"
                ],
                "y": [
                    "None"
                ],
                "dx": [
                    "int"
                ],
                "dy": [
                    "int"
                ],
                "w": [
                    "None"
                ],
                "h": [
                    "None"
                ],
                "dw": [
                    "int"
                ],
                "dh": [
                    "int"
                ]
            }
        },
        "Window._reconfigure_floating": {
            "name": "_reconfigure_floating",
            "location": 413,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "None"
                ],
                "y": [
                    "None"
                ],
                "w": [
                    "None"
                ],
                "h": [
                    "None"
                ],
                "new_float_state": [
                    "base.FloatStates"
                ]
            }
        },
        "Window.info": {
            "name": "info",
            "location": 434,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.match": {
            "name": "match",
            "location": 458,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "match": [
                    "config.Match"
                ]
            }
        },
        "Window.add_idle_inhibitor": {
            "name": "add_idle_inhibitor",
            "location": 461,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "surface": [],
                "_x": [
                    "int"
                ],
                "_y": [
                    "int"
                ],
                "inhibitor": []
            }
        },
        "Window.is_idle_inhibited": {
            "name": "is_idle_inhibited",
            "location": 472,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window._items": {
            "name": "_items",
            "location": 475,
            "return": [
                "Optional[Tuple[(bool, list)]]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Window._select": {
            "name": "_select",
            "location": 487,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "sel": []
            }
        },
        "Window.cmd_focus": {
            "name": "cmd_focus",
            "location": 499,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "warp": [
                    "bool"
                ]
            }
        },
        "Window.cmd_move_floating": {
            "name": "cmd_move_floating",
            "location": 503,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dx": [
                    "int"
                ],
                "dy": [
                    "int"
                ]
            }
        },
        "Window.cmd_resize_floating": {
            "name": "cmd_resize_floating",
            "location": 506,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dw": [
                    "int"
                ],
                "dh": [
                    "int"
                ]
            }
        },
        "Window.cmd_set_position_floating": {
            "name": "cmd_set_position_floating",
            "location": 509,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "Window.cmd_set_position": {
            "name": "cmd_set_position",
            "location": 512,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "Window.cmd_set_size_floating": {
            "name": "cmd_set_size_floating",
            "location": 535,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "w": [
                    "int"
                ],
                "h": [
                    "int"
                ]
            }
        },
        "Window.cmd_place": {
            "name": "cmd_place",
            "location": 538,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ],
                "width": [
                    "int"
                ],
                "height": [
                    "int"
                ],
                "borderwidth": [
                    "int"
                ],
                "bordercolor": [],
                "above": [
                    "bool"
                ],
                "margin": [
                    "None"
                ]
            }
        },
        "Window.cmd_get_position": {
            "name": "cmd_get_position",
            "location": 551,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.cmd_get_size": {
            "name": "cmd_get_size",
            "location": 554,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.cmd_toggle_floating": {
            "name": "cmd_toggle_floating",
            "location": 557,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.cmd_enable_floating": {
            "name": "cmd_enable_floating",
            "location": 560,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.cmd_disable_floating": {
            "name": "cmd_disable_floating",
            "location": 563,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.cmd_toggle_maximize": {
            "name": "cmd_toggle_maximize",
            "location": 566,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.cmd_toggle_minimize": {
            "name": "cmd_toggle_minimize",
            "location": 569,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.cmd_toggle_fullscreen": {
            "name": "cmd_toggle_fullscreen",
            "location": 572,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.cmd_enable_fullscreen": {
            "name": "cmd_enable_fullscreen",
            "location": 575,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.cmd_disable_fullscreen": {
            "name": "cmd_disable_fullscreen",
            "location": 578,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.cmd_bring_to_front": {
            "name": "cmd_bring_to_front",
            "location": 581,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.cmd_kill": {
            "name": "cmd_kill",
            "location": 587,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.cmd_static": {
            "name": "cmd_static",
            "location": 590,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "screen": [
                    "None"
                ],
                "x": [
                    "None"
                ],
                "y": [
                    "None"
                ],
                "width": [
                    "None"
                ],
                "height": [
                    "None"
                ]
            }
        },
        "Window._to_static": {
            "name": "_to_static",
            "location": 624,
            "return": [
                "Static"
            ],
            "arguments": {
                "self": []
            }
        },
        "XdgWindow.__init__": {
            "name": "__init__",
            "location": 632,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "core": [
                    "libqtile.backend.wayland.core.Core"
                ],
                "qtile": [
                    "libqtile.core.manager.Qtile"
                ],
                "surface": []
            }
        },
        "XdgWindow.finalize": {
            "name": "finalize",
            "location": 646,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "XdgWindow._on_map": {
            "name": "_on_map",
            "location": 651,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "_data": []
            }
        },
        "XdgWindow._on_unmap": {
            "name": "_on_unmap",
            "location": 701,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "_data": []
            }
        },
        "XdgWindow._on_new_popup": {
            "name": "_on_new_popup",
            "location": 710,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "xdg_popup": []
            }
        },
        "XdgWindow._on_new_subsurface": {
            "name": "_on_new_subsurface",
            "location": 714,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "subsurface": []
            }
        },
        "XdgWindow._on_request_fullscreen": {
            "name": "_on_request_fullscreen",
            "location": 717,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "event": []
            }
        },
        "XdgWindow._on_set_title": {
            "name": "_on_set_title",
            "location": 724,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "_data": []
            }
        },
        "XdgWindow._on_set_app_id": {
            "name": "_on_set_app_id",
            "location": 732,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "_data": []
            }
        },
        "XdgWindow.hide": {
            "name": "hide",
            "location": 737,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "XdgWindow.unhide": {
            "name": "unhide",
            "location": 741,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "XdgWindow.cmd_is_visible": {
            "name": "cmd_is_visible",
            "location": 745,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "XdgWindow.kill": {
            "name": "kill",
            "location": 748,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "XdgWindow.has_fixed_size": {
            "name": "has_fixed_size",
            "location": 751,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "XdgWindow.is_transient_for": {
            "name": "is_transient_for",
            "location": 755,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "XdgWindow.get_pid": {
            "name": "get_pid",
            "location": 764,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "XdgWindow._update_fullscreen": {
            "name": "_update_fullscreen",
            "location": 771,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "do_full": [
                    "bool"
                ]
            }
        },
        "XdgWindow.fullscreen": {
            "name": "fullscreen",
            "location": 781,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "do_full": []
            }
        },
        "XdgWindow.place": {
            "name": "place",
            "location": 803,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ],
                "width": [
                    "int"
                ],
                "height": [
                    "int"
                ],
                "borderwidth": [
                    "int"
                ],
                "bordercolor": [],
                "above": [
                    "bool"
                ],
                "margin": [
                    "None"
                ],
                "respect_hints": [
                    "bool"
                ]
            }
        },
        "XdgWindow.cmd_static": {
            "name": "cmd_static",
            "location": 853,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "screen": [
                    "None"
                ],
                "x": [
                    "None"
                ],
                "y": [
                    "None"
                ],
                "width": [
                    "None"
                ],
                "height": [
                    "None"
                ]
            }
        },
        "XdgWindow._to_static": {
            "name": "_to_static",
            "location": 872,
            "return": [
                "XdgStatic"
            ],
            "arguments": {
                "self": []
            }
        },
        "XWindow.__init__": {
            "name": "__init__",
            "location": 881,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "core": [
                    "libqtile.backend.wayland.core.Core"
                ],
                "qtile": [
                    "libqtile.core.manager.Qtile"
                ],
                "surface": []
            }
        },
        "XWindow.mapped": {
            "name": "mapped",
            "location": 896,
            "return": [],
            "arguments": {
                "self": [],
                "mapped": []
            }
        },
        "XWindow._on_map": {
            "name": "_on_map",
            "location": 903,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "_data": []
            }
        },
        "XWindow._on_unmap": {
            "name": "_on_unmap",
            "location": 961,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "_data": []
            }
        },
        "XWindow._on_request_fullscreen": {
            "name": "_on_request_fullscreen",
            "location": 976,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "_data": []
            }
        },
        "XWindow._on_set_title": {
            "name": "_on_set_title",
            "location": 981,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "_data": []
            }
        },
        "XWindow._on_set_class": {
            "name": "_on_set_class",
            "location": 989,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "_data": []
            }
        },
        "XWindow.hide": {
            "name": "hide",
            "location": 994,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "XWindow.unhide": {
            "name": "unhide",
            "location": 999,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "XWindow.kill": {
            "name": "kill",
            "location": 1003,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "XWindow.has_fixed_size": {
            "name": "has_fixed_size",
            "location": 1006,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "XWindow.is_transient_for": {
            "name": "is_transient_for",
            "location": 1016,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "XWindow.get_pid": {
            "name": "get_pid",
            "location": 1025,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "XWindow.get_wm_type": {
            "name": "get_wm_type",
            "location": 1028,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "XWindow.get_wm_role": {
            "name": "get_wm_role",
            "location": 1034,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XWindow._update_fullscreen": {
            "name": "_update_fullscreen",
            "location": 1037,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "do_full": [
                    "bool"
                ]
            }
        },
        "XWindow.fullscreen": {
            "name": "fullscreen",
            "location": 1047,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "do_full": []
            }
        },
        "XWindow.place": {
            "name": "place",
            "location": 1066,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ],
                "width": [
                    "int"
                ],
                "height": [
                    "int"
                ],
                "borderwidth": [
                    "int"
                ],
                "bordercolor": [],
                "above": [
                    "bool"
                ],
                "margin": [
                    "None"
                ],
                "respect_hints": [
                    "bool"
                ]
            }
        },
        "XWindow.cmd_bring_to_front": {
            "name": "cmd_bring_to_front",
            "location": 1117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "XWindow.cmd_static": {
            "name": "cmd_static",
            "location": 1124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "screen": [
                    "None"
                ],
                "x": [
                    "None"
                ],
                "y": [
                    "None"
                ],
                "width": [
                    "None"
                ],
                "height": [
                    "None"
                ]
            }
        },
        "XWindow._to_static": {
            "name": "_to_static",
            "location": 1135,
            "return": [
                "XStatic"
            ],
            "arguments": {
                "self": []
            }
        },
        "Static.__init__": {
            "name": "__init__",
            "location": 1140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "core": [
                    "libqtile.backend.wayland.core.Core"
                ],
                "qtile": [
                    "libqtile.core.manager.Qtile"
                ],
                "surface": [
                    "S"
                ],
                "wid": [
                    "int"
                ],
                "idle_inhibitor_count": [
                    "int"
                ]
            }
        },
        "Static.finalize": {
            "name": "finalize",
            "location": 1170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Static.wid": {
            "name": "wid",
            "location": 1175,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Static.mapped": {
            "name": "mapped",
            "location": 1183,
            "return": [],
            "arguments": {
                "self": [],
                "mapped": []
            }
        },
        "Static._find_outputs": {
            "name": "_find_outputs",
            "location": 1195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Static.damage": {
            "name": "damage",
            "location": 1198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Static.focus": {
            "name": "focus",
            "location": 1202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "warp": [
                    "bool"
                ]
            }
        },
        "Static.paint_borders": {
            "name": "paint_borders",
            "location": 1213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "color": [],
                "width": [
                    "int"
                ]
            }
        },
        "Static._on_map": {
            "name": "_on_map",
            "location": 1223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "_data": []
            }
        },
        "Static._on_unmap": {
            "name": "_on_unmap",
            "location": 1228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "_data": []
            }
        },
        "Static._on_destroy": {
            "name": "_on_destroy",
            "location": 1239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "_data": []
            }
        },
        "Static._on_commit": {
            "name": "_on_commit",
            "location": 1252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "_data": []
            }
        },
        "Static._on_foreign_request_close": {
            "name": "_on_foreign_request_close",
            "location": 1255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "_data": []
            }
        },
        "Static._on_inhibitor_destroy": {
            "name": "_on_inhibitor_destroy",
            "location": 1259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "listener": [],
                "surface": []
            }
        },
        "Static.add_idle_inhibitor": {
            "name": "add_idle_inhibitor",
            "location": 1267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "surface": [],
                "_x": [
                    "int"
                ],
                "_y": [
                    "int"
                ],
                "inhibitor": []
            }
        },
        "Static.is_idle_inhibited": {
            "name": "is_idle_inhibited",
            "location": 1278,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Static.cmd_bring_to_front": {
            "name": "cmd_bring_to_front",
            "location": 1281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "XdgStatic.__init__": {
            "name": "__init__",
            "location": 1292,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "core": [
                    "libqtile.backend.wayland.core.Core"
                ],
                "qtile": [
                    "libqtile.core.manager.Qtile"
                ],
                "surface": [],
                "wid": [
                    "int"
                ],
                "idle_inhibitor_count": [
                    "int"
                ]
            }
        },
        "XdgStatic.finalize": {
            "name": "finalize",
            "location": 1317,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "XdgStatic.kill": {
            "name": "kill",
            "location": 1322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "XdgStatic.hide": {
            "name": "hide",
            "location": 1325,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "XdgStatic.unhide": {
            "name": "unhide",
            "location": 1329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "XdgStatic.place": {
            "name": "place",
            "location": 1333,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ],
                "width": [
                    "int"
                ],
                "height": [
                    "int"
                ],
                "borderwidth": [
                    "int"
                ],
                "bordercolor": [],
                "above": [
                    "bool"
                ],
                "margin": [
                    "None"
                ],
                "respect_hints": [
                    "bool"
                ]
            }
        },
        "XdgStatic._on_set_title": {
            "name": "_on_set_title",
            "location": 1354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "_data": []
            }
        },
        "XdgStatic._on_set_app_id": {
            "name": "_on_set_app_id",
            "location": 1362,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "_data": []
            }
        },
        "XStatic.__init__": {
            "name": "__init__",
            "location": 1371,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "core": [
                    "libqtile.backend.wayland.core.Core"
                ],
                "qtile": [
                    "libqtile.core.manager.Qtile"
                ],
                "surface": [],
                "wid": [
                    "int"
                ],
                "idle_inhibitor_count": [
                    "int"
                ]
            }
        },
        "XStatic.kill": {
            "name": "kill",
            "location": 1397,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "XStatic.hide": {
            "name": "hide",
            "location": 1400,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "XStatic.unhide": {
            "name": "unhide",
            "location": 1404,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "XStatic.place": {
            "name": "place",
            "location": 1408,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ],
                "width": [
                    "int"
                ],
                "height": [
                    "int"
                ],
                "borderwidth": [
                    "int"
                ],
                "bordercolor": [],
                "above": [
                    "bool"
                ],
                "margin": [
                    "None"
                ],
                "respect_hints": [
                    "bool"
                ]
            }
        },
        "XStatic._on_set_title": {
            "name": "_on_set_title",
            "location": 1429,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "_data": []
            }
        },
        "XStatic._on_set_class": {
            "name": "_on_set_class",
            "location": 1437,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "_data": []
            }
        },
        "XStatic._on_set_geometry": {
            "name": "_on_set_geometry",
            "location": 1442,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "_data": []
            }
        },
        "LayerStatic.__init__": {
            "name": "__init__",
            "location": 1452,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "core": [
                    "libqtile.backend.wayland.core.Core"
                ],
                "qtile": [
                    "libqtile.core.manager.Qtile"
                ],
                "surface": [],
                "wid": [
                    "int"
                ]
            }
        },
        "LayerStatic.finalize": {
            "name": "finalize",
            "location": 1482,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LayerStatic.mapped": {
            "name": "mapped",
            "location": 1492,
            "return": [],
            "arguments": {
                "self": [],
                "mapped": []
            }
        },
        "LayerStatic._on_map": {
            "name": "_on_map",
            "location": 1510,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "_data": []
            }
        },
        "LayerStatic._on_unmap": {
            "name": "_on_unmap",
            "location": 1516,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "_data": []
            }
        },
        "LayerStatic._on_commit": {
            "name": "_on_commit",
            "location": 1528,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "_data": []
            }
        },
        "LayerStatic.kill": {
            "name": "kill",
            "location": 1538,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LayerStatic.hide": {
            "name": "hide",
            "location": 1541,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LayerStatic.unhide": {
            "name": "unhide",
            "location": 1545,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LayerStatic.place": {
            "name": "place",
            "location": 1549,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ],
                "width": [
                    "int"
                ],
                "height": [
                    "int"
                ],
                "borderwidth": [
                    "int"
                ],
                "bordercolor": [],
                "above": [
                    "bool"
                ],
                "margin": [
                    "None"
                ],
                "respect_hints": [
                    "bool"
                ]
            }
        },
        "LayerStatic.cmd_bring_to_front": {
            "name": "cmd_bring_to_front",
            "location": 1568,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Internal.__init__": {
            "name": "__init__",
            "location": 1577,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "core": [
                    "libqtile.backend.wayland.core.Core"
                ],
                "qtile": [
                    "libqtile.core.manager.Qtile"
                ],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ],
                "width": [
                    "int"
                ],
                "height": [
                    "int"
                ]
            }
        },
        "Internal.finalize": {
            "name": "finalize",
            "location": 1590,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Internal._new_texture": {
            "name": "_new_texture",
            "location": 1593,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Internal.create_drawer": {
            "name": "create_drawer",
            "location": 1608,
            "return": [
                "libqtile.backend.wayland.drawer.Drawer"
            ],
            "arguments": {
                "self": [],
                "width": [
                    "int"
                ],
                "height": [
                    "int"
                ]
            }
        },
        "Internal.mapped": {
            "name": "mapped",
            "location": 1617,
            "return": [],
            "arguments": {
                "self": [],
                "mapped": []
            }
        },
        "Internal.hide": {
            "name": "hide",
            "location": 1628,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Internal.unhide": {
            "name": "unhide",
            "location": 1632,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Internal.focus": {
            "name": "focus",
            "location": 1636,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "warp": [
                    "bool"
                ]
            }
        },
        "Internal.kill": {
            "name": "kill",
            "location": 1639,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Internal.damage": {
            "name": "damage",
            "location": 1646,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Internal.place": {
            "name": "place",
            "location": 1650,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ],
                "width": [
                    "int"
                ],
                "height": [
                    "int"
                ],
                "borderwidth": [
                    "int"
                ],
                "bordercolor": [],
                "above": [
                    "bool"
                ],
                "margin": [
                    "None"
                ],
                "respect_hints": [
                    "bool"
                ]
            }
        },
        "Internal.info": {
            "name": "info",
            "location": 1679,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Internal.cmd_bring_to_front": {
            "name": "cmd_bring_to_front",
            "location": 1689,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "XdgPopupWindow.__init__": {
            "name": "__init__",
            "location": 1707,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [],
                "xdg_popup": []
            }
        },
        "XdgPopupWindow._on_map": {
            "name": "_on_map",
            "location": 1741,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "_data": []
            }
        },
        "XdgPopupWindow._on_unmap": {
            "name": "_on_unmap",
            "location": 1745,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "_data": []
            }
        },
        "XdgPopupWindow._on_destroy": {
            "name": "_on_destroy",
            "location": 1749,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "_data": []
            }
        },
        "XdgPopupWindow._on_new_popup": {
            "name": "_on_new_popup",
            "location": 1754,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "xdg_popup": []
            }
        },
        "XdgPopupWindow._on_commit": {
            "name": "_on_commit",
            "location": 1758,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "_data": []
            }
        },
        "SubSurface.__init__": {
            "name": "__init__",
            "location": 1769,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [],
                "subsurface": []
            }
        },
        "SubSurface.finalize": {
            "name": "finalize",
            "location": 1777,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubSurface._on_destroy": {
            "name": "_on_destroy",
            "location": 1783,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "_data": []
            }
        },
        "SubSurface._on_commit": {
            "name": "_on_commit",
            "location": 1786,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "listener": [],
                "_data": []
            }
        },
        "SubSurface._on_new_subsurface": {
            "name": "_on_new_subsurface",
            "location": 1789,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "subsurface": []
            }
        },
        "PointerConstraint.__init__": {
            "name": "__init__",
            "location": 1800,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "core": [
                    "libqtile.backend.wayland.core.Core"
                ],
                "wlr_constraint": []
            }
        },
        "PointerConstraint.finalize": {
            "name": "finalize",
            "location": 1824,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PointerConstraint._on_set_region": {
            "name": "_on_set_region",
            "location": 1830,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "_data": []
            }
        },
        "PointerConstraint._on_destroy": {
            "name": "_on_destroy",
            "location": 1834,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "wlr_constraint": []
            }
        },
        "PointerConstraint._on_commit": {
            "name": "_on_commit",
            "location": 1838,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [],
                "_data": []
            }
        },
        "PointerConstraint._get_region": {
            "name": "_get_region",
            "location": 1845,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PointerConstraint.enable": {
            "name": "enable",
            "location": 1853,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PointerConstraint.disable": {
            "name": "disable",
            "location": 1860,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/backend/wayland/wlrq.py": {
        "translate_masks": {
            "name": "translate_masks",
            "location": 92,
            "return": [
                "int"
            ],
            "arguments": {
                "modifiers": [
                    "List[str]"
                ]
            }
        },
        "get_xwayland_atoms": {
            "name": "get_xwayland_atoms",
            "location": 233,
            "return": [
                "Dict[(int, str)]"
            ],
            "arguments": {
                "xwayland": [
                    "str",
                    "int"
                ]
            }
        },
        "Painter.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "core": [
                    "libqtile.backend.wayland.core.Core"
                ]
            }
        },
        "Painter.paint": {
            "name": "paint",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "screen": [
                    "libqtile.config.Screen"
                ],
                "image_path": [
                    "str"
                ],
                "mode": [
                    "None",
                    "str",
                    "List[str]",
                    "int",
                    "bool",
                    "core.job.BaseJob",
                    "Iterator[int]"
                ]
            }
        },
        "HasListeners.add_listener": {
            "name": "add_listener",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "float",
                    "Callable",
                    "List[str]",
                    "Sequence[Any]"
                ],
                "callback": [
                    "Callable"
                ]
            }
        },
        "HasListeners.finalize_listeners": {
            "name": "finalize_listeners",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dnd.__init__": {
            "name": "__init__",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "core": [
                    "libqtile.backend.wayland.core.Core"
                ],
                "wlr_drag": [
                    "pymatgen.core.structure.Structure"
                ]
            }
        },
        "Dnd.finalize": {
            "name": "finalize",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dnd._on_destroy": {
            "name": "_on_destroy",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [
                    "str",
                    "int",
                    "List[Dict[str, Any]]"
                ],
                "_event": [
                    "str",
                    "int",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "Dnd._on_icon_map": {
            "name": "_on_icon_map",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [
                    "str",
                    "int",
                    "List[Dict[str, Any]]"
                ],
                "_event": [
                    "str",
                    "int",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "Dnd._on_icon_unmap": {
            "name": "_on_icon_unmap",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [
                    "str",
                    "int",
                    "List[Dict[str, Any]]"
                ],
                "_event": [
                    "str",
                    "int",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "Dnd._on_icon_destroy": {
            "name": "_on_icon_destroy",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [
                    "str",
                    "int",
                    "List[Dict[str, Any]]"
                ],
                "_event": [
                    "str",
                    "int",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "Dnd._on_icon_commit": {
            "name": "_on_icon_commit",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_listener": [
                    "str",
                    "int",
                    "List[Dict[str, Any]]"
                ],
                "_event": [
                    "str",
                    "int",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "Dnd.position": {
            "name": "position",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cx": [
                    "float"
                ],
                "cy": [
                    "float"
                ]
            }
        }
    },
    "qtile-master/libqtile/backend/wayland/__init__.py": {},
    "qtile-master/libqtile/backend/x11/core.py": {
        "get_keys": {
            "name": "get_keys",
            "location": 59,
            "return": [
                "List[str]"
            ],
            "arguments": {}
        },
        "get_modifiers": {
            "name": "get_modifiers",
            "location": 63,
            "return": [
                "List[str]"
            ],
            "arguments": {}
        },
        "Core.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "display_name": [
                    "None",
                    "Optional[str]",
                    "str",
                    "Union[None, List[str]]"
                ]
            }
        },
        "Core.name": {
            "name": "name",
            "location": 166,
            "return": [
                "typing.Text",
                "Tuple[float, float]",
                "int",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "str",
                "base.T"
            ],
            "arguments": {
                "self": []
            }
        },
        "Core.finalize": {
            "name": "finalize",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Core.get_screen_info": {
            "name": "get_screen_info",
            "location": 177,
            "return": [
                "List[Tuple[(int, int, int, int)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Core.wmname": {
            "name": "wmname",
            "location": 200,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "wmname": [
                    "Optional[Any]",
                    "str",
                    "Optional[Union[str, Any]]",
                    "Callable[..., None]"
                ]
            }
        },
        "Core.setup_listener": {
            "name": "setup_listener",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtile": [
                    "libqtile.core.manager.Qtile"
                ]
            }
        },
        "Core.remove_listener": {
            "name": "remove_listener",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Core.distribute_windows": {
            "name": "distribute_windows",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "initial": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "T",
                    "List[dict]"
                ]
            }
        },
        "Core.warp_pointer": {
            "name": "warp_pointer",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float"
                ],
                "y": [
                    "float"
                ]
            }
        },
        "Core.convert_selection": {
            "name": "convert_selection",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "selection_atom": [
                    "str",
                    "Callable",
                    "float",
                    "int"
                ],
                "_type": [
                    "typing.Text",
                    "str",
                    "bool"
                ]
            }
        },
        "Core._xpoll": {
            "name": "_xpoll",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Core._get_target_chain": {
            "name": "_get_target_chain",
            "location": 343,
            "return": [
                "List[Callable]"
            ],
            "arguments": {
                "self": [],
                "event_type": [
                    "str"
                ],
                "event": [
                    "Dict[str, Any]",
                    "sockeye.config.Config"
                ]
            }
        },
        "Core.get_valid_timestamp": {
            "name": "get_valid_timestamp",
            "location": 383,
            "return": [
                "str",
                "Callable",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "Core.display_name": {
            "name": "display_name",
            "location": 416,
            "return": [
                "str",
                "List[Tuple[str]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Core.update_client_list": {
            "name": "update_client_list",
            "location": 420,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "windows_map": [
                    "Dict[(int, Union[(base.Internal, base.Static, base.Window)])]"
                ]
            }
        },
        "Core.update_desktops": {
            "name": "update_desktops",
            "location": 432,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "groups": [
                    "int",
                    "T",
                    "str"
                ],
                "index": [
                    "int"
                ]
            }
        },
        "Core.lookup_key": {
            "name": "lookup_key",
            "location": 446,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "static_frame.core.util.GetItemKeyTypeCompound",
                    "static_frame.core.util.GetItemKeyType",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "Core.grab_key": {
            "name": "grab_key",
            "location": 456,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Core.ungrab_key": {
            "name": "ungrab_key",
            "location": 476,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Core.ungrab_keys": {
            "name": "ungrab_keys",
            "location": 487,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Core.grab_pointer": {
            "name": "grab_pointer",
            "location": 493,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Core.ungrab_pointer": {
            "name": "ungrab_pointer",
            "location": 506,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Core.grab_button": {
            "name": "grab_button",
            "location": 510,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "mouse": [
                    "config.Mouse"
                ]
            }
        },
        "Core.ungrab_buttons": {
            "name": "ungrab_buttons",
            "location": 533,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Core._auto_modmasks": {
            "name": "_auto_modmasks",
            "location": 539,
            "return": [
                "Iterator[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Core.masked": {
            "name": "masked",
            "location": 548,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "Core.create_internal": {
            "name": "create_internal",
            "location": 555,
            "return": [
                "base.Internal"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ],
                "width": [
                    "int"
                ],
                "height": [
                    "int"
                ],
                "desired_depth": [
                    "int",
                    "float"
                ]
            }
        },
        "Core.handle_FocusOut": {
            "name": "handle_FocusOut",
            "location": 566,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "List[dict]",
                    "sideeye.config.ASCParsingConfig"
                ]
            }
        },
        "Core.handle_SelectionNotify": {
            "name": "handle_SelectionNotify",
            "location": 570,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str",
                    "Type['BaseConfig']",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "Core.handle_PropertyNotify": {
            "name": "handle_PropertyNotify",
            "location": 582,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Dict[str, Any]",
                    "core.Config",
                    "Optional[Dict[str, Any]]",
                    "List[str]",
                    "str",
                    "dict",
                    "static_frame.core.store.StoreConfigMapInitializer"
                ]
            }
        },
        "Core.handle_ClientMessage": {
            "name": "handle_ClientMessage",
            "location": 596,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "pyramid.config.Configurator"
                ]
            }
        },
        "Core.handle_KeyPress": {
            "name": "handle_KeyPress",
            "location": 612,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "asyncio.AbstractEventLoop"
                ]
            }
        },
        "Core.handle_ButtonPress": {
            "name": "handle_ButtonPress",
            "location": 618,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Mapping[str, Any]",
                    "Dict[str, Any]",
                    "Sequence",
                    "app.config.MQConfig"
                ]
            }
        },
        "Core.handle_ButtonRelease": {
            "name": "handle_ButtonRelease",
            "location": 630,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict",
                    "app.config.MQConfig",
                    "Mapping[str, Any]"
                ]
            }
        },
        "Core.handle_MotionNotify": {
            "name": "handle_MotionNotify",
            "location": 637,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "cmk.base.config.HostConfig",
                    "core_lib.core.repositories.EventRepository",
                    "core_lib.core.repositories.VenueRepository"
                ]
            }
        },
        "Core.handle_ConfigureRequest": {
            "name": "handle_ConfigureRequest",
            "location": 642,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "Core.handle_MappingNotify": {
            "name": "handle_MappingNotify",
            "location": 659,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "purplship.core.utils.xml.Element"
                ]
            }
        },
        "Core.handle_MapRequest": {
            "name": "handle_MapRequest",
            "location": 666,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str",
                    "dict",
                    "Dict[str, List[Callable]]"
                ]
            }
        },
        "Core.handle_DestroyNotify": {
            "name": "handle_DestroyNotify",
            "location": 702,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Callable",
                    "Dict[str, Any]",
                    "List[dict]"
                ]
            }
        },
        "Core.handle_UnmapNotify": {
            "name": "handle_UnmapNotify",
            "location": 709,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "Core.handle_ScreenChangeNotify": {
            "name": "handle_ScreenChangeNotify",
            "location": 735,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Dict[str, Any]",
                    "Callable",
                    "int",
                    "str",
                    "dict"
                ]
            }
        },
        "Core.disable_unmap_events": {
            "name": "disable_unmap_events",
            "location": 739,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "Core.painter": {
            "name": "painter",
            "location": 745,
            "return": [
                "Painter",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Core.simulate_keypress": {
            "name": "simulate_keypress",
            "location": 750,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "modifiers": [
                    "str",
                    "bytes",
                    "Iterable[str]",
                    "Sequence",
                    "float"
                ],
                "key": [
                    "Dict[str, Any]",
                    "List[Tuple[str, str, str]]",
                    "T",
                    "Dict[str, tuple]",
                    "Exception",
                    "List[str]"
                ]
            }
        },
        "Core.focus_by_click": {
            "name": "focus_by_click",
            "location": 764,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "Callable",
                    "int",
                    "Dict[str, int]"
                ],
                "window": [
                    "None",
                    "nucypher.config.characters.UrsulaConfiguration",
                    "str",
                    "cmk.base.config.HostConfig",
                    "bool",
                    "cmk.base.checkers.host_sections.MultiHostSections",
                    "Optional[cmk.utils.type_defs.HostAddress]",
                    "dict"
                ]
            }
        },
        "Core.flush": {
            "name": "flush",
            "location": 801,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Core.graceful_shutdown": {
            "name": "graceful_shutdown",
            "location": 804,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Core.get_mouse_position": {
            "name": "get_mouse_position",
            "location": 845,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Core.keysym_from_name": {
            "name": "keysym_from_name",
            "location": 852,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Core.graceful_shutdown.get_interesting_pid": {
            "name": "get_interesting_pid",
            "location": 807,
            "return": [
                "None",
                "str",
                "bool"
            ],
            "arguments": {
                "win": [
                    "bool",
                    "Optional[core.models.Grouping]",
                    "str",
                    "int",
                    "Optional[bool]",
                    "Optional[List[Any]]"
                ]
            }
        },
        "Core.graceful_shutdown.still_alive": {
            "name": "still_alive",
            "location": 829,
            "return": [
                "bool"
            ],
            "arguments": {
                "pid": [
                    "str",
                    "int",
                    "Tuple[int, int]"
                ]
            }
        }
    },
    "qtile-master/libqtile/backend/x11/drawer.py": {
        "Drawer.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtile": [
                    "libqtile.core.manager.Qtile"
                ],
                "win": [
                    "base.Internal"
                ],
                "width": [
                    "int"
                ],
                "height": [
                    "int"
                ]
            }
        },
        "Drawer.finalize": {
            "name": "finalize",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Drawer.width": {
            "name": "width",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "width": [
                    "int",
                    "float"
                ]
            }
        },
        "Drawer.height": {
            "name": "height",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "height": [
                    "int",
                    "float"
                ]
            }
        },
        "Drawer.pixmap": {
            "name": "pixmap",
            "location": 62,
            "return": [
                "None",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Drawer._create_gc": {
            "name": "_create_gc",
            "location": 69,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Drawer._free_gc": {
            "name": "_free_gc",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Drawer._create_xcb_surface": {
            "name": "_create_xcb_surface",
            "location": 87,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Drawer._free_xcb_surface": {
            "name": "_free_xcb_surface",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Drawer._create_pixmap": {
            "name": "_create_pixmap",
            "location": 102,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Drawer._free_pixmap": {
            "name": "_free_pixmap",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Drawer._check_xcb": {
            "name": "_check_xcb",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Drawer._paint": {
            "name": "_paint",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Drawer._draw": {
            "name": "_draw",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "offsetx": [
                    "int"
                ],
                "offsety": [
                    "int"
                ],
                "width": [
                    "None",
                    "bool",
                    "str",
                    "int"
                ],
                "height": [
                    "None",
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "Drawer._find_root_visual": {
            "name": "_find_root_visual",
            "location": 168,
            "return": [
                "str",
                "Tuple[Any, Any, Any]",
                "int",
                "List[str]",
                "Callable",
                "List[object]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Drawer.clear": {
            "name": "clear",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "colour": [
                    "str"
                ]
            }
        },
        "Drawer.set_source_rgb": {
            "name": "set_source_rgb",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "colour": [
                    "str"
                ],
                "ctx": [
                    "bool",
                    "None"
                ]
            }
        }
    },
    "qtile-master/libqtile/backend/x11/window.py": {
        "_geometry_getter": {
            "name": "_geometry_getter",
            "location": 91,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "attr": []
            }
        },
        "_geometry_setter": {
            "name": "_geometry_setter",
            "location": 106,
            "return": [
                "Callable[([Any, Any], Any)]"
            ],
            "arguments": {
                "attr": []
            }
        },
        "_geometry_getter.get_attr": {
            "name": "get_attr",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_geometry_setter.f": {
            "name": "f",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "XWindow.__init__": {
            "name": "__init__",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conn": [],
                "wid": []
            }
        },
        "XWindow._property_string": {
            "name": "_property_string",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "r": []
            }
        },
        "XWindow._property_utf8": {
            "name": "_property_utf8",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "r": []
            }
        },
        "XWindow.send_event": {
            "name": "send_event",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "synthevent": [],
                "mask": []
            }
        },
        "XWindow.kill_client": {
            "name": "kill_client",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "XWindow.set_input_focus": {
            "name": "set_input_focus",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "XWindow.warp_pointer": {
            "name": "warp_pointer",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "XWindow.get_name": {
            "name": "get_name",
            "location": 158,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XWindow.get_wm_hints": {
            "name": "get_wm_hints",
            "location": 182,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "XWindow.get_wm_normal_hints": {
            "name": "get_wm_normal_hints",
            "location": 199,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "XWindow.get_wm_protocols": {
            "name": "get_wm_protocols",
            "location": 223,
            "return": [
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "XWindow.get_wm_state": {
            "name": "get_wm_state",
            "location": 229,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XWindow.get_wm_class": {
            "name": "get_wm_class",
            "location": 232,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "XWindow.get_wm_window_role": {
            "name": "get_wm_window_role",
            "location": 240,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XWindow.get_wm_transient_for": {
            "name": "get_wm_transient_for",
            "location": 245,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XWindow.get_wm_icon_name": {
            "name": "get_wm_icon_name",
            "location": 252,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XWindow.get_wm_client_machine": {
            "name": "get_wm_client_machine",
            "location": 261,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XWindow.get_geometry": {
            "name": "get_geometry",
            "location": 266,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XWindow.get_wm_desktop": {
            "name": "get_wm_desktop",
            "location": 270,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XWindow.get_wm_type": {
            "name": "get_wm_type",
            "location": 276,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XWindow.get_net_wm_state": {
            "name": "get_net_wm_state",
            "location": 285,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "XWindow.get_net_wm_pid": {
            "name": "get_net_wm_pid",
            "location": 292,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XWindow.configure": {
            "name": "configure",
            "location": 297,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XWindow.set_attribute": {
            "name": "set_attribute",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "XWindow.set_cursor": {
            "name": "set_cursor",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "XWindow.set_property": {
            "name": "set_property",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "value": [],
                "type": [],
                "format": []
            }
        },
        "XWindow.get_property": {
            "name": "get_property",
            "location": 361,
            "return": [],
            "arguments": {
                "self": [],
                "prop": [],
                "type": [],
                "unpack": []
            }
        },
        "XWindow.list_properties": {
            "name": "list_properties",
            "location": 401,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "XWindow.map": {
            "name": "map",
            "location": 405,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "XWindow.unmap": {
            "name": "unmap",
            "location": 408,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "XWindow.get_attributes": {
            "name": "get_attributes",
            "location": 411,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XWindow.query_tree": {
            "name": "query_tree",
            "location": 414,
            "return": [
                "Tuple[(Optional[XWindow], Optional[XWindow], List[XWindow])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "XWindow.paint_borders": {
            "name": "paint_borders",
            "location": 424,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "depth": [],
                "colors": [],
                "borderwidth": [],
                "width": [],
                "height": []
            }
        },
        "XWindow._set_borderpixmap": {
            "name": "_set_borderpixmap",
            "location": 463,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "depth": [],
                "pixmap": [],
                "gc": [],
                "borderwidth": [],
                "width": [],
                "height": []
            }
        },
        "_Window.__init__": {
            "name": "__init__",
            "location": 481,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "window": [],
                "qtile": []
            }
        },
        "_Window.wid": {
            "name": "wid",
            "location": 548,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_Window.group": {
            "name": "group",
            "location": 552,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_Window.has_fixed_ratio": {
            "name": "has_fixed_ratio",
            "location": 555,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Window.has_fixed_size": {
            "name": "has_fixed_size",
            "location": 566,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Window.has_user_set_position": {
            "name": "has_user_set_position",
            "location": 579,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Window.update_name": {
            "name": "update_name",
            "location": 587,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Window.update_wm_class": {
            "name": "update_wm_class",
            "location": 594,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Window.get_wm_class": {
            "name": "get_wm_class",
            "location": 597,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_Window.get_wm_type": {
            "name": "get_wm_type",
            "location": 600,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_Window.get_wm_role": {
            "name": "get_wm_role",
            "location": 603,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_Window.is_transient_for": {
            "name": "is_transient_for",
            "location": 606,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_Window.update_hints": {
            "name": "update_hints",
            "location": 611,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Window.update_state": {
            "name": "update_state",
            "location": 649,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Window.urgent": {
            "name": "urgent",
            "location": 665,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "_Window.info": {
            "name": "info",
            "location": 671,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Window.state": {
            "name": "state",
            "location": 703,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "_Window.opacity": {
            "name": "opacity",
            "location": 720,
            "return": [],
            "arguments": {
                "self": [],
                "opacity": []
            }
        },
        "_Window.kill": {
            "name": "kill",
            "location": 726,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Window.hide": {
            "name": "hide",
            "location": 750,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Window.unhide": {
            "name": "unhide",
            "location": 757,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Window.disable_mask": {
            "name": "disable_mask",
            "location": 763,
            "return": [],
            "arguments": {
                "self": [],
                "mask": []
            }
        },
        "_Window._disable_mask": {
            "name": "_disable_mask",
            "location": 768,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mask": []
            }
        },
        "_Window._reset_mask": {
            "name": "_reset_mask",
            "location": 771,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Window._grab_click": {
            "name": "_grab_click",
            "location": 774,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Window._ungrab_click": {
            "name": "_ungrab_click",
            "location": 790,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Window.get_pid": {
            "name": "get_pid",
            "location": 798,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_Window.place": {
            "name": "place",
            "location": 801,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "width": [],
                "height": [],
                "borderwidth": [],
                "bordercolor": [],
                "above": [],
                "margin": [],
                "respect_hints": []
            }
        },
        "_Window.paint_borders": {
            "name": "paint_borders",
            "location": 911,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "color": [],
                "width": []
            }
        },
        "_Window.send_configure_notify": {
            "name": "send_configure_notify",
            "location": 917,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "width": [],
                "height": []
            }
        },
        "_Window.can_steal_focus": {
            "name": "can_steal_focus",
            "location": 939,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_Window._do_focus": {
            "name": "_do_focus",
            "location": 942,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Window.focus": {
            "name": "focus",
            "location": 991,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "warp": [
                    "bool"
                ]
            }
        },
        "_Window.cmd_focus": {
            "name": "cmd_focus",
            "location": 1034,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "warp": [
                    "bool"
                ]
            }
        },
        "_Window.cmd_hints": {
            "name": "cmd_hints",
            "location": 1038,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Window.cmd_inspect": {
            "name": "cmd_inspect",
            "location": 1042,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Internal.__init__": {
            "name": "__init__",
            "location": 1112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "win": [],
                "qtile": [],
                "desired_depth": []
            }
        },
        "Internal.create_drawer": {
            "name": "create_drawer",
            "location": 1117,
            "return": [
                "base.Drawer"
            ],
            "arguments": {
                "self": [],
                "width": [
                    "int"
                ],
                "height": [
                    "int"
                ]
            }
        },
        "Internal.kill": {
            "name": "kill",
            "location": 1121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Internal.cmd_kill": {
            "name": "cmd_kill",
            "location": 1127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Internal.handle_Expose": {
            "name": "handle_Expose",
            "location": 1130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e": []
            }
        },
        "Internal.handle_ButtonPress": {
            "name": "handle_ButtonPress",
            "location": 1133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e": []
            }
        },
        "Internal.handle_ButtonRelease": {
            "name": "handle_ButtonRelease",
            "location": 1136,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "e": []
            }
        },
        "Internal.handle_EnterNotify": {
            "name": "handle_EnterNotify",
            "location": 1141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e": []
            }
        },
        "Internal.handle_LeaveNotify": {
            "name": "handle_LeaveNotify",
            "location": 1144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e": []
            }
        },
        "Internal.handle_MotionNotify": {
            "name": "handle_MotionNotify",
            "location": 1147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e": []
            }
        },
        "Internal.handle_KeyPress": {
            "name": "handle_KeyPress",
            "location": 1150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e": []
            }
        },
        "Internal.info": {
            "name": "info",
            "location": 1156,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Static.__init__": {
            "name": "__init__",
            "location": 1177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "win": [],
                "qtile": [],
                "screen": [],
                "x": [],
                "y": [],
                "width": [],
                "height": []
            }
        },
        "Static.handle_ConfigureRequest": {
            "name": "handle_ConfigureRequest",
            "location": 1196,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "e": []
            }
        },
        "Static.update_strut": {
            "name": "update_strut",
            "location": 1217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Static.handle_PropertyNotify": {
            "name": "handle_PropertyNotify",
            "location": 1257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e": []
            }
        },
        "Static.cmd_bring_to_front": {
            "name": "cmd_bring_to_front",
            "location": 1262,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.__init__": {
            "name": "__init__",
            "location": 1274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "window": [],
                "qtile": []
            }
        },
        "Window.group": {
            "name": "group",
            "location": 1291,
            "return": [],
            "arguments": {
                "self": [],
                "group": []
            }
        },
        "Window.edges": {
            "name": "edges",
            "location": 1300,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Window.floating": {
            "name": "floating",
            "location": 1308,
            "return": [],
            "arguments": {
                "self": [],
                "do_float": []
            }
        },
        "Window.wants_to_fullscreen": {
            "name": "wants_to_fullscreen",
            "location": 1332,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Window.toggle_floating": {
            "name": "toggle_floating",
            "location": 1339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.set_wm_state": {
            "name": "set_wm_state",
            "location": 1342,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "old_state": [],
                "new_state": []
            }
        },
        "Window.update_fullscreen_wm_state": {
            "name": "update_fullscreen_wm_state",
            "location": 1346,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "do_full": []
            }
        },
        "Window.fullscreen": {
            "name": "fullscreen",
            "location": 1365,
            "return": [],
            "arguments": {
                "self": [],
                "do_full": []
            }
        },
        "Window.toggle_fullscreen": {
            "name": "toggle_fullscreen",
            "location": 1383,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.maximized": {
            "name": "maximized",
            "location": 1391,
            "return": [],
            "arguments": {
                "self": [],
                "do_maximize": []
            }
        },
        "Window.toggle_maximize": {
            "name": "toggle_maximize",
            "location": 1407,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "Window.minimized": {
            "name": "minimized",
            "location": 1415,
            "return": [],
            "arguments": {
                "self": [],
                "do_minimize": []
            }
        },
        "Window.toggle_minimize": {
            "name": "toggle_minimize",
            "location": 1423,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.cmd_is_visible": {
            "name": "cmd_is_visible",
            "location": 1426,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.cmd_static": {
            "name": "cmd_static",
            "location": 1429,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "screen": [],
                "x": [],
                "y": [],
                "width": [],
                "height": []
            }
        },
        "Window.tweak_float": {
            "name": "tweak_float",
            "location": 1456,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "dx": [],
                "dy": [],
                "w": [],
                "h": [],
                "dw": [],
                "dh": []
            }
        },
        "Window.getsize": {
            "name": "getsize",
            "location": 1488,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.getposition": {
            "name": "getposition",
            "location": 1491,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window._reconfigure_floating": {
            "name": "_reconfigure_floating",
            "location": 1494,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_float_state": []
            }
        },
        "Window._enablefloating": {
            "name": "_enablefloating",
            "location": 1516,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "w": [],
                "h": [],
                "new_float_state": []
            }
        },
        "Window.set_group": {
            "name": "set_group",
            "location": 1526,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.togroup": {
            "name": "togroup",
            "location": 1542,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "group_name": []
            }
        },
        "Window.match": {
            "name": "match",
            "location": 1576,
            "return": [],
            "arguments": {
                "self": [],
                "match": []
            }
        },
        "Window.handle_EnterNotify": {
            "name": "handle_EnterNotify",
            "location": 1589,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "e": []
            }
        },
        "Window.handle_ButtonPress": {
            "name": "handle_ButtonPress",
            "location": 1598,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e": []
            }
        },
        "Window.handle_ConfigureRequest": {
            "name": "handle_ConfigureRequest",
            "location": 1602,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "e": []
            }
        },
        "Window.update_wm_net_icon": {
            "name": "update_wm_net_icon",
            "location": 1628,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.handle_ClientMessage": {
            "name": "handle_ClientMessage",
            "location": 1663,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "Window.handle_PropertyNotify": {
            "name": "handle_PropertyNotify",
            "location": 1730,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "e": []
            }
        },
        "Window._items": {
            "name": "_items",
            "location": 1772,
            "return": [
                "Optional[Tuple[(bool, list)]]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Window._select": {
            "name": "_select",
            "location": 1784,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "sel": []
            }
        },
        "Window.cmd_kill": {
            "name": "cmd_kill",
            "location": 1795,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.cmd_move_floating": {
            "name": "cmd_move_floating",
            "location": 1803,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dx": [],
                "dy": []
            }
        },
        "Window.cmd_resize_floating": {
            "name": "cmd_resize_floating",
            "location": 1807,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dw": [],
                "dh": []
            }
        },
        "Window.cmd_set_position_floating": {
            "name": "cmd_set_position_floating",
            "location": 1811,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "Window.cmd_set_size_floating": {
            "name": "cmd_set_size_floating",
            "location": 1815,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "w": [],
                "h": []
            }
        },
        "Window.cmd_place": {
            "name": "cmd_place",
            "location": 1819,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "width": [],
                "height": [],
                "borderwidth": [],
                "bordercolor": [],
                "above": [],
                "margin": []
            }
        },
        "Window.cmd_get_position": {
            "name": "cmd_get_position",
            "location": 1822,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Window.cmd_get_size": {
            "name": "cmd_get_size",
            "location": 1825,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Window.cmd_toggle_floating": {
            "name": "cmd_toggle_floating",
            "location": 1828,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.cmd_enable_floating": {
            "name": "cmd_enable_floating",
            "location": 1831,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.cmd_disable_floating": {
            "name": "cmd_disable_floating",
            "location": 1834,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.cmd_toggle_maximize": {
            "name": "cmd_toggle_maximize",
            "location": 1837,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.cmd_toggle_fullscreen": {
            "name": "cmd_toggle_fullscreen",
            "location": 1840,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.cmd_enable_fullscreen": {
            "name": "cmd_enable_fullscreen",
            "location": 1843,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.cmd_disable_fullscreen": {
            "name": "cmd_disable_fullscreen",
            "location": 1846,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.cmd_toggle_minimize": {
            "name": "cmd_toggle_minimize",
            "location": 1849,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.cmd_bring_to_front": {
            "name": "cmd_bring_to_front",
            "location": 1852,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window._is_in_window": {
            "name": "_is_in_window",
            "location": 1858,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "window": []
            }
        },
        "Window.cmd_set_position": {
            "name": "cmd_set_position",
            "location": 1861,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        }
    },
    "qtile-master/libqtile/backend/x11/xcbq.py": {
        "get_keysym": {
            "name": "get_keysym",
            "location": 783,
            "return": [
                "int"
            ],
            "arguments": {
                "key": [
                    "str"
                ]
            }
        },
        "translate_modifiers": {
            "name": "translate_modifiers",
            "location": 790,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "mask": [
                    "int"
                ]
            }
        },
        "translate_masks": {
            "name": "translate_masks",
            "location": 798,
            "return": [
                "int"
            ],
            "arguments": {
                "modifiers": [
                    "List[str]"
                ]
            }
        },
        "MaskMap.__init__": {
            "name": "__init__",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Collection[int]",
                    "str",
                    "List[str]",
                    "int",
                    "list"
                ]
            }
        },
        "MaskMap.__call__": {
            "name": "__call__",
            "location": 232,
            "return": [
                "Tuple[(int, list)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtomCache.__init__": {
            "name": "__init__",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conn": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "AtomCache.insert": {
            "name": "insert",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "Optional[List[str]]"
                ],
                "atom": [
                    "None",
                    "str",
                    "Type[T]"
                ]
            }
        },
        "AtomCache.get_name": {
            "name": "get_name",
            "location": 281,
            "return": [
                "str",
                "int",
                "Type[Any]",
                "IO",
                "complex",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "atom": [
                    "str",
                    "int",
                    "Type[Any]",
                    "IO",
                    "complex",
                    "Dict[str, Any]"
                ]
            }
        },
        "AtomCache.__getitem__": {
            "name": "__getitem__",
            "location": 286,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "KT",
                    "bytes"
                ]
            }
        },
        "_Wrapper.__init__": {
            "name": "__init__",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wrapped": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "_Wrapper.__getattr__": {
            "name": "__getattr__",
            "location": 296,
            "return": [
                "bool",
                "utils.Node"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "Screen.__init__": {
            "name": "__init__",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conn": [
                    "str",
                    "float",
                    "bool",
                    "utils.diskstaSection",
                    "Tuple[float, float]"
                ],
                "screen": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Screen._get_depth_and_visual": {
            "name": "_get_depth_and_visual",
            "location": 319,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "desired_depth": [
                    "_T0"
                ]
            }
        },
        "Screen.get_visual_for_depth": {
            "name": "get_visual_for_depth",
            "location": 338,
            "return": [
                "None",
                "str",
                "Dict[str, Dict[str, int]]",
                "bool"
            ],
            "arguments": {
                "screen": [
                    "str",
                    "bytes"
                ],
                "depth": [
                    "List[List[int]]",
                    "int",
                    "str"
                ]
            }
        },
        "PseudoScreen.__init__": {
            "name": "__init__",
            "location": 362,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conn": [
                    "int",
                    "float",
                    "tuple"
                ],
                "x": [
                    "int",
                    "float",
                    "tuple"
                ],
                "y": [
                    "int",
                    "float",
                    "bool"
                ],
                "width": [
                    "int",
                    "float",
                    "tuple"
                ],
                "height": [
                    "int",
                    "float",
                    "tuple"
                ]
            }
        },
        "Colormap.__init__": {
            "name": "__init__",
            "location": 371,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conn": [
                    "int",
                    "bool",
                    "float"
                ],
                "cid": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Colormap.alloc_color": {
            "name": "alloc_color",
            "location": 375,
            "return": [
                "Optional[str]",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "color": [
                    "list",
                    "dict",
                    "Iterable[Tuple[str, str]]",
                    "Set[str]",
                    "str",
                    "Optional[List[str]]",
                    "int"
                ]
            }
        },
        "Xinerama.__init__": {
            "name": "__init__",
            "location": 394,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conn": [
                    "str",
                    "dict"
                ]
            }
        },
        "Xinerama.query_screens": {
            "name": "query_screens",
            "location": 397,
            "return": [
                "str",
                "MutableMapping[str, Any]",
                "Union[int, float, complex]",
                "bytes",
                "Dict[str, Any]",
                "bool",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RandR.__init__": {
            "name": "__init__",
            "location": 403,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conn": [
                    "str",
                    "MutableMapping",
                    "Exception",
                    "cmk.utils.type_defs.UserId",
                    "float"
                ]
            }
        },
        "RandR.query_crtcs": {
            "name": "query_crtcs",
            "location": 407,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "T",
                    "Container[T]",
                    "Dict[str, Any]"
                ]
            }
        },
        "XFixes.__init__": {
            "name": "__init__",
            "location": 428,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conn": [
                    "List[str]",
                    "int",
                    "Dict[str, Callable]"
                ]
            }
        },
        "XFixes.select_selection_input": {
            "name": "select_selection_input",
            "location": 433,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "window": [
                    "dict",
                    "Dict[str, Dict[str, str]]",
                    "Dict[str, List[str]]",
                    "Dict[str, int]",
                    "Dict[str, float]"
                ],
                "selection": [
                    "typing.Text",
                    "str",
                    "Tuple[List, List, List]",
                    "bytes",
                    "bool"
                ]
            }
        },
        "NetWmState.__init__": {
            "name": "__init__",
            "location": 441,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prop_name": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "NetWmState.__get__": {
            "name": "__get__",
            "location": 444,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "xcbq_win": [
                    "str",
                    "Optional[bool]",
                    "int"
                ],
                "cls": [
                    "int",
                    "List[Tuple[str, int]]",
                    "str",
                    "bool"
                ]
            }
        },
        "NetWmState.__set__": {
            "name": "__set__",
            "location": 455,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "xcbq_win": [
                    "int",
                    "Union[str, bytes]",
                    "float",
                    "bool"
                ],
                "value": [
                    "bool",
                    "List[str]",
                    "Tuple[float, float]",
                    "dict",
                    "int",
                    "Union[int, float]"
                ]
            }
        },
        "Connection.__init__": {
            "name": "__init__",
            "location": 481,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "display": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Connection.colormap": {
            "name": "colormap",
            "location": 505,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "desired_depth": [
                    "str",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "Connection.pseudoscreens": {
            "name": "pseudoscreens",
            "location": 524,
            "return": [
                "list[PseudoScreen]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Connection.finalize": {
            "name": "finalize",
            "location": 548,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Connection.refresh_keymap": {
            "name": "refresh_keymap",
            "location": 552,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "first": [
                    "Optional[str]",
                    "None"
                ],
                "count": [
                    "None",
                    "int",
                    "Union[int, float]",
                    "str"
                ]
            }
        },
        "Connection.refresh_modmap": {
            "name": "refresh_modmap",
            "location": 576,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Connection.get_modifier": {
            "name": "get_modifier",
            "location": 585,
            "return": [
                "None",
                "Optional[str]",
                "Optional[List[str]]",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "keycode": [
                    "str",
                    "int"
                ]
            }
        },
        "Connection.keysym_to_keycode": {
            "name": "keysym_to_keycode",
            "location": 592,
            "return": [
                "str",
                "cmk.utils.type_defs.UserId"
            ],
            "arguments": {
                "self": [],
                "keysym": [
                    "dict",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "Connection.keycode_to_keysym": {
            "name": "keycode_to_keysym",
            "location": 595,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "keycode": [
                    "List[int]",
                    "List[bytes]",
                    "list",
                    "Sequence[T]",
                    "bytes",
                    "bytearray",
                    "List[Tuple[str, str]]",
                    "str"
                ],
                "modifier": [
                    "List[int]",
                    "List[bytes]",
                    "list",
                    "Sequence[T]",
                    "bytes",
                    "bytearray",
                    "List[Tuple[str, str]]",
                    "str"
                ]
            }
        },
        "Connection.create_window": {
            "name": "create_window",
            "location": 600,
            "return": [
                "window.XWindow"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "str",
                    "Union[float, str]",
                    "Optional[bool]"
                ],
                "y": [
                    "int",
                    "str",
                    "Union[float, str]",
                    "Optional[bool]"
                ],
                "width": [
                    "int",
                    "str",
                    "Union[float, str]",
                    "Optional[bool]"
                ],
                "height": [
                    "int",
                    "str",
                    "Union[float, str]",
                    "Optional[bool]"
                ],
                "desired_depth": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "Connection.disconnect": {
            "name": "disconnect",
            "location": 629,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Connection.flush": {
            "name": "flush",
            "location": 636,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Connection.xsync": {
            "name": "xsync",
            "location": 640,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Connection.get_setup": {
            "name": "get_setup",
            "location": 646,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Connection.extensions": {
            "name": "extensions",
            "location": 649,
            "return": [
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Connection.fixup_focus": {
            "name": "fixup_focus",
            "location": 654,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Connection.color_pixel": {
            "name": "color_pixel",
            "location": 669,
            "return": [
                "str",
                "utils.Node",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "Painter.__init__": {
            "name": "__init__",
            "location": 675,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "display": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Painter.paint": {
            "name": "paint",
            "location": 685,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "screen": [
                    "int",
                    "list",
                    "bool",
                    "str"
                ],
                "image_path": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "mode": [
                    "None",
                    "str",
                    "List[str]",
                    "int",
                    "bool",
                    "Iterator[int]"
                ]
            }
        },
        "Painter.__del__": {
            "name": "__del__",
            "location": 779,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Colormap.alloc_color.x8to16": {
            "name": "x8to16",
            "location": 383,
            "return": [
                "int",
                "bool",
                "float",
                "List[float]",
                "str"
            ],
            "arguments": {
                "i": [
                    "int",
                    "bool",
                    "slice",
                    "T"
                ]
            }
        }
    },
    "qtile-master/libqtile/backend/x11/xcursors.py": {
        "Cursors.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conn": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Cursors.finalize": {
            "name": "finalize",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cursors._setup_xcursor_binding": {
            "name": "_setup_xcursor_binding",
            "location": 110,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cursors.get_xcursor": {
            "name": "get_xcursor",
            "location": 124,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Cursors.get_font_cursor": {
            "name": "get_font_cursor",
            "location": 131,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "Iterable[str]"
                ],
                "cursor_font": [
                    "str"
                ]
            }
        },
        "Cursors._new": {
            "name": "_new",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]"
                ],
                "cursor_font": [
                    "str"
                ]
            }
        }
    },
    "qtile-master/libqtile/backend/x11/xcursors_ffi_build.py": {},
    "qtile-master/libqtile/backend/x11/xkeysyms.py": {},
    "qtile-master/libqtile/backend/x11/__init__.py": {},
    "qtile-master/libqtile/command/base.py": {
        "SelectError.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "err_string": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "selectors": [
                    "List[Tuple[(str, Any)]]"
                ]
            }
        },
        "CommandObject.select": {
            "name": "select",
            "location": 67,
            "return": [
                "CommandObject"
            ],
            "arguments": {
                "self": [
                    "_TCommandObject"
                ],
                "selectors": [
                    "List[Tuple[(str, Any)]]"
                ]
            }
        },
        "CommandObject.items": {
            "name": "items",
            "location": 94,
            "return": [
                "Tuple[(bool, Any)]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "CommandObject._items": {
            "name": "_items",
            "location": 113,
            "return": [
                "Optional[Tuple[(bool, list)]]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ]
            }
        },
        "CommandObject._select": {
            "name": "_select",
            "location": 121,
            "return": [
                "CommandObject | None",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "sel": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "CommandObject.command": {
            "name": "command",
            "location": 133,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "CommandObject.commands": {
            "name": "commands",
            "location": 149,
            "return": [
                "list[str]",
                "list",
                "Callable[[Mapping], T]",
                "int",
                "Tuple[str, str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandObject.cmd_commands": {
            "name": "cmd_commands",
            "location": 154,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandObject.cmd_items": {
            "name": "cmd_items",
            "location": 161,
            "return": [
                "Tuple[(bool, Any)]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "CommandObject.cmd_doc": {
            "name": "cmd_doc",
            "location": 168,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "CommandObject._get_command_signature": {
            "name": "_get_command_signature",
            "location": 182,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "Callable"
                ]
            }
        },
        "CommandObject.cmd_eval": {
            "name": "cmd_eval",
            "location": 191,
            "return": [
                "Tuple[(bool, Any)]"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str"
                ]
            }
        },
        "CommandObject.cmd_function": {
            "name": "cmd_function",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "function": []
            }
        }
    },
    "qtile-master/libqtile/command/client.py": {
        "_normalize_item": {
            "name": "_normalize_item",
            "location": 296,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "object_type": [
                    "str",
                    "dict",
                    "Optional[object]"
                ],
                "item": [
                    "str"
                ]
            }
        },
        "CommandClient.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "None",
                    "Optional[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "CommandClient.navigate": {
            "name": "navigate",
            "location": 81,
            "return": [
                "CommandClient"
            ],
            "arguments": {
                "self": [
                    "_TCommandClient"
                ],
                "name": [
                    "str"
                ],
                "selector": [
                    "str",
                    "Callable",
                    "bool"
                ]
            }
        },
        "CommandClient.call": {
            "name": "call",
            "location": 110,
            "return": [
                "Container[T]",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "CommandClient.children": {
            "name": "children",
            "location": 134,
            "return": [
                "float",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandClient.selectors": {
            "name": "selectors",
            "location": 139,
            "return": [
                "float",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandClient.commands": {
            "name": "commands",
            "location": 143,
            "return": [
                "str",
                "Dict[str, Any]",
                "Callable",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandClient.items": {
            "name": "items",
            "location": 148,
            "return": [
                "Tuple[(bool, list)]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "CommandClient.root": {
            "name": "root",
            "location": 154,
            "return": [
                "str",
                "Callable[[str], None]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandClient.parent": {
            "name": "parent",
            "location": 159,
            "return": [
                "Optional[str]",
                "type",
                "tuple",
                "int",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "InteractiveCommandClient.__init__": {
            "name": "__init__",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "None",
                    "Optional[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "InteractiveCommandClient.__call__": {
            "name": "__call__",
            "location": 194,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "InteractiveCommandClient.__getattr__": {
            "name": "__getattr__",
            "location": 201,
            "return": [
                "InteractiveCommandClient"
            ],
            "arguments": {
                "self": [
                    "_TInteractiveCommandClient"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "InteractiveCommandClient.__getitem__": {
            "name": "__getitem__",
            "location": 245,
            "return": [
                "InteractiveCommandClient"
            ],
            "arguments": {
                "self": [
                    "_TInteractiveCommandClient"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "InteractiveCommandClient.normalize_item": {
            "name": "normalize_item",
            "location": 286,
            "return": [
                "tuple",
                "str",
                "Callable",
                "Type"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str"
                ]
            }
        }
    },
    "qtile-master/libqtile/command/graph.py": {
        "CommandGraphNode.selector": {
            "name": "selector",
            "location": 46,
            "return": [
                "str | int | None",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandGraphNode.selectors": {
            "name": "selectors",
            "location": 51,
            "return": [
                "builtins.list[SelectorType]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandGraphNode.parent": {
            "name": "parent",
            "location": 56,
            "return": [
                "CommandGraphNode | None",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandGraphNode.children": {
            "name": "children",
            "location": 61,
            "return": [
                "builtins.list[builtins.str]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandGraphNode.navigate": {
            "name": "navigate",
            "location": 64,
            "return": [
                "CommandGraphNode"
            ],
            "arguments": {
                "self": [
                    "_TCommandGraphNode"
                ],
                "name": [
                    "str"
                ],
                "selector": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "CommandGraphNode.call": {
            "name": "call",
            "location": 70,
            "return": [
                "CommandGraphCall"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "CommandGraphCall.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "parent": [
                    "CommandGraphNode"
                ]
            }
        },
        "CommandGraphCall.name": {
            "name": "name",
            "location": 95,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandGraphCall.selectors": {
            "name": "selectors",
            "location": 100,
            "return": [
                "Optional[int]",
                "Optional[List[Callable]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandGraphCall.parent": {
            "name": "parent",
            "location": 105,
            "return": [
                "Optional[int]",
                "T",
                "Optional[str]",
                "Optional[List[Callable]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandGraphRoot.selector": {
            "name": "selector",
            "location": 117,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandGraphRoot.selectors": {
            "name": "selectors",
            "location": 122,
            "return": [
                "list",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandGraphRoot.parent": {
            "name": "parent",
            "location": 127,
            "return": [
                "None",
                "Optional[str]",
                "Optional[int]",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandGraphRoot.children": {
            "name": "children",
            "location": 132,
            "return": [
                "list[typing.Text]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandGraphObject.__init__": {
            "name": "__init__",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "selector": [
                    "str",
                    "Callable",
                    "List[str]",
                    "Optional[List[str]]"
                ],
                "parent": [
                    "CommandGraphNode"
                ]
            }
        },
        "CommandGraphObject.selector": {
            "name": "selector",
            "location": 155,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandGraphObject.selectors": {
            "name": "selectors",
            "location": 160,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandGraphObject.parent": {
            "name": "parent",
            "location": 166,
            "return": [
                "Optional[int]",
                "T",
                "Optional[str]",
                "Optional[List[Callable]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandGraphObject.object_type": {
            "name": "object_type",
            "location": 172,
            "return": [
                "builtins.str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/command/interface.py": {
        "format_selectors": {
            "name": "format_selectors",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "selectors": [
                    "List[Tuple[(str, Any)]]"
                ]
            }
        },
        "CommandInterface.execute": {
            "name": "execute",
            "location": 66,
            "return": [
                "typing.Any",
                "None"
            ],
            "arguments": {
                "self": [],
                "call": [
                    "libqtile.command.graph.CommandGraphCall"
                ],
                "args": [
                    "tuple"
                ],
                "kwargs": [
                    "dict"
                ]
            }
        },
        "CommandInterface.has_command": {
            "name": "has_command",
            "location": 83,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "libqtile.command.graph.CommandGraphNode"
                ],
                "command": [
                    "str"
                ]
            }
        },
        "CommandInterface.has_item": {
            "name": "has_item",
            "location": 100,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "libqtile.command.graph.CommandGraphNode"
                ],
                "object_type": [
                    "str"
                ],
                "item": [
                    "str",
                    "Union[str, int]",
                    "libqtile.command_graph.CommandGraphNode",
                    "Type",
                    "Tuple[str]"
                ]
            }
        },
        "QtileCommandInterface.__init__": {
            "name": "__init__",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "command_object": [
                    "libqtile.command.base.CommandObject"
                ]
            }
        },
        "QtileCommandInterface.execute": {
            "name": "execute",
            "location": 133,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "call": [
                    "libqtile.command.graph.CommandGraphCall"
                ],
                "args": [
                    "tuple"
                ],
                "kwargs": [
                    "dict"
                ]
            }
        },
        "QtileCommandInterface.has_command": {
            "name": "has_command",
            "location": 161,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "libqtile.command.graph.CommandGraphNode"
                ],
                "command": [
                    "str"
                ]
            }
        },
        "QtileCommandInterface.has_item": {
            "name": "has_item",
            "location": 180,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "libqtile.command.graph.CommandGraphNode"
                ],
                "object_type": [
                    "str"
                ],
                "item": [
                    "libqtile.command_graph.CommandGraphNode",
                    "Union[str, int]",
                    "str",
                    "Sequence[Dict[str, Any]]",
                    "type"
                ]
            }
        },
        "IPCCommandInterface.__init__": {
            "name": "__init__",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ipc_client": [
                    "ipc.Client"
                ]
            }
        },
        "IPCCommandInterface.execute": {
            "name": "execute",
            "location": 217,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "call": [
                    "libqtile.command.graph.CommandGraphCall"
                ],
                "args": [
                    "tuple"
                ],
                "kwargs": [
                    "dict"
                ]
            }
        },
        "IPCCommandInterface.has_command": {
            "name": "has_command",
            "location": 239,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "libqtile.command.graph.CommandGraphNode"
                ],
                "command": [
                    "str"
                ]
            }
        },
        "IPCCommandInterface.has_item": {
            "name": "has_item",
            "location": 261,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "libqtile.command.graph.CommandGraphNode"
                ],
                "object_type": [
                    "str"
                ],
                "item": [
                    "Union[str, int]",
                    "str",
                    "Optional[str]",
                    "Set[str]",
                    "Optional[Iterable[str]]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "IPCCommandServer.__init__": {
            "name": "__init__",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtile": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "IPCCommandServer.call": {
            "name": "call",
            "location": 298,
            "return": [
                "Tuple[(int, Any)]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Tuple[(List[Tuple[(str, Any)]], str, tuple, dict)]"
                ]
            }
        }
    },
    "qtile-master/libqtile/command/__init__.py": {
        "_LazyTree.__getattr__": {
            "name": "__getattr__",
            "location": 40,
            "return": [
                "client.InteractiveCommandClient"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        }
    },
    "qtile-master/libqtile/core/lifecycle.py": {
        "LifeCycle.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LifeCycle._atexit": {
            "name": "_atexit",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/core/loop.py": {
        "LoopContext.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "signals": [
                    "None"
                ]
            }
        },
        "LoopContext._handle_exception": {
            "name": "_handle_exception",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loop": [
                    "asyncio.events.AbstractEventLoop"
                ],
                "context": [
                    "dict"
                ]
            }
        },
        "QtileEventLoopPolicy.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtile": [
                    "libqtile.core.manager.Qtile"
                ]
            }
        },
        "QtileEventLoopPolicy.get_event_loop": {
            "name": "get_event_loop",
            "location": 78,
            "return": [
                "asyncio.events.AbstractEventLoop"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/core/manager.py": {
        "Qtile.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "kore": [
                    "base.Core"
                ],
                "config": [
                    "libqtile.confreader.Config"
                ],
                "no_spawn": [
                    "bool"
                ],
                "state": [],
                "socket_path": []
            }
        },
        "Qtile.load_config": {
            "name": "load_config",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "initial": [
                    "bool"
                ]
            }
        },
        "Qtile._prepare_socket_path": {
            "name": "_prepare_socket_path",
            "location": 184,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "socket_path": []
            }
        },
        "Qtile.loop": {
            "name": "loop",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Qtile.stop": {
            "name": "stop",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Qtile.restart": {
            "name": "restart",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Qtile._stop": {
            "name": "_stop",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Qtile.dump_state": {
            "name": "dump_state",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "buf": []
            }
        },
        "Qtile.cmd_reload_config": {
            "name": "cmd_reload_config",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Qtile._finalize_configurables": {
            "name": "_finalize_configurables",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Qtile.finalize": {
            "name": "finalize",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Qtile._process_screens": {
            "name": "_process_screens",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reloading": [
                    "bool"
                ]
            }
        },
        "Qtile.cmd_reconfigure_screens": {
            "name": "cmd_reconfigure_screens",
            "location": 358,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ev": []
            }
        },
        "Qtile.paint_screen": {
            "name": "paint_screen",
            "location": 377,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "screen": [
                    "libqtile.config.Screen"
                ],
                "image_path": [
                    "str"
                ],
                "mode": []
            }
        },
        "Qtile.process_key_event": {
            "name": "process_key_event",
            "location": 380,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keysym": [
                    "int"
                ],
                "mask": [
                    "int"
                ]
            }
        },
        "Qtile.grab_keys": {
            "name": "grab_keys",
            "location": 400,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Qtile.grab_key": {
            "name": "grab_key",
            "location": 409,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Qtile.ungrab_key": {
            "name": "ungrab_key",
            "location": 414,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Qtile.ungrab_keys": {
            "name": "ungrab_keys",
            "location": 419,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Qtile.grab_chord": {
            "name": "grab_chord",
            "location": 424,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "chord": [
                    "libqtile.config.KeyChord"
                ]
            }
        },
        "Qtile.cmd_ungrab_chord": {
            "name": "cmd_ungrab_chord",
            "location": 433,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Qtile.cmd_ungrab_all_chords": {
            "name": "cmd_ungrab_all_chords",
            "location": 454,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Qtile.grab_button": {
            "name": "grab_button",
            "location": 462,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "button": [
                    "libqtile.config.Mouse"
                ]
            }
        },
        "Qtile.update_desktops": {
            "name": "update_desktops",
            "location": 473,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Qtile.add_group": {
            "name": "add_group",
            "location": 486,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "layout": [],
                "layouts": [],
                "label": []
            }
        },
        "Qtile.delete_group": {
            "name": "delete_group",
            "location": 507,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Qtile.register_widget": {
            "name": "register_widget",
            "location": 532,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "w": [
                    "libqtile.widget.base._Widget"
                ]
            }
        },
        "Qtile.current_layout": {
            "name": "current_layout",
            "location": 563,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Qtile.current_group": {
            "name": "current_group",
            "location": 567,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Qtile.current_window": {
            "name": "current_window",
            "location": 571,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Qtile.reserve_space": {
            "name": "reserve_space",
            "location": 574,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reserved_space": [
                    "Tuple[(int, int, int, int)]"
                ],
                "screen": [
                    "libqtile.config.Screen"
                ]
            }
        },
        "Qtile.free_reserved_space": {
            "name": "free_reserved_space",
            "location": 595,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reserved_space": [
                    "Tuple[(int, int, int, int)]"
                ],
                "screen": [
                    "libqtile.config.Screen"
                ]
            }
        },
        "Qtile.manage": {
            "name": "manage",
            "location": 606,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "win": [
                    "Union[(base.Internal, base.Static, base.Window)]"
                ]
            }
        },
        "Qtile.unmanage": {
            "name": "unmanage",
            "location": 628,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wid": [
                    "int"
                ]
            }
        },
        "Qtile.find_screen": {
            "name": "find_screen",
            "location": 641,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "Qtile.find_closest_screen": {
            "name": "find_closest_screen",
            "location": 651,
            "return": [
                "libqtile.config.Screen"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "Qtile._find_closest_closest": {
            "name": "_find_closest_closest",
            "location": 679,
            "return": [
                "libqtile.config.Screen"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ],
                "candidate_screens": [
                    "List[libqtile.config.Screen]"
                ]
            }
        },
        "Qtile.process_button_click": {
            "name": "process_button_click",
            "location": 707,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "button_code": [
                    "int"
                ],
                "modmask": [
                    "int"
                ],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "Qtile.process_button_release": {
            "name": "process_button_release",
            "location": 735,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "button_code": [
                    "int"
                ],
                "modmask": [
                    "int"
                ]
            }
        },
        "Qtile.process_button_motion": {
            "name": "process_button_motion",
            "location": 744,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "Qtile.warp_to_screen": {
            "name": "warp_to_screen",
            "location": 759,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Qtile.focus_screen": {
            "name": "focus_screen",
            "location": 764,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ],
                "warp": [
                    "bool"
                ]
            }
        },
        "Qtile.move_to_group": {
            "name": "move_to_group",
            "location": 778,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "group": [
                    "str"
                ]
            }
        },
        "Qtile._items": {
            "name": "_items",
            "location": 785,
            "return": [
                "Optional[Tuple[(bool, list)]]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Qtile._select": {
            "name": "_select",
            "location": 808,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "sel": []
            }
        },
        "Qtile.call_soon": {
            "name": "call_soon",
            "location": 843,
            "return": [
                "asyncio.events.Handle"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable"
                ]
            }
        },
        "Qtile.call_soon_threadsafe": {
            "name": "call_soon_threadsafe",
            "location": 853,
            "return": [
                "asyncio.events.Handle"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable"
                ]
            }
        },
        "Qtile.call_later": {
            "name": "call_later",
            "location": 862,
            "return": [
                "asyncio.events.TimerHandle"
            ],
            "arguments": {
                "self": [],
                "delay": [
                    "int"
                ],
                "func": [
                    "Callable"
                ]
            }
        },
        "Qtile.run_in_executor": {
            "name": "run_in_executor",
            "location": 871,
            "return": [
                "asyncio.futures.Future"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable"
                ]
            }
        },
        "Qtile.cmd_debug": {
            "name": "cmd_debug",
            "location": 876,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Qtile.cmd_info": {
            "name": "cmd_info",
            "location": 881,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Qtile.cmd_warning": {
            "name": "cmd_warning",
            "location": 886,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Qtile.cmd_error": {
            "name": "cmd_error",
            "location": 891,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Qtile.cmd_critical": {
            "name": "cmd_critical",
            "location": 896,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Qtile.cmd_loglevel": {
            "name": "cmd_loglevel",
            "location": 901,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Qtile.cmd_loglevelname": {
            "name": "cmd_loglevelname",
            "location": 904,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Qtile.cmd_pause": {
            "name": "cmd_pause",
            "location": 907,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Qtile.cmd_groups": {
            "name": "cmd_groups",
            "location": 913,
            "return": [
                "Dict[(str, Dict[(str, Any)])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Qtile.cmd_display_kb": {
            "name": "cmd_display_kb",
            "location": 923,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Qtile.cmd_list_widgets": {
            "name": "cmd_list_widgets",
            "location": 1009,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Qtile.cmd_to_layout_index": {
            "name": "cmd_to_layout_index",
            "location": 1013,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str"
                ],
                "name": []
            }
        },
        "Qtile.cmd_next_layout": {
            "name": "cmd_next_layout",
            "location": 1029,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Qtile.cmd_prev_layout": {
            "name": "cmd_prev_layout",
            "location": 1043,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Qtile.cmd_screens": {
            "name": "cmd_screens",
            "location": 1057,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Qtile.cmd_simulate_keypress": {
            "name": "cmd_simulate_keypress",
            "location": 1078,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "modifiers": [
                    "List[str]"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "Qtile.cmd_validate_config": {
            "name": "cmd_validate_config",
            "location": 1098,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Qtile.cmd_restart": {
            "name": "cmd_restart",
            "location": 1106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Qtile.cmd_spawn": {
            "name": "cmd_spawn",
            "location": 1123,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "cmd": [],
                "shell": [
                    "bool"
                ]
            }
        },
        "Qtile.cmd_status": {
            "name": "cmd_status",
            "location": 1223,
            "return": [
                "Literal['OK']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Qtile.cmd_sync": {
            "name": "cmd_sync",
            "location": 1227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Qtile.cmd_to_screen": {
            "name": "cmd_to_screen",
            "location": 1233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "Qtile.cmd_next_screen": {
            "name": "cmd_next_screen",
            "location": 1243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Qtile.cmd_prev_screen": {
            "name": "cmd_prev_screen",
            "location": 1247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Qtile.cmd_windows": {
            "name": "cmd_windows",
            "location": 1251,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Qtile.cmd_internal_windows": {
            "name": "cmd_internal_windows",
            "location": 1259,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Qtile.cmd_qtile_info": {
            "name": "cmd_qtile_info",
            "location": 1263,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Qtile.cmd_shutdown": {
            "name": "cmd_shutdown",
            "location": 1267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Qtile.cmd_switch_groups": {
            "name": "cmd_switch_groups",
            "location": 1271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "namea": [
                    "str"
                ],
                "nameb": [
                    "str"
                ]
            }
        },
        "Qtile.find_window": {
            "name": "find_window",
            "location": 1287,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wid": [
                    "int"
                ]
            }
        },
        "Qtile.cmd_findwindow": {
            "name": "cmd_findwindow",
            "location": 1294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prompt": [
                    "str"
                ],
                "widget": [
                    "str"
                ]
            }
        },
        "Qtile.cmd_next_urgent": {
            "name": "cmd_next_urgent",
            "location": 1311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Qtile.cmd_togroup": {
            "name": "cmd_togroup",
            "location": 1325,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prompt": [
                    "str"
                ],
                "widget": [
                    "str"
                ]
            }
        },
        "Qtile.cmd_switchgroup": {
            "name": "cmd_switchgroup",
            "location": 1346,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prompt": [
                    "str"
                ],
                "widget": [
                    "str"
                ]
            }
        },
        "Qtile.cmd_labelgroup": {
            "name": "cmd_labelgroup",
            "location": 1371,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prompt": [
                    "str"
                ],
                "widget": [
                    "str"
                ]
            }
        },
        "Qtile.cmd_spawncmd": {
            "name": "cmd_spawncmd",
            "location": 1391,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prompt": [
                    "str"
                ],
                "widget": [
                    "str"
                ],
                "command": [
                    "str"
                ],
                "complete": [
                    "str"
                ],
                "shell": [
                    "bool"
                ],
                "aliases": []
            }
        },
        "Qtile.cmd_qtilecmd": {
            "name": "cmd_qtilecmd",
            "location": 1431,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prompt": [
                    "str"
                ],
                "widget": [
                    "str"
                ],
                "messenger": [
                    "str"
                ]
            }
        },
        "Qtile.cmd_addgroup": {
            "name": "cmd_addgroup",
            "location": 1484,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "group": [
                    "str"
                ],
                "label": [],
                "layout": [],
                "layouts": []
            }
        },
        "Qtile.cmd_delgroup": {
            "name": "cmd_delgroup",
            "location": 1494,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "group": [
                    "str"
                ]
            }
        },
        "Qtile.cmd_add_rule": {
            "name": "cmd_add_rule",
            "location": 1498,
            "return": [],
            "arguments": {
                "self": [],
                "match_args": [
                    "Dict[(str, Any)]"
                ],
                "rule_args": [
                    "Dict[(str, Any)]"
                ],
                "min_priorty": [
                    "bool"
                ]
            }
        },
        "Qtile.cmd_remove_rule": {
            "name": "cmd_remove_rule",
            "location": 1523,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rule_id": [
                    "int"
                ]
            }
        },
        "Qtile.cmd_hide_show_bar": {
            "name": "cmd_hide_show_bar",
            "location": 1527,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "Literal[('all', 'bottom', 'left', 'right', 'top')]"
                ]
            }
        },
        "Qtile.cmd_get_state": {
            "name": "cmd_get_state",
            "location": 1560,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Qtile.cmd_tracemalloc_toggle": {
            "name": "cmd_tracemalloc_toggle",
            "location": 1568,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Qtile.cmd_tracemalloc_dump": {
            "name": "cmd_tracemalloc_dump",
            "location": 1580,
            "return": [
                "Tuple[(bool, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Qtile.cmd_get_test_data": {
            "name": "cmd_get_test_data",
            "location": 1591,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Qtile.cmd_run_extension": {
            "name": "cmd_run_extension",
            "location": 1598,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "extension": [
                    "libqtile.extension.base._Extension"
                ]
            }
        },
        "Qtile.call_soon.f": {
            "name": "f",
            "location": 847,
            "return": [],
            "arguments": {}
        },
        "Qtile.call_soon_threadsafe.f": {
            "name": "f",
            "location": 856,
            "return": [],
            "arguments": {}
        },
        "Qtile.call_later.f": {
            "name": "f",
            "location": 865,
            "return": [],
            "arguments": {}
        },
        "Qtile.cmd_display_kb.walk_binding": {
            "name": "walk_binding",
            "location": 963,
            "return": [],
            "arguments": {
                "k": [],
                "mode": []
            }
        },
        "Qtile.cmd_switchgroup.f": {
            "name": "f",
            "location": 1357,
            "return": [],
            "arguments": {
                "group": []
            }
        },
        "Qtile.cmd_labelgroup.f": {
            "name": "f",
            "location": 1382,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "Qtile.cmd_spawncmd.f": {
            "name": "f",
            "location": 1419,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "Qtile.cmd_qtilecmd.f": {
            "name": "f",
            "location": 1452,
            "return": [],
            "arguments": {
                "cmd": []
            }
        },
        "Qtile.cmd_display_kb.FormatTable.__init__": {
            "name": "__init__",
            "location": 927,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Qtile.cmd_display_kb.FormatTable.add": {
            "name": "add",
            "location": 931,
            "return": [],
            "arguments": {
                "self": [],
                "row": []
            }
        },
        "Qtile.cmd_display_kb.FormatTable.getformat": {
            "name": "getformat",
            "location": 940,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Qtile.cmd_display_kb.FormatTable.expandlist": {
            "name": "expandlist",
            "location": 946,
            "return": [],
            "arguments": {
                "self": [],
                "list_": [],
                "n": []
            }
        },
        "Qtile.cmd_display_kb.FormatTable.__str__": {
            "name": "__str__",
            "location": 954,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/core/state.py": {
        "QtileState.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtile": [
                    "libqtile.core.manager.Qtile"
                ],
                "restart": [
                    "bool"
                ]
            }
        },
        "QtileState.apply": {
            "name": "apply",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtile": [
                    "libqtile.core.manager.Qtile"
                ]
            }
        },
        "QtileState.handle_orphan_dropdowns": {
            "name": "handle_orphan_dropdowns",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        }
    },
    "qtile-master/libqtile/core/__init__.py": {},
    "qtile-master/libqtile/extension/base.py": {
        "_Extension.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Extension._check_colors": {
            "name": "_check_colors",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Extension._configure": {
            "name": "_configure",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtile": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_Extension.run": {
            "name": "run",
            "location": 80,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "RunCommand.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RunCommand.run": {
            "name": "run",
            "location": 111,
            "return": [
                "subprocess.Popen[bytes]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/extension/command_set.py": {
        "CommandSet.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandSet.run": {
            "name": "run",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/extension/dmenu.py": {
        "Dmenu.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dmenu._configure": {
            "name": "_configure",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtile": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "Dmenu.run": {
            "name": "run",
            "location": 95,
            "return": [
                "Union[(str, subprocess.Popen[bytes])]"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "List[str]",
                    "str",
                    "Union[str, List[str]]",
                    "int"
                ]
            }
        },
        "DmenuRun.__init__": {
            "name": "__init__",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "J4DmenuDesktop.__init__": {
            "name": "__init__",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "J4DmenuDesktop._configure": {
            "name": "_configure",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtile": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "qtile-master/libqtile/extension/window_list.py": {
        "WindowList.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowList.list_windows": {
            "name": "list_windows",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowList.run": {
            "name": "run",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/extension/__init__.py": {},
    "qtile-master/libqtile/interactive/iqshell_install.py": {
        "main": {
            "name": "main",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "argv": [
                    "None",
                    "bool",
                    "Optional[str]",
                    "Optional[bool]",
                    "Optional[int]"
                ]
            }
        }
    },
    "qtile-master/libqtile/interactive/iqshell_kernel.py": {
        "main": {
            "name": "main",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "QshKernel.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QshKernel.do_execute": {
            "name": "do_execute",
            "location": 41,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,list,dict]]",
                "bool",
                "dict[typing.Text, typing.Text]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "Optional[bool]",
                    "bool",
                    "Optional[dict]",
                    "Optional[Dict[str, str]]",
                    "str"
                ],
                "silent": [
                    "Optional[str]",
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "Optional[List[Any]]"
                ],
                "_store_history": [
                    "bool",
                    "Optional[str]"
                ],
                "_user_expressions": [
                    "None",
                    "bool",
                    "Optional[str]"
                ],
                "_allow_stdin": [
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "QshKernel.do_complete": {
            "name": "do_complete",
            "location": 75,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "Tuple[str, str]"
                ],
                "cursor_pos": [
                    "_T1"
                ]
            }
        }
    },
    "qtile-master/libqtile/interactive/__init__.py": {},
    "qtile-master/libqtile/layout/base.py": {
        "Layout.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layout.layout": {
            "name": "layout",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "windows": [
                    "bool",
                    "Dict[str, Any]",
                    "str",
                    "List[Dict]"
                ],
                "screen_rect": [
                    "str",
                    "Mapping",
                    "MutableMapping",
                    "Callable",
                    "Optional[str]"
                ]
            }
        },
        "Layout.finalize": {
            "name": "finalize",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layout.clone": {
            "name": "clone",
            "location": 61,
            "return": [
                "Layout"
            ],
            "arguments": {
                "self": [
                    "_TLayout"
                ],
                "group": [
                    "str",
                    "float",
                    "AsyncGenerator",
                    "int",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "Layout._items": {
            "name": "_items",
            "location": 76,
            "return": [
                "Optional[Tuple[(bool, list)]]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Layout._select": {
            "name": "_select",
            "location": 83,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ],
                "sel": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "Layout.show": {
            "name": "show",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "screen_rect": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Layout.hide": {
            "name": "hide",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layout.focus": {
            "name": "focus",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "bool",
                    "int",
                    "Optional[Dict]",
                    "List[int]"
                ]
            }
        },
        "Layout.blur": {
            "name": "blur",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layout.info": {
            "name": "info",
            "location": 105,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layout.cmd_info": {
            "name": "cmd_info",
            "location": 109,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layout.add": {
            "name": "add",
            "location": 114,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "bool",
                    "int",
                    "Optional[Dict]",
                    "List[int]"
                ]
            }
        },
        "Layout.remove": {
            "name": "remove",
            "location": 124,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "bool",
                    "int",
                    "Optional[Dict]",
                    "List[int]"
                ]
            }
        },
        "Layout.configure": {
            "name": "configure",
            "location": 136,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "bool",
                    "int",
                    "Optional[Dict]",
                    "List[int]"
                ],
                "screen_rect": [
                    "str",
                    "bool",
                    "int",
                    "Optional[Dict]",
                    "List[int]"
                ]
            }
        },
        "Layout.focus_first": {
            "name": "focus_first",
            "location": 148,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layout.focus_last": {
            "name": "focus_last",
            "location": 158,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layout.focus_next": {
            "name": "focus_next",
            "location": 168,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "win": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Layout.focus_previous": {
            "name": "focus_previous",
            "location": 188,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "win": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Layout.cmd_next": {
            "name": "cmd_next",
            "location": 208,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layout.cmd_previous": {
            "name": "cmd_previous",
            "location": 212,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ClientList.__init__": {
            "name": "__init__",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ClientList.current_index": {
            "name": "current_index",
            "location": 239,
            "return": [
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "_ClientList.current_client": {
            "name": "current_client",
            "location": 253,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "List[str]"
                ]
            }
        },
        "_ClientList.focus": {
            "name": "focus",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "Callable"
                ]
            }
        },
        "_ClientList.focus_first": {
            "name": "focus_first",
            "location": 263,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ClientList.focus_next": {
            "name": "focus_next",
            "location": 269,
            "return": [
                "None",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "win": [
                    "int",
                    "str",
                    "float",
                    "[str]",
                    "bytes",
                    "bool"
                ]
            }
        },
        "_ClientList.focus_last": {
            "name": "focus_last",
            "location": 278,
            "return": [
                "str",
                "float",
                "Tuple[int, int]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ClientList.focus_previous": {
            "name": "focus_previous",
            "location": 284,
            "return": [
                "None",
                "Optional[str]",
                "Optional[dbadapters.base.relation.BaseRelation]",
                "Optional[base.OrderSpec]",
                "Optional[base.WhereSpec]",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "win": [
                    "int",
                    "List[int]",
                    "list",
                    "str"
                ]
            }
        },
        "_ClientList.add": {
            "name": "add",
            "location": 293,
            "return": [
                "str",
                "List[Callable]"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "Callable"
                ],
                "offset_to_current": [
                    "int"
                ],
                "client_position": [
                    "None",
                    "Optional[Dict]",
                    "Callable",
                    "List[str]"
                ]
            }
        },
        "_ClientList.append_head": {
            "name": "append_head",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "float",
                    "str"
                ]
            }
        },
        "_ClientList.append": {
            "name": "append",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "list",
                    "List[List[int]]",
                    "dict"
                ]
            }
        },
        "_ClientList.remove": {
            "name": "remove",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "List[str]",
                    "bool"
                ]
            }
        },
        "_ClientList.rotate_up": {
            "name": "rotate_up",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "maintain_index": [
                    "bool",
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict"
                ]
            }
        },
        "_ClientList.rotate_down": {
            "name": "rotate_down",
            "location": 357,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "maintain_index": [
                    "bool",
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict"
                ]
            }
        },
        "_ClientList.swap": {
            "name": "swap",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "c1": [
                    "str",
                    "Callable[..., T]",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "c2": [
                    "str",
                    "Callable[..., T]",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "focus": [
                    "int",
                    "float",
                    "bytes",
                    "str",
                    "bool"
                ]
            }
        },
        "_ClientList.shuffle_up": {
            "name": "shuffle_up",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "maintain_index": [
                    "bool",
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict"
                ]
            }
        },
        "_ClientList.shuffle_down": {
            "name": "shuffle_down",
            "location": 395,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "maintain_index": [
                    "bool",
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict"
                ]
            }
        },
        "_ClientList.join": {
            "name": "join",
            "location": 407,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "bool",
                    "int"
                ],
                "offset_to_current": [
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "_ClientList.index": {
            "name": "index",
            "location": 418,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "int",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "_ClientList.__len__": {
            "name": "__len__",
            "location": 421,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ClientList.__getitem__": {
            "name": "__getitem__",
            "location": 424,
            "return": [
                "None",
                "base.Connection",
                "str",
                "Callable[[List, bool], None]",
                "int"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "Iterator"
                ]
            }
        },
        "_ClientList.__setitem__": {
            "name": "__setitem__",
            "location": 430,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "str",
                    "int"
                ],
                "value": [
                    "str",
                    "int"
                ]
            }
        },
        "_ClientList.__iter__": {
            "name": "__iter__",
            "location": 433,
            "return": [
                "listiterator[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ClientList.__contains__": {
            "name": "__contains__",
            "location": 436,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "float",
                    "str"
                ]
            }
        },
        "_ClientList.__str__": {
            "name": "__str__",
            "location": 439,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ClientList.info": {
            "name": "info",
            "location": 445,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SimpleLayoutBase.__init__": {
            "name": "__init__",
            "location": 461,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SimpleLayoutBase.clone": {
            "name": "clone",
            "location": 465,
            "return": [
                "SimpleLayoutBase"
            ],
            "arguments": {
                "self": [
                    "_T_SimpleLayoutBase"
                ],
                "group": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_SimpleLayoutBase.focus": {
            "name": "focus",
            "location": 470,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "_SimpleLayoutBase.focus_first": {
            "name": "focus_first",
            "location": 474,
            "return": [
                "bool",
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SimpleLayoutBase.focus_last": {
            "name": "focus_last",
            "location": 477,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SimpleLayoutBase.focus_next": {
            "name": "focus_next",
            "location": 480,
            "return": [
                "Callable",
                "Callable[[str], None]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "window": [
                    "str",
                    "Tuple[List, List, List]",
                    "Type[eth.abc.ChainAPI]",
                    "bytes",
                    "bool"
                ]
            }
        },
        "_SimpleLayoutBase.focus_previous": {
            "name": "focus_previous",
            "location": 483,
            "return": [
                "Callable",
                "Callable[[str], None]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "window": [
                    "str",
                    "Tuple[List, List, List]",
                    "Type[eth.abc.ChainAPI]",
                    "bytes",
                    "bool"
                ]
            }
        },
        "_SimpleLayoutBase.previous": {
            "name": "previous",
            "location": 486,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SimpleLayoutBase.next": {
            "name": "next",
            "location": 492,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SimpleLayoutBase.add": {
            "name": "add",
            "location": 498,
            "return": [
                "List[str]",
                "str",
                "trio.abc.ReceiveChannel"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "Optional[Dict[str, str]]",
                    "Sequence[str]"
                ],
                "offset_to_current": [
                    "int",
                    "str",
                    "Optional[Dict[str, str]]",
                    "Sequence[str]"
                ],
                "client_position": [
                    "None",
                    "str",
                    "Optional[Dict[str, str]]",
                    "Sequence[str]"
                ]
            }
        },
        "_SimpleLayoutBase.remove": {
            "name": "remove",
            "location": 501,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "float",
                    "str"
                ]
            }
        },
        "_SimpleLayoutBase.get_windows": {
            "name": "get_windows",
            "location": 504,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SimpleLayoutBase.info": {
            "name": "info",
            "location": 507,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/layout/bsp.py": {
        "_BspNode.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "None",
                    "str",
                    "bool",
                    "List[str]",
                    "Tuple[type]",
                    "int"
                ]
            }
        },
        "_BspNode.__iter__": {
            "name": "__iter__",
            "location": 32,
            "return": [
                "Generator[(_BspNode, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_BspNode.clients": {
            "name": "clients",
            "location": 38,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_BspNode._shortest": {
            "name": "_shortest",
            "location": 46,
            "return": [
                "Tuple[(_BspNode, _T0)]"
            ],
            "arguments": {
                "self": [],
                "length": [
                    "_T0"
                ]
            }
        },
        "_BspNode.get_shortest": {
            "name": "get_shortest",
            "location": 57,
            "return": [
                "BspNode"
            ],
            "arguments": {
                "self": [
                    "_T_BspNode"
                ]
            }
        },
        "_BspNode.insert": {
            "name": "insert",
            "location": 60,
            "return": [
                "_BspNode",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "libqtile.command_clienInteractiveCommandClient"
                ],
                "idx": [
                    "bool"
                ],
                "ratio": [
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "_BspNode.remove": {
            "name": "remove",
            "location": 71,
            "return": [
                "BspNode"
            ],
            "arguments": {
                "self": [
                    "_T_BspNode"
                ],
                "child": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_BspNode.distribute": {
            "name": "distribute",
            "location": 81,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_BspNode.calc_geom": {
            "name": "calc_geom",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ],
                "w": [],
                "h": [
                    "float",
                    "int",
                    "Sequence[int]",
                    "Sequence[float]"
                ]
            }
        },
        "Bsp.__init__": {
            "name": "__init__",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bsp.clone": {
            "name": "clone",
            "location": 176,
            "return": [
                "Bsp"
            ],
            "arguments": {
                "self": [
                    "_TBsp"
                ],
                "group": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Bsp.get_windows": {
            "name": "get_windows",
            "location": 182,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bsp.info": {
            "name": "info",
            "location": 185,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bsp.get_node": {
            "name": "get_node",
            "location": 188,
            "return": [
                "Union[Sequence, 'SweepFixedValues']",
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "Bsp.focus": {
            "name": "focus",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "int",
                    "str"
                ]
            }
        },
        "Bsp.add": {
            "name": "add",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Bsp.remove": {
            "name": "remove",
            "location": 200,
            "return": [
                "None",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "Bsp.configure": {
            "name": "configure",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "bool",
                    "bytes"
                ],
                "screen_rect": [
                    "bool"
                ]
            }
        },
        "Bsp.cmd_toggle_split": {
            "name": "cmd_toggle_split",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bsp.focus_first": {
            "name": "focus_first",
            "location": 238,
            "return": [
                "str",
                "Mapping[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bsp.focus_last": {
            "name": "focus_last",
            "location": 241,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bsp.focus_next": {
            "name": "focus_next",
            "location": 245,
            "return": [
                "Awaitable",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "List[str]",
                    "bool"
                ]
            }
        },
        "Bsp.focus_previous": {
            "name": "focus_previous",
            "location": 252,
            "return": [
                "Awaitable",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "List[str]",
                    "bool"
                ]
            }
        },
        "Bsp.cmd_next": {
            "name": "cmd_next",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bsp.cmd_previous": {
            "name": "cmd_previous",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bsp.find_left": {
            "name": "find_left",
            "location": 269,
            "return": [
                "int",
                "set",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bsp.find_right": {
            "name": "find_right",
            "location": 285,
            "return": [
                "int",
                "set",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bsp.find_up": {
            "name": "find_up",
            "location": 301,
            "return": [
                "int",
                "set",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bsp.find_down": {
            "name": "find_down",
            "location": 317,
            "return": [
                "int",
                "set",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bsp.cmd_left": {
            "name": "cmd_left",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bsp.cmd_right": {
            "name": "cmd_right",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bsp.cmd_up": {
            "name": "cmd_up",
            "location": 343,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bsp.cmd_down": {
            "name": "cmd_down",
            "location": 348,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bsp.cmd_shuffle_left": {
            "name": "cmd_shuffle_left",
            "location": 353,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bsp.cmd_shuffle_right": {
            "name": "cmd_shuffle_right",
            "location": 371,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bsp.cmd_shuffle_up": {
            "name": "cmd_shuffle_up",
            "location": 389,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bsp.cmd_shuffle_down": {
            "name": "cmd_shuffle_down",
            "location": 407,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bsp.cmd_grow_left": {
            "name": "cmd_grow_left",
            "location": 425,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bsp.cmd_grow_right": {
            "name": "cmd_grow_right",
            "location": 436,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bsp.cmd_grow_up": {
            "name": "cmd_grow_up",
            "location": 447,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bsp.cmd_grow_down": {
            "name": "cmd_grow_down",
            "location": 458,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bsp.cmd_flip_left": {
            "name": "cmd_flip_left",
            "location": 469,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bsp.cmd_flip_right": {
            "name": "cmd_flip_right",
            "location": 480,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bsp.cmd_flip_up": {
            "name": "cmd_flip_up",
            "location": 491,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bsp.cmd_flip_down": {
            "name": "cmd_flip_down",
            "location": 502,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bsp.cmd_normalize": {
            "name": "cmd_normalize",
            "location": 513,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/layout/columns.py": {
        "_Column.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "split": [
                    "str",
                    "List[str]"
                ],
                "insert_position": [
                    "bytes",
                    "Optional[dict]",
                    "float",
                    "List['cirq.Circuit']"
                ],
                "width": [
                    "bytes",
                    "Optional[dict]",
                    "float",
                    "List['cirq.Circuit']"
                ]
            }
        },
        "_Column.info": {
            "name": "info",
            "location": 35,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Column.toggle_split": {
            "name": "toggle_split",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Column.add": {
            "name": "add",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "int",
                    "list",
                    "str"
                ],
                "height": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "_Column.remove": {
            "name": "remove",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "bool"
                ]
            }
        },
        "_Column.__str__": {
            "name": "__str__",
            "location": 70,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Columns.__init__": {
            "name": "__init__",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Columns.clone": {
            "name": "clone",
            "location": 160,
            "return": [
                "Columns"
            ],
            "arguments": {
                "self": [
                    "_TColumns"
                ],
                "group": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Columns.get_windows": {
            "name": "get_windows",
            "location": 165,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Columns.info": {
            "name": "info",
            "location": 171,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Columns.focus": {
            "name": "focus",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "Columns.cc": {
            "name": "cc",
            "location": 190,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Columns.add_column": {
            "name": "add_column",
            "location": 193,
            "return": [
                "_Column"
            ],
            "arguments": {
                "self": [],
                "prepend": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "Columns.remove_column": {
            "name": "remove_column",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "col": [
                    "List[str]",
                    "bool",
                    "int"
                ]
            }
        },
        "Columns.add": {
            "name": "add",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "Columns.remove": {
            "name": "remove",
            "location": 229,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "Columns.configure": {
            "name": "configure",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [],
                "screen_rect": [
                    "List[int]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "Columns.focus_first": {
            "name": "focus_first",
            "location": 289,
            "return": [
                "int",
                "Tuple[int, int]",
                "List[Tuple[int, int]]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Columns.focus_last": {
            "name": "focus_last",
            "location": 294,
            "return": [
                "Dict[str, Any]",
                "float",
                "Optional[Any]",
                "bool",
                "type",
                "Type[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Columns.focus_next": {
            "name": "focus_next",
            "location": 299,
            "return": [
                "int",
                "List[int]",
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "win": [
                    "int",
                    "str",
                    "float",
                    "[str]",
                    "bytes",
                    "bool"
                ]
            }
        },
        "Columns.focus_previous": {
            "name": "focus_previous",
            "location": 315,
            "return": [
                "str",
                "float",
                "int",
                "bool",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "win": [
                    "int",
                    "str",
                    "float",
                    "[str]",
                    "bytes",
                    "bool"
                ]
            }
        },
        "Columns.cmd_toggle_split": {
            "name": "cmd_toggle_split",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Columns.cmd_left": {
            "name": "cmd_left",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Columns.cmd_right": {
            "name": "cmd_right",
            "location": 344,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Columns.want_wrap": {
            "name": "want_wrap",
            "location": 353,
            "return": [
                "List[int]",
                "list",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "col": [
                    "str"
                ]
            }
        },
        "Columns.cmd_up": {
            "name": "cmd_up",
            "location": 358,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Columns.cmd_down": {
            "name": "cmd_down",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Columns.cmd_next": {
            "name": "cmd_next",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Columns.cmd_previous": {
            "name": "cmd_previous",
            "location": 387,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Columns.cmd_shuffle_left": {
            "name": "cmd_shuffle_left",
            "location": 396,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Columns.cmd_shuffle_right": {
            "name": "cmd_shuffle_right",
            "location": 417,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Columns.cmd_shuffle_up": {
            "name": "cmd_shuffle_up",
            "location": 438,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Columns.cmd_shuffle_down": {
            "name": "cmd_shuffle_down",
            "location": 443,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Columns.cmd_grow_left": {
            "name": "cmd_grow_left",
            "location": 448,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Columns.cmd_grow_right": {
            "name": "cmd_grow_right",
            "location": 460,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Columns.cmd_grow_up": {
            "name": "cmd_grow_up",
            "location": 472,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Columns.cmd_grow_down": {
            "name": "cmd_grow_down",
            "location": 485,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Columns.cmd_normalize": {
            "name": "cmd_normalize",
            "location": 498,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Columns.swap_column": {
            "name": "swap_column",
            "location": 505,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "List[str]",
                    "Union[bool, List[bool]]",
                    "bytes",
                    "Union[str, bytes]",
                    "str",
                    "List[T]",
                    "Dict[str, Any]",
                    "Optional[List[str]]"
                ],
                "dst": [
                    "Type[object]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "Columns.cmd_swap_column_left": {
            "name": "cmd_swap_column_left",
            "location": 510,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Columns.cmd_swap_column_right": {
            "name": "cmd_swap_column_right",
            "location": 515,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/layout/floating.py": {
        "Floating.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "float_rules": [
                    "None"
                ],
                "no_reposition_rules": [
                    "None"
                ]
            }
        },
        "Floating.match": {
            "name": "match",
            "location": 112,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "win": []
            }
        },
        "Floating.find_clients": {
            "name": "find_clients",
            "location": 116,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "group": []
            }
        },
        "Floating.to_screen": {
            "name": "to_screen",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "group": [],
                "new_screen": []
            }
        },
        "Floating.focus_first": {
            "name": "focus_first",
            "location": 145,
            "return": [],
            "arguments": {
                "self": [],
                "group": [
                    "None"
                ]
            }
        },
        "Floating.focus_next": {
            "name": "focus_next",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "win": []
            }
        },
        "Floating.focus_last": {
            "name": "focus_last",
            "location": 163,
            "return": [],
            "arguments": {
                "self": [],
                "group": [
                    "None"
                ]
            }
        },
        "Floating.focus_previous": {
            "name": "focus_previous",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "win": []
            }
        },
        "Floating.focus": {
            "name": "focus",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "Floating.blur": {
            "name": "blur",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Floating.on_screen": {
            "name": "on_screen",
            "location": 187,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "client": [],
                "screen_rect": []
            }
        },
        "Floating.compute_client_position": {
            "name": "compute_client_position",
            "location": 198,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "client": [],
                "screen_rect": []
            }
        },
        "Floating.configure": {
            "name": "configure",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [],
                "screen_rect": []
            }
        },
        "Floating.add": {
            "name": "add",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "Floating.remove": {
            "name": "remove",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "Floating.get_windows": {
            "name": "get_windows",
            "location": 295,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Floating.info": {
            "name": "info",
            "location": 298,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Floating.cmd_next": {
            "name": "cmd_next",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Floating.cmd_previous": {
            "name": "cmd_previous",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/layout/matrix.py": {
        "Matrix.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_columns": [
                    "None",
                    "dict",
                    "str"
                ]
            }
        },
        "Matrix.rows": {
            "name": "rows",
            "location": 61,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Matrix.row": {
            "name": "row",
            "location": 66,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Matrix.column": {
            "name": "column",
            "location": 71,
            "return": [
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Matrix.info": {
            "name": "info",
            "location": 75,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Matrix.clone": {
            "name": "clone",
            "location": 81,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "self": [
                    "_TMatrix"
                ],
                "group": [
                    "bytearray",
                    "bytes",
                    "List[dict]",
                    "str",
                    "int"
                ]
            }
        },
        "Matrix.get_row": {
            "name": "get_row",
            "location": 86,
            "return": [
                "str",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        },
        "Matrix.get_column": {
            "name": "get_column",
            "location": 91,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "column": [
                    "str",
                    "Optional[str]",
                    "List[List[int]]"
                ]
            }
        },
        "Matrix.add": {
            "name": "add",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "list",
                    "str",
                    "List[List[int]]",
                    "dict"
                ]
            }
        },
        "Matrix.configure": {
            "name": "configure",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "libqtile.command_clienInteractiveCommandClient"
                ],
                "screen_rect": [
                    "List[int]",
                    "bool"
                ]
            }
        },
        "Matrix.horizontal_traversal": {
            "name": "horizontal_traversal",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "direction": [
                    "str",
                    "List[List[int]]",
                    "bool",
                    "List[int]",
                    "Dict[str, List[Any]]"
                ]
            }
        },
        "Matrix.vertical_traversal": {
            "name": "vertical_traversal",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "direction": [
                    "int",
                    "list",
                    "List[int]",
                    "List[List[str]]"
                ]
            }
        },
        "Matrix.cmd_left": {
            "name": "cmd_left",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Matrix.cmd_right": {
            "name": "cmd_right",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Matrix.cmd_up": {
            "name": "cmd_up",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Matrix.cmd_down": {
            "name": "cmd_down",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Matrix.cmd_delete": {
            "name": "cmd_delete",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Matrix.cmd_add": {
            "name": "cmd_add",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/layout/max.py": {
        "Max.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Max.add": {
            "name": "add",
            "location": 45,
            "return": [
                "int",
                "List[str]",
                "Callable[..., Awaitable]",
                "str",
                "T_co"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "Max.configure": {
            "name": "configure",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "libqtile.command_clienInteractiveCommandClient"
                ],
                "screen_rect": [
                    "int",
                    "bytes"
                ]
            }
        }
    },
    "qtile-master/libqtile/layout/ratiotile.py": {
        "GridInfo.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ratio": [],
                "num_windows": [],
                "width": [],
                "height": []
            }
        },
        "GridInfo.calc": {
            "name": "calc",
            "location": 69,
            "return": [
                "Optional[Tuple[(int, int, int)]]"
            ],
            "arguments": {
                "self": [],
                "num_windows": [],
                "width": [],
                "height": []
            }
        },
        "GridInfo._possible_grids": {
            "name": "_possible_grids",
            "location": 85,
            "return": [
                "Generator[(Tuple[(int, int, int)], Any, None)]"
            ],
            "arguments": {
                "self": [],
                "num_windows": []
            }
        },
        "GridInfo.get_sizes_advanced": {
            "name": "get_sizes_advanced",
            "location": 100,
            "return": [
                "List[Tuple[(Any, Any, Any, Any)]]"
            ],
            "arguments": {
                "self": [],
                "total_width": [],
                "total_height": [],
                "xoffset": [
                    "int"
                ],
                "yoffset": [
                    "int"
                ]
            }
        },
        "GridInfo._get_row_or_col": {
            "name": "_get_row_or_col",
            "location": 119,
            "return": [
                "Tuple[(Any, List[Tuple[(Any, Any, Any, Any)]])]"
            ],
            "arguments": {
                "self": [],
                "num_windows": [],
                "width": [],
                "height": [],
                "xoffset": [],
                "yoffset": []
            }
        },
        "GridInfo.get_sizes": {
            "name": "get_sizes",
            "location": 145,
            "return": [
                "List[Tuple[(Any, Any, Any, Any)]]"
            ],
            "arguments": {
                "self": [],
                "total_width": [],
                "total_height": [],
                "xoffset": [
                    "int"
                ],
                "yoffset": [
                    "int"
                ]
            }
        },
        "RatioTile.__init__": {
            "name": "__init__",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RatioTile.clone": {
            "name": "clone",
            "location": 221,
            "return": [
                "RatioTile"
            ],
            "arguments": {
                "self": [
                    "_TRatioTile"
                ],
                "group": []
            }
        },
        "RatioTile.add": {
            "name": "add",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "w": []
            }
        },
        "RatioTile.remove": {
            "name": "remove",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "w": []
            }
        },
        "RatioTile.configure": {
            "name": "configure",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "win": [],
                "screen": []
            }
        },
        "RatioTile.info": {
            "name": "info",
            "location": 272,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "RatioTile.cmd_shuffle_down": {
            "name": "cmd_shuffle_down",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RatioTile.cmd_shuffle_up": {
            "name": "cmd_shuffle_up",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RatioTile.cmd_decrease_ratio": {
            "name": "cmd_decrease_ratio",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RatioTile.cmd_increase_ratio": {
            "name": "cmd_increase_ratio",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/layout/slice.py": {
        "Single.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Single.add": {
            "name": "add",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "window": [
                    "Optional[int]",
                    "Optional[bool]",
                    "Union[str, None]",
                    "Union[float, None]",
                    "Sequence[str]"
                ]
            }
        },
        "Single.remove": {
            "name": "remove",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "window": [
                    "bool",
                    "dict",
                    "str"
                ]
            }
        },
        "Single.configure": {
            "name": "configure",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "window": [
                    "bool",
                    "Dict[str, bool]"
                ],
                "screen_rect": [
                    "str",
                    "bytes",
                    "dict"
                ]
            }
        },
        "Single.empty": {
            "name": "empty",
            "location": 67,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Single.focus_first": {
            "name": "focus_first",
            "location": 74,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Single.focus_last": {
            "name": "focus_last",
            "location": 78,
            "return": [
                "str",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Single.focus_next": {
            "name": "focus_next",
            "location": 82,
            "return": [
                "None",
                "Optional[str]",
                "list",
                "bool",
                "Optional[int]",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "window": [
                    "str",
                    "Tuple[List, List, List]",
                    "bytes",
                    "bool"
                ]
            }
        },
        "Single.focus_previous": {
            "name": "focus_previous",
            "location": 88,
            "return": [
                "None",
                "Optional[str]",
                "list",
                "bool",
                "Optional[int]",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "window": [
                    "str",
                    "Tuple[List, List, List]",
                    "bytes",
                    "bool"
                ]
            }
        },
        "Single.cmd_next": {
            "name": "cmd_next",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Single.cmd_previous": {
            "name": "cmd_previous",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Single.get_windows": {
            "name": "get_windows",
            "location": 100,
            "return": [
                "str",
                "List[List[int]]",
                "tuple",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Slice.__init__": {
            "name": "__init__",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Slice.clone": {
            "name": "clone",
            "location": 124,
            "return": [
                "Slice"
            ],
            "arguments": {
                "self": [
                    "_TSlice"
                ],
                "group": [
                    "T",
                    "bytes"
                ]
            }
        },
        "Slice.delegate_layout": {
            "name": "delegate_layout",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "windows": [
                    "bool",
                    "List[int]",
                    "List[Tuple[Any, Dict]]",
                    "List[str]",
                    "List[Dict]",
                    "Iterable[str]"
                ],
                "mapping": [
                    "int",
                    "bool",
                    "Union[int, Tuple[int, int]]",
                    "List[Tuple[int, int]]"
                ]
            }
        },
        "Slice.layout": {
            "name": "layout",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "windows": [
                    "bool",
                    "str",
                    "Optional[bool]"
                ],
                "screen_rect": [
                    "Type[django.db.models.base.Model]",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "Slice.show": {
            "name": "show",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "screen_rect": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "Slice.configure": {
            "name": "configure",
            "location": 165,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "win": [
                    "str",
                    "List[str]"
                ],
                "screen_rect": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Slice._get_layouts": {
            "name": "_get_layouts",
            "location": 168,
            "return": [
                "Tuple[(Single, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Slice._get_active_layout": {
            "name": "_get_active_layout",
            "location": 171,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Slice._get_screen_rects": {
            "name": "_get_screen_rects",
            "location": 174,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "screen": [
                    "int",
                    "float",
                    "Optional[int]",
                    "List[int]",
                    "bool"
                ]
            }
        },
        "Slice.add": {
            "name": "add",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "win": [
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "Slice.remove": {
            "name": "remove",
            "location": 195,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "win": [
                    "int",
                    "str",
                    "float",
                    "[str]",
                    "bytes",
                    "bool"
                ]
            }
        },
        "Slice.hide": {
            "name": "hide",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Slice.focus": {
            "name": "focus",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "win": [
                    "int",
                    "str",
                    "float",
                    "[str]",
                    "bytes",
                    "bool"
                ]
            }
        },
        "Slice.blur": {
            "name": "blur",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Slice.focus_first": {
            "name": "focus_first",
            "location": 217,
            "return": [
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Slice.focus_last": {
            "name": "focus_last",
            "location": 224,
            "return": [
                "float",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Slice.focus_next": {
            "name": "focus_next",
            "location": 231,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "win": [
                    "int",
                    "str",
                    "float",
                    "[str]",
                    "bytes",
                    "bool"
                ]
            }
        },
        "Slice.focus_previous": {
            "name": "focus_previous",
            "location": 242,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "win": [
                    "int",
                    "str",
                    "float",
                    "[str]",
                    "bytes",
                    "bool"
                ]
            }
        },
        "Slice.__getattr__": {
            "name": "__getattr__",
            "location": 253,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Slice.cmd_next": {
            "name": "cmd_next",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Slice.cmd_previous": {
            "name": "cmd_previous",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Slice.commands": {
            "name": "commands",
            "location": 270,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Slice.get_windows": {
            "name": "get_windows",
            "location": 273,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Slice.info": {
            "name": "info",
            "location": 280,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/layout/spiral.py": {
        "Spiral.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Spiral.clone": {
            "name": "clone",
            "location": 142,
            "return": [
                "Spiral"
            ],
            "arguments": {
                "self": [
                    "_TSpiral"
                ],
                "group": [
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "Spiral.add": {
            "name": "add",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "object",
                    "Callable"
                ]
            }
        },
        "Spiral.remove": {
            "name": "remove",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "w": [
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "Spiral.configure": {
            "name": "configure",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "win": [
                    "bool",
                    "str",
                    "int"
                ],
                "screen": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "Spiral.split_left": {
            "name": "split_left",
            "location": 199,
            "return": [
                "Tuple[(Tuple[(int, int, int, int)], Tuple[(int, int, int, int)])]"
            ],
            "arguments": {
                "self": [],
                "rect": [
                    "Tuple[(int, int, int, int)]"
                ]
            }
        },
        "Spiral.split_right": {
            "name": "split_right",
            "location": 210,
            "return": [
                "Tuple[(Tuple[(int, int, int, int)], Tuple[(int, int, int, int)])]"
            ],
            "arguments": {
                "self": [],
                "rect": [
                    "Tuple[(int, int, int, int)]"
                ]
            }
        },
        "Spiral.split_top": {
            "name": "split_top",
            "location": 221,
            "return": [
                "Tuple[(Tuple[(int, int, int, int)], Tuple[(int, int, int, int)])]"
            ],
            "arguments": {
                "self": [],
                "rect": [
                    "Tuple[(int, int, int, int)]"
                ]
            }
        },
        "Spiral.split_bottom": {
            "name": "split_bottom",
            "location": 232,
            "return": [
                "Tuple[(Tuple[(int, int, int, int)], Tuple[(int, int, int, int)])]"
            ],
            "arguments": {
                "self": [],
                "rect": [
                    "Tuple[(int, int, int, int)]"
                ]
            }
        },
        "Spiral._fix_double_margins": {
            "name": "_fix_double_margins",
            "location": 243,
            "return": [
                "Tuple[(Tuple[(int, int, int, int)], List[int])]"
            ],
            "arguments": {
                "self": [],
                "win_x": [
                    "int"
                ],
                "win_y": [
                    "int"
                ],
                "win_w": [
                    "int"
                ],
                "win_h": [
                    "int"
                ]
            }
        },
        "Spiral.has_invalid_size": {
            "name": "has_invalid_size",
            "location": 272,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "win": [
                    "Tuple[(int, int, int, int)]"
                ]
            }
        },
        "Spiral.get_spiral": {
            "name": "get_spiral",
            "location": 291,
            "return": [
                "List[Tuple[(int, int, int, int)]]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "str"
                ],
                "y": [
                    "int",
                    "float",
                    "str"
                ],
                "width": [
                    "int",
                    "float",
                    "str"
                ],
                "height": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "Spiral.info": {
            "name": "info",
            "location": 332,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Spiral._set_ratio": {
            "name": "_set_ratio",
            "location": 348,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prop": [
                    "str"
                ],
                "value": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Spiral.cmd_shuffle_down": {
            "name": "cmd_shuffle_down",
            "location": 366,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Spiral.cmd_shuffle_up": {
            "name": "cmd_shuffle_up",
            "location": 371,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Spiral.cmd_decrease_ratio": {
            "name": "cmd_decrease_ratio",
            "location": 376,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Spiral.cmd_increase_ratio": {
            "name": "cmd_increase_ratio",
            "location": 380,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Spiral.cmd_shrink_main": {
            "name": "cmd_shrink_main",
            "location": 384,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Spiral.cmd_grow_main": {
            "name": "cmd_grow_main",
            "location": 391,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Spiral.cmd_set_ratio": {
            "name": "cmd_set_ratio",
            "location": 398,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ratio": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "float"
                ]
            }
        },
        "Spiral.cmd_set_master_ratio": {
            "name": "cmd_set_master_ratio",
            "location": 402,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ratio": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "float"
                ]
            }
        },
        "Spiral.cmd_reset": {
            "name": "cmd_reset",
            "location": 406,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/layout/stack.py": {
        "_WinStack.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "autosplit": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "_WinStack.toggle_split": {
            "name": "toggle_split",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_WinStack.__str__": {
            "name": "__str__",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_WinStack.info": {
            "name": "info",
            "location": 38,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.current_stack": {
            "name": "current_stack",
            "location": 74,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.current_stack_offset": {
            "name": "current_stack_offset",
            "location": 78,
            "return": [
                "int",
                "slice",
                "str",
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.clients": {
            "name": "clients",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Stack.clone": {
            "name": "clone",
            "location": 91,
            "return": [
                "Stack"
            ],
            "arguments": {
                "self": [
                    "_TStack"
                ],
                "group": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Stack._find_next": {
            "name": "_find_next",
            "location": 97,
            "return": [
                "int",
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "lst": [
                    "int",
                    "set",
                    "str"
                ],
                "offset": [
                    "int",
                    "set",
                    "str"
                ]
            }
        },
        "Stack.delete_current_stack": {
            "name": "delete_current_stack",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.next_stack": {
            "name": "next_stack",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.previous_stack": {
            "name": "previous_stack",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.focus": {
            "name": "focus",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "int",
                    "bool",
                    "Dict[str, Any]",
                    "float"
                ]
            }
        },
        "Stack.focus_first": {
            "name": "focus_first",
            "location": 132,
            "return": [
                "int",
                "slice",
                "str",
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.focus_last": {
            "name": "focus_last",
            "location": 137,
            "return": [
                "int",
                "bool",
                "str",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.focus_next": {
            "name": "focus_next",
            "location": 142,
            "return": [
                "str",
                "Dict[str, Any]",
                "base.ConfigOptions",
                "bool",
                "Union[int, slice]",
                "Callable",
                "Optional[int]",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "bytes",
                    "Callable",
                    "bool",
                    "Dict[str, str]"
                ]
            }
        },
        "Stack.focus_previous": {
            "name": "focus_previous",
            "location": 157,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "bytes",
                    "Callable",
                    "bool",
                    "Dict[str, str]"
                ]
            }
        },
        "Stack.add": {
            "name": "add",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "bytes"
                ]
            }
        },
        "Stack.remove": {
            "name": "remove",
            "location": 183,
            "return": [
                "str",
                "List[str]",
                "bytes",
                "float"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "int",
                    "bool",
                    "Dict[str, Any]",
                    "float"
                ]
            }
        },
        "Stack.configure": {
            "name": "configure",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "bool"
                ],
                "screen_rect": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "Stack.get_windows": {
            "name": "get_windows",
            "location": 246,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.info": {
            "name": "info",
            "location": 249,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.cmd_toggle_split": {
            "name": "cmd_toggle_split",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.cmd_down": {
            "name": "cmd_down",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.cmd_up": {
            "name": "cmd_up",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.cmd_shuffle_up": {
            "name": "cmd_shuffle_up",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.cmd_shuffle_down": {
            "name": "cmd_shuffle_down",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.cmd_delete": {
            "name": "cmd_delete",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.cmd_add": {
            "name": "cmd_add",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.cmd_rotate": {
            "name": "cmd_rotate",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.cmd_next": {
            "name": "cmd_next",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.cmd_previous": {
            "name": "cmd_previous",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.cmd_client_to_next": {
            "name": "cmd_client_to_next",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.cmd_client_to_previous": {
            "name": "cmd_client_to_previous",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.cmd_client_to_stack": {
            "name": "cmd_client_to_stack",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "Sequence",
                    "List[T]"
                ]
            }
        },
        "Stack.cmd_info": {
            "name": "cmd_info",
            "location": 329,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/layout/tile.py": {
        "Tile.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tile.ratio_size": {
            "name": "ratio_size",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ratio": [
                    "int",
                    "float",
                    "bool",
                    "List[int]",
                    "Union[int, float]"
                ]
            }
        },
        "Tile.master_windows": {
            "name": "master_windows",
            "location": 114,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tile.slave_windows": {
            "name": "slave_windows",
            "location": 118,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tile.up": {
            "name": "up",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tile.down": {
            "name": "down",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tile.reset_master": {
            "name": "reset_master",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "match": [
                    "None",
                    "Dict[str, float]",
                    "str",
                    "Match[bytes]",
                    "Dict[str, str]",
                    "Iterable",
                    "Dict[str, Any]",
                    "Dict[str, int]"
                ]
            }
        },
        "Tile.clone": {
            "name": "clone",
            "location": 151,
            "return": [
                "ile"
            ],
            "arguments": {
                "self": [
                    "_TTile"
                ],
                "group": [
                    "bytearray",
                    "bytes",
                    "List[dict]",
                    "str",
                    "int"
                ]
            }
        },
        "Tile.add": {
            "name": "add",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str"
                ],
                "offset_to_current": [
                    "Optional[Dict[str, str]]",
                    "int"
                ]
            }
        },
        "Tile.configure": {
            "name": "configure",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "bool"
                ],
                "screen_rect": [
                    "int",
                    "float",
                    "List[List[int]]"
                ]
            }
        },
        "Tile.info": {
            "name": "info",
            "location": 207,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tile.cmd_shuffle_down": {
            "name": "cmd_shuffle_down",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tile.cmd_shuffle_up": {
            "name": "cmd_shuffle_up",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tile.cmd_reset": {
            "name": "cmd_reset",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tile.cmd_decrease_ratio": {
            "name": "cmd_decrease_ratio",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tile.cmd_increase_ratio": {
            "name": "cmd_increase_ratio",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tile.cmd_decrease_nmaster": {
            "name": "cmd_decrease_nmaster",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tile.cmd_increase_nmaster": {
            "name": "cmd_increase_nmaster",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/layout/tree.py": {
        "TreeNode.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreeNode.add": {
            "name": "add",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "hint": []
            }
        },
        "TreeNode.draw": {
            "name": "draw",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "layout": [],
                "top": [],
                "level": []
            }
        },
        "TreeNode.button_press": {
            "name": "button_press",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "TreeNode.add_superscript": {
            "name": "add_superscript",
            "location": 87,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "_T0"
                ]
            }
        },
        "TreeNode.get_first_window": {
            "name": "get_first_window",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TreeNode.get_last_window": {
            "name": "get_last_window",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TreeNode.get_next_window": {
            "name": "get_next_window",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TreeNode.get_prev_window": {
            "name": "get_prev_window",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Root.__init__": {
            "name": "__init__",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sections": [],
                "default_section": []
            }
        },
        "Root.add": {
            "name": "add",
            "location": 159,
            "return": [
                "Window"
            ],
            "arguments": {
                "self": [],
                "win": [],
                "hint": []
            }
        },
        "Root.add_section": {
            "name": "add_section",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Root.del_section": {
            "name": "del_section",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Section.__init__": {
            "name": "__init__",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "title": []
            }
        },
        "Section.draw": {
            "name": "draw",
            "location": 222,
            "return": [],
            "arguments": {
                "self": [],
                "layout": [],
                "top": [],
                "level": []
            }
        },
        "Window.__init__": {
            "name": "__init__",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "win": []
            }
        },
        "Window.draw": {
            "name": "draw",
            "location": 245,
            "return": [],
            "arguments": {
                "self": [],
                "layout": [],
                "top": [],
                "level": []
            }
        },
        "Window.button_press": {
            "name": "button_press",
            "location": 275,
            "return": [
                "Optional[Window]"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "Window.remove": {
            "name": "remove",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreeTab.__init__": {
            "name": "__init__",
            "location": 377,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreeTab.clone": {
            "name": "clone",
            "location": 387,
            "return": [
                "reeTab"
            ],
            "arguments": {
                "self": [
                    "_TTreeTab"
                ],
                "group": []
            }
        },
        "TreeTab.focus": {
            "name": "focus",
            "location": 394,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "win": []
            }
        },
        "TreeTab.focus_first": {
            "name": "focus_first",
            "location": 397,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TreeTab.focus_last": {
            "name": "focus_last",
            "location": 402,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TreeTab.focus_next": {
            "name": "focus_next",
            "location": 407,
            "return": [],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TreeTab.focus_previous": {
            "name": "focus_previous",
            "location": 412,
            "return": [],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TreeTab.blur": {
            "name": "blur",
            "location": 417,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreeTab.add": {
            "name": "add",
            "location": 423,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "win": []
            }
        },
        "TreeTab.remove": {
            "name": "remove",
            "location": 430,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "win": []
            }
        },
        "TreeTab._create_panel": {
            "name": "_create_panel",
            "location": 446,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "screen_rect": []
            }
        },
        "TreeTab.draw_panel": {
            "name": "draw_panel",
            "location": 456,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreeTab.process_button_click": {
            "name": "process_button_click",
            "location": 463,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "_buttom": []
            }
        },
        "TreeTab.configure": {
            "name": "configure",
            "location": 468,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [],
                "screen_rect": []
            }
        },
        "TreeTab.finalize": {
            "name": "finalize",
            "location": 477,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreeTab.get_windows": {
            "name": "get_windows",
            "location": 484,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreeTab.info": {
            "name": "info",
            "location": 491,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreeTab.show": {
            "name": "show",
            "location": 536,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "screen_rect": []
            }
        },
        "TreeTab.hide": {
            "name": "hide",
            "location": 546,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreeTab.cmd_down": {
            "name": "cmd_down",
            "location": 550,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreeTab.cmd_up": {
            "name": "cmd_up",
            "location": 563,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreeTab.cmd_move_up": {
            "name": "cmd_move_up",
            "location": 576,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreeTab.cmd_move_down": {
            "name": "cmd_move_down",
            "location": 588,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreeTab.cmd_move_left": {
            "name": "cmd_move_left",
            "location": 600,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreeTab.cmd_add_section": {
            "name": "cmd_add_section",
            "location": 610,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "TreeTab.cmd_del_section": {
            "name": "cmd_del_section",
            "location": 615,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "TreeTab.cmd_section_up": {
            "name": "cmd_section_up",
            "location": 620,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreeTab.cmd_section_down": {
            "name": "cmd_section_down",
            "location": 634,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreeTab.cmd_sort_windows": {
            "name": "cmd_sort_windows",
            "location": 648,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sorter": [],
                "create_sections": []
            }
        },
        "TreeTab.cmd_move_right": {
            "name": "cmd_move_right",
            "location": 677,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreeTab.cmd_expand_branch": {
            "name": "cmd_expand_branch",
            "location": 688,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreeTab.cmd_collapse_branch": {
            "name": "cmd_collapse_branch",
            "location": 694,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreeTab.cmd_increase_ratio": {
            "name": "cmd_increase_ratio",
            "location": 700,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreeTab.cmd_decrease_ratio": {
            "name": "cmd_decrease_ratio",
            "location": 704,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreeTab._create_drawer": {
            "name": "_create_drawer",
            "location": 708,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "screen_rect": []
            }
        },
        "TreeTab.layout": {
            "name": "layout",
            "location": 719,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "windows": [],
                "screen_rect": []
            }
        },
        "TreeTab._resize_panel": {
            "name": "_resize_panel",
            "location": 727,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "screen_rect": []
            }
        },
        "TreeTab.info.show_section_tree": {
            "name": "show_section_tree",
            "location": 492,
            "return": [],
            "arguments": {
                "root": []
            }
        }
    },
    "qtile-master/libqtile/layout/verticaltile.py": {
        "VerticalTile.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VerticalTile.add": {
            "name": "add",
            "location": 101,
            "return": [
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "window": []
            }
        },
        "VerticalTile.remove": {
            "name": "remove",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "window": [
                    "str",
                    "List[Tuple[str, str]]",
                    "Callable",
                    "dict"
                ]
            }
        },
        "VerticalTile.clone": {
            "name": "clone",
            "location": 109,
            "return": [
                "VerticalTile"
            ],
            "arguments": {
                "self": [
                    "_TVerticalTile"
                ],
                "group": [
                    "bytearray",
                    "bytes",
                    "List[dict]",
                    "str",
                    "int"
                ]
            }
        },
        "VerticalTile.configure": {
            "name": "configure",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "window": [
                    "str",
                    "bool",
                    "Exception",
                    "int"
                ],
                "screen_rect": [
                    "int"
                ]
            }
        },
        "VerticalTile.grow": {
            "name": "grow",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VerticalTile.shrink": {
            "name": "shrink",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VerticalTile.cmd_shuffle_up": {
            "name": "cmd_shuffle_up",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VerticalTile.cmd_shuffle_down": {
            "name": "cmd_shuffle_down",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VerticalTile.cmd_maximize": {
            "name": "cmd_maximize",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VerticalTile.cmd_normalize": {
            "name": "cmd_normalize",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VerticalTile.cmd_grow": {
            "name": "cmd_grow",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VerticalTile.cmd_shrink": {
            "name": "cmd_shrink",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/layout/xmonad.py": {
        "MonadTall.__init__": {
            "name": "__init__",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonadTall.focused": {
            "name": "focused",
            "location": 202,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MonadTall._get_relative_size_from_absolute": {
            "name": "_get_relative_size_from_absolute",
            "location": 205,
            "return": [],
            "arguments": {
                "self": [],
                "absolute_size": []
            }
        },
        "MonadTall._get_absolute_size_from_relative": {
            "name": "_get_absolute_size_from_relative",
            "location": 208,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "relative_size": []
            }
        },
        "MonadTall.clone": {
            "name": "clone",
            "location": 211,
            "return": [
                "MonadTall"
            ],
            "arguments": {
                "self": [
                    "_TMonadTall"
                ],
                "group": []
            }
        },
        "MonadTall.add": {
            "name": "add",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "MonadTall.remove": {
            "name": "remove",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "MonadTall.cmd_set_ratio": {
            "name": "cmd_set_ratio",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ratio": []
            }
        },
        "MonadTall.cmd_normalize": {
            "name": "cmd_normalize",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "redraw": [
                    "bool"
                ]
            }
        },
        "MonadTall.cmd_reset": {
            "name": "cmd_reset",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ratio": [
                    "None"
                ],
                "redraw": [
                    "bool"
                ]
            }
        },
        "MonadTall._maximize_main": {
            "name": "_maximize_main",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonadTall._maximize_secondary": {
            "name": "_maximize_secondary",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonadTall.cmd_maximize": {
            "name": "cmd_maximize",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonadTall.configure": {
            "name": "configure",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [],
                "screen_rect": []
            }
        },
        "MonadTall._configure_specific": {
            "name": "_configure_specific",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [],
                "screen_rect": [],
                "px": [],
                "cidx": []
            }
        },
        "MonadTall.info": {
            "name": "info",
            "location": 396,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonadTall.get_shrink_margin": {
            "name": "get_shrink_margin",
            "location": 406,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "cidx": []
            }
        },
        "MonadTall.shrink": {
            "name": "shrink",
            "location": 414,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "cidx": [],
                "amt": []
            }
        },
        "MonadTall.shrink_up": {
            "name": "shrink_up",
            "location": 429,
            "return": [],
            "arguments": {
                "self": [],
                "cidx": [],
                "amt": []
            }
        },
        "MonadTall.shrink_up_shared": {
            "name": "shrink_up_shared",
            "location": 446,
            "return": [],
            "arguments": {
                "self": [],
                "cidx": [],
                "amt": []
            }
        },
        "MonadTall.shrink_down": {
            "name": "shrink_down",
            "location": 469,
            "return": [],
            "arguments": {
                "self": [],
                "cidx": [],
                "amt": []
            }
        },
        "MonadTall.shrink_down_shared": {
            "name": "shrink_down_shared",
            "location": 486,
            "return": [],
            "arguments": {
                "self": [],
                "cidx": [],
                "amt": []
            }
        },
        "MonadTall._grow_main": {
            "name": "_grow_main",
            "location": 509,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "amt": []
            }
        },
        "MonadTall._grow_solo_secondary": {
            "name": "_grow_solo_secondary",
            "location": 514,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "amt": []
            }
        },
        "MonadTall._grow_secondary": {
            "name": "_grow_secondary",
            "location": 519,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "amt": []
            }
        },
        "MonadTall.cmd_grow": {
            "name": "cmd_grow",
            "location": 546,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonadTall.cmd_grow_main": {
            "name": "cmd_grow_main",
            "location": 561,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonadTall.cmd_shrink_main": {
            "name": "cmd_shrink_main",
            "location": 570,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonadTall.grow": {
            "name": "grow",
            "location": 579,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cidx": [],
                "amt": []
            }
        },
        "MonadTall.grow_up_shared": {
            "name": "grow_up_shared",
            "location": 583,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cidx": [],
                "amt": []
            }
        },
        "MonadTall.grow_down_shared": {
            "name": "grow_down_shared",
            "location": 594,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cidx": [],
                "amt": []
            }
        },
        "MonadTall._shrink_main": {
            "name": "_shrink_main",
            "location": 605,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "amt": []
            }
        },
        "MonadTall._shrink_solo_secondary": {
            "name": "_shrink_solo_secondary",
            "location": 610,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "amt": []
            }
        },
        "MonadTall._shrink_secondary": {
            "name": "_shrink_secondary",
            "location": 615,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "amt": []
            }
        },
        "MonadTall.cmd_shrink": {
            "name": "cmd_shrink",
            "location": 653,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonadTall.cmd_shuffle_up": {
            "name": "cmd_shuffle_up",
            "location": 671,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonadTall.cmd_shuffle_down": {
            "name": "cmd_shuffle_down",
            "location": 677,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonadTall.cmd_flip": {
            "name": "cmd_flip",
            "location": 683,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonadTall._get_closest": {
            "name": "_get_closest",
            "location": 688,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "clients": []
            }
        },
        "MonadTall.cmd_swap": {
            "name": "cmd_swap",
            "location": 697,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "window1": [],
                "window2": []
            }
        },
        "MonadTall.cmd_swap_left": {
            "name": "cmd_swap_left",
            "location": 703,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonadTall.cmd_swap_right": {
            "name": "cmd_swap_right",
            "location": 711,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonadTall.cmd_swap_main": {
            "name": "cmd_swap_main",
            "location": 719,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonadTall.cmd_left": {
            "name": "cmd_left",
            "location": 726,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonadTall.cmd_right": {
            "name": "cmd_right",
            "location": 734,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonadWide._get_relative_size_from_absolute": {
            "name": "_get_relative_size_from_absolute",
            "location": 855,
            "return": [],
            "arguments": {
                "self": [],
                "absolute_size": []
            }
        },
        "MonadWide._get_absolute_size_from_relative": {
            "name": "_get_absolute_size_from_relative",
            "location": 858,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "relative_size": []
            }
        },
        "MonadWide._maximize_secondary": {
            "name": "_maximize_secondary",
            "location": 861,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonadWide._configure_specific": {
            "name": "_configure_specific",
            "location": 883,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [],
                "screen_rect": [],
                "px": [],
                "cidx": []
            }
        },
        "MonadWide._shrink_secondary": {
            "name": "_shrink_secondary",
            "location": 948,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "amt": []
            }
        },
        "MonadWide.cmd_swap_left": {
            "name": "cmd_swap_left",
            "location": 983,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonadWide.cmd_swap_right": {
            "name": "cmd_swap_right",
            "location": 991,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonadWide.cmd_swap_main": {
            "name": "cmd_swap_main",
            "location": 999,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonadThreeCol.__init__": {
            "name": "__init__",
            "location": 1086,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonadThreeCol._configure_specific": {
            "name": "_configure_specific",
            "location": 1090,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [],
                "screen_rect": [],
                "border_color": [],
                "index": []
            }
        },
        "MonadThreeCol._configure_main": {
            "name": "_configure_main",
            "location": 1099,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "MonadThreeCol._configure_left": {
            "name": "_configure_left",
            "location": 1111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [],
                "index": []
            }
        },
        "MonadThreeCol._configure_right": {
            "name": "_configure_right",
            "location": 1123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [],
                "index": []
            }
        },
        "MonadThreeCol._get_main_width": {
            "name": "_get_main_width",
            "location": 1132,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonadThreeCol._get_secondary_widths": {
            "name": "_get_secondary_widths",
            "location": 1136,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonadThreeCol._get_secondary_height": {
            "name": "_get_secondary_height",
            "location": 1144,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "MonadThreeCol._get_relative_sizes_above": {
            "name": "_get_relative_sizes_above",
            "location": 1148,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "MonadThreeCol._place_client": {
            "name": "_place_client",
            "location": 1153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [],
                "left": [],
                "top": [],
                "width": [],
                "height": []
            }
        },
        "MonadThreeCol.cmd_normalize": {
            "name": "cmd_normalize",
            "location": 1177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "redraw": [
                    "bool"
                ]
            }
        },
        "MonadThreeCol.cmd_swap_main": {
            "name": "cmd_swap_main",
            "location": 1194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonadThreeCol._maximize_secondary": {
            "name": "_maximize_secondary",
            "location": 1198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonadThreeCol._grow_secondary": {
            "name": "_grow_secondary",
            "location": 1209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "amt": []
            }
        },
        "MonadThreeCol._shrink_secondary": {
            "name": "_shrink_secondary",
            "location": 1213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "amt": []
            }
        },
        "MonadThreeCol._resize_secondary": {
            "name": "_resize_secondary",
            "location": 1217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "amt": []
            }
        },
        "MonadThreeCol._get_column": {
            "name": "_get_column",
            "location": 1260,
            "return": [
                "MonadThreeCol.__column"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "MonadThreeCol._get_columns": {
            "name": "_get_columns",
            "location": 1265,
            "return": [
                "Tuple[(MonadThreeCol.__column, MonadThreeCol.__column)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonadThreeCol.info": {
            "name": "info",
            "location": 1284,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonadThreeCol._split_integer": {
            "name": "_split_integer",
            "location": 1296,
            "return": [
                "list"
            ],
            "arguments": {
                "value": [],
                "parts": []
            }
        }
    },
    "qtile-master/libqtile/layout/zoomy.py": {
        "Zoomy.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Zoomy.add": {
            "name": "add",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "float",
                    "bool"
                ]
            }
        },
        "Zoomy.configure": {
            "name": "configure",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str"
                ],
                "screen_rect": [
                    "bool",
                    "dict"
                ]
            }
        },
        "Zoomy.focus": {
            "name": "focus",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "win": [
                    "Optional[str]",
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "qtile-master/libqtile/layout/__init__.py": {},
    "qtile-master/libqtile/resources/default_config.py": {},
    "qtile-master/libqtile/resources/__init__.py": {},
    "qtile-master/libqtile/scripts/check.py": {
        "type_check_config_vars": {
            "name": "type_check_config_vars",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "tempdir": [
                    "str"
                ],
                "config_name": [
                    "str"
                ]
            }
        },
        "type_check_config_args": {
            "name": "type_check_config_args",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "config_file": [
                    "str",
                    "waterbutler.core.path.WaterButlerPath"
                ]
            }
        },
        "check_deps": {
            "name": "check_deps",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "check_config": {
            "name": "check_config",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "add_subcommand": {
            "name": "add_subcommand",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "subparsers": [
                    "str",
                    "Iterable[str]",
                    "float"
                ],
                "parents": [
                    "str",
                    "Iterable[str]",
                    "float"
                ]
            }
        }
    },
    "qtile-master/libqtile/scripts/cmd_obj.py": {
        "get_formated_info": {
            "name": "get_formated_info",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "obj": [
                    "libqtile.command.client.CommandClient"
                ],
                "cmd": [
                    "str"
                ],
                "args": [
                    "bool"
                ],
                "short": [
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "print_commands": {
            "name": "print_commands",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "prefix": [
                    "str"
                ],
                "obj": [
                    "libqtile.command.client.CommandClient"
                ]
            }
        },
        "get_object": {
            "name": "get_object",
            "location": 92,
            "return": [
                "libqtile.command.client.CommandClient"
            ],
            "arguments": {
                "client": [
                    "libqtile.command.client.CommandClient"
                ],
                "argv": [
                    "List[str]"
                ]
            }
        },
        "run_function": {
            "name": "run_function",
            "location": 129,
            "return": [
                "str"
            ],
            "arguments": {
                "client": [
                    "libqtile.command.client.CommandClient"
                ],
                "funcname": [
                    "str"
                ],
                "args": [
                    "List[str]"
                ]
            }
        },
        "print_base_objects": {
            "name": "print_base_objects",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "cmd_obj": {
            "name": "cmd_obj",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "add_subcommand": {
            "name": "add_subcommand",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "subparsers": [
                    "List[str]",
                    "argparse.Namespace",
                    "str"
                ],
                "parents": [
                    "List[str]",
                    "argparse.Namespace",
                    "str"
                ]
            }
        }
    },
    "qtile-master/libqtile/scripts/main.py": {
        "main": {
            "name": "main",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main.print_help": {
            "name": "print_help",
            "location": 56,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "options": [
                    "bool",
                    "argparse.Namespace",
                    "str"
                ]
            }
        }
    },
    "qtile-master/libqtile/scripts/migrate.py": {
        "rename_hook": {
            "name": "rename_hook",
            "location": 35,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "query": [
                    "Optional[int]",
                    "str",
                    "float",
                    "Optional[str]"
                ],
                "fro": [
                    "Set[str]",
                    "List[str]",
                    "Sequence[str]",
                    "int"
                ],
                "to": [
                    "List[List[int]]",
                    "str"
                ]
            }
        },
        "client_name_updated": {
            "name": "client_name_updated",
            "location": 44,
            "return": [
                "str",
                "Dict[str, str]",
                "IO",
                "bool"
            ],
            "arguments": {
                "query": [
                    "str",
                    "Optional[int]",
                    "bool",
                    "Optional[bool]"
                ]
            }
        },
        "tile_master_windows_rename": {
            "name": "tile_master_windows_rename",
            "location": 49,
            "return": [
                "int",
                "Dict[str, Dict[str, int]]",
                "str",
                "dict"
            ],
            "arguments": {
                "query": [
                    "str",
                    "Optional[int]",
                    "Sized",
                    "bool"
                ]
            }
        },
        "threaded_poll_text_rename": {
            "name": "threaded_poll_text_rename",
            "location": 53,
            "return": [
                "Type"
            ],
            "arguments": {
                "query": [
                    "bool",
                    "Exception"
                ]
            }
        },
        "pacman_to_checkupdates": {
            "name": "pacman_to_checkupdates",
            "location": 57,
            "return": [
                "Tuple[List[Any], int]",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "query": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "reset_format": {
            "name": "reset_format",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "node": [
                    "str",
                    "bool",
                    "Iterable"
                ],
                "capture": [
                    "str",
                    "tuple",
                    "Union[Type, Tuple[Type, ...]]"
                ],
                "filename": [
                    "str",
                    "bool",
                    "Iterable"
                ]
            }
        },
        "bitcoin_to_crypto": {
            "name": "bitcoin_to_crypto",
            "location": 82,
            "return": [
                "list",
                "int"
            ],
            "arguments": {
                "query": [
                    "str",
                    "int",
                    "Mapping[str, Any]"
                ]
            }
        },
        "hook_main_function": {
            "name": "hook_main_function",
            "location": 86,
            "return": [
                "int",
                "Dict[str, type]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "query": [
                    "str",
                    "Dict[str, Any]",
                    "Tuple[str]"
                ]
            }
        },
        "update_node_nac": {
            "name": "update_node_nac",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "node": [
                    "bool",
                    "str",
                    "int"
                ],
                "capture": [
                    "str",
                    "int"
                ],
                "filename": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "new_at_current_to_new_client_position": {
            "name": "new_at_current_to_new_client_position",
            "location": 117,
            "return": [
                "str",
                "Dict[str, Any]",
                "Dict[str, Dict[str, Any]]",
                "Dict[str, int]"
            ],
            "arguments": {
                "query": [
                    "float",
                    "str",
                    "Tuple[bytes, bytes]",
                    "Tuple[int, int]",
                    "int"
                ]
            }
        },
        "windowtogroup_groupName_argument": {
            "name": "windowtogroup_groupName_argument",
            "location": 124,
            "return": [
                "str",
                "dict",
                "Dict[str, str]",
                "Dict[str, List[Callable]]",
                "Dict[str, Any]",
                "list"
            ],
            "arguments": {
                "funcname": [
                    "str",
                    "Optional[Callable]",
                    "Dict[str, Optional[str]]"
                ],
                "query": [
                    "str",
                    "Optional[Callable]",
                    "Dict[str, Optional[str]]"
                ]
            }
        },
        "file_and_backup": {
            "name": "file_and_backup",
            "location": 157,
            "return": [
                "Generator[(Tuple[(str, str)], Any, None)]"
            ],
            "arguments": {
                "config_dir": [
                    "str"
                ]
            }
        },
        "do_migrate": {
            "name": "do_migrate",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "add_subcommand": {
            "name": "add_subcommand",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "subparsers": [
                    "str",
                    "Iterable[str]",
                    "float"
                ],
                "parents": [
                    "str",
                    "Iterable[str]",
                    "float"
                ]
            }
        },
        "hook_main_function.modify_main": {
            "name": "modify_main",
            "location": 87,
            "return": [
                "None",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "node": [
                    "bool",
                    "str",
                    "Iterable"
                ],
                "capture": [
                    "str",
                    "dict"
                ],
                "filename": [
                    "bool",
                    "str",
                    "Iterable"
                ]
            }
        },
        "f": {
            "name": "f",
            "location": 151,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "query": [
                    "str",
                    "int"
                ],
                "fro": [
                    "typing.Text",
                    "str",
                    "int"
                ],
                "to": [
                    "typing.Text",
                    "str",
                    "int"
                ]
            }
        }
    },
    "qtile-master/libqtile/scripts/run_cmd.py": {
        "run_cmd": {
            "name": "run_cmd",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "opts": [
                    "str",
                    "bool"
                ]
            }
        },
        "add_subcommand": {
            "name": "add_subcommand",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "subparsers": [
                    "str",
                    "argparse._SubParsersAction",
                    "Iterable[str]",
                    "float"
                ],
                "parents": [
                    "str",
                    "argparse._SubParsersAction",
                    "Iterable[str]",
                    "float"
                ]
            }
        },
        "run_cmd.remove_rule": {
            "name": "remove_rule",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "qtile-master/libqtile/scripts/shell.py": {
        "qshell": {
            "name": "qshell",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "add_subcommand": {
            "name": "add_subcommand",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "subparsers": [
                    "str",
                    "Iterable[str]",
                    "float"
                ],
                "parents": [
                    "str",
                    "Iterable[str]",
                    "float"
                ]
            }
        }
    },
    "qtile-master/libqtile/scripts/start.py": {
        "rename_process": {
            "name": "rename_process",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "make_qtile": {
            "name": "make_qtile",
            "location": 50,
            "return": [
                "libqtile.core.manager.Qtile"
            ],
            "arguments": {
                "options": [
                    "bool",
                    "Exception"
                ]
            }
        },
        "start": {
            "name": "start",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "options": [
                    "List[Exception]",
                    "Optional[float]",
                    "Union['Contributor', 'Coverage']"
                ]
            }
        },
        "add_subcommand": {
            "name": "add_subcommand",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "subparsers": [
                    "str",
                    "Iterable[str]",
                    "float"
                ],
                "parents": [
                    "str",
                    "Iterable[str]",
                    "float"
                ]
            }
        }
    },
    "qtile-master/libqtile/scripts/top.py": {
        "get_trace": {
            "name": "get_trace",
            "location": 54,
            "return": [
                "tracemalloc.Snapshot"
            ],
            "arguments": {
                "c": [
                    "str",
                    "int"
                ],
                "force_start": [
                    "int",
                    "Optional[List[str]]",
                    "list",
                    "dict"
                ]
            }
        },
        "filter_snapshot": {
            "name": "filter_snapshot",
            "location": 67,
            "return": [
                "Dict[str, Any]",
                "dict",
                "bool",
                "str"
            ],
            "arguments": {
                "snapshot": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "get_stats": {
            "name": "get_stats",
            "location": 76,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "scr": [
                    "int",
                    "Callable[[], float]"
                ],
                "c": [
                    "int",
                    "bool",
                    "str",
                    "Dict[str, Any]"
                ],
                "group_by": [
                    "typing.Text",
                    "int",
                    "Callable",
                    "Optional[str]"
                ],
                "limit": [
                    "int",
                    "str",
                    "float",
                    "Mapping[str, Any]"
                ],
                "seconds": [
                    "float",
                    "int",
                    "Callable",
                    "Optional[str]"
                ],
                "force_start": [
                    "bool",
                    "int",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "raw_stats": {
            "name": "raw_stats",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "c": [
                    "float",
                    "str",
                    "Callable"
                ],
                "group_by": [
                    "typing.Text",
                    "int",
                    "bool",
                    "float",
                    "Optional[List[str]]"
                ],
                "limit": [
                    "int",
                    "float",
                    "bool",
                    "str",
                    "bytes"
                ],
                "force_start": [
                    "bool",
                    "float",
                    "str",
                    "Callable"
                ]
            }
        },
        "top": {
            "name": "top",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "opts": [
                    "str"
                ]
            }
        },
        "add_subcommand": {
            "name": "add_subcommand",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "subparsers": [
                    "str",
                    "Iterable[str]",
                    "float"
                ],
                "parents": [
                    "str",
                    "Iterable[str]",
                    "float"
                ]
            }
        }
    },
    "qtile-master/libqtile/scripts/__init__.py": {},
    "qtile-master/libqtile/widget/backlight.py": {
        "Backlight.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backlight.finalize": {
            "name": "finalize",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backlight._load_file": {
            "name": "_load_file",
            "location": 117,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "Backlight._get_info": {
            "name": "_get_info",
            "location": 125,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backlight.poll": {
            "name": "poll",
            "location": 130,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backlight._change_backlight": {
            "name": "_change_backlight",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int"
                ]
            }
        },
        "Backlight.cmd_change_backlight": {
            "name": "cmd_change_backlight",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "direction": [
                    "float"
                ],
                "step": [
                    "None",
                    "str",
                    "int",
                    "Dict[str, str]",
                    "T"
                ]
            }
        }
    },
    "qtile-master/libqtile/widget/base.py": {
        "_Orientations.__new__": {
            "name": "__new__",
            "location": 74,
            "return": [
                "Orientations"
            ],
            "arguments": {
                "cls": [
                    "Type[_T_Orientations]"
                ],
                "value": [],
                "doc": []
            }
        },
        "_Orientations.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [],
                "doc": []
            }
        },
        "_Orientations.__str__": {
            "name": "__str__",
            "location": 80,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Orientations.__repr__": {
            "name": "__repr__",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Widget.__init__": {
            "name": "__init__",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "length": []
            }
        },
        "_Widget.length": {
            "name": "length",
            "location": 181,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_Widget.width": {
            "name": "width",
            "location": 185,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_Widget.height": {
            "name": "height",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_Widget.offset": {
            "name": "offset",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_Widget._test_orientation_compatibility": {
            "name": "_test_orientation_compatibility",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "horizontal": []
            }
        },
        "_Widget.timer_setup": {
            "name": "timer_setup",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Widget._configure": {
            "name": "_configure",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtile": [],
                "bar": []
            }
        },
        "_Widget.finalize": {
            "name": "finalize",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Widget.clear": {
            "name": "clear",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Widget.info": {
            "name": "info",
            "location": 251,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Widget.add_callbacks": {
            "name": "add_callbacks",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "defaults": []
            }
        },
        "_Widget.button_press": {
            "name": "button_press",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "button": []
            }
        },
        "_Widget.button_release": {
            "name": "button_release",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "button": []
            }
        },
        "_Widget.get": {
            "name": "get",
            "location": 282,
            "return": [],
            "arguments": {
                "self": [],
                "q": [],
                "name": []
            }
        },
        "_Widget._items": {
            "name": "_items",
            "location": 291,
            "return": [
                "Optional[Tuple[(bool, list)]]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "_Widget._select": {
            "name": "_select",
            "location": 298,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "sel": []
            }
        },
        "_Widget.cmd_info": {
            "name": "cmd_info",
            "location": 304,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Widget.draw": {
            "name": "draw",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Widget.calculate_length": {
            "name": "calculate_length",
            "location": 318,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Widget.timeout_add": {
            "name": "timeout_add",
            "location": 328,
            "return": [],
            "arguments": {
                "self": [],
                "seconds": [],
                "method": [],
                "method_args": [
                    "tuple"
                ]
            }
        },
        "_Widget.call_process": {
            "name": "call_process",
            "location": 337,
            "return": [],
            "arguments": {
                "self": [],
                "command": []
            }
        },
        "_Widget._remove_dead_timers": {
            "name": "_remove_dead_timers",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Widget._wrapper": {
            "name": "_wrapper",
            "location": 353,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": []
            }
        },
        "_Widget.create_mirror": {
            "name": "create_mirror",
            "location": 360,
            "return": [
                "Mirror"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Widget.clone": {
            "name": "clone",
            "location": 363,
            "return": [
                "Widget"
            ],
            "arguments": {
                "self": [
                    "_T_Widget"
                ]
            }
        },
        "_Widget.mouse_enter": {
            "name": "mouse_enter",
            "location": 366,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "_Widget.mouse_leave": {
            "name": "mouse_leave",
            "location": 369,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "_TextBox.__init__": {
            "name": "__init__",
            "location": 423,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "typing.Text"
                ],
                "width": []
            }
        },
        "_TextBox.text": {
            "name": "text",
            "location": 440,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_TextBox.formatted_text": {
            "name": "formatted_text",
            "location": 451,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_TextBox.foreground": {
            "name": "foreground",
            "location": 459,
            "return": [],
            "arguments": {
                "self": [],
                "fg": []
            }
        },
        "_TextBox.font": {
            "name": "font",
            "location": 469,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_TextBox.fontshadow": {
            "name": "fontshadow",
            "location": 479,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_TextBox.actual_padding": {
            "name": "actual_padding",
            "location": 485,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TextBox._configure": {
            "name": "_configure",
            "location": 491,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtile": [],
                "bar": []
            }
        },
        "_TextBox.check_width": {
            "name": "check_width",
            "location": 510,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TextBox.calculate_length": {
            "name": "calculate_length",
            "location": 524,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TextBox.can_draw": {
            "name": "can_draw",
            "location": 533,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TextBox.draw": {
            "name": "draw",
            "location": 539,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TextBox.do_scroll": {
            "name": "do_scroll",
            "location": 593,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TextBox.reset_scroll": {
            "name": "reset_scroll",
            "location": 623,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TextBox.hide_scroll": {
            "name": "hide_scroll",
            "location": 631,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TextBox.cmd_set_font": {
            "name": "cmd_set_font",
            "location": 634,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "font": [],
                "fontsize": [],
                "fontshadow": []
            }
        },
        "_TextBox.info": {
            "name": "info",
            "location": 647,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TextBox.update": {
            "name": "update",
            "location": 653,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "InLoopPollText.__init__": {
            "name": "__init__",
            "location": 687,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "default_text": [
                    "typing.Text"
                ]
            }
        },
        "InLoopPollText.timer_setup": {
            "name": "timer_setup",
            "location": 691,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InLoopPollText._configure": {
            "name": "_configure",
            "location": 702,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtile": [],
                "bar": []
            }
        },
        "InLoopPollText.button_press": {
            "name": "button_press",
            "location": 710,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "button": []
            }
        },
        "InLoopPollText.poll": {
            "name": "poll",
            "location": 714,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InLoopPollText.tick": {
            "name": "tick",
            "location": 717,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThreadPoolText.__init__": {
            "name": "__init__",
            "location": 742,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "ThreadPoolText.timer_setup": {
            "name": "timer_setup",
            "location": 746,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThreadPoolText.poll": {
            "name": "poll",
            "location": 771,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThreadPoolText.cmd_force_update": {
            "name": "cmd_force_update",
            "location": 774,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mirror.__init__": {
            "name": "__init__",
            "location": 842,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reflection": []
            }
        },
        "Mirror._configure": {
            "name": "_configure",
            "location": 848,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtile": [],
                "bar": []
            }
        },
        "Mirror.length": {
            "name": "length",
            "location": 860,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Mirror.hook": {
            "name": "hook",
            "location": 863,
            "return": [
                "Callable[([], Any)]"
            ],
            "arguments": {
                "self": [],
                "draw": []
            }
        },
        "Mirror.draw": {
            "name": "draw",
            "location": 870,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mirror.button_press": {
            "name": "button_press",
            "location": 883,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "button": []
            }
        },
        "ThreadPoolText.timer_setup.on_done": {
            "name": "on_done",
            "location": 747,
            "return": [
                "None"
            ],
            "arguments": {
                "future": []
            }
        },
        "Mirror.hook._": {
            "name": "_",
            "location": 864,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "qtile-master/libqtile/widget/battery.py": {
        "load_battery": {
            "name": "load_battery",
            "location": 93,
            "return": [
                "_Battery"
            ],
            "arguments": {}
        },
        "default_icon_path": {
            "name": "default_icon_path",
            "location": 444,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "_Battery.update_status": {
            "name": "update_status",
            "location": 83,
            "return": [
                "BatteryStatus"
            ],
            "arguments": {
                "self": []
            }
        },
        "_FreeBSDBattery.__init__": {
            "name": "__init__",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "battery": [
                    "typing.Text"
                ]
            }
        },
        "_FreeBSDBattery.update_status": {
            "name": "update_status",
            "location": 129,
            "return": [
                "BatteryStatus"
            ],
            "arguments": {
                "self": []
            }
        },
        "_LinuxBattery.__init__": {
            "name": "__init__",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_LinuxBattery._get_battery_name": {
            "name": "_get_battery_name",
            "location": 217,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "_LinuxBattery._load_file": {
            "name": "_load_file",
            "location": 224,
            "return": [
                "tuple[typing.Text]",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "_LinuxBattery._get_param": {
            "name": "_get_param",
            "location": 247,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "_LinuxBattery.update_status": {
            "name": "update_status",
            "location": 269,
            "return": [
                "BatteryStatus"
            ],
            "arguments": {
                "self": []
            }
        },
        "Battery.__init__": {
            "name": "__init__",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Battery._configure": {
            "name": "_configure",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtile": [],
                "bar": []
            }
        },
        "Battery._load_battery": {
            "name": "_load_battery",
            "location": 359,
            "return": [
                "_Battery"
            ],
            "arguments": {}
        },
        "Battery.poll": {
            "name": "poll",
            "location": 367,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Battery.build_string": {
            "name": "build_string",
            "location": 395,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "BatteryStatus"
                ]
            }
        },
        "BatteryIcon.__init__": {
            "name": "__init__",
            "location": 474,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BatteryIcon._load_battery": {
            "name": "_load_battery",
            "location": 495,
            "return": [
                "_Battery"
            ],
            "arguments": {}
        },
        "BatteryIcon.timer_setup": {
            "name": "timer_setup",
            "location": 503,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BatteryIcon._configure": {
            "name": "_configure",
            "location": 507,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtile": [],
                "bar": []
            }
        },
        "BatteryIcon.setup_images": {
            "name": "setup_images",
            "location": 513,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BatteryIcon.update": {
            "name": "update",
            "location": 523,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BatteryIcon.draw": {
            "name": "draw",
            "location": 530,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BatteryIcon._get_icon_key": {
            "name": "_get_icon_key",
            "location": 537,
            "return": [
                "str"
            ],
            "arguments": {
                "status": [
                    "BatteryStatus"
                ]
            }
        }
    },
    "qtile-master/libqtile/widget/bluetooth.py": {
        "Bluetooth.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bluetooth._signal_received": {
            "name": "_signal_received",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "interface_name": [
                    "bool",
                    "str",
                    "Optional[List[str]]",
                    "Optional[bool]",
                    "Optional[str]",
                    "int",
                    "Any"
                ],
                "changed_properties": [
                    "Dict[str, str]",
                    "int",
                    "Dict[str, Any]",
                    "MutableMapping[str, str]"
                ],
                "_invalidated_properties": [
                    "bool",
                    "str",
                    "Optional[List[str]]",
                    "Optional[bool]",
                    "Optional[str]",
                    "int",
                    "Any"
                ]
            }
        },
        "Bluetooth.update_text": {
            "name": "update_text",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/widget/canto.py": {
        "Canto.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Canto.poll": {
            "name": "poll",
            "location": 45,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/widget/caps_num_lock_indicator.py": {
        "CapsNumLockIndicator.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CapsNumLockIndicator.get_indicators": {
            "name": "get_indicators",
            "location": 37,
            "return": [
                "Optional[list]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CapsNumLockIndicator.poll": {
            "name": "poll",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/widget/check_updates.py": {
        "CheckUpdates.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckUpdates._check_updates": {
            "name": "_check_updates",
            "location": 110,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckUpdates.poll": {
            "name": "poll",
            "location": 131,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckUpdates.do_execute": {
            "name": "do_execute",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckUpdates._refresh_count": {
            "name": "_refresh_count",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/widget/chord.py": {
        "Chord.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "width": [
                    "bool",
                    "int",
                    "Tuple[float]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Chord._configure": {
            "name": "_configure",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "qtile": [
                    "str",
                    "bytes"
                ],
                "bar": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Chord._setup_hooks": {
            "name": "_setup_hooks",
            "location": 57,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Chord.reset_colours": {
            "name": "reset_colours",
            "location": 75,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Chord.clear": {
            "name": "clear",
            "location": 79,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Chord._setup_hooks.hook_enter_chord": {
            "name": "hook_enter_chord",
            "location": 58,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {
                "chord_name": [
                    "Optional[str]",
                    "type",
                    "Union[str, None]",
                    "Optional[bool]",
                    "str"
                ]
            }
        }
    },
    "qtile-master/libqtile/widget/clipboard.py": {
        "Clipboard.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "width": [
                    "bool",
                    "int",
                    "Tuple[float]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Clipboard._configure": {
            "name": "_configure",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtile": [
                    "str",
                    "bytes"
                ],
                "bar": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Clipboard.clear": {
            "name": "clear",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Clipboard.is_blacklisted": {
            "name": "is_blacklisted",
            "location": 66,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "owner_id": [
                    "bool",
                    "List[Tuple[Any]]",
                    "Optional[int]"
                ]
            }
        },
        "Clipboard.setup_hooks": {
            "name": "setup_hooks",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Clipboard.setup_hooks.hook_change": {
            "name": "hook_change",
            "location": 82,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "int"
                ],
                "selection": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "Clipboard.setup_hooks.hook_notify": {
            "name": "hook_notify",
            "location": 105,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "int"
                ],
                "selection": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "qtile-master/libqtile/widget/clock.py": {
        "Clock.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Clock.tick": {
            "name": "tick",
            "location": 78,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Clock.poll": {
            "name": "poll",
            "location": 85,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/widget/cmus.py": {
        "Cmus.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cmus.get_info": {
            "name": "get_info",
            "location": 57,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cmus.now_playing": {
            "name": "now_playing",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Cmus.play": {
            "name": "play",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cmus.poll": {
            "name": "poll",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/widget/config_error.py": {
        "ConfigErrorWidget.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigErrorWidget._hide": {
            "name": "_hide",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/widget/countdown.py": {
        "Countdown.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Countdown.poll": {
            "name": "poll",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/widget/cpu.py": {
        "CPU.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CPU.poll": {
            "name": "poll",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/widget/crashme.py": {
        "_CrashMe.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "width": [
                    "bool",
                    "int",
                    "Tuple[float]",
                    "Dict[str, Any]"
                ]
            }
        },
        "_CrashMe._configure": {
            "name": "_configure",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtile": [
                    "int",
                    "Callable",
                    "str"
                ],
                "bar": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_CrashMe.button_press": {
            "name": "button_press",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ],
                "y": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ],
                "button": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        }
    },
    "qtile-master/libqtile/widget/crypto_ticker.py": {
        "CryptoTicker.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CryptoTicker.url": {
            "name": "url",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CryptoTicker.parse": {
            "name": "parse",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "body": []
            }
        }
    },
    "qtile-master/libqtile/widget/currentlayout.py": {
        "CurrentLayout.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "width": []
            }
        },
        "CurrentLayout._configure": {
            "name": "_configure",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtile": [],
                "bar": []
            }
        },
        "CurrentLayout.setup_hooks": {
            "name": "setup_hooks",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CurrentLayoutIcon.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CurrentLayoutIcon._configure": {
            "name": "_configure",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtile": [],
                "bar": []
            }
        },
        "CurrentLayoutIcon._setup_hooks": {
            "name": "_setup_hooks",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CurrentLayoutIcon.draw": {
            "name": "draw",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CurrentLayoutIcon._get_layout_names": {
            "name": "_get_layout_names",
            "location": 157,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "CurrentLayoutIcon._update_icon_paths": {
            "name": "_update_icon_paths",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CurrentLayoutIcon.find_icon_file_path": {
            "name": "find_icon_file_path",
            "location": 179,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "layout_name": []
            }
        },
        "CurrentLayoutIcon._setup_images": {
            "name": "_setup_images",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CurrentLayout.setup_hooks.hook_response": {
            "name": "hook_response",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "layout": [],
                "group": []
            }
        },
        "CurrentLayoutIcon._setup_hooks.hook_response": {
            "name": "hook_response",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "layout": [],
                "group": []
            }
        }
    },
    "qtile-master/libqtile/widget/currentscreen.py": {
        "CurrentScreen.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "width": [
                    "bool",
                    "int",
                    "Tuple[float]",
                    "Dict[str, Any]"
                ]
            }
        },
        "CurrentScreen._configure": {
            "name": "_configure",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtile": [
                    "str",
                    "bytes"
                ],
                "bar": [
                    "str",
                    "bytes"
                ]
            }
        },
        "CurrentScreen.update_text": {
            "name": "update_text",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/widget/df.py": {
        "DF.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DF.draw": {
            "name": "draw",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DF.poll": {
            "name": "poll",
            "location": 63,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/widget/generic_poll_text.py": {
        "xmlparse": {
            "name": "xmlparse",
            "location": 18,
            "return": [
                "collections.OrderedDict[(str, Any)]"
            ],
            "arguments": {
                "body": [
                    "str",
                    "bool",
                    "bytes",
                    "Mapping[str, str]",
                    "int"
                ]
            }
        },
        "GenPollText.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenPollText.poll": {
            "name": "poll",
            "location": 33,
            "return": [
                "tuple",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenPollUrl.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenPollUrl.fetch": {
            "name": "fetch",
            "location": 63,
            "return": [
                "str",
                "Dict[str, str]",
                "MutableMapping[str, Any]",
                "int",
                "Optional[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenPollUrl.poll": {
            "name": "poll",
            "location": 79,
            "return": [
                "typing.Text",
                "str",
                "Dict[str, str]",
                "List[Dict]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/widget/gmail_checker.py": {
        "GmailChecker.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GmailChecker.poll": {
            "name": "poll",
            "location": 50,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/widget/graph.py": {
        "_Graph.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "width": [
                    "dict",
                    "int"
                ]
            }
        },
        "_Graph._configure": {
            "name": "_configure",
            "location": 79,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "qtile": [
                    "int",
                    "Callable",
                    "str"
                ],
                "bar": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_Graph.timer_setup": {
            "name": "timer_setup",
            "location": 84,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Graph.graphwidth": {
            "name": "graphwidth",
            "location": 88,
            "return": [
                "float",
                "str",
                "bool",
                "bytes",
                "Optional[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Graph.graphheight": {
            "name": "graphheight",
            "location": 92,
            "return": [
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Graph.step": {
            "name": "step",
            "location": 95,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Graph._for_each_step": {
            "name": "_for_each_step",
            "location": 98,
            "return": [
                "",
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "int",
                    "bool",
                    "T",
                    "Sequence[Any]"
                ]
            }
        },
        "_Graph._prepare_context": {
            "name": "_prepare_context",
            "location": 108,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Graph.draw_box": {
            "name": "draw_box",
            "location": 114,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "list"
                ],
                "y": [
                    "Callable",
                    "list"
                ],
                "values": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "Callable"
                ]
            }
        },
        "_Graph.draw_line": {
            "name": "draw_line",
            "location": 123,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ],
                "y": [
                    "int",
                    "str",
                    "bool",
                    "float"
                ],
                "values": [
                    "str",
                    "bytes",
                    "float",
                    "Iterable[Any]"
                ]
            }
        },
        "_Graph.draw_linefill": {
            "name": "draw_linefill",
            "location": 130,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "str",
                    "Union[int, float]"
                ],
                "y": [
                    "int",
                    "str",
                    "Union[int, float]"
                ],
                "values": [
                    "int"
                ]
            }
        },
        "_Graph.val": {
            "name": "val",
            "location": 142,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_Graph.draw": {
            "name": "draw",
            "location": 150,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Graph.push": {
            "name": "push",
            "location": 182,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "datetime.time.delta",
                    "int",
                    "bool"
                ]
            }
        },
        "_Graph.update": {
            "name": "update",
            "location": 195,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Graph.fulfill": {
            "name": "fulfill",
            "location": 204,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "list",
                    "List[str]",
                    "tuple",
                    "bool"
                ]
            }
        },
        "CPUGraph.__init__": {
            "name": "__init__",
            "location": 223,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CPUGraph._getvalues": {
            "name": "_getvalues",
            "location": 229,
            "return": [
                "tuple[int]",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CPUGraph.update_graph": {
            "name": "update_graph",
            "location": 245,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryGraph.__init__": {
            "name": "__init__",
            "location": 273,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryGraph._getvalues": {
            "name": "_getvalues",
            "location": 281,
            "return": [
                "dict[typing.Text, int]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryGraph.update_graph": {
            "name": "update_graph",
            "location": 290,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SwapGraph.__init__": {
            "name": "__init__",
            "location": 306,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SwapGraph._getvalues": {
            "name": "_getvalues",
            "location": 313,
            "return": [
                "dict[typing.Text, int]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SwapGraph.update_graph": {
            "name": "update_graph",
            "location": 320,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NetGraph.__init__": {
            "name": "__init__",
            "location": 345,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NetGraph._get_values": {
            "name": "_get_values",
            "location": 361,
            "return": [
                "str",
                "Tuple[int, int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "NetGraph.update_graph": {
            "name": "update_graph",
            "location": 368,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NetGraph.get_main_iface": {
            "name": "get_main_iface",
            "location": 375,
            "return": [
                "str",
                "List[str]",
                "dict"
            ],
            "arguments": {}
        },
        "HDDGraph.__init__": {
            "name": "__init__",
            "location": 398,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HDDGraph._get_values": {
            "name": "_get_values",
            "location": 406,
            "return": [
                "Dict[str, Any]",
                "float",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "HDDGraph.update_graph": {
            "name": "update_graph",
            "location": 413,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HDDBusyGraph.__init__": {
            "name": "__init__",
            "location": 429,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HDDBusyGraph._get_values": {
            "name": "_get_values",
            "location": 435,
            "return": [
                "int",
                "str",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HDDBusyGraph.update_graph": {
            "name": "update_graph",
            "location": 446,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/widget/groupbox.py": {
        "_GroupBase.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "_GroupBase.box_width": {
            "name": "box_width",
            "location": 53,
            "return": [
                "bool",
                "int",
                "Tuple[int]"
            ],
            "arguments": {
                "self": [],
                "groups": [
                    "int",
                    "Tuple[int, int]",
                    "dict"
                ]
            }
        },
        "_GroupBase._configure": {
            "name": "_configure",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "qtile": [
                    "int",
                    "Callable",
                    "str"
                ],
                "bar": [
                    "int"
                ]
            }
        },
        "_GroupBase.setup_hooks": {
            "name": "setup_hooks",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "_GroupBase.drawbox": {
            "name": "drawbox",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "int",
                    "str",
                    "float",
                    "dict"
                ],
                "text": [
                    "str",
                    "int",
                    "bytes"
                ],
                "bordercolor": [
                    "Optional[int]",
                    "int",
                    "Callable[[int], None]"
                ],
                "textcolor": [
                    "int",
                    "bool",
                    "Optional[int]",
                    "float"
                ],
                "highlight_color": [
                    "int",
                    "Tuple[int]"
                ],
                "width": [
                    "int",
                    "Optional[int]",
                    "str"
                ],
                "rounded": [
                    "int",
                    "base.ConfiguredOptimizer",
                    "str"
                ],
                "block": [
                    "Optional[bool]",
                    "bool",
                    "int",
                    "Optional[List[Any]]",
                    "Optional[str]"
                ],
                "line": [
                    "bool",
                    "str",
                    "List[str]",
                    "int"
                ],
                "highlighted": [
                    "str",
                    "bool",
                    "float",
                    "int"
                ]
            }
        },
        "AGroupBox.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AGroupBox._configure": {
            "name": "_configure",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "qtile": [
                    "bool",
                    "str",
                    "Dict[str, Any]"
                ],
                "bar": [
                    "bytes",
                    "Callable",
                    "int",
                    "Optional[Mapping[str, Any]]",
                    "BinaryIO"
                ]
            }
        },
        "AGroupBox.calculate_length": {
            "name": "calculate_length",
            "location": 149,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AGroupBox.draw": {
            "name": "draw",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupBox.__init__": {
            "name": "__init__",
            "location": 229,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupBox.groups": {
            "name": "groups",
            "location": 248,
            "return": [
                "int",
                "list",
                "List[Dict]",
                "List[Tuple[int, float]]",
                "List[dict]",
                "List[str]",
                "Iterator[str]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupBox.get_clicked_group": {
            "name": "get_clicked_group",
            "location": 270,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupBox.button_press": {
            "name": "button_press",
            "location": 282,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ],
                "button": [
                    "int"
                ]
            }
        },
        "GroupBox.next_group": {
            "name": "next_group",
            "location": 286,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupBox.prev_group": {
            "name": "prev_group",
            "location": 296,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupBox.select_group": {
            "name": "select_group",
            "location": 306,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupBox.go_to_group": {
            "name": "go_to_group",
            "location": 313,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "group": [
                    "type",
                    "dict",
                    "int"
                ]
            }
        },
        "GroupBox.button_release": {
            "name": "button_release",
            "location": 320,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ],
                "y": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ],
                "button": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "GroupBox.calculate_length": {
            "name": "calculate_length",
            "location": 328,
            "return": [
                "int",
                "List[Tuple[int, float, float]]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupBox.group_has_urgent": {
            "name": "group_has_urgent",
            "location": 334,
            "return": [
                "List[str]",
                "List[Tuple[str, Any]]",
                "int",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": [],
                "group": [
                    "str",
                    "Mapping[str, Sequence[str]]",
                    "shapely.geometry.base.BaseGeometry",
                    "bool"
                ]
            }
        },
        "GroupBox.draw": {
            "name": "draw",
            "location": 337,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "_GroupBase.setup_hooks.hook_response": {
            "name": "hook_response",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "qtile-master/libqtile/widget/idlerpg.py": {
        "IdleRPG.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IdleRPG.parse": {
            "name": "parse",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "body": [
                    "dict",
                    "Dict[str, Any]",
                    "Mapping[str, Dict[str, Any]]",
                    "Dict[str, int]",
                    "Iterable[str]",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "qtile-master/libqtile/widget/image.py": {
        "Image.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "length": [
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "Image._configure": {
            "name": "_configure",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "qtile": [
                    "int",
                    "Callable",
                    "str"
                ],
                "bar": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Image._update_image": {
            "name": "_update_image",
            "location": 52,
            "return": [
                "None",
                "int",
                "Mapping",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Image.draw": {
            "name": "draw",
            "location": 77,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Image.calculate_length": {
            "name": "calculate_length",
            "location": 93,
            "return": [
                "int",
                "str",
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Image.cmd_update": {
            "name": "cmd_update",
            "location": 102,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        }
    },
    "qtile-master/libqtile/widget/imapwidget.py": {
        "ImapWidget.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImapWidget.poll": {
            "name": "poll",
            "location": 84,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/widget/import_error.py": {
        "make_error": {
            "name": "make_error",
            "location": 30,
            "return": [
                "Callable"
            ],
            "arguments": {
                "module_path": [
                    "bool",
                    "str",
                    "Callable",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "class_name": [
                    "bool",
                    "str",
                    "Callable",
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        },
        "ImportErrorWidget.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "class_name": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "Collection[str]"
                ]
            }
        },
        "make_error.import_error_wrapper": {
            "name": "import_error_wrapper",
            "location": 31,
            "return": [
                "ImportErrorWidget",
                "type",
                "dict",
                "int",
                "bool"
            ],
            "arguments": {}
        }
    },
    "qtile-master/libqtile/widget/keyboardkbdd.py": {
        "KeyboardKbdd.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyboardKbdd._check_kbdd": {
            "name": "_check_kbdd",
            "location": 67,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyboardKbdd._signal_received": {
            "name": "_signal_received",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Dict[str, Any]",
                    "Sequence[Any]",
                    "bool"
                ]
            }
        },
        "KeyboardKbdd._layout_changed": {
            "name": "_layout_changed",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "layout_changed": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "KeyboardKbdd._set_colour": {
            "name": "_set_colour",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "List[str]",
                    "utils.types.trees.NodeT",
                    "str",
                    "int"
                ]
            }
        },
        "KeyboardKbdd.poll": {
            "name": "poll",
            "location": 118,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/widget/keyboardlayout.py": {
        "_BaseLayoutBackend.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtile": [
                    "libqtile.core.manager.Qtile"
                ]
            }
        },
        "_BaseLayoutBackend.get_keyboard": {
            "name": "get_keyboard",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_BaseLayoutBackend.set_keyboard": {
            "name": "set_keyboard",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "layout": [
                    "str"
                ],
                "options": [
                    "bool",
                    "Iterable[str]",
                    "dict",
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "_X11LayoutBackend.get_keyboard": {
            "name": "get_keyboard",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_X11LayoutBackend.set_keyboard": {
            "name": "set_keyboard",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "layout": [
                    "str"
                ],
                "options": [
                    "bytes",
                    "str",
                    "Optional[str]",
                    "list",
                    "int",
                    "dict"
                ]
            }
        },
        "_WaylandLayoutBackend.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtile": [
                    "libqtile.core.manager.Qtile"
                ]
            }
        },
        "_WaylandLayoutBackend.get_keyboard": {
            "name": "get_keyboard",
            "location": 104,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_WaylandLayoutBackend.set_keyboard": {
            "name": "set_keyboard",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "layout": [
                    "str"
                ],
                "options": [
                    "str",
                    "list"
                ]
            }
        },
        "KeyboardLayout.__init__": {
            "name": "__init__",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyboardLayout._configure": {
            "name": "_configure",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtile": [
                    "Hashable",
                    "Iterable[str]",
                    "str"
                ],
                "bar": [
                    "str",
                    "int"
                ]
            }
        },
        "KeyboardLayout.next_keyboard": {
            "name": "next_keyboard",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyboardLayout.poll": {
            "name": "poll",
            "location": 192,
            "return": [
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyboardLayout.cmd_next_keyboard": {
            "name": "cmd_next_keyboard",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/widget/khal_calendar.py": {
        "KhalCalendar.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KhalCalendar.poll": {
            "name": "poll",
            "location": 75,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/widget/launchbar.py": {
        "LaunchBar.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_progs": [
                    "None"
                ],
                "width": []
            }
        },
        "LaunchBar._configure": {
            "name": "_configure",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtile": [],
                "pbar": []
            }
        },
        "LaunchBar.setup_images": {
            "name": "setup_images",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LaunchBar._lookup_icon": {
            "name": "_lookup_icon",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "LaunchBar.lookup_icons": {
            "name": "lookup_icons",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LaunchBar.get_icon_in_position": {
            "name": "get_icon_in_position",
            "location": 211,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "LaunchBar.button_press": {
            "name": "button_press",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "button": []
            }
        },
        "LaunchBar.draw": {
            "name": "draw",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LaunchBar.calculate_length": {
            "name": "calculate_length",
            "location": 266,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/widget/load.py": {
        "Load.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Load.set_time": {
            "name": "set_time",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Load.cmd_next_load": {
            "name": "cmd_next_load",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Load.poll": {
            "name": "poll",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/widget/maildir.py": {
        "Maildir.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Maildir.poll": {
            "name": "poll",
            "location": 71,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Maildir._format_one": {
            "name": "_format_one",
            "location": 95,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str"
                ],
                "value": [
                    "int"
                ]
            }
        },
        "Maildir.format_text": {
            "name": "format_text",
            "location": 107,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "Dict[(str, int)]"
                ]
            }
        },
        "Maildir.poll.to_maildir_fmt": {
            "name": "to_maildir_fmt",
            "location": 80,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "paths": [
                    "str"
                ]
            }
        }
    },
    "qtile-master/libqtile/widget/memory.py": {
        "Memory.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Memory.poll": {
            "name": "poll",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/widget/moc.py": {
        "Moc.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Moc.get_info": {
            "name": "get_info",
            "location": 57,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Moc.now_playing": {
            "name": "now_playing",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Moc.play": {
            "name": "play",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Moc.poll": {
            "name": "poll",
            "location": 109,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/widget/mpd2widget.py": {
        "option": {
            "name": "option",
            "location": 34,
            "return": [
                "Callable[([Any, Any, Any], Any)]"
            ],
            "arguments": {
                "char": [
                    "str",
                    "Mapping[str, str]",
                    "dict",
                    "bool"
                ]
            }
        },
        "default_cmd": {
            "name": "default_cmd",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "option._convert": {
            "name": "_convert",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "elements": [
                    "bytes",
                    "int",
                    "float",
                    "str",
                    "dict"
                ],
                "key": [
                    "bytes",
                    "int",
                    "float",
                    "str",
                    "dict"
                ],
                "space": [
                    "bytes",
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "Mpd2.__init__": {
            "name": "__init__",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mpd2.connected": {
            "name": "connected",
            "location": 187,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mpd2.poll": {
            "name": "poll",
            "location": 200,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mpd2.update_status": {
            "name": "update_status",
            "location": 211,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mpd2.button_press": {
            "name": "button_press",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "Tuple[int, int]",
                    "int"
                ],
                "y": [
                    "float",
                    "Tuple[int, int]",
                    "int"
                ],
                "button": [
                    "str",
                    "float"
                ]
            }
        },
        "Mpd2.__try_call": {
            "name": "__try_call",
            "location": 231,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "attr_name": [
                    "str",
                    "int",
                    "Type[T]"
                ],
                "obj": [
                    "None",
                    "str",
                    "dict",
                    "Callable[..., T]"
                ]
            }
        },
        "Mpd2.toggle": {
            "name": "toggle",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mpd2.formatter": {
            "name": "formatter",
            "location": 254,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "Optional[str]",
                    "str",
                    "dict"
                ],
                "current_song": [
                    "str"
                ]
            }
        },
        "Mpd2.prepare_formatting": {
            "name": "prepare_formatting",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[Callable]"
                ]
            }
        },
        "Mpd2.finalize": {
            "name": "finalize",
            "location": 334,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/widget/mpris2widget.py": {
        "Mpris2.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mpris2.player": {
            "name": "player",
            "location": 131,
            "return": [
                "typing.Text",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mpris2.message": {
            "name": "message",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "List['cirq.Qid']",
                    "list",
                    "str"
                ]
            }
        },
        "Mpris2.parse_message": {
            "name": "parse_message",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_interface_name": [
                    "str"
                ],
                "changed_properties": [
                    "Dict[(str, Any)]"
                ],
                "_invalidated_properties": [
                    "List[str]"
                ]
            }
        },
        "Mpris2.get_track_info": {
            "name": "get_track_info",
            "location": 221,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "metadata": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "Mpris2.cmd_info": {
            "name": "cmd_info",
            "location": 236,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mpris2._player_cmd": {
            "name": "_player_cmd",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cmd": [
                    "str"
                ]
            }
        },
        "Mpris2._task_callback": {
            "name": "_task_callback",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "asyncio.tasks.Task"
                ]
            }
        },
        "Mpris2.cmd_play_pause": {
            "name": "cmd_play_pause",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mpris2.cmd_next": {
            "name": "cmd_next",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mpris2.cmd_previous": {
            "name": "cmd_previous",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mpris2.cmd_stop": {
            "name": "cmd_stop",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/widget/net.py": {
        "Net.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Net.convert_b": {
            "name": "convert_b",
            "location": 85,
            "return": [
                "Tuple[(float, str)]"
            ],
            "arguments": {
                "self": [],
                "num_bytes": [
                    "float"
                ]
            }
        },
        "Net.get_stats": {
            "name": "get_stats",
            "location": 104,
            "return": [
                "Dict[(str, Dict[(str, int)])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Net._format": {
            "name": "_format",
            "location": 126,
            "return": [
                "Tuple[(str, str, str)]"
            ],
            "arguments": {
                "self": [],
                "down": [
                    "int",
                    "str",
                    "bool"
                ],
                "down_letter": [
                    "List[int]",
                    "list",
                    "bool",
                    "List[float]",
                    "str",
                    "int"
                ],
                "up": [
                    "int",
                    "str",
                    "bool"
                ],
                "up_letter": [
                    "List[int]",
                    "list",
                    "bool",
                    "List[float]",
                    "str",
                    "int"
                ],
                "total": [
                    "int"
                ],
                "total_letter": [
                    "List[int]",
                    "List[str]",
                    "list",
                    "int",
                    "Sequence[T]"
                ]
            }
        },
        "Net.poll": {
            "name": "poll",
            "location": 135,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/widget/notify.py": {
        "Notify.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "width": [
                    "bool",
                    "int",
                    "Tuple[float]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Notify._configure": {
            "name": "_configure",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtile": [
                    "str",
                    "bytes",
                    "os.PathLike"
                ],
                "bar": [
                    "str",
                    "bytes",
                    "os.PathLike"
                ]
            }
        },
        "Notify.set_notif_text": {
            "name": "set_notif_text",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "notif": [
                    "str"
                ]
            }
        },
        "Notify.update": {
            "name": "update",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "notif": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "Notify.real_update": {
            "name": "real_update",
            "location": 122,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "notif": [
                    "Optional[Callable]"
                ]
            }
        },
        "Notify.display": {
            "name": "display",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Notify.clear": {
            "name": "clear",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "str"
                ]
            }
        },
        "Notify.on_close": {
            "name": "on_close",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nid": [
                    "str",
                    "Optional[float]",
                    "bool",
                    "int",
                    "Optional[\"Outcome\"]"
                ]
            }
        },
        "Notify.prev": {
            "name": "prev",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Notify.next": {
            "name": "next",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Notify.invoke": {
            "name": "invoke",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Notify.cmd_display": {
            "name": "cmd_display",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Notify.cmd_clear": {
            "name": "cmd_clear",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Notify.cmd_toggle": {
            "name": "cmd_toggle",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Notify.cmd_prev": {
            "name": "cmd_prev",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Notify.cmd_next": {
            "name": "cmd_next",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Notify.cmd_invoke": {
            "name": "cmd_invoke",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Notify.finalize": {
            "name": "finalize",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/widget/nvidia_sensors.py": {
        "_all_sensors_names_correct": {
            "name": "_all_sensors_names_correct",
            "location": 13,
            "return": [
                "bool"
            ],
            "arguments": {
                "sensors": []
            }
        },
        "NvidiaSensors.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NvidiaSensors._get_sensors_data": {
            "name": "_get_sensors_data",
            "location": 48,
            "return": [
                "_csv._reader"
            ],
            "arguments": {
                "self": [],
                "command": []
            }
        },
        "NvidiaSensors._parse_format_string": {
            "name": "_parse_format_string",
            "location": 53,
            "return": [
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "NvidiaSensors.poll": {
            "name": "poll",
            "location": 56,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/widget/open_weather.py": {
        "flatten_json": {
            "name": "flatten_json",
            "location": 40,
            "return": [
                "Dict[(str, _T0)]"
            ],
            "arguments": {
                "obj": [
                    "_T0"
                ]
            }
        },
        "degrees_to_direction": {
            "name": "degrees_to_direction",
            "location": 57,
            "return": [
                "str"
            ],
            "arguments": {
                "degrees": []
            }
        },
        "OpenWeatherResponseError.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resp_code": [],
                "err_str": [
                    "None"
                ]
            }
        },
        "flatten_json.__inner": {
            "name": "__inner",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "_json": [],
                "name": [
                    "typing.Text"
                ]
            }
        },
        "_OpenWeatherResponseParser.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": [],
                "dateformat": [],
                "timeformat": []
            }
        },
        "_OpenWeatherResponseParser._parse": {
            "name": "_parse",
            "location": 89,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "_OpenWeatherResponseParser._remap": {
            "name": "_remap",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "_OpenWeatherResponseParser._get_wind_direction": {
            "name": "_get_wind_direction",
            "location": 108,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_OpenWeatherResponseParser._get_sunrise_time": {
            "name": "_get_sunrise_time",
            "location": 114,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_OpenWeatherResponseParser._get_sunset_time": {
            "name": "_get_sunset_time",
            "location": 120,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_OpenWeatherResponseParser._get_dt": {
            "name": "_get_dt",
            "location": 126,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpenWeather.__init__": {
            "name": "__init__",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpenWeather.url": {
            "name": "url",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpenWeather.parse": {
            "name": "parse",
            "location": 289,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        }
    },
    "qtile-master/libqtile/widget/pomodoro.py": {
        "Pomodoro.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pomodoro.tick": {
            "name": "tick",
            "location": 84,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pomodoro._update": {
            "name": "_update",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pomodoro._get_text": {
            "name": "_get_text",
            "location": 128,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pomodoro._toggle_break": {
            "name": "_toggle_break",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pomodoro._toggle_active": {
            "name": "_toggle_active",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pomodoro._send_notification": {
            "name": "_send_notification",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "urgent": [
                    "dict",
                    "str",
                    "bytes",
                    "Callable[[bytes], bytes]"
                ],
                "message": [
                    "dict",
                    "str",
                    "bytes",
                    "Callable[[bytes], bytes]"
                ]
            }
        },
        "Pomodoro.poll": {
            "name": "poll",
            "location": 187,
            "return": [
                "str",
                "float",
                "type"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/widget/prompt.py": {
        "AbstractCompleter.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtile": [
                    "libqtile.command.base.CommandObject"
                ]
            }
        },
        "AbstractCompleter.actual": {
            "name": "actual",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractCompleter.reset": {
            "name": "reset",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractCompleter.complete": {
            "name": "complete",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "txt": [
                    "str"
                ]
            }
        },
        "NullCompleter.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtile": []
            }
        },
        "NullCompleter.actual": {
            "name": "actual",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NullCompleter.reset": {
            "name": "reset",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NullCompleter.complete": {
            "name": "complete",
            "location": 80,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "txt": [
                    "str"
                ]
            }
        },
        "FileCompleter.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtile": [],
                "_testing": [
                    "bool"
                ]
            }
        },
        "FileCompleter.actual": {
            "name": "actual",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileCompleter.reset": {
            "name": "reset",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileCompleter.complete": {
            "name": "complete",
            "location": 98,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "txt": [
                    "str"
                ]
            }
        },
        "QshCompleter.__init__": {
            "name": "__init__",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtile": [
                    "libqtile.command.base.CommandObject"
                ]
            }
        },
        "QshCompleter.actual": {
            "name": "actual",
            "location": 135,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QshCompleter.reset": {
            "name": "reset",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QshCompleter.complete": {
            "name": "complete",
            "location": 143,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "txt": [
                    "str"
                ]
            }
        },
        "GroupCompleter.__init__": {
            "name": "__init__",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtile": [
                    "libqtile.command.base.CommandObject"
                ]
            }
        },
        "GroupCompleter.actual": {
            "name": "actual",
            "location": 189,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupCompleter.reset": {
            "name": "reset",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupCompleter.complete": {
            "name": "complete",
            "location": 197,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "txt": [
                    "str"
                ]
            }
        },
        "WindowCompleter.__init__": {
            "name": "__init__",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtile": [
                    "libqtile.command.base.CommandObject"
                ]
            }
        },
        "WindowCompleter.actual": {
            "name": "actual",
            "location": 225,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WindowCompleter.reset": {
            "name": "reset",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowCompleter.complete": {
            "name": "complete",
            "location": 233,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "txt": [
                    "str"
                ]
            }
        },
        "CommandCompleter.__init__": {
            "name": "__init__",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtile": [],
                "_testing": [
                    "bool"
                ]
            }
        },
        "CommandCompleter.actual": {
            "name": "actual",
            "location": 269,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CommandCompleter.executable": {
            "name": "executable",
            "location": 273,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "fpath": [
                    "str"
                ]
            }
        },
        "CommandCompleter.reset": {
            "name": "reset",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandCompleter.complete": {
            "name": "complete",
            "location": 280,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "txt": [
                    "str"
                ]
            }
        },
        "Prompt.__init__": {
            "name": "__init__",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Prompt._configure": {
            "name": "_configure",
            "location": 392,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtile": [],
                "bar": []
            }
        },
        "Prompt.start_input": {
            "name": "start_input",
            "location": 432,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prompt": [],
                "callback": [],
                "complete": [
                    "None"
                ],
                "strict_completer": [
                    "bool"
                ],
                "allow_empty_input": [
                    "bool"
                ]
            }
        },
        "Prompt.calculate_length": {
            "name": "calculate_length",
            "location": 481,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Prompt._blink": {
            "name": "_blink",
            "location": 488,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Prompt._highlight_text": {
            "name": "_highlight_text",
            "location": 494,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "Prompt._update": {
            "name": "_update",
            "location": 501,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Prompt._trigger_complete": {
            "name": "_trigger_complete",
            "location": 521,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Prompt._history_to_input": {
            "name": "_history_to_input",
            "location": 527,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Prompt._insert_before_cursor": {
            "name": "_insert_before_cursor",
            "location": 535,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "charcode": []
            }
        },
        "Prompt._delete_char": {
            "name": "_delete_char",
            "location": 542,
            "return": [
                "Callable[([], Any)]"
            ],
            "arguments": {
                "self": [],
                "backspace": [
                    "bool"
                ]
            }
        },
        "Prompt._write_char": {
            "name": "_write_char",
            "location": 561,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Prompt._unfocus": {
            "name": "_unfocus",
            "location": 567,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Prompt._send_cmd": {
            "name": "_send_cmd",
            "location": 573,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Prompt._alert": {
            "name": "_alert",
            "location": 597,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Prompt._stop_visual_alert": {
            "name": "_stop_visual_alert",
            "location": 605,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Prompt._get_prev_cmd": {
            "name": "_get_prev_cmd",
            "location": 609,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Prompt._get_next_cmd": {
            "name": "_get_next_cmd",
            "location": 620,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Prompt._cursor_to_left": {
            "name": "_cursor_to_left",
            "location": 634,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Prompt._cursor_to_right": {
            "name": "_cursor_to_right",
            "location": 641,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Prompt._move_cursor": {
            "name": "_move_cursor",
            "location": 649,
            "return": [],
            "arguments": {
                "self": [],
                "direction": [
                    "typing.Text"
                ]
            }
        },
        "Prompt._get_keyhandler": {
            "name": "_get_keyhandler",
            "location": 656,
            "return": [],
            "arguments": {
                "self": [],
                "k": []
            }
        },
        "Prompt.process_key_press": {
            "name": "process_key_press",
            "location": 665,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keysym": [
                    "int"
                ]
            }
        },
        "Prompt.cmd_fake_keypress": {
            "name": "cmd_fake_keypress",
            "location": 677,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "Prompt.cmd_info": {
            "name": "cmd_info",
            "location": 680,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Prompt.cmd_exec_general": {
            "name": "cmd_exec_general",
            "location": 689,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prompt": [],
                "object_name": [],
                "cmd_name": [],
                "selector": [
                    "None"
                ],
                "completer": [
                    "None"
                ]
            }
        },
        "Prompt._dedup_history": {
            "name": "_dedup_history",
            "location": 734,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Prompt._dedup_deque": {
            "name": "_dedup_deque",
            "location": 738,
            "return": [
                "collections.deque"
            ],
            "arguments": {
                "self": [],
                "dq": []
            }
        },
        "_LastUpdatedOrdereddict.__setitem__": {
            "name": "__setitem__",
            "location": 745,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "Prompt._configure.f": {
            "name": "f",
            "location": 396,
            "return": [
                "None"
            ],
            "arguments": {
                "win": []
            }
        },
        "Prompt._delete_char.f": {
            "name": "f",
            "location": 545,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Prompt.cmd_exec_general.f": {
            "name": "f",
            "location": 728,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "qtile-master/libqtile/widget/pulseaudio_ffi.py": {},
    "qtile-master/libqtile/widget/pulse_volume.py": {
        "qtile_pa_context_changed": {
            "name": "qtile_pa_context_changed",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "context": [
                    "str",
                    "bool"
                ],
                "userdata": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "qtile_on_sink_info": {
            "name": "qtile_on_sink_info",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "context": [
                    "str",
                    "Dict[str, Any]"
                ],
                "info": [],
                "eol": [],
                "userdata": [
                    "str"
                ]
            }
        },
        "qtile_on_server_info": {
            "name": "qtile_on_server_info",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "context": [
                    "str",
                    "Dict[str, Any]"
                ],
                "info": [
                    "dict",
                    "Dict[str, Tuple[Any, Any, Any]]",
                    "bytes"
                ],
                "userdata": [
                    "str"
                ]
            }
        },
        "qtile_on_sink_update": {
            "name": "qtile_on_sink_update",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "context": [
                    "str",
                    "Optional[List[Any]]",
                    "Optional[List[str]]",
                    "int",
                    "List[Dict[str, Any]]",
                    "bool"
                ],
                "event_type": [
                    "Callable",
                    "str",
                    "Dict[str, Any]",
                    "Optional[Iterable[str]]"
                ],
                "sink_index": [
                    "Callable",
                    "str",
                    "Dict[str, Any]",
                    "Optional[Iterable[str]]"
                ],
                "userdata": [
                    "List[str]",
                    "Tuple[int, int]",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "PulseVolume.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PulseVolume.finalize": {
            "name": "finalize",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PulseVolume.connect": {
            "name": "connect",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PulseVolume.on_connection_change": {
            "name": "on_connection_change",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict",
                    "Optional[float]",
                    "bool",
                    "Optional[int]",
                    "float"
                ]
            }
        },
        "PulseVolume.get_server_info": {
            "name": "get_server_info",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PulseVolume.on_server_info": {
            "name": "on_server_info",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "info": [
                    "dict",
                    "Mapping[str, Any]",
                    "Mapping[str, str]",
                    "bool",
                    "str"
                ]
            }
        },
        "PulseVolume.get_sinks": {
            "name": "get_sinks",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PulseVolume.on_sink_info": {
            "name": "on_sink_info",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sink": [
                    "str",
                    "Optional[str]",
                    "dict",
                    "Dict[str, Any]"
                ],
                "eol": [
                    "int"
                ]
            }
        },
        "PulseVolume.subscribe_to_sink_events": {
            "name": "subscribe_to_sink_events",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PulseVolume.on_sink_update": {
            "name": "on_sink_update",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event_type": [
                    "str",
                    "int",
                    "Dict[str, Any]"
                ],
                "sink_index": [
                    "str",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "PulseVolume.wait_for_operation": {
            "name": "wait_for_operation",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "op": [
                    "bool",
                    "Callable",
                    "Dict[str, Any]"
                ]
            }
        },
        "PulseVolume.change_volume": {
            "name": "change_volume",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "volume": [
                    "dict"
                ]
            }
        },
        "PulseVolume.cmd_mute": {
            "name": "cmd_mute",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PulseVolume.cmd_increase_vol": {
            "name": "cmd_increase_vol",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "None",
                    "int",
                    "List[str]"
                ]
            }
        },
        "PulseVolume.cmd_decrease_vol": {
            "name": "cmd_decrease_vol",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "None",
                    "str",
                    "Optional[int]",
                    "Optional[str]",
                    "T",
                    "Callable"
                ]
            }
        },
        "PulseVolume.button_press": {
            "name": "button_press",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ],
                "button": [
                    "int",
                    "float"
                ]
            }
        },
        "PulseVolume.poll": {
            "name": "poll",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PulseVolume.update": {
            "name": "update",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PulseVolume.get_volume": {
            "name": "get_volume",
            "location": 231,
            "return": [
                "int",
                "bool",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "PulseVolume.timer_setup": {
            "name": "timer_setup",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/widget/quick_exit.py": {
        "QuickExit.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuickExit.__reset": {
            "name": "__reset",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuickExit.update": {
            "name": "update",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuickExit.cmd_trigger": {
            "name": "cmd_trigger",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/widget/sensors.py": {
        "ThermalSensor.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThermalSensor._configure": {
            "name": "_configure",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtile": [],
                "bar": []
            }
        },
        "ThermalSensor.get_temp_sensors": {
            "name": "get_temp_sensors",
            "location": 85,
            "return": [
                "Dict[(str, float)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThermalSensor.poll": {
            "name": "poll",
            "location": 106,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/widget/sep.py": {
        "Sep.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sep.draw": {
            "name": "draw",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/widget/she.py": {
        "She.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "She.poll": {
            "name": "poll",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/widget/spacer.py": {
        "Spacer.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "length": [
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "Spacer.draw": {
            "name": "draw",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/widget/statusnotifier.py": {
        "StatusNotifierItem.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "bus": [
                    "bool",
                    "Sequence[str]",
                    "str"
                ],
                "service": [
                    "bool",
                    "Sequence[str]",
                    "str"
                ],
                "path": [
                    "str",
                    "None"
                ],
                "icon_theme": [
                    "None",
                    "bool",
                    "Sequence[str]",
                    "str"
                ]
            }
        },
        "StatusNotifierItem.__eq__": {
            "name": "__eq__",
            "location": 86,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "float",
                    "Optional[float]"
                ]
            }
        },
        "StatusNotifierItem._new_icon": {
            "name": "_new_icon",
            "location": 174,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatusNotifierItem._new_attention_icon": {
            "name": "_new_attention_icon",
            "location": 178,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatusNotifierItem._new_overlay_icon": {
            "name": "_new_overlay_icon",
            "location": 182,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatusNotifierItem._get_custom_icon": {
            "name": "_get_custom_icon",
            "location": 186,
            "return": [
                "None",
                "str",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": [],
                "icon_name": [
                    "str"
                ],
                "icon_path": [
                    "str"
                ]
            }
        },
        "StatusNotifierItem._get_xdg_icon": {
            "name": "_get_xdg_icon",
            "location": 194,
            "return": [
                "None",
                "str",
                "Optional[qutebrowser.utils.urlmatch.UrlPattern]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "icon_name": [
                    "str"
                ]
            }
        },
        "StatusNotifierItem._reorder_bytes": {
            "name": "_reorder_bytes",
            "location": 226,
            "return": [
                "bytearray",
                "int",
                "Iterable[Any]",
                "Dict[str, bool]"
            ],
            "arguments": {
                "self": [],
                "icon_bytes": [
                    "int",
                    "str"
                ]
            }
        },
        "StatusNotifierItem._redraw": {
            "name": "_redraw",
            "location": 237,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "bool",
                    "Exception"
                ]
            }
        },
        "StatusNotifierItem._invalidate_icons": {
            "name": "_invalidate_icons",
            "location": 243,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatusNotifierItem._get_sizes": {
            "name": "_get_sizes",
            "location": 246,
            "return": [
                "list",
                "str",
                "List[str]",
                "int",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatusNotifierItem._get_surfaces": {
            "name": "_get_surfaces",
            "location": 253,
            "return": [
                "dict",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "StatusNotifierItem.get_icon": {
            "name": "get_icon",
            "location": 267,
            "return": [
                "Callable[[T], List[T]]",
                "str",
                "Set[str]",
                "raiden.utils.Secret",
                "int"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "List[str]",
                    "bool",
                    "str",
                    "List[float]",
                    "float"
                ]
            }
        },
        "StatusNotifierItem.activate": {
            "name": "activate",
            "location": 328,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatusNotifierItem.has_icons": {
            "name": "has_icons",
            "location": 336,
            "return": [
                "bool",
                "list",
                "List[str]",
                "List[Dict[str, Any]]",
                "frozenset",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatusNotifierWatcher.__init__": {
            "name": "__init__",
            "location": 347,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "Optional[Iterable[float]]",
                    "Dict[str, Any]",
                    "float",
                    "Dict[str, str]"
                ]
            }
        },
        "StatusNotifierWatcher._message_handler": {
            "name": "_message_handler",
            "location": 369,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "StatusNotifierWatcher._name_owner_changed": {
            "name": "_name_owner_changed",
            "location": 407,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "int"
                ]
            }
        },
        "StatusNotifierWatcher.RegisterStatusNotifierItem": {
            "name": "RegisterStatusNotifierItem",
            "location": 424,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "List[List[str]]",
                    "bool",
                    "raiden.utils.Dict[str, raiden.utils.Any]"
                ]
            }
        },
        "StatusNotifierWatcher.RegisterStatusNotifierHost": {
            "name": "RegisterStatusNotifierHost",
            "location": 432,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "str",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "StatusNotifierWatcher.RegisteredStatusNotifierItems": {
            "name": "RegisteredStatusNotifierItems",
            "location": 438,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "base.ConfigOptions",
                "Iterable[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatusNotifierWatcher.IsStatusNotifierHostRegistered": {
            "name": "IsStatusNotifierHostRegistered",
            "location": 442,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatusNotifierWatcher.ProtocolVersion": {
            "name": "ProtocolVersion",
            "location": 448,
            "return": [
                "int",
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatusNotifierWatcher.StatusNotifierItemRegistered": {
            "name": "StatusNotifierItemRegistered",
            "location": 452,
            "return": [
                "int",
                "List[str]",
                "tuple",
                "str"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "int",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "StatusNotifierWatcher.StatusNotifierItemUnregistered": {
            "name": "StatusNotifierItemUnregistered",
            "location": 456,
            "return": [
                "int",
                "List[str]",
                "tuple",
                "str"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "int",
                    "List[str]",
                    "tuple",
                    "str"
                ]
            }
        },
        "StatusNotifierWatcher.StatusNotifierHostRegistered": {
            "name": "StatusNotifierHostRegistered",
            "location": 462,
            "return": [
                "int",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "int",
                    "bytes",
                    "Optional[str]"
                ]
            }
        },
        "StatusNotifierWatcher.StatusNotifierHostUnregistered": {
            "name": "StatusNotifierHostUnregistered",
            "location": 468,
            "return": [
                "int",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "int",
                    "bytes",
                    "Optional[str]"
                ]
            }
        },
        "StatusNotifierHost.__init__": {
            "name": "__init__",
            "location": 482,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatusNotifierHost.item_added": {
            "name": "item_added",
            "location": 509,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "Dict[str, str]"
                ],
                "service": [
                    "float",
                    "Type[object]",
                    "int",
                    "list",
                    "Dict[str, Any]"
                ],
                "future": [
                    "int",
                    "tuple",
                    "List[int]",
                    "Type[django.db.models.base.Model]"
                ]
            }
        },
        "StatusNotifierHost.add_item": {
            "name": "add_item",
            "location": 526,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "str"
                ],
                "path": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "StatusNotifierHost.remove_item": {
            "name": "remove_item",
            "location": 537,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "interface": [
                    "dict",
                    "Iterable[T]",
                    "Optional[Dict[str, str]]",
                    "Set[str]",
                    "Type"
                ]
            }
        },
        "StatusNotifier.__init__": {
            "name": "__init__",
            "location": 580,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatusNotifier.available_icons": {
            "name": "available_icons",
            "location": 591,
            "return": [
                "list",
                "List[str]",
                "Optional[dict]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatusNotifier.calculate_length": {
            "name": "calculate_length",
            "location": 594,
            "return": [
                "int",
                "Callable",
                "str",
                "Tuple[Any, Any, Any]",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatusNotifier._configure": {
            "name": "_configure",
            "location": 600,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "qtile": [
                    "int",
                    "Callable",
                    "str"
                ],
                "bar": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "StatusNotifier.find_icon_at_pos": {
            "name": "find_icon_at_pos",
            "location": 613,
            "return": [
                "None",
                "Optional[str]",
                "bool",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "StatusNotifier.button_press": {
            "name": "button_press",
            "location": 629,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "List[int]"
                ],
                "y": [
                    "int",
                    "List[int]"
                ],
                "button": [
                    "Dict[str, Optional[str]]",
                    "int",
                    "str",
                    "bool",
                    "Callable",
                    "float"
                ]
            }
        },
        "StatusNotifier.draw": {
            "name": "draw",
            "location": 637,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatusNotifier.activate": {
            "name": "activate",
            "location": 666,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatusNotifier._config_async.draw": {
            "name": "draw",
            "location": 608,
            "return": [
                "None"
            ],
            "arguments": {
                "x": [
                    "None"
                ]
            }
        }
    },
    "qtile-master/libqtile/widget/stock_ticker.py": {
        "StockTicker.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StockTicker.url": {
            "name": "url",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StockTicker.parse": {
            "name": "parse",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "body": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, Any]]",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "qtile-master/libqtile/widget/systray.py": {
        "Icon.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "win": [],
                "qtile": [],
                "systray": []
            }
        },
        "Icon.__eq__": {
            "name": "__eq__",
            "location": 56,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Icon.update_size": {
            "name": "update_size",
            "location": 62,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Icon.handle_PropertyNotify": {
            "name": "handle_PropertyNotify",
            "location": 80,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "e": []
            }
        },
        "Icon.handle_DestroyNotify": {
            "name": "handle_DestroyNotify",
            "location": 89,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "Systray.__init__": {
            "name": "__init__",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Systray.calculate_length": {
            "name": "calculate_length",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Systray._configure": {
            "name": "_configure",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtile": [],
                "bar": []
            }
        },
        "Systray.create_mirror": {
            "name": "create_mirror",
            "location": 201,
            "return": [
                "Systray"
            ],
            "arguments": {
                "self": []
            }
        },
        "Systray.handle_ClientMessage": {
            "name": "handle_ClientMessage",
            "location": 210,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "Systray.draw": {
            "name": "draw",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Systray.finalize": {
            "name": "finalize",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Systray.info": {
            "name": "info",
            "location": 296,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/widget/tasklist.py": {
        "TaskList.__init__": {
            "name": "__init__",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskList.box_width": {
            "name": "box_width",
            "location": 160,
            "return": [
                "int",
                "List[int]",
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "int"
                ]
            }
        },
        "TaskList.get_taskname": {
            "name": "get_taskname",
            "location": 171,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "window": [
                    "Optional[str]",
                    "Optional[int]",
                    "Union[str, None]",
                    "Dict[Any, bool]",
                    "Optional[Dict]",
                    "Optional[bool]"
                ]
            }
        },
        "TaskList.windows": {
            "name": "windows",
            "location": 227,
            "return": [
                "bytes",
                "Iterable[int]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskList.calc_box_widths": {
            "name": "calc_box_widths",
            "location": 230,
            "return": [
                "Union[(List[nothing], Iterator[tuple])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskList._configure": {
            "name": "_configure",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtile": [
                    "str",
                    "bytes",
                    "cmk.base.api.agent_based.type_defs.InventoryPlugin"
                ],
                "bar": [
                    "float",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "TaskList.update": {
            "name": "update",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "window": [
                    "None",
                    "bool",
                    "dict",
                    "str"
                ]
            }
        },
        "TaskList.remove_icon_cache": {
            "name": "remove_icon_cache",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "window": [
                    "bool",
                    "dict",
                    "str",
                    "Optional[Dict]"
                ]
            }
        },
        "TaskList.invalidate_cache": {
            "name": "invalidate_cache",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "window": [
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, bool]",
                    "Dict[str, Dict]"
                ]
            }
        },
        "TaskList.setup_hooks": {
            "name": "setup_hooks",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskList.drawtext": {
            "name": "drawtext",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Dict[str, List[bytes]]"
                ],
                "textcolor": [
                    "str",
                    "int",
                    "Sequence[Dict[str, str]]",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, 'LabwareDefinition']",
                    "Optional[str]"
                ],
                "width": [
                    "Optional[int]",
                    "Optional[str]",
                    "str",
                    "T",
                    "Optional[float]"
                ]
            }
        },
        "TaskList.drawbox": {
            "name": "drawbox",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "Tuple[float, float, float, float]",
                    "int"
                ],
                "text": [
                    "str",
                    "Optional[str]",
                    "Optional[bool]",
                    "Exception",
                    "Dict[str, Any]"
                ],
                "bordercolor": [
                    "int",
                    "Optional[str]",
                    "Optional[Tuple[float, float]]",
                    "Optional[int]"
                ],
                "textcolor": [
                    "str",
                    "Optional[str]",
                    "Optional[bool]",
                    "Exception",
                    "Dict[str, Any]"
                ],
                "width": [
                    "None",
                    "str",
                    "Optional[str]",
                    "Optional[bool]",
                    "Exception",
                    "Dict[str, Any]"
                ],
                "rounded": [
                    "bool",
                    "Tuple[float, float, float, float]",
                    "int"
                ],
                "block": [
                    "bool",
                    "Optional[bool]",
                    "int",
                    "Optional[List[Any]]",
                    "Optional[str]",
                    "str"
                ],
                "icon": [
                    "int",
                    "None"
                ]
            }
        },
        "TaskList.get_clicked": {
            "name": "get_clicked",
            "location": 376,
            "return": [
                "None",
                "str",
                "Dict[str, Dict[str, Any]]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "list",
                    "int",
                    "Union[int, str]"
                ],
                "y": [
                    "float"
                ]
            }
        },
        "TaskList.button_press": {
            "name": "button_press",
            "location": 386,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "button": [
                    "float",
                    "int"
                ]
            }
        },
        "TaskList.select_window": {
            "name": "select_window",
            "location": 390,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskList.get_window_icon": {
            "name": "get_window_icon",
            "location": 401,
            "return": [
                "None",
                "Optional[int]",
                "Optional[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "window": [
                    "dict",
                    "Dict[Hashable, Dict[Hashable, Any]]",
                    "Dict[str, Any]",
                    "Dict[bool, Any]",
                    "List[Dict[Any, str]]"
                ]
            }
        },
        "TaskList.draw_icon": {
            "name": "draw_icon",
            "location": 433,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "surface": [
                    "str",
                    "Mapping",
                    "int",
                    "Dict[str, Any]"
                ],
                "offset": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TaskList.draw": {
            "name": "draw",
            "location": 446,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/widget/textbox.py": {
        "TextBox.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "typing.Text",
                    "str",
                    "int",
                    "Union[str, object]",
                    "Optional[int]"
                ],
                "width": [
                    "str",
                    "int",
                    "Union[str, object]",
                    "Optional[int]"
                ]
            }
        },
        "TextBox.cmd_update": {
            "name": "cmd_update",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "int",
                    "Tuple[int, int]"
                ]
            }
        },
        "TextBox.cmd_get": {
            "name": "cmd_get",
            "location": 50,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/widget/thermal_zone.py": {
        "ThermalZone.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThermalZone.poll": {
            "name": "poll",
            "location": 31,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/widget/volume.py": {
        "Volume.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Volume._configure": {
            "name": "_configure",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtile": [
                    "str",
                    "Callable",
                    "Optional[str]"
                ],
                "parent_bar": [
                    "str",
                    "Callable",
                    "Optional[str]"
                ]
            }
        },
        "Volume.timer_setup": {
            "name": "timer_setup",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Volume.create_amixer_command": {
            "name": "create_amixer_command",
            "location": 109,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Volume.button_press": {
            "name": "button_press",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ],
                "button": [
                    "int"
                ]
            }
        },
        "Volume.update": {
            "name": "update",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Volume._update_drawer": {
            "name": "_update_drawer",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Volume.setup_images": {
            "name": "setup_images",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Volume.get_volume": {
            "name": "get_volume",
            "location": 181,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Volume.draw": {
            "name": "draw",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Volume.cmd_increase_vol": {
            "name": "cmd_increase_vol",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Volume.cmd_decrease_vol": {
            "name": "cmd_decrease_vol",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Volume.cmd_mute": {
            "name": "cmd_mute",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Volume.cmd_run_app": {
            "name": "cmd_run_app",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/widget/wallpaper.py": {
        "Wallpaper.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Wallpaper._configure": {
            "name": "_configure",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtile": [
                    "str",
                    "bytes",
                    "os.PathLike"
                ],
                "bar": [
                    "str",
                    "bytes",
                    "os.PathLike"
                ]
            }
        },
        "Wallpaper.get_path": {
            "name": "get_path",
            "location": 71,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str"
                ]
            }
        },
        "Wallpaper.get_wallpapers": {
            "name": "get_wallpapers",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Wallpaper.set_wallpaper": {
            "name": "set_wallpaper",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/widget/widgetbox.py": {
        "WidgetBox.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_widgets": [
                    "None"
                ]
            }
        },
        "WidgetBox._configure": {
            "name": "_configure",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtile": [],
                "bar": []
            }
        },
        "WidgetBox.calculate_length": {
            "name": "calculate_length",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WidgetBox.set_box_label": {
            "name": "set_box_label",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WidgetBox.toggle_widgets": {
            "name": "toggle_widgets",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WidgetBox.draw": {
            "name": "draw",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WidgetBox.cmd_toggle": {
            "name": "cmd_toggle",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/widget/windowname.py": {
        "WindowName.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "width": [
                    "bool",
                    "dict"
                ]
            }
        },
        "WindowName._configure": {
            "name": "_configure",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtile": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "bar": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "WindowName.hook_response": {
            "name": "hook_response",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowName._configure.on_screen_changed": {
            "name": "on_screen_changed",
            "location": 68,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "qtile-master/libqtile/widget/windowtabs.py": {
        "WindowTabs.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowTabs._configure": {
            "name": "_configure",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtile": [
                    "str",
                    "bytes"
                ],
                "bar": [
                    "str",
                    "dict"
                ]
            }
        },
        "WindowTabs.update": {
            "name": "update",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/widget/window_count.py": {
        "WindowCount.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "width": [
                    "bool",
                    "dict"
                ]
            }
        },
        "WindowCount._configure": {
            "name": "_configure",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtile": [
                    "str",
                    "bytes"
                ],
                "bar": [
                    "str",
                    "bytes"
                ]
            }
        },
        "WindowCount._setup_hooks": {
            "name": "_setup_hooks",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowCount._wincount": {
            "name": "_wincount",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowCount._win_killed": {
            "name": "_win_killed",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "window": [
                    "Match",
                    "Dict[str, Iterable[Any]]",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "WindowCount.calculate_length": {
            "name": "calculate_length",
            "location": 79,
            "return": [
                "int",
                "Optional[int]",
                "List[int]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowCount.cmd_get": {
            "name": "cmd_get",
            "location": 85,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/widget/wlan.py": {
        "get_status": {
            "name": "get_status",
            "location": 35,
            "return": [
                "Tuple[(Optional[str], Any)]"
            ],
            "arguments": {
                "interface_name": []
            }
        },
        "Wlan.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Wlan.poll": {
            "name": "poll",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/libqtile/widget/wttr.py": {
        "Wttr.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Wttr._get_url": {
            "name": "_get_url",
            "location": 88,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Wttr.parse": {
            "name": "parse",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "response": []
            }
        }
    },
    "qtile-master/libqtile/widget/__init__.py": {},
    "qtile-master/stubs/cffi.py": {
        "FFI.cdef": {
            "name": "cdef",
            "location": 6,
            "return": [],
            "arguments": {
                "self": [],
                "csource": [],
                "override": [],
                "packed": []
            }
        },
        "FFI.compile": {
            "name": "compile",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "tmpdir": [],
                "verbose": [],
                "target": [],
                "debug": []
            }
        },
        "FFI.include": {
            "name": "include",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "ffi_to_include": []
            }
        },
        "FFI.set_source": {
            "name": "set_source",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "module_name": [],
                "source": [],
                "source_extension": []
            }
        }
    },
    "qtile-master/stubs/iwlib.py": {
        "get_iwconfig": {
            "name": "get_iwconfig",
            "location": 1,
            "return": [],
            "arguments": {
                "interface": []
            }
        }
    },
    "qtile-master/stubs/keyring.py": {},
    "qtile-master/stubs/mailbox.py": {},
    "qtile-master/stubs/mpd.py": {},
    "qtile-master/stubs/psutil.py": {
        "pids": {
            "name": "pids",
            "location": 77,
            "return": [],
            "arguments": {}
        },
        "pid_exists": {
            "name": "pid_exists",
            "location": 78,
            "return": [],
            "arguments": {
                "pid": []
            }
        },
        "process_iter": {
            "name": "process_iter",
            "location": 79,
            "return": [],
            "arguments": {
                "attrs": [],
                "ad_value": []
            }
        },
        "wait_procs": {
            "name": "wait_procs",
            "location": 80,
            "return": [],
            "arguments": {
                "procs": [],
                "timeout": [],
                "callback": []
            }
        },
        "cpu_count": {
            "name": "cpu_count",
            "location": 81,
            "return": [],
            "arguments": {
                "logical": []
            }
        },
        "cpu_times": {
            "name": "cpu_times",
            "location": 82,
            "return": [],
            "arguments": {
                "percpu": []
            }
        },
        "cpu_percent": {
            "name": "cpu_percent",
            "location": 83,
            "return": [],
            "arguments": {
                "interval": [],
                "percpu": []
            }
        },
        "cpu_times_percent": {
            "name": "cpu_times_percent",
            "location": 84,
            "return": [],
            "arguments": {
                "interval": [],
                "percpu": []
            }
        },
        "cpu_stats": {
            "name": "cpu_stats",
            "location": 85,
            "return": [],
            "arguments": {}
        },
        "cpu_freq": {
            "name": "cpu_freq",
            "location": 86,
            "return": [],
            "arguments": {
                "percpu": []
            }
        },
        "virtual_memory": {
            "name": "virtual_memory",
            "location": 87,
            "return": [],
            "arguments": {}
        },
        "swap_memory": {
            "name": "swap_memory",
            "location": 88,
            "return": [],
            "arguments": {}
        },
        "disk_usage": {
            "name": "disk_usage",
            "location": 89,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "disk_partitions": {
            "name": "disk_partitions",
            "location": 90,
            "return": [],
            "arguments": {
                "all": []
            }
        },
        "disk_io_counters": {
            "name": "disk_io_counters",
            "location": 91,
            "return": [],
            "arguments": {
                "perdisk": [],
                "nowrap": []
            }
        },
        "net_io_counters": {
            "name": "net_io_counters",
            "location": 92,
            "return": [],
            "arguments": {
                "pernic": [],
                "nowrap": []
            }
        },
        "net_connections": {
            "name": "net_connections",
            "location": 93,
            "return": [],
            "arguments": {
                "kind": []
            }
        },
        "net_if_addrs": {
            "name": "net_if_addrs",
            "location": 94,
            "return": [],
            "arguments": {}
        },
        "net_if_stats": {
            "name": "net_if_stats",
            "location": 95,
            "return": [],
            "arguments": {}
        },
        "sensors_temperatures": {
            "name": "sensors_temperatures",
            "location": 96,
            "return": [],
            "arguments": {
                "fahrenheit": []
            }
        },
        "sensors_fans": {
            "name": "sensors_fans",
            "location": 97,
            "return": [],
            "arguments": {}
        },
        "sensors_battery": {
            "name": "sensors_battery",
            "location": 98,
            "return": [],
            "arguments": {}
        },
        "boot_time": {
            "name": "boot_time",
            "location": 99,
            "return": [],
            "arguments": {}
        },
        "users": {
            "name": "users",
            "location": 100,
            "return": [],
            "arguments": {}
        },
        "getloadavg": {
            "name": "getloadavg",
            "location": 101,
            "return": [],
            "arguments": {}
        },
        "Process.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "pid": []
            }
        },
        "Process.__eq__": {
            "name": "__eq__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Process.__ne__": {
            "name": "__ne__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Process.__hash__": {
            "name": "__hash__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Process.pid": {
            "name": "pid",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Process.oneshot": {
            "name": "oneshot",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Process.as_dict": {
            "name": "as_dict",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "attrs": [],
                "ad_value": []
            }
        },
        "Process.parent": {
            "name": "parent",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Process.is_running": {
            "name": "is_running",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Process.ppid": {
            "name": "ppid",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Process.name": {
            "name": "name",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Process.exe": {
            "name": "exe",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Process.cmdline": {
            "name": "cmdline",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Process.status": {
            "name": "status",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Process.username": {
            "name": "username",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Process.create_time": {
            "name": "create_time",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Process.cwd": {
            "name": "cwd",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Process.nice": {
            "name": "nice",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Process.uids": {
            "name": "uids",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Process.gids": {
            "name": "gids",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Process.terminal": {
            "name": "terminal",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Process.num_fds": {
            "name": "num_fds",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Process.io_counters": {
            "name": "io_counters",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Process.ionice": {
            "name": "ionice",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "ioclass": [],
                "value": []
            }
        },
        "Process.rlimit": {
            "name": "rlimit",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "resource": [],
                "limits": []
            }
        },
        "Process.cpu_affinity": {
            "name": "cpu_affinity",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "cpus": []
            }
        },
        "Process.cpu_num": {
            "name": "cpu_num",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Process.environ": {
            "name": "environ",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Process.num_handles": {
            "name": "num_handles",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Process.num_ctx_switches": {
            "name": "num_ctx_switches",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Process.num_threads": {
            "name": "num_threads",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Process.threads": {
            "name": "threads",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Process.children": {
            "name": "children",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "recursive": []
            }
        },
        "Process.cpu_percent": {
            "name": "cpu_percent",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "interval": []
            }
        },
        "Process.cpu_times": {
            "name": "cpu_times",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Process.memory_info": {
            "name": "memory_info",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Process.memory_info_ex": {
            "name": "memory_info_ex",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Process.memory_full_info": {
            "name": "memory_full_info",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Process.memory_percent": {
            "name": "memory_percent",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "memtype": []
            }
        },
        "Process.memory_maps": {
            "name": "memory_maps",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "grouped": []
            }
        },
        "Process.open_files": {
            "name": "open_files",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Process.connections": {
            "name": "connections",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "kind": []
            }
        },
        "Process.send_signal": {
            "name": "send_signal",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "sig": []
            }
        },
        "Process.suspend": {
            "name": "suspend",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Process.resume": {
            "name": "resume",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Process.terminate": {
            "name": "terminate",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Process.kill": {
            "name": "kill",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Process.wait": {
            "name": "wait",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "timeout": []
            }
        },
        "Popen.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Popen.__dir__": {
            "name": "__dir__",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Popen.__enter__": {
            "name": "__enter__",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Popen.__exit__": {
            "name": "__exit__",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Popen.__getattribute__": {
            "name": "__getattribute__",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Popen.wait": {
            "name": "wait",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "timeout": []
            }
        }
    },
    "qtile-master/stubs/setproctitle.py": {
        "setproctitle": {
            "name": "setproctitle",
            "location": 1,
            "return": [],
            "arguments": {
                "title": []
            }
        }
    },
    "qtile-master/stubs/xmltodict.py": {},
    "qtile-master/stubs/bowler/helpers.py": {
        "print_selector_pattern": {
            "name": "print_selector_pattern",
            "location": 7,
            "return": [],
            "arguments": {
                "node": [],
                "results": [],
                "filename": [],
                "first": []
            }
        },
        "print_tree": {
            "name": "print_tree",
            "location": 8,
            "return": [],
            "arguments": {
                "node": [],
                "results": [],
                "filename": [],
                "indent": [],
                "recurse": []
            }
        },
        "dotted_parts": {
            "name": "dotted_parts",
            "location": 9,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "quoted_parts": {
            "name": "quoted_parts",
            "location": 10,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "power_parts": {
            "name": "power_parts",
            "location": 11,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "is_method": {
            "name": "is_method",
            "location": 12,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "is_call_to": {
            "name": "is_call_to",
            "location": 13,
            "return": [],
            "arguments": {
                "node": [],
                "func_name": []
            }
        },
        "find_first": {
            "name": "find_first",
            "location": 14,
            "return": [],
            "arguments": {
                "node": [],
                "target": [],
                "recursive": []
            }
        },
        "find_previous": {
            "name": "find_previous",
            "location": 15,
            "return": [],
            "arguments": {
                "node": [],
                "target": [],
                "recursive": []
            }
        },
        "find_next": {
            "name": "find_next",
            "location": 16,
            "return": [],
            "arguments": {
                "node": [],
                "target": [],
                "recursive": []
            }
        },
        "find_last": {
            "name": "find_last",
            "location": 17,
            "return": [],
            "arguments": {
                "node": [],
                "target": [],
                "recursive": []
            }
        },
        "get_class": {
            "name": "get_class",
            "location": 18,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "filename_endswith": {
            "name": "filename_endswith",
            "location": 25,
            "return": [],
            "arguments": {
                "ext": []
            }
        },
        "Once.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Once.__bool__": {
            "name": "__bool__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/stubs/bowler/imr.py": {
        "FunctionArgument.build": {
            "name": "build",
            "location": 14,
            "return": [],
            "arguments": {
                "cls": [],
                "leaf": [],
                "is_def": []
            }
        },
        "FunctionArgument.build_list": {
            "name": "build_list",
            "location": 16,
            "return": [],
            "arguments": {
                "cls": [],
                "arguments": [],
                "is_def": []
            }
        },
        "FunctionArgument.explode": {
            "name": "explode",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "is_def": [],
                "prefix": []
            }
        },
        "FunctionArgument.explode_list": {
            "name": "explode_list",
            "location": 19,
            "return": [],
            "arguments": {
                "cls": [],
                "arguments": [],
                "is_def": []
            }
        },
        "FunctionArgument.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "value": [],
                "annotation": [],
                "star": [],
                "prefix": []
            }
        },
        "FunctionArgument.__lt__": {
            "name": "__lt__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "FunctionArgument.__le__": {
            "name": "__le__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "FunctionArgument.__gt__": {
            "name": "__gt__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "FunctionArgument.__ge__": {
            "name": "__ge__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "FunctionSpec.build": {
            "name": "build",
            "location": 33,
            "return": [],
            "arguments": {
                "cls": [],
                "node": [],
                "capture": []
            }
        },
        "FunctionSpec.explode": {
            "name": "explode",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionSpec.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "arguments": [],
                "is_def": [],
                "capture": [],
                "node": []
            }
        },
        "FunctionSpec.__lt__": {
            "name": "__lt__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "FunctionSpec.__le__": {
            "name": "__le__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "FunctionSpec.__gt__": {
            "name": "__gt__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "FunctionSpec.__ge__": {
            "name": "__ge__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "qtile-master/stubs/bowler/main.py": {
        "main": {
            "name": "main",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [],
                "debug": [],
                "version": []
            }
        },
        "dump": {
            "name": "dump",
            "location": 8,
            "return": [],
            "arguments": {
                "selector_pattern": [],
                "paths": []
            }
        },
        "do": {
            "name": "do",
            "location": 9,
            "return": [],
            "arguments": {
                "interactive": [],
                "query": [],
                "paths": []
            }
        },
        "run": {
            "name": "run",
            "location": 10,
            "return": [],
            "arguments": {
                "codemod": [],
                "argv": []
            }
        },
        "test": {
            "name": "test",
            "location": 11,
            "return": [],
            "arguments": {
                "codemod": []
            }
        }
    },
    "qtile-master/stubs/bowler/query.py": {
        "selector": {
            "name": "selector",
            "location": 13,
            "return": [],
            "arguments": {
                "pattern": []
            }
        },
        "Query.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.select_root": {
            "name": "select_root",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.select_module": {
            "name": "select_module",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Query.select_class": {
            "name": "select_class",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Query.select_subclass": {
            "name": "select_subclass",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Query.select_attribute": {
            "name": "select_attribute",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Query.select_method": {
            "name": "select_method",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Query.select_function": {
            "name": "select_function",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Query.select_var": {
            "name": "select_var",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Query.select_pattern": {
            "name": "select_pattern",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "pattern": []
            }
        },
        "Query.select": {
            "name": "select",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "pattern": []
            }
        },
        "Query.current": {
            "name": "current",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.is_filename": {
            "name": "is_filename",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "include": [],
                "exclude": []
            }
        },
        "Query.is_call": {
            "name": "is_call",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.is_def": {
            "name": "is_def",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.in_class": {
            "name": "in_class",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "class_name": [],
                "include_subclasses": []
            }
        },
        "Query.encapsulate": {
            "name": "encapsulate",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "internal_name": []
            }
        },
        "Query.rename": {
            "name": "rename",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "new_name": []
            }
        },
        "Query.add_argument": {
            "name": "add_argument",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "value": [],
                "positional": [],
                "after": [],
                "type_annotation": []
            }
        },
        "Query.modify_argument": {
            "name": "modify_argument",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "new_name": [],
                "type_annotation": [],
                "default_value": []
            }
        },
        "Query.remove_argument": {
            "name": "remove_argument",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Query.fixer": {
            "name": "fixer",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "fx": []
            }
        },
        "Query.filter": {
            "name": "filter",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "Query.modify": {
            "name": "modify",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "Query.process": {
            "name": "process",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "Query.create_fixer": {
            "name": "create_fixer",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "transform": []
            }
        },
        "Query.compile": {
            "name": "compile",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.execute": {
            "name": "execute",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.dump": {
            "name": "dump",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "selector_pattern": []
            }
        },
        "Query.diff": {
            "name": "diff",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "interactive": []
            }
        },
        "Query.idiff": {
            "name": "idiff",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.silent": {
            "name": "silent",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.write": {
            "name": "write",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/stubs/bowler/tool.py": {
        "diff_texts": {
            "name": "diff_texts",
            "location": 9,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "filename": []
            }
        },
        "prompt_user": {
            "name": "prompt_user",
            "location": 10,
            "return": [],
            "arguments": {
                "question": [],
                "options": [],
                "default": []
            }
        },
        "BowlerTool.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "fixers": []
            }
        },
        "BowlerTool.log_error": {
            "name": "log_error",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "BowlerTool.get_fixers": {
            "name": "get_fixers",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BowlerTool.processed_file": {
            "name": "processed_file",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "new_text": [],
                "filename": [],
                "old_text": []
            }
        },
        "BowlerTool.refactor_file": {
            "name": "refactor_file",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "filename": []
            }
        },
        "BowlerTool.refactor_dir": {
            "name": "refactor_dir",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "dir_name": []
            }
        },
        "BowlerTool.refactor_queue": {
            "name": "refactor_queue",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BowlerTool.queue_work": {
            "name": "queue_work",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "filename": []
            }
        },
        "BowlerTool.refactor": {
            "name": "refactor",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "items": []
            }
        },
        "BowlerTool.process_hunks": {
            "name": "process_hunks",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [],
                "hunks": []
            }
        },
        "BowlerTool.apply_hunks": {
            "name": "apply_hunks",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "accepted_hunks": [],
                "filename": []
            }
        },
        "BowlerTool.run": {
            "name": "run",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "paths": []
            }
        }
    },
    "qtile-master/stubs/bowler/types.py": {
        "Passthrough.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [],
            "arguments": {
                "self": [],
                "target": []
            }
        },
        "Passthrough.__getattr__": {
            "name": "__getattr__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Transform.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "selector": [],
                "kwargs": [],
                "filters": [],
                "callbacks": [],
                "fixer": []
            }
        },
        "Transform.__lt__": {
            "name": "__lt__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Transform.__le__": {
            "name": "__le__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Transform.__gt__": {
            "name": "__gt__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Transform.__ge__": {
            "name": "__ge__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BowlerException.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        }
    },
    "qtile-master/stubs/bowler/type_inference.py": {
        "numeric_expr_type": {
            "name": "numeric_expr_type",
            "location": 14,
            "return": [],
            "arguments": {
                "node": [],
                "use_py2_division": [],
                "type_for_unknown": []
            }
        }
    },
    "qtile-master/stubs/bowler/__init__.py": {},
    "qtile-master/stubs/cairocffi/constants.py": {},
    "qtile-master/stubs/cairocffi/context.py": {
        "Context.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [],
            "arguments": {
                "self": [],
                "target": []
            }
        },
        "Context.get_target": {
            "name": "get_target",
            "location": 5,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.save": {
            "name": "save",
            "location": 6,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.restore": {
            "name": "restore",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.__enter__": {
            "name": "__enter__",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.__exit__": {
            "name": "__exit__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_val": [],
                "exc_tb": []
            }
        },
        "Context.push_group": {
            "name": "push_group",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.push_group_with_content": {
            "name": "push_group_with_content",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "content": []
            }
        },
        "Context.pop_group": {
            "name": "pop_group",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.pop_group_to_source": {
            "name": "pop_group_to_source",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.get_group_target": {
            "name": "get_group_target",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.set_source_rgba": {
            "name": "set_source_rgba",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "red": [],
                "green": [],
                "blue": [],
                "alpha": []
            }
        },
        "Context.set_source_rgb": {
            "name": "set_source_rgb",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "red": [],
                "green": [],
                "blue": []
            }
        },
        "Context.set_source_surface": {
            "name": "set_source_surface",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "surface": [],
                "x": [],
                "y": []
            }
        },
        "Context.set_source": {
            "name": "set_source",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "source": []
            }
        },
        "Context.get_source": {
            "name": "get_source",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.set_antialias": {
            "name": "set_antialias",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "antialias": []
            }
        },
        "Context.get_antialias": {
            "name": "get_antialias",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.set_dash": {
            "name": "set_dash",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "dashes": [],
                "offset": []
            }
        },
        "Context.get_dash": {
            "name": "get_dash",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.get_dash_count": {
            "name": "get_dash_count",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.set_fill_rule": {
            "name": "set_fill_rule",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "fill_rule": []
            }
        },
        "Context.get_fill_rule": {
            "name": "get_fill_rule",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.set_line_cap": {
            "name": "set_line_cap",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "line_cap": []
            }
        },
        "Context.get_line_cap": {
            "name": "get_line_cap",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.set_line_join": {
            "name": "set_line_join",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "line_join": []
            }
        },
        "Context.get_line_join": {
            "name": "get_line_join",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.set_line_width": {
            "name": "set_line_width",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "width": []
            }
        },
        "Context.get_line_width": {
            "name": "get_line_width",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.set_miter_limit": {
            "name": "set_miter_limit",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "limit": []
            }
        },
        "Context.get_miter_limit": {
            "name": "get_miter_limit",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.set_operator": {
            "name": "set_operator",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "operator": []
            }
        },
        "Context.get_operator": {
            "name": "get_operator",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.set_tolerance": {
            "name": "set_tolerance",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "tolerance": []
            }
        },
        "Context.get_tolerance": {
            "name": "get_tolerance",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.translate": {
            "name": "translate",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "tx": [],
                "ty": []
            }
        },
        "Context.scale": {
            "name": "scale",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "sx": [],
                "sy": []
            }
        },
        "Context.rotate": {
            "name": "rotate",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "radians": []
            }
        },
        "Context.transform": {
            "name": "transform",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "matrix": []
            }
        },
        "Context.set_matrix": {
            "name": "set_matrix",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "matrix": []
            }
        },
        "Context.get_matrix": {
            "name": "get_matrix",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.identity_matrix": {
            "name": "identity_matrix",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.user_to_device": {
            "name": "user_to_device",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "Context.user_to_device_distance": {
            "name": "user_to_device_distance",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "dx": [],
                "dy": []
            }
        },
        "Context.device_to_user": {
            "name": "device_to_user",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "Context.device_to_user_distance": {
            "name": "device_to_user_distance",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "dx": [],
                "dy": []
            }
        },
        "Context.has_current_point": {
            "name": "has_current_point",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.get_current_point": {
            "name": "get_current_point",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.new_path": {
            "name": "new_path",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.new_sub_path": {
            "name": "new_sub_path",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.move_to": {
            "name": "move_to",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "Context.rel_move_to": {
            "name": "rel_move_to",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "dx": [],
                "dy": []
            }
        },
        "Context.line_to": {
            "name": "line_to",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "Context.rel_line_to": {
            "name": "rel_line_to",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "dx": [],
                "dy": []
            }
        },
        "Context.rectangle": {
            "name": "rectangle",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "width": [],
                "height": []
            }
        },
        "Context.arc": {
            "name": "arc",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "xc": [],
                "yc": [],
                "radius": [],
                "angle1": [],
                "angle2": []
            }
        },
        "Context.arc_negative": {
            "name": "arc_negative",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "xc": [],
                "yc": [],
                "radius": [],
                "angle1": [],
                "angle2": []
            }
        },
        "Context.curve_to": {
            "name": "curve_to",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "x1": [],
                "y1": [],
                "x2": [],
                "y2": [],
                "x3": [],
                "y3": []
            }
        },
        "Context.rel_curve_to": {
            "name": "rel_curve_to",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "dx1": [],
                "dy1": [],
                "dx2": [],
                "dy2": [],
                "dx3": [],
                "dy3": []
            }
        },
        "Context.text_path": {
            "name": "text_path",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "Context.glyph_path": {
            "name": "glyph_path",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "glyphs": []
            }
        },
        "Context.close_path": {
            "name": "close_path",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.copy_path": {
            "name": "copy_path",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.copy_path_flat": {
            "name": "copy_path_flat",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.append_path": {
            "name": "append_path",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "Context.path_extents": {
            "name": "path_extents",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.paint": {
            "name": "paint",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.paint_with_alpha": {
            "name": "paint_with_alpha",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "alpha": []
            }
        },
        "Context.mask": {
            "name": "mask",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "pattern": []
            }
        },
        "Context.mask_surface": {
            "name": "mask_surface",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "surface": [],
                "surface_x": [],
                "surface_y": []
            }
        },
        "Context.fill": {
            "name": "fill",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.fill_preserve": {
            "name": "fill_preserve",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.fill_extents": {
            "name": "fill_extents",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.in_fill": {
            "name": "in_fill",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "Context.stroke": {
            "name": "stroke",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.stroke_preserve": {
            "name": "stroke_preserve",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.stroke_extents": {
            "name": "stroke_extents",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.in_stroke": {
            "name": "in_stroke",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "Context.clip": {
            "name": "clip",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.clip_preserve": {
            "name": "clip_preserve",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.clip_extents": {
            "name": "clip_extents",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.copy_clip_rectangle_list": {
            "name": "copy_clip_rectangle_list",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.in_clip": {
            "name": "in_clip",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "Context.reset_clip": {
            "name": "reset_clip",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.select_font_face": {
            "name": "select_font_face",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "family": [],
                "slant": [],
                "weight": []
            }
        },
        "Context.set_font_face": {
            "name": "set_font_face",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "font_face": []
            }
        },
        "Context.get_font_face": {
            "name": "get_font_face",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.set_font_size": {
            "name": "set_font_size",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "Context.set_font_matrix": {
            "name": "set_font_matrix",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "matrix": []
            }
        },
        "Context.get_font_matrix": {
            "name": "get_font_matrix",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.set_font_options": {
            "name": "set_font_options",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "font_options": []
            }
        },
        "Context.get_font_options": {
            "name": "get_font_options",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.set_scaled_font": {
            "name": "set_scaled_font",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "scaled_font": []
            }
        },
        "Context.get_scaled_font": {
            "name": "get_scaled_font",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.font_extents": {
            "name": "font_extents",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.text_extents": {
            "name": "text_extents",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "Context.glyph_extents": {
            "name": "glyph_extents",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "glyphs": []
            }
        },
        "Context.show_text": {
            "name": "show_text",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "Context.show_glyphs": {
            "name": "show_glyphs",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "glyphs": []
            }
        },
        "Context.show_text_glyphs": {
            "name": "show_text_glyphs",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "text": [],
                "glyphs": [],
                "clusters": [],
                "cluster_flags": []
            }
        },
        "Context.show_page": {
            "name": "show_page",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.copy_page": {
            "name": "copy_page",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.tag_begin": {
            "name": "tag_begin",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "tag_name": [],
                "attributes": []
            }
        },
        "Context.tag_end": {
            "name": "tag_end",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "tag_name": []
            }
        }
    },
    "qtile-master/stubs/cairocffi/ffi_build.py": {},
    "qtile-master/stubs/cairocffi/patterns.py": {
        "Pattern.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [],
            "arguments": {
                "self": [],
                "pointer": []
            }
        },
        "Pattern.set_extend": {
            "name": "set_extend",
            "location": 5,
            "return": [],
            "arguments": {
                "self": [],
                "extend": []
            }
        },
        "Pattern.get_extend": {
            "name": "get_extend",
            "location": 6,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Pattern.set_filter": {
            "name": "set_filter",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "filter": []
            }
        },
        "Pattern.get_filter": {
            "name": "get_filter",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Pattern.set_matrix": {
            "name": "set_matrix",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "matrix": []
            }
        },
        "Pattern.get_matrix": {
            "name": "get_matrix",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SolidPattern.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "red": [],
                "green": [],
                "blue": [],
                "alpha": []
            }
        },
        "SolidPattern.get_rgba": {
            "name": "get_rgba",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SurfacePattern.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "surface": []
            }
        },
        "SurfacePattern.get_surface": {
            "name": "get_surface",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Gradient.add_color_stop_rgba": {
            "name": "add_color_stop_rgba",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "offset": [],
                "red": [],
                "green": [],
                "blue": [],
                "alpha": []
            }
        },
        "Gradient.add_color_stop_rgb": {
            "name": "add_color_stop_rgb",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "offset": [],
                "red": [],
                "green": [],
                "blue": []
            }
        },
        "Gradient.get_color_stops": {
            "name": "get_color_stops",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinearGradient.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "x0": [],
                "y0": [],
                "x1": [],
                "y1": []
            }
        },
        "LinearGradient.get_linear_points": {
            "name": "get_linear_points",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RadialGradient.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "cx0": [],
                "cy0": [],
                "radius0": [],
                "cx1": [],
                "cy1": [],
                "radius1": []
            }
        },
        "RadialGradient.get_radial_circles": {
            "name": "get_radial_circles",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/stubs/cairocffi/pixbuf.py": {
        "decode_to_image_surface": {
            "name": "decode_to_image_surface",
            "location": 9,
            "return": [],
            "arguments": {
                "image_data": [],
                "width": [],
                "height": []
            }
        },
        "Pixbuf.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [],
            "arguments": {
                "self": [],
                "pointer": []
            }
        },
        "Pixbuf.__getattr__": {
            "name": "__getattr__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        }
    },
    "qtile-master/stubs/cairocffi/surfaces.py": {
        "from_buffer": {
            "name": "from_buffer",
            "location": 5,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "Surface.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "pointer": [],
                "target_keep_alive": []
            }
        },
        "Surface.create_similar": {
            "name": "create_similar",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "content": [],
                "width": [],
                "height": []
            }
        },
        "Surface.create_similar_image": {
            "name": "create_similar_image",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "content": [],
                "width": [],
                "height": []
            }
        },
        "Surface.create_for_rectangle": {
            "name": "create_for_rectangle",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "width": [],
                "height": []
            }
        },
        "Surface.get_content": {
            "name": "get_content",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Surface.has_show_text_glyphs": {
            "name": "has_show_text_glyphs",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Surface.set_device_offset": {
            "name": "set_device_offset",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "x_offset": [],
                "y_offset": []
            }
        },
        "Surface.get_device_offset": {
            "name": "get_device_offset",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Surface.set_fallback_resolution": {
            "name": "set_fallback_resolution",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "x_pixels_per_inch": [],
                "y_pixels_per_inch": []
            }
        },
        "Surface.get_fallback_resolution": {
            "name": "get_fallback_resolution",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Surface.get_font_options": {
            "name": "get_font_options",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Surface.set_device_scale": {
            "name": "set_device_scale",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "x_scale": [],
                "y_scale": []
            }
        },
        "Surface.get_device_scale": {
            "name": "get_device_scale",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Surface.set_mime_data": {
            "name": "set_mime_data",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "mime_type": [],
                "data": []
            }
        },
        "Surface.get_mime_data": {
            "name": "get_mime_data",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "mime_type": []
            }
        },
        "Surface.supports_mime_type": {
            "name": "supports_mime_type",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "mime_type": []
            }
        },
        "Surface.mark_dirty": {
            "name": "mark_dirty",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Surface.mark_dirty_rectangle": {
            "name": "mark_dirty_rectangle",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "width": [],
                "height": []
            }
        },
        "Surface.show_page": {
            "name": "show_page",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Surface.copy_page": {
            "name": "copy_page",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Surface.flush": {
            "name": "flush",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Surface.finish": {
            "name": "finish",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Surface.write_to_png": {
            "name": "write_to_png",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "target": []
            }
        },
        "ImageSurface.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "format": [],
                "width": [],
                "height": [],
                "data": [],
                "stride": []
            }
        },
        "ImageSurface.create_for_data": {
            "name": "create_for_data",
            "location": 36,
            "return": [],
            "arguments": {
                "cls": [],
                "data": [],
                "format": [],
                "width": [],
                "height": [],
                "stride": []
            }
        },
        "ImageSurface.format_stride_for_width": {
            "name": "format_stride_for_width",
            "location": 38,
            "return": [],
            "arguments": {
                "format": [],
                "width": []
            }
        },
        "ImageSurface.create_from_png": {
            "name": "create_from_png",
            "location": 40,
            "return": [],
            "arguments": {
                "cls": [],
                "source": []
            }
        },
        "ImageSurface.get_data": {
            "name": "get_data",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ImageSurface.get_format": {
            "name": "get_format",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ImageSurface.get_width": {
            "name": "get_width",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ImageSurface.get_height": {
            "name": "get_height",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ImageSurface.get_stride": {
            "name": "get_stride",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RecordingSurface.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "content": [],
                "extents": []
            }
        },
        "RecordingSurface.get_extents": {
            "name": "get_extents",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RecordingSurface.ink_extents": {
            "name": "ink_extents",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/stubs/cairocffi/xcb.py": {
        "XCBSurface.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [],
            "arguments": {
                "self": [],
                "conn": [],
                "drawable": [],
                "visual": [],
                "width": [],
                "height": []
            }
        },
        "XCBSurface.set_size": {
            "name": "set_size",
            "location": 6,
            "return": [],
            "arguments": {
                "self": [],
                "width": [],
                "height": []
            }
        }
    },
    "qtile-master/stubs/cairocffi/__init__.py": {
        "CairoError.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "status": []
            }
        }
    },
    "qtile-master/stubs/ipykernel/kernelapp.py": {},
    "qtile-master/stubs/ipykernel/kernelbase.py": {},
    "qtile-master/stubs/ipykernel/__init__.py": {},
    "qtile-master/stubs/IPython/__init__.py": {},
    "qtile-master/stubs/IPython/utils/tempdir.py": {},
    "qtile-master/stubs/IPython/utils/__init__.py": {},
    "qtile-master/stubs/jupyter_client/kernelspec.py": {
        "install_kernel_spec": {
            "name": "install_kernel_spec",
            "location": 1,
            "return": [],
            "arguments": {
                "source_dir": [],
                "kernel_name": [],
                "user": [],
                "replace": [],
                "prefix": []
            }
        }
    },
    "qtile-master/stubs/jupyter_client/__init__.py": {},
    "qtile-master/stubs/xdg/__init__.py": {},
    "qtile-master/stubs/xdg/IconTheme/__init__.py": {
        "getIconPath": {
            "name": "getIconPath",
            "location": 1,
            "return": [],
            "arguments": {
                "iconname": []
            }
        }
    },
    "qtile-master/stubs/xml/__init__.py": {},
    "qtile-master/stubs/xml/dom/__init__.py": {},
    "qtile-master/stubs/xml/dom/minidom/__init__.py": {
        "parseString": {
            "name": "parseString",
            "location": 1,
            "return": [],
            "arguments": {
                "string": [],
                "parser": []
            }
        }
    },
    "qtile-master/test/conftest.py": {
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "dict"
                ]
            }
        },
        "pytest_cmdline_main": {
            "name": "pytest_cmdline_main",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "pytest_generate_tests": {
            "name": "pytest_generate_tests",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "metafunc": [
                    "str",
                    "bool",
                    "Mapping[str, str]"
                ]
            }
        },
        "outputs": {
            "name": "outputs",
            "location": 61,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "request": [
                    "Iterable[int]"
                ]
            }
        },
        "xephyr": {
            "name": "xephyr",
            "location": 70,
            "return": [
                "typing.Generator",
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {
                "request": [
                    "str",
                    "Optional[Dict]",
                    "dict"
                ],
                "outputs": [
                    "str",
                    "Dict[str, str]",
                    "Tuple[str]"
                ]
            }
        },
        "wayland_session": {
            "name": "wayland_session",
            "location": 84,
            "return": [
                "str",
                "typing.Generator",
                "None"
            ],
            "arguments": {
                "request": [
                    "str",
                    "Optional[Dict[str, bytes]]",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]"
                ],
                "outputs": [
                    "str",
                    "bytes",
                    "Optional[bytes]"
                ]
            }
        },
        "backend": {
            "name": "backend",
            "location": 96,
            "return": [
                "",
                "typing.Generator[XBackend]",
                "typing.Generator[WaylandBackend]"
            ],
            "arguments": {
                "request": [
                    "int",
                    "str"
                ],
                "backend_name": [
                    "int",
                    "str"
                ],
                "xephyr": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "Callable"
                ],
                "wayland_session": [
                    "str",
                    "int",
                    "list",
                    "Optional[str]"
                ]
            }
        },
        "log_queue": {
            "name": "log_queue",
            "location": 108,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {}
        },
        "logger": {
            "name": "logger",
            "location": 114,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "caplog": [
                    "list",
                    "bool",
                    "List[str]",
                    "List[Dict]",
                    "Iterable[str]",
                    "Optional[List]"
                ],
                "log_queue": [
                    "str",
                    "Callable",
                    "int"
                ]
            }
        },
        "manager_nospawn": {
            "name": "manager_nospawn",
            "location": 129,
            "return": [
                "",
                "typing.Generator[TestManager]"
            ],
            "arguments": {
                "request": [
                    "str"
                ],
                "backend": [
                    "str"
                ],
                "log_queue": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "dict"
                ]
            }
        },
        "manager": {
            "name": "manager",
            "location": 136,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "request": [],
                "manager_nospawn": [
                    "bool"
                ]
            }
        },
        "fake_window": {
            "name": "fake_window",
            "location": 144,
            "return": [
                "FakeWindow",
                "List[List[int]]",
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "fake_window.FakeWindow.create_drawer": {
            "name": "create_drawer",
            "location": 155,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "width": [
                    "int",
                    "Optional[int]",
                    "Optional[str]",
                    "Union[int, None]"
                ],
                "height": [
                    "int",
                    "Optional[int]",
                    "Optional[str]",
                    "Union[int, None]"
                ]
            }
        }
    },
    "qtile-master/test/helpers.py": {
        "can_connect_qtile": {
            "name": "can_connect_qtile",
            "location": 126,
            "return": [
                "bool"
            ],
            "arguments": {
                "socket_path": [
                    "str",
                    "pathlib.Path",
                    "django.core.files.storage.Storage"
                ]
            }
        },
        "assert_window_died": {
            "name": "assert_window_died",
            "location": 359,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "window_info": [
                    "bool",
                    "dict",
                    "List[str]",
                    "str"
                ]
            }
        },
        "Retry.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fail_msg": [
                    "typing.Text",
                    "bool",
                    "str",
                    "int",
                    "float",
                    "Optional[str]"
                ],
                "ignore_exceptions": [
                    "tuple",
                    "Optional[List[Any]]",
                    "str",
                    "bool",
                    "int",
                    "Optional[bool]"
                ],
                "dt": [
                    "float",
                    "bool",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "tmax": [
                    "float",
                    "bool",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "return_on_fail": [
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "Retry.__call__": {
            "name": "__call__",
            "location": 52,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "dict"
                ]
            }
        },
        "Backend.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "str",
                    "Mapping[str, str]",
                    "dict",
                    "List[str]"
                ],
                "args": [
                    "tuple"
                ]
            }
        },
        "Backend.create": {
            "name": "create",
            "location": 106,
            "return": [
                "str",
                "bool",
                "tartare.core.models.Job"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backend.configure": {
            "name": "configure",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Backend.fake_click": {
            "name": "fake_click",
            "location": 115,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ],
                "y": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "Backend.get_all_windows": {
            "name": "get_all_windows",
            "location": 120,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestManager.__init__": {
            "name": "__init__",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "backend": [
                    "bool",
                    "Callable[[], Coroutine[Any, Any, None]]",
                    "Optional[dict]",
                    "str"
                ],
                "debug_log": [
                    "str",
                    "bool",
                    "Dict[str, object]",
                    "pathlib.Path",
                    "Dict[str, str]"
                ]
            }
        },
        "TestManager.__enter__": {
            "name": "__enter__",
            "location": 157,
            "return": [
                "estManager"
            ],
            "arguments": {
                "self": [
                    "_TTestManager"
                ]
            }
        },
        "TestManager.__exit__": {
            "name": "__exit__",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "_exc_value": [
                    "Optional[BaseException]"
                ],
                "_exc_tb": [
                    "Optional[Type[BaseException]]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ]
            }
        },
        "TestManager.start": {
            "name": "start",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_class": [
                    "Dict[str, Any]"
                ],
                "no_spawn": [
                    "Dict[str, Any]",
                    "bool"
                ],
                "state": [
                    "Dict[str, Any]",
                    "None"
                ]
            }
        },
        "TestManager.create_manager": {
            "name": "create_manager",
            "location": 205,
            "return": [
                "libqtile.core.manager.Qtile"
            ],
            "arguments": {
                "self": [],
                "config_class": [
                    "dict",
                    "Config",
                    "TextIO",
                    "Mapping[str, str]",
                    "int"
                ]
            }
        },
        "TestManager.terminate": {
            "name": "terminate",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestManager.create_window": {
            "name": "create_window",
            "location": 250,
            "return": [
                "str",
                "bool",
                "logging.LogRecord",
                "dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "create": [
                    "str",
                    "bool",
                    "int",
                    "Dict[str, str]"
                ],
                "failed": [
                    "None",
                    "str",
                    "bool",
                    "int",
                    "Dict[str, str]"
                ]
            }
        },
        "TestManager._spawn_window": {
            "name": "_spawn_window",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestManager.kill_window": {
            "name": "kill_window",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "proc": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "T",
                    "List[dict]"
                ]
            }
        },
        "TestManager.test_window": {
            "name": "test_window",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "floating": [
                    "bool",
                    "str",
                    "Dict[str, Any]"
                ],
                "wm_type": [
                    "str",
                    "typing.Text"
                ],
                "export_sni": [
                    "bool",
                    "str",
                    "Tuple[str]",
                    "Optional[str]"
                ]
            }
        },
        "TestManager.test_notification": {
            "name": "test_notification",
            "location": 341,
            "return": [
                "Callable",
                "backup.config.Config",
                "\"Step\""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "typing.Text",
                    "str",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "TestManager.groupconsistency": {
            "name": "groupconsistency",
            "location": 344,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Retry.__call__.wrapper": {
            "name": "wrapper",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "TestManager.start.run_qtile": {
            "name": "run_qtile",
            "location": 171,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "TestManager.create_window.success": {
            "name": "success",
            "location": 261,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "TestManager._spawn_window.spawn": {
            "name": "spawn",
            "location": 281,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "TestManager._spawn_window.failed": {
            "name": "failed",
            "location": 290,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "TestManager.kill_window.success": {
            "name": "success",
            "location": 312,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "qtile-master/test/test_bar.py": {
        "test_completion": {
            "name": "test_completion",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_draw": {
            "name": "test_draw",
            "location": 130,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "dict",
                    "Callable"
                ]
            }
        },
        "test_prompt": {
            "name": "test_prompt",
            "location": 137,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "Mapping[str, Any]"
                ],
                "monkeypatch": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_event": {
            "name": "test_event",
            "location": 160,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str",
                    "Callable",
                    "Sequence[str]",
                    "Iterable[Any]"
                ]
            }
        },
        "test_textbox": {
            "name": "test_textbox",
            "location": 165,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": []
            }
        },
        "test_textbox_errors": {
            "name": "test_textbox_errors",
            "location": 178,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "int"
                ]
            }
        },
        "test_groupbox_button_press": {
            "name": "test_groupbox_button_press",
            "location": 186,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "bool",
                    "dict",
                    "str",
                    "int"
                ]
            }
        },
        "test_geometry": {
            "name": "test_geometry",
            "location": 236,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "bytes"
                ]
            }
        },
        "test_resize": {
            "name": "test_resize",
            "location": 254,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_basic": {
            "name": "test_basic",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_nospawn": [
                    "str",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_singlespacer": {
            "name": "test_singlespacer",
            "location": 363,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_nospawn": [
                    "str",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_nospacer": {
            "name": "test_nospacer",
            "location": 384,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_nospawn": [
                    "str",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_consecutive_spacer": {
            "name": "test_consecutive_spacer",
            "location": 398,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_nospawn": [
                    "str",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_configure_broken_widgets": {
            "name": "test_configure_broken_widgets",
            "location": 437,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_nospawn": [
                    "str",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_bar_hide_show_with_margin": {
            "name": "test_bar_hide_show_with_margin",
            "location": 465,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_nospawn": []
            }
        },
        "test_bar_border_horizontal": {
            "name": "test_bar_border_horizontal",
            "location": 493,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_nospawn": [
                    "bool"
                ]
            }
        },
        "test_bar_border_vertical": {
            "name": "test_bar_border_vertical",
            "location": 552,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_nospawn": [
                    "bool"
                ]
            }
        },
        "test_unsupported_widget": {
            "name": "test_unsupported_widget",
            "location": 611,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_nospawn": [
                    "Callable",
                    "int"
                ]
            }
        },
        "test_prompt.is_spawned": {
            "name": "is_spawned",
            "location": 153,
            "return": [
                "str",
                "bytearray",
                "int",
                "Tuple[bytes, bytes]",
                "List[int]"
            ],
            "arguments": {}
        },
        "DBarH.__init__": {
            "name": "__init__",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "widgets": [
                    "str",
                    "bool",
                    "Sequence[str]",
                    "Type[Any]",
                    "Optional[Type[Any]]",
                    "pathlib.Path",
                    "int",
                    "List[str]"
                ],
                "size": [
                    "str",
                    "bool",
                    "Sequence[str]",
                    "Type[Any]",
                    "Optional[Type[Any]]",
                    "pathlib.Path",
                    "int",
                    "List[str]"
                ]
            }
        },
        "DBarV.__init__": {
            "name": "__init__",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "widgets": [
                    "str",
                    "bool",
                    "Sequence[str]",
                    "Type[Any]",
                    "Optional[Type[Any]]",
                    "pathlib.Path",
                    "int",
                    "List[str]"
                ],
                "size": [
                    "str",
                    "bool",
                    "Sequence[str]",
                    "Type[Any]",
                    "Optional[Type[Any]]",
                    "pathlib.Path",
                    "int",
                    "List[str]"
                ]
            }
        },
        "DWidget.__init__": {
            "name": "__init__",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "length": [
                    "int",
                    "str"
                ],
                "length_type": [
                    "int",
                    "str"
                ]
            }
        },
        "test_resize.wd": {
            "name": "wd",
            "location": 255,
            "return": [
                "list",
                "List[str]",
                "Dict[int, int]",
                "int",
                "Set[str]",
                "Optional[dict]",
                "str"
            ],
            "arguments": {
                "dwidget_list": [
                    "int",
                    "Union[None, float, int]"
                ]
            }
        },
        "test_resize.offx": {
            "name": "offx",
            "location": 258,
            "return": [
                "list",
                "List[str]",
                "Dict[int, int]",
                "int",
                "Set[str]",
                "Optional[dict]",
                "str"
            ],
            "arguments": {
                "dwidget_list": [
                    "List[int]",
                    "bool",
                    "type",
                    "Type"
                ]
            }
        },
        "test_resize.offy": {
            "name": "offy",
            "location": 261,
            "return": [
                "list",
                "List[str]",
                "Dict[int, int]",
                "int",
                "Set[str]",
                "Optional[dict]",
                "str"
            ],
            "arguments": {
                "dwidget_list": [
                    "List[int]",
                    "bool",
                    "type",
                    "Type"
                ]
            }
        },
        "ExampleWidget.__init__": {
            "name": "__init__",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExampleWidget.draw": {
            "name": "draw",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BrokenWidget.__init__": {
            "name": "__init__",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exception_class": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "BrokenWidget._configure": {
            "name": "_configure",
            "location": 324,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "qtile": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "bar": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "qtile-master/test/test_check.py": {
        "is_cpython": {
            "name": "is_cpython",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "have_mypy": {
            "name": "have_mypy",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "run_qtile_check": {
            "name": "run_qtile_check",
            "location": 42,
            "return": [
                "bool"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Dict[str, str]]",
                    "dict",
                    "Dict[str, Any]",
                    "IO",
                    "int",
                    "Union[Dict, List]"
                ]
            }
        },
        "test_check_default_config": {
            "name": "test_check_default_config",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "check_literal_config": {
            "name": "check_literal_config",
            "location": 67,
            "return": [
                "bool"
            ],
            "arguments": {
                "config": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "test_check_bad_syntax": {
            "name": "test_check_bad_syntax",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_check_bad_key_arg": {
            "name": "test_check_bad_key_arg",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_check_good_key_arg": {
            "name": "test_check_good_key_arg",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_check_bad_config_type": {
            "name": "test_check_bad_config_type",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_extra_vars_are_ok": {
            "name": "test_extra_vars_are_ok",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_extra_files_are_ok": {
            "name": "test_extra_files_are_ok",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "qtile-master/test/test_command.py": {
        "test_layout_filter": {
            "name": "test_layout_filter",
            "location": 80,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str"
                ]
            }
        },
        "test_doc": {
            "name": "test_doc",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_commands": {
            "name": "test_commands",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_command": {
            "name": "test_command",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cmd_commands": {
            "name": "test_cmd_commands",
            "location": 169,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "Iterable[Any]",
                    "Callable",
                    "Sequence[Any]"
                ]
            }
        },
        "test_call_unknown": {
            "name": "test_call_unknown",
            "location": 176,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "Callable"
                ]
            }
        },
        "test_items_qtile": {
            "name": "test_items_qtile",
            "location": 187,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "Set[int]",
                    "bytes"
                ]
            }
        },
        "test_select_qtile": {
            "name": "test_select_qtile",
            "location": 208,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str"
                ]
            }
        },
        "test_items_group": {
            "name": "test_items_group",
            "location": 237,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "bool",
                    "Optional[int]",
                    "str",
                    "int"
                ]
            }
        },
        "test_select_group": {
            "name": "test_select_group",
            "location": 250,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "test_items_screen": {
            "name": "test_items_screen",
            "location": 274,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": []
            }
        },
        "test_select_screen": {
            "name": "test_select_screen",
            "location": 286,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str"
                ]
            }
        },
        "test_items_bar": {
            "name": "test_items_bar",
            "location": 309,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "bytes",
                    "int"
                ]
            }
        },
        "test_select_bar": {
            "name": "test_select_bar",
            "location": 315,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str",
                    "Callable"
                ]
            }
        },
        "test_items_layout": {
            "name": "test_items_layout",
            "location": 324,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "bool",
                    "int",
                    "bytes"
                ]
            }
        },
        "test_select_layout": {
            "name": "test_select_layout",
            "location": 330,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "int"
                ]
            }
        },
        "test_items_window": {
            "name": "test_items_window",
            "location": 344,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "backup.config.Config"
                ]
            }
        },
        "test_select_window": {
            "name": "test_select_window",
            "location": 356,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str",
                    "int"
                ]
            }
        },
        "test_items_widget": {
            "name": "test_items_widget",
            "location": 374,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "bytes",
                    "int"
                ]
            }
        },
        "test_select_widget": {
            "name": "test_select_widget",
            "location": 379,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "int"
                ]
            }
        },
        "test_core_node": {
            "name": "test_core_node",
            "location": 386,
            "return": [
                "None"
            ],
            "arguments": {
                "manager": [
                    "str",
                    "List[str]"
                ],
                "backend_name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_lazy_arguments": {
            "name": "test_lazy_arguments",
            "location": 390,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_nospawn": []
            }
        },
        "test_deprecated_modules": {
            "name": "test_deprecated_modules",
            "location": 418,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": []
            }
        },
        "TestCommands.cmd_one": {
            "name": "cmd_one",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestCommands.cmd_one_self": {
            "name": "cmd_one_self",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCommands.cmd_two": {
            "name": "cmd_two",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "List[T]",
                    "int",
                    "List[int]"
                ]
            }
        },
        "TestCommands.cmd_three": {
            "name": "cmd_three",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "Mapping",
                    "List[str]"
                ],
                "b": [
                    "int",
                    "Mapping",
                    "List[str]"
                ]
            }
        },
        "TestCommands._items": {
            "name": "_items",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestCommands._select": {
            "name": "_select",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ],
                "sel": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "test_lazy_arguments.test_func": {
            "name": "test_func",
            "location": 394,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "qtile": [
                    "List[int]",
                    "Callable",
                    "Iterable[bytes]",
                    "dict"
                ],
                "value": [
                    "List[int]",
                    "Callable",
                    "Iterable[bytes]",
                    "dict"
                ],
                "multiplier": [
                    "int",
                    "List[int]",
                    "Callable",
                    "Iterable[bytes]",
                    "dict"
                ]
            }
        }
    },
    "qtile-master/test/test_command_graph.py": {
        "test_root_path": {
            "name": "test_root_path",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_resolve_nodes": {
            "name": "test_resolve_nodes",
            "location": 13,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_resolve_selections": {
            "name": "test_resolve_selections",
            "location": 34,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_resolve_command": {
            "name": "test_resolve_command",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "qtile-master/test/test_config.py": {
        "load_config": {
            "name": "load_config",
            "location": 32,
            "return": [
                "confreader.Config"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "test_validate": {
            "name": "test_validate",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_basic": {
            "name": "test_basic",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_syntaxerr": {
            "name": "test_syntaxerr",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_falls_back": {
            "name": "test_falls_back",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "cmd": {
            "name": "cmd",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "test_ezkey": {
            "name": "test_ezkey",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ezclick_ezdrag": {
            "name": "test_ezclick_ezdrag",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "qtile-master/test/test_configurable.py": {
        "test_use_fallback": {
            "name": "test_use_fallback",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_use_fallback_if_set_to_none": {
            "name": "test_use_fallback_if_set_to_none",
            "location": 44,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_dont_use_fallback_if_set": {
            "name": "test_dont_use_fallback_if_set",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ConfigurableWithFallback.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/test/test_fakescreen.py": {
        "test_basic": {
            "name": "test_basic",
            "location": 151,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": []
            }
        },
        "test_gaps": {
            "name": "test_gaps",
            "location": 174,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str"
                ]
            }
        },
        "test_maximize_with_move_to_screen": {
            "name": "test_maximize_with_move_to_screen",
            "location": 194,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_float_first_on_second_screen": {
            "name": "test_float_first_on_second_screen",
            "location": 218,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str",
                    "Dict[str, Sequence[Any]]"
                ]
            }
        },
        "test_float_change_screens": {
            "name": "test_float_change_screens",
            "location": 247,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "int"
                ]
            }
        },
        "test_float_outside_edges": {
            "name": "test_float_outside_edges",
            "location": 332,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "Dict[str, Any]",
                    "float"
                ]
            }
        },
        "test_hammer_tile": {
            "name": "test_hammer_tile",
            "location": 384,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "Iterable[Tuple[int, int]]",
                    "bytes",
                    "bool"
                ]
            }
        },
        "test_hammer_ratio_tile": {
            "name": "test_hammer_ratio_tile",
            "location": 406,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str",
                    "int"
                ]
            }
        },
        "test_ratio_to_fourth_screen": {
            "name": "test_ratio_to_fourth_screen",
            "location": 426,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": []
            }
        }
    },
    "qtile-master/test/test_group.py": {
        "test_window_order": {
            "name": "test_window_order",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "Dict[str, Any]",
                    "Exception"
                ]
            }
        },
        "test_toscreen_toggle": {
            "name": "test_toscreen_toggle",
            "location": 72,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": []
            }
        }
    },
    "qtile-master/test/test_hook.py": {
        "hook_fixture": {
            "name": "hook_fixture",
            "location": 53,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {}
        },
        "test_cannot_fire_unknown_event": {
            "name": "test_cannot_fire_unknown_event",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_hook_calls_subscriber": {
            "name": "test_hook_calls_subscriber",
            "location": 67,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_hook_calls_subscriber_async": {
            "name": "test_hook_calls_subscriber_async",
            "location": 75,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_hook_calls_subscriber_async_co": {
            "name": "test_hook_calls_subscriber_async_co",
            "location": 89,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_hook_calls_subscriber_async_in_existing_loop": {
            "name": "test_hook_calls_subscriber_async_in_existing_loop",
            "location": 103,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_subscribers_can_be_added_removed": {
            "name": "test_subscribers_can_be_added_removed",
            "location": 120,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_unsubscribe_from_hook": {
            "name": "test_can_unsubscribe_from_hook",
            "location": 129,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_subscribe_to_startup_hooks": {
            "name": "test_can_subscribe_to_startup_hooks",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_nospawn": [
                    "Dict[str, Sequence[str]]",
                    "str"
                ]
            }
        },
        "test_can_update_by_selection_change": {
            "name": "test_can_update_by_selection_change",
            "location": 179,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": []
            }
        },
        "test_can_call_by_selection_notify": {
            "name": "test_can_call_by_selection_notify",
            "location": 187,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str"
                ]
            }
        },
        "test_resume_hook": {
            "name": "test_resume_hook",
            "location": 195,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str",
                    "asyncio.AbstractEventLoop",
                    "Mapping[str, Any]"
                ]
            }
        },
        "Call.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Call.__call__": {
            "name": "__call__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "Callable",
                    "Union[concurrenfutures.Future, asyncio.futures.Future]",
                    "int",
                    "float"
                ]
            }
        },
        "NoArgCall.__call__": {
            "name": "__call__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_can_subscribe_to_startup_hooks.inc_startup_once_calls": {
            "name": "inc_startup_once_calls",
            "location": 152,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_subscribe_to_startup_hooks.inc_startup_calls": {
            "name": "inc_startup_calls",
            "location": 155,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_can_subscribe_to_startup_hooks.inc_startup_complete_calls": {
            "name": "inc_startup_complete_calls",
            "location": 158,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "qtile-master/test/test_images.py": {
        "path_n_bytes_image": {
            "name": "path_n_bytes_image",
            "location": 26,
            "return": [
                "tuple[str]",
                "str",
                "Callable",
                "bytes",
                "bool"
            ],
            "arguments": {
                "request": []
            }
        },
        "path_n_bytes_image_pngs": {
            "name": "path_n_bytes_image_pngs",
            "location": 37,
            "return": [
                "tuple[str]",
                "str",
                "Callable",
                "bytes",
                "bool"
            ],
            "arguments": {
                "request": []
            }
        },
        "png_img": {
            "name": "png_img",
            "location": 45,
            "return": [
                "str",
                "Tuple[str, str]",
                "Tuple[str]"
            ],
            "arguments": {}
        },
        "test_get_cairo_surface": {
            "name": "test_get_cairo_surface",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "path_n_bytes_image": [
                    "bytes"
                ]
            }
        },
        "test_get_cairo_surface_bad_input": {
            "name": "test_get_cairo_surface_bad_input",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "assert_approx_equal": {
            "name": "assert_approx_equal",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "vec0": [
                    "int",
                    "Callable",
                    "str"
                ],
                "vec1": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TestImg.test_init": {
            "name": "test_init",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path_n_bytes_image": []
            }
        },
        "TestImg.test_from_path": {
            "name": "test_from_path",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path_n_bytes_image": [
                    "str"
                ]
            }
        },
        "TestImg.test_setting": {
            "name": "test_setting",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "png_img": [
                    "str",
                    "float"
                ]
            }
        },
        "TestImg.test_equality": {
            "name": "test_equality",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "png_img": [
                    "bytes",
                    "lightbus.path.BusPath"
                ]
            }
        },
        "TestImg.test_setting_negative_size": {
            "name": "test_setting_negative_size",
            "location": 113,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "png_img": [
                    "bool",
                    "float"
                ]
            }
        },
        "TestImg.test_pattern": {
            "name": "test_pattern",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path_n_bytes_image": []
            }
        },
        "TestImg.test_pattern_resize": {
            "name": "test_pattern_resize",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path_n_bytes_image_pngs": []
            }
        },
        "TestImg.test_pattern_rotate": {
            "name": "test_pattern_rotate",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path_n_bytes_image": []
            }
        },
        "TestImgScale.test_scale": {
            "name": "test_scale",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "png_img": [
                    "int",
                    "str"
                ]
            }
        },
        "TestImgScale.test_scale_rounding": {
            "name": "test_scale_rounding",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "png_img": [
                    "int",
                    "str"
                ]
            }
        },
        "TestImgScale.test_scale_width_lock": {
            "name": "test_scale_width_lock",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "png_img": [
                    "int"
                ]
            }
        },
        "TestImgScale.test_scale_height_lock": {
            "name": "test_scale_height_lock",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "png_img": [
                    "int"
                ]
            }
        },
        "TestImgScale.test_scale_fail_lock": {
            "name": "test_scale_fail_lock",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "png_img": []
            }
        },
        "TestImgScale.test_scale_fail": {
            "name": "test_scale_fail",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "png_img": [
                    "str",
                    "float"
                ]
            }
        },
        "TestImgResize.test_resize": {
            "name": "test_resize",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "png_img": [
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "TestImgResize.test_resize_width": {
            "name": "test_resize_width",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "png_img": [
                    "int"
                ]
            }
        },
        "TestImgResize.test_resize_height": {
            "name": "test_resize_height",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "png_img": [
                    "int"
                ]
            }
        },
        "TestLoader.loader": {
            "name": "loader",
            "location": 211,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoader.test_audio_volume_muted": {
            "name": "test_audio_volume_muted",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loader": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestLoader.test_audio_volume_muted_png": {
            "name": "test_audio_volume_muted_png",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loader": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestLoader.test_load_file_missing": {
            "name": "test_load_file_missing",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loader": [
                    "str",
                    "dict"
                ]
            }
        }
    },
    "qtile-master/test/test_images2.py": {
        "get_imagemagick_version": {
            "name": "get_imagemagick_version",
            "location": 20,
            "return": [
                "Union[(List[int], Tuple[(int, int)])]"
            ],
            "arguments": {}
        },
        "should_skip": {
            "name": "should_skip",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "compare_images": {
            "name": "compare_images",
            "location": 57,
            "return": [
                "float"
            ],
            "arguments": {
                "test_img": [
                    "str",
                    "Optional[str]",
                    "Callable"
                ],
                "reference_img": [
                    "str",
                    "Optional[str]",
                    "Callable"
                ],
                "metric": [
                    "typing.Text",
                    "str",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "compare_images_all_metrics": {
            "name": "compare_images_all_metrics",
            "location": 82,
            "return": [
                "ImgDistortion"
            ],
            "arguments": {
                "test_img": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "reference_img": [
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "svg_img": {
            "name": "svg_img",
            "location": 95,
            "return": [
                "str",
                "Tuple[str, str]",
                "Tuple[str]"
            ],
            "arguments": {
                "request": []
            }
        },
        "comparison_images": {
            "name": "comparison_images",
            "location": 102,
            "return": [
                "str",
                "tuple"
            ],
            "arguments": {
                "svg_img": [
                    "bool",
                    "str"
                ]
            }
        },
        "distortion_bad": {
            "name": "distortion_bad",
            "location": 111,
            "return": [
                "str",
                "Tuple[str]",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "svg_img": [
                    "bool",
                    "str",
                    "int"
                ],
                "comparison_images": [
                    "str",
                    "Union[bool, str]"
                ]
            }
        },
        "assert_distortion_less_than": {
            "name": "assert_distortion_less_than",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "distortion": [
                    "int",
                    "Callable",
                    "str"
                ],
                "bad_distortion": [
                    "int",
                    "Callable",
                    "str"
                ],
                "factor": [
                    "float",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_svg_scaling": {
            "name": "test_svg_scaling",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "svg_img": [
                    "str",
                    "Dict[str, Sequence[Any]]"
                ],
                "distortion_bad": [],
                "comparison_images": [],
                "tmpdir": []
            }
        }
    },
    "qtile-master/test/test_ipc.py": {
        "test_ipc_json_encoder_supports_sets": {
            "name": "test_ipc_json_encoder_supports_sets",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ipc_json_throws_error_on_unsupported_field": {
            "name": "test_ipc_json_throws_error_on_unsupported_field",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ipc_marshall_error_on_unsupported_field": {
            "name": "test_ipc_marshall_error_on_unsupported_field",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "qtile-master/test/test_manager.py": {
        "test_screen_dim": {
            "name": "test_screen_dim",
            "location": 106,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "pathlib.Path"
                ]
            }
        },
        "test_clone_dim": {
            "name": "test_clone_dim",
            "location": 132,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "pathlib.Path"
                ]
            }
        },
        "test_to_screen": {
            "name": "test_to_screen",
            "location": 145,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": []
            }
        },
        "test_togroup": {
            "name": "test_togroup",
            "location": 170,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "bytes"
                ]
            }
        },
        "test_resize": {
            "name": "test_resize",
            "location": 194,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_minimal": {
            "name": "test_minimal",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "manager": [
                    "int"
                ]
            }
        },
        "test_events": {
            "name": "test_events",
            "location": 213,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "Sequence[str]"
                ]
            }
        },
        "test_keypress": {
            "name": "test_keypress",
            "location": 220,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": []
            }
        },
        "test_too_few_groups": {
            "name": "test_too_few_groups",
            "location": 236,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "Set[int]",
                    "List[str]",
                    "baseplate.lib.config.EndpointConfiguration"
                ]
            }
        },
        "test_immediate_chord": {
            "name": "test_immediate_chord",
            "location": 317,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": []
            }
        },
        "test_mode_chord": {
            "name": "test_mode_chord",
            "location": 344,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": []
            }
        },
        "test_chord_stack": {
            "name": "test_chord_stack",
            "location": 375,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": []
            }
        },
        "test_spawn": {
            "name": "test_spawn",
            "location": 418,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "int"
                ]
            }
        },
        "test_spawn_list": {
            "name": "test_spawn_list",
            "location": 424,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "int"
                ]
            }
        },
        "test_kill_window": {
            "name": "test_kill_window",
            "location": 430,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "Callable",
                    "float",
                    "Optional[int]"
                ]
            }
        },
        "test_kill_other": {
            "name": "test_kill_other",
            "location": 438,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_regression_groupswitch": {
            "name": "test_regression_groupswitch",
            "location": 460,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str"
                ]
            }
        },
        "test_next_layout": {
            "name": "test_next_layout",
            "location": 467,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "Iterable"
                ]
            }
        },
        "test_setlayout": {
            "name": "test_setlayout",
            "location": 480,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str"
                ]
            }
        },
        "test_to_layout_index": {
            "name": "test_to_layout_index",
            "location": 487,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str"
                ]
            }
        },
        "test_adddelgroup": {
            "name": "test_adddelgroup",
            "location": 499,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "bytes"
                ]
            }
        },
        "test_delgroup": {
            "name": "test_delgroup",
            "location": 522,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "antidote.providers.lazy.LazyCallProvider",
                    "str"
                ]
            }
        },
        "test_nextprevgroup": {
            "name": "test_nextprevgroup",
            "location": 531,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "Iterable[Tuple[int, int]]"
                ]
            }
        },
        "test_toggle_group": {
            "name": "test_toggle_group",
            "location": 541,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "tests.basilisp.helpers.CompileFn",
                    "Dict[str, Sequence[Any]]",
                    "str"
                ]
            }
        },
        "test_static": {
            "name": "test_static",
            "location": 553,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": []
            }
        },
        "test_match": {
            "name": "test_match",
            "location": 575,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "int"
                ]
            }
        },
        "test_default_float": {
            "name": "test_default_float",
            "location": 582,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str",
                    "int"
                ]
            }
        },
        "test_last_float_size": {
            "name": "test_last_float_size",
            "location": 611,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": []
            }
        },
        "test_float_max_min_combo": {
            "name": "test_float_max_min_combo",
            "location": 646,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "int",
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "test_toggle_fullscreen": {
            "name": "test_toggle_fullscreen",
            "location": 689,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "int",
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "test_toggle_max": {
            "name": "test_toggle_max",
            "location": 728,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "int",
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "test_toggle_min": {
            "name": "test_toggle_min",
            "location": 765,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "int",
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "test_toggle_floating": {
            "name": "test_toggle_floating",
            "location": 804,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "List[str]"
                ]
            }
        },
        "test_floating_focus": {
            "name": "test_floating_focus",
            "location": 820,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "int",
                    "str"
                ]
            }
        },
        "test_move_floating": {
            "name": "test_move_floating",
            "location": 867,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": []
            }
        },
        "test_one_screen": {
            "name": "test_one_screen",
            "location": 911,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "int"
                ]
            }
        },
        "test_two_screens": {
            "name": "test_two_screens",
            "location": 917,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "int"
                ]
            }
        },
        "test_focus_stays_on_layout_switch": {
            "name": "test_focus_stays_on_layout_switch",
            "location": 922,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "solo.config.app.Config"
                ]
            }
        },
        "test_map_request": {
            "name": "test_map_request",
            "location": 940,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_unmap": {
            "name": "test_unmap",
            "location": 953,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str",
                    "solo.config.app.Config"
                ]
            }
        },
        "test_setgroup": {
            "name": "test_setgroup",
            "location": 980,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str"
                ]
            }
        },
        "test_unmap_noscreen": {
            "name": "test_unmap_noscreen",
            "location": 1002,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "bytes",
                    "Iterable"
                ]
            }
        },
        "test_dx": {
            "name": "test_dx",
            "location": 1020,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dwidth": {
            "name": "test_dwidth",
            "location": 1026,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dy": {
            "name": "test_dy",
            "location": 1034,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dheight": {
            "name": "test_dheight",
            "location": 1040,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_labelgroup": {
            "name": "test_labelgroup",
            "location": 1049,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "tests.basilisp.helpers.CompileFn",
                    "bytes",
                    "int"
                ]
            }
        },
        "test_change_loglevel": {
            "name": "test_change_loglevel",
            "location": 1064,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "pathlib.Path",
                    "Callable"
                ]
            }
        },
        "test_switch_groups_cursor_warp": {
            "name": "test_switch_groups_cursor_warp",
            "location": 1084,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_nospawn": []
            }
        },
        "test_cmd_reload_config": {
            "name": "test_cmd_reload_config",
            "location": 1126,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_nospawn": [
                    "pathlib.Path",
                    "Optional[str]"
                ]
            }
        },
        "test_windows_from_commands": {
            "name": "test_windows_from_commands",
            "location": 1212,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "bytes",
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "interface.github.GithubInterface"
                ]
            }
        },
        "test_widget_duplicate_names": {
            "name": "test_widget_duplicate_names",
            "location": 1247,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str"
                ]
            }
        },
        "test_widget_duplicate_warnings": {
            "name": "test_widget_duplicate_warnings",
            "location": 1274,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "logger": [
                    "logging.Logger"
                ],
                "manager": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_resize.run": {
            "name": "run",
            "location": 198,
            "return": [
                "str",
                "Union[str, Dict]",
                "bool"
            ],
            "arguments": {}
        },
        "TScreen.set_group": {
            "name": "set_group",
            "location": 1016,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "int",
                    "Callable[..., Awaitable]",
                    "pathlib.Path",
                    "str",
                    "Callable"
                ],
                "save_prev": [
                    "bool",
                    "int",
                    "Callable[..., Awaitable]",
                    "pathlib.Path",
                    "str",
                    "Callable"
                ]
            }
        },
        "test_cmd_reload_config.assert_dd_appeared": {
            "name": "assert_dd_appeared",
            "location": 1132,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "qtile-master/test/test_migrate.py": {
        "run_qtile_migrate": {
            "name": "run_qtile_migrate",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Dict[str, str]]",
                    "dict",
                    "Dict[str, Any]",
                    "IO",
                    "int",
                    "Union[Dict, List]"
                ]
            }
        },
        "hash_file": {
            "name": "hash_file",
            "location": 20,
            "return": [
                "bytes"
            ],
            "arguments": {
                "p": [
                    "str"
                ]
            }
        },
        "test_migrate_default_config_noop": {
            "name": "test_migrate_default_config_noop",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "read_file": {
            "name": "read_file",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "p": [
                    "str"
                ]
            }
        },
        "test_extra_files_are_ok": {
            "name": "test_extra_files_are_ok",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "check_migrate": {
            "name": "check_migrate",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "orig": [
                    "str",
                    "BinaryIO",
                    "bytes"
                ],
                "expected": [
                    "str"
                ]
            }
        },
        "test_window_name_change": {
            "name": "test_window_name_change",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_modules_renames": {
            "name": "test_modules_renames",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tile_master_windows": {
            "name": "test_tile_master_windows",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_threaded_poll_text": {
            "name": "test_threaded_poll_text",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pacman": {
            "name": "test_pacman",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_crypto": {
            "name": "test_crypto",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_main": {
            "name": "test_main",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_new_at_current_to_new_client_position": {
            "name": "test_new_at_current_to_new_client_position",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_windowtogroup_groupName_argument": {
            "name": "test_windowtogroup_groupName_argument",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "qtile-master/test/test_popup.py": {
        "test_popup_focus": {
            "name": "test_popup_focus",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "manager": [
                    "int",
                    "List[str]"
                ]
            }
        }
    },
    "qtile-master/test/test_qtile_cmd.py": {
        "run_qtile_cmd": {
            "name": "run_qtile_cmd",
            "location": 92,
            "return": [
                "Set[str]",
                "str",
                "IO[str]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "args": []
            }
        },
        "test_qtile_cmd": {
            "name": "test_qtile_cmd",
            "location": 102,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": []
            }
        },
        "test_display_kb": {
            "name": "test_display_kb",
            "location": 141,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "qtile-master/test/test_restart.py": {
        "test_restart_hook_and_state": {
            "name": "test_restart_hook_and_state",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_nospawn": [],
                "request": [
                    "str",
                    "libqtile.command_clienInteractiveCommandClient"
                ],
                "backend": [
                    "str",
                    "libqtile.command_clienInteractiveCommandClient"
                ],
                "backend_name": []
            }
        },
        "test_restart_hook_and_state.inc_restart_call": {
            "name": "inc_restart_call",
            "location": 95,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "qtile-master/test/test_scratchpad.py": {
        "spawn_cmd": {
            "name": "spawn_cmd",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "title": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "is_spawned": {
            "name": "is_spawned",
            "location": 80,
            "return": [
                "bool"
            ],
            "arguments": {
                "manager": [
                    "str",
                    "Set[str]",
                    "Callable[..., T]"
                ],
                "name": [
                    "str",
                    "Set[str]",
                    "Callable[..., T]"
                ],
                "scratch_group": [
                    "typing.Text",
                    "str",
                    "Set[str]",
                    "Callable[..., T]"
                ]
            }
        },
        "is_killed": {
            "name": "is_killed",
            "location": 86,
            "return": [
                "bool"
            ],
            "arguments": {
                "manager": [
                    "Set[str]",
                    "dict",
                    "str",
                    "Dict[str, 'LabwareDefinition']",
                    "Optional[str]",
                    "Callable[[str], str]"
                ],
                "name": [
                    "Set[str]",
                    "dict",
                    "str",
                    "Dict[str, 'LabwareDefinition']",
                    "Optional[str]",
                    "Callable[[str], str]"
                ]
            }
        },
        "test_sratchpad_with_matcher": {
            "name": "test_sratchpad_with_matcher",
            "location": 93,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "tests.basilisp.helpers.CompileFn",
                    "str"
                ]
            }
        },
        "test_toggling_single": {
            "name": "test_toggling_single",
            "location": 122,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_toggling": {
            "name": "test_toggling",
            "location": 155,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "tests.basilisp.helpers.CompileFn",
                    "str"
                ]
            }
        },
        "test_focus_cycle": {
            "name": "test_focus_cycle",
            "location": 183,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "tests.basilisp.helpers.CompileFn",
                    "Dict[str, Sequence[Any]]",
                    "Iterable[Tuple[int, int]]"
                ]
            }
        },
        "test_focus_lost_hide": {
            "name": "test_focus_lost_hide",
            "location": 210,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "tests.basilisp.helpers.CompileFn",
                    "Dict[str, Sequence[Any]]",
                    "Iterable[Tuple[int, int]]"
                ]
            }
        },
        "test_kill": {
            "name": "test_kill",
            "location": 262,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "bool",
                    "Callable",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "test_floating_toggle": {
            "name": "test_floating_toggle",
            "location": 285,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "bool",
                    "Callable",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "test_stepping_between_groups_should_skip_scratchpads": {
            "name": "test_stepping_between_groups_should_skip_scratchpads",
            "location": 312,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "pathlib.Path"
                ]
            }
        }
    },
    "qtile-master/test/test_sh.py": {
        "test_columnize": {
            "name": "test_columnize",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": []
            }
        },
        "test_ls": {
            "name": "test_ls",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": []
            }
        },
        "test_do_cd": {
            "name": "test_do_cd",
            "location": 82,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": []
            }
        },
        "test_call": {
            "name": "test_call",
            "location": 95,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": []
            }
        },
        "test_complete": {
            "name": "test_complete",
            "location": 112,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": []
            }
        },
        "test_help": {
            "name": "test_help",
            "location": 130,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": []
            }
        }
    },
    "qtile-master/test/test_utils.py": {
        "test_rgb_from_hex_number": {
            "name": "test_rgb_from_hex_number",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_rgb_from_hex_string": {
            "name": "test_rgb_from_hex_string",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_rgb_from_hex_number_with_alpha": {
            "name": "test_rgb_from_hex_number_with_alpha",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_rgb_from_hex_string_with_alpha": {
            "name": "test_rgb_from_hex_string_with_alpha",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_rgb_from_hex_number_with_hex_alpha": {
            "name": "test_rgb_from_hex_number_with_hex_alpha",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_rgb_from_hex_string_with_hex_alpha": {
            "name": "test_rgb_from_hex_string_with_hex_alpha",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_rgb_from_base10_tuple": {
            "name": "test_rgb_from_base10_tuple",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_rgb_from_base10_tuple_with_alpha": {
            "name": "test_rgb_from_base10_tuple_with_alpha",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_rgb_from_3_digit_hex_number": {
            "name": "test_rgb_from_3_digit_hex_number",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_rgb_from_3_digit_hex_string": {
            "name": "test_rgb_from_3_digit_hex_string",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_rgb_from_3_digit_hex_number_with_alpha": {
            "name": "test_rgb_from_3_digit_hex_number_with_alpha",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_rgb_from_3_digit_hex_string_with_alpha": {
            "name": "test_rgb_from_3_digit_hex_string_with_alpha",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_has_transparency": {
            "name": "test_has_transparency",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_remove_transparency": {
            "name": "test_remove_transparency",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_scrub_to_utf8": {
            "name": "test_scrub_to_utf8",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_guess_terminal_accepts_a_preference": {
            "name": "test_guess_terminal_accepts_a_preference",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path",
                    "Union[str, pathlib.Path]",
                    "Union[pathlib.Path, str]"
                ]
            }
        },
        "test_guess_terminal_accepts_a_list_of_preferences": {
            "name": "test_guess_terminal_accepts_a_list_of_preferences",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path",
                    "Union[str, pathlib.Path]",
                    "Union[pathlib.Path, str]",
                    "pathlib.PurePath"
                ]
            }
        },
        "test_guess_terminal_falls_back_to_defaults": {
            "name": "test_guess_terminal_falls_back_to_defaults",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path",
                    "Union[str, pathlib.Path]",
                    "Union[pathlib.Path, str]",
                    "pathlib.PurePath"
                ]
            }
        },
        "path": {
            "name": "path",
            "location": 133,
            "return": [
                "",
                "typing.Generator[TemporaryDirectory]"
            ],
            "arguments": {
                "monkeypatch": [
                    "str"
                ]
            }
        },
        "TestScanFiles.test_audio_volume_muted": {
            "name": "test_audio_volume_muted",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestScanFiles.test_only_svg": {
            "name": "test_only_svg",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestScanFiles.test_multiple": {
            "name": "test_multiple",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/test/test_when.py": {
        "test_when": {
            "name": "test_when",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str"
                ]
            }
        }
    },
    "qtile-master/test/test_window.py": {
        "test_info": {
            "name": "test_info",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": []
            }
        },
        "test_is_visible_hidden": {
            "name": "test_is_visible_hidden",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "dict",
                    "str"
                ]
            }
        },
        "test_is_visible_minimized": {
            "name": "test_is_visible_minimized",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "dict"
                ]
            }
        },
        "test_margin": {
            "name": "test_margin",
            "location": 66,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": []
            }
        },
        "test_no_size_hint": {
            "name": "test_no_size_hint",
            "location": 92,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_togroup_toggle": {
            "name": "test_togroup_toggle",
            "location": 108,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "Callable",
                    "str"
                ]
            }
        },
        "bring_front_click": {
            "name": "bring_front_click",
            "location": 149,
            "return": [
                "int",
                "list"
            ],
            "arguments": {
                "request": [
                    "Callable"
                ]
            }
        },
        "test_bring_front_click": {
            "name": "test_bring_front_click",
            "location": 162,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "int",
                    "str"
                ],
                "bring_front_click": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_center_window": {
            "name": "test_center_window",
            "location": 204,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "Dict[str, Any]",
                    "bytes",
                    "bool"
                ]
            }
        }
    },
    "qtile-master/test/__init__.py": {},
    "qtile-master/test/backend/test_backend.py": {
        "test_get_core_bad": {
            "name": "test_get_core_bad",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "qtile-master/test/backend/wayland/conftest.py": {
        "wayland_environment": {
            "name": "wayland_environment",
            "location": 23,
            "return": [
                "",
                "typing.Generator[dict[typing.Text, typing.Text]]"
            ],
            "arguments": {
                "outputs": [
                    "str",
                    "bytes"
                ]
            }
        },
        "WaylandBackend.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "str",
                    "Mapping[str, str]",
                    "dict",
                    "List[str]"
                ],
                "args": [
                    "tuple"
                ]
            }
        },
        "WaylandBackend.create": {
            "name": "create",
            "location": 39,
            "return": [
                "libqtile.backend.wayland.core.Core"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaylandBackend.configure": {
            "name": "configure",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": [
                    "float",
                    "List[deque]",
                    "dict",
                    "bytes"
                ]
            }
        },
        "WaylandBackend.fake_click": {
            "name": "fake_click",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "str",
                    "int"
                ],
                "y": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "WaylandBackend.get_all_windows": {
            "name": "get_all_windows",
            "location": 62,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/test/backend/x11/conftest.py": {
        "can_connect_x11": {
            "name": "can_connect_x11",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {
                "disp": [
                    "typing.Text",
                    "int",
                    "str"
                ]
            }
        },
        "xvfb": {
            "name": "xvfb",
            "location": 36,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {}
        },
        "display": {
            "name": "display",
            "location": 46,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {}
        },
        "x11_environment": {
            "name": "x11_environment",
            "location": 149,
            "return": [
                "",
                "typing.Generator[Xephyr]"
            ],
            "arguments": {
                "outputs": [
                    "str",
                    "bool",
                    "int",
                    "Container[str]",
                    "Union[str, IO[str]]"
                ]
            }
        },
        "xmanager": {
            "name": "xmanager",
            "location": 157,
            "return": [
                "",
                "typing.Generator[TestManager]"
            ],
            "arguments": {
                "request": [],
                "xephyr": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "conn": {
            "name": "conn",
            "location": 174,
            "return": [
                "",
                "typing.Generator[Connection]"
            ],
            "arguments": {
                "xmanager": [
                    "str"
                ]
            }
        },
        "Xephyr.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "outputs": [
                    "bool",
                    "int",
                    "set",
                    "dict",
                    "List[str]"
                ],
                "xoffset": [
                    "None",
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "Optional[float]",
                    "int"
                ]
            }
        },
        "Xephyr.__enter__": {
            "name": "__enter__",
            "location": 70,
            "return": [
                "Xephyr"
            ],
            "arguments": {
                "self": [
                    "_TXephyr"
                ]
            }
        },
        "Xephyr.__exit__": {
            "name": "__exit__",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "_exc_val": [
                    "Optional[BaseException]"
                ],
                "_exc_tb": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ]
            }
        },
        "Xephyr.start_xephyr": {
            "name": "start_xephyr",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Xephyr.stop_xephyr": {
            "name": "stop_xephyr",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "XBackend.__init__": {
            "name": "__init__",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "str",
                    "Mapping[str, str]",
                    "dict",
                    "List[str]"
                ],
                "args": [
                    "tuple"
                ]
            }
        },
        "XBackend.fake_click": {
            "name": "fake_click",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int"
                ],
                "y": [
                    "float",
                    "int"
                ]
            }
        },
        "XBackend.get_all_windows": {
            "name": "get_all_windows",
            "location": 201,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/test/backend/x11/test_window.py": {
        "test_kill_via_message": {
            "name": "test_kill_via_message",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "xmanager": [
                    "str",
                    "float",
                    "Callable",
                    "Optional[int]",
                    "cmk.utils.structured_data.StructuredDataTree"
                ],
                "conn": [
                    "int"
                ]
            }
        },
        "test_change_state_via_message": {
            "name": "test_change_state_via_message",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "xmanager": [
                    "Dict[str, Any]"
                ],
                "conn": [
                    "int"
                ]
            }
        },
        "test_default_float_hints": {
            "name": "test_default_float_hints",
            "location": 64,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "xmanager": [
                    "Dict[str, Sequence[Any]]"
                ],
                "conn": [
                    "Iterable[Any]",
                    "bool"
                ]
            }
        },
        "test_user_position": {
            "name": "test_user_position",
            "location": 122,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "xmanager": [
                    "tests.basilisp.helpers.CompileFn",
                    "List[str]"
                ],
                "conn": []
            }
        },
        "wait_for_focus_events": {
            "name": "wait_for_focus_events",
            "location": 148,
            "return": [
                "bool",
                "tuple[bool]"
            ],
            "arguments": {
                "conn": [
                    "str"
                ]
            }
        },
        "test_only_one_focus": {
            "name": "test_only_one_focus",
            "location": 168,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "xmanager": [
                    "str"
                ],
                "conn": [
                    "str"
                ]
            }
        },
        "test_only_wm_protocols_focus": {
            "name": "test_only_wm_protocols_focus",
            "location": 209,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "xmanager": [
                    "str"
                ],
                "conn": [
                    "str"
                ]
            }
        },
        "test_only_input_hint_focus": {
            "name": "test_only_input_hint_focus",
            "location": 249,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "xmanager": [
                    "str",
                    "cmk.utils.type_defs.UserId"
                ],
                "conn": [
                    "str"
                ]
            }
        },
        "test_no_focus": {
            "name": "test_no_focus",
            "location": 279,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "xmanager": [],
                "conn": [
                    "str"
                ]
            }
        },
        "test_hints_setting_unsetting": {
            "name": "test_hints_setting_unsetting",
            "location": 306,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "xmanager": [],
                "conn": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_strut_handling": {
            "name": "test_strut_handling",
            "location": 352,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "xmanager": [
                    "Dict[str, Any]",
                    "dict"
                ],
                "conn": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "float"
                ]
            }
        },
        "test_cursor_warp": {
            "name": "test_cursor_warp",
            "location": 457,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "xmanager": [
                    "str"
                ],
                "conn": []
            }
        },
        "test_click_focus_screen": {
            "name": "test_click_focus_screen",
            "location": 488,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "xmanager": []
            }
        },
        "test_min_size_hint": {
            "name": "test_min_size_hint",
            "location": 508,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "xmanager": [
                    "str",
                    "Dict[str, Sequence[Any]]"
                ],
                "conn": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_min_size_hint_no_flag": {
            "name": "test_min_size_hint_no_flag",
            "location": 541,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "xmanager": [
                    "str",
                    "Dict[str, Sequence[Any]]"
                ],
                "conn": [
                    "tests.basilisp.helpers.CompileFn",
                    "str"
                ]
            }
        },
        "test_max_size_hint": {
            "name": "test_max_size_hint",
            "location": 573,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "xmanager": [
                    "str",
                    "Dict[str, Sequence[Any]]"
                ],
                "conn": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_max_size_hint_no_flag": {
            "name": "test_max_size_hint_no_flag",
            "location": 606,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "xmanager": [
                    "str",
                    "Dict[str, Sequence[Any]]"
                ],
                "conn": [
                    "tests.basilisp.helpers.CompileFn",
                    "str"
                ]
            }
        },
        "test_both_size_hints": {
            "name": "test_both_size_hints",
            "location": 638,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "xmanager": [
                    "str",
                    "Dict[str, Sequence[Any]]"
                ],
                "conn": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_inspect_window": {
            "name": "test_inspect_window",
            "location": 671,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "xmanager": []
            }
        },
        "test_multiple_borders": {
            "name": "test_multiple_borders",
            "location": 687,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "xmanager": []
            }
        },
        "test_net_frame_extents": {
            "name": "test_net_frame_extents",
            "location": 718,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "xmanager": [],
                "conn": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_net_wm_state_focused": {
            "name": "test_net_wm_state_focused",
            "location": 735,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "xmanager": [],
                "conn": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_default_float_hints.size_hints": {
            "name": "size_hints",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_user_position.user_position_window": {
            "name": "user_position_window",
            "location": 125,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_only_one_focus.both_wm_take_focus_and_input_hint": {
            "name": "both_wm_take_focus_and_input_hint",
            "location": 171,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_only_wm_protocols_focus.only_wm_protocols_focus": {
            "name": "only_wm_protocols_focus",
            "location": 212,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_only_input_hint_focus.only_input_hint": {
            "name": "only_input_hint",
            "location": 252,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_no_focus.no_focus": {
            "name": "no_focus",
            "location": 282,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_hints_setting_unsetting.no_input_hint": {
            "name": "no_input_hint",
            "location": 309,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_strut_handling.has_struts": {
            "name": "has_struts",
            "location": 355,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_strut_handling.with_gaps_left": {
            "name": "with_gaps_left",
            "location": 362,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_strut_handling.with_gaps_bottom": {
            "name": "with_gaps_bottom",
            "location": 369,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_strut_handling.test_initial_state": {
            "name": "test_initial_state",
            "location": 376,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_min_size_hint.size_hints": {
            "name": "size_hints",
            "location": 511,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_min_size_hint_no_flag.size_hints": {
            "name": "size_hints",
            "location": 544,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_max_size_hint.size_hints": {
            "name": "size_hints",
            "location": 576,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_max_size_hint_no_flag.size_hints": {
            "name": "size_hints",
            "location": 609,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_both_size_hints.size_hints": {
            "name": "size_hints",
            "location": 641,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_net_frame_extents.assert_frame": {
            "name": "assert_frame",
            "location": 719,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "wid": [
                    "str",
                    "bool",
                    "Optional[cmk.utils.type_defs.HostAddress]",
                    "float"
                ],
                "frame": [
                    "float",
                    "T",
                    "metrics_backend.utils.Address",
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "test_net_wm_state_focused.assert_state_focused": {
            "name": "assert_state_focused",
            "location": 738,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "wid": [
                    "bool",
                    "Optional[dict]",
                    "dict"
                ],
                "has_state": [
                    "dict",
                    "str"
                ]
            }
        }
    },
    "qtile-master/test/backend/x11/test_xcbq.py": {
        "test_new_window": {
            "name": "test_new_window",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "conn": []
            }
        },
        "test_masks": {
            "name": "test_masks",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_translate_masks": {
            "name": "test_translate_masks",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "qtile-master/test/backend/x11/test_xcore.py": {
        "test_get_core_x11": {
            "name": "test_get_core_x11",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "display": [
                    "str",
                    "Callable"
                ]
            }
        },
        "test_keys": {
            "name": "test_keys",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "display": [
                    "bool",
                    "int",
                    "bytes",
                    "Callable[[], bytes]"
                ]
            }
        },
        "test_no_two_qtiles": {
            "name": "test_no_two_qtiles",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "xmanager": [
                    "Tuple[float, float, float, float, float]",
                    "float",
                    "int"
                ]
            }
        },
        "test_color_pixel": {
            "name": "test_color_pixel",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "xmanager": [
                    "float"
                ]
            }
        },
        "test_net_client_list": {
            "name": "test_net_client_list",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "xmanager": [
                    "Exception"
                ],
                "conn": [
                    "bool"
                ]
            }
        },
        "test_net_client_list.assert_clients": {
            "name": "assert_clients",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "number": [
                    "bool",
                    "str",
                    "dict"
                ]
            }
        }
    },
    "qtile-master/test/backend/x11/__init__.py": {},
    "qtile-master/test/configs/basic.py": {},
    "qtile-master/test/configs/reloading.py": {},
    "qtile-master/test/configs/syntaxerr.py": {},
    "qtile-master/test/core/test_lifecycle.py": {
        "fake_os_execv": {
            "name": "fake_os_execv",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "executable": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "args": []
            }
        },
        "no_op": {
            "name": "no_op",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "patched_lifecycle": {
            "name": "patched_lifecycle",
            "location": 42,
            "return": [
                "",
                "typing.Generator[LifeCycle]"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "bool",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "test_restart_behaviour": {
            "name": "test_restart_behaviour",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "patched_lifecycle": [
                    "str"
                ],
                "caplog": [
                    "str",
                    "float"
                ]
            }
        },
        "test_terminate_behavior": {
            "name": "test_terminate_behavior",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "patched_lifecycle": [
                    "str",
                    "float"
                ],
                "caplog": [
                    "str",
                    "float"
                ]
            }
        },
        "test_none_behavior": {
            "name": "test_none_behavior",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "patched_lifecycle": [],
                "caplog": [
                    "bool",
                    "Dict[str, float]",
                    "Iterable[Any]",
                    "str"
                ]
            }
        }
    },
    "qtile-master/test/core/__init__.py": {},
    "qtile-master/test/extension/test_base.py": {
        "test_valid_colours": {
            "name": "test_valid_colours",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Callable",
                    "bool",
                    "dict"
                ],
                "expected": [
                    "bool",
                    "str",
                    "int",
                    "Union[str, int]"
                ]
            }
        },
        "test_valid_colours_extension_defaults": {
            "name": "test_valid_colours_extension_defaults",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "test_base_methods": {
            "name": "test_base_methods",
            "location": 61,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_run_command": {
            "name": "test_run_command",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Optional[Dict[str, Any]]",
                    "bool"
                ]
            }
        },
        "test_run_command.fake_popen": {
            "name": "fake_popen",
            "location": 76,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cmd": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "qtile-master/test/extension/test_command_set.py": {
        "fake_qtile": {
            "name": "fake_qtile",
            "location": 29,
            "return": [
                "",
                "typing.Generator[FakeQtile]"
            ],
            "arguments": {}
        },
        "log_extension_output": {
            "name": "log_extension_output",
            "location": 38,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "int",
                    "dict",
                    "Sequence[str]",
                    "bool"
                ]
            }
        },
        "test_command_set_valid_command": {
            "name": "test_command_set_valid_command",
            "location": 57,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "caplog": [
                    "pypi2nix.logger.Logger",
                    "logging.Logger"
                ],
                "fake_qtile": []
            }
        },
        "test_command_set_invalid_command": {
            "name": "test_command_set_invalid_command",
            "location": 70,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "caplog": [
                    "str",
                    "Union[int, float]",
                    "float",
                    "logging.LogRecord"
                ],
                "fake_qtile": []
            }
        },
        "log_extension_output.fake_popen": {
            "name": "fake_popen",
            "location": 41,
            "return": [
                "PopenObj",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cmd": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "fake_qtile.FakeQtile.cmd_spawn": {
            "name": "cmd_spawn",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "T",
                    "str"
                ]
            }
        },
        "log_extension_output.fake_popen.PopenObj.communicate": {
            "name": "communicate",
            "location": 43,
            "return": [
                "list[typing.Optional[bytes]]",
                "int",
                "list[None]",
                "dict",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "value_in": [
                    "str",
                    "dict",
                    "list"
                ]
            }
        }
    },
    "qtile-master/test/extension/test_dmenu.py": {
        "test_dmenu_configuration_options": {
            "name": "test_dmenu_configuration_options",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dmenu_run": {
            "name": "test_dmenu_run",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Optional[Dict[str, Any]]",
                    "bool"
                ]
            }
        },
        "test_dmenurun_extension": {
            "name": "test_dmenurun_extension",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_j4dmenu_configuration_options": {
            "name": "test_j4dmenu_configuration_options",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dmenu_run.fake_popen": {
            "name": "fake_popen",
            "location": 63,
            "return": [
                "PopenObj",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cmd": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_dmenu_run.fake_popen.PopenObj.communicate": {
            "name": "communicate",
            "location": 65,
            "return": [
                "bool",
                "list[None]"
            ],
            "arguments": {
                "self": [],
                "value_in": [
                    "Optional[T]",
                    "Optional[str]",
                    "Optional[bool]",
                    "Dict[str, Any]",
                    "T"
                ]
            }
        }
    },
    "qtile-master/test/extension/test_window_list.py": {
        "extension_manager": {
            "name": "extension_manager",
            "location": 31,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "monkeypatch": [
                    "bool",
                    "str",
                    "Iterable[T]",
                    "int"
                ],
                "manager_nospawn": [
                    "Sequence[int]",
                    "int",
                    "list",
                    "str"
                ]
            }
        },
        "test_window_list": {
            "name": "test_window_list",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "extension_manager": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "Callable"
                ]
            }
        },
        "extension_manager.fake_popen": {
            "name": "fake_popen",
            "location": 35,
            "return": [
                "PopenObj",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cmd": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "extension_manager.fake_popen.PopenObj.communicate": {
            "name": "communicate",
            "location": 37,
            "return": [
                "bool",
                "list[None]"
            ],
            "arguments": {
                "self": [],
                "value_in": [
                    "Optional[T]",
                    "Optional[str]",
                    "Optional[bool]",
                    "Dict[str, Any]",
                    "T"
                ]
            }
        }
    },
    "qtile-master/test/extension/__init__.py": {},
    "qtile-master/test/layouts/layout_utils.py": {
        "assert_focused": {
            "name": "assert_focused",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "Callable"
                ]
            }
        },
        "assert_dimensions": {
            "name": "assert_dimensions",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "List[str]",
                    "List[int]"
                ],
                "y": [
                    "int",
                    "List[str]",
                    "str"
                ],
                "w": [
                    "int",
                    "Optional[List[str]]",
                    "Set[str]",
                    "bool"
                ],
                "h": [
                    "int",
                    "Optional[List[str]]",
                    "Set[str]",
                    "bool"
                ],
                "win": [
                    "Optional[Any]",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "Optional[bool]",
                    "Optional[float]",
                    "Optional[int]"
                ]
            }
        },
        "assert_dimensions_fit": {
            "name": "assert_dimensions_fit",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "List[str]",
                    "List[int]"
                ],
                "y": [
                    "int",
                    "List[str]",
                    "str"
                ],
                "w": [
                    "int",
                    "Optional[List[str]]",
                    "Set[str]",
                    "bool"
                ],
                "h": [
                    "int",
                    "Optional[List[str]]",
                    "Set[str]",
                    "bool"
                ],
                "win": [
                    "Optional[Any]",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "Optional[bool]",
                    "Optional[float]",
                    "Optional[int]"
                ]
            }
        },
        "assert_focus_path": {
            "name": "assert_focus_path",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "assert_focus_path_unordered": {
            "name": "assert_focus_path_unordered",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/test/layouts/test_base.py": {
        "test_base_client_position_bottom": {
            "name": "test_base_client_position_bottom",
            "location": 80,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str",
                    "Exception"
                ]
            }
        },
        "test_base_client_position_top": {
            "name": "test_base_client_position_top",
            "location": 87,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str",
                    "Exception"
                ]
            }
        },
        "DummyLayout.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DummyLayout.add": {
            "name": "add",
            "location": 38,
            "return": [
                "Dict[str, Any]",
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "dict",
                    "bool"
                ]
            }
        },
        "DummyLayout.configure": {
            "name": "configure",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "bool",
                    "int",
                    "Optional[Dict]",
                    "List[int]"
                ],
                "screen_rect": [
                    "str",
                    "bool",
                    "int",
                    "Optional[Dict]",
                    "List[int]"
                ]
            }
        }
    },
    "qtile-master/test/layouts/test_bsp.py": {
        "test_bsp_window_focus_cycle": {
            "name": "test_bsp_window_focus_cycle",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str",
                    "Exception"
                ]
            }
        },
        "test_bsp_margin_on_single": {
            "name": "test_bsp_margin_on_single",
            "location": 70,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str"
                ]
            }
        }
    },
    "qtile-master/test/layouts/test_columns.py": {
        "test_columns_window_focus_cycle": {
            "name": "test_columns_window_focus_cycle",
            "location": 55,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str",
                    "Exception"
                ]
            }
        },
        "test_columns_swap_column_left": {
            "name": "test_columns_swap_column_left",
            "location": 79,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "signingscripsrc.signingscripvendored.mozbuild.mozbuild.tesfrontend.test_contexTestPaths.setUpClass.Config",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_columns_swap_column_right": {
            "name": "test_columns_swap_column_right",
            "location": 113,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str"
                ]
            }
        },
        "test_columns_margins_single": {
            "name": "test_columns_margins_single",
            "location": 146,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "Callable"
                ]
            }
        }
    },
    "qtile-master/test/layouts/test_common.py": {
        "test_window_order_fullscreen": {
            "name": "test_window_order_fullscreen",
            "location": 155,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "Exception",
                    "Dict[str, Any]",
                    "str",
                    "solo.config.app.Config"
                ]
            }
        },
        "test_window_types": {
            "name": "test_window_types",
            "location": 178,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "Callable"
                ]
            }
        },
        "test_focus_cycle": {
            "name": "test_focus_cycle",
            "location": 196,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str",
                    "solo.config.app.Config"
                ]
            }
        },
        "test_focus_back": {
            "name": "test_focus_back",
            "location": 212,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str",
                    "Callable"
                ]
            }
        },
        "test_focus_change_event": {
            "name": "test_focus_change_event",
            "location": 248,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "int"
                ]
            }
        },
        "test_remove": {
            "name": "test_remove",
            "location": 311,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str",
                    "solo.config.app.Config"
                ]
            }
        },
        "test_remove_floating": {
            "name": "test_remove_floating",
            "location": 353,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str",
                    "solo.config.app.Config",
                    "int"
                ]
            }
        },
        "test_desktop_notifications": {
            "name": "test_desktop_notifications",
            "location": 440,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "int",
                    "Mapping[str, str]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "test_only_uses_delegated_screen_rect": {
            "name": "test_only_uses_delegated_screen_rect",
            "location": 492,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "bytes",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_cycle_layouts": {
            "name": "test_cycle_layouts",
            "location": 500,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "signingscripsrc.signingscripvendored.mozbuild.mozbuild.tesfrontend.test_contexTestPaths.setUpClass.Config",
                    "str"
                ]
            }
        },
        "test_multiple_borders": {
            "name": "test_multiple_borders",
            "location": 540,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "AllLayoutsConfig.iter_layouts": {
            "name": "iter_layouts",
            "location": 63,
            "return": [
                "Generator[(Tuple[(str, Any)], Any, None)]"
            ],
            "arguments": {}
        },
        "AllLayoutsConfig.generate": {
            "name": "generate",
            "location": 79,
            "return": [
                "list"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type",
                    "dict",
                    "type"
                ]
            }
        },
        "AllDelegateLayoutsConfig.generate": {
            "name": "generate",
            "location": 93,
            "return": [
                "list"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type",
                    "dict"
                ]
            }
        },
        "AllLayoutsConfigEvents.__init__": {
            "name": "__init__",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllLayoutsConfigEvents.__init__._": {
            "name": "_",
            "location": 136,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "qtile-master/test/layouts/test_floating.py": {
        "test_float_next_prev_window": {
            "name": "test_float_next_prev_window",
            "location": 49,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "test_border_widths": {
            "name": "test_border_widths",
            "location": 76,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "Optional[str]"
                ]
            }
        }
    },
    "qtile-master/test/layouts/test_matrix.py": {
        "test_matrix_simple": {
            "name": "test_matrix_simple",
            "location": 55,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": []
            }
        },
        "test_matrix_navigation": {
            "name": "test_matrix_navigation",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str"
                ]
            }
        },
        "test_matrix_add_remove_columns": {
            "name": "test_matrix_add_remove_columns",
            "location": 92,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str"
                ]
            }
        },
        "test_matrix_window_focus_cycle": {
            "name": "test_matrix_window_focus_cycle",
            "location": 105,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str",
                    "Exception"
                ]
            }
        },
        "test_matrix_next_no_clients": {
            "name": "test_matrix_next_no_clients",
            "location": 125,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": []
            }
        },
        "test_matrix_previous_no_clients": {
            "name": "test_matrix_previous_no_clients",
            "location": 130,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": []
            }
        },
        "test_unknown_client": {
            "name": "test_unknown_client",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_deprecated_configuration": {
            "name": "test_deprecated_configuration",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "qtile-master/test/layouts/test_max.py": {
        "test_max_simple": {
            "name": "test_max_simple",
            "location": 60,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": []
            }
        },
        "test_max_updown": {
            "name": "test_max_updown",
            "location": 68,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "solo.config.app.Config",
                    "str"
                ]
            }
        },
        "test_max_remove": {
            "name": "test_max_remove",
            "location": 80,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "solo.config.app.Config"
                ]
            }
        },
        "test_max_window_focus_cycle": {
            "name": "test_max_window_focus_cycle",
            "location": 89,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str",
                    "Exception"
                ]
            }
        },
        "test_max_window_margins_and_borders": {
            "name": "test_max_window_margins_and_borders",
            "location": 109,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "ContextManager",
                    "bytes"
                ]
            }
        },
        "test_max_window_margins_and_borders.parse_margin": {
            "name": "parse_margin",
            "location": 110,
            "return": [
                "int",
                "tuple[int]",
                "bool",
                "str"
            ],
            "arguments": {
                "margin": [
                    "int",
                    "float",
                    "List[int]"
                ]
            }
        }
    },
    "qtile-master/test/layouts/test_ratiotile.py": {
        "test_ratiotile_add_windows": {
            "name": "test_ratiotile_add_windows",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": []
            }
        },
        "test_ratiotile_add_windows_golden_ratio": {
            "name": "test_ratiotile_add_windows_golden_ratio",
            "location": 178,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "bool"
                ]
            }
        },
        "test_ratiotile_basic": {
            "name": "test_ratiotile_basic",
            "location": 248,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str",
                    "Dict[str, Any]",
                    "Exception",
                    "solo.config.app.Config"
                ]
            }
        },
        "test_ratiotile_window_focus_cycle": {
            "name": "test_ratiotile_window_focus_cycle",
            "location": 275,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str",
                    "Exception"
                ]
            }
        },
        "test_ratiotile_alternative_calculation": {
            "name": "test_ratiotile_alternative_calculation",
            "location": 295,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "Dict[str, Sequence[Any]]"
                ]
            }
        },
        "test_shuffling": {
            "name": "test_shuffling",
            "location": 366,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "Dict[str, Sequence[Any]]"
                ]
            }
        },
        "test_resizing": {
            "name": "test_resizing",
            "location": 385,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "Dict[str, Sequence[Any]]"
                ]
            }
        },
        "test_shuffling.clients": {
            "name": "clients",
            "location": 367,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {}
        },
        "test_resizing.sizes": {
            "name": "sizes",
            "location": 386,
            "return": [
                "str",
                "bool",
                "IO[str]"
            ],
            "arguments": {}
        }
    },
    "qtile-master/test/layouts/test_slice.py": {
        "test_no_slice": {
            "name": "test_no_slice",
            "location": 80,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": []
            }
        },
        "test_slice_first": {
            "name": "test_slice_first",
            "location": 88,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str"
                ]
            }
        },
        "test_slice_last": {
            "name": "test_slice_last",
            "location": 96,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "Callable"
                ]
            }
        },
        "test_slice_focus": {
            "name": "test_slice_focus",
            "location": 104,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "test_all_slices": {
            "name": "test_all_slices",
            "location": 123,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "float",
                    "bool",
                    "Union[int, float]"
                ]
            }
        },
        "test_command_propagation": {
            "name": "test_command_propagation",
            "location": 144,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str",
                    "Dict[str, Any]",
                    "Tuple[str]"
                ]
            }
        }
    },
    "qtile-master/test/layouts/test_spiral.py": {
        "test_spiral_left": {
            "name": "test_spiral_left",
            "location": 66,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "Callable"
                ]
            }
        },
        "test_spiral_top": {
            "name": "test_spiral_top",
            "location": 80,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "Optional[str]"
                ]
            }
        },
        "test_spiral_right": {
            "name": "test_spiral_right",
            "location": 96,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "bool"
                ]
            }
        },
        "test_spiral_bottom": {
            "name": "test_spiral_bottom",
            "location": 113,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "bytes"
                ]
            }
        },
        "test_spiral_left_anticlockwise": {
            "name": "test_spiral_left_anticlockwise",
            "location": 131,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "Callable"
                ]
            }
        },
        "test_spiral_top_anticlockwise": {
            "name": "test_spiral_top_anticlockwise",
            "location": 145,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "Optional[str]"
                ]
            }
        },
        "test_spiral_right_anticlockwise": {
            "name": "test_spiral_right_anticlockwise",
            "location": 161,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "bool"
                ]
            }
        },
        "test_spiral_bottom_anticlockwise": {
            "name": "test_spiral_bottom_anticlockwise",
            "location": 178,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "bytes"
                ]
            }
        },
        "test_spiral_adjust_master_ratios": {
            "name": "test_spiral_adjust_master_ratios",
            "location": 196,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "float"
                ]
            }
        },
        "test_spiral_adjust_ratios": {
            "name": "test_spiral_adjust_ratios",
            "location": 214,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "Union[int, float]",
                    "str"
                ]
            }
        }
    },
    "qtile-master/test/layouts/test_stack.py": {
        "_stacks": {
            "name": "_stacks",
            "location": 58,
            "return": [
                "list"
            ],
            "arguments": {
                "manager": [
                    "bytes",
                    "str"
                ]
            }
        },
        "test_stack_commands": {
            "name": "test_stack_commands",
            "location": 68,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str",
                    "Iterable[int]"
                ]
            }
        },
        "test_stack_cmd_down": {
            "name": "test_stack_cmd_down",
            "location": 95,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str",
                    "Callable",
                    "bool"
                ]
            }
        },
        "test_stack_addremove": {
            "name": "test_stack_addremove",
            "location": 100,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": []
            }
        },
        "test_stack_rotation": {
            "name": "test_stack_rotation",
            "location": 120,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str"
                ]
            }
        },
        "test_stack_nextprev": {
            "name": "test_stack_nextprev",
            "location": 136,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "Optional[str]"
                ]
            }
        },
        "test_stack_window_removal": {
            "name": "test_stack_window_removal",
            "location": 174,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": []
            }
        },
        "test_stack_split": {
            "name": "test_stack_split",
            "location": 183,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "Exception",
                    "str",
                    "solo.config.app.Config",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_stack_shuffle": {
            "name": "test_stack_shuffle",
            "location": 195,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "bool",
                    "str",
                    "Iterable[int]"
                ]
            }
        },
        "test_stack_client_to": {
            "name": "test_stack_client_to",
            "location": 214,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "Exception",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_stack_info": {
            "name": "test_stack_info",
            "location": 228,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": []
            }
        },
        "test_stack_window_focus_cycle": {
            "name": "test_stack_window_focus_cycle",
            "location": 234,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str",
                    "Exception"
                ]
            }
        }
    },
    "qtile-master/test/layouts/test_tile.py": {
        "test_tile_updown": {
            "name": "test_tile_updown",
            "location": 60,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "int",
                    "str"
                ]
            }
        },
        "test_tile_nextprev": {
            "name": "test_tile_nextprev",
            "location": 72,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str",
                    "solo.config.app.Config"
                ]
            }
        },
        "test_tile_master_and_slave": {
            "name": "test_tile_master_and_slave",
            "location": 96,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str",
                    "solo.config.app.Config",
                    "Exception"
                ]
            }
        },
        "test_tile_remove": {
            "name": "test_tile_remove",
            "location": 110,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "solo.config.app.Config",
                    "Exception"
                ]
            }
        },
        "test_tile_window_focus_cycle": {
            "name": "test_tile_window_focus_cycle",
            "location": 123,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str",
                    "Exception"
                ]
            }
        },
        "test_tile_add_on_top": {
            "name": "test_tile_add_on_top",
            "location": 143,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "Callable"
                ]
            }
        },
        "test_tile_min_max_ratios": {
            "name": "test_tile_min_max_ratios",
            "location": 165,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "solo.config.app.Config"
                ]
            }
        }
    },
    "qtile-master/test/layouts/test_treetab.py": {
        "test_window": {
            "name": "test_window",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str"
                ]
            }
        },
        "test_sort_windows": {
            "name": "test_sort_windows",
            "location": 145,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "qtile-master/test/layouts/test_verticaltile.py": {
        "test_verticaltile_simple": {
            "name": "test_verticaltile_simple",
            "location": 55,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str"
                ]
            }
        },
        "test_verticaltile_maximize": {
            "name": "test_verticaltile_maximize",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "float"
                ]
            }
        },
        "test_verticaltile_window_focus_cycle": {
            "name": "test_verticaltile_window_focus_cycle",
            "location": 76,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str",
                    "Exception"
                ]
            }
        }
    },
    "qtile-master/test/layouts/test_xmonad.py": {
        "test_tall_add_clients": {
            "name": "test_tall_add_clients",
            "location": 139,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "Dict[str, Any]",
                    "Exception"
                ]
            }
        },
        "test_tall_add_clients_before_current": {
            "name": "test_tall_add_clients_before_current",
            "location": 161,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_tall_add_clients_after_current": {
            "name": "test_tall_add_clients_after_current",
            "location": 177,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_tall_add_clients_at_bottom": {
            "name": "test_tall_add_clients_at_bottom",
            "location": 190,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_wide_add_clients": {
            "name": "test_wide_add_clients",
            "location": 202,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "Dict[str, Any]",
                    "Exception"
                ]
            }
        },
        "test_wide_add_clients_new_client_postion_top": {
            "name": "test_wide_add_clients_new_client_postion_top",
            "location": 224,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "Dict[str, Any]",
                    "Exception"
                ]
            }
        },
        "test_tall_margins": {
            "name": "test_tall_margins",
            "location": 246,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "test_wide_margins": {
            "name": "test_wide_margins",
            "location": 260,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "test_tall_growmain_solosecondary": {
            "name": "test_tall_growmain_solosecondary",
            "location": 274,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "bool"
                ]
            }
        },
        "test_wide_growmain_solosecondary": {
            "name": "test_wide_growmain_solosecondary",
            "location": 301,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "bool"
                ]
            }
        },
        "test_tall_growmain_multiplesecondary": {
            "name": "test_tall_growmain_multiplesecondary",
            "location": 328,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": []
            }
        },
        "test_wide_growmain_multiplesecondary": {
            "name": "test_wide_growmain_multiplesecondary",
            "location": 357,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": []
            }
        },
        "test_tall_growsecondary_solosecondary": {
            "name": "test_tall_growsecondary_solosecondary",
            "location": 386,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "int",
                    "str",
                    "Tuple[float, float, float]",
                    "float",
                    "bool"
                ]
            }
        },
        "test_wide_growsecondary_solosecondary": {
            "name": "test_wide_growsecondary_solosecondary",
            "location": 412,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "int",
                    "str",
                    "Tuple[float, float, float]",
                    "float",
                    "bool"
                ]
            }
        },
        "test_tall_growsecondary_multiplesecondary": {
            "name": "test_tall_growsecondary_multiplesecondary",
            "location": 438,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "Coroutine[Any, Any, Any]",
                    "dict",
                    "Callable[[Any], tuple]",
                    "Dict[str, int]"
                ]
            }
        },
        "test_wide_growsecondary_multiplesecondary": {
            "name": "test_wide_growsecondary_multiplesecondary",
            "location": 466,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "Coroutine[Any, Any, Any]",
                    "dict",
                    "Callable[[Any], tuple]",
                    "Dict[str, int]"
                ]
            }
        },
        "test_tall_flip": {
            "name": "test_tall_flip",
            "location": 494,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "Dict[str, Any]",
                    "Exception"
                ]
            }
        },
        "test_wide_flip": {
            "name": "test_wide_flip",
            "location": 529,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "Dict[str, Any]",
                    "Exception"
                ]
            }
        },
        "test_tall_set_and_reset": {
            "name": "test_tall_set_and_reset",
            "location": 564,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "Union[int, float]",
                    "str",
                    "Callable"
                ]
            }
        },
        "test_wide_set_and_reset": {
            "name": "test_wide_set_and_reset",
            "location": 586,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "Union[int, float]",
                    "str",
                    "Callable"
                ]
            }
        },
        "test_tall_shuffle": {
            "name": "test_tall_shuffle",
            "location": 608,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str"
                ]
            }
        },
        "test_wide_shuffle": {
            "name": "test_wide_shuffle",
            "location": 631,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str"
                ]
            }
        },
        "test_tall_swap": {
            "name": "test_tall_swap",
            "location": 654,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str"
                ]
            }
        },
        "test_wide_swap": {
            "name": "test_wide_swap",
            "location": 715,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str"
                ]
            }
        },
        "test_tall_window_focus_cycle": {
            "name": "test_tall_window_focus_cycle",
            "location": 776,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str",
                    "Exception"
                ]
            }
        },
        "test_wide_window_focus_cycle": {
            "name": "test_wide_window_focus_cycle",
            "location": 797,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str",
                    "Exception"
                ]
            }
        },
        "test_three_col_add_clients": {
            "name": "test_three_col_add_clients",
            "location": 832,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "dict",
                    "Callable"
                ]
            }
        },
        "test_three_col_shuffle": {
            "name": "test_three_col_shuffle",
            "location": 870,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_three_col_swap_main": {
            "name": "test_three_col_swap_main",
            "location": 928,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str"
                ]
            }
        }
    },
    "qtile-master/test/layouts/test_zoomy.py": {
        "test_zoomy_one": {
            "name": "test_zoomy_one",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "Callable",
                    "str"
                ]
            }
        },
        "test_zoomy_window_focus_cycle": {
            "name": "test_zoomy_window_focus_cycle",
            "location": 66,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str",
                    "Exception"
                ]
            }
        }
    },
    "qtile-master/test/layouts/__init__.py": {},
    "qtile-master/test/scripts/window.py": {
        "SNItem.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "window": [
                    "str",
                    "Tuple[List, List, List]",
                    "bool",
                    "dict",
                    "int"
                ]
            }
        },
        "SNItem.Activate": {
            "name": "Activate",
            "location": 70,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ],
                "y": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "SNItem.IconName": {
            "name": "IconName",
            "location": 79,
            "return": [
                "typing.Text",
                "str",
                "int",
                "Dict[str, Any]",
                "Container[str]",
                "bool",
                "Union[List, Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SNItem.IconPixmap": {
            "name": "IconPixmap",
            "location": 83,
            "return": [
                "list[list[int]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SNItem.AttentionIconPixmap": {
            "name": "AttentionIconPixmap",
            "location": 87,
            "return": [
                "list",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SNItem.OverlayIconPixmap": {
            "name": "OverlayIconPixmap",
            "location": 91,
            "return": [
                "list",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SNItem.NewIcon": {
            "name": "NewIcon",
            "location": 95,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SNItem.NewAttentionIcon": {
            "name": "NewAttentionIcon",
            "location": 99,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SNItem.NewOverlayIcon": {
            "name": "NewOverlayIcon",
            "location": 103,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/test/widgets/conftest.py": {
        "fake_bar": {
            "name": "fake_bar",
            "location": 16,
            "return": [
                "FakeBar",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "svg_img_as_pypath": {
            "name": "svg_img_as_pypath",
            "location": 37,
            "return": [
                "bool",
                "List[List[str]]"
            ],
            "arguments": {}
        },
        "fake_qtile": {
            "name": "fake_qtile",
            "location": 51,
            "return": [
                "FakeQtile",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "minimal_conf_noscreen": {
            "name": "minimal_conf_noscreen",
            "location": 81,
            "return": [
                "MinimalConf",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "dbus": {
            "name": "dbus",
            "location": 95,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "monkeypatch": [
                    "str"
                ]
            }
        },
        "FakeBar.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "widgets": [
                    "bool",
                    "Optional[dict]",
                    "Optional[str]",
                    "Union[str, Callable]"
                ],
                "size": [
                    "int",
                    "Optional[asyncio.AbstractEventLoop]",
                    "float",
                    "bool"
                ],
                "width": [
                    "int",
                    "bool",
                    "str"
                ],
                "window": [
                    "None",
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "FakeBar.draw": {
            "name": "draw",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "fake_qtile.no_op": {
            "name": "no_op",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "fake_qtile.FakeQtile.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "fake_qtile.FakeQtile.call_soon": {
            "name": "call_soon",
            "location": 64,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable",
                    "tuple",
                    "str"
                ]
            }
        }
    },
    "qtile-master/test/widgets/test_base.py": {
        "test_multiple_timers": {
            "name": "test_multiple_timers",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "minimal_conf_noscreen": [],
                "manager_nospawn": []
            }
        },
        "test_mirrors_same_bar": {
            "name": "test_mirrors_same_bar",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "minimal_conf_noscreen": [],
                "manager_nospawn": []
            }
        },
        "test_mirrors_different_bar": {
            "name": "test_mirrors_different_bar",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "minimal_conf_noscreen": [],
                "manager_nospawn": []
            }
        },
        "test_threadpolltext_force_update": {
            "name": "test_threadpolltext_force_update",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "minimal_conf_noscreen": [],
                "manager_nospawn": [
                    "dict"
                ]
            }
        },
        "test_text_scroll_no_width": {
            "name": "test_text_scroll_no_width",
            "location": 160,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "logger": [],
                "manager": [
                    "int"
                ]
            }
        },
        "test_text_scroll_short_text": {
            "name": "test_text_scroll_short_text",
            "location": 174,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "int"
                ]
            }
        },
        "test_text_scroll_long_text": {
            "name": "test_text_scroll_long_text",
            "location": 193,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "int"
                ]
            }
        },
        "TimerWidget.cmd_set_timer1": {
            "name": "cmd_set_timer1",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimerWidget.cmd_cancel_timer1": {
            "name": "cmd_cancel_timer1",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimerWidget.cmd_set_timer2": {
            "name": "cmd_set_timer2",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimerWidget.cmd_cancel_timer2": {
            "name": "cmd_cancel_timer2",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimerWidget.cmd_get_active_timers": {
            "name": "cmd_get_active_timers",
            "location": 42,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PollingWidget.poll": {
            "name": "poll",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_text_scroll_long_text.wait_for_scroll": {
            "name": "wait_for_scroll",
            "location": 199,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "widget": [
                    "int",
                    "Dict[int, int]"
                ]
            }
        }
    },
    "qtile-master/test/widgets/test_battery.py": {
        "dummy_load_battery": {
            "name": "dummy_load_battery",
            "location": 26,
            "return": [
                "Callable"
            ],
            "arguments": {
                "bat": [
                    "Type[OrderedDict]"
                ]
            }
        },
        "test_text_battery_charging": {
            "name": "test_text_battery_charging",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_text_battery_discharging": {
            "name": "test_text_battery_discharging",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_text_battery_full": {
            "name": "test_text_battery_full",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_text_battery_empty": {
            "name": "test_text_battery_empty",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_text_battery_unknown": {
            "name": "test_text_battery_unknown",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_text_battery_hidden": {
            "name": "test_text_battery_hidden",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_text_battery_error": {
            "name": "test_text_battery_error",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_images_fail": {
            "name": "test_images_fail",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_images_good": {
            "name": "test_images_good",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "int",
                    "Optional[\"Game\"]",
                    "bool"
                ],
                "fake_bar": [
                    "List[int]",
                    "str",
                    "bool",
                    "int"
                ],
                "svg_img_as_pypath": [
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_images_default": {
            "name": "test_images_default",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_bar": [
                    "str",
                    "Dict[str, float]",
                    "int"
                ]
            }
        },
        "test_battery_background": {
            "name": "test_battery_background",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_qtile": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "fake_window": [
                    "bool",
                    "Optional[bool]",
                    "Iterable[str]"
                ],
                "monkeypatch": [
                    "IO[Any]",
                    "set"
                ]
            }
        },
        "DummyBattery.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "DummyBattery.update_status": {
            "name": "update_status",
            "location": 14,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DummyErrorBattery.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DummyErrorBattery.update_status": {
            "name": "update_status",
            "location": 22,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "dummy_load_battery.load_battery": {
            "name": "load_battery",
            "location": 27,
            "return": [
                "DummyBattery",
                "str",
                "bool"
            ],
            "arguments": {}
        }
    },
    "qtile-master/test/widgets/test_bluetooth.py": {
        "test_bluetooth_setup": {
            "name": "test_bluetooth_setup",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "List[str]"
                ],
                "minimal_conf_noscreen": [],
                "manager_nospawn": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_signal_handling": {
            "name": "test_signal_handling",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "str"
                ]
            }
        },
        "MockProps.on_properties_changed": {
            "name": "on_properties_changed",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "str",
                    "Callable[[str], str]",
                    "List[str]"
                ]
            }
        },
        "MockProxy.get_interface": {
            "name": "get_interface",
            "location": 47,
            "return": [
                "Union[(MockAdapter, MockDevice, MockProps)]"
            ],
            "arguments": {
                "self": [],
                "interface": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "MockBus.get_proxy_object": {
            "name": "get_proxy_object",
            "location": 60,
            "return": [
                "MockProxy"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "str",
                    "List[str]",
                    "list",
                    "Iterable[str]",
                    "bool"
                ],
                "path": [
                    "str",
                    "List[str]",
                    "list",
                    "Iterable[str]",
                    "bool"
                ],
                "introspection": [
                    "str",
                    "List[str]",
                    "list",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "MockMessageBus.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bus_type": [
                    "Tuple[str]",
                    "Type[object]",
                    "str",
                    "Optional[Any]"
                ]
            }
        },
        "test_signal_handling.new_update": {
            "name": "new_update",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "text": [
                    "bytes",
                    "str",
                    "Optional[str]",
                    "bool",
                    "Union[int, float]",
                    "ImportError"
                ]
            }
        }
    },
    "qtile-master/test/widgets/test_caps_num_lock_indicator.py": {
        "no_op": {
            "name": "no_op",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "patched_cnli": {
            "name": "patched_cnli",
            "location": 74,
            "return": [
                "int",
                "List[int]",
                "List[dict]"
            ],
            "arguments": {
                "monkeypatch": [
                    "str"
                ]
            }
        },
        "test_cnli": {
            "name": "test_cnli",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_qtile": [
                    "int",
                    "str",
                    "Union[str, float]"
                ],
                "patched_cnli": [
                    "str",
                    "int"
                ],
                "fake_window": [
                    "bool",
                    "Optional[bool]",
                    "Iterable[str]",
                    "Sequence[str]"
                ]
            }
        },
        "test_cnli_caps_on": {
            "name": "test_cnli_caps_on",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_qtile": [
                    "int",
                    "str",
                    "Union[str, float]"
                ],
                "patched_cnli": [
                    "str",
                    "int"
                ],
                "fake_window": [
                    "bool",
                    "Optional[bool]",
                    "Iterable[str]",
                    "Sequence[str]"
                ]
            }
        },
        "test_cnli_error_handling": {
            "name": "test_cnli_error_handling",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_qtile": [
                    "int",
                    "str"
                ],
                "patched_cnli": [
                    "bool",
                    "str",
                    "int",
                    "Set[str]"
                ],
                "fake_window": [
                    "bool",
                    "Optional[bool]"
                ]
            }
        },
        "MockCapsNumLockIndicator.reset": {
            "name": "reset",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "str",
                    "bool",
                    "Callable",
                    "type"
                ]
            }
        },
        "MockCapsNumLockIndicator.call_process": {
            "name": "call_process",
            "location": 59,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "T"
                ],
                "cmd": [
                    "Callable",
                    "int"
                ]
            }
        }
    },
    "qtile-master/test/widgets/test_check_updates.py": {
        "test_unknown_distro": {
            "name": "test_unknown_distro",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_update_available": {
            "name": "test_update_available",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_qtile": [],
                "fake_window": []
            }
        },
        "test_no_update_available_without_no_update_string": {
            "name": "test_no_update_available_without_no_update_string",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_qtile": [
                    "str"
                ],
                "fake_window": [
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "test_no_update_available_with_no_update_string_and_color_no_updates": {
            "name": "test_no_update_available_with_no_update_string_and_color_no_updates",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_qtile": [
                    "str"
                ],
                "fake_window": [
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "test_update_available_with_restart_indicator": {
            "name": "test_update_available_with_restart_indicator",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "int",
                    "Callable",
                    "List[Dict[str, Any]]",
                    "libqtile.command_clienInteractiveCommandClient",
                    "list"
                ],
                "fake_qtile": [
                    "int"
                ],
                "fake_window": [
                    "str"
                ]
            }
        },
        "test_update_available_with_execute": {
            "name": "test_update_available_with_execute",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_nospawn": [
                    "Dict[str, Any]"
                ],
                "minimal_conf_noscreen": [],
                "monkeypatch": []
            }
        },
        "test_update_process_error": {
            "name": "test_update_process_error",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_qtile": [
                    "int",
                    "str"
                ],
                "fake_window": [
                    "bool",
                    "Optional[bool]"
                ]
            }
        },
        "test_line_truncations": {
            "name": "test_line_truncations",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_qtile": [
                    "str",
                    "int",
                    "Union[str, float]"
                ],
                "monkeypatch": [
                    "bytes"
                ],
                "fake_window": [
                    "bool",
                    "Iterable[str]"
                ]
            }
        },
        "MockPopen.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockPopen.poll": {
            "name": "poll",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockSpawn.call_process": {
            "name": "call_process",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str"
                ]
            }
        },
        "test_line_truncations.mock_process": {
            "name": "mock_process",
            "location": 169,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {}
        },
        "test_update_available_with_execute.MockPopen.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_update_available_with_execute.MockPopen.poll": {
            "name": "poll",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_update_available_with_execute.MockSpawn.call_process": {
            "name": "call_process",
            "location": 117,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "qtile-master/test/widgets/test_chord.py": {
        "test_chord_widget": {
            "name": "test_chord_widget",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_window": [
                    "bool"
                ],
                "fake_qtile": [
                    "bool"
                ]
            }
        }
    },
    "qtile-master/test/widgets/test_clipboard.py": {
        "clipboard_cleared": {
            "name": "clipboard_cleared",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "widget": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "clipboard_manager": {
            "name": "clipboard_manager",
            "location": 37,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "request": [
                    "str"
                ],
                "minimal_conf_noscreen": [
                    "Dict[str, Any]"
                ],
                "manager_nospawn": []
            }
        },
        "test_clipboard_display": {
            "name": "test_clipboard_display",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "clipboard_manager": []
            }
        },
        "test_clipboard_display_full_text": {
            "name": "test_clipboard_display_full_text",
            "location": 73,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "clipboard_manager": []
            }
        },
        "test_clipboard_blacklist": {
            "name": "test_clipboard_blacklist",
            "location": 95,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "clipboard_manager": []
            }
        },
        "test_clipboard_ignore_different_selection": {
            "name": "test_clipboard_ignore_different_selection",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "clipboard_manager": []
            }
        },
        "test_clipboard_display_clear": {
            "name": "test_clipboard_display_clear",
            "location": 142,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "clipboard_manager": []
            }
        },
        "test_clipboard_display_multiple_changes": {
            "name": "test_clipboard_display_multiple_changes",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "clipboard_manager": []
            }
        }
    },
    "qtile-master/test/widgets/test_clock.py": {
        "no_op": {
            "name": "no_op",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "patched_clock": {
            "name": "patched_clock",
            "location": 53,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "str"
                ]
            }
        },
        "test_clock": {
            "name": "test_clock",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_qtile": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "monkeypatch": [],
                "fake_window": [
                    "bool",
                    "Optional[datetime.datetime]",
                    "Optional[bool]",
                    "Iterable[str]",
                    "Sequence[str]"
                ]
            }
        },
        "test_clock_invalid_timezone": {
            "name": "test_clock_invalid_timezone",
            "location": 78,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fake_qtile": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "monkeypatch": [
                    "int",
                    "Callable",
                    "Optional[Any]",
                    "List[str]"
                ],
                "fake_window": [
                    "bool",
                    "Optional[datetime.datetime]",
                    "Optional[bool]",
                    "Iterable[str]",
                    "Sequence[str]"
                ]
            }
        },
        "test_clock_datetime_timezone": {
            "name": "test_clock_datetime_timezone",
            "location": 112,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fake_qtile": [
                    "str",
                    "int"
                ],
                "monkeypatch": [
                    "dict"
                ],
                "fake_window": [
                    "Optional[datetime.datetime]",
                    "bool"
                ]
            }
        },
        "test_clock_pytz_timezone": {
            "name": "test_clock_pytz_timezone",
            "location": 141,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fake_qtile": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "monkeypatch": [
                    "int",
                    "str",
                    "List[str]",
                    "float"
                ],
                "fake_window": [
                    "bool",
                    "Optional[datetime.datetime]",
                    "Optional[bool]",
                    "Iterable[str]",
                    "Sequence[str]"
                ]
            }
        },
        "test_clock_dateutil_timezone": {
            "name": "test_clock_dateutil_timezone",
            "location": 181,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fake_qtile": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "monkeypatch": [
                    "str",
                    "int"
                ],
                "fake_window": [
                    "bool",
                    "Optional[datetime.datetime]",
                    "Optional[bool]",
                    "Iterable[str]",
                    "Sequence[str]"
                ]
            }
        },
        "test_clock_tick": {
            "name": "test_clock_tick",
            "location": 217,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager_nospawn": [
                    "dict"
                ],
                "minimal_conf_noscreen": [],
                "monkeypatch": [
                    "Optional[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "MockDatetime.now": {
            "name": "now",
            "location": 43,
            "return": [
                "MockDatetime"
            ],
            "arguments": {
                "cls": [
                    "Type[_TMockDatetime]"
                ]
            }
        },
        "MockDatetime.astimezone": {
            "name": "astimezone",
            "location": 46,
            "return": [
                "MockDatetime"
            ],
            "arguments": {
                "self": [
                    "_TMockDatetime"
                ],
                "tzone": [
                    "None",
                    "int",
                    "Optional[float]",
                    "Optional[datetime.timedelta]",
                    "Union[str, int]",
                    "Optional[int]"
                ]
            }
        },
        "test_clock_invalid_timezone.FakeDateutilTZ.tz": {
            "name": "tz",
            "location": 83,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Type",
                    "str",
                    "List[dict]"
                ]
            }
        },
        "test_clock_invalid_timezone.FakeDateutilTZ.gettz": {
            "name": "gettz",
            "location": 87,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "val": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "test_clock_pytz_timezone.FakePytz.timezone": {
            "name": "timezone",
            "location": 156,
            "return": [
                "int",
                "str",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "T",
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "value": [
                    "T",
                    "str",
                    "bytes",
                    "float",
                    "Callable[[object], Any]",
                    "type"
                ]
            }
        },
        "test_clock_tick.TickingDateTime.now": {
            "name": "now",
            "location": 232,
            "return": [
                "MockDatetime"
            ],
            "arguments": {
                "cls": [
                    "Type[_TMockDatetime]"
                ]
            }
        },
        "test_clock_tick.TickingDateTime.astimezone": {
            "name": "astimezone",
            "location": 237,
            "return": [
                "MockDatetime"
            ],
            "arguments": {
                "self": [
                    "_TMockDatetime"
                ],
                "tzone": [
                    "None",
                    "int",
                    "Optional[float]",
                    "Optional[datetime.timedelta]",
                    "Union[str, int]",
                    "Optional[int]"
                ]
            }
        },
        "test_clock_datetime_timezone.FakeDateutilTZ.TZ.gettz": {
            "name": "gettz",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "val": []
            }
        },
        "test_clock_pytz_timezone.FakeDateutilTZ.TZ.gettz": {
            "name": "gettz",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "val": []
            }
        },
        "test_clock_dateutil_timezone.FakeDateutilTZ.TZ.gettz": {
            "name": "gettz",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "val": []
            }
        },
        "test_clock_tick.FakeDateutilTZ.TZ.gettz": {
            "name": "gettz",
            "location": 223,
            "return": [
                "None",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "val": [
                    "Type",
                    "float",
                    "type"
                ]
            }
        }
    },
    "qtile-master/test/widgets/test_cmus.py": {
        "no_op": {
            "name": "no_op",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "patched_cmus": {
            "name": "patched_cmus",
            "location": 133,
            "return": [],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_cmus": {
            "name": "test_cmus",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_qtile": [],
                "patched_cmus": [],
                "fake_window": []
            }
        },
        "test_cmus_play_stopped": {
            "name": "test_cmus_play_stopped",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_qtile": [],
                "patched_cmus": [],
                "fake_window": []
            }
        },
        "test_cmus_buttons": {
            "name": "test_cmus_buttons",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "minimal_conf_noscreen": [],
                "manager_nospawn": [],
                "patched_cmus": []
            }
        },
        "test_cmus_error_handling": {
            "name": "test_cmus_error_handling",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_qtile": [],
                "patched_cmus": [],
                "fake_window": []
            }
        },
        "test_escape_text": {
            "name": "test_escape_text",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_qtile": [],
                "patched_cmus": [],
                "fake_window": []
            }
        },
        "MockCmusRemoteProcess.reset": {
            "name": "reset",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "MockCmusRemoteProcess.call_process": {
            "name": "call_process",
            "location": 97,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "cls": [],
                "cmd": []
            }
        },
        "MockCmusRemoteProcess.Popen": {
            "name": "Popen",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "cmd": []
            }
        }
    },
    "qtile-master/test/widgets/test_configerror.py": {
        "test_configerrorwidget": {
            "name": "test_configerrorwidget",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager_nospawn": [
                    "dict"
                ],
                "minimal_conf_noscreen": [],
                "position": []
            }
        },
        "BadWidget._configure": {
            "name": "_configure",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qtile": [
                    "int",
                    "Callable",
                    "str"
                ],
                "bar": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "BadWidget.draw": {
            "name": "draw",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/test/widgets/test_countdown.py": {
        "test_countdown_formatting": {
            "name": "test_countdown_formatting",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "qtile-master/test/widgets/test_cpu.py": {
        "cpu_manager": {
            "name": "cpu_manager",
            "location": 50,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "Optional[int]",
                    "Dict[str, str]"
                ],
                "manager_nospawn": [
                    "Sequence[int]",
                    "int",
                    "list",
                    "str"
                ],
                "minimal_conf_noscreen": [
                    "str",
                    "List[str]",
                    "Iterable[T]"
                ]
            }
        },
        "test_cpu": {
            "name": "test_cpu",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "cpu_manager": []
            }
        },
        "MockPsutil.cpu_percent": {
            "name": "cpu_percent",
            "location": 35,
            "return": [
                "float"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "MockPsutil.cpu_freq": {
            "name": "cpu_freq",
            "location": 39,
            "return": [
                "Freq",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "MockPsutil.cpu_freq.Freq.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/test/widgets/test_crashme.py": {
        "test_crashme_init": {
            "name": "test_crashme_init",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_nospawn": [
                    "dict"
                ],
                "minimal_conf_noscreen": []
            }
        }
    },
    "qtile-master/test/widgets/test_crypto_ticker.py": {
        "test_set_defaults": {
            "name": "test_set_defaults",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse": {
            "name": "test_parse",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "qtile-master/test/widgets/test_currentscreen.py": {
        "test_change_screen": {
            "name": "test_change_screen",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager_nospawn": [
                    "Dict[str, Any]"
                ],
                "minimal_conf_noscreen": []
            }
        }
    },
    "qtile-master/test/widgets/test_df.py": {
        "patched_df": {
            "name": "patched_df",
            "location": 62,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "list"
                ]
            }
        },
        "test_df_no_warning": {
            "name": "test_df_no_warning",
            "location": 68,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fake_qtile": [],
                "fake_window": []
            }
        },
        "test_df_always_visible": {
            "name": "test_df_always_visible",
            "location": 81,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fake_qtile": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "fake_window": [
                    "bool",
                    "Optional[bool]",
                    "Iterable[str]"
                ]
            }
        },
        "test_df_warn_space": {
            "name": "test_df_warn_space",
            "location": 96,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fake_qtile": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "fake_window": [
                    "bool",
                    "Optional[bool]",
                    "Iterable[str]"
                ]
            }
        },
        "FakeOS.statvfs.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeOS.statvfs.f_frsize": {
            "name": "f_frsize",
            "location": 39,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeOS.statvfs.f_blocks": {
            "name": "f_blocks",
            "location": 43,
            "return": [
                "int",
                "hashdecoder.lib.types.hint_type",
                "Tuple[str, int]",
                "Callable[[T], bool]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeOS.statvfs.f_bfree": {
            "name": "f_bfree",
            "location": 47,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeOS.statvfs.f_bavail": {
            "name": "f_bavail",
            "location": 51,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/test/widgets/test_generic_poll_text.py": {
        "test_gen_poll_text": {
            "name": "test_gen_poll_text",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_gen_poll_url_not_configured": {
            "name": "test_gen_poll_url_not_configured",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_gen_poll_url_no_json": {
            "name": "test_gen_poll_url_no_json",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_gen_poll_url_headers_and_json": {
            "name": "test_gen_poll_url_headers_and_json",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_gen_poll_url_text": {
            "name": "test_gen_poll_url_text",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_gen_poll_url_json": {
            "name": "test_gen_poll_url_json",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_gen_poll_url_xml_no_xmltodict": {
            "name": "test_gen_poll_url_xml_no_xmltodict",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_gen_poll_url_xml_has_xmltodict": {
            "name": "test_gen_poll_url_xml_has_xmltodict",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "IO[str]"
                ]
            }
        },
        "test_gen_poll_url_broken_parse": {
            "name": "test_gen_poll_url_broken_parse",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "Mockxml.parse": {
            "name": "parse",
            "location": 34,
            "return": [
                "Dict[(str, _T0)]"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "T",
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "value": [
                    "_T0"
                ]
            }
        },
        "MockRequest.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mockurlopen.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "Mockurlopen.read": {
            "name": "read",
            "location": 54,
            "return": [
                "Dict[str, Any]",
                "Mapping",
                "int",
                "Dict[str, Dict[str, Any]]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mockurlopen.headers.get_content_charset": {
            "name": "get_content_charset",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "Type[Mockurlopen.headers]"
                ]
            }
        }
    },
    "qtile-master/test/widgets/test_gmail_checker.py": {
        "test_gmail_checker_valid_response": {
            "name": "test_gmail_checker_valid_response",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_qtile": [],
                "monkeypatch": [
                    "Optional[str]",
                    "Callable",
                    "int",
                    "bool"
                ],
                "fake_window": []
            }
        },
        "test_gmail_checker_invalid_response": {
            "name": "test_gmail_checker_invalid_response",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_qtile": [],
                "monkeypatch": [
                    "Optional[str]",
                    "Optional[dict]"
                ],
                "fake_window": []
            }
        },
        "test_gmail_checker_only_unseen": {
            "name": "test_gmail_checker_only_unseen",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_qtile": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "monkeypatch": [
                    "int",
                    "Callable",
                    "Optional[Any]",
                    "List[str]"
                ],
                "fake_window": [
                    "bool",
                    "Optional[bool]",
                    "Iterable[str]",
                    "Sequence[str]"
                ]
            }
        },
        "FakeIMAP.IMAP4_SSL.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeIMAP.IMAP4_SSL.login": {
            "name": "login",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "FakeIMAP.IMAP4_SSL.status": {
            "name": "status",
            "location": 40,
            "return": [
                "Tuple[(Union[(bool, str)], Optional[List[bytes]])]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        }
    },
    "qtile-master/test/widgets/test_idlerpg.py": {
        "test_idlerpg": {
            "name": "test_idlerpg",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "qtile-master/test/widgets/test_image.py": {
        "test_default_settings": {
            "name": "test_default_settings",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager_nospawn": [],
                "minimal_conf_noscreen": [
                    "str",
                    "Optional[Iterable[Any]]"
                ],
                "screen": [
                    "str",
                    "Optional[Iterable[Any]]"
                ],
                "location": [
                    "int"
                ],
                "attribute": [
                    "str",
                    "Iterable[int]"
                ]
            }
        },
        "test_no_filename": {
            "name": "test_no_filename",
            "location": 66,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager_nospawn": [
                    "dict"
                ],
                "minimal_conf_noscreen": [],
                "screen": [],
                "location": [
                    "int"
                ],
                "attribute": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_missing_file": {
            "name": "test_missing_file",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_nospawn": [
                    "dict",
                    "str"
                ],
                "minimal_conf_noscreen": [
                    "str"
                ]
            }
        },
        "test_no_scale": {
            "name": "test_no_scale",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_nospawn": [
                    "dict"
                ],
                "minimal_conf_noscreen": [
                    "lightbus.path.BusPath"
                ]
            }
        },
        "test_no_image": {
            "name": "test_no_image",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_nospawn": [],
                "minimal_conf_noscreen": [],
                "logger": []
            }
        },
        "test_invalid_path": {
            "name": "test_invalid_path",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_nospawn": [
                    "bool",
                    "int",
                    "Optional[\"Game\"]"
                ],
                "minimal_conf_noscreen": [
                    "str"
                ],
                "logger": [
                    "py.path.local"
                ]
            }
        }
    },
    "qtile-master/test/widgets/test_imapwidget.py": {
        "patched_imap": {
            "name": "patched_imap",
            "location": 66,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "monkeypatch": [
                    "Mapping[str, Any]",
                    "dict"
                ]
            }
        },
        "test_imapwidget": {
            "name": "test_imapwidget",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_qtile": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "monkeypatch": [
                    "List[str]"
                ],
                "fake_window": [
                    "bool",
                    "Optional[bool]",
                    "Iterable[str]",
                    "Sequence[str]"
                ],
                "patched_imap": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "test_imapwidget_keyring_error": {
            "name": "test_imapwidget_keyring_error",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_qtile": [
                    "int",
                    "str"
                ],
                "monkeypatch": [
                    "str",
                    "bool",
                    "Callable"
                ],
                "fake_window": [
                    "bool",
                    "Optional[bool]"
                ],
                "patched_imap": []
            }
        },
        "test_imapwidget_password_none": {
            "name": "test_imapwidget_password_none",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_qtile": [
                    "Type"
                ],
                "monkeypatch": [
                    "str",
                    "Callable",
                    "Callable[[], int]"
                ],
                "fake_window": [],
                "patched_imap": [
                    "str"
                ]
            }
        },
        "FakeKeyring.get_password": {
            "name": "get_password",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "_app": [
                    "bool",
                    "str"
                ],
                "user": [
                    "bool",
                    "str"
                ]
            }
        },
        "FakeIMAP.IMAP4_SSL.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeIMAP.IMAP4_SSL.login": {
            "name": "login",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "FakeIMAP.IMAP4_SSL.status": {
            "name": "status",
            "location": 41,
            "return": [
                "Tuple[(Union[(bool, str)], Optional[List[bytes]])]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "FakeIMAP.IMAP4_SSL.logout": {
            "name": "logout",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/test/widgets/test_import_error.py": {
        "bad_importer": {
            "name": "bad_importer",
            "location": 29,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_importerrorwidget": {
            "name": "test_importerrorwidget",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Optional[Dict[str, Any]]",
                    "bool"
                ],
                "manager_nospawn": [
                    "dict"
                ],
                "minimal_conf_noscreen": [],
                "position": []
            }
        }
    },
    "qtile-master/test/widgets/test_keyboardkbdd.py": {
        "patched_widget": {
            "name": "patched_widget",
            "location": 64,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "monkeypatch": [
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ]
            }
        },
        "test_keyboardkbdd_process_running": {
            "name": "test_keyboardkbdd_process_running",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_qtile": [
                    "int",
                    "str"
                ],
                "patched_widget": [
                    "int",
                    "str"
                ],
                "fake_window": [
                    "bool",
                    "Optional[bool]",
                    "Iterable[str]",
                    "Sequence[str]"
                ]
            }
        },
        "test_keyboardkbdd_process_not_running": {
            "name": "test_keyboardkbdd_process_not_running",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_qtile": [
                    "int",
                    "str"
                ],
                "patched_widget": [
                    "int",
                    "str"
                ],
                "fake_window": [
                    "bool",
                    "Optional[bool]",
                    "Iterable[str]",
                    "Sequence[str]"
                ]
            }
        },
        "test_keyboard_kbdd_colours": {
            "name": "test_keyboard_kbdd_colours",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_qtile": [
                    "int",
                    "str",
                    "Union[str, float]"
                ],
                "patched_widget": [
                    "int",
                    "str",
                    "Union[str, float]"
                ],
                "fake_window": [
                    "bool",
                    "Optional[bool]",
                    "Iterable[str]",
                    "Sequence[str]"
                ]
            }
        },
        "MockSpawn.call_process": {
            "name": "call_process",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "snorkel.types.DataPoint"
                ]
            }
        },
        "MockMessage.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "is_signal": [
                    "bool",
                    "str",
                    "int"
                ],
                "body": [
                    "int",
                    "bool",
                    "float",
                    "List[List[str]]",
                    "str"
                ]
            }
        }
    },
    "qtile-master/test/widgets/test_launchbar.py": {
        "test_deprecated_configuration": {
            "name": "test_deprecated_configuration",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "dict",
                    "str"
                ],
                "monkeypatch": []
            }
        },
        "MockXDG.getIconPath": {
            "name": "getIconPath",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "qtile-master/test/widgets/test_load.py": {
        "load_manager": {
            "name": "load_manager",
            "location": 38,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "monkeypatch": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "manager_nospawn": [
                    "Optional[int]",
                    "Optional[float]",
                    "int",
                    "bool"
                ],
                "minimal_conf_noscreen": [
                    "bool",
                    "int",
                    "str"
                ],
                "request": [
                    "bool",
                    "dict",
                    "int"
                ]
            }
        },
        "test_load_times_button_click": {
            "name": "test_load_times_button_click",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "load_manager": []
            }
        },
        "test_load_times_command": {
            "name": "test_load_times_command",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "load_manager": [
                    "bytes",
                    "str",
                    "Tuple[int, int]"
                ]
            }
        },
        "test_load_times_formatting": {
            "name": "test_load_times_formatting",
            "location": 83,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "load_manager": [
                    "bytes",
                    "int",
                    "str"
                ]
            }
        },
        "MockPsutil.getloadavg": {
            "name": "getloadavg",
            "location": 33,
            "return": [
                "Tuple[(float, float, float)]"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "qtile-master/test/widgets/test_memory.py": {
        "no_op": {
            "name": "no_op",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "patched_memory": {
            "name": "patched_memory",
            "location": 58,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "monkeypatch": [
                    "list"
                ]
            }
        },
        "test_memory_defaults": {
            "name": "test_memory_defaults",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_nospawn": [
                    "dict"
                ],
                "minimal_conf_noscreen": [],
                "patched_memory": []
            }
        },
        "test_memory_units": {
            "name": "test_memory_units",
            "location": 86,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager_nospawn": [
                    "str"
                ],
                "minimal_conf_noscreen": [
                    "bool"
                ],
                "patched_memory": [
                    "str",
                    "int",
                    "Union[str, float]"
                ],
                "unit": [
                    "str",
                    "int",
                    "Union[str, float]"
                ],
                "expects": [
                    "int"
                ]
            }
        },
        "FakePsutil.virtual_memory.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakePsutil.swap_memory.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/test/widgets/test_misc.py": {
        "test_textbox_color_change": {
            "name": "test_textbox_color_change",
            "location": 52,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "bytes",
                    "Dict[str, Any]"
                ]
            }
        },
        "ColorChanger.update": {
            "name": "update",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "bool",
                    "int",
                    "list",
                    "str",
                    "dict",
                    "Callable[..., T]"
                ]
            }
        }
    },
    "qtile-master/test/widgets/test_moc.py": {
        "no_op": {
            "name": "no_op",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "patched_moc": {
            "name": "patched_moc",
            "location": 99,
            "return": [],
            "arguments": {
                "fake_qtile": [],
                "monkeypatch": [],
                "fake_window": []
            }
        },
        "test_moc_poll_string_formatting": {
            "name": "test_moc_poll_string_formatting",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "patched_moc": []
            }
        },
        "test_moc_state_and_colours": {
            "name": "test_moc_state_and_colours",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "patched_moc": []
            }
        },
        "test_moc_button_presses": {
            "name": "test_moc_button_presses",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_nospawn": [],
                "minimal_conf_noscreen": [],
                "monkeypatch": []
            }
        },
        "test_moc_error_handling": {
            "name": "test_moc_error_handling",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "patched_moc": []
            }
        },
        "MockMocpProcess.reset": {
            "name": "reset",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "MockMocpProcess.run": {
            "name": "run",
            "location": 65,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "cls": [],
                "cmd": []
            }
        }
    },
    "qtile-master/test/widgets/test_mouse_callback.py": {
        "test_lazy_callback": {
            "name": "test_lazy_callback",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_nospawn": [
                    "dict"
                ],
                "minimal_conf_noscreen": []
            }
        }
    },
    "qtile-master/test/widgets/test_mpd2widget.py": {
        "mpd2_manager": {
            "name": "mpd2_manager",
            "location": 107,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "manager_nospawn": [],
                "monkeypatch": [],
                "minimal_conf_noscreen": []
            }
        },
        "test_mpd2_widget_display_and_actions": {
            "name": "test_mpd2_widget_display_and_actions",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "mpd2_manager": []
            }
        },
        "test_mpd2_widget_extra_info": {
            "name": "test_mpd2_widget_extra_info",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "mpd2_manager": []
            }
        },
        "test_mpd2_widget_idle_message": {
            "name": "test_mpd2_widget_idle_message",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "mpd2_manager": []
            }
        },
        "MockMPD.MPDClient.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockMPD.MPDClient._current_song": {
            "name": "_current_song",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockMPD.MPDClient.ping": {
            "name": "ping",
            "location": 54,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockMPD.MPDClient.connect": {
            "name": "connect",
            "location": 59,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "host": [],
                "port": []
            }
        },
        "MockMPD.MPDClient.command_list_ok_begin": {
            "name": "command_list_ok_begin",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockMPD.MPDClient.status": {
            "name": "status",
            "location": 65,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockMPD.MPDClient.currentsong": {
            "name": "currentsong",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockMPD.MPDClient.command_list_end": {
            "name": "command_list_end",
            "location": 71,
            "return": [
                "Tuple[(Dict[(str, str)], Dict[(str, str)])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockMPD.MPDClient.close": {
            "name": "close",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockMPD.MPDClient.disconnect": {
            "name": "disconnect",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockMPD.MPDClient.pause": {
            "name": "pause",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockMPD.MPDClient.play": {
            "name": "play",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockMPD.MPDClient.stop": {
            "name": "stop",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockMPD.MPDClient.next": {
            "name": "next",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockMPD.MPDClient.previous": {
            "name": "previous",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockMPD.MPDClient.add_states": {
            "name": "add_states",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockMPD.MPDClient.force_idle": {
            "name": "force_idle",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/test/widgets/test_mpris2widget.py": {
        "no_op": {
            "name": "no_op",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "fake_timer": {
            "name": "fake_timer",
            "location": 37,
            "return": [
                "TimerObj",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "interval": [
                    "Callable",
                    "zerver.lib.types.ViewFuncT",
                    "Callable[..., Dict]",
                    "bool"
                ],
                "func": [
                    "Callable",
                    "zerver.lib.types.ViewFuncT",
                    "Callable[..., Dict]",
                    "bool"
                ]
            }
        },
        "metadata_and_status": {
            "name": "metadata_and_status",
            "location": 68,
            "return": [
                "MockMessage"
            ],
            "arguments": {
                "status": [
                    "str",
                    "Type[Any]"
                ]
            }
        },
        "playback_status": {
            "name": "playback_status",
            "location": 91,
            "return": [
                "MockMessage"
            ],
            "arguments": {
                "status": [
                    "str"
                ],
                "signal": [
                    "str",
                    "bool"
                ]
            }
        },
        "patched_module": {
            "name": "patched_module",
            "location": 104,
            "return": [
                "float",
                "bool",
                "str",
                "IO[Any]",
                "hashdecoder.lib.types.hint_type"
            ],
            "arguments": {
                "monkeypatch": [
                    "Optional[str]",
                    "bool",
                    "Dict[str, str]",
                    "Any"
                ]
            }
        },
        "test_mpris2_signal_handling": {
            "name": "test_mpris2_signal_handling",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_qtile": [
                    "str"
                ],
                "patched_module": [
                    "str"
                ],
                "fake_window": [
                    "str"
                ]
            }
        },
        "test_mpris2_custom_stop_text": {
            "name": "test_mpris2_custom_stop_text",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_qtile": [],
                "patched_module": [
                    "str"
                ],
                "fake_window": []
            }
        },
        "test_mpris2_no_metadata": {
            "name": "test_mpris2_no_metadata",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_qtile": [],
                "patched_module": [
                    "str"
                ],
                "fake_window": []
            }
        },
        "test_mpris2_no_scroll": {
            "name": "test_mpris2_no_scroll",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_qtile": [],
                "patched_module": [],
                "fake_window": []
            }
        },
        "MockMessage.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "is_signal": [
                    "bool",
                    "str",
                    "int"
                ],
                "body": [
                    "None",
                    "bool",
                    "float",
                    "List[List[str]]",
                    "str"
                ]
            }
        },
        "obj.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "fake_timer.TimerObj.cancel": {
            "name": "cancel",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "fake_timer.TimerObj._scheduled": {
            "name": "_scheduled",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/test/widgets/test_net.py": {
        "patch_net": {
            "name": "patch_net",
            "location": 57,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "fake_qtile": [
                    "bool",
                    "str",
                    "List[str]"
                ],
                "monkeypatch": [
                    "bool",
                    "str",
                    "List[str]"
                ],
                "fake_window": [
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_net_defaults": {
            "name": "test_net_defaults",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "patch_net": []
            }
        },
        "test_net_single_interface": {
            "name": "test_net_single_interface",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "patch_net": [
                    "str",
                    "float"
                ]
            }
        },
        "test_net_list_interface": {
            "name": "test_net_list_interface",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "patch_net": [
                    "Tuple[int, int]"
                ]
            }
        },
        "test_net_invalid_interface": {
            "name": "test_net_invalid_interface",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "patch_net": [
                    "int",
                    "BaseException"
                ]
            }
        },
        "test_net_use_bits": {
            "name": "test_net_use_bits",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "patch_net": []
            }
        },
        "test_net_convert_zero_b": {
            "name": "test_net_convert_zero_b",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "patch_net": []
            }
        },
        "test_net_use_prefix": {
            "name": "test_net_use_prefix",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "patch_net": [
                    "Tuple[int, int]"
                ]
            }
        },
        "MockPsutil.net_io_counters": {
            "name": "net_io_counters",
            "location": 40,
            "return": [
                "int",
                "dict[typing.Text, IOCounters]",
                "List[str]",
                "IOCounters"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "IO[bytes]",
                    "str",
                    "Callable"
                ],
                "pernic": [
                    "bool",
                    "Callable",
                    "Type"
                ],
                "_nowrap": [
                    "bool",
                    "Callable",
                    "Type"
                ]
            }
        },
        "patch_net.build_widget": {
            "name": "build_widget",
            "location": 58,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "MockPsutil.net_io_counters.IOCounters.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "up": [
                    "str",
                    "types.ServiceT",
                    "List[str]",
                    "bytes"
                ],
                "down": [
                    "str",
                    "types.ServiceT",
                    "List[str]",
                    "bytes"
                ]
            }
        }
    },
    "qtile-master/test/widgets/test_notify.py": {
        "log_timeout": {
            "name": "log_timeout",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "delay": [
                    "str",
                    "List[str]",
                    "Callable",
                    "int",
                    "Exception"
                ],
                "func": [
                    "bytes",
                    "str",
                    "List[str]",
                    "float"
                ],
                "method_args": [
                    "bool",
                    "Iterable[Any]",
                    "List[Dict]",
                    "List[str]"
                ]
            }
        },
        "notification": {
            "name": "notification",
            "location": 44,
            "return": [
                "Tuple[(str, List[Union[(str, _T0, _T1)]])]"
            ],
            "arguments": {
                "subject": [
                    "_T0"
                ],
                "body": [
                    "_T1"
                ],
                "urgency": [
                    "bool",
                    "Dict[str, int]",
                    "Dict[str, Any]",
                    "str",
                    "Set[int]",
                    "int",
                    "Dict[str, Optional[str]]"
                ],
                "timeout": [
                    "int",
                    "str",
                    "bool",
                    "Callable[[Any], None]",
                    "Union[int, str]",
                    "float"
                ]
            }
        },
        "test_notifications": {
            "name": "test_notifications",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "manager_nospawn": [
                    "dict"
                ],
                "minimal_conf_noscreen": []
            }
        },
        "test_capabilities": {
            "name": "test_capabilities",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invoke_and_clear": {
            "name": "test_invoke_and_clear",
            "location": 177,
            "return": [
                ""
            ],
            "arguments": {
                "manager_nospawn": [
                    "Dict[str, Any]",
                    "int"
                ],
                "minimal_conf_noscreen": []
            }
        },
        "test_parse_text": {
            "name": "test_parse_text",
            "location": 303,
            "return": [
                ""
            ],
            "arguments": {
                "manager_nospawn": [
                    "IO[str]"
                ],
                "minimal_conf_noscreen": []
            }
        },
        "test_unregister": {
            "name": "test_unregister",
            "location": 327,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_text.test_parser": {
            "name": "test_parser",
            "location": 304,
            "return": [
                "str",
                "Union[int, str]",
                "Optional[str]"
            ],
            "arguments": {
                "text": [
                    "str",
                    "bool",
                    "Union[str, None]"
                ]
            }
        },
        "test_unregister.deregister.no_op": {
            "name": "no_op",
            "location": 331,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "qtile-master/test/widgets/test_nvidia_sensors.py": {
        "test_nvidia_sensors_input_regex": {
            "name": "test_nvidia_sensors_input_regex",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "fake_nvidia": {
            "name": "fake_nvidia",
            "location": 28,
            "return": [
                "NvidiaSensors"
            ],
            "arguments": {
                "fake_qtile": [],
                "monkeypatch": [],
                "fake_window": []
            }
        },
        "test_nvidia_sensors_foreground_colour": {
            "name": "test_nvidia_sensors_foreground_colour",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_nvidia": []
            }
        },
        "MockNvidiaSMI.get_temperature": {
            "name": "get_temperature",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": []
            }
        }
    },
    "qtile-master/test/widgets/test_openweather.py": {
        "mock_fetch": {
            "name": "mock_fetch",
            "location": 29,
            "return": [
                "Dict[(str, Union[(int, str, Dict[(str, Union[(float, int, str)])], List[Dict[(str, Union[(int, str)])]])])]"
            ],
            "arguments": {}
        },
        "patch_openweather": {
            "name": "patch_openweather",
            "location": 67,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "request": [],
                "monkeypatch": []
            }
        },
        "test_openweather_parse": {
            "name": "test_openweather_parse",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "patch_openweather": [],
                "minimal_conf_noscreen": [],
                "manager_nospawn": [],
                "params": [],
                "expected": []
            }
        },
        "test_url": {
            "name": "test_url",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "patch_openweather": [],
                "params": [],
                "vals": []
            }
        }
    },
    "qtile-master/test/widgets/test_pomodoro.py": {
        "patched_widget": {
            "name": "patched_widget",
            "location": 49,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "monkeypatch": [
                    "int",
                    "Optional[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_pomodoro": {
            "name": "test_pomodoro",
            "location": 56,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fake_qtile": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "fake_window": [
                    "bool",
                    "Optional[datetime.datetime]",
                    "Optional[bool]",
                    "Iterable[str]"
                ]
            }
        },
        "MockDatetime.now": {
            "name": "now",
            "location": 44,
            "return": [
                "MockDatetime"
            ],
            "arguments": {
                "cls": [
                    "Type[_TMockDatetime]"
                ]
            }
        }
    },
    "qtile-master/test/widgets/test_quickexit.py": {
        "test_trigger_and_cancel": {
            "name": "test_trigger_and_cancel",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_nospawn": [
                    "dict"
                ],
                "minimal_conf_noscreen": []
            }
        },
        "test_exit": {
            "name": "test_exit",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_nospawn": [
                    "dict"
                ],
                "minimal_conf_noscreen": []
            }
        }
    },
    "qtile-master/test/widgets/test_sensors.py": {
        "sensors_manager": {
            "name": "sensors_manager",
            "location": 46,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "monkeypatch": [],
                "manager_nospawn": [],
                "minimal_conf_noscreen": [],
                "request": []
            }
        },
        "test_thermal_sensor_metric": {
            "name": "test_thermal_sensor_metric",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "sensors_manager": []
            }
        },
        "test_thermal_sensor_imperial": {
            "name": "test_thermal_sensor_imperial",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "sensors_manager": []
            }
        },
        "test_thermal_sensor_tagged_sensor": {
            "name": "test_thermal_sensor_tagged_sensor",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "sensors_manager": []
            }
        },
        "test_thermal_sensor_unknown_sensor": {
            "name": "test_thermal_sensor_unknown_sensor",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "sensors_manager": []
            }
        },
        "test_thermal_sensor_format": {
            "name": "test_thermal_sensor_format",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "sensors_manager": []
            }
        },
        "test_thermal_sensor_colour_normal": {
            "name": "test_thermal_sensor_colour_normal",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "sensors_manager": []
            }
        },
        "test_thermal_sensor_colour_alert": {
            "name": "test_thermal_sensor_colour_alert",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "sensors_manager": []
            }
        },
        "Temp.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label": [],
                "temp": [],
                "fahrenheit": [
                    "bool"
                ]
            }
        },
        "MockPsutil.sensors_temperatures": {
            "name": "sensors_temperatures",
            "location": 41,
            "return": [
                "Dict[(str, List[Temp])]"
            ],
            "arguments": {
                "cls": [],
                "fahrenheit": [
                    "bool"
                ]
            }
        }
    },
    "qtile-master/test/widgets/test_sep.py": {
        "test_orientations": {
            "name": "test_orientations",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager_nospawn": [],
                "minimal_conf_noscreen": [
                    "str",
                    "Optional[Iterable[Any]]"
                ],
                "screen": [
                    "str",
                    "Optional[Iterable[Any]]"
                ],
                "location": [
                    "int",
                    "bool"
                ],
                "attribute": [
                    "str"
                ]
            }
        },
        "test_padding_and_width": {
            "name": "test_padding_and_width",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_nospawn": [
                    "dict"
                ],
                "minimal_conf_noscreen": []
            }
        },
        "test_deprecated_config": {
            "name": "test_deprecated_config",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "qtile-master/test/widgets/test_spacer.py": {
        "test_stretch": {
            "name": "test_stretch",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager_nospawn": [],
                "minimal_conf_noscreen": [
                    "str",
                    "Optional[Iterable[Any]]"
                ],
                "screen": [
                    "str",
                    "Optional[Iterable[Any]]"
                ],
                "location": [
                    "int",
                    "bool"
                ],
                "attribute": [
                    "str",
                    "Callable"
                ]
            }
        },
        "test_fixed_size": {
            "name": "test_fixed_size",
            "location": 59,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager_nospawn": [
                    "dict"
                ],
                "minimal_conf_noscreen": [],
                "screen": [],
                "location": [
                    "int"
                ],
                "attribute": []
            }
        }
    },
    "qtile-master/test/widgets/test_statusnotifier.py": {
        "wait_for_icon": {
            "name": "wait_for_icon",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "widget": [
                    "int",
                    "List[str]",
                    "bool"
                ],
                "hidden": [
                    "bool",
                    "str",
                    "int",
                    "List[str]",
                    "Union[int, Tuple[int, int]]",
                    "Optional[int]"
                ],
                "prop": [
                    "typing.Text",
                    "int",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "check_fullscreen": {
            "name": "check_fullscreen",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "windows": [
                    "str",
                    "Tuple[List, List, List]",
                    "bytes",
                    "bool"
                ],
                "fullscreen": [
                    "bool",
                    "str",
                    "Tuple[List, List, List]",
                    "bytes"
                ]
            }
        },
        "sni_config": {
            "name": "sni_config",
            "location": 45,
            "return": [
                "",
                "typing.Generator[SNIConfig]"
            ],
            "arguments": {
                "request": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "manager_nospawn": [
                    "str"
                ]
            }
        },
        "test_statusnotifier_defaults": {
            "name": "test_statusnotifier_defaults",
            "location": 76,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager_nospawn": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "sni_config": [
                    "Union[int, float]"
                ]
            }
        },
        "test_statusnotifier_defaults_vertical_bar": {
            "name": "test_statusnotifier_defaults_vertical_bar",
            "location": 91,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager_nospawn": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "sni_config": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_statusnotifier_icon_size": {
            "name": "test_statusnotifier_icon_size",
            "location": 110,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager_nospawn": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "sni_config": [
                    "Union[int, float]",
                    "BaseException"
                ]
            }
        },
        "test_statusnotifier_left_click": {
            "name": "test_statusnotifier_left_click",
            "location": 126,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager_nospawn": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "sni_config": [
                    "str"
                ]
            }
        },
        "test_statusnotifier_left_click_vertical_bar": {
            "name": "test_statusnotifier_left_click_vertical_bar",
            "location": 154,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager_nospawn": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "sni_config": []
            }
        }
    },
    "qtile-master/test/widgets/test_stock_ticker.py": {
        "test_stock_ticker_methods": {
            "name": "test_stock_ticker_methods",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "qtile-master/test/widgets/test_systray.py": {
        "test_no_duplicates_multiple_instances": {
            "name": "test_no_duplicates_multiple_instances",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_nospawn": [
                    "dict"
                ],
                "minimal_conf_noscreen": [],
                "backend_name": [
                    "str",
                    "int"
                ]
            }
        },
        "test_no_duplicates_mirror": {
            "name": "test_no_duplicates_mirror",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_nospawn": [
                    "dict"
                ],
                "minimal_conf_noscreen": [],
                "backend_name": [
                    "str",
                    "int"
                ]
            }
        },
        "test_systray_reconfigure_screens": {
            "name": "test_systray_reconfigure_screens",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_nospawn": [
                    "Tuple[int, int]",
                    "str"
                ],
                "minimal_conf_noscreen": [
                    "Mapping[str, Any]",
                    "str",
                    "List[str]"
                ],
                "backend_name": [
                    "str",
                    "int"
                ]
            }
        },
        "test_systray_icons": {
            "name": "test_systray_icons",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_nospawn": [
                    "Tuple[int, int]",
                    "str",
                    "Dict[str, Any]"
                ],
                "minimal_conf_noscreen": [
                    "Mapping[str, Any]",
                    "str",
                    "List[str]"
                ],
                "backend_name": [
                    "str",
                    "int"
                ]
            }
        },
        "test_systray_icons.wait_for_icons": {
            "name": "wait_for_icons",
            "location": 103,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "qtile-master/test/widgets/test_textbox.py": {
        "test_text_box_bar_orientations": {
            "name": "test_text_box_bar_orientations",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_nospawn": [],
                "minimal_conf_noscreen": [],
                "position": []
            }
        },
        "test_text_box_max_chars": {
            "name": "test_text_box_max_chars",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_nospawn": [],
                "minimal_conf_noscreen": []
            }
        }
    },
    "qtile-master/test/widgets/test_thermal_zone.py": {
        "test_thermal_zone_getting_value": {
            "name": "test_thermal_zone_getting_value",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "qtile-master/test/widgets/test_volume.py": {
        "test_images_fail": {
            "name": "test_images_fail",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_images_good": {
            "name": "test_images_good",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ],
                "fake_bar": [
                    "List[int]",
                    "str",
                    "bool",
                    "int"
                ],
                "svg_img_as_pypath": [
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_emoji": {
            "name": "test_emoji",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_text": {
            "name": "test_text",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "qtile-master/test/widgets/test_widgetbox.py": {
        "test_widgetbox_widget": {
            "name": "test_widgetbox_widget",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_qtile": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "fake_window": [
                    "int",
                    "List[Dict[str, Any]]",
                    "str"
                ]
            }
        },
        "test_widgetbox_mirror": {
            "name": "test_widgetbox_mirror",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_nospawn": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "minimal_conf_noscreen": []
            }
        },
        "test_widgetbox_mouse_click": {
            "name": "test_widgetbox_mouse_click",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_nospawn": [
                    "dict"
                ],
                "minimal_conf_noscreen": []
            }
        },
        "test_widgetbox_with_systray_reconfigure_screens_box_open": {
            "name": "test_widgetbox_with_systray_reconfigure_screens_box_open",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_nospawn": [
                    "Optional[dict]"
                ],
                "minimal_conf_noscreen": [
                    "Mapping[str, Any]",
                    "str",
                    "List[str]"
                ],
                "backend_name": [
                    "str",
                    "int"
                ]
            }
        },
        "test_widgetbox_with_systray_reconfigure_screens_box_closed": {
            "name": "test_widgetbox_with_systray_reconfigure_screens_box_closed",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_nospawn": [
                    "Optional[dict]"
                ],
                "minimal_conf_noscreen": [
                    "Mapping[str, Any]",
                    "str",
                    "List[str]"
                ],
                "backend_name": [
                    "str",
                    "int"
                ]
            }
        },
        "test_deprecated_configuration": {
            "name": "test_deprecated_configuration",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "qtile-master/test/widgets/test_widget_init_configure.py": {
        "no_op": {
            "name": "no_op",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_widget_init_config": {
            "name": "test_widget_init_config",
            "location": 91,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager_nospawn": [
                    "dict"
                ],
                "minimal_conf_noscreen": [
                    "str",
                    "Optional[Iterable[Any]]"
                ],
                "widget_class": [
                    "Optional[int]",
                    "str"
                ],
                "kwargs": []
            }
        },
        "test_widget_init_config_vertical_bar": {
            "name": "test_widget_init_config_vertical_bar",
            "location": 123,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager_nospawn": [
                    "dict"
                ],
                "minimal_conf_noscreen": [
                    "str",
                    "Optional[Iterable[Any]]"
                ],
                "widget_class": [
                    "Optional[int]",
                    "str"
                ],
                "kwargs": []
            }
        },
        "test_widget_init_config_set_width": {
            "name": "test_widget_init_config_set_width",
            "location": 150,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "widget_class": [
                    "int",
                    "str",
                    "bool",
                    "List[str]"
                ],
                "kwargs": []
            }
        },
        "test_incompatible_orientation": {
            "name": "test_incompatible_orientation",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_qtile": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "fake_window": [
                    "bool",
                    "Optional[bool]",
                    "Iterable[str]"
                ]
            }
        }
    },
    "qtile-master/test/widgets/test_windowname.py": {
        "test_window_names": {
            "name": "test_window_names",
            "location": 71,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": []
            }
        },
        "test_window_names.widget_text_on_screen": {
            "name": "widget_text_on_screen",
            "location": 72,
            "return": [
                "bool",
                "str",
                "Set[str]",
                "Iterable"
            ],
            "arguments": {
                "index": [
                    "int"
                ]
            }
        }
    },
    "qtile-master/test/widgets/test_windowtabs.py": {
        "test_single_window_states": {
            "name": "test_single_window_states",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "float",
                    "str"
                ]
            }
        },
        "test_multiple_windows": {
            "name": "test_multiple_windows",
            "location": 96,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "Exception",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_selected": {
            "name": "test_selected",
            "location": 117,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": []
            }
        },
        "test_single_window_states.widget_text": {
            "name": "widget_text",
            "location": 66,
            "return": [],
            "arguments": {}
        },
        "test_multiple_windows.widget_text": {
            "name": "widget_text",
            "location": 97,
            "return": [],
            "arguments": {}
        },
        "test_selected.widget_text": {
            "name": "widget_text",
            "location": 120,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {}
        }
    },
    "qtile-master/test/widgets/test_window_count.py": {
        "test_different_screens": {
            "name": "test_different_screens",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "manager": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_window_count": {
            "name": "test_window_count",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "manager_nospawn": [
                    "str"
                ],
                "minimal_conf_noscreen": []
            }
        },
        "test_attribute_errors": {
            "name": "test_attribute_errors",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_attribute_errors.no_op": {
            "name": "no_op",
            "location": 96,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "qtile-master/test/widgets/test_wlan.py": {
        "no_op": {
            "name": "no_op",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "patched_wlan": {
            "name": "patched_wlan",
            "location": 57,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "Optional[int]",
                    "Dict[str, str]"
                ]
            }
        },
        "test_wlan_display": {
            "name": "test_wlan_display",
            "location": 75,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "minimal_conf_noscreen": [
                    "bool"
                ],
                "manager_nospawn": [
                    "bool",
                    "Mapping[str, str]",
                    "str",
                    "int"
                ],
                "patched_wlan": [
                    "str",
                    "Union[str, float]",
                    "int",
                    "bool"
                ],
                "kwargs": [],
                "expected": [
                    "str",
                    "Union[str, float]",
                    "int",
                    "bool"
                ]
            }
        },
        "MockIwlib.get_iwconfig": {
            "name": "get_iwconfig",
            "location": 51,
            "return": [
                "Dict[(str, Union[(bytes, Dict[(str, int)])])]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Mapping[str, Any]",
                    "type"
                ],
                "interface": [
                    "str",
                    "Mapping[str, Any]",
                    "type"
                ]
            }
        }
    },
    "qtile-master/test/widgets/test_wttr.py": {
        "test_wttr_methods": {
            "name": "test_wttr_methods",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_wttr_no_location": {
            "name": "test_wttr_no_location",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "qtile-master/test/widgets/__init__.py": {},
    "qtile-master/test/widgets/docs_screenshots/conftest.py": {
        "target": {
            "name": "target",
            "location": 34,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {}
        },
        "screenshot_manager": {
            "name": "screenshot_manager",
            "location": 96,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "widget": [
                    "dict",
                    "int",
                    "str"
                ],
                "request": [],
                "manager_nospawn": [],
                "minimal_conf_noscreen": [],
                "target": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "target.get_file_name": {
            "name": "get_file_name",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "w_name": [
                    "dict",
                    "Dict[str, str]",
                    "list",
                    "MutableMapping[str, str]"
                ],
                "config": [
                    "dict",
                    "Dict[str, Any]",
                    "kedro.config.ConfigLoader",
                    "Optional[dict]"
                ]
            }
        },
        "screenshot_manager.filename": {
            "name": "filename",
            "location": 177,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "screenshot_manager.ScreenshotWidget.__init__": {
            "name": "__init__",
            "location": 117,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "screenshot_manager.ScreenshotWidget.cmd_take_screenshot": {
            "name": "cmd_take_screenshot",
            "location": 122,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "screenshot_manager.ScreenshotBar.cmd_take_screenshot": {
            "name": "cmd_take_screenshot",
            "location": 137,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "int",
                    "Iterable[List[str]]",
                    "Tuple[int]"
                ],
                "x": [
                    "int",
                    "str"
                ],
                "y": [
                    "int",
                    "str"
                ],
                "width": [
                    "None",
                    "Optional[int]",
                    "int",
                    "Optional[float]",
                    "Union[int, None]",
                    "float"
                ],
                "height": [
                    "None",
                    "int",
                    "Optional[int]",
                    "Optional[float]",
                    "Sequence[int]",
                    "float"
                ]
            }
        }
    },
    "qtile-master/test/widgets/docs_screenshots/ss_battery.py": {
        "widget": {
            "name": "widget",
            "location": 29,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "int",
                    "List[dict]"
                ]
            }
        },
        "ss_battery": {
            "name": "ss_battery",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "screenshot_manager": []
            }
        }
    },
    "qtile-master/test/widgets/docs_screenshots/ss_batteryicon.py": {
        "widget": {
            "name": "widget",
            "location": 29,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "int",
                    "List[dict]"
                ]
            }
        },
        "ss_batteryicon": {
            "name": "ss_batteryicon",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "screenshot_manager": []
            }
        }
    },
    "qtile-master/test/widgets/docs_screenshots/ss_caps_lock_indicator.py": {
        "widget": {
            "name": "widget",
            "location": 29,
            "return": [
                "int",
                "List[int]",
                "List[dict]"
            ],
            "arguments": {
                "monkeypatch": [
                    "str"
                ]
            }
        },
        "ss_caps_num_lock_indicator": {
            "name": "ss_caps_num_lock_indicator",
            "location": 52,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "screenshot_manager": [
                    "str",
                    "Tuple[int, int]",
                    "float"
                ]
            }
        }
    },
    "qtile-master/test/widgets/docs_screenshots/ss_checkupdates.py": {
        "widget": {
            "name": "widget",
            "location": 27,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "monkeypatch": [
                    "Optional[str]",
                    "Sequence[Dict[str, Any]]",
                    "str",
                    "int"
                ]
            }
        },
        "ss_checkupdates": {
            "name": "ss_checkupdates",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "screenshot_manager": [
                    "int"
                ]
            }
        }
    },
    "qtile-master/test/widgets/docs_screenshots/ss_chord.py": {
        "widget": {
            "name": "widget",
            "location": 26,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {}
        },
        "ss_chord": {
            "name": "ss_chord",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "screenshot_manager": []
            }
        }
    },
    "qtile-master/test/widgets/docs_screenshots/ss_clock.py": {
        "widget": {
            "name": "widget",
            "location": 26,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {}
        },
        "ss_clock": {
            "name": "ss_clock",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "screenshot_manager": []
            }
        }
    },
    "qtile-master/test/widgets/docs_screenshots/ss_cmus.py": {
        "widget": {
            "name": "widget",
            "location": 29,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "ss_cmus": {
            "name": "ss_cmus",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "screenshot_manager": []
            }
        }
    },
    "qtile-master/test/widgets/docs_screenshots/ss_countdown.py": {
        "widget": {
            "name": "widget",
            "location": 30,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {}
        },
        "ss_countdown": {
            "name": "ss_countdown",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "screenshot_manager": []
            }
        }
    },
    "qtile-master/test/widgets/docs_screenshots/ss_cpu.py": {
        "widget": {
            "name": "widget",
            "location": 29,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "Optional[int]",
                    "Dict[str, str]"
                ]
            }
        },
        "ss_cpu": {
            "name": "ss_cpu",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "screenshot_manager": []
            }
        }
    },
    "qtile-master/test/widgets/docs_screenshots/ss_cpugraph.py": {
        "widget": {
            "name": "widget",
            "location": 48,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "Optional[int]",
                    "Dict[str, str]"
                ]
            }
        },
        "ss_cpugraph": {
            "name": "ss_cpugraph",
            "location": 67,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "screenshot_manager": [
                    "Optional[bool]"
                ]
            }
        },
        "MockPsutil.cpu_times": {
            "name": "cpu_times",
            "location": 37,
            "return": [
                "CPU",
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Optional[bool]"
                ]
            }
        }
    },
    "qtile-master/test/widgets/docs_screenshots/ss_crypto_ticker.py": {
        "widget": {
            "name": "widget",
            "location": 27,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {}
        },
        "ss_crypto_ticker": {
            "name": "ss_crypto_ticker",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "screenshot_manager": [
                    "T"
                ]
            }
        }
    },
    "qtile-master/test/widgets/docs_screenshots/ss_currentscreen.py": {
        "widget": {
            "name": "widget",
            "location": 26,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {}
        },
        "ss_currentscreen": {
            "name": "ss_currentscreen",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "screenshot_manager": []
            }
        }
    },
    "qtile-master/test/widgets/docs_screenshots/ss_df.py": {
        "widget": {
            "name": "widget",
            "location": 27,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "monkeypatch": [
                    "bool",
                    "str",
                    "Iterable[T]",
                    "int"
                ]
            }
        },
        "ss_df": {
            "name": "ss_df",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "screenshot_manager": []
            }
        }
    },
    "qtile-master/test/widgets/docs_screenshots/ss_genpolltext.py": {
        "widget": {
            "name": "widget",
            "location": 26,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {}
        },
        "ss_genpolltext": {
            "name": "ss_genpolltext",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "screenshot_manager": []
            }
        }
    },
    "qtile-master/test/widgets/docs_screenshots/ss_genpollurl.py": {
        "widget": {
            "name": "widget",
            "location": 27,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "dict",
                    "Dict[str, str]",
                    "List[str]"
                ]
            }
        },
        "ss_genpollurl": {
            "name": "ss_genpollurl",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "screenshot_manager": []
            }
        }
    },
    "qtile-master/test/widgets/docs_screenshots/ss_gmail_checker.py": {
        "widget": {
            "name": "widget",
            "location": 30,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "monkeypatch": [
                    "list"
                ]
            }
        },
        "ss_gmail_checker": {
            "name": "ss_gmail_checker",
            "location": 49,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "screenshot_manager": [
                    "int",
                    "Callable[[], None]"
                ]
            }
        }
    },
    "qtile-master/test/widgets/docs_screenshots/ss_groupbox.py": {
        "widget": {
            "name": "widget",
            "location": 26,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {}
        },
        "ss_groupbox": {
            "name": "ss_groupbox",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "screenshot_manager": []
            }
        }
    },
    "qtile-master/test/widgets/docs_screenshots/ss_hddbusygraph.py": {
        "widget": {
            "name": "widget",
            "location": 39,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "Optional[int]",
                    "Dict[str, str]"
                ]
            }
        },
        "ss_hddbusygraph": {
            "name": "ss_hddbusygraph",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "screenshot_manager": [
                    "Optional[bool]"
                ]
            }
        }
    },
    "qtile-master/test/widgets/docs_screenshots/ss_hddgraph.py": {
        "widget": {
            "name": "widget",
            "location": 34,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "Optional[int]",
                    "Dict[str, str]"
                ]
            }
        },
        "ss_hddgraph": {
            "name": "ss_hddgraph",
            "location": 53,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "screenshot_manager": [
                    "Optional[bool]"
                ]
            }
        }
    },
    "qtile-master/test/widgets/docs_screenshots/ss_idlerpg.py": {
        "widget": {
            "name": "widget",
            "location": 27,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "monkeypatch": [
                    "bool",
                    "str",
                    "Iterable[T]",
                    "int"
                ]
            }
        },
        "ss_idlerpg": {
            "name": "ss_idlerpg",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "screenshot_manager": [
                    "T"
                ]
            }
        },
        "widget.no_op": {
            "name": "no_op",
            "location": 28,
            "return": [
                "typing.Text",
                "Tuple[int]",
                "str",
                "Sequence"
            ],
            "arguments": {}
        }
    },
    "qtile-master/test/widgets/docs_screenshots/ss_image.py": {
        "widget": {
            "name": "widget",
            "location": 32,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {}
        },
        "ss_image": {
            "name": "ss_image",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "screenshot_manager": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        }
    },
    "qtile-master/test/widgets/docs_screenshots/ss_imapwidget.py": {
        "widget": {
            "name": "widget",
            "location": 29,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "monkeypatch": [
                    "Mapping[str, Any]",
                    "dict"
                ]
            }
        },
        "ss_imapwidget": {
            "name": "ss_imapwidget",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "screenshot_manager": []
            }
        }
    },
    "qtile-master/test/widgets/docs_screenshots/ss_keyboardkbdd.py": {
        "widget": {
            "name": "widget",
            "location": 29,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "monkeypatch": [
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ]
            }
        },
        "ss_keyboardkbdd": {
            "name": "ss_keyboardkbdd",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "screenshot_manager": []
            }
        }
    },
    "qtile-master/test/widgets/docs_screenshots/ss_load.py": {
        "widget": {
            "name": "widget",
            "location": 29,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "Optional[int]",
                    "Dict[str, str]"
                ]
            }
        },
        "ss_load": {
            "name": "ss_load",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "screenshot_manager": [
                    "str",
                    "int",
                    "Optional[\"Game\"]",
                    "Mapping[str, Any]",
                    "Optional[str]"
                ]
            }
        }
    },
    "qtile-master/test/widgets/docs_screenshots/ss_memory.py": {
        "widget": {
            "name": "widget",
            "location": 29,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "monkeypatch": [
                    "list"
                ]
            }
        },
        "ss_memory": {
            "name": "ss_memory",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "screenshot_manager": [
                    "int",
                    "Callable[[], None]"
                ]
            }
        }
    },
    "qtile-master/test/widgets/docs_screenshots/ss_memorygraph.py": {
        "widget": {
            "name": "widget",
            "location": 48,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "Optional[int]",
                    "Dict[str, str]"
                ]
            }
        },
        "ss_memorygraph": {
            "name": "ss_memorygraph",
            "location": 67,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "screenshot_manager": [
                    "Optional[bool]"
                ]
            }
        },
        "MockPsutil.virtual_memory": {
            "name": "virtual_memory",
            "location": 37,
            "return": [
                "Memory",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "qtile-master/test/widgets/docs_screenshots/ss_moc.py": {
        "widget": {
            "name": "widget",
            "location": 27,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "fake_qtile": [
                    "bool",
                    "str",
                    "List[str]"
                ],
                "monkeypatch": [
                    "bytes",
                    "Callable"
                ],
                "fake_window": [
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        },
        "ss_moc": {
            "name": "ss_moc",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "screenshot_manager": []
            }
        }
    },
    "qtile-master/test/widgets/docs_screenshots/ss_mpd2.py": {
        "widget": {
            "name": "widget",
            "location": 29,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "Optional[int]",
                    "Dict[str, str]"
                ]
            }
        },
        "ss_mpd2": {
            "name": "ss_mpd2",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "screenshot_manager": []
            }
        },
        "ss_mpd2_idle": {
            "name": "ss_mpd2_idle",
            "location": 53,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "screenshot_manager": [
                    "Optional[bool]"
                ]
            }
        }
    },
    "qtile-master/test/widgets/docs_screenshots/ss_mpris2.py": {
        "widget": {
            "name": "widget",
            "location": 30,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "bool",
                    "Optional[int]",
                    "Container[\"Taxon\"]",
                    "Coroutine"
                ],
                "patched_module": [
                    "tuple",
                    "str"
                ]
            }
        },
        "ss_mpris2": {
            "name": "ss_mpris2",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "screenshot_manager": [
                    "Optional[bool]"
                ]
            }
        },
        "ss_mpris2_paused": {
            "name": "ss_mpris2_paused",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "screenshot_manager": [
                    "BinaryIO",
                    "str"
                ]
            }
        }
    },
    "qtile-master/test/widgets/docs_screenshots/ss_net.py": {
        "widget": {
            "name": "widget",
            "location": 29,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "Optional[int]",
                    "Dict[str, str]"
                ]
            }
        },
        "ss_net": {
            "name": "ss_net",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "screenshot_manager": [
                    "int",
                    "Callable[[], None]"
                ]
            }
        }
    },
    "qtile-master/test/widgets/docs_screenshots/ss_netgraph.py": {
        "widget": {
            "name": "widget",
            "location": 51,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "Optional[int]",
                    "Dict[str, str]"
                ]
            }
        },
        "ss_netgraph": {
            "name": "ss_netgraph",
            "location": 70,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "screenshot_manager": [
                    "Optional[bool]"
                ]
            }
        },
        "MockPsutil.net_io_counters": {
            "name": "net_io_counters",
            "location": 39,
            "return": [
                "dict[typing.Text, IOCounters]",
                "int",
                "IOCounters",
                "str",
                "bytes",
                "List[List[int]]"
            ],
            "arguments": {
                "cls": [
                    "Callable",
                    "bool",
                    "Type"
                ],
                "pernic": [
                    "bool",
                    "Callable",
                    "Type"
                ],
                "_nowrap": [
                    "bool",
                    "Callable",
                    "Type"
                ]
            }
        },
        "MockPsutil.net_io_counters.IOCounters.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/test/widgets/docs_screenshots/ss_notify.py": {
        "widget": {
            "name": "widget",
            "location": 32,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {}
        },
        "ss_notify": {
            "name": "ss_notify",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "screenshot_manager": []
            }
        }
    },
    "qtile-master/test/widgets/docs_screenshots/ss_nvidia_sensors.py": {
        "widget": {
            "name": "widget",
            "location": 27,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "monkeypatch": [
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "ss_nvidia_sensors": {
            "name": "ss_nvidia_sensors",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "screenshot_manager": [
                    "int",
                    "Callable[[], None]"
                ]
            }
        }
    },
    "qtile-master/test/widgets/docs_screenshots/ss_openweather.py": {
        "widget": {
            "name": "widget",
            "location": 27,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "monkeypatch": [
                    "int",
                    "Optional[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "ss_openweather": {
            "name": "ss_openweather",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "screenshot_manager": []
            }
        }
    },
    "qtile-master/test/widgets/docs_screenshots/ss_pomodoro.py": {
        "increment_time": {
            "name": "increment_time",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "increment": [
                    "datetime.datetime",
                    "str"
                ]
            }
        },
        "widget": {
            "name": "widget",
            "location": 33,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "monkeypatch": [
                    "int",
                    "Optional[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "ss_pomodoro": {
            "name": "ss_pomodoro",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "screenshot_manager": [
                    "Callable",
                    "T"
                ]
            }
        }
    },
    "qtile-master/test/widgets/docs_screenshots/ss_quickexit.py": {
        "widget": {
            "name": "widget",
            "location": 26,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {}
        },
        "ss_quickexit": {
            "name": "ss_quickexit",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "screenshot_manager": [
                    "int"
                ]
            }
        }
    },
    "qtile-master/test/widgets/docs_screenshots/ss_sensors.py": {
        "widget": {
            "name": "widget",
            "location": 29,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "Optional[int]",
                    "Dict[str, str]"
                ]
            }
        },
        "ss_thermal_sensor": {
            "name": "ss_thermal_sensor",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "screenshot_manager": []
            }
        }
    },
    "qtile-master/test/widgets/docs_screenshots/ss_sep.py": {
        "widget": {
            "name": "widget",
            "location": 26,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {}
        },
        "ss_sep": {
            "name": "ss_sep",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "screenshot_manager": []
            }
        }
    },
    "qtile-master/test/widgets/docs_screenshots/ss_spacer.py": {
        "widget": {
            "name": "widget",
            "location": 26,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {}
        },
        "ss_spacer": {
            "name": "ss_spacer",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "screenshot_manager": []
            }
        }
    },
    "qtile-master/test/widgets/docs_screenshots/ss_statusnotifier.py": {
        "widget": {
            "name": "widget",
            "location": 26,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "request": [
                    "bool"
                ],
                "manager_nospawn": [
                    "bool"
                ]
            }
        },
        "ss_statusnotifier": {
            "name": "ss_statusnotifier",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "screenshot_manager": [
                    "Optional[str]"
                ]
            }
        }
    },
    "qtile-master/test/widgets/docs_screenshots/ss_stock_ticker.py": {
        "widget": {
            "name": "widget",
            "location": 67,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "monkeypatch": [
                    "bool",
                    "str",
                    "Iterable[T]",
                    "int"
                ]
            }
        },
        "ss_stock_ticker": {
            "name": "ss_stock_ticker",
            "location": 76,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "screenshot_manager": [
                    "int",
                    "Callable[[], None]"
                ]
            }
        },
        "widget.result": {
            "name": "result",
            "location": 68,
            "return": [
                "dict[typing.Text, typing.Union[dict[typing.Text, typing.Text],dict[typing.Text, dict[typing.Text, typing.Text]]]]",
                "dict",
                "int",
                "List[str]",
                "Dict[str, str]",
                "Exception",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qtile-master/test/widgets/docs_screenshots/ss_swapgraph.py": {
        "widget": {
            "name": "widget",
            "location": 46,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "Optional[int]",
                    "Dict[str, str]"
                ]
            }
        },
        "ss_swapgraph": {
            "name": "ss_swapgraph",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "screenshot_manager": [
                    "Optional[bool]"
                ]
            }
        },
        "MockPsutil.swap_memory": {
            "name": "swap_memory",
            "location": 37,
            "return": [
                "Swap",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "qtile-master/test/widgets/docs_screenshots/ss_textbox.py": {
        "widget": {
            "name": "widget",
            "location": 28,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {}
        },
        "ss_text": {
            "name": "ss_text",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "screenshot_manager": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        }
    },
    "qtile-master/test/widgets/docs_screenshots/ss_thermal_zone.py": {
        "widget": {
            "name": "widget",
            "location": 30,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {}
        },
        "ss_thermal_zone": {
            "name": "ss_thermal_zone",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "screenshot_manager": [
                    "int",
                    "str",
                    "Optional[\"Game\"]",
                    "Optional[str]"
                ]
            }
        }
    },
    "qtile-master/test/widgets/docs_screenshots/ss_volume.py": {
        "widget": {
            "name": "widget",
            "location": 33,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {}
        },
        "ss_volume": {
            "name": "ss_volume",
            "location": 53,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "screenshot_manager": [
                    "Optional[bool]"
                ]
            }
        }
    },
    "qtile-master/test/widgets/docs_screenshots/ss_widgetbox.py": {
        "widget": {
            "name": "widget",
            "location": 26,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "monkeypatch": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "ss_widgetbox": {
            "name": "ss_widgetbox",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "screenshot_manager": [
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "ss_widgetbox.bar_width": {
            "name": "bar_width",
            "location": 43,
            "return": [
                "int",
                "bool",
                "List[int]",
                "List[List[int]]",
                "str",
                "object"
            ],
            "arguments": {}
        },
        "ss_widgetbox.take_screenshot": {
            "name": "take_screenshot",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "qtile-master/test/widgets/docs_screenshots/ss_windowname.py": {
        "widget": {
            "name": "widget",
            "location": 26,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {}
        },
        "ss_windowname": {
            "name": "ss_windowname",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "screenshot_manager": [
                    "int",
                    "Optional[str]",
                    "bool"
                ]
            }
        }
    },
    "qtile-master/test/widgets/docs_screenshots/ss_windowtabs.py": {
        "widget": {
            "name": "widget",
            "location": 26,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {}
        },
        "ss_window_count": {
            "name": "ss_window_count",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "screenshot_manager": [
                    "str"
                ]
            }
        }
    },
    "qtile-master/test/widgets/docs_screenshots/ss_window_count.py": {
        "widget": {
            "name": "widget",
            "location": 26,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {}
        },
        "ss_window_count": {
            "name": "ss_window_count",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "screenshot_manager": [
                    "str"
                ]
            }
        }
    },
    "qtile-master/test/widgets/docs_screenshots/ss_wlan.py": {
        "widget": {
            "name": "widget",
            "location": 29,
            "return": [
                "",
                "typing.Generator"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "Optional[int]",
                    "Dict[str, str]"
                ]
            }
        },
        "ss_wlan": {
            "name": "ss_wlan",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "screenshot_manager": []
            }
        }
    },
    "qtile-master/test/widgets/docs_screenshots/ss_wttr.py": {
        "widget": {
            "name": "widget",
            "location": 28,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "ss_wttr": {
            "name": "ss_wttr",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "screenshot_manager": []
            }
        },
        "widget.result": {
            "name": "result",
            "location": 29,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
{
    "qualipy-master/setup.py": {},
    "qualipy-master/docs/conf.py": {},
    "qualipy-master/qualipy/anomaly_detection.py": {
        "create_file_name": {
            "name": "create_file_name",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "model_dir": [
                    "str",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]"
                ],
                "project_name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]"
                ],
                "col_name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]"
                ],
                "metric_name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]"
                ],
                "arguments": [
                    "str",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "anomaly_data_project": {
            "name": "anomaly_data_project",
            "location": 333,
            "return": [
                "str",
                "int",
                "List[str]",
                "float"
            ],
            "arguments": {
                "project_name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "dict",
                    "dict[, ]"
                ],
                "db_url": [
                    "str",
                    "bool",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "config_dir": [
                    "str",
                    "Optional[str]",
                    "None",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "anomaly_data_all_projects": {
            "name": "anomaly_data_all_projects",
            "location": 357,
            "return": [
                "str",
                "Union[Dict, Tuple]",
                "int",
                "Dict[str, Any]",
                "dict",
                "bytes"
            ],
            "arguments": {
                "project_names": [
                    "str",
                    "Optional[str]",
                    "tuple"
                ],
                "db_url": [
                    "str"
                ],
                "config_dir": [
                    "str"
                ]
            }
        },
        "ProphetModel.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "kwargs": []
            }
        },
        "ProphetModel.fit": {
            "name": "fit",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "train_data": [
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "ProphetModel.predict": {
            "name": "predict",
            "location": 37,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "test_data": [
                    "int",
                    "Dict[str, str]",
                    "Optional[int]",
                    "bool"
                ],
                "check_for_std": [
                    "pandas.DataFrame",
                    "bool"
                ],
                "multivariate": [
                    "pandas.DataFrame",
                    "bool"
                ]
            }
        },
        "ProphetModel.train_predict": {
            "name": "train_predict",
            "location": 62,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "train_data": [
                    "bytes",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "IsolationForestModel.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "kwargs": []
            }
        },
        "IsolationForestModel.fit": {
            "name": "fit",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "train_data": [
                    "typing.Callable[, ]",
                    "Callable",
                    "str",
                    "bytes",
                    "numpy.ndarray"
                ]
            }
        },
        "IsolationForestModel.predict": {
            "name": "predict",
            "location": 84,
            "return": [
                "int",
                "dict[, ]",
                "Callable",
                "bool",
                "str",
                "list[int]"
            ],
            "arguments": {
                "self": [],
                "test_data": [
                    "int",
                    "str",
                    "pandas.DataFrame",
                    "Dict[str, str]"
                ],
                "check_for_std": [
                    "bool",
                    "int",
                    "List[str]",
                    "Union[int, float]",
                    "str"
                ],
                "multivariate": [
                    "bool",
                    "int",
                    "List[str]",
                    "Union[int, float]",
                    "str"
                ]
            }
        },
        "IsolationForestModel.train_predict": {
            "name": "train_predict",
            "location": 98,
            "return": [
                "int",
                "bool",
                "List[Dict[str, Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "train_data": [
                    "bytes",
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "AnomalyModel.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_loc": [
                    "str"
                ],
                "model": [
                    "None"
                ],
                "arguments": [
                    "Dict[str, Any]",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "AnomalyModel.train": {
            "name": "train",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "train_data": [
                    "Dict[str, str]",
                    "dict[str, str]",
                    "dict",
                    "str",
                    "dict[, ]",
                    "list",
                    "list[]"
                ]
            }
        },
        "AnomalyModel.predict": {
            "name": "predict",
            "location": 126,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "test_data": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None",
                    "Optional[List[str]]",
                    "list[str]"
                ],
                "check_for_std": [
                    "bool",
                    "str",
                    "int",
                    "Optional[int]",
                    "Optional[List[str]]"
                ],
                "multivariate": [
                    "bool",
                    "str",
                    "int",
                    "Optional[int]",
                    "Optional[List[str]]"
                ]
            }
        },
        "AnomalyModel.train_predict": {
            "name": "train_predict",
            "location": 130,
            "return": [
                "Optional[Any]"
            ],
            "arguments": {
                "self": [],
                "train_data": [
                    "str",
                    "list[pandas.DataFrame]",
                    "pandas.DataFrame",
                    "typing.Callable[, ]",
                    "List[pandas.DataFrame]",
                    "list[str]",
                    "Callable",
                    "List[str]"
                ]
            }
        },
        "AnomalyModel.save": {
            "name": "save",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "col_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "metric_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "arguments": [
                    "str",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "LoadedModel.__init__": {
            "name": "__init__",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_loc": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "LoadedModel.load": {
            "name": "load",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project_name": [
                    "str"
                ],
                "col_name": [
                    "str"
                ],
                "metric_name": [
                    "str"
                ],
                "arguments": [
                    "str",
                    "None"
                ]
            }
        },
        "LoadedModel.predict": {
            "name": "predict",
            "location": 153,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "test_data": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None",
                    "Optional[List[str]]",
                    "list[str]"
                ],
                "check_for_std": [
                    "bool",
                    "str",
                    "int",
                    "Optional[int]",
                    "Optional[List[str]]"
                ],
                "multivariate": [
                    "bool",
                    "str",
                    "int",
                    "Optional[int]",
                    "Optional[List[str]]"
                ]
            }
        },
        "LoadedModel.train_predict": {
            "name": "train_predict",
            "location": 156,
            "return": [
                "Optional[Any]"
            ],
            "arguments": {
                "self": [],
                "train_data": [
                    "str",
                    "int",
                    "bytes",
                    "dict[, ]",
                    "dict",
                    "pandas.DataFrame",
                    "bool"
                ]
            }
        },
        "RunModels.__init__": {
            "name": "__init__",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project_name": [
                    "str",
                    "list[str]",
                    "List[str]",
                    "None",
                    "Optional[str]",
                    "Optional[projects.project_models.Project]"
                ],
                "engine": [
                    "str",
                    "list[str]",
                    "List[str]",
                    "None",
                    "Optional[str]",
                    "Optional[projects.project_models.Project]"
                ],
                "config_dir": [
                    "bool",
                    "str"
                ]
            }
        },
        "RunModels.train_all": {
            "name": "train_all",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenerateAnomalies.__init__": {
            "name": "__init__",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project_name": [
                    "str",
                    "list[str]",
                    "List[str]",
                    "None",
                    "Optional[str]",
                    "Optional[projects.project_models.Project]"
                ],
                "engine": [
                    "str",
                    "list[str]",
                    "List[str]",
                    "None",
                    "Optional[str]",
                    "Optional[projects.project_models.Project]"
                ],
                "config_dir": [
                    "bool",
                    "str"
                ]
            }
        },
        "GenerateAnomalies.create_anom_num_table": {
            "name": "create_anom_num_table",
            "location": 197,
            "return": [
                "str",
                "bytes",
                "List[dict]",
                "Union[Dict, List]",
                "Callable",
                "Union[shap.utils._legacy.Data, pandas.DataFrame, numpy.ndarray, scipy.sparse.spmatrix]",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenerateAnomalies.create_anom_cat_table": {
            "name": "create_anom_cat_table",
            "location": 256,
            "return": [
                "int",
                "Dict[str, List[int]]",
                "Callable",
                "Union[shap.utils._legacy.Data, pandas.DataFrame, numpy.ndarray, scipy.sparse.spmatrix]",
                "Union[Dict, List]",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qualipy-master/qualipy/cli.py": {
        "qualipy": {
            "name": "qualipy",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "port": [
                    "str"
                ],
                "host": [
                    "str",
                    "int",
                    "bool"
                ],
                "config_dir": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]"
                ],
                "train_anomaly": [
                    "str",
                    "Iterable[str]",
                    "typing.Iterable[str]",
                    "Optional[str]",
                    "None"
                ],
                "engine": [
                    "str",
                    "IO",
                    "typing.IO"
                ]
            }
        },
        "train_anomaly": {
            "name": "train_anomaly",
            "location": 52,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "project_name": [
                    "str",
                    "tuple",
                    "tuple[]",
                    "Optional[str]",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "config_dir": [
                    "str"
                ]
            }
        }
    },
    "qualipy-master/qualipy/column.py": {
        "function": {
            "name": "function",
            "location": 26,
            "return": [
                "Callable"
            ],
            "arguments": {
                "allowed_arguments": [
                    "Optional[List[str]]"
                ],
                "return_format": [
                    "type"
                ],
                "arguments": [
                    "Dict[(str, Any)]"
                ],
                "fail": [
                    "bool"
                ]
            }
        },
        "function.inner_fun": {
            "name": "inner_fun",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "method": [
                    "Callable",
                    "Callable[..., Optional[Any]]",
                    "List[str]",
                    "list",
                    "str"
                ]
            }
        },
        "Column._as_dict": {
            "name": "_as_dict",
            "location": 63,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "read_functions": [
                    "bool"
                ]
            }
        },
        "Column._from_dict": {
            "name": "_from_dict",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [
                    "dict"
                ]
            }
        },
        "Column._get_functions": {
            "name": "_get_functions",
            "location": 84,
            "return": [
                "Dict[(str, Callable)]"
            ],
            "arguments": {
                "self": [],
                "fun_attribute": [
                    "str"
                ],
                "column_name": [
                    "str"
                ]
            }
        },
        "Table._generate_columns": {
            "name": "_generate_columns",
            "location": 114,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Optional[dict]",
                    "dict[, ]",
                    "bool",
                    "bytes",
                    "None",
                    "List[Dict]",
                    "Iterable[bytes]",
                    "list[dict[, ]]",
                    "Set[str]",
                    "set[str]"
                ],
                "infer": [
                    "Optional[dict]",
                    "dict[, ]",
                    "bool",
                    "bytes",
                    "None",
                    "List[Dict]",
                    "Iterable[bytes]",
                    "list[dict[, ]]",
                    "Set[str]",
                    "set[str]"
                ]
            }
        },
        "Table._import_function": {
            "name": "_import_function",
            "location": 118,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "function_name": [
                    "str"
                ]
            }
        },
        "Table.extract_sample_row": {
            "name": "extract_sample_row",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Table._get_functions": {
            "name": "_get_functions",
            "location": 124,
            "return": [
                "Dict[(str, Callable)]"
            ],
            "arguments": {
                "self": [],
                "fun_attribute": [
                    "str"
                ],
                "column_name": [
                    "str"
                ]
            }
        },
        "PandasTable.from_dict": {
            "name": "from_dict",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [
                    "dict"
                ]
            }
        },
        "PandasTable._generate_columns": {
            "name": "_generate_columns",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]",
                    "Dict[str, float]",
                    "dict[str, float]",
                    "list",
                    "list[]"
                ],
                "infer": [
                    "bool"
                ]
            }
        },
        "PandasTable._import_function": {
            "name": "_import_function",
            "location": 205,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "function_name": [
                    "str"
                ]
            }
        },
        "SQLTable._generate_columns": {
            "name": "_generate_columns",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Optional[dict]",
                    "dict[, ]",
                    "bool",
                    "bytes",
                    "None",
                    "List[Dict]",
                    "Iterable[bytes]",
                    "list[dict[, ]]",
                    "Set[str]",
                    "set[str]"
                ],
                "infer": [
                    "bool"
                ]
            }
        },
        "function.inner_fun.wrapper": {
            "name": "wrapper",
            "location": 42,
            "return": [
                "bool",
                "List[Dict[str, Any]]"
            ],
            "arguments": {}
        }
    },
    "qualipy-master/qualipy/config.py": {},
    "qualipy-master/qualipy/database.py": {
        "create_table": {
            "name": "create_table",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "conn": [
                    "engine.base.Connection"
                ],
                "table_name": [
                    "str"
                ]
            }
        },
        "create_value_table": {
            "name": "create_value_table",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "conn": [
                    "engine.base.Connection"
                ],
                "table_name": [
                    "str"
                ]
            }
        },
        "create_custom_value_table": {
            "name": "create_custom_value_table",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "conn": [
                    "engine.base.Connection"
                ],
                "table_name": [
                    "str"
                ]
            }
        },
        "get_table": {
            "name": "get_table",
            "location": 57,
            "return": [
                "str"
            ],
            "arguments": {
                "engine": [
                    "engine.base.Engine"
                ],
                "table_name": [
                    "str"
                ]
            }
        },
        "get_all_values": {
            "name": "get_all_values",
            "location": 61,
            "return": [
                "Dict[str, int]",
                "int",
                "Optional[str]",
                "pandas.DataFrame",
                "dict"
            ],
            "arguments": {
                "engine": [
                    "engine.base.Engine"
                ],
                "table_name": [
                    "str"
                ],
                "last_date": [
                    "str"
                ]
            }
        },
        "delete_data": {
            "name": "delete_data",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "conn": [
                    "engine.base.Connection"
                ],
                "name": [
                    "str"
                ],
                "create_function": [
                    "Callable"
                ]
            }
        },
        "create_table_if_not_exists": {
            "name": "create_table_if_not_exists",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "conn": [
                    "engine.base.Connection"
                ],
                "name": [
                    "str"
                ],
                "create_function": [
                    "Callable"
                ]
            }
        },
        "_unpickle": {
            "name": "_unpickle",
            "location": 101,
            "return": [
                "str",
                "bool",
                "Optional[bool]",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "row": [
                    "list[str]",
                    "dict",
                    "Type[object]",
                    "List[str]",
                    "pandas.DataFrame",
                    "Dict[str, Any]"
                ]
            }
        },
        "get_project_table": {
            "name": "get_project_table",
            "location": 107,
            "return": [
                "str",
                "Mapping[str, Any]",
                "bytes"
            ],
            "arguments": {
                "engine": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[str]",
                    "None"
                ],
                "project_name": [
                    "str"
                ],
                "last_date": [
                    "str"
                ]
            }
        },
        "get_last_time": {
            "name": "get_last_time",
            "location": 115,
            "return": [
                "datetime.datetime"
            ],
            "arguments": {
                "engine": [
                    "str",
                    "float",
                    "int"
                ],
                "project_name": [
                    "str"
                ]
            }
        }
    },
    "qualipy-master/qualipy/exceptions.py": {
        "FailException.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "InvalidReturnValue.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "NullableError.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "InvalidColumn.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "bytes",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ]
            }
        },
        "InvalidType.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Callable[..., None]",
                    "str",
                    "typing.Callable[..., None]",
                    "Dict[str, Callable]",
                    "dict[str, typing.Callable[, ]]"
                ]
            }
        }
    },
    "qualipy-master/qualipy/project.py": {
        "_validate_project_name": {
            "name": "_validate_project_name",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "project_name": [
                    "str"
                ]
            }
        },
        "set_default_config": {
            "name": "set_default_config",
            "location": 18,
            "return": [
                "Dict[(nothing, nothing)]"
            ],
            "arguments": {}
        },
        "create_qualipy_folder": {
            "name": "create_qualipy_folder",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "config_dir": [
                    "str"
                ],
                "db_url": [
                    "str"
                ]
            }
        },
        "Project.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project_name": [
                    "str"
                ],
                "engine": [
                    "Optional[engine.base.Engine]"
                ],
                "config_dir": [
                    "str"
                ]
            }
        },
        "Project.add_column": {
            "name": "add_column",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "column": [
                    "qualipy.column.Column"
                ]
            }
        },
        "Project.add_table": {
            "name": "add_table",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "qualipy.column.Table"
                ]
            }
        },
        "Project._add_column": {
            "name": "_add_column",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "column": [
                    "Union[(qualipy.column.Column, List[qualipy.column.Column])]"
                ]
            }
        },
        "Project.get_project_table": {
            "name": "get_project_table",
            "location": 89,
            "return": [
                "str",
                "Dict[str, str]",
                "Dict[int, Set[str]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.delete_data": {
            "name": "delete_data",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.delete_from_project_config": {
            "name": "delete_from_project_config",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.add_to_project_list": {
            "name": "add_to_project_list",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "Dict[(str, Dict[(str, Union[(bool, str)])])]"
                ],
                "reset_config": [
                    "bool"
                ]
            }
        }
    },
    "qualipy-master/qualipy/run.py": {
        "_create_value": {
            "name": "_create_value",
            "location": 38,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "None",
                    "datetime.datetime",
                    "Optional[str]"
                ],
                "metric": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "date": [
                    "datetime.datetime"
                ],
                "type": [
                    "str"
                ],
                "return_format": [
                    "str"
                ]
            }
        },
        "set_standard_viz_params": {
            "name": "set_standard_viz_params",
            "location": 59,
            "return": [
                "Tuple[(Any, bool)]"
            ],
            "arguments": {
                "function_name": [
                    "str"
                ],
                "viz_options_static": [
                    "Dict[(str, Dict[(str, str)])]"
                ],
                "viz_options_dynamic": [
                    "Dict[(str, Dict[(str, str)])]"
                ]
            }
        },
        "DataSet.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project": [
                    "qualipy.project.Project"
                ],
                "backend": [
                    "str"
                ],
                "time_of_run": [
                    "Optional[datetime.datetime]"
                ],
                "batch_name": [
                    "str"
                ],
                "spark_context": [
                    "str",
                    "None",
                    "bool",
                    "Any",
                    "typing.Any",
                    "Optional[str]",
                    "Dict[str, list]",
                    "dict[str, list[]]"
                ],
                "train_anomaly": [
                    "bool"
                ]
            }
        },
        "DataSet.run": {
            "name": "run",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataSet.set_dataset": {
            "name": "set_dataset",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "str",
                    "int",
                    "Type[numpy.number]",
                    "typing.Type",
                    "Sequence[int]",
                    "typing.Sequence[int]"
                ]
            }
        },
        "DataSet.set_chunked_dataset": {
            "name": "set_chunked_dataset",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "typing.Iterable[str]",
                    "Optional[Iterable[str]]",
                    "bool",
                    "None",
                    "numpy.array",
                    "int"
                ],
                "time_freq": [
                    "str"
                ],
                "time_column": [
                    "Optional[int]",
                    "None",
                    "bool",
                    "int"
                ]
            }
        },
        "DataSet._generate_metrics": {
            "name": "_generate_metrics",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataSet._get_column_specific_general_info": {
            "name": "_get_column_specific_general_info",
            "location": 197,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "specs": [
                    "Dict[str, Any]",
                    "dict"
                ],
                "measures": [
                    "List[Dict[(str, Any)]]"
                ]
            }
        },
        "DataSet._get_general_info": {
            "name": "_get_general_info",
            "location": 225,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "measures": [
                    "List[Dict[(str, Any)]]"
                ]
            }
        },
        "DataSet._set_viz_type": {
            "name": "_set_viz_type",
            "location": 239,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "function": [
                    "Callable"
                ],
                "function_name": [
                    "str"
                ]
            }
        },
        "DataSet._write": {
            "name": "_write",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "measures": [
                    "List[Dict[(str, Any)]]"
                ]
            }
        }
    },
    "qualipy-master/qualipy/util.py": {
        "get_column": {
            "name": "get_column",
            "location": 11,
            "return": [
                "str",
                "bytes",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "str",
                    "pandas.DataFrame",
                    "Callable",
                    "dict",
                    "Optional[Dict]"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "set_value_type": {
            "name": "set_value_type",
            "location": 23,
            "return": [
                "dict[, ]",
                "Dict[str, Any]",
                "typing.Type",
                "int",
                "bool",
                "None",
                "str",
                "type",
                "Optional[int]",
                "Mapping"
            ],
            "arguments": {
                "data": [
                    "dict[, ]",
                    "dict",
                    "typing.Type",
                    "Iterable",
                    "bool",
                    "None",
                    "type",
                    "pandas.DataFrame",
                    "Type[object]",
                    "Optional[bool]"
                ]
            }
        },
        "copy_func": {
            "name": "copy_func",
            "location": 32,
            "return": [
                "Callable"
            ],
            "arguments": {
                "f": [
                    "Callable"
                ],
                "name": [
                    "Optional[str]"
                ]
            }
        },
        "copy_function_spec": {
            "name": "copy_function_spec",
            "location": 40,
            "return": [
                "Callable"
            ],
            "arguments": {
                "function": [
                    "Union[(Callable, Dict[(str, Any)])]"
                ]
            }
        },
        "import_function_by_name": {
            "name": "import_function_by_name",
            "location": 52,
            "return": [
                "Callable"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "backend": [
                    "str"
                ]
            }
        }
    },
    "qualipy-master/qualipy/_sql.py": {
        "_unpickle": {
            "name": "_unpickle",
            "location": 9,
            "return": [
                "str",
                "bool",
                "Optional[bool]",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "row": [
                    "list[str]",
                    "dict",
                    "Type[object]",
                    "List[str]",
                    "pandas.DataFrame",
                    "Dict[str, Any]"
                ]
            }
        },
        "SQL.create_table": {
            "name": "create_table",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "engine": [
                    "engine.base.Engine"
                ],
                "table_name": [
                    "str"
                ]
            }
        },
        "SQL.create_value_table": {
            "name": "create_value_table",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "engine": [
                    "engine.base.Engine"
                ],
                "table_name": [
                    "str"
                ]
            }
        },
        "SQL.create_custom_value_table": {
            "name": "create_custom_value_table",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "engine": [
                    "engine.base.Engine"
                ],
                "table_name": [
                    "str"
                ]
            }
        },
        "SQL.get_table": {
            "name": "get_table",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "engine": [
                    "engine.base.Engine"
                ],
                "table_name": [
                    "str"
                ]
            }
        },
        "SQL.get_all_values": {
            "name": "get_all_values",
            "location": 78,
            "return": [
                "Dict[str, int]",
                "int",
                "Optional[str]",
                "pandas.DataFrame",
                "dict"
            ],
            "arguments": {
                "engine": [
                    "engine.base.Engine"
                ],
                "table_name": [
                    "str"
                ],
                "last_date": [
                    "str"
                ]
            }
        },
        "SQL.delete_data": {
            "name": "delete_data",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "conn": [
                    "engine.base.Connection"
                ],
                "name": [
                    "str"
                ],
                "create_function": [
                    "Callable"
                ]
            }
        },
        "SQL.create_table_if_not_exists": {
            "name": "create_table_if_not_exists",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "conn": [
                    "engine.base.Connection"
                ],
                "name": [
                    "str"
                ],
                "create_function": [
                    "Callable"
                ]
            }
        },
        "SQL.get_project_table": {
            "name": "get_project_table",
            "location": 118,
            "return": [
                "str",
                "Mapping[str, Any]",
                "bytes"
            ],
            "arguments": {
                "engine": [
                    "str",
                    "int",
                    "bytes",
                    "bool"
                ],
                "project_name": [
                    "str"
                ],
                "last_date": [
                    "str"
                ]
            }
        },
        "SQL.get_last_time": {
            "name": "get_last_time",
            "location": 128,
            "return": [
                "datetime.datetime"
            ],
            "arguments": {
                "engine": [
                    "str",
                    "float",
                    "int"
                ],
                "project_name": [
                    "str"
                ]
            }
        },
        "SQL.does_table_exist": {
            "name": "does_table_exist",
            "location": 137,
            "return": [
                "bool"
            ],
            "arguments": {
                "engine": [
                    "engine.base.Engine"
                ],
                "table_name": [
                    "str"
                ]
            }
        },
        "SQL.get_top_row": {
            "name": "get_top_row",
            "location": 147,
            "return": [
                "int",
                "pandas.DataFrame",
                "float"
            ],
            "arguments": {
                "engine": [
                    "engine.base.Engine"
                ],
                "variables": [
                    "Union[(str, List[str])]"
                ],
                "table_name": [
                    "str"
                ]
            }
        }
    },
    "qualipy-master/qualipy/__init__.py": {},
    "qualipy-master/qualipy/backends/base.py": {
        "BackendBase.set_schema": {
            "name": "set_schema",
            "location": 7,
            "return": [
                "None",
                "Union[tuple, list]",
                "Dict[str, Any]",
                "bytes"
            ],
            "arguments": {
                "data": [
                    "bool",
                    "str",
                    "int"
                ],
                "columns": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "BackendBase.generate_description": {
            "name": "generate_description",
            "location": 12,
            "return": [
                "None",
                "Sequence[str]",
                "bool"
            ],
            "arguments": {
                "function": [
                    "str",
                    "bool",
                    "typing.Sequence[str]",
                    "int",
                    "Sequence[str]"
                ],
                "data": [
                    "str",
                    "bool",
                    "typing.Sequence[str]",
                    "int",
                    "Sequence[str]"
                ],
                "column": [
                    "str",
                    "bool",
                    "typing.Sequence[str]",
                    "int",
                    "Sequence[str]"
                ],
                "date": [
                    "str",
                    "bool",
                    "typing.Sequence[str]",
                    "int",
                    "Sequence[str]"
                ],
                "function_name": [
                    "str",
                    "bool",
                    "typing.Sequence[str]",
                    "int",
                    "Sequence[str]"
                ],
                "standard_viz": [
                    "str",
                    "bool",
                    "typing.Sequence[str]",
                    "int",
                    "Sequence[str]"
                ],
                "over_time": [
                    "bool",
                    "str",
                    "int",
                    "Sequence[str]"
                ],
                "return_format": [
                    "typing.Text",
                    "str",
                    "bool",
                    "int",
                    "Sequence[str]"
                ],
                "key_function": [
                    "bool",
                    "str",
                    "int",
                    "Sequence[str]"
                ],
                "kwargs": [
                    "None"
                ]
            }
        },
        "BackendBase.set_return_value_type": {
            "name": "set_return_value_type",
            "location": 28,
            "return": [
                "None",
                "Type[T]",
                "set"
            ],
            "arguments": {
                "value": [
                    "int",
                    "str"
                ],
                "return_format": [
                    "int",
                    "str"
                ]
            }
        },
        "BackendBase.get_dtype": {
            "name": "get_dtype",
            "location": 33,
            "return": [
                "None",
                "Iterator[object]",
                "bool",
                "Union[tuple, list]"
            ],
            "arguments": {
                "data": [
                    "bool",
                    "dict[str, list[dict[, ]]]",
                    "Dict[str, List[Dict]]",
                    "list[]",
                    "list",
                    "int"
                ],
                "column": [
                    "bool",
                    "dict[str, list[dict[, ]]]",
                    "Dict[str, List[Dict]]",
                    "list[]",
                    "list",
                    "int"
                ]
            }
        },
        "BackendBase.check_type": {
            "name": "check_type",
            "location": 38,
            "return": [
                "None",
                "Iterator[Tuple[str, str]]",
                "int",
                "Optional[str]",
                "Optional[bool]"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bool",
                    "list",
                    "list[]"
                ],
                "column": [
                    "str",
                    "bool",
                    "list",
                    "list[]"
                ],
                "desired_type": [
                    "str",
                    "bool",
                    "list",
                    "list[]"
                ],
                "force": [
                    "bool",
                    "str",
                    "list"
                ]
            }
        },
        "BackendBase.generate_column_general_info": {
            "name": "generate_column_general_info",
            "location": 43,
            "return": [
                "int",
                "None"
            ],
            "arguments": {
                "specs": [
                    "bool",
                    "str",
                    "list",
                    "list[]",
                    "dict",
                    "dict[, ]"
                ],
                "data": [
                    "bool",
                    "str",
                    "list",
                    "list[]",
                    "dict",
                    "dict[, ]"
                ],
                "time_of_run": [
                    "bool",
                    "str",
                    "list",
                    "list[]",
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "qualipy-master/qualipy/backends/__init__.py": {},
    "qualipy-master/qualipy/backends/pandas_backend/functions.py": {
        "mean": {
            "name": "mean",
            "location": 13,
            "return": [
                "str",
                "numpy.ndarray",
                "OrderedDict",
                "Iterable[Sequence[str]]",
                "Dict[str, Any]",
                "Callable",
                "bool"
            ],
            "arguments": {
                "data": [
                    "str",
                    "tuple[typing.Union[str,list[str]]]",
                    "int",
                    "list[]",
                    "Tuple[str, List[str]]",
                    "list"
                ],
                "column": [
                    "int",
                    "str",
                    "Tuple[str, List[str]]",
                    "list"
                ]
            }
        },
        "std": {
            "name": "std",
            "location": 18,
            "return": [
                "str",
                "numpy.ndarray",
                "OrderedDict",
                "Iterable[Sequence[str]]",
                "Dict[str, Any]",
                "Callable",
                "bool"
            ],
            "arguments": {
                "data": [
                    "str",
                    "tuple[typing.Union[str,list[str]]]",
                    "int",
                    "list[]",
                    "Tuple[str, List[str]]",
                    "list"
                ],
                "column": [
                    "int",
                    "str",
                    "Tuple[str, List[str]]",
                    "list"
                ]
            }
        },
        "min": {
            "name": "min",
            "location": 23,
            "return": [
                "str",
                "numpy.ndarray",
                "OrderedDict",
                "Iterable[Sequence[str]]",
                "Dict[str, Any]",
                "Callable",
                "bool"
            ],
            "arguments": {
                "data": [
                    "str",
                    "tuple[typing.Union[str,list[str]]]",
                    "int",
                    "list[]",
                    "Tuple[str, List[str]]",
                    "list"
                ],
                "column": [
                    "int",
                    "str",
                    "Tuple[str, List[str]]",
                    "list"
                ]
            }
        },
        "quantile": {
            "name": "quantile",
            "location": 28,
            "return": [
                "str",
                "numpy.ndarray",
                "OrderedDict",
                "Iterable[Sequence[str]]",
                "Dict[str, Any]",
                "Callable",
                "bool"
            ],
            "arguments": {
                "data": [
                    "str",
                    "tuple[typing.Union[str,list[str]]]",
                    "int",
                    "list[]",
                    "Tuple[str, List[str]]",
                    "list"
                ],
                "column": [
                    "int",
                    "str",
                    "Tuple[str, List[str]]",
                    "list"
                ],
                "quantile": [
                    "float",
                    "str",
                    "int",
                    "Tuple[str, List[str]]",
                    "list"
                ]
            }
        },
        "number_of_duplicates": {
            "name": "number_of_duplicates",
            "location": 33,
            "return": [
                "str",
                "Dict[str, str]",
                "Callable",
                "dict",
                "Sequence[str]",
                "tuple"
            ],
            "arguments": {
                "data": [
                    "str",
                    "None",
                    "Optional[str]",
                    "typing.Callable[, ]",
                    "Optional[Callable]",
                    "int",
                    "Optional[int]",
                    "dict[, ]",
                    "dict",
                    "bool"
                ],
                "column": [
                    "int",
                    "pandas.DataFrame",
                    "list[str]",
                    "list[]",
                    "list[dict[str, typing.Any]]",
                    "List[str]",
                    "list[list[str]]",
                    "list",
                    "Iterable[str]",
                    "List[Dict[str, Any]]",
                    "List[List[str]]"
                ]
            }
        },
        "percentage_missing": {
            "name": "percentage_missing",
            "location": 38,
            "return": [
                "int",
                "str",
                "Optional[float]",
                "bool",
                "Awaitable"
            ],
            "arguments": {
                "data": [
                    "tuple[typing.Union[bytes,str]]",
                    "dict",
                    "Tuple[bytes, str]"
                ],
                "column": [
                    "bool",
                    "Tuple[str, Dict[str, Any]]",
                    "pandas.DataFrame",
                    "Dict[str, str]",
                    "int",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "nunique": {
            "name": "nunique",
            "location": 47,
            "return": [
                "str",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "data": [
                    "str",
                    "pandas.DataFrame",
                    "typing.Sequence[str]",
                    "list[]",
                    "dict[str, typing.Any]",
                    "Sequence[str]",
                    "list[str]",
                    "numpy.ndarray",
                    "list",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "column": [
                    "str",
                    "pandas.DataFrame",
                    "typing.Sequence[str]",
                    "list[]",
                    "dict[str, typing.Any]",
                    "Sequence[str]",
                    "list[str]",
                    "numpy.ndarray",
                    "list",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        },
        "get_top": {
            "name": "get_top",
            "location": 52,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "data": [
                    "str",
                    "list[str]",
                    "bool",
                    "int",
                    "List[str]"
                ],
                "column": [
                    "bool",
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "freq": {
            "name": "freq",
            "location": 57,
            "return": [
                "str",
                "numpy.ndarray",
                "OrderedDict",
                "Iterable[Sequence[str]]",
                "Dict[str, Any]",
                "Callable",
                "bool"
            ],
            "arguments": {
                "data": [
                    "str",
                    "tuple[typing.Union[str,list[str]]]",
                    "int",
                    "list[]",
                    "Tuple[str, List[str]]",
                    "list"
                ],
                "column": [
                    "int",
                    "str",
                    "Tuple[str, List[str]]",
                    "list"
                ]
            }
        },
        "is_unique": {
            "name": "is_unique",
            "location": 62,
            "return": [
                "bool",
                "Optional[numpy.ndarray]",
                "str"
            ],
            "arguments": {
                "data": [
                    "list[int]",
                    "str",
                    "pandas.DataFrame",
                    "Sequence[int]",
                    "Dict[str, str]",
                    "List[int]",
                    "pandas.core.frame.DataFrame"
                ],
                "column": [
                    "int",
                    "bool",
                    "List[int]",
                    "Union[Iterable, str]",
                    "str"
                ]
            }
        },
        "correlation_two_columns": {
            "name": "correlation_two_columns",
            "location": 69,
            "return": [
                "Dict[str, Any]",
                "Union[Dict, Tuple]",
                "int",
                "Union[Dict, List]",
                "bytes",
                "Sequence"
            ],
            "arguments": {
                "data": [
                    "list[list[str]]",
                    "int",
                    "Sequence[Mapping[str, Any]]",
                    "Sized",
                    "List[List[str]]",
                    "numpy.ndarray"
                ],
                "column": [
                    "int",
                    "Sequence[Mapping[str, Any]]",
                    "Sized",
                    "List[List[str]]",
                    "numpy.ndarray"
                ],
                "column_two": [
                    "int",
                    "Sequence[Mapping[str, Any]]",
                    "Sized",
                    "List[List[str]]",
                    "numpy.ndarray"
                ]
            }
        },
        "number_of_outliers": {
            "name": "number_of_outliers",
            "location": 74,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "data": [
                    "list[]",
                    "numpy.ndarray",
                    "list",
                    "Dict[str, Union[str, Any]]",
                    "pandas.DataFrame",
                    "bool"
                ],
                "column": [
                    "bool",
                    "numpy.ndarray",
                    "list",
                    "Dict[str, Union[str, Any]]",
                    "pandas.DataFrame"
                ],
                "std_away": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]",
                    "Union[Dict, List]",
                    "list[]"
                ]
            }
        },
        "value_counts": {
            "name": "value_counts",
            "location": 83,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "Sequence"
            ],
            "arguments": {
                "data": [
                    "bool",
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "int",
                    "Tuple[int, int]"
                ],
                "column": [
                    "bool",
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "int",
                    "Tuple[int, int]"
                ]
            }
        },
        "heatmap": {
            "name": "heatmap",
            "location": 94,
            "return": [
                "dict[typing.Text, ]",
                "str",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "int",
                    "pandas.DataFrame",
                    "Union[numpy.ndarray, numpy.void]"
                ],
                "column": [
                    "int",
                    "bytes",
                    "pandas.DataFrame",
                    "Union[numpy.ndarray, numpy.void]"
                ],
                "column_two": [
                    "int",
                    "None",
                    "bytes",
                    "pandas.DataFrame",
                    "Union[numpy.ndarray, numpy.void]"
                ],
                "include_nan": [
                    "bool",
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "correlation": {
            "name": "correlation",
            "location": 107,
            "return": [
                "dict[typing.Text, ]",
                "str",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "data": [
                    "list[str]",
                    "list[]",
                    "T",
                    "pandas.DataFrame",
                    "List[str]",
                    "list",
                    "int",
                    "numpy.ndarray",
                    "bool"
                ],
                "column": [
                    "int",
                    "T",
                    "pandas.DataFrame",
                    "List[str]",
                    "list",
                    "numpy.ndarray",
                    "bool"
                ],
                "column_two": [
                    "int",
                    "T",
                    "pandas.DataFrame",
                    "List[str]",
                    "list",
                    "numpy.ndarray",
                    "bool"
                ]
            }
        },
        "events_per_time_period": {
            "name": "events_per_time_period",
            "location": 120,
            "return": [
                "dict[, tuple[typing.Union[str,int]]]",
                "bool",
                "List[Dict]",
                "Dict[str, Any]",
                "Mapping[str, Any]",
                "List[dict]"
            ],
            "arguments": {
                "data": [
                    "int",
                    "str",
                    "dict",
                    "Optional[int]",
                    "bool"
                ],
                "column": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "epoch_datetime": [
                    "typing.Text",
                    "str",
                    "int"
                ],
                "time_freq": [
                    "typing.Text",
                    "str",
                    "int",
                    "Optional[str]",
                    "Optional[list]"
                ]
            }
        }
    },
    "qualipy-master/qualipy/backends/pandas_backend/generator.py": {
        "_create_arg_string": {
            "name": "_create_arg_string",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "keyword_arguments": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "BackendPandas.set_return_value_type": {
            "name": "set_return_value_type",
            "location": 32,
            "return": [
                "str",
                "list",
                "T",
                "typing.Type",
                "tuple[str]",
                "dict[, ]",
                "list[]",
                "int",
                "list[str]",
                "list[dict[str, typing.Any]]",
                "list[float]"
            ],
            "arguments": {
                "value": [
                    "type"
                ],
                "return_format": [
                    "type"
                ]
            }
        },
        "BackendPandas.set_schema": {
            "name": "set_schema",
            "location": 50,
            "return": [
                "Dict[(str, Dict[(str, Union[(bool, str)])])]"
            ],
            "arguments": {
                "data": [
                    "int",
                    "Hashable",
                    "typing.Hashable",
                    "Optional[Dict]",
                    "dict[, ]",
                    "None"
                ],
                "columns": [
                    "Dict[(str, Dict[(str, Union[(bool, str, Dict[(str, Callable)])])])]"
                ]
            }
        },
        "BackendPandas.get_shape": {
            "name": "get_shape",
            "location": 64,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "data": [
                    "typing.Mapping",
                    "Mapping[str, Any]",
                    "dict[str, dict[str, float]]",
                    "Dict[str, Dict[str, float]]",
                    "pandas.DataFrame",
                    "slp.util.types.NdTensor"
                ]
            }
        },
        "BackendPandas.get_dtype": {
            "name": "get_dtype",
            "location": 69,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "data": [
                    "str",
                    "list[str]",
                    "bool",
                    "int",
                    "List[str]"
                ],
                "column": [
                    "bool",
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "BackendPandas.generate_description": {
            "name": "generate_description",
            "location": 73,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "function": [
                    "Callable"
                ],
                "data": [
                    "type",
                    "typing.Type",
                    "Optional[str]",
                    "str",
                    "int",
                    "Dict[Any, list]",
                    "None",
                    "Mapping[str, str]",
                    "dict[typing.Any, list[]]",
                    "typing.Mapping"
                ],
                "column": [
                    "str"
                ],
                "date": [
                    "datetime.datetime"
                ],
                "function_name": [
                    "str"
                ],
                "standard_viz": [
                    "bool"
                ],
                "is_static": [
                    "bool"
                ],
                "viz_type": [
                    "str"
                ],
                "return_format": [
                    "str"
                ],
                "key_function": [
                    "bool"
                ],
                "kwargs": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "BackendPandas.check_type": {
            "name": "check_type",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "str",
                    "list[str]",
                    "pandas.DataFrame",
                    "Optional[List[str]]",
                    "float",
                    "type",
                    "T"
                ],
                "column": [
                    "str",
                    "pandas.DataFrame",
                    "Optional[List[str]]",
                    "float",
                    "type",
                    "T"
                ],
                "desired_type": [
                    "str",
                    "list[str]",
                    "float",
                    "pandas.DataFrame",
                    "None",
                    "Optional[List[str]]",
                    "typing.Type",
                    "type",
                    "T"
                ],
                "force": [
                    "bool",
                    "str",
                    "Union[int, float]",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ]
            }
        },
        "BackendPandas.generate_column_general_info": {
            "name": "generate_column_general_info",
            "location": 116,
            "return": [
                "Tuple[(Optional[Dict[(str, Any)]], Dict[(str, Any)], Optional[Dict[(str, Any)]])]"
            ],
            "arguments": {
                "specs": [
                    "str",
                    "bytes",
                    "Optional[Exception]",
                    "Dict[str, Any]",
                    "int"
                ],
                "data": [
                    "dict",
                    "dict[, ]"
                ],
                "time_of_run": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "BackendPandas.write": {
            "name": "write",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "measures": [
                    "str",
                    "bytes"
                ],
                "project": [
                    "bytes",
                    "str",
                    "Generator",
                    "int",
                    "typing.Generator[]",
                    "Exception",
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "batch_name": [
                    "str"
                ]
            }
        },
        "BackendPandas.get_chunks": {
            "name": "get_chunks",
            "location": 191,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "data": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "int",
                    "Optional[numpy.ndarray]",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ],
                "time_freq": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "int",
                    "Optional[numpy.ndarray]",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ],
                "time_column": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "int",
                    "Optional[numpy.ndarray]",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ]
            }
        },
        "BackendPandas.overwrite_type": {
            "name": "overwrite_type",
            "location": 199,
            "return": [
                "_T0"
            ],
            "arguments": {
                "data": [
                    "_T0"
                ],
                "col": [
                    "bool",
                    "str"
                ],
                "type": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "qualipy-master/qualipy/backends/pandas_backend/pandas_types.py": {
        "BaseType.__repr__": {
            "name": "__repr__",
            "location": 7,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DateTimeType.check_approximate_type": {
            "name": "check_approximate_type",
            "location": 17,
            "return": [
                "str",
                "Optional[bool]",
                "Type"
            ],
            "arguments": {
                "self": [],
                "given_dtype": [
                    "Union[Type[Any], Tuple[Any, ...]]",
                    "typing.Type",
                    "Type[Any]",
                    "tuple[typing.Union[typing.Any,...]]"
                ]
            }
        },
        "FloatType.check_approximate_type": {
            "name": "check_approximate_type",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "given_dtype": [
                    "Type",
                    "typing.Type"
                ]
            }
        },
        "IntType.check_approximate_type": {
            "name": "check_approximate_type",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "given_dtype": []
            }
        },
        "ObjectType.check_approximate_type": {
            "name": "check_approximate_type",
            "location": 62,
            "return": [
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "given_dtype": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "NumericType.check_approximate_type": {
            "name": "check_approximate_type",
            "location": 70,
            "return": [
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "given_dtype": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "BoolType.check_approximate_type": {
            "name": "check_approximate_type",
            "location": 78,
            "return": [
                "numpy.ndarray",
                "float"
            ],
            "arguments": {
                "self": [],
                "given_dtype": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "qualipy-master/qualipy/backends/pandas_backend/__init__.py": {},
    "qualipy-master/qualipy/backends/spark_backend/functions.py": {
        "is_unique": {
            "name": "is_unique",
            "location": 7,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "data": [
                    "list[int]",
                    "Dict[str, Any]",
                    "list[typing.Optional[str]]",
                    "List[int]",
                    "List[Optional[str]]"
                ],
                "column": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[int]",
                    "list[int]",
                    "List[Optional[str]]",
                    "list[typing.Optional[str]]"
                ]
            }
        },
        "percentage_missing": {
            "name": "percentage_missing",
            "location": 15,
            "return": [
                "float",
                "bytes",
                "bool",
                "List[Dict[str, Any]]",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "int",
                    "Callable[[bytes], bytes]"
                ],
                "column": [
                    "Tuple[int, List[int], List[int]]",
                    "tuple[typing.Union[int,list[int],list[int]]]",
                    "Tuple[str, Dict[str, Any]]",
                    "tuple[typing.Union[str,dict[str, typing.Any]]]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "list[str]"
                ]
            }
        }
    },
    "qualipy-master/qualipy/backends/spark_backend/generator.py": {
        "_create_arg_string": {
            "name": "_create_arg_string",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "keyword_arguments": [
                    "Dict[(str, Any)]"
                ],
                "other_columns": [
                    "Optional[List[str]]"
                ]
            }
        },
        "BackendSpark.get_shape": {
            "name": "get_shape",
            "location": 40,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "BackendSpark.get_dtype": {
            "name": "get_dtype",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "data": [
                    "Union[keanu.vertex.base.Vertex, keanu.vartypes.numpy_types, int]",
                    "int",
                    "str",
                    "Type",
                    "typing.Type"
                ],
                "column": [
                    "str"
                ]
            }
        },
        "BackendSpark.set_schema": {
            "name": "set_schema",
            "location": 50,
            "return": [
                "Dict[(str, Union[(bool, str)])]"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "bytes",
                    "dict[, ]",
                    "str"
                ],
                "columns": [
                    "Dict[(str, Dict[(str, Union[(bool, str, Dict[(str, Callable)])])])]"
                ]
            }
        },
        "BackendSpark.set_return_value_type": {
            "name": "set_return_value_type",
            "location": 64,
            "return": [
                "str",
                "list",
                "T",
                "typing.Type",
                "tuple[str]",
                "dict[, ]",
                "list[]",
                "int",
                "list[str]",
                "list[dict[str, typing.Any]]",
                "list[float]"
            ],
            "arguments": {
                "value": [
                    "type"
                ],
                "return_format": [
                    "type"
                ]
            }
        },
        "BackendSpark.get_other_columns": {
            "name": "get_other_columns",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "other_column": [
                    "Optional[Union[(str, List[str])]]"
                ],
                "arguments": [
                    "Dict[(str, Any)]"
                ],
                "data": [
                    "List[str]",
                    "float",
                    "list[str]",
                    "str",
                    "bool",
                    "Callable",
                    "typing.Callable[, ]",
                    "FrozenSet[int]",
                    "frozenset"
                ]
            }
        },
        "BackendSpark.generate_description": {
            "name": "generate_description",
            "location": 90,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "function": [
                    "Callable"
                ],
                "data": [
                    "type",
                    "typing.Type",
                    "Optional[str]",
                    "str",
                    "int",
                    "Dict[Any, list]",
                    "None",
                    "Mapping[str, str]",
                    "dict[typing.Any, list[]]",
                    "typing.Mapping"
                ],
                "column": [
                    "str"
                ],
                "date": [
                    "datetime.datetime"
                ],
                "function_name": [
                    "str"
                ],
                "standard_viz": [
                    "bool"
                ],
                "is_static": [
                    "bool"
                ],
                "other_columns": [
                    "Optional[Dict[(str, Any)]]"
                ],
                "viz_type": [
                    "str"
                ],
                "kwargs": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "BackendSpark.check_type": {
            "name": "check_type",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bool",
                    "list",
                    "list[]"
                ],
                "column": [
                    "str",
                    "bool",
                    "list",
                    "list[]"
                ],
                "desired_type": [
                    "str",
                    "bool",
                    "list",
                    "list[]"
                ],
                "force": [
                    "bool",
                    "str",
                    "list"
                ]
            }
        },
        "BackendSpark.generate_column_general_info": {
            "name": "generate_column_general_info",
            "location": 122,
            "return": [
                "Tuple[(Optional[Dict[(str, Any)]], Dict[(str, Any)])]"
            ],
            "arguments": {
                "specs": [
                    "str",
                    "bytes",
                    "Optional[Exception]",
                    "Dict[str, Any]",
                    "int"
                ],
                "data": [
                    "dict",
                    "dict[, ]"
                ],
                "time_of_run": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "greater_than_3": {
            "name": "greater_than_3",
            "location": 181,
            "return": [
                "dict",
                "str",
                "Dict[Tuple[int, ...], float]",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "data": [
                    "tuple[typing.Union[float,float]]",
                    "bool",
                    "Tuple[float, float]",
                    "str",
                    "tuple[typing.Union[str,list[str]]]",
                    "int",
                    "Tuple[str, List[str]]",
                    "list[T]",
                    "list[int]",
                    "List[T]",
                    "List[int]"
                ],
                "column": [
                    "tuple[typing.Union[float,float]]",
                    "bool",
                    "Tuple[float, float]",
                    "str",
                    "tuple[typing.Union[str,list[str]]]",
                    "int",
                    "Tuple[str, List[str]]",
                    "list[T]",
                    "list[int]",
                    "List[T]",
                    "List[int]"
                ]
            }
        }
    },
    "qualipy-master/qualipy/backends/spark_backend/__init__.py": {},
    "qualipy-master/qualipy/web/app.py": {},
    "qualipy-master/qualipy/web/config.py": {
        "get_default_qualipy_db": {
            "name": "get_default_qualipy_db",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "config_dir": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_default_web_db": {
            "name": "get_default_web_db",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "config_dir": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_default_migrations_dir": {
            "name": "get_default_migrations_dir",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "config_dir": [
                    "str"
                ]
            }
        },
        "check_for_missing": {
            "name": "check_for_missing",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "dict"
                ]
            }
        },
        "read_project_config": {
            "name": "read_project_config",
            "location": 34,
            "return": [
                "Dict[str, Any]",
                "Optional[dict]",
                "bool",
                "str",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {
                "config_dir": [
                    "str"
                ]
            }
        },
        "BaseConfig.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_dir": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "qualipy-master/qualipy/web/deploy.py": {
        "QualipyDeployer.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_dir": [
                    "str"
                ],
                "host": [
                    "typing.Text",
                    "Sequence[str]",
                    "int",
                    "bool",
                    "Optional[str]"
                ],
                "port": [
                    "int",
                    "Sequence[str]",
                    "bool",
                    "Optional[str]"
                ],
                "workers": [
                    "int",
                    "Sequence[str]",
                    "bool",
                    "Optional[str]"
                ],
                "train_anomaly": [
                    "bool",
                    "Optional[str]",
                    "Tuple[str]",
                    "Optional[bool]",
                    "str"
                ]
            }
        },
        "QualipyDeployer.run": {
            "name": "run",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QualipyDeployer.remove_model_dir": {
            "name": "remove_model_dir",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlaskDeploy.run": {
            "name": "run",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GUnicornDeploy.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GUnicornDeploy.load_config": {
            "name": "load_config",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GUnicornDeploy.load": {
            "name": "load",
            "location": 52,
            "return": [
                "app.App"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qualipy-master/qualipy/web/_config.py": {
        "Singleton.__call__": {
            "name": "__call__",
            "location": 4,
            "return": [],
            "arguments": {
                "cls": [
                    "Singleton"
                ]
            }
        }
    },
    "qualipy-master/qualipy/web/_logging.py": {},
    "qualipy-master/qualipy/web/__init__.py": {},
    "qualipy-master/qualipy/web/app/caching.py": {
        "set_session_data_name": {
            "name": "set_session_data_name",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "session_id": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "set_session_anom_data_name": {
            "name": "set_session_anom_data_name",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "session_id": [
                    "str",
                    "int"
                ]
            }
        },
        "cache_dataframe": {
            "name": "cache_dataframe",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "dataframe": [
                    "str",
                    "bool",
                    "Mapping[str, Any]",
                    "bytes",
                    "typing.Mapping"
                ],
                "name": [
                    "str",
                    "bool",
                    "Mapping[str, Any]",
                    "bytes",
                    "typing.Mapping"
                ]
            }
        },
        "get_cached_dataframe": {
            "name": "get_cached_dataframe",
            "location": 33,
            "return": [
                "None",
                "str",
                "bool"
            ],
            "arguments": {
                "name": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Optional[Mapping[str, Any]]",
                    "typing.Mapping",
                    "None"
                ]
            }
        },
        "get_and_cache_anom_table": {
            "name": "get_and_cache_anom_table",
            "location": 40,
            "return": [
                "list[dict[str, str]]",
                "str",
                "dict",
                "dict[str, str]",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "all_projects": [
                    "bool",
                    "app.App"
                ]
            }
        }
    },
    "qualipy-master/qualipy/web/app/extensions.py": {},
    "qualipy-master/qualipy/web/app/forms.py": {},
    "qualipy-master/qualipy/web/app/models.py": {
        "load_user": {
            "name": "load_user",
            "location": 10,
            "return": [
                "Optional[List[Any]]",
                "bool"
            ],
            "arguments": {
                "id": [
                    "str",
                    "int",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "User.set_password": {
            "name": "set_password",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str",
                    "bool",
                    "Union[List[str], str]",
                    "list[str]",
                    "Tuple[str]",
                    "tuple[str]"
                ]
            }
        },
        "User.check_password": {
            "name": "check_password",
            "location": 22,
            "return": [
                "str",
                "Dict[str, type]",
                "Mapping[str, Any]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str"
                ]
            }
        },
        "User.__repr__": {
            "name": "__repr__",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qualipy-master/qualipy/web/app/tables.py": {
        "Anomaly.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "column_name": [
                    "str"
                ],
                "date": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "metric": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "arguments": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "value": [
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "batch_name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "qualipy-master/qualipy/web/app/webapp.py": {
        "index": {
            "name": "index",
            "location": 28,
            "return": [
                "str",
                "Dict[str, List[str]]",
                "flask.Response"
            ],
            "arguments": {}
        },
        "handle_project_request": {
            "name": "handle_project_request",
            "location": 48,
            "return": [
                "str",
                "bool",
                "int",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "project_name": [
                    "str"
                ]
            }
        },
        "render_dashboard": {
            "name": "render_dashboard",
            "location": 59,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Union[str, Dict]"
            ],
            "arguments": {}
        },
        "login": {
            "name": "login",
            "location": 64,
            "return": [
                "str",
                "Dict[str, List[str]]",
                "flask.Response"
            ],
            "arguments": {}
        },
        "logout": {
            "name": "logout",
            "location": 89,
            "return": [
                "int",
                "Dict[str, Any]",
                "bool",
                "Optional[bool]",
                "Dict[str, object]",
                "jumeaux.models.Res2ResAddOnPayload"
            ],
            "arguments": {}
        }
    },
    "qualipy-master/qualipy/web/app/__init__.py": {
        "create_app": {
            "name": "create_app",
            "location": 22,
            "return": [
                "Flask",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "set_config": {
            "name": "set_config",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "server": [
                    "str",
                    "typing.Iterable[str]",
                    "neuromation.api.config._AuthConfig",
                    "Iterable[str]"
                ],
                "config_dir": [
                    "str",
                    "typing.Iterable[str]",
                    "neuromation.api.config._AuthConfig",
                    "Iterable[str]"
                ]
            }
        },
        "register_dashapps": {
            "name": "register_dashapps",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "aiohttp.web.Application",
                    "flask.Flask"
                ]
            }
        },
        "_protect_dashviews": {
            "name": "_protect_dashviews",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "dashapp": [
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Callable[[str], None]",
                    "typing.Callable[str, None]"
                ]
            }
        },
        "register_extensions": {
            "name": "register_extensions",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "server": [
                    "str",
                    "bool",
                    "list[str]",
                    "bytes",
                    "List[str]",
                    "int"
                ]
            }
        },
        "register_blueprints": {
            "name": "register_blueprints",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "server": [
                    "int",
                    "str",
                    "typing.Callable[, ]",
                    "Callable",
                    "models.Question"
                ]
            }
        },
        "register_cache": {
            "name": "register_cache",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "server": [
                    "int",
                    "Optional[int]",
                    "bytes",
                    "str",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "register_db_migrations": {
            "name": "register_db_migrations",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "server": [],
                "migrate": [
                    "models.UserAuth",
                    "users.models.JustfixUser",
                    "django.contrib.auth.models.User"
                ],
                "db": [
                    "bool",
                    "dict",
                    "flask.Flask"
                ]
            }
        },
        "add_admin": {
            "name": "add_admin",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "db": []
            }
        },
        "set_logging": {
            "name": "set_logging",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "server": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "qualipy-master/qualipy/web/app/metric_tracker/callbacks.py": {
        "select_data": {
            "name": "select_data",
            "location": 53,
            "return": [
                "str",
                "dict",
                "pandas.DataFrame",
                "Dict[str, Any]"
            ],
            "arguments": {
                "project": [
                    "str",
                    "None",
                    "Optional[str]",
                    "dict[str, str]",
                    "list[str]",
                    "Dict[str, str]",
                    "tuple[typing.Union[str,str]]",
                    "Optional[List[str]]",
                    "Optional[Tuple[str, str]]",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "column": [
                    "int",
                    "None",
                    "Optional[pandas.DataFrame]",
                    "float",
                    "str",
                    "bool",
                    "list[tuple[typing.Union[str,bytes]]]",
                    "Union[float, None, int]",
                    "dict[, ]",
                    "Optional[int]",
                    "List[Tuple[str, bytes]]",
                    "dict"
                ],
                "batch": [
                    "list[str]",
                    "Optional[int]",
                    "int",
                    "Optional[List[str]]",
                    "Optional[float]",
                    "Optional[dict]"
                ],
                "url": [
                    "str",
                    "None",
                    "List[str]",
                    "Optional[str]",
                    "list[str]"
                ],
                "live_update": [
                    "bool",
                    "str",
                    "Optional[List[str]]",
                    "Optional[bool]",
                    "Optional[static_frame.core.util.AnyCallable]",
                    "int",
                    "Optional[str]"
                ],
                "n_intervals": [
                    "int",
                    "str",
                    "Optional[List[str]]",
                    "Optional[bool]",
                    "Optional[static_frame.core.util.AnyCallable]",
                    "Optional[str]"
                ],
                "session_id": [
                    "Optional[str]",
                    "str",
                    "None",
                    "List[str]",
                    "list[str]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "register_callbacks": {
            "name": "register_callbacks",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "dashapp": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "register_callbacks.numerical_columns": {
            "name": "numerical_columns",
            "location": 113,
            "return": [
                "list[dict[typing.Text, ]]",
                "bool",
                "float",
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "session_id": [
                    "str",
                    "int"
                ]
            }
        },
        "register_callbacks.numerical_columns_compare1": {
            "name": "numerical_columns_compare1",
            "location": 134,
            "return": [
                "list[dict[typing.Text, ]]",
                "bool",
                "float",
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "session_id": [
                    "str",
                    "int"
                ]
            }
        },
        "register_callbacks.numerical_columns_compare2": {
            "name": "numerical_columns_compare2",
            "location": 156,
            "return": [
                "list[dict[typing.Text, ]]",
                "bool",
                "float",
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "session_id": [
                    "str",
                    "int"
                ]
            }
        },
        "register_callbacks.categorical_columns": {
            "name": "categorical_columns",
            "location": 178,
            "return": [
                "list[dict[typing.Text, ]]",
                "bool",
                "float",
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "session_id": [
                    "str",
                    "int"
                ]
            }
        },
        "register_callbacks.bool_columns": {
            "name": "bool_columns",
            "location": 196,
            "return": [
                "list[dict[typing.Text, ]]",
                "str",
                "dict",
                "Optional[str]"
            ],
            "arguments": {
                "session_id": [
                    "str",
                    "int",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "register_callbacks.update_tab_1": {
            "name": "update_tab_1",
            "location": 217,
            "return": [
                "float",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "n_intervals": [
                    "str",
                    "bool",
                    "Mapping[str, Any]",
                    "int"
                ],
                "session_id": [
                    "str",
                    "bool",
                    "Mapping[str, Any]",
                    "int"
                ]
            }
        },
        "register_callbacks.update_tab_2": {
            "name": "update_tab_2",
            "location": 288,
            "return": [
                "list[]",
                "float",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "column": [
                    "str",
                    "int",
                    "bytes"
                ],
                "view": [
                    "str",
                    "list",
                    "Callable",
                    "bytes"
                ],
                "session_id": [
                    "int",
                    "str"
                ],
                "n_intervals": [
                    "int",
                    "str"
                ]
            }
        },
        "register_callbacks.update_tab_3": {
            "name": "update_tab_3",
            "location": 364,
            "return": [
                "float",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "column": [
                    "str",
                    "sqlalchemy.orm.session.Session",
                    "dict"
                ],
                "session_id": [
                    "str",
                    "sqlalchemy.orm.Session",
                    "Optional[Dict]",
                    "sqlalchemy.orm.session.Session",
                    "int",
                    "dict"
                ]
            }
        },
        "register_callbacks.update_tab_4": {
            "name": "update_tab_4",
            "location": 404,
            "return": [
                "float",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "n_intervals": [
                    "str",
                    "bool",
                    "Mapping[str, Any]",
                    "int"
                ],
                "session_id": [
                    "str",
                    "bool",
                    "Mapping[str, Any]",
                    "int"
                ]
            }
        },
        "register_callbacks.update_tab_6": {
            "name": "update_tab_6",
            "location": 449,
            "return": [
                "float",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "column": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "n_intervals": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "session_id": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "register_callbacks.update_tab_7": {
            "name": "update_tab_7",
            "location": 509,
            "return": [
                "list[]",
                "float",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "session_id": [
                    "str",
                    "sqlalchemy.orm.Session"
                ],
                "n_clicks": [
                    "bool",
                    "int"
                ],
                "column1": [
                    "str",
                    "Optional[Dict[str, str]]",
                    "Optional[str]",
                    "bool",
                    "bytes",
                    "list"
                ],
                "column2": [
                    "str",
                    "Optional[Dict[str, str]]",
                    "Optional[str]",
                    "bool",
                    "bytes",
                    "list"
                ]
            }
        }
    },
    "qualipy-master/qualipy/web/app/metric_tracker/layout.py": {
        "generate_layout": {
            "name": "generate_layout",
            "location": 13,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "numerical_column_options": [
                    "List[str]"
                ],
                "categorical_column_options": [
                    "List[str]"
                ],
                "boolean_options": [
                    "List[str]"
                ],
                "interval_time": [
                    "int"
                ]
            }
        }
    },
    "qualipy-master/qualipy/web/app/metric_tracker/util_components.py": {
        "column_choice": {
            "name": "column_choice",
            "location": 5,
            "return": [
                "Optional[int]",
                "Dict[int, dict]"
            ],
            "arguments": {
                "column_options": [
                    "str",
                    "bytes",
                    "int"
                ],
                "id": [
                    "typing.Text",
                    "int",
                    "str",
                    "bytes"
                ],
                "multi": [
                    "bool",
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "view_style": {
            "name": "view_style",
            "location": 15,
            "return": [
                "Optional[int]",
                "int",
                "Hashable",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "id": [
                    "typing.Text",
                    "int",
                    "str"
                ],
                "multi": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "batch_choice": {
            "name": "batch_choice",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "batches": [
                    "list[str]",
                    "list[]",
                    "int",
                    "bool",
                    "float",
                    "List[str]",
                    "list"
                ],
                "id": [
                    "str",
                    "int"
                ],
                "include_all": [
                    "bool",
                    "str",
                    "dict",
                    "int"
                ],
                "multi": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        }
    },
    "qualipy-master/qualipy/web/app/metric_tracker/__init__.py": {},
    "qualipy-master/qualipy/web/app/metric_tracker/components/boolean_page.py": {
        "error_check_table": {
            "name": "error_check_table",
            "location": 10,
            "return": [
                "str",
                "Dict[str, Any]",
                "type"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "List[int]",
                    "bytes",
                    "str"
                ]
            }
        },
        "boolean_plot": {
            "name": "boolean_plot",
            "location": 26,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bytes",
                    "Dict[str, str]",
                    "T"
                ]
            }
        }
    },
    "qualipy-master/qualipy/web/app/metric_tracker/components/data_characteristic_page.py": {
        "create_simple_line_plot_subplots": {
            "name": "create_simple_line_plot_subplots",
            "location": 7,
            "return": [
                "str"
            ],
            "arguments": {
                "data": [
                    "list[str]",
                    "dict",
                    "List[str]",
                    "Callable[[Any], str]"
                ]
            }
        },
        "create_unique_columns_plot": {
            "name": "create_unique_columns_plot",
            "location": 28,
            "return": [
                "int",
                "List[int]",
                "Optional[bytearray]"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bytes",
                    "List[str]",
                    "list[str]"
                ],
                "schema": [
                    "Optional[dict]",
                    "dict[, ]",
                    "bytes",
                    "bool",
                    "None",
                    "Iterable[bytes]",
                    "List[Dict]",
                    "list[dict[, ]]"
                ]
            }
        },
        "create_type_plots": {
            "name": "create_type_plots",
            "location": 79,
            "return": [
                "int"
            ],
            "arguments": {
                "data": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "bar_plot_missing": {
            "name": "bar_plot_missing",
            "location": 166,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "bytes",
                    "Iterable[Any]",
                    "Iterable",
                    "type",
                    "List[int]"
                ],
                "schema": [
                    "int",
                    "bytes",
                    "list[float]",
                    "List[float]",
                    "tuple[typing.Union[int,int,bytearray]]",
                    "numpy.ndarray",
                    "Tuple[int, int, bytearray]"
                ]
            }
        }
    },
    "qualipy-master/qualipy/web/app/metric_tracker/components/numerical_page.py": {
        "all_trends": {
            "name": "all_trends",
            "location": 12,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "data": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "show_column_in_name": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "str",
                    "Callable[[int], None]"
                ]
            }
        },
        "comparison_trends": {
            "name": "comparison_trends",
            "location": 42,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "data": [
                    "list[str]",
                    "str",
                    "int",
                    "bool",
                    "IO",
                    "List[str]"
                ],
                "show_column_in_name": [
                    "bool",
                    "str",
                    "List[str]",
                    "List[Sequence[int]]",
                    "Sequence",
                    "float"
                ]
            }
        },
        "create_trend_line": {
            "name": "create_trend_line",
            "location": 82,
            "return": [
                "str"
            ],
            "arguments": {
                "data": [
                    "str"
                ],
                "var": [
                    "str",
                    "int"
                ],
                "metric": [
                    "str"
                ],
                "project_name": [
                    "str",
                    "None",
                    "dict",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "config_dir": [
                    "str",
                    "None"
                ]
            }
        },
        "histogram": {
            "name": "histogram",
            "location": 208,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "data": [
                    "int",
                    "dict[, ]",
                    "dict",
                    "bytes",
                    "str",
                    "Union[str, type]",
                    "typing.Type",
                    "Iterable[bytes]",
                    "list[int]",
                    "List[int]",
                    "bool"
                ],
                "var": [
                    "str",
                    "bool",
                    "Type",
                    "typing.Type",
                    "dict",
                    "dict[, ]"
                ],
                "metric": [
                    "str",
                    "bool",
                    "Type",
                    "typing.Type",
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "qualipy-master/qualipy/web/app/metric_tracker/components/overview_page.py": {
        "overview_table": {
            "name": "overview_table",
            "location": 8,
            "return": [
                "str",
                "pandas.DataFrame"
            ],
            "arguments": {
                "data": [
                    "bool",
                    "dict",
                    "Optional[str]",
                    "Mapping[str, str]"
                ]
            }
        },
        "schema_table": {
            "name": "schema_table",
            "location": 17,
            "return": [
                "str",
                "pandas.DataFrame"
            ],
            "arguments": {
                "data": [
                    "bool",
                    "dict",
                    "Optional[str]",
                    "Mapping[str, str]"
                ]
            }
        },
        "anomaly_num_data": {
            "name": "anomaly_num_data",
            "location": 26,
            "return": [
                "int",
                "Set[str]",
                "float",
                "Optional[bytearray]",
                "Tuple[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "project_name": [
                    "str"
                ],
                "db_url": [
                    "str",
                    "bytes",
                    "Callable",
                    "int",
                    "typing.Callable[, ]"
                ],
                "config_dir": [
                    "str"
                ]
            }
        },
        "anomaly_num_table": {
            "name": "anomaly_num_table",
            "location": 50,
            "return": [
                "bool",
                "str",
                "Optional[Any]",
                "pandas.DataFrame"
            ],
            "arguments": {
                "num_anomalies": [
                    "bool",
                    "List[str]",
                    "Optional[bool]",
                    "Hashable"
                ]
            }
        }
    },
    "qualipy-master/qualipy/web/app/metric_tracker/components/standard_viz_dynamic_page.py": {
        "create_value_count_area_chart": {
            "name": "create_value_count_area_chart",
            "location": 12,
            "return": [
                "Dict[str, Any]",
                "int",
                "set"
            ],
            "arguments": {
                "data": [
                    "list[dict[, ]]",
                    "dict",
                    "List[Dict]",
                    "Type[Tuple[Any, str]]"
                ],
                "var": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None",
                    "Union[str, List[str]]",
                    "list[str]"
                ],
                "anom_data": [
                    "Optional[Callable]",
                    "Callable",
                    "Dict[str, str]",
                    "bytes",
                    "List[int]",
                    "str",
                    "int"
                ]
            }
        },
        "create_prop_change_list": {
            "name": "create_prop_change_list",
            "location": 50,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "data": [
                    "pandas.DataFrame",
                    "int",
                    "dict",
                    "Dict[str, Any]"
                ],
                "var": [
                    "str"
                ]
            }
        },
        "barchart_top_cats": {
            "name": "barchart_top_cats",
            "location": 96,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "data": [
                    "int",
                    "bytes",
                    "list[int]",
                    "str",
                    "numpy.ndarray",
                    "List[int]",
                    "list[float]",
                    "List[float]"
                ]
            }
        }
    },
    "qualipy-master/qualipy/web/app/metric_tracker/components/standard_viz_static_page.py": {
        "heatmap": {
            "name": "heatmap",
            "location": 5,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "data": [
                    "Dict[str, Any]",
                    "bytes",
                    "dict[str, typing.Any]",
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "col": [
                    "dict",
                    "dict[, ]",
                    "bytes",
                    "Dict[str, float]",
                    "dict[str, float]"
                ]
            }
        }
    },
    "qualipy-master/qualipy/web/app/metric_tracker/components/__init__.py": {},
    "qualipy-master/tests/test_qualipy.py": {
        "data": {
            "name": "data",
            "location": 27,
            "return": [
                "Dict[str, List[int]]",
                "str",
                "Optional[float]",
                "dict",
                "float",
                "int"
            ],
            "arguments": {}
        },
        "project": {
            "name": "project",
            "location": 40,
            "return": [
                "",
                "typing.Generator[Project]"
            ],
            "arguments": {}
        },
        "test_project_get_table": {
            "name": "test_project_get_table",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bytes",
                    "int",
                    "TextIO",
                    "typing.TextIO"
                ],
                "project": []
            }
        },
        "test_project_file": {
            "name": "test_project_file",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "str",
                    "int",
                    "TextIO",
                    "typing.TextIO",
                    "Optional[str]",
                    "None",
                    "dict",
                    "dict[, ]"
                ],
                "project": [
                    "Tuple[str, Callable]",
                    "dict"
                ]
            }
        },
        "test_default_checks_done": {
            "name": "test_default_checks_done",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "str",
                    "TextIO",
                    "typing.TextIO"
                ],
                "project": []
            }
        },
        "test_delete_data": {
            "name": "test_delete_data",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "str",
                    "TextIO",
                    "typing.TextIO"
                ],
                "project": [
                    "dbconfig.Project"
                ]
            }
        },
        "test_read_table": {
            "name": "test_read_table",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "bool",
                    "Optional[bool]",
                    "str",
                    "None",
                    "dict",
                    "dict[, ]",
                    "Union[str, List[str]]",
                    "list[str]"
                ],
                "project": [
                    "list",
                    "List[int]"
                ]
            }
        },
        "test_read_table_infer_schema": {
            "name": "test_read_table_infer_schema",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "bool",
                    "Optional[bool]",
                    "str",
                    "None",
                    "dict",
                    "dict[, ]",
                    "Union[str, List[str]]",
                    "list[str]"
                ],
                "project": [
                    "list",
                    "List[int]"
                ]
            }
        },
        "test_table_equals_columns": {
            "name": "test_table_equals_columns",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "int",
                    "typing.Callable[, ]",
                    "str",
                    "numpy.ndarray",
                    "T",
                    "Callable"
                ],
                "project": []
            }
        },
        "test_table_extra_functions": {
            "name": "test_table_extra_functions",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "str",
                    "TextIO",
                    "typing.TextIO"
                ],
                "project": [
                    "managers.models.Project"
                ]
            }
        },
        "test_type_check": {
            "name": "test_type_check",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "str",
                    "int",
                    "Optional[bool]",
                    "None",
                    "IO",
                    "typing.IO"
                ],
                "project": [
                    "bytes"
                ]
            }
        },
        "test_type_check_fail": {
            "name": "test_type_check_fail",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "int",
                    "bytes",
                    "pandas.DataFrame"
                ],
                "project": [
                    "bytes"
                ]
            }
        },
        "test_null_check": {
            "name": "test_null_check",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "int",
                    "str"
                ],
                "project": [
                    "str"
                ]
            }
        },
        "test_null_check_fail": {
            "name": "test_null_check_fail",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "float",
                    "str",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ],
                "project": [
                    "str"
                ]
            }
        },
        "test_function_call_without_arguments": {
            "name": "test_function_call_without_arguments",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "str",
                    "TextIO",
                    "typing.TextIO",
                    "IO[str]",
                    "typing.IO"
                ],
                "project": []
            }
        },
        "test_function_call_without_arguments_dict_style": {
            "name": "test_function_call_without_arguments_dict_style",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "str",
                    "TextIO",
                    "typing.TextIO"
                ],
                "project": []
            }
        },
        "test_function_call_with_arguments": {
            "name": "test_function_call_with_arguments",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "str",
                    "TextIO",
                    "typing.TextIO",
                    "IO[str]",
                    "typing.IO"
                ],
                "project": []
            }
        },
        "test_multiple_columns": {
            "name": "test_multiple_columns",
            "location": 380,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "bytes"
                ],
                "project": []
            }
        },
        "test_other_column": {
            "name": "test_other_column",
            "location": 401,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "str",
                    "TextIO",
                    "typing.TextIO"
                ],
                "project": [
                    "str"
                ]
            }
        },
        "test_table_extra_functions.test_fun": {
            "name": "test_fun",
            "location": 228,
            "return": [
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "data": [
                    "bool",
                    "Callable[[numpy.ndarray, numpy.ndarray], float]",
                    "str",
                    "List[Sequence[int]]",
                    "Sequence",
                    "List[Dict[str, Any]]",
                    "List[List[dict]]",
                    "list"
                ],
                "column": [
                    "bool",
                    "Callable[[numpy.ndarray, numpy.ndarray], float]",
                    "str",
                    "List[Sequence[int]]",
                    "Sequence",
                    "List[Dict[str, Any]]",
                    "List[List[dict]]",
                    "list"
                ]
            }
        },
        "test_read_table_infer_schema.Table.extract_sample_row": {
            "name": "extract_sample_row",
            "location": 179,
            "return": [
                "str",
                "Dict[str, List[int]]",
                "Optional[float]",
                "List[Dict[str, Any]]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
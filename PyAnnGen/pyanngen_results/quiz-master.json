{
    "quiz-master/setup.py": {},
    "quiz-master/quiz_cli/class_declarative.py": {
        "Question.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "class_name": [
                    "str"
                ],
                "chapter": [
                    "str"
                ],
                "question": [
                    "str"
                ],
                "true_answer": [
                    "str"
                ],
                "false_answers": [
                    "str",
                    "Union[str, Sequence[str]]",
                    "typing.Sequence[str]"
                ]
            }
        },
        "Question.get_all_answers": {
            "name": "get_all_answers",
            "location": 40,
            "return": [
                "list[]",
                "Set[str]",
                "str",
                "Tuple[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "shuffle": [
                    "bool",
                    "str",
                    "Set[int]"
                ]
            }
        },
        "Question.shuffle_answers": {
            "name": "shuffle_answers",
            "location": 56,
            "return": [
                "Optional[bool]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "answers": [
                    "List[str]",
                    "str",
                    "Set[str]",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "Question.get_correct_letter_answer": {
            "name": "get_correct_letter_answer",
            "location": 72,
            "return": [
                "bool",
                "Sequence[str]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Question.is_correct_answer": {
            "name": "is_correct_answer",
            "location": 80,
            "return": [
                "bool",
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "answer": [
                    "str",
                    "List[Tuple[int, int]]",
                    "list[tuple[typing.Union[int,int]]]"
                ]
            }
        },
        "Question.is_correct_letter_answer": {
            "name": "is_correct_letter_answer",
            "location": 91,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "letter": [
                    "str"
                ]
            }
        },
        "Question.__repr__": {
            "name": "__repr__",
            "location": 103,
            "return": [
                "str",
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Quiz.__init__": {
            "name": "__init__",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "questions": [
                    "bytes",
                    "List[Tuple[int, ...]]",
                    "list[tuple[typing.Union[int,...]]]"
                ]
            }
        },
        "Quiz.select_question_subset": {
            "name": "select_question_subset",
            "location": 147,
            "return": [
                "float",
                "Tuple[Tuple[int, Any]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "count": [
                    "str",
                    "int",
                    "list",
                    "list[]"
                ]
            }
        },
        "Quiz.print_question": {
            "name": "print_question",
            "location": 165,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "question": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Quiz.ask_user_for_answer": {
            "name": "ask_user_for_answer",
            "location": 192,
            "return": [
                "int",
                "List[str]",
                "Dict[str, Any]",
                "Optional[str]",
                "Dict[str, str]",
                "dict",
                "bool"
            ],
            "arguments": {
                "question": [
                    "List[int]",
                    "list[int]",
                    "list",
                    "list[]"
                ]
            }
        },
        "Quiz.show_current_results": {
            "name": "show_current_results",
            "location": 211,
            "return": [
                "str",
                "Dict[str, Union[str, Set]]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Quiz.ask_user_to_continue": {
            "name": "ask_user_to_continue",
            "location": 224,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "Quiz.check_answer": {
            "name": "check_answer",
            "location": 237,
            "return": [
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "correct_answer": [
                    "str"
                ],
                "user_response": [
                    "str",
                    "int"
                ]
            }
        },
        "Quiz.take_quiz": {
            "name": "take_quiz",
            "location": 257,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "ask_for_more": [
                    "bool",
                    "str",
                    "int"
                ],
                "number_of_questions": [
                    "bool",
                    "None",
                    "Optional[Tuple[float, float]]",
                    "tuple[typing.Union[float,float]]",
                    "list[]",
                    "Optional[int]",
                    "typing.Type",
                    "Optional[List]",
                    "Optional[bool]",
                    "Optional[Type[Any]]",
                    "Union[None, int]"
                ]
            }
        },
        "Quiz.__repr__": {
            "name": "__repr__",
            "location": 294,
            "return": [
                "typing.Text",
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "quiz-master/quiz_cli/db_declarative.py": {},
    "quiz-master/quiz_cli/db_insert.py": {},
    "quiz-master/quiz_cli/Question.py": {
        "Question.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "class_name": [
                    "str"
                ],
                "chapter": [
                    "str"
                ],
                "question": [
                    "str"
                ],
                "true_answer": [
                    "str"
                ],
                "false_answers": [
                    "str",
                    "Union[str, Sequence[str]]",
                    "typing.Sequence[str]"
                ]
            }
        },
        "Question.get_all_answers": {
            "name": "get_all_answers",
            "location": 40,
            "return": [
                "list[]",
                "Set[str]",
                "str",
                "Tuple[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "shuffle": [
                    "bool",
                    "str",
                    "Set[int]"
                ]
            }
        },
        "Question.shuffle_answers": {
            "name": "shuffle_answers",
            "location": 56,
            "return": [
                "Optional[bool]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "answers": [
                    "List[str]",
                    "str",
                    "Set[str]",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "Question.get_correct_letter_answer": {
            "name": "get_correct_letter_answer",
            "location": 72,
            "return": [
                "bool",
                "Sequence[str]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Question.is_correct_answer": {
            "name": "is_correct_answer",
            "location": 80,
            "return": [
                "bool",
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "answer": [
                    "str",
                    "List[Tuple[int, int]]",
                    "list[tuple[typing.Union[int,int]]]"
                ]
            }
        },
        "Question.is_correct_letter_answer": {
            "name": "is_correct_letter_answer",
            "location": 91,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "letter": [
                    "str"
                ]
            }
        },
        "Question.__repr__": {
            "name": "__repr__",
            "location": 103,
            "return": [
                "str",
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "quiz-master/quiz_cli/quiz.py": {
        "start_session": {
            "name": "start_session",
            "location": 25,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "end_session": {
            "name": "end_session",
            "location": 40,
            "return": [
                "Optional[bool]",
                "Optional[float]",
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.Session",
                    "str",
                    "Dict[Hashable, Any]",
                    "serverwamp.session.WAMPSession"
                ]
            }
        },
        "add_question": {
            "name": "add_question",
            "location": 53,
            "return": [
                "bool"
            ],
            "arguments": {
                "session": [
                    "str",
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.scoping.scoped_session"
                ],
                "class_name": [
                    "str",
                    "List[str]",
                    "bool",
                    "int"
                ],
                "chapter": [
                    "str",
                    "List[str]",
                    "bool",
                    "int"
                ],
                "question": [
                    "str",
                    "List[str]",
                    "bool",
                    "int"
                ],
                "true_answer": [
                    "str",
                    "List[str]",
                    "bool",
                    "int"
                ],
                "false_answers": [
                    "str",
                    "List[str]",
                    "bool",
                    "int"
                ]
            }
        },
        "delete_question": {
            "name": "delete_question",
            "location": 114,
            "return": [
                "bool"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.Session",
                    "str",
                    "sqlalchemy.orm.scoping.scoped_session",
                    "app.db.session.Session",
                    "abilian.core.sqlalchemy.SQLAlchemy",
                    "sqlalchemy.orm.session.Session"
                ],
                "question": [
                    "str",
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.scoping.scoped_session"
                ]
            }
        },
        "question_table_to_list": {
            "name": "question_table_to_list",
            "location": 143,
            "return": [
                "Dict[str, Any]",
                "str",
                "Container[str]",
                "List[str]",
                "set"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.Session",
                    "labm8.py.sqlutil.Session",
                    "Callable[[Type, str], bool]",
                    "authentication.session.models.current_user.CurrentUser"
                ],
                "question_rows": [
                    "List[quiz_cli.db_declarative.QuestionTable]",
                    "List[Tuple[str, str]]",
                    "list",
                    "List[str]",
                    "List[Tuple[str, int]]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "get_questions_from_db": {
            "name": "get_questions_from_db",
            "location": 169,
            "return": [
                "Dict[str, Any]",
                "Container[str]",
                "List[str]"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.Session",
                    "str",
                    "Dict[str, bool]",
                    "bytes"
                ],
                "class_name": [
                    "str",
                    "Optional[str]"
                ],
                "chapter": [
                    "str",
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        },
        "print_quiz": {
            "name": "print_quiz",
            "location": 195,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "session": [
                    "str",
                    "sqlalchemy.orm.Session",
                    "int",
                    "Optional[str]"
                ],
                "class_name": [
                    "str",
                    "sqlalchemy.orm.Session",
                    "int",
                    "Optional[str]"
                ],
                "chapter": [
                    "str",
                    "sqlalchemy.orm.Session",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "take_quiz_number_of_questions": {
            "name": "take_quiz_number_of_questions",
            "location": 217,
            "return": [],
            "arguments": {
                "session": [
                    "str",
                    "sqlalchemy.orm.Session",
                    "bool",
                    "Dict[str, Any]"
                ],
                "class_name": [
                    "str",
                    "sqlalchemy.orm.Session",
                    "bool",
                    "Dict[str, Any]"
                ],
                "chapter": [
                    "str",
                    "sqlalchemy.orm.Session",
                    "bool",
                    "Dict[str, Any]"
                ],
                "number_of_questions": [
                    "int",
                    "bool",
                    "Optional[List[str]]"
                ]
            }
        },
        "take_quiz_keep_asking": {
            "name": "take_quiz_keep_asking",
            "location": 241,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "session": [
                    "str",
                    "sqlalchemy.orm.Session",
                    "int",
                    "Optional[str]"
                ],
                "class_name": [
                    "str",
                    "sqlalchemy.orm.Session",
                    "int",
                    "Optional[str]"
                ],
                "chapter": [
                    "str",
                    "sqlalchemy.orm.Session",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "cli_arguments": {
            "name": "cli_arguments",
            "location": 263,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 334,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "quiz-master/quiz_gui/quiz.py": {
        "main": {
            "name": "main",
            "location": 127,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "MainWindow.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        },
        "MainWindow.pushButton_add_question_clicked": {
            "name": "pushButton_add_question_clicked",
            "location": 59,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.pushButton_edit_question_clicked": {
            "name": "pushButton_edit_question_clicked",
            "location": 63,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.pushButton_delete_question_clicked": {
            "name": "pushButton_delete_question_clicked",
            "location": 67,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.pushButton_add_false_answer_clicked": {
            "name": "pushButton_add_false_answer_clicked",
            "location": 71,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.pushButton_edit_false_answer_clicked": {
            "name": "pushButton_edit_false_answer_clicked",
            "location": 75,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.pushButton_delete_false_answer_clicked": {
            "name": "pushButton_delete_false_answer_clicked",
            "location": 79,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.action_quit_triggered": {
            "name": "action_quit_triggered",
            "location": 83,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.action_undo_triggered": {
            "name": "action_undo_triggered",
            "location": 89,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.action_redo_triggered": {
            "name": "action_redo_triggered",
            "location": 93,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.action_cut_triggered": {
            "name": "action_cut_triggered",
            "location": 97,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.action_copy_triggered": {
            "name": "action_copy_triggered",
            "location": 101,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.action_paste_triggered": {
            "name": "action_paste_triggered",
            "location": 105,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.action_delete_triggered": {
            "name": "action_delete_triggered",
            "location": 109,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.action_select_all_triggered": {
            "name": "action_select_all_triggered",
            "location": 113,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.action_about_triggered": {
            "name": "action_about_triggered",
            "location": 117,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.listWidget_questions_itemSelectionChanged": {
            "name": "listWidget_questions_itemSelectionChanged",
            "location": 121,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "quiz-master/quiz_gui/quiz_uic.py": {
        "Ui_MainWindow.setupUi": {
            "name": "setupUi",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "MainWindow": [
                    "bool",
                    "type"
                ]
            }
        },
        "Ui_MainWindow.retranslateUi": {
            "name": "retranslateUi",
            "location": 169,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "MainWindow": [
                    "str"
                ]
            }
        }
    },
    "quiz-master/tests/test_quiz_cli.py": {
        "TestQuiz.supply_session": {
            "name": "supply_session",
            "location": 16,
            "return": [
                "str",
                "dict",
                "Exception",
                "int",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuiz.test_start_session": {
            "name": "test_start_session",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuiz.test_end_session": {
            "name": "test_end_session",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuiz.test_add_question": {
            "name": "test_add_question",
            "location": 55,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "None",
                    "Optional[str]",
                    "int",
                    "Optional[int]",
                    "bool"
                ],
                "class_name": [
                    "str",
                    "None",
                    "Optional[str]",
                    "int",
                    "Optional[int]",
                    "bool"
                ],
                "chapter": [
                    "str",
                    "None",
                    "Optional[str]",
                    "int",
                    "Optional[int]",
                    "bool"
                ],
                "question": [
                    "str",
                    "None",
                    "Optional[str]",
                    "int",
                    "Optional[int]",
                    "bool"
                ],
                "true_answer": [
                    "str",
                    "None",
                    "Optional[str]",
                    "int",
                    "Optional[int]",
                    "bool"
                ],
                "false_answers": [
                    "str",
                    "None",
                    "Optional[str]",
                    "int",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "TestQuiz.test_delete_question": {
            "name": "test_delete_question",
            "location": 71,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuiz.test_delete_question_noresultfound": {
            "name": "test_delete_question_noresultfound",
            "location": 74,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuiz.test_delete_question_multipleresultsfound": {
            "name": "test_delete_question_multipleresultsfound",
            "location": 77,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuiz.test_question_table_to_list": {
            "name": "test_question_table_to_list",
            "location": 80,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuiz.test_get_questions_from_db": {
            "name": "test_get_questions_from_db",
            "location": 83,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuiz.test_print_quiz": {
            "name": "test_print_quiz",
            "location": 86,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuiz.test_take_quiz_number_of_questions": {
            "name": "test_take_quiz_number_of_questions",
            "location": 89,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuiz.test_take_quiz_keep_asking": {
            "name": "test_take_quiz_keep_asking",
            "location": 92,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuiz.test_cli_arguments": {
            "name": "test_cli_arguments",
            "location": 95,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
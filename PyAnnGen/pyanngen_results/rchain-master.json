{
    "rchain-master/docs/whiteblock/test_plan_automation/test_script.py": {},
    "rchain-master/integration-tests/__init__.py": {},
    "rchain-master/integration-tests/test/common.py": {
        "random_string": {
            "name": "random_string",
            "location": 60,
            "return": [
                "str"
            ],
            "arguments": {
                "context": [
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "length": [
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "make_tempfile": {
            "name": "make_tempfile",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "prefix": [
                    "str"
                ],
                "content": [
                    "str",
                    "bytes"
                ]
            }
        },
        "make_tempdir": {
            "name": "make_tempdir",
            "location": 73,
            "return": [
                "str"
            ],
            "arguments": {
                "prefix": [
                    "str",
                    "bool",
                    "Dict[str,str]",
                    "int"
                ]
            }
        },
        "NonZeroExitCodeError.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "int",
                    "str",
                    "Mapping[str,Any]",
                    "Mapping"
                ],
                "exit_code": [
                    "int",
                    "bytes"
                ],
                "output": [
                    "int",
                    "str",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        }
    },
    "rchain-master/integration-tests/test/conftest.py": {
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "_pytesconfig.argparsing.Parser"
                ]
            }
        },
        "command_line_options": {
            "name": "command_line_options",
            "location": 48,
            "return": [
                "Generator[common.CommandLineOptions,None,None]",
                "Generator[CommandLineOptions]"
            ],
            "arguments": {
                "request": []
            }
        },
        "temporary_bonds_file": {
            "name": "temporary_bonds_file",
            "location": 70,
            "return": [
                "Generator[str,None,None]",
                "Generator"
            ],
            "arguments": {
                "random_generator": [
                    "str",
                    "bytes",
                    "bool",
                    "dict",
                    "List[str]"
                ],
                "validator_keys": [
                    "str",
                    "List[str]",
                    "bool",
                    "int",
                    "Iterable[Any]"
                ]
            }
        },
        "make_wallets_file_lines": {
            "name": "make_wallets_file_lines",
            "location": 82,
            "return": [
                "List[str]",
                "str",
                "bool",
                "Parameter",
                "List[Dict[str,str]]",
                "List",
                "int",
                "Type"
            ],
            "arguments": {
                "random_generator": [
                    "str",
                    "bool",
                    "int",
                    "Tuple[int, int, int]"
                ],
                "validator_keys": [
                    "str",
                    "List[str]",
                    "bool",
                    "int"
                ]
            }
        },
        "temporary_wallets_file": {
            "name": "temporary_wallets_file",
            "location": 92,
            "return": [
                "Generator[str,None,None]",
                "Generator"
            ],
            "arguments": {
                "random_generator": [
                    "str",
                    "int",
                    "bool"
                ],
                "validator_keys": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "docker_client": {
            "name": "docker_client",
            "location": 104,
            "return": [
                "Generator[docker.client.DockerClient,None,None]",
                "Generator"
            ],
            "arguments": {}
        },
        "random_generator": {
            "name": "random_generator",
            "location": 114,
            "return": [
                "Generator[random.Random,None,None]",
                "Generator[Random]"
            ],
            "arguments": {
                "command_line_options": [
                    "int",
                    "Set[str]",
                    "float"
                ]
            }
        },
        "testing_context": {
            "name": "testing_context",
            "location": 122,
            "return": [
                "Generator[common.TestingContext,None,None]",
                "Generator[TestingContext]"
            ],
            "arguments": {
                "command_line_options": [],
                "random_generator": [
                    "str",
                    "Optional[Tuple[float,float]]",
                    "Tuple[Union[float,float]]",
                    "None"
                ],
                "docker_client": [],
                "bootstrap_keypair": [
                    "str",
                    "None",
                    "Optional[str]"
                ],
                "peers_keypairs": [
                    "None"
                ],
                "network_peers": [
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "started_standalone_bootstrap_node": {
            "name": "started_standalone_bootstrap_node",
            "location": 150,
            "return": [
                "Generator[rnode.Node,None,None]",
                "Generator"
            ],
            "arguments": {
                "command_line_options": [
                    "Iterable[Sequence[str]]",
                    "bool",
                    "docker.clienDockerClient",
                    "common.CommandLineOptions",
                    "random.Random"
                ],
                "random_generator": [
                    "Iterable[Sequence[str]]",
                    "bool",
                    "docker.clienDockerClient",
                    "common.CommandLineOptions",
                    "random.Random"
                ],
                "docker_client": [
                    "Iterable[Sequence[str]]",
                    "bool",
                    "docker.clienDockerClient",
                    "common.CommandLineOptions",
                    "random.Random"
                ]
            }
        }
    },
    "rchain-master/integration-tests/test/network.py": {
        "Network.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "network": [
                    "int",
                    "float",
                    "bool"
                ],
                "bootstrap": [
                    "List[int]",
                    "int",
                    "List[list]",
                    "utils.Node",
                    "List[List]",
                    "T"
                ],
                "peers": [
                    "List[int]",
                    "int",
                    "utils.Node",
                    "List[List]",
                    "T"
                ]
            }
        }
    },
    "rchain-master/integration-tests/test/pregenerated_keypairs.py": {},
    "rchain-master/integration-tests/test/rnode.py": {
        "extract_block_count_from_show_blocks": {
            "name": "extract_block_count_from_show_blocks",
            "location": 76,
            "return": [
                "int",
                "deeplearning.ml4pl.models.batch.Results",
                "List[str]"
            ],
            "arguments": {
                "show_blocks_output": [
                    "str"
                ]
            }
        },
        "parse_show_blocks_key_value_line": {
            "name": "parse_show_blocks_key_value_line",
            "location": 91,
            "return": [
                "Tuple",
                "bool",
                "str",
                "Optional[str]",
                "Dict"
            ],
            "arguments": {
                "line": [
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "parse_show_blocks_output": {
            "name": "parse_show_blocks_output",
            "location": 98,
            "return": [
                "List[dict[Union[str,int],Union[str,int,IO,list[str]]]]",
                "str",
                "bool",
                "List[object]"
            ],
            "arguments": {
                "show_blocks_output": [
                    "str",
                    "int",
                    "Union[tuple,list]"
                ]
            }
        },
        "extract_block_hash_from_propose_output": {
            "name": "extract_block_hash_from_propose_output",
            "location": 127,
            "return": [
                "str",
                "\"Project\"",
                "Dict[str, Any]",
                "zerver.models.CustomProfileField",
                "int",
                "type"
            ],
            "arguments": {
                "propose_output": [
                    "str",
                    "apps.common.coininfo.CoinInfo"
                ]
            }
        },
        "make_container_command": {
            "name": "make_container_command",
            "location": 313,
            "return": [
                "str",
                "Dict",
                "bool",
                "Dict[str,Any]"
            ],
            "arguments": {
                "container_command": [
                    "str",
                    "List",
                    "Optional[str]",
                    "None"
                ],
                "container_command_flags": [
                    "str",
                    "bool",
                    "docker.models.containers.Container"
                ],
                "container_command_options": [
                    "Dict",
                    "Optional[dict]"
                ]
            }
        },
        "make_node": {
            "name": "make_node",
            "location": 320,
            "return": [
                "Node",
                "int",
                "Dict[str,Any]",
                "Iterable[str]"
            ],
            "arguments": {}
        },
        "get_absolute_path_for_mounting": {
            "name": "get_absolute_path_for_mounting",
            "location": 388,
            "return": [
                "str"
            ],
            "arguments": {
                "relative_path": [
                    "str"
                ],
                "mount_dir": [
                    "str",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "make_bootstrap_node": {
            "name": "make_bootstrap_node",
            "location": 407,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "make_container_name": {
            "name": "make_container_name",
            "location": 466,
            "return": [
                "str",
                "Mapping[str,Any]",
                "Type"
            ],
            "arguments": {
                "network_name": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "make_bootstrap_name": {
            "name": "make_bootstrap_name",
            "location": 470,
            "return": [
                "bool",
                "Tuple[bool, str]",
                "multinedb.models.graph.Graph",
                "str"
            ],
            "arguments": {
                "network_name": [
                    "str"
                ]
            }
        },
        "make_peer_name": {
            "name": "make_peer_name",
            "location": 474,
            "return": [
                "bool",
                "Tuple[bool, str]",
                "multinedb.models.graph.Graph",
                "str"
            ],
            "arguments": {
                "network_name": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "make_peer": {
            "name": "make_peer",
            "location": 482,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "started_peer": {
            "name": "started_peer",
            "location": 538,
            "return": [
                "Generator[Node,None,None]",
                "Generator"
            ],
            "arguments": {}
        },
        "bootstrap_connected_peer": {
            "name": "bootstrap_connected_peer",
            "location": 569,
            "return": [
                "Generator[Node,None,None]",
                "Generator"
            ],
            "arguments": {}
        },
        "create_peer_nodes": {
            "name": "create_peer_nodes",
            "location": 587,
            "return": [
                "List",
                "zerver.models.Realm",
                "str",
                "bool",
                "int",
                "Dict[str,Tuple[int,int]]"
            ],
            "arguments": {}
        },
        "make_random_network_name": {
            "name": "make_random_network_name",
            "location": 625,
            "return": [
                "str"
            ],
            "arguments": {
                "context": [
                    "int",
                    "common.TestingContext",
                    "str",
                    "Type",
                    "Optional[Type[BaseException]]",
                    "None"
                ],
                "length": [
                    "int",
                    "common.TestingContext",
                    "str",
                    "Type",
                    "Optional[Type[BaseException]]",
                    "None"
                ]
            }
        },
        "docker_network": {
            "name": "docker_network",
            "location": 630,
            "return": [
                "Generator[str,None,None]",
                "Generator[str]"
            ],
            "arguments": {
                "context": [
                    "str",
                    "Dict[str,Any]",
                    "List[str]",
                    "Dict"
                ],
                "docker_client": [
                    "str",
                    "Dict",
                    "docker.clienDockerClient"
                ]
            }
        },
        "started_bootstrap": {
            "name": "started_bootstrap",
            "location": 642,
            "return": [
                "Generator[Node,None,None]",
                "Generator"
            ],
            "arguments": {}
        },
        "docker_network_with_started_bootstrap": {
            "name": "docker_network_with_started_bootstrap",
            "location": 670,
            "return": [
                "Generator[Node,None,None]",
                "Generator"
            ],
            "arguments": {
                "context": [
                    "Dict[str,str]",
                    "logging.LogRecord",
                    "int",
                    "ContextManager",
                    "str",
                    "Union[int,str]"
                ],
                "cli_flags": [
                    "taxonomy.db.models.Taxon",
                    "Callable",
                    "None"
                ]
            }
        },
        "ready_bootstrap": {
            "name": "ready_bootstrap",
            "location": 678,
            "return": [
                "Generator[Node,None,None]",
                "Generator"
            ],
            "arguments": {
                "context": [
                    "str",
                    "Callable",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "cli_flags": [
                    "Sequence[str]",
                    "None",
                    "str",
                    "List[str]",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ],
                "cli_options": [
                    "Sequence[str]",
                    "None",
                    "str",
                    "List[str]",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ],
                "wallets_file": [
                    "Sequence[str]",
                    "None",
                    "str",
                    "List[str]",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "RNodeAddressNotFoundError.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "regex": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "CommandTimeoutError.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "int",
                    "float",
                    "str"
                ],
                "timeout": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "UnexpectedShowBlocksOutputFormatError.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output": [
                    "bool",
                    "Set",
                    "Dict",
                    "List[str]",
                    "int"
                ]
            }
        },
        "UnexpectedProposeOutputFormatError.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output": [
                    "bool",
                    "Set",
                    "Dict",
                    "List[str]",
                    "int"
                ]
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__repr__": {
            "name": "__repr__",
            "location": 155,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.logs": {
            "name": "logs",
            "location": 158,
            "return": [
                "bytes",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.get_rnode_address": {
            "name": "get_rnode_address",
            "location": 161,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.get_metrics": {
            "name": "get_metrics",
            "location": 170,
            "return": [
                "List[str]",
                "str",
                "int",
                "Tuple[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.get_connected_peers_metric_value": {
            "name": "get_connected_peers_metric_value",
            "location": 173,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.cleanup": {
            "name": "cleanup",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.show_blocks_with_depth": {
            "name": "show_blocks_with_depth",
            "location": 186,
            "return": [
                "Dict[str, int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "depth": [
                    "int",
                    "str"
                ]
            }
        },
        "Node.show_block": {
            "name": "show_block",
            "location": 189,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "hash": [
                    "List[str]",
                    "Callable",
                    "BinaryIO",
                    "str",
                    "zerver.models.Realm"
                ]
            }
        },
        "Node.get_blocks_count": {
            "name": "get_blocks_count",
            "location": 192,
            "return": [
                "bool",
                "Match",
                "Type",
                "dict"
            ],
            "arguments": {
                "self": [],
                "depth": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "Node.show_blocks_parsed": {
            "name": "show_blocks_parsed",
            "location": 196,
            "return": [
                "Iterable[int]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "depth": [
                    "float",
                    "str",
                    "int",
                    "Dict[str,Any]",
                    "bool"
                ]
            }
        },
        "Node.get_block": {
            "name": "get_block",
            "location": 200,
            "return": [
                "str",
                "viewer.models.Archive"
            ],
            "arguments": {
                "self": [],
                "block_hash": [
                    "bool",
                    "List[str]"
                ]
            }
        },
        "Node._exec_run_with_timeout": {
            "name": "_exec_run_with_timeout",
            "location": 207,
            "return": [
                "Tuple",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "cmd": [
                    "bool",
                    "str",
                    "logging.Logger",
                    "multiprocessing.Queue",
                    "int"
                ],
                "stderr": [
                    "bool",
                    "int"
                ]
            }
        },
        "Node.shell_out": {
            "name": "shell_out",
            "location": 235,
            "return": [
                "str",
                "int",
                "Callable[,str]",
                "Dict",
                "Pattern",
                "bytes",
                "Dict[str,list[Any]]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.rnode_command": {
            "name": "rnode_command",
            "location": 241,
            "return": [
                "str",
                "MutableMapping[str, Any]",
                "dict",
                "OrderedDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.eval": {
            "name": "eval",
            "location": 244,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "rho_file_path": [
                    "str",
                    "bool",
                    "Callable[str,str]",
                    "Callable[[str],str]",
                    "int"
                ]
            }
        },
        "Node.deploy": {
            "name": "deploy",
            "location": 247,
            "return": [
                "str",
                "dict",
                "salon.models.Stylist"
            ],
            "arguments": {
                "self": [],
                "rho_file_path": [
                    "str",
                    "bool",
                    "Callable[str,str]",
                    "Callable[[str],str]",
                    "int"
                ]
            }
        },
        "Node.deploy_string": {
            "name": "deploy_string",
            "location": 250,
            "return": [
                "Optional[List[Any]]",
                "int",
                "Tuple[int]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "rholang_code": [
                    "str"
                ]
            }
        },
        "Node.propose": {
            "name": "propose",
            "location": 257,
            "return": [
                "str",
                "int",
                "Dict[int,bool]",
                "Union[str,Pattern]",
                "Callable",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.repl": {
            "name": "repl",
            "location": 262,
            "return": [
                "str",
                "int",
                "Final",
                "Optional[str]",
                "Counter"
            ],
            "arguments": {
                "self": [],
                "rholang_code": [
                    "str",
                    "int"
                ],
                "stderr": [
                    "bool",
                    "str",
                    "int",
                    "Dict"
                ]
            }
        },
        "Node.generate_faucet_bonding_deploys": {
            "name": "generate_faucet_bonding_deploys",
            "location": 272,
            "return": [
                "float",
                "str",
                "bytearray",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "bond_amount": [
                    "str",
                    "bytes",
                    "bool",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ],
                "private_key": [
                    "str",
                    "bytes",
                    "bool",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ],
                "public_key": [
                    "str",
                    "bytes",
                    "bool",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ]
            }
        },
        "Node.cat_forward_file": {
            "name": "cat_forward_file",
            "location": 280,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "public_key": [
                    "str",
                    "bool",
                    "AnyStr",
                    "int"
                ]
            }
        },
        "Node.cat_bond_file": {
            "name": "cat_bond_file",
            "location": 283,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "public_key": [
                    "str",
                    "bool",
                    "AnyStr",
                    "int"
                ]
            }
        },
        "Node.log_lines": {
            "name": "log_lines",
            "location": 289,
            "return": [
                "str",
                "bytes",
                "Dict[str, Any]",
                "bool",
                "Dict[str, float]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoggingThread.__init__": {
            "name": "__init__",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "terminate_thread_event": [
                    "Set",
                    "str",
                    "List[str]",
                    "int"
                ],
                "container": [
                    "str"
                ],
                "logger": [
                    "Callable",
                    "logging.Logger",
                    "pypi2nix.logger.Logger"
                ]
            }
        },
        "LoggingThread.run": {
            "name": "run",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node._exec_run_with_timeout.command_process": {
            "name": "command_process",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "rchain-master/integration-tests/test/test_dag_correctness.py": {
        "test_fault_tolerance": {
            "name": "test_fault_tolerance",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "command_line_options": [
                    "common.CommandLineOptions",
                    "docker.clienDockerClient"
                ],
                "docker_client": [
                    "common.CommandLineOptions",
                    "docker.clienDockerClient"
                ]
            }
        },
        "test_catch_up_next_round": {
            "name": "test_catch_up_next_round",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "command_line_options": [
                    "common.CommandLineOptions",
                    "docker.clienDockerClient"
                ],
                "docker_client": [
                    "common.CommandLineOptions",
                    "docker.clienDockerClient"
                ]
            }
        },
        "test_catch_up": {
            "name": "test_catch_up",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "command_line_options": [
                    "common.CommandLineOptions",
                    "docker.clienDockerClient"
                ],
                "docker_client": [
                    "common.CommandLineOptions",
                    "docker.clienDockerClient"
                ]
            }
        }
    },
    "rchain-master/integration-tests/test/test_deployment.py": {
        "test_simple_deploy": {
            "name": "test_simple_deploy",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "command_line_options": [
                    "common.CommandLineOptions",
                    "docker.clienDockerClient"
                ],
                "docker_client": [
                    "common.CommandLineOptions",
                    "docker.clienDockerClient"
                ]
            }
        },
        "test_incorrect_contract_does_not_deploy": {
            "name": "test_incorrect_contract_does_not_deploy",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "command_line_options": [
                    "docker.clienDockerClient",
                    "common.CommandLineOptions"
                ],
                "docker_client": [
                    "docker.clienDockerClient",
                    "common.CommandLineOptions"
                ]
            }
        }
    },
    "rchain-master/integration-tests/test/test_eval.py": {
        "test_eval": {
            "name": "test_eval",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "started_standalone_bootstrap_node": [
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "random_generator": [
                    "str",
                    "int",
                    "Dict[int, Tuple[str, str, str, str]]"
                ]
            }
        }
    },
    "rchain-master/integration-tests/test/test_genesis_ceremony.py": {
        "test_successful_genesis_ceremony": {
            "name": "test_successful_genesis_ceremony",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "command_line_options": [
                    "docker.clienDockerClient",
                    "common.CommandLineOptions",
                    "random.Random"
                ],
                "random_generator": [
                    "random.Random",
                    "common.CommandLineOptions",
                    "docker.clienDockerClient"
                ],
                "docker_client": [
                    "docker.clienDockerClient",
                    "common.CommandLineOptions",
                    "random.Random"
                ]
            }
        },
        "test_successful_genesis_ceremony_with_read_only": {
            "name": "test_successful_genesis_ceremony_with_read_only",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "command_line_options": [
                    "docker.clienDockerClient",
                    "common.CommandLineOptions",
                    "random.Random"
                ],
                "random_generator": [
                    "random.Random",
                    "common.CommandLineOptions",
                    "docker.clienDockerClient"
                ],
                "docker_client": [
                    "docker.clienDockerClient",
                    "common.CommandLineOptions",
                    "random.Random"
                ]
            }
        },
        "test_not_successful_genesis_ceremony": {
            "name": "test_not_successful_genesis_ceremony",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "docker_client_session": [
                    "docker.clienDockerClient",
                    "common.CommandLineOptions"
                ]
            }
        },
        "test_validator_catching_up": {
            "name": "test_validator_catching_up",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "docker_client_session": [
                    "docker.clienDockerClient",
                    "common.CommandLineOptions"
                ]
            }
        }
    },
    "rchain-master/integration-tests/test/test_heterogenous_validators.py": {
        "test_heterogenous_validators": {
            "name": "test_heterogenous_validators",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "command_line_options": [
                    "random.Random",
                    "common.CommandLineOptions",
                    "docker.clienDockerClient"
                ],
                "random_generator": [
                    "random.Random",
                    "common.CommandLineOptions",
                    "docker.clienDockerClient"
                ],
                "docker_client": [
                    "random.Random",
                    "common.CommandLineOptions",
                    "docker.clienDockerClient"
                ]
            }
        }
    },
    "rchain-master/integration-tests/test/test_internal.py": {
        "test_blocks_count_from_show_blocks": {
            "name": "test_blocks_count_from_show_blocks",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_show_blocks_key_value_line": {
            "name": "test_parse_show_blocks_key_value_line",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_show_blocks_output": {
            "name": "test_parse_show_blocks_output",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_extract_block_hash_from_propose_output": {
            "name": "test_extract_block_hash_from_propose_output",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_make_wallets_file_lines": {
            "name": "test_make_wallets_file_lines",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "rchain-master/integration-tests/test/test_multiple_deploys.py": {
        "test_multiple_deploys_at_once": {
            "name": "test_multiple_deploys_at_once",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "command_line_options": [
                    "random.Random",
                    "common.CommandLineOptions",
                    "docker.clienDockerClient"
                ],
                "random_generator": [
                    "random.Random",
                    "common.CommandLineOptions",
                    "docker.clienDockerClient"
                ],
                "docker_client": [
                    "random.Random",
                    "common.CommandLineOptions",
                    "docker.clienDockerClient"
                ]
            }
        },
        "DeployThread.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ],
                "node": [
                    "int",
                    "str",
                    "None",
                    "bool",
                    "Optional[recidiviz.common.constants.state.state_supervision_period.StateSupervisionLevel]"
                ],
                "contract": [
                    "int",
                    "str",
                    "None",
                    "bool",
                    "Optional[recidiviz.common.constants.state.state_supervision_period.StateSupervisionLevel]"
                ],
                "count": [
                    "int",
                    "str",
                    "None",
                    "bool",
                    "Optional[recidiviz.common.constants.state.state_supervision_period.StateSupervisionLevel]"
                ]
            }
        },
        "DeployThread.run": {
            "name": "run",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rchain-master/integration-tests/test/test_network_topology.py": {
        "start_network": {
            "name": "start_network",
            "location": 34,
            "return": [
                "Generator[network.Network,None,None]",
                "Generator[Network]"
            ],
            "arguments": {}
        },
        "star_network": {
            "name": "star_network",
            "location": 53,
            "return": [
                "Generator[network.Network,None,None]",
                "Generator"
            ],
            "arguments": {
                "context": [
                    "int"
                ]
            }
        },
        "complete_network": {
            "name": "complete_network",
            "location": 62,
            "return": [
                "Generator[network.Network,None,None]",
                "Generator"
            ],
            "arguments": {
                "context": [
                    "int",
                    "List[int]",
                    "str"
                ]
            }
        },
        "deploy_block": {
            "name": "deploy_block",
            "location": 72,
            "return": [
                "Union[str, Pattern]",
                "bool",
                "Optional[Dict[str, str]]",
                "dict",
                "Type",
                "type"
            ],
            "arguments": {
                "node": [
                    "str",
                    "Optional[str]"
                ],
                "expected_string": [
                    "str"
                ],
                "contract_name": [
                    "str"
                ]
            }
        },
        "make_expected_string": {
            "name": "make_expected_string",
            "location": 87,
            "return": [
                "str",
                "Mapping[str,Any]"
            ],
            "arguments": {
                "node": [
                    "str",
                    "bool",
                    "Dict[str,str]",
                    "List[str]",
                    "Union[str,List[str]]",
                    "wdom.node.Node",
                    "None",
                    "Optional[str]"
                ],
                "random_token": [
                    "str",
                    "bool",
                    "Dict[str,str]",
                    "List[str]",
                    "Union[str,List[str]]",
                    "wdom.node.Node",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "test_casper_propose_and_deploy": {
            "name": "test_casper_propose_and_deploy",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "command_line_options": [
                    "random.Random",
                    "common.CommandLineOptions",
                    "docker.clienDockerClient"
                ],
                "random_generator": [
                    "random.Random",
                    "common.CommandLineOptions",
                    "docker.clienDockerClient"
                ],
                "docker_client": [
                    "random.Random",
                    "common.CommandLineOptions",
                    "docker.clienDockerClient"
                ]
            }
        }
    },
    "rchain-master/integration-tests/test/test_p2p.py": {
        "test_connecting_to_existing_node": {
            "name": "test_connecting_to_existing_node",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "command_line_options": [
                    "common.CommandLineOptions",
                    "docker.clienDockerClient"
                ],
                "docker_client": [
                    "common.CommandLineOptions",
                    "docker.clienDockerClient"
                ]
            }
        },
        "test_connecting_to_non_existing_node": {
            "name": "test_connecting_to_non_existing_node",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "command_line_options": [
                    "common.CommandLineOptions",
                    "docker.clienDockerClient"
                ],
                "docker_client": [
                    "common.CommandLineOptions",
                    "docker.clienDockerClient"
                ]
            }
        },
        "test_discover_other_nodes": {
            "name": "test_discover_other_nodes",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "command_line_options": [
                    "common.CommandLineOptions",
                    "docker.clienDockerClient"
                ],
                "docker_client": [
                    "common.CommandLineOptions",
                    "docker.clienDockerClient"
                ]
            }
        },
        "test_number_of_protocol_peers": {
            "name": "test_number_of_protocol_peers",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "command_line_options": [
                    "common.CommandLineOptions",
                    "docker.clienDockerClient"
                ],
                "docker_client": [
                    "common.CommandLineOptions",
                    "docker.clienDockerClient"
                ]
            }
        },
        "test_number_of_discovery_peers": {
            "name": "test_number_of_discovery_peers",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "command_line_options": [
                    "common.CommandLineOptions",
                    "docker.clienDockerClient"
                ],
                "docker_client": [
                    "common.CommandLineOptions",
                    "docker.clienDockerClient"
                ]
            }
        }
    },
    "rchain-master/integration-tests/test/test_propose.py": {
        "test_propose": {
            "name": "test_propose",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "command_line_options": [
                    "docker.clienDockerClient",
                    "common.CommandLineOptions",
                    "random.Random"
                ],
                "random_generator": [
                    "random.Random",
                    "docker.clienDockerClient",
                    "common.CommandLineOptions"
                ],
                "docker_client": [
                    "docker.clienDockerClient",
                    "common.CommandLineOptions",
                    "random.Random"
                ]
            }
        }
    },
    "rchain-master/integration-tests/test/test_repl.py": {
        "test_repl": {
            "name": "test_repl",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "started_standalone_bootstrap_node": [
                    "int",
                    "List[str]",
                    "bytes",
                    "float",
                    "dict"
                ]
            }
        },
        "test_repl_detects_invalid_rholang": {
            "name": "test_repl_detects_invalid_rholang",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "started_standalone_bootstrap_node": [
                    "str",
                    "int",
                    "Dict[int, int]"
                ]
            }
        }
    },
    "rchain-master/integration-tests/test/test_storage.py": {
        "test_data_is_stored_and_served_by_node": {
            "name": "test_data_is_stored_and_served_by_node",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "command_line_options": [
                    "common.CommandLineOptions",
                    "docker.clienDockerClient"
                ],
                "docker_client": [
                    "common.CommandLineOptions",
                    "docker.clienDockerClient"
                ]
            }
        }
    },
    "rchain-master/integration-tests/test/wait.py": {
        "wait_on_using_wall_clock_time": {
            "name": "wait_on_using_wall_clock_time",
            "location": 143,
            "return": [
                "None",
                "T",
                "int",
                "bool"
            ],
            "arguments": {
                "predicate": [
                    "str",
                    "logging.Logger",
                    "Exception",
                    "int"
                ],
                "timeout": [
                    "int",
                    "float",
                    "bool",
                    "Optional[float]",
                    "str"
                ]
            }
        },
        "wait_for_node_sees_block": {
            "name": "wait_for_node_sees_block",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "Union[str,int]",
                    "str",
                    "Callable",
                    "int",
                    "bool"
                ],
                "node": [
                    "bool"
                ],
                "block_hash": [
                    "bool"
                ]
            }
        },
        "wait_for_block_contains": {
            "name": "wait_for_block_contains",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "bool",
                    "Dict[str,tuple[Union[str,str,Any]]]",
                    "Dict[int,str]",
                    "Dict[str,Tuple[str,str,Any]]",
                    "Dict[str,tuple[Union[str,int,int]]]",
                    "int",
                    "Dict[str,Tuple[str,int,int]]"
                ],
                "node": [
                    "str",
                    "bool",
                    "Dict[str,Any]",
                    "Node",
                    "int"
                ],
                "block_hash": [
                    "str",
                    "bool",
                    "Dict[str,Any]",
                    "Node",
                    "int"
                ],
                "expected_string": [
                    "str",
                    "bool",
                    "Dict[str,Any]",
                    "Node",
                    "int"
                ]
            }
        },
        "wait_for_blocks_count_at_least": {
            "name": "wait_for_blocks_count_at_least",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "Optional[str]",
                    "float",
                    "str",
                    "None"
                ],
                "node": [
                    "str",
                    "Node",
                    "int",
                    "Type",
                    "Dict[str,T]"
                ],
                "expected_blocks_count": [
                    "int",
                    "float"
                ]
            }
        },
        "wait_for_node_started": {
            "name": "wait_for_node_started",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "str",
                    "Iterable[str]",
                    "common.TestingContext"
                ],
                "node": [
                    "int",
                    "Node",
                    "str",
                    "Dict[str,Any]",
                    "bytes"
                ]
            }
        },
        "wait_for_approved_block_received_handler_state": {
            "name": "wait_for_approved_block_received_handler_state",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "Type",
                    "common.TestingContext",
                    "yaml.nodes.Node"
                ],
                "node": [
                    "blib2to3.pytree.Node",
                    "yaml.nodes.Node"
                ]
            }
        },
        "wait_for_approved_block_received": {
            "name": "wait_for_approved_block_received",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "int"
                ],
                "network": [
                    "int",
                    "network.Network",
                    "Sequence",
                    "Tuple",
                    "Tuple[Union[str,str,str]]",
                    "Tuple[str,str,str]"
                ]
            }
        },
        "wait_for_started_network": {
            "name": "wait_for_started_network",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "str",
                    "bool",
                    "common.TestingContext"
                ],
                "network": [
                    "bool",
                    "float",
                    "network.Network",
                    "int"
                ]
            }
        },
        "wait_for_converged_network": {
            "name": "wait_for_converged_network",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "bytes",
                    "common.TestingContext"
                ],
                "network": [
                    "str",
                    "int",
                    "float"
                ],
                "peer_connections": [
                    "int",
                    "float"
                ]
            }
        },
        "wait_for_peers_count_at_least": {
            "name": "wait_for_peers_count_at_least",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "Dict",
                    "common.TestingContext"
                ],
                "node": [
                    "List[int]",
                    "List",
                    "pathpy.core.network.Network",
                    "None",
                    "Node",
                    "T",
                    "Optional[gfg.bsbst_and_node.Node]"
                ],
                "npeers": [
                    "List[int]",
                    "List",
                    "pathpy.core.network.Network",
                    "None",
                    "Node",
                    "T",
                    "Optional[gfg.bsbst_and_node.Node]"
                ]
            }
        },
        "wait_for_sent_unapproved_block": {
            "name": "wait_for_sent_unapproved_block",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "Dict",
                    "Set[str]",
                    "common.TestingContext"
                ],
                "node": [
                    "Node"
                ]
            }
        },
        "wait_for_block_approval": {
            "name": "wait_for_block_approval",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "Dict",
                    "common.TestingContext"
                ],
                "node": [
                    "int",
                    "Node",
                    "Set",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "wait_for_sent_approved_block": {
            "name": "wait_for_sent_approved_block",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "Dict",
                    "Set[str]",
                    "common.TestingContext"
                ],
                "node": [
                    "Node"
                ]
            }
        },
        "PredicateProtocol.__str__": {
            "name": "__str__",
            "location": 23,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PredicateProtocol.is_satisfied": {
            "name": "is_satisfied",
            "location": 27,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogsContainMessage.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "int",
                    "List[Dict[str,Any]]",
                    "Callable[...,T]",
                    "List[dict[str,Any]]"
                ],
                "message": [
                    "str",
                    "int",
                    "List[Dict[str,Any]]",
                    "Callable[...,T]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "LogsContainMessage.__str__": {
            "name": "__str__",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogsContainMessage.is_satisfied": {
            "name": "is_satisfied",
            "location": 41,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeStarted.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "Node",
                    "float",
                    "BaseException"
                ]
            }
        },
        "ApprovedBlockReceivedHandlerStateEntered.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "Node",
                    "float",
                    "BaseException"
                ]
            }
        },
        "ApprovedBlockReceived.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "Node",
                    "float",
                    "BaseException"
                ]
            }
        },
        "SentUnapprovedBlock.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "Node",
                    "float",
                    "BaseException"
                ]
            }
        },
        "BlockApproval.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "Node",
                    "float",
                    "BaseException"
                ]
            }
        },
        "SentApprovedBlock.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "Node",
                    "float",
                    "BaseException"
                ]
            }
        },
        "HasAtLeastPeers.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "int",
                    "List[Dict[str,Any]]",
                    "Callable[...,T]",
                    "List[dict[str,Any]]"
                ],
                "minimum_peers_number": [
                    "str",
                    "int",
                    "List[Dict[str,Any]]",
                    "Callable[...,T]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "HasAtLeastPeers.__str__": {
            "name": "__str__",
            "location": 81,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasAtLeastPeers.is_satisfied": {
            "name": "is_satisfied",
            "location": 85,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeSeesBlock.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bool",
                    "Dict",
                    "Dict[str,Any]",
                    "int"
                ],
                "block_hash": [
                    "bool",
                    "Dict",
                    "Dict[str,Any]",
                    "int"
                ]
            }
        },
        "NodeSeesBlock.__str__": {
            "name": "__str__",
            "location": 99,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeSeesBlock.is_satisfied": {
            "name": "is_satisfied",
            "location": 103,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockContainsString.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int",
                    "str",
                    "bool"
                ],
                "block_hash": [
                    "int",
                    "str",
                    "bool"
                ],
                "expected_string": [
                    "Dict[str,int]",
                    "Dict[str,str]",
                    "Dict",
                    "int",
                    "bool"
                ]
            }
        },
        "BlockContainsString.__str__": {
            "name": "__str__",
            "location": 117,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockContainsString.is_satisfied": {
            "name": "is_satisfied",
            "location": 121,
            "return": [
                "bool",
                "Tuple",
                "str",
                "Type[BaseException]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlocksCountAtLeast.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "int"
                ],
                "blocks_count": [
                    "int",
                    "bool"
                ]
            }
        },
        "BlocksCountAtLeast.__str__": {
            "name": "__str__",
            "location": 134,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlocksCountAtLeast.is_satisfied": {
            "name": "is_satisfied",
            "location": 138,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rchain-master/integration-tests/test/__init__.py": {},
    "rchain-master/node-client/Casper.py": {
        "buildCasperCh": {
            "name": "buildCasperCh",
            "location": 71,
            "return": [
                "bool"
            ],
            "arguments": {
                "argv": [
                    "int",
                    "List[str]",
                    "bool"
                ],
                "stdout": [
                    "int",
                    "List[str]",
                    "bool"
                ],
                "insecure_channel": [
                    "str",
                    "int"
                ],
                "host": [
                    "Text",
                    "str",
                    "int"
                ],
                "port": [
                    "int",
                    "str"
                ]
            }
        },
        "add_field_to_block_dict": {
            "name": "add_field_to_block_dict",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "block_dict": [
                    "Dict",
                    "str",
                    "MutableMapping[str,Any]"
                ],
                "field": [
                    "str",
                    "Callable[...,Awaitable[None]]",
                    "Optional[Any]",
                    "Type"
                ]
            }
        },
        "block": {
            "name": "block",
            "location": 96,
            "return": [
                "T",
                "bool"
            ],
            "arguments": {
                "block_hash": [
                    "int",
                    "str"
                ]
            }
        },
        "blocks": {
            "name": "blocks",
            "location": 105,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "rchain-master/node-client/RChain.py": {
        "main": {
            "name": "main",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "argv": [
                    "str",
                    "Optional[str]"
                ],
                "stdout": [
                    "str",
                    "bool",
                    "bytes",
                    "int"
                ],
                "insecure_channel": [
                    "str",
                    "int",
                    "bool"
                ],
                "host": [
                    "Text",
                    "str",
                    "int",
                    "bool"
                ],
                "port": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "_script": {
            "name": "_script",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "rchain-master/rosette/isode/rblimisc/IMISC-asn.py": {},
    "rchain-master/rosette/isode/rblimisc/IMISC-types.py": {},
    "rchain-master/rosette/isode/rbllookup/PasswordLookup-asn.py": {},
    "rchain-master/rosette/isode/rbllookup/PasswordLookup-types.py": {},
    "rchain-master/scripts/boot-p2p.py": {
        "main": {
            "name": "main",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "argv": [
                    "bool",
                    "Optional[TextIO]",
                    "str",
                    "Iterable",
                    "set"
                ],
                "cwd": [
                    "bool",
                    "str"
                ],
                "here": [
                    "bool",
                    "Optional[bool]",
                    "Set[str]",
                    "str"
                ],
                "temp": [
                    "bool",
                    "str"
                ],
                "randint": [
                    "bool",
                    "Optional[bool]",
                    "Set[str]",
                    "str"
                ],
                "create_keypair": [
                    "bool",
                    "str",
                    "pathlib.Path",
                    "int",
                    "IO[str]",
                    "float"
                ],
                "sleep": [
                    "bool",
                    "Callable",
                    "str",
                    "List[str]",
                    "int"
                ],
                "time": [
                    "bool",
                    "Callable",
                    "str",
                    "List[str]",
                    "int"
                ],
                "docker_from_env": [
                    "bool",
                    "str",
                    "Union[str, Pattern]",
                    "int",
                    "List[int]",
                    "Set[str]"
                ]
            }
        },
        "remove_resources_by_network": {
            "name": "remove_resources_by_network",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "containers": [
                    "Optional[List[Any]]",
                    "str",
                    "int",
                    "bool"
                ],
                "args_network": [
                    "str",
                    "List[str]",
                    "bytes",
                    "Type"
                ]
            }
        },
        "Flags.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "opts": [
                    "int",
                    "bool",
                    "float"
                ],
                "typed": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Flags.__getattr__": {
            "name": "__getattr__",
            "location": 90,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "KeyPair.encode": {
            "name": "encode",
            "location": 102,
            "return": [
                "KeyPair"
            ],
            "arguments": {
                "cls": [
                    "Type[_TKeyPair]"
                ],
                "key_pair": [
                    "str",
                    "bytes",
                    "Union[str, int]"
                ]
            }
        },
        "P2PNetwork.__init__": {
            "name": "__init__",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "network": [
                    "int",
                    "float"
                ],
                "time": [
                    "int",
                    "float"
                ],
                "sleep": [
                    "int",
                    "float"
                ]
            }
        },
        "P2PNetwork.boot": {
            "name": "boot",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "bool",
                    "str",
                    "List[Dict[str, Any]]"
                ],
                "temp": [
                    "bool",
                    "float",
                    "str",
                    "List[Dict[str, Any]]",
                    "Dict[str, pathlib.Path]",
                    "bytes",
                    "Tuple[str, int]"
                ],
                "has_faucet": [
                    "int",
                    "tuple",
                    "list",
                    "bool"
                ],
                "bond_keys": [
                    "int",
                    "bool",
                    "Dict[str, str]",
                    "List[str]",
                    "Sequence[Sequence[float]]",
                    "List[Tuple[int, int]]"
                ],
                "peer_keys": [
                    "int",
                    "bool",
                    "Dict[str, str]",
                    "List[str]",
                    "Sequence[Sequence[float]]",
                    "List[Tuple[int, int]]"
                ],
                "wallets": [
                    "int",
                    "tuple",
                    "list",
                    "bool"
                ],
                "other_bonds": [
                    "int",
                    "tuple",
                    "list",
                    "bool"
                ]
            }
        },
        "P2PNetwork.bonds_file": {
            "name": "bonds_file",
            "location": 150,
            "return": [
                "str",
                "pathlib.Path",
                "Generator[pathlib.Path, None, None]",
                "list"
            ],
            "arguments": {
                "self": [],
                "temp": [
                    "str",
                    "bytes",
                    "Optional[pathlib.Path]",
                    "Optional[str]"
                ],
                "bond_key_pairs": [
                    "bytes",
                    "Optional[List[Any]]",
                    "str",
                    "BinaryIO",
                    "Union[str, bytes]"
                ],
                "randint": [
                    "int",
                    "str",
                    "bytes",
                    "bool"
                ],
                "other_bonds": [
                    "str",
                    "pathlib.Path",
                    "path.Path",
                    "Optional[str]"
                ]
            }
        },
        "DockerImage.__init__": {
            "name": "__init__",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "containers": [
                    "str",
                    "Dict[int, int]",
                    "Optional[Dict[str, str]]",
                    "Callable",
                    "int"
                ],
                "image": [
                    "str",
                    "Dict[int, int]",
                    "Optional[Dict[str, str]]",
                    "Callable",
                    "int"
                ],
                "cpuset": [
                    "str",
                    "Dict[int, int]",
                    "Optional[Dict[str, str]]",
                    "Callable",
                    "int"
                ],
                "memory": [
                    "str",
                    "Dict[int, int]",
                    "Optional[Dict[str, str]]",
                    "Callable",
                    "int"
                ],
                "network": [
                    "str",
                    "Dict[int, int]",
                    "Optional[Dict[str, str]]",
                    "Callable",
                    "int"
                ]
            }
        },
        "DockerImage.run": {
            "name": "run",
            "location": 182,
            "return": [
                "str",
                "int",
                "Dict[int, Any]",
                "Callable[[Mapping], Awaitable]",
                "Callable[[], Awaitable[Mapping]]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[str]",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Optional[bool]",
                    "int",
                    "float"
                ],
                "volumes": [
                    "Optional[str]",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Optional[bool]",
                    "int",
                    "float"
                ],
                "command_args": [
                    "Optional[str]",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Optional[bool]",
                    "int",
                    "float"
                ]
            }
        },
        "BootstrapNode.__init__": {
            "name": "__init__",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "network": [
                    "str",
                    "List[Tuple[str, str]]",
                    "tuple"
                ],
                "bonds": [
                    "str",
                    "list"
                ],
                "wallets": [
                    "str",
                    "list"
                ],
                "has_faucet": [
                    "int",
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "bool"
                ],
                "timestamp": [
                    "List[str]",
                    "str",
                    "int",
                    "dict"
                ]
            }
        },
        "BootstrapNode.address": {
            "name": "address",
            "location": 244,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "BootstrapNode.key_volumes": {
            "name": "key_volumes",
            "location": 247,
            "return": [
                "Dict[(str, Dict[(str, str)])]"
            ],
            "arguments": {
                "self": [],
                "temp": [
                    "bool",
                    "Mapping[str, Any]",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "BootstrapNode.run": {
            "name": "run",
            "location": 265,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "str",
                    "bytes",
                    "int"
                ],
                "temp": [
                    "str",
                    "int",
                    "Union[str, bytes]",
                    "bool"
                ]
            }
        },
        "BootstrapNode.genesis": {
            "name": "genesis",
            "location": 276,
            "return": [
                "Tuple[(List[str], Dict[(str, Dict[(str, str)])])]"
            ],
            "arguments": {
                "cls": [
                    "Union[str, pathlib.Path, bytes, BinaryIO]",
                    "memoryview",
                    "bool",
                    "str"
                ],
                "sigs": [
                    "Type",
                    "float",
                    "type"
                ],
                "bonds": [
                    "Dict[str, object]",
                    "Union[None, str]",
                    "str"
                ],
                "wallets": [
                    "int",
                    "Mapping",
                    "IO[bytes]",
                    "float"
                ]
            }
        },
        "PeerNode.__init__": {
            "name": "__init__",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name_prefix": [
                    "str",
                    "Optional[str]"
                ],
                "network": [
                    "str",
                    "bytes",
                    "Mapping"
                ],
                "i": [
                    "str",
                    "bytes",
                    "Mapping"
                ],
                "key_pair": [
                    "str"
                ]
            }
        },
        "PeerNode.run": {
            "name": "run",
            "location": 301,
            "return": [
                "str",
                "Optional[List[str]]",
                "type"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "str",
                    "bool",
                    "Union[str, Sequence[str]]",
                    "pathlib.Path",
                    "Optional[List[str]]"
                ],
                "bootstrap": [
                    "str",
                    "List[Tuple[bool, str]]",
                    "Optional[str]",
                    "list",
                    "List[Tuple[float, str]]",
                    "List[Dict[str, str]]",
                    "Set[str]",
                    "Dict[str, str]"
                ]
            }
        },
        "_script": {
            "name": "_script",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "rchain-master/scripts/p2p-test-tool.py": {
        "main": {
            "name": "main",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_tests": {
            "name": "run_tests",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "deploy_demo": {
            "name": "deploy_demo",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_node_eval_of_rholang_files": {
            "name": "test_node_eval_of_rholang_files",
            "location": 259,
            "return": [
                "int"
            ],
            "arguments": {
                "container": [
                    "str"
                ]
            }
        },
        "test_propose": {
            "name": "test_propose",
            "location": 277,
            "return": [
                "int"
            ],
            "arguments": {
                "container": []
            }
        },
        "test_casper_propose_and_deploy": {
            "name": "test_casper_propose_and_deploy",
            "location": 349,
            "return": [
                "int"
            ],
            "arguments": {
                "test_container": [
                    "bytes"
                ]
            }
        },
        "show_logs": {
            "name": "show_logs",
            "location": 420,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_expected_peers_count_in_logs": {
            "name": "test_expected_peers_count_in_logs",
            "location": 428,
            "return": [
                "bool"
            ],
            "arguments": {
                "container": [
                    "bool",
                    "List[Tuple[int, int, float]]"
                ]
            }
        },
        "create_empty_bonds_file": {
            "name": "create_empty_bonds_file",
            "location": 439,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "boot_p2p_network": {
            "name": "boot_p2p_network",
            "location": 449,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "var_to_docker_file": {
            "name": "var_to_docker_file",
            "location": 465,
            "return": [
                "int"
            ],
            "arguments": {
                "var": [
                    "str"
                ],
                "container_name": [
                    "str"
                ],
                "file_path": [
                    "str"
                ]
            }
        },
        "show_containers": {
            "name": "show_containers",
            "location": 476,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "check_network_convergence": {
            "name": "check_network_convergence",
            "location": 484,
            "return": [
                "int"
            ],
            "arguments": {
                "container": [
                    "int",
                    "list"
                ]
            }
        },
        "test_performance": {
            "name": "test_performance",
            "location": 500,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "remove_resources_by_network": {
            "name": "remove_resources_by_network",
            "location": 542,
            "return": [
                "int"
            ],
            "arguments": {
                "args_network": [
                    "str",
                    "Type",
                    "List[str]",
                    "Callable[[], None]",
                    "Tuple[str]",
                    "os.PathLike"
                ]
            }
        },
        "generate_validator_private_key": {
            "name": "generate_validator_private_key",
            "location": 556,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {}
        },
        "populate_bonds_file": {
            "name": "populate_bonds_file",
            "location": 600,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "create_bootstrap_node": {
            "name": "create_bootstrap_node",
            "location": 611,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "create_peer_nodes": {
            "name": "create_peer_nodes",
            "location": 678,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "test_network_sockets": {
            "name": "test_network_sockets",
            "location": 710,
            "return": [
                "int"
            ],
            "arguments": {
                "container": []
            }
        },
        "test_repl_load": {
            "name": "test_repl_load",
            "location": 724,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "container": [
                    "argparse.ArgumentParser",
                    "argparse._SubParsersAction"
                ]
            }
        },
        "test_node_logs_for_errors": {
            "name": "test_node_logs_for_errors",
            "location": 764,
            "return": [
                "int"
            ],
            "arguments": {
                "container": []
            }
        },
        "test_node_logs_for_RuntimeException": {
            "name": "test_node_logs_for_RuntimeException",
            "location": 780,
            "return": [
                "int"
            ],
            "arguments": {
                "container": []
            }
        },
        "test_node_logs_for_correct_peers_count": {
            "name": "test_node_logs_for_correct_peers_count",
            "location": 794,
            "return": [
                "int"
            ],
            "arguments": {
                "container": [
                    "str"
                ]
            }
        },
        "rnode.deploy_cmd": {
            "name": "deploy_cmd",
            "location": 331,
            "return": [
                "str"
            ],
            "arguments": {
                "f": [
                    "Callable[..., None]",
                    "bool",
                    "float",
                    "IO[bytes]",
                    "Callable"
                ]
            }
        },
        "node.received_block_rx": {
            "name": "received_block_rx",
            "location": 342,
            "return": [
                "Pattern[str]"
            ],
            "arguments": {
                "expected_content": [
                    "str",
                    "Optional[str]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "node.added_block_rx": {
            "name": "added_block_rx",
            "location": 346,
            "return": [
                "Pattern[str]"
            ],
            "arguments": {
                "block_id": [
                    "int",
                    "Optional[str]",
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "test_casper_propose_and_deploy.run_cmd": {
            "name": "run_cmd",
            "location": 354,
            "return": [],
            "arguments": {
                "cmd": [
                    "str"
                ]
            }
        }
    },
    "rchain-master/scripts/repl_load_runner.py": {}
}
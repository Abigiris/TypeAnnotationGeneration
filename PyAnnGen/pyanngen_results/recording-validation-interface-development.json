{
    "recording-validation-interface-development/ci_run_cypress.py": {
        "modified_env": {
            "name": "modified_env",
            "location": 22,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {}
        }
    },
    "recording-validation-interface-development/manage.py": {},
    "recording-validation-interface-development/setup.py": {},
    "recording-validation-interface-development/librecval/extract_auto.py": {
        "get_entry_from_filename": {
            "name": "get_entry_from_filename",
            "location": 89,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": []
            }
        },
        "get_session_from_mtime": {
            "name": "get_session_from_mtime",
            "location": 99,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "mtime": []
            }
        },
        "Segment.signature": {
            "name": "signature",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Segment.compute_sha256hash": {
            "name": "compute_sha256hash",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SynthesizedRecordingExtractor.scan": {
            "name": "scan",
            "location": 57,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "sessions_dir": []
            }
        }
    },
    "recording-validation-interface-development/librecval/extract_i3.py": {
        "get_session_from_mtime": {
            "name": "get_session_from_mtime",
            "location": 107,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "mtime": [
                    "Optional[str]",
                    "str",
                    "float",
                    "bool",
                    "Dict",
                    "None",
                    "List[str]"
                ]
            }
        },
        "Segment.signature": {
            "name": "signature",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Segment.compute_sha256hash": {
            "name": "compute_sha256hash",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "I3RecordingExtractor.scan": {
            "name": "scan",
            "location": 60,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "sessions_dir": [
                    "str",
                    "datetime.datetime"
                ]
            }
        }
    },
    "recording-validation-interface-development/librecval/extract_okimasis.py": {
        "get_session_from_mtime": {
            "name": "get_session_from_mtime",
            "location": 151,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "mtime": []
            }
        },
        "get_comments_from_eaf": {
            "name": "get_comments_from_eaf",
            "location": 156,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "eaf_file": [],
                "start": []
            }
        },
        "get_quality_from_eaf": {
            "name": "get_quality_from_eaf",
            "location": 161,
            "return": [
                "str"
            ],
            "arguments": {
                "eaf_file": [],
                "start": []
            }
        },
        "get_transcription_and_type_from_timestamp": {
            "name": "get_transcription_and_type_from_timestamp",
            "location": 171,
            "return": [
                "Tuple[(Any, str)]"
            ],
            "arguments": {
                "eaf_file": [],
                "start": []
            }
        },
        "Segment.signature": {
            "name": "signature",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Segment.compute_sha256hash": {
            "name": "compute_sha256hash",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OkimasisRecordingExtractor.scan": {
            "name": "scan",
            "location": 66,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "sessions_dir": []
            }
        },
        "OkimasisRecordingExtractor.scan_wav": {
            "name": "scan_wav",
            "location": 115,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "sessions_dir": []
            }
        }
    },
    "recording-validation-interface-development/librecval/extract_pfn.py": {
        "get_entry_and_speaker_from_filename": {
            "name": "get_entry_and_speaker_from_filename",
            "location": 93,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "models.match_commenMatchComment"
                ]
            }
        },
        "get_session_from_mtime": {
            "name": "get_session_from_mtime",
            "location": 102,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "mtime": [
                    "Optional[str]",
                    "str",
                    "float",
                    "bool",
                    "Dict",
                    "None",
                    "List[str]"
                ]
            }
        },
        "Segment.signature": {
            "name": "signature",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Segment.compute_sha256hash": {
            "name": "compute_sha256hash",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PfnRecordingExtractor.scan": {
            "name": "scan",
            "location": 57,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "sessions_dir": [
                    "str",
                    "Dict[str,str]",
                    "List[str]"
                ]
            }
        }
    },
    "recording-validation-interface-development/librecval/extract_phrases.py": {
        "generate_segments_from_eaf": {
            "name": "generate_segments_from_eaf",
            "location": 235,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "annotation_path": [],
                "audio": [],
                "speaker": [],
                "session_id": []
            }
        },
        "get_word_tiers": {
            "name": "get_word_tiers",
            "location": 296,
            "return": [
                "Tuple[(Optional[str], Optional[str])]"
            ],
            "arguments": {
                "keys": []
            }
        },
        "get_phrase_tiers": {
            "name": "get_phrase_tiers",
            "location": 304,
            "return": [
                "Tuple[(Optional[str], Optional[str])]"
            ],
            "arguments": {
                "keys": []
            }
        },
        "extract_data": {
            "name": "extract_data",
            "location": 312,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "_file": [],
                "_type": [],
                "snippet": [],
                "audio": [],
                "speaker": [],
                "session_id": [],
                "english_tier": [],
                "comment_tier": []
            }
        },
        "find_audio_oddities": {
            "name": "find_audio_oddities",
            "location": 375,
            "return": [],
            "arguments": {
                "annotation_path": [],
                "logger": [
                    "None"
                ]
            }
        },
        "find_audio_from_audacity_format": {
            "name": "find_audio_from_audacity_format",
            "location": 491,
            "return": [
                "None"
            ],
            "arguments": {
                "annotation_path": [],
                "logger": [
                    "None"
                ]
            }
        },
        "find_audio_from_audition_format": {
            "name": "find_audio_from_audition_format",
            "location": 504,
            "return": [
                "None"
            ],
            "arguments": {
                "annotation_path": [],
                "logger": [
                    "None"
                ]
            }
        },
        "get_mic_id": {
            "name": "get_mic_id",
            "location": 531,
            "return": [
                "int"
            ],
            "arguments": {
                "name": []
            }
        },
        "get_session_name_or_none": {
            "name": "get_session_name_or_none",
            "location": 669,
            "return": [
                "None"
            ],
            "arguments": {
                "session_dir": [],
                "logger": [
                    "None"
                ]
            }
        },
        "Segment.signature": {
            "name": "signature",
            "location": 103,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Segment.compute_sha256hash": {
            "name": "compute_sha256hash",
            "location": 114,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecordingExtractor.__init__": {
            "name": "__init__",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metadata": []
            }
        },
        "RecordingExtractor.scan": {
            "name": "scan",
            "location": 142,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "root_directory": []
            }
        },
        "RecordingExtractor.extract_all_recordings_from_session": {
            "name": "extract_all_recordings_from_session",
            "location": 177,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "session_dir": []
            }
        },
        "RecordingExtractor.extract_session": {
            "name": "extract_session",
            "location": 185,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "session_dir": []
            }
        }
    },
    "recording-validation-interface-development/librecval/extract_speaker_bios.py": {
        "get_wav_file": {
            "name": "get_wav_file",
            "location": 13,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "bio_num": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "int",
                    "None"
                ],
                "bio_wav_files": [
                    "str",
                    "Optional[str]",
                    "int",
                    "float"
                ]
            }
        },
        "extract_speaker_bios": {
            "name": "extract_speaker_bios",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_bio_cree": {
            "name": "get_bio_cree",
            "location": 43,
            "return": [
                "Optional[Tuple[(Any, Any, str)]]"
            ],
            "arguments": {
                "eaf_file": [
                    "str",
                    "Union[slice,List[slice],List[int]]",
                    "List[str]",
                    "List[slice]",
                    "pathlib.Path",
                    "List[int]",
                    "List[pypi2nix.path.Path]",
                    "List[P]"
                ]
            }
        },
        "get_bio_english": {
            "name": "get_bio_english",
            "location": 48,
            "return": [
                "Optional[Tuple[(Any, Any, str)]]"
            ],
            "arguments": {
                "eaf_file": [
                    "str",
                    "Union[slice,List[slice],List[int]]",
                    "List[str]",
                    "List[slice]",
                    "pathlib.Path",
                    "List[int]",
                    "List[pypi2nix.path.Path]",
                    "List[P]"
                ]
            }
        },
        "parse_eaf": {
            "name": "parse_eaf",
            "location": 53,
            "return": [
                "Optional[Tuple[(Any, Any, str)]]"
            ],
            "arguments": {
                "eaf_file": [
                    "str",
                    "List[cutepaste.files.models.File]",
                    "List[str]",
                    "bool",
                    "pathlib.Path"
                ],
                "tier_name": [
                    "str",
                    "None",
                    "tartare.core.models.PlatformOptions",
                    "Optional[str]"
                ]
            }
        },
        "save_audio": {
            "name": "save_audio",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "wav_file": [
                    "bool",
                    "str",
                    "Iterable[str]",
                    "None",
                    "Optional[str]",
                    "int"
                ],
                "start": [
                    "int",
                    "str",
                    "None",
                    "Optional[int]",
                    "List[tuple[Union[bool,Any]]]",
                    "bool",
                    "List[Tuple[bool,Any]]"
                ],
                "stop": [
                    "int",
                    "str",
                    "None",
                    "Optional[int]",
                    "List[tuple[Union[bool,Any]]]",
                    "bool",
                    "List[Tuple[bool,Any]]"
                ],
                "text": [
                    "str"
                ],
                "language": [
                    "str",
                    "Optional[str]"
                ],
                "speaker": [
                    "str",
                    "Optional[str]",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "get_speaker_and_bio_num": {
            "name": "get_speaker_and_bio_num",
            "location": 111,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {
                "file": [
                    "str",
                    "pathlib.Path",
                    "ebl.files.application.file_repository.FileRepository"
                ]
            }
        }
    },
    "recording-validation-interface-development/librecval/extract_tsuutina.py": {
        "get_metadata_from_file": {
            "name": "get_metadata_from_file",
            "location": 123,
            "return": [
                "Dict[(str, Dict[(str, str)])]"
            ],
            "arguments": {}
        },
        "get_session_from_filename": {
            "name": "get_session_from_filename",
            "location": 151,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "Optional[Container[str]]",
                    "Container",
                    "None"
                ]
            }
        },
        "get_quality_from_eaf": {
            "name": "get_quality_from_eaf",
            "location": 159,
            "return": [
                "str"
            ],
            "arguments": {
                "eaf_file": [
                    "bool",
                    "str"
                ],
                "start": [
                    "bool",
                    "str"
                ]
            }
        },
        "Segment.signature": {
            "name": "signature",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Segment.compute_sha256hash": {
            "name": "compute_sha256hash",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TsuutinaRecordingExtractor.scan": {
            "name": "scan",
            "location": 73,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "sessions_dir": [
                    "str",
                    "Dict[str,str]",
                    "List[str]"
                ]
            }
        }
    },
    "recording-validation-interface-development/librecval/extract_tvpd.py": {
        "get_session_from_filename": {
            "name": "get_session_from_filename",
            "location": 121,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "Optional[Container[str]]",
                    "Container",
                    "None"
                ]
            }
        },
        "get_quality_from_notes": {
            "name": "get_quality_from_notes",
            "location": 130,
            "return": [
                "str"
            ],
            "arguments": {
                "notes": [
                    "str",
                    "int"
                ]
            }
        },
        "get_notes": {
            "name": "get_notes",
            "location": 140,
            "return": [
                "str"
            ],
            "arguments": {
                "_eaf": [
                    "int",
                    "str",
                    "List[Tuple[str, int]]"
                ],
                "all_tiers": [
                    "str",
                    "bool",
                    "Dict",
                    "List",
                    "datetime.date",
                    "Any",
                    "Optional[dict]"
                ],
                "start": [
                    "int",
                    "List[tuple[Union[str,int]]]",
                    "str",
                    "List[Tuple[str,int]]"
                ]
            }
        },
        "Segment.signature": {
            "name": "signature",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Segment.compute_sha256hash": {
            "name": "compute_sha256hash",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TvpdRecordingExtractor.scan": {
            "name": "scan",
            "location": 62,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "sessions_dir": [
                    "str"
                ]
            }
        }
    },
    "recording-validation-interface-development/librecval/import_recordings.py": {
        "initialize": {
            "name": "initialize",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "directory": [],
                "transcoded_recordings_path": [],
                "metadata_filename": [],
                "import_recording": [],
                "recording_format": [
                    "typing.Text"
                ],
                "logger": []
            }
        },
        "save_recording": {
            "name": "save_recording",
            "location": 89,
            "return": [],
            "arguments": {
                "dest": [],
                "info": [],
                "audio": [],
                "recording_format": [
                    "typing.Text"
                ],
                "logger": [
                    "None"
                ]
            }
        }
    },
    "recording-validation-interface-development/librecval/normalization.py": {
        "nfc": {
            "name": "nfc",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "utterance": []
            }
        },
        "normalize": {
            "name": "normalize",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "utterance": []
            }
        },
        "normalize_sro": {
            "name": "normalize_sro",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "utterance": []
            }
        },
        "normalize_phrase": {
            "name": "normalize_phrase",
            "location": 94,
            "return": [
                "str"
            ],
            "arguments": {
                "utterance": []
            }
        },
        "to_indexable_form": {
            "name": "to_indexable_form",
            "location": 104,
            "return": [
                "str"
            ],
            "arguments": {
                "text": []
            }
        }
    },
    "recording-validation-interface-development/librecval/recording_session.py": {
        "parse_metadata": {
            "name": "parse_metadata",
            "location": 359,
            "return": [
                "Dict",
                "str",
                "int"
            ],
            "arguments": {
                "metadata_file": [
                    "TextIO",
                    "str",
                    "bool"
                ],
                "logger": [
                    "List[str]",
                    "bool",
                    "str"
                ]
            }
        },
        "apply_or_none": {
            "name": "apply_or_none",
            "location": 396,
            "return": [
                "None",
                "Optional[int]",
                "Type",
                "List"
            ],
            "arguments": {
                "fn": [
                    "str",
                    "int",
                    "Type",
                    "Type[enum.Enum]",
                    "Type[T]"
                ],
                "match": [
                    "AnyStr",
                    "Optional[AnyStr]",
                    "bool",
                    "None",
                    "Dict",
                    "int",
                    "str",
                    "Optional[str]",
                    "Callable[...,Any]",
                    "Optional[Callable[...,Any]]",
                    "Optional[Dict]"
                ]
            }
        },
        "number_from": {
            "name": "number_from",
            "location": 406,
            "return": [
                "int"
            ],
            "arguments": {
                "mic_name": [
                    "str"
                ]
            }
        },
        "normalize_speaker_name": {
            "name": "normalize_speaker_name",
            "location": 416,
            "return": [
                "Type[Any]",
                "None",
                "Type",
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool",
                    "Dict[str,str]",
                    "float"
                ]
            }
        },
        "InvalidTimeOfDayError.__init__": {
            "name": "__init__",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "InvalidLocationError.__init__": {
            "name": "__init__",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "TimeOfDay.parse": {
            "name": "parse",
            "location": 126,
            "return": [
                "int",
                "bool",
                "float"
            ],
            "arguments": {
                "text": [
                    "str",
                    "bool"
                ]
            }
        },
        "Location.parse": {
            "name": "parse",
            "location": 144,
            "return": [
                "bool",
                "IO[str]",
                "Callable",
                "str"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Union[str]"
                ]
            }
        },
        "SessionID.year": {
            "name": "year",
            "location": 164,
            "return": [
                "str",
                "datetime.date",
                "Optional[str]",
                "int",
                "Sequence[str]",
                "datetime.datetime",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "SessionID.month": {
            "name": "month",
            "location": 168,
            "return": [
                "str",
                "datetime.date",
                "Optional[str]",
                "int",
                "Sequence[str]",
                "datetime.datetime",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "SessionID.day": {
            "name": "day",
            "location": 172,
            "return": [
                "str",
                "Optional[datetime.datetime]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SessionID.from_name": {
            "name": "from_name",
            "location": 176,
            "return": [
                "Optional[str]",
                "bool",
                "Optional[datetime.datetime]",
                "List[str]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "datetime.date",
                    "datetime.datetime"
                ],
                "directory_name": [
                    "str"
                ]
            }
        },
        "SessionID.as_filename": {
            "name": "as_filename",
            "location": 193,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SessionID.__str__": {
            "name": "__str__",
            "location": 202,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SessionID.parse_dirty": {
            "name": "parse_dirty",
            "location": 206,
            "return": [
                "datetime.datetime",
                "int",
                "str",
                "Optional[datetime.tzinfo]",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "datetime.datetime"
                ],
                "name": [
                    "str",
                    "float"
                ]
            }
        },
        "SessionMetadata.__init__": {
            "name": "__init__",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "Sequence[dict[str,str]]",
                    "Sequence[Dict[str,str]]",
                    "Set[str]",
                    "bool",
                    "Optional[bool]",
                    "None",
                    "datetime.tzinfo",
                    "datetime.datetime"
                ],
                "raw_name": [
                    "str",
                    "List[str]",
                    "Set[str]",
                    "Optional[str]",
                    "None"
                ],
                "rapid_words": [
                    "str",
                    "Sequence[dict[str,str]]",
                    "Sequence[Dict[str,str]]",
                    "Set[str]",
                    "bool",
                    "Optional[bool]",
                    "None",
                    "datetime.tzinfo",
                    "datetime.datetime"
                ],
                "mics": [
                    "str",
                    "Sequence[dict[str,str]]",
                    "Sequence[Dict[str,str]]",
                    "Set[str]",
                    "bool",
                    "Optional[bool]",
                    "None",
                    "datetime.tzinfo",
                    "datetime.datetime"
                ]
            }
        },
        "SessionMetadata.__getitem__": {
            "name": "__getitem__",
            "location": 248,
            "return": [
                "float",
                "Optional[bytes]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "Sequence[cirq.Qid]",
                    "str",
                    "MutableMapping",
                    "MutableMapping[str,Any]",
                    "bool",
                    "Dict",
                    "Dict[str,list[Any]]",
                    "Dict[str,List[Any]]",
                    "pathlib.Path"
                ]
            }
        },
        "SessionMetadata.__repr__": {
            "name": "__repr__",
            "location": 258,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SessionMetadata.parse": {
            "name": "parse",
            "location": 269,
            "return": [
                "SessionMetadata"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSessionMetadata]"
                ],
                "row": [
                    "str",
                    "Dict[str, Any]",
                    "type",
                    "bool"
                ],
                "session_name": [
                    "str",
                    "List[str]",
                    "None"
                ]
            }
        },
        "Overrides.__init__": {
            "name": "__init__",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "raw_name": [
                    "str",
                    "Dict[str,Any]",
                    "Set[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Overrides.effective_name": {
            "name": "effective_name",
            "location": 322,
            "return": [
                "str",
                "Tuple[bool, str]",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Overrides.should_skip": {
            "name": "should_skip",
            "location": 329,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Overrides.parse": {
            "name": "parse",
            "location": 333,
            "return": [
                "Overrides"
            ],
            "arguments": {
                "cls": [
                    "Type[_TOverrides]"
                ],
                "raw_name": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "override_text": [
                    "str",
                    "List"
                ]
            }
        }
    },
    "recording-validation-interface-development/librecval/transcode_recording.py": {
        "transcode_to_aac": {
            "name": "transcode_to_aac",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "recording": [
                    "str",
                    "pathlib.Path"
                ],
                "destination": [
                    "str"
                ]
            }
        }
    },
    "recording-validation-interface-development/librecval/utils.py": {
        "cd": {
            "name": "cd",
            "location": 15,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        }
    },
    "recording-validation-interface-development/librecval/__init__.py": {},
    "recording-validation-interface-development/librecval/legacy/cli_commands.py": {
        "delete_audio": {
            "name": "delete_audio",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "audio_dir": [
                    "pathlib.Path",
                    "str",
                    "Iterable[str]",
                    "Union[str, pathlib.Path]"
                ]
            }
        }
    },
    "recording-validation-interface-development/librecval/legacy/__init__.py": {},
    "recording-validation-interface-development/librecval/test_utils/strategies.py": {
        "session_ids": {
            "name": "session_ids",
            "location": 27,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "draw": [
                    "str",
                    "bool"
                ],
                "subsession": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "recording-validation-interface-development/librecval/test_utils/__init__.py": {},
    "recording-validation-interface-development/media_with_range/apps.py": {},
    "recording-validation-interface-development/media_with_range/urls.py": {
        "media_with_range": {
            "name": "media_with_range",
            "location": 12,
            "return": [
                "list"
            ],
            "arguments": {}
        }
    },
    "recording-validation-interface-development/media_with_range/views.py": {
        "serve": {
            "name": "serve",
            "location": 11,
            "return": [
                "bool",
                "Mapping[str, Any]",
                "Callable",
                "str",
                "Sequence[str]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "str",
                    "Optional[MutableMapping[Any, Any]]"
                ],
                "path": [
                    "str",
                    "pathlib.Path",
                    "Optional[str]",
                    "Dict[str, str]",
                    "bytes"
                ]
            }
        },
        "serve_file": {
            "name": "serve_file",
            "location": 19,
            "return": [
                "dict",
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "request": [
                    "str",
                    "Dict[str, str]",
                    "django.http.HttpRequest",
                    "bytes"
                ],
                "local_file_path": [
                    "str",
                    "Optional[str]",
                    "IO[bytes]"
                ]
            }
        }
    },
    "recording-validation-interface-development/media_with_range/__init__.py": {},
    "recording-validation-interface-development/recvalsite/save_secret_key.py": {
        "save_secret_key": {
            "name": "save_secret_key",
            "location": 5,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "key": [
                    "_T0@@"
                ]
            }
        },
        "_get_env_file_path": {
            "name": "_get_env_file_path",
            "location": 18,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {}
        }
    },
    "recording-validation-interface-development/recvalsite/settings.py": {},
    "recording-validation-interface-development/recvalsite/urls.py": {},
    "recording-validation-interface-development/recvalsite/wsgi.py": {},
    "recording-validation-interface-development/recvalsite/__init__.py": {},
    "recording-validation-interface-development/tests/conftest.py": {
        "_temporary_data_directory": {
            "name": "_temporary_data_directory",
            "location": 33,
            "return": [
                "typing.Generator[str]"
            ],
            "arguments": {}
        },
        "wave_file_path": {
            "name": "wave_file_path",
            "location": 44,
            "return": [
                "str",
                "List[str]",
                "bytes",
                "set"
            ],
            "arguments": {}
        },
        "metadata_csv_file": {
            "name": "metadata_csv_file",
            "location": 54,
            "return": [
                "typing.Generator[typing.IO]"
            ],
            "arguments": {}
        },
        "skip_metadata_csv_file": {
            "name": "skip_metadata_csv_file",
            "location": 64,
            "return": [
                "typing.Generator[typing.IO]"
            ],
            "arguments": {}
        },
        "rename_metadata_csv_file": {
            "name": "rename_metadata_csv_file",
            "location": 74,
            "return": [
                "typing.Generator[typing.IO]"
            ],
            "arguments": {}
        }
    },
    "recording-validation-interface-development/tests/test_extract_phrases.py": {
        "test_invalid_mic_id": {
            "name": "test_invalid_mic_id",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "recording-validation-interface-development/tests/test_metadata.py": {
        "test_parse_csv": {
            "name": "test_parse_csv",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "metadata_csv_file": []
            }
        },
        "test_metadata_with_SKIP_override": {
            "name": "test_metadata_with_SKIP_override",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "skip_metadata_csv_file": [
                    "str"
                ]
            }
        },
        "test_metadata_with_rename_override": {
            "name": "test_metadata_with_rename_override",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "rename_metadata_csv_file": [
                    "str"
                ]
            }
        }
    },
    "recording-validation-interface-development/tests/test_normalization.py": {
        "test_basic": {
            "name": "test_basic",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_nfc": {
            "name": "test_nfc",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_idempotence": {
            "name": "test_idempotence",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "s": []
            }
        },
        "test_index": {
            "name": "test_index",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "original": [],
                "expected": []
            }
        }
    },
    "recording-validation-interface-development/tests/test_recordings.py": {
        "test_can_transcode_wave_file": {
            "name": "test_can_transcode_wave_file",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "wave_file_path": [],
                "temporary_directory": []
            }
        },
        "test_can_transcode_audio_in_memory": {
            "name": "test_can_transcode_audio_in_memory",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "temporary_directory": []
            }
        },
        "test_can_recover_metadata": {
            "name": "test_can_recover_metadata",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "wave_file_path": [],
                "temporary_directory": []
            }
        },
        "temporary_directory": {
            "name": "temporary_directory",
            "location": 91,
            "return": [
                "typing.Generator[Path]"
            ],
            "arguments": {}
        }
    },
    "recording-validation-interface-development/tests/test_recording_session.py": {
        "test_does_not_parse_arbitrary_directory_name": {
            "name": "test_does_not_parse_arbitrary_directory_name",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_basic_parsing": {
            "name": "test_basic_parsing",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_trickier_parse": {
            "name": "test_trickier_parse",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_location_missing": {
            "name": "test_location_missing",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_time_of_day_missing": {
            "name": "test_time_of_day_missing",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_str_is_same_as_filename": {
            "name": "test_str_is_same_as_filename",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unspecified_subsession": {
            "name": "test_unspecified_subsession",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_dirty": {
            "name": "test_parse_dirty",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "recording-validation-interface-development/validation/admin.py": {},
    "recording-validation-interface-development/validation/apps.py": {},
    "recording-validation-interface-development/validation/baker_recipes.py": {
        "random_gender": {
            "name": "random_gender",
            "location": 41,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "random_timestamp": {
            "name": "random_timestamp",
            "location": 51,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "random_transcription": {
            "name": "random_transcription",
            "location": 58,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "recording-validation-interface-development/validation/crk_sort.py": {
        "custom_sort": {
            "name": "custom_sort",
            "location": 4,
            "return": [
                "Union[(list, _T0)]"
            ],
            "arguments": {
                "words": [
                    "_T0@@"
                ]
            }
        },
        "merge": {
            "name": "merge",
            "location": 16,
            "return": [
                "list"
            ],
            "arguments": {
                "left": [],
                "right": []
            }
        },
        "custom_less_than": {
            "name": "custom_less_than",
            "location": 32,
            "return": [
                "bool"
            ],
            "arguments": {
                "l": [],
                "r": []
            }
        }
    },
    "recording-validation-interface-development/validation/forms.py": {
        "Register.clean_username": {
            "name": "clean_username",
            "location": 81,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "EditSegment.__init__": {
            "name": "__init__",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlagSegment.__init__": {
            "name": "__init__",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecordNewPhrase.__init__": {
            "name": "__init__",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "recording-validation-interface-development/validation/helpers.py": {
        "get_edit_distance": {
            "name": "get_edit_distance",
            "location": 37,
            "return": [
                "Dict[(Any, Union[(float, int)])]"
            ],
            "arguments": {
                "word": []
            }
        },
        "has_vowel": {
            "name": "has_vowel",
            "location": 53,
            "return": [
                "bool"
            ],
            "arguments": {
                "c": []
            }
        },
        "get_differ": {
            "name": "get_differ",
            "location": 62,
            "return": [
                "Union[(float, int)]"
            ],
            "arguments": {
                "word": [],
                "suggestion": []
            }
        },
        "get_analog": {
            "name": "get_analog",
            "location": 146,
            "return": [
                "str"
            ],
            "arguments": {
                "char": []
            }
        },
        "get_translations_from_itwewina": {
            "name": "get_translations_from_itwewina",
            "location": 172,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "word": []
            }
        },
        "get_translations": {
            "name": "get_translations",
            "location": 183,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "results": []
            }
        },
        "extract_translations": {
            "name": "extract_translations",
            "location": 202,
            "return": [
                "Tuple[(List[str], List[str])]"
            ],
            "arguments": {
                "entry": []
            }
        },
        "get_analysis_from_fst": {
            "name": "get_analysis_from_fst",
            "location": 213,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "entry": []
            }
        },
        "get_distance_with_translations": {
            "name": "get_distance_with_translations",
            "location": 221,
            "return": [
                "Any"
            ],
            "arguments": {
                "word": []
            }
        },
        "normalize_img_name": {
            "name": "normalize_img_name",
            "location": 238,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "img_name": []
            }
        },
        "perfect_match": {
            "name": "perfect_match",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "word": [],
                "suggestions": []
            }
        },
        "exactly_one_analysis": {
            "name": "exactly_one_analysis",
            "location": 271,
            "return": [
                "bool"
            ],
            "arguments": {
                "suggestion": []
            }
        },
        "get_differ.diff_char_or_none": {
            "name": "diff_char_or_none",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "index": []
            }
        }
    },
    "recording-validation-interface-development/validation/jinja2.py": {
        "environment": {
            "name": "environment",
            "location": 11,
            "return": [
                "Dict[Any,dict[str,Any]]",
                "int",
                "bool",
                "List[str]",
                "Dict[str,Any]"
            ],
            "arguments": {}
        },
        "url": {
            "name": "url",
            "location": 28,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "List"
                ]
            }
        },
        "audio_url_filter": {
            "name": "audio_url_filter",
            "location": 35,
            "return": [
                "int",
                "Optional[str]",
                "django.http.HttpRequest",
                "str",
                "List[str]",
                "Mapping[str, str]",
                "bytes"
            ],
            "arguments": {
                "rec": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "recording-validation-interface-development/validation/models.py": {
        "choices_from_enum": {
            "name": "choices_from_enum",
            "location": 38,
            "return": [
                "dict"
            ],
            "arguments": {
                "enum_class": []
            }
        },
        "arguments_for_choices": {
            "name": "arguments_for_choices",
            "location": 49,
            "return": [
                "dict"
            ],
            "arguments": {
                "choices": []
            }
        },
        "generate_primary_key": {
            "name": "generate_primary_key",
            "location": 516,
            "return": [
                "None"
            ],
            "arguments": {
                "sender": [],
                "instance": []
            }
        },
        "enum_value_or_blank": {
            "name": "enum_value_or_blank",
            "location": 686,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "enum": []
            }
        },
        "parse_or_none": {
            "name": "parse_or_none",
            "location": 694,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "value": []
            }
        },
        "LanguageVariant.__str__": {
            "name": "__str__",
            "location": 88,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "SemanticClass.__str__": {
            "name": "__str__",
            "location": 143,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Phrase.recordings": {
            "name": "recordings",
            "location": 300,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Phrase.clean": {
            "name": "clean",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Phrase.save": {
            "name": "save",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Phrase.__str__": {
            "name": "__str__",
            "location": 324,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Speaker.language": {
            "name": "language",
            "location": 393,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Speaker.anonymous": {
            "name": "anonymous",
            "location": 405,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Speaker.clean": {
            "name": "clean",
            "location": 412,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Speaker.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 422,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Speaker.__str__": {
            "name": "__str__",
            "location": 432,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecordingSession.as_session_id": {
            "name": "as_session_id",
            "location": 466,
            "return": [
                "SessionID"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecordingSession.create_from": {
            "name": "create_from",
            "location": 478,
            "return": [
                "RecordingSession"
            ],
            "arguments": {
                "cls": [
                    "Type[_TRecordingSession]"
                ],
                "session_id": []
            }
        },
        "RecordingSession.objects_by_id": {
            "name": "objects_by_id",
            "location": 491,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "session_id": []
            }
        },
        "RecordingSession.get_or_create_by_session_id": {
            "name": "get_or_create_by_session_id",
            "location": 498,
            "return": [
                "Tuple[(Any, bool)]"
            ],
            "arguments": {
                "cls": [],
                "session_id": []
            }
        },
        "RecordingSession.__str__": {
            "name": "__str__",
            "location": 511,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Recording.__str__": {
            "name": "__str__",
            "location": 592,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Recording.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 595,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Recording.as_json": {
            "name": "as_json",
            "location": 603,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "Recording.get_path_to_audio_directory": {
            "name": "get_path_to_audio_directory",
            "location": 622,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {}
        }
    },
    "recording-validation-interface-development/validation/urls.py": {},
    "recording-validation-interface-development/validation/views.py": {
        "home": {
            "name": "home",
            "location": 83,
            "return": [
                "Any"
            ],
            "arguments": {
                "request": []
            }
        },
        "entries": {
            "name": "entries",
            "location": 108,
            "return": [
                "Any"
            ],
            "arguments": {
                "request": [],
                "language": []
            }
        },
        "search_phrases": {
            "name": "search_phrases",
            "location": 234,
            "return": [
                "Any"
            ],
            "arguments": {
                "request": [],
                "language": []
            }
        },
        "advanced_search": {
            "name": "advanced_search",
            "location": 289,
            "return": [
                "Any"
            ],
            "arguments": {
                "request": [],
                "language": []
            }
        },
        "advanced_search_results": {
            "name": "advanced_search_results",
            "location": 312,
            "return": [
                "Any"
            ],
            "arguments": {
                "request": [],
                "language": []
            }
        },
        "update_text": {
            "name": "update_text",
            "location": 448,
            "return": [
                "HttpResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "serve_recording": {
            "name": "serve_recording",
            "location": 455,
            "return": [
                "Any"
            ],
            "arguments": {
                "request": [],
                "recording_id": []
            }
        },
        "search_recordings": {
            "name": "search_recordings",
            "location": 481,
            "return": [
                "Any"
            ],
            "arguments": {
                "request": [],
                "query": []
            }
        },
        "bulk_search_recordings": {
            "name": "bulk_search_recordings",
            "location": 518,
            "return": [
                "Any"
            ],
            "arguments": {
                "request": [],
                "language": []
            }
        },
        "add_cors_headers": {
            "name": "add_cors_headers",
            "location": 562,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "response": [
                    "_T0@@"
                ]
            }
        },
        "segment_content_view": {
            "name": "segment_content_view",
            "location": 571,
            "return": [],
            "arguments": {
                "request": [],
                "language": [],
                "segment_id": []
            }
        },
        "register": {
            "name": "register",
            "location": 645,
            "return": [
                "HttpResponseRedirect"
            ],
            "arguments": {
                "request": []
            }
        },
        "view_issues": {
            "name": "view_issues",
            "location": 698,
            "return": [
                "Any"
            ],
            "arguments": {
                "request": [],
                "language": []
            }
        },
        "view_issue_detail": {
            "name": "view_issue_detail",
            "location": 718,
            "return": [
                "Any"
            ],
            "arguments": {
                "request": [],
                "language": [],
                "issue_id": []
            }
        },
        "close_issue": {
            "name": "close_issue",
            "location": 756,
            "return": [
                "HttpResponseRedirect"
            ],
            "arguments": {
                "request": [],
                "language": [],
                "issue_id": []
            }
        },
        "speaker_view": {
            "name": "speaker_view",
            "location": 788,
            "return": [
                "Any"
            ],
            "arguments": {
                "request": [],
                "language": [],
                "speaker_code": []
            }
        },
        "all_speakers": {
            "name": "all_speakers",
            "location": 814,
            "return": [
                "Any"
            ],
            "arguments": {
                "request": [],
                "language": []
            }
        },
        "record_translation_judgement": {
            "name": "record_translation_judgement",
            "location": 858,
            "return": [
                "HttpResponseBadRequest",
                "JsonResponse"
            ],
            "arguments": {
                "request": [],
                "phrase_id": []
            }
        },
        "record_audio_quality_judgement": {
            "name": "record_audio_quality_judgement",
            "location": 881,
            "return": [
                "HttpResponseBadRequest",
                "JsonResponse"
            ],
            "arguments": {
                "request": [],
                "recording_id": []
            }
        },
        "save_wrong_speaker_code": {
            "name": "save_wrong_speaker_code",
            "location": 896,
            "return": [
                "HttpResponse"
            ],
            "arguments": {
                "request": [],
                "language": [],
                "recording_id": []
            }
        },
        "save_wrong_word": {
            "name": "save_wrong_word",
            "location": 932,
            "return": [
                "HttpResponse"
            ],
            "arguments": {
                "request": [],
                "language": [],
                "recording_id": []
            }
        },
        "record_audio_is_best": {
            "name": "record_audio_is_best",
            "location": 968,
            "return": [
                "JsonResponse"
            ],
            "arguments": {
                "request": [],
                "recording_id": []
            }
        },
        "approve_user_phrase": {
            "name": "approve_user_phrase",
            "location": 990,
            "return": [
                "JsonResponse"
            ],
            "arguments": {
                "request": [],
                "phrase_id": []
            }
        },
        "record_audio": {
            "name": "record_audio",
            "location": 1005,
            "return": [
                "HttpResponseRedirect"
            ],
            "arguments": {
                "request": [],
                "language": []
            }
        },
        "record_audio_from_entry": {
            "name": "record_audio_from_entry",
            "location": 1112,
            "return": [],
            "arguments": {
                "request": [],
                "language": [],
                "phrase": []
            }
        },
        "set_language": {
            "name": "set_language",
            "location": 1186,
            "return": [
                "HttpResponse"
            ],
            "arguments": {
                "request": [],
                "language_code": []
            }
        },
        "throw_500": {
            "name": "throw_500",
            "location": 1198,
            "return": [
                "None"
            ],
            "arguments": {
                "request": []
            }
        },
        "handle_save_issue_with_recording": {
            "name": "handle_save_issue_with_recording",
            "location": 1205,
            "return": [
                "HttpResponseRedirect"
            ],
            "arguments": {
                "form": [],
                "issue": [],
                "request": [],
                "language": []
            }
        },
        "handle_save_issue_with_phrase": {
            "name": "handle_save_issue_with_phrase",
            "location": 1237,
            "return": [
                "HttpResponseRedirect"
            ],
            "arguments": {
                "form": [],
                "issue": [],
                "request": [],
                "language": []
            }
        },
        "encode_query_with_page": {
            "name": "encode_query_with_page",
            "location": 1262,
            "return": [
                "str"
            ],
            "arguments": {
                "query": [],
                "page": []
            }
        },
        "user_is_linguist": {
            "name": "user_is_linguist",
            "location": 1269,
            "return": [
                "Any"
            ],
            "arguments": {
                "user": [],
                "lang": []
            }
        },
        "user_is_expert": {
            "name": "user_is_expert",
            "location": 1276,
            "return": [
                "Any"
            ],
            "arguments": {
                "user": [],
                "lang": []
            }
        },
        "user_has_alexis_permissions": {
            "name": "user_has_alexis_permissions",
            "location": 1283,
            "return": [
                "Any"
            ],
            "arguments": {
                "user": []
            }
        },
        "prep_phrase_data": {
            "name": "prep_phrase_data",
            "location": 1287,
            "return": [
                "Tuple[(Dict[(Any, list)], Dict[(Any, validation.forms.FlagSegment)])]"
            ],
            "arguments": {
                "request": [],
                "phrases": [],
                "lang": []
            }
        },
        "save_issue": {
            "name": "save_issue",
            "location": 1307,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [],
                "user": []
            }
        },
        "exclude_known_bad_recordings": {
            "name": "exclude_known_bad_recordings",
            "location": 1331,
            "return": [
                "Any"
            ],
            "arguments": {
                "recordings": []
            }
        },
        "create_new_rec_id": {
            "name": "create_new_rec_id",
            "location": 1349,
            "return": [
                "str"
            ],
            "arguments": {
                "phrase": [],
                "speaker": []
            }
        },
        "save_metadata_to_file": {
            "name": "save_metadata_to_file",
            "location": 1365,
            "return": [
                "None"
            ],
            "arguments": {
                "rec_id": [],
                "user": [],
                "transcription": [],
                "translation": [],
                "language": []
            }
        },
        "clean_text": {
            "name": "clean_text",
            "location": 1388,
            "return": [
                "Any"
            ],
            "arguments": {
                "text": []
            }
        },
        "get_language_object": {
            "name": "get_language_object",
            "location": 1395,
            "return": [
                "Any"
            ],
            "arguments": {
                "language": []
            }
        },
        "replace_circumflexes": {
            "name": "replace_circumflexes",
            "location": 1399,
            "return": [
                "Any"
            ],
            "arguments": {
                "term": []
            }
        }
    },
    "recording-validation-interface-development/validation/__init__.py": {},
    "recording-validation-interface-development/validation/management/commands/addallsemantics.py": {
        "Command.handle": {
            "name": "handle",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "recording-validation-interface-development/validation/management/commands/aggregatesemanticclasses.py": {
        "Command.handle": {
            "name": "handle",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "recording-validation-interface-development/validation/management/commands/autoval.py": {
        "Command.handle": {
            "name": "handle",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "recording-validation-interface-development/validation/management/commands/ensuretestdb.py": {
        "import_test_phrases": {
            "name": "import_test_phrases",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "create_test_user": {
            "name": "create_test_user",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "username": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "group_name": [
                    "str"
                ]
            }
        },
        "create_test_users": {
            "name": "create_test_users",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Command.handle": {
            "name": "handle",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "recording-validation-interface-development/validation/management/commands/findhypernyms.py": {
        "Command.handle": {
            "name": "handle",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "recording-validation-interface-development/validation/management/commands/findsemanticclass.py": {
        "Command.handle": {
            "name": "handle",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "recording-validation-interface-development/validation/management/commands/fixautorecs.py": {
        "Command.handle": {
            "name": "handle",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "recording-validation-interface-development/validation/management/commands/fixmissingsession.py": {
        "Command.handle": {
            "name": "handle",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "recording-validation-interface-development/validation/management/commands/fixsemantics.py": {
        "Command.handle": {
            "name": "handle",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "recording-validation-interface-development/validation/management/commands/importautorecs.py": {
        "save_recording": {
            "name": "save_recording",
            "location": 108,
            "return": [
                "int",
                "waterbutler.core.provider.BaseProvider",
                "str",
                "pathlib.Path",
                "List[str]"
            ],
            "arguments": {
                "dest": [
                    "int",
                    "str",
                    "Optional[str]",
                    "Mapping"
                ],
                "info": [
                    "str",
                    "Union[str, BinaryIO]",
                    "Optional[Any]"
                ],
                "audio": [
                    "str"
                ],
                "recording_format": [
                    "Text",
                    "str",
                    "int",
                    "Optional[str]",
                    "Mapping"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command._handle_store_django": {
            "name": "_handle_store_django",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sessions_dir": [
                    "str",
                    "Optional[List[str]]",
                    "Dict",
                    "List[str]",
                    "pathlib.Path",
                    "None"
                ],
                "logger": [
                    "str",
                    "Type",
                    "Literal",
                    "Type[T]"
                ]
            }
        }
    },
    "recording-validation-interface-development/validation/management/commands/importi3.py": {
        "save_recording": {
            "name": "save_recording",
            "location": 120,
            "return": [
                "Any"
            ],
            "arguments": {
                "dest": [],
                "info": [],
                "audio": [],
                "recording_format": [
                    "typing.Text"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command._handle_store_django": {
            "name": "_handle_store_django",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sessions_dir": [],
                "logger": []
            }
        }
    },
    "recording-validation-interface-development/validation/management/commands/importjeanbio.py": {
        "Command.handle": {
            "name": "handle",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "recording-validation-interface-development/validation/management/commands/importokimasis.py": {
        "save_recording": {
            "name": "save_recording",
            "location": 105,
            "return": [
                "Any"
            ],
            "arguments": {
                "dest": [],
                "info": [],
                "audio": [],
                "recording_format": [
                    "typing.Text"
                ]
            }
        },
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": []
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command._handle_store_django": {
            "name": "_handle_store_django",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sessions_dir": [],
                "logger": []
            }
        }
    },
    "recording-validation-interface-development/validation/management/commands/importpfn.py": {
        "save_recording": {
            "name": "save_recording",
            "location": 106,
            "return": [
                "int",
                "waterbutler.core.provider.BaseProvider",
                "str",
                "pathlib.Path",
                "List[str]"
            ],
            "arguments": {
                "dest": [
                    "int",
                    "str",
                    "Optional[str]",
                    "Mapping"
                ],
                "info": [
                    "str",
                    "Union[str, BinaryIO]",
                    "Optional[Any]"
                ],
                "audio": [
                    "str"
                ],
                "recording_format": [
                    "Text",
                    "str",
                    "int",
                    "Optional[str]",
                    "Mapping"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command._handle_store_django": {
            "name": "_handle_store_django",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sessions_dir": [
                    "str",
                    "Optional[List[str]]",
                    "Dict",
                    "List[str]",
                    "pathlib.Path",
                    "None"
                ],
                "logger": [
                    "str",
                    "Type",
                    "Literal",
                    "Type[T]"
                ]
            }
        }
    },
    "recording-validation-interface-development/validation/management/commands/importrecordings.py": {
        "django_recording_importer": {
            "name": "django_recording_importer",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "info": [],
                "recording_path": [],
                "logger": []
            }
        },
        "null_recording_importer": {
            "name": "null_recording_importer",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "info": [],
                "recording_path": []
            }
        },
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": []
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command._handle_store_wav": {
            "name": "_handle_store_wav",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sessions_dir": [],
                "audio_dir": [],
                "wav": [
                    "bool"
                ]
            }
        },
        "Command._handle_store_django": {
            "name": "_handle_store_django",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sessions_dir": []
            }
        }
    },
    "recording-validation-interface-development/validation/management/commands/importspeakerbios.py": {
        "Command.handle": {
            "name": "handle",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "recording-validation-interface-development/validation/management/commands/importtsuutina.py": {
        "save_recording": {
            "name": "save_recording",
            "location": 103,
            "return": [
                "int",
                "waterbutler.core.provider.BaseProvider",
                "str",
                "pathlib.Path",
                "List[str]"
            ],
            "arguments": {
                "dest": [
                    "int",
                    "str",
                    "Optional[str]",
                    "Mapping"
                ],
                "info": [
                    "str",
                    "Union[str, BinaryIO]",
                    "Optional[Any]"
                ],
                "audio": [
                    "str"
                ],
                "recording_format": [
                    "Text",
                    "str",
                    "int",
                    "Optional[str]",
                    "Mapping"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command._handle_store_django": {
            "name": "_handle_store_django",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sessions_dir": [
                    "str",
                    "Optional[List[str]]",
                    "Dict",
                    "List[str]",
                    "pathlib.Path",
                    "None"
                ],
                "logger": [
                    "str",
                    "Type",
                    "Literal",
                    "Type[T]"
                ]
            }
        }
    },
    "recording-validation-interface-development/validation/management/commands/importtvpd.py": {
        "save_recording": {
            "name": "save_recording",
            "location": 107,
            "return": [
                "int",
                "waterbutler.core.provider.BaseProvider",
                "str",
                "pathlib.Path",
                "List[str]"
            ],
            "arguments": {
                "dest": [
                    "int",
                    "str",
                    "Optional[str]",
                    "Mapping"
                ],
                "info": [
                    "str",
                    "Union[str, BinaryIO]",
                    "Optional[Any]"
                ],
                "audio": [
                    "str"
                ],
                "recording_format": [
                    "Text",
                    "str",
                    "int",
                    "Optional[str]",
                    "Mapping"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command._handle_store_django": {
            "name": "_handle_store_django",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sessions_dir": [
                    "str",
                    "Optional[List[str]]",
                    "Dict",
                    "List[str]",
                    "pathlib.Path",
                    "None"
                ],
                "logger": [
                    "str",
                    "Type",
                    "Literal",
                    "Type[T]"
                ]
            }
        }
    },
    "recording-validation-interface-development/validation/management/commands/reindexphrases.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "bool",
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "recording-validation-interface-development/validation/management/commands/removeaudioclick.py": {
        "Command.handle": {
            "name": "handle",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "recording-validation-interface-development/validation/management/commands/srssemantics.py": {
        "Command.handle": {
            "name": "handle",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "recording-validation-interface-development/validation/management/commands/writetranscriptions.py": {
        "create_persephone_transcription": {
            "name": "create_persephone_transcription",
            "location": 146,
            "return": [
                "str"
            ],
            "arguments": {
                "transcription": []
            }
        },
        "create_s4a_transcription": {
            "name": "create_s4a_transcription",
            "location": 165,
            "return": [
                "Any"
            ],
            "arguments": {
                "transcription": []
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.write_transcriptions": {
            "name": "write_transcriptions",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "audio_dir": [],
                "mode": []
            }
        },
        "Command.copy_audio_file": {
            "name": "copy_audio_file",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "training_dir": [],
                "audio_file": [],
                "speaker": []
            }
        },
        "Command.make_directories": {
            "name": "make_directories",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "training_dir": [],
                "speaker": []
            }
        }
    },
    "recording-validation-interface-development/validation/migrations/0001_initial.py": {},
    "recording-validation-interface-development/validation/migrations/0002_auto_20210319_1640.py": {},
    "recording-validation-interface-development/validation/migrations/0002_auto_20210323_1627.py": {},
    "recording-validation-interface-development/validation/migrations/0003_merge_20210326_1021.py": {},
    "recording-validation-interface-development/validation/migrations/0004_auto_20210326_1039.py": {},
    "recording-validation-interface-development/validation/migrations/0005_auto_20210407_1026.py": {},
    "recording-validation-interface-development/validation/migrations/0006_auto_20210414_1452.py": {},
    "recording-validation-interface-development/validation/migrations/0007_wrong_word_fields.py": {},
    "recording-validation-interface-development/validation/migrations/0008_remove_booleans_from_issue.py": {},
    "recording-validation-interface-development/validation/migrations/0009_add_speaker_bio.py": {},
    "recording-validation-interface-development/validation/migrations/0010_issue_status.py": {},
    "recording-validation-interface-development/validation/migrations/0011_user_recording_support.py": {},
    "recording-validation-interface-development/validation/migrations/0012_increase_bio_length.py": {},
    "recording-validation-interface-development/validation/migrations/0013_make_user_nullable_on_speaker.py": {},
    "recording-validation-interface-development/validation/migrations/0014_speaker_image.py": {},
    "recording-validation-interface-development/validation/migrations/0015_remove_speaker_image.py": {},
    "recording-validation-interface-development/validation/migrations/0016_language_variants.py": {},
    "recording-validation-interface-development/validation/migrations/0017_add_tvpd.py": {},
    "recording-validation-interface-development/validation/migrations/0018_add_pfn.py": {},
    "recording-validation-interface-development/validation/migrations/0019_add_auto_source.py": {},
    "recording-validation-interface-development/validation/migrations/0020_languagevariant_language_family.py": {},
    "recording-validation-interface-development/validation/migrations/0021_add_is_best.py": {},
    "recording-validation-interface-development/validation/migrations/0022_add_endonym.py": {},
    "recording-validation-interface-development/validation/migrations/0023_was_user_submitted.py": {},
    "recording-validation-interface-development/validation/migrations/0024_semantic_class.py": {},
    "recording-validation-interface-development/validation/migrations/0025_phrase_has_semantic_class.py": {},
    "recording-validation-interface-development/validation/migrations/0026_add_i3.py": {},
    "recording-validation-interface-development/validation/migrations/0027_add_comment.py": {},
    "recording-validation-interface-development/validation/migrations/0028_was_user_submitted.py": {},
    "recording-validation-interface-development/validation/migrations/0029_hypernym_hyponym.py": {},
    "recording-validation-interface-development/validation/migrations/__init__.py": {},
    "recording-validation-interface-development/validation/tests/test_bulk_recordings_search.py": {
        "test_search_bulk_recordings": {
            "name": "test_search_bulk_recordings",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "query": [],
                "speaker_code": [],
                "insert_test_data": []
            }
        },
        "test_search_multiple_recordings": {
            "name": "test_search_multiple_recordings",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "insert_test_data": []
            }
        },
        "test_search_recordings_not_found": {
            "name": "test_search_recordings_not_found",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "insert_test_data": []
            }
        },
        "test_search_language_does_not_exist": {
            "name": "test_search_language_does_not_exist",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "insert_test_data": []
            }
        },
        "test_search_recordings_in_wrong_language": {
            "name": "test_search_recordings_in_wrong_language",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "insert_test_data": []
            }
        },
        "test_search_recordings_with_macrons": {
            "name": "test_search_recordings_with_macrons",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "insert_test_data": []
            }
        },
        "insert_test_data": {
            "name": "insert_test_data",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "recording-validation-interface-development/validation/tests/test_misc_views.py": {
        "test_robots_txt_is_served": {
            "name": "test_robots_txt_is_served",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        }
    },
    "recording-validation-interface-development/validation/tests/test_models.py": {
        "test_recording_session": {
            "name": "test_recording_session",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_recording_session_model_from_session_id": {
            "name": "test_recording_session_model_from_session_id",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "session_id": []
            }
        },
        "test_inserting_duplicate_session": {
            "name": "test_inserting_duplicate_session",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "session_id": []
            }
        },
        "test_fetching_by_session_id": {
            "name": "test_fetching_by_session_id",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "session_id": []
            }
        },
        "test_get_or_create_recording_session": {
            "name": "test_get_or_create_recording_session",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "session_id": []
            }
        },
        "test_speaker": {
            "name": "test_speaker",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_speaker_validation": {
            "name": "test_speaker_validation",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_phrase": {
            "name": "test_phrase",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_phrase_transcription_normalization": {
            "name": "test_phrase_transcription_normalization",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "dirty_transcription": []
            }
        },
        "test_phrase_transcription_normalization_hyphenation": {
            "name": "test_phrase_transcription_normalization_hyphenation",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "dirty_transcription": [],
                "expected": []
            }
        },
        "test_phrase_transcription_normalize_\u00ea": {
            "name": "test_phrase_transcription_normalize_\u00ea",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_phrase_has_history": {
            "name": "test_phrase_has_history",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_recording": {
            "name": "test_recording",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_phrase_recordings": {
            "name": "test_phrase_recordings",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "recording-validation-interface-development/validation/tests/test_recordings_search.py": {
        "test_search_recordings": {
            "name": "test_search_recordings",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "bake_recording": []
            }
        },
        "test_search_multiple_recordings": {
            "name": "test_search_multiple_recordings",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "bake_recording": []
            }
        },
        "test_search_recording_not_found": {
            "name": "test_search_recording_not_found",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "bake_recording": []
            }
        },
        "test_search_max_queries": {
            "name": "test_search_max_queries",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "bake_recording": []
            }
        },
        "test_search_unique_word_forms": {
            "name": "test_search_unique_word_forms",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "bake_recording": []
            }
        },
        "test_search_fuzzy_match": {
            "name": "test_search_fuzzy_match",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "bake_recording": []
            }
        },
        "test_does_not_return_bad_recordings": {
            "name": "test_does_not_return_bad_recordings",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "bake_recording": []
            }
        },
        "bake_recording": {
            "name": "bake_recording",
            "location": 284,
            "return": [],
            "arguments": {
                "tmpdir": [],
                "settings": []
            }
        },
        "bake_recording.bake": {
            "name": "bake",
            "location": 305,
            "return": [],
            "arguments": {}
        }
    },
    "recording-validation-interface-development/validation/tests/test_recordings_serve.py": {
        "test_serve_recording": {
            "name": "test_serve_recording",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "server.models.User"
                ],
                "exported_recording": []
            }
        },
        "test_serve_recording_partial_content": {
            "name": "test_serve_recording_partial_content",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "server.models.User"
                ],
                "exported_recording": []
            }
        },
        "test_serve_recording_partial_content_open_range": {
            "name": "test_serve_recording_partial_content_open_range",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "server.models.User"
                ],
                "exported_recording": []
            }
        },
        "exported_recording": {
            "name": "exported_recording",
            "location": 124,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "settings": [
                    "str",
                    "pathlib.Path",
                    "BinaryIO",
                    "Dict[str,Any]",
                    "int"
                ]
            }
        }
    }
}
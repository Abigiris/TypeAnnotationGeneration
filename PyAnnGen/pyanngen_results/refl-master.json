{
    "refl-master/setup.py": {},
    "refl-master/src/commands.py": {
        "range_builder": {
            "name": "range_builder",
            "location": 53,
            "return": [
                "Range"
            ],
            "arguments": {
                "f": [
                    "str"
                ],
                "l1": [
                    "int",
                    "Dict"
                ],
                "c1": [
                    "int",
                    "Dict"
                ],
                "l2": [
                    "int",
                    "Dict"
                ],
                "c2": [
                    "int",
                    "Dict"
                ]
            }
        },
        "range_parser_validator": {
            "name": "range_parser_validator",
            "location": 65,
            "return": [
                "bool"
            ],
            "arguments": {
                "r": [
                    "str"
                ]
            }
        },
        "Position.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "srcFile": [
                    "str",
                    "Callable[[int,int],None]",
                    "Callable[int,int,None]",
                    "List[Tuple[str,str,str]]",
                    "List[tuple[Union[str,str,str]]]"
                ],
                "position": [
                    "int",
                    "Set[str]",
                    "str",
                    "float",
                    "Optional[bool]",
                    "None"
                ],
                "line": [
                    "str",
                    "List[str]",
                    "int",
                    "Optional[int]",
                    "Optional[float]",
                    "None",
                    "float"
                ],
                "column": [
                    "int",
                    "Set[str]",
                    "str",
                    "float",
                    "Optional[bool]",
                    "None"
                ]
            }
        },
        "Position.__call__": {
            "name": "__call__",
            "location": 29,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Interval.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int",
                    "str"
                ],
                "end": [
                    "int",
                    "str"
                ]
            }
        },
        "Interval.__call__": {
            "name": "__call__",
            "location": 38,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Range.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "intervals": [
                    "List",
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Range.__call__": {
            "name": "__call__",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Commands.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "srcFile": [
                    "str"
                ]
            }
        },
        "Commands.__get__": {
            "name": "__get__",
            "location": 79,
            "return": [
                "str",
                "Dict",
                "int",
                "List",
                "List[str]",
                "Dict[str,Union[Any,Any]]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str",
                    "Dict",
                    "Callable",
                    "bytes",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "Commands.wrap": {
            "name": "wrap",
            "location": 85,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str",
                    "List[str]",
                    "allennlp.common.util.JsonDict"
                ]
            }
        },
        "Commands.wrap_global": {
            "name": "wrap_global",
            "location": 89,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str",
                    "List[str]",
                    "allennlp.common.util.JsonDict"
                ]
            }
        },
        "Commands.compile": {
            "name": "compile",
            "location": 93,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "backend": [
                    "IO",
                    "str",
                    "IO[str]",
                    "os.PathLike"
                ],
                "cmds": [
                    "str",
                    "List[str]",
                    "os.PathLike"
                ]
            }
        },
        "Commands.load": {
            "name": "load",
            "location": 105,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "cmds": [
                    "str",
                    "List[str]",
                    "int",
                    "pypi2nix.path.Path"
                ]
            }
        },
        "Commands.constraints": {
            "name": "constraints",
            "location": 112,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Commands.metas": {
            "name": "metas",
            "location": 118,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Commands.show_module_contents_toplevel": {
            "name": "show_module_contents_toplevel",
            "location": 124,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "rewrite": [
                    "Text",
                    "str",
                    "List[str]"
                ],
                "expr": [
                    "Text",
                    "str",
                    "Union[str,List[Any]]",
                    "Optional[BaseException]"
                ]
            }
        },
        "Commands.search_about_toplevel": {
            "name": "search_about_toplevel",
            "location": 133,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "rewrite": [
                    "Text",
                    "str",
                    "List[str]"
                ],
                "expr": [
                    "Text",
                    "str",
                    "Union[str,List[Any]]",
                    "Optional[BaseException]"
                ]
            }
        },
        "Commands.solveAll": {
            "name": "solveAll",
            "location": 142,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "rewrite": [
                    "Text",
                    "str",
                    "List[str]"
                ]
            }
        },
        "Commands.solveOne": {
            "name": "solveOne",
            "location": 151,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "rewrite": [
                    "Text",
                    "str",
                    "int"
                ],
                "interactionId": [
                    "int",
                    "str",
                    "Pattern[str]"
                ],
                "where": [
                    "Range",
                    "str",
                    "int",
                    "Pattern[str]"
                ],
                "expr": [
                    "Text",
                    "str",
                    "int",
                    "Pattern[str]"
                ]
            }
        },
        "Commands.autoAll": {
            "name": "autoAll",
            "location": 163,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Commands.autoOne": {
            "name": "autoOne",
            "location": 169,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "interactionId": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "where": [
                    "Range",
                    "int",
                    "str",
                    "List[str]"
                ],
                "expr": [
                    "Text",
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "Commands.auto": {
            "name": "auto",
            "location": 176,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "interactionId": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "where": [
                    "Range",
                    "int",
                    "str",
                    "List[str]"
                ],
                "expr": [
                    "Text",
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "Commands.infer_toplevel": {
            "name": "infer_toplevel",
            "location": 183,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "rewrite": [
                    "Text",
                    "str",
                    "List[str]"
                ],
                "expr": [
                    "Text",
                    "str",
                    "Union[str,List[Any]]",
                    "Optional[BaseException]"
                ]
            }
        },
        "Commands.compute_toplevel": {
            "name": "compute_toplevel",
            "location": 192,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "computeMode": [
                    "Text",
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "expr": [
                    "Text",
                    "str",
                    "Type",
                    "List"
                ]
            }
        },
        "Commands.load_highlighting_info": {
            "name": "load_highlighting_info",
            "location": 201,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Commands.tokenHighlighting": {
            "name": "tokenHighlighting",
            "location": 207,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "remove": [
                    "str",
                    "Iterable[str]",
                    "Union[str,bytes]",
                    "bytes"
                ]
            }
        },
        "Commands.highlight": {
            "name": "highlight",
            "location": 216,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "interactionId": [
                    "int",
                    "str"
                ],
                "where": [
                    "Range",
                    "int",
                    "str"
                ]
            }
        },
        "Commands.give": {
            "name": "give",
            "location": 223,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "force": [
                    "str"
                ],
                "interactionId": [
                    "int",
                    "str",
                    "Dict"
                ],
                "where": [
                    "Range",
                    "str",
                    "int",
                    "Dict"
                ],
                "expr": [
                    "str",
                    "Text"
                ]
            }
        },
        "Commands.refine": {
            "name": "refine",
            "location": 233,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "interactionId": [
                    "int",
                    "str",
                    "float"
                ],
                "where": [
                    "Range",
                    "int",
                    "str",
                    "float"
                ],
                "expr": [
                    "str",
                    "Text"
                ]
            }
        },
        "Commands.intro": {
            "name": "intro",
            "location": 241,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "whether": [
                    "str",
                    "int",
                    "Dict"
                ],
                "interactionId": [
                    "int",
                    "str",
                    "Dict"
                ],
                "where": [
                    "Range",
                    "str",
                    "int",
                    "Dict"
                ],
                "expr": [
                    "str",
                    "Text"
                ]
            }
        },
        "Commands.refine_or_intro": {
            "name": "refine_or_intro",
            "location": 252,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "whether": [
                    "str",
                    "int",
                    "Dict"
                ],
                "interactionId": [
                    "int",
                    "str",
                    "Dict"
                ],
                "where": [
                    "Range",
                    "str",
                    "int",
                    "Dict"
                ],
                "expr": [
                    "str",
                    "Text"
                ]
            }
        },
        "Commands.context": {
            "name": "context",
            "location": 263,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "rewrite": [
                    "Text",
                    "str",
                    "int"
                ],
                "interactionId": [
                    "str",
                    "int"
                ],
                "where": [
                    "str",
                    "Range"
                ],
                "expr": [
                    "str",
                    "Text"
                ]
            }
        },
        "Commands.helper_function": {
            "name": "helper_function",
            "location": 273,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "rewrite": [
                    "Text",
                    "str",
                    "int"
                ],
                "interactionId": [
                    "str",
                    "int"
                ],
                "where": [
                    "str",
                    "Range"
                ],
                "expr": [
                    "str",
                    "Text"
                ]
            }
        },
        "Commands.infer": {
            "name": "infer",
            "location": 286,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "rewrite": [
                    "Text",
                    "str",
                    "int"
                ],
                "interactionId": [
                    "str",
                    "int"
                ],
                "where": [
                    "str",
                    "Range"
                ],
                "expr": [
                    "str",
                    "Text"
                ]
            }
        },
        "Commands.goal_type": {
            "name": "goal_type",
            "location": 296,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "rewrite": [
                    "Text",
                    "str",
                    "int"
                ],
                "interactionId": [
                    "str",
                    "int"
                ],
                "where": [
                    "str",
                    "Range"
                ],
                "expr": [
                    "str",
                    "Text"
                ]
            }
        },
        "Commands.elaborate_give": {
            "name": "elaborate_give",
            "location": 306,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "rewrite": [
                    "Text",
                    "str",
                    "int"
                ],
                "interactionId": [
                    "str",
                    "int"
                ],
                "where": [
                    "str",
                    "Range"
                ],
                "expr": [
                    "str",
                    "Text"
                ]
            }
        },
        "Commands.goal_type_context": {
            "name": "goal_type_context",
            "location": 319,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "rewrite": [
                    "Text",
                    "str",
                    "int"
                ],
                "interactionId": [
                    "str",
                    "int"
                ],
                "where": [
                    "str",
                    "Range"
                ],
                "expr": [
                    "str",
                    "Text"
                ]
            }
        },
        "Commands.goal_type_context_infer": {
            "name": "goal_type_context_infer",
            "location": 332,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "rewrite": [
                    "Text",
                    "str",
                    "int"
                ],
                "interactionId": [
                    "str",
                    "int"
                ],
                "where": [
                    "str",
                    "Range"
                ],
                "expr": [
                    "str",
                    "Text"
                ]
            }
        },
        "Commands.goal_type_context_check": {
            "name": "goal_type_context_check",
            "location": 345,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "rewrite": [
                    "Text",
                    "str",
                    "int"
                ],
                "interactionId": [
                    "str",
                    "int"
                ],
                "where": [
                    "str",
                    "Range"
                ],
                "expr": [
                    "str",
                    "Text"
                ]
            }
        },
        "Commands.show_module_contents": {
            "name": "show_module_contents",
            "location": 358,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "rewrite": [
                    "Text",
                    "str",
                    "Optional[str]"
                ],
                "interactionId": [
                    "str",
                    "int"
                ],
                "where": [
                    "str",
                    "Range"
                ],
                "expr": [
                    "str",
                    "Text"
                ]
            }
        },
        "Commands.make_case": {
            "name": "make_case",
            "location": 371,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "interactionId": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "where": [
                    "Range",
                    "str",
                    "List[str]",
                    "int"
                ],
                "expr": [
                    "str",
                    "Text"
                ]
            }
        },
        "Commands.why_in_scope": {
            "name": "why_in_scope",
            "location": 379,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "interactionId": [
                    "int",
                    "str",
                    "List[str]",
                    "Optional[int]"
                ],
                "where": [
                    "Range",
                    "str",
                    "int",
                    "List[str]",
                    "Optional[int]"
                ],
                "expr": [
                    "str",
                    "Text"
                ]
            }
        },
        "Commands.compute": {
            "name": "compute",
            "location": 387,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "computeMode": [
                    "Text",
                    "str",
                    "int",
                    "float"
                ],
                "interactionId": [
                    "int",
                    "str"
                ],
                "where": [
                    "Range",
                    "int",
                    "str"
                ],
                "expr": [
                    "Text",
                    "int",
                    "str"
                ]
            }
        },
        "Commands.why_in_scope_toplevel": {
            "name": "why_in_scope_toplevel",
            "location": 400,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "Text",
                    "str",
                    "int",
                    "List[int]"
                ]
            }
        },
        "Commands.show_version": {
            "name": "show_version",
            "location": 407,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Commands.abort": {
            "name": "abort",
            "location": 413,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "refl-master/src/interpret.py": {
        "Repl.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [
                    "None"
                ]
            }
        },
        "Repl.get_local_files": {
            "name": "get_local_files",
            "location": 48,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Repl.prompt": {
            "name": "prompt",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Repl.run": {
            "name": "run",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "history": [
                    "typing.Text"
                ]
            }
        }
    },
    "refl-master/src/refl.py": {},
    "refl-master/src/__init__.py": {},
    "refl-master/src/args/agda.py": {
        "agda": {
            "name": "agda",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "cli_process_commands": {
            "name": "cli_process_commands",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "processors": []
            }
        },
        "compile_cmd": {
            "name": "compile_cmd",
            "location": 66,
            "return": [
                "tuple[typing.Union[typing.Text,dict[typing.Text, None]]]"
            ],
            "arguments": {
                "file": [],
                "backend": [],
                "cmds": []
            }
        },
        "load_cmd": {
            "name": "load_cmd",
            "location": 76,
            "return": [
                "tuple[typing.Union[typing.Text,dict[typing.Text, None]]]"
            ],
            "arguments": {
                "file": [],
                "cmds": []
            }
        },
        "constraints_cmd": {
            "name": "constraints_cmd",
            "location": 85,
            "return": [
                "tuple[typing.Union[typing.Text,dict[typing.Text, ]]]"
            ],
            "arguments": {
                "file": []
            }
        },
        "metas_cmd": {
            "name": "metas_cmd",
            "location": 93,
            "return": [
                "tuple[typing.Union[typing.Text,dict[typing.Text, ]]]"
            ],
            "arguments": {}
        },
        "show_module_contents_toplevel_cmd": {
            "name": "show_module_contents_toplevel_cmd",
            "location": 103,
            "return": [
                "tuple[typing.Union[typing.Text,dict[typing.Text, typing.Text]]]"
            ],
            "arguments": {
                "file": [],
                "rewrite": [
                    "typing.Text"
                ],
                "expr": [
                    "typing.Text"
                ]
            }
        },
        "search_about_toplevel_cmd": {
            "name": "search_about_toplevel_cmd",
            "location": 113,
            "return": [
                "tuple[typing.Union[typing.Text,dict[typing.Text, typing.Text]]]"
            ],
            "arguments": {
                "file": [],
                "rewrite": [
                    "typing.Text"
                ],
                "expr": [
                    "typing.Text"
                ]
            }
        },
        "solveAll_cmd": {
            "name": "solveAll_cmd",
            "location": 123,
            "return": [
                "tuple[typing.Union[typing.Text,dict[typing.Text, typing.Text]]]"
            ],
            "arguments": {
                "file": [],
                "rewrite": [
                    "typing.Text"
                ],
                "expr": [
                    "typing.Text"
                ]
            }
        },
        "solveOne_cmd": {
            "name": "solveOne_cmd",
            "location": 135,
            "return": [
                "tuple[typing.Union[typing.Text,dict[typing.Text, typing.Union[typing.Text,int,None]]]]"
            ],
            "arguments": {
                "file": [],
                "rewrite": [
                    "typing.Text"
                ],
                "interactionId": [
                    "int"
                ],
                "where": [
                    "None"
                ],
                "expr": [
                    "typing.Text"
                ]
            }
        },
        "autoAll_cmd": {
            "name": "autoAll_cmd",
            "location": 143,
            "return": [
                "tuple[typing.Union[typing.Text,dict[typing.Text, ]]]"
            ],
            "arguments": {
                "file": []
            }
        },
        "autoOne_cmd": {
            "name": "autoOne_cmd",
            "location": 154,
            "return": [
                "tuple[typing.Union[typing.Text,dict[typing.Text, typing.Union[typing.Text,int,None]]]]"
            ],
            "arguments": {
                "file": [],
                "interactionId": [
                    "int"
                ],
                "where": [
                    "None"
                ],
                "expr": [
                    "typing.Text"
                ]
            }
        },
        "auto_cmd": {
            "name": "auto_cmd",
            "location": 165,
            "return": [
                "tuple[typing.Union[typing.Text,dict[typing.Text, typing.Union[typing.Text,int,None]]]]"
            ],
            "arguments": {
                "file": [],
                "interactionId": [
                    "int"
                ],
                "where": [
                    "None"
                ],
                "expr": [
                    "typing.Text"
                ]
            }
        },
        "infer_toplevel_cmd": {
            "name": "infer_toplevel_cmd",
            "location": 174,
            "return": [
                "tuple[typing.Union[typing.Text,dict[typing.Text, typing.Text]]]"
            ],
            "arguments": {
                "file": [],
                "rewrite": [
                    "typing.Text"
                ],
                "expr": [
                    "typing.Text"
                ]
            }
        },
        "compute_toplevel_cmd": {
            "name": "compute_toplevel_cmd",
            "location": 184,
            "return": [
                "tuple[typing.Union[typing.Text,dict[typing.Text, typing.Text]]]"
            ],
            "arguments": {
                "file": [],
                "computeMode": [
                    "typing.Text"
                ],
                "expr": [
                    "typing.Text"
                ]
            }
        },
        "load_highlighting_info_cmd": {
            "name": "load_highlighting_info_cmd",
            "location": 192,
            "return": [
                "tuple[typing.Union[typing.Text,dict[typing.Text, ]]]"
            ],
            "arguments": {
                "file": []
            }
        },
        "tokenHighlighting_cmd": {
            "name": "tokenHighlighting_cmd",
            "location": 201,
            "return": [
                "tuple[typing.Union[typing.Text,dict[typing.Text, ]]]"
            ],
            "arguments": {
                "file": [],
                "remove": []
            }
        },
        "highlight_cmd": {
            "name": "highlight_cmd",
            "location": 211,
            "return": [
                "tuple[typing.Union[typing.Text,dict[typing.Text, typing.Union[int,None]]]]"
            ],
            "arguments": {
                "file": [],
                "interactionId": [
                    "int"
                ],
                "where": [
                    "None"
                ]
            }
        },
        "give_cmd": {
            "name": "give_cmd",
            "location": 221,
            "return": [
                "tuple[typing.Union[typing.Text,dict[typing.Text, typing.Union[int,None]]]]"
            ],
            "arguments": {
                "file": [],
                "force": [],
                "interactionId": [
                    "int"
                ],
                "where": [
                    "None"
                ],
                "expr": [
                    "typing.Text"
                ]
            }
        },
        "refine_cmd": {
            "name": "refine_cmd",
            "location": 232,
            "return": [
                "tuple[typing.Union[typing.Text,dict[typing.Text, ]]]"
            ],
            "arguments": {
                "file": [],
                "interactionId": [
                    "int"
                ],
                "where": [
                    "None"
                ],
                "expr": [
                    "typing.Text"
                ]
            }
        },
        "intro_cmd": {
            "name": "intro_cmd",
            "location": 246,
            "return": [
                "tuple[typing.Union[typing.Text,dict[typing.Text, typing.Union[typing.Text,int,None]]]]"
            ],
            "arguments": {
                "file": [],
                "whether": [],
                "interactionId": [
                    "int"
                ],
                "where": [
                    "None"
                ],
                "expr": [
                    "typing.Text"
                ]
            }
        },
        "refine_or_intro_cmd": {
            "name": "refine_or_intro_cmd",
            "location": 258,
            "return": [
                "tuple[typing.Union[typing.Text,dict[typing.Text, typing.Union[typing.Text,int,None]]]]"
            ],
            "arguments": {
                "file": [],
                "whether": [],
                "interactionId": [
                    "int"
                ],
                "where": [
                    "None"
                ],
                "expr": [
                    "typing.Text"
                ]
            }
        },
        "context_cmd": {
            "name": "context_cmd",
            "location": 270,
            "return": [
                "tuple[typing.Union[typing.Text,dict[typing.Text, typing.Union[typing.Text,int,None]]]]"
            ],
            "arguments": {
                "file": [],
                "rewrite": [
                    "typing.Text"
                ],
                "interactionId": [
                    "int"
                ],
                "where": [
                    "None"
                ],
                "expr": [
                    "typing.Text"
                ]
            }
        },
        "helper_function_cmd": {
            "name": "helper_function_cmd",
            "location": 282,
            "return": [
                "tuple[typing.Union[typing.Text,dict[typing.Text, typing.Union[typing.Text,int,None]]]]"
            ],
            "arguments": {
                "file": [],
                "rewrite": [
                    "typing.Text"
                ],
                "interactionId": [
                    "int"
                ],
                "where": [
                    "None"
                ],
                "expr": [
                    "typing.Text"
                ]
            }
        },
        "infer_cmd": {
            "name": "infer_cmd",
            "location": 294,
            "return": [
                "tuple[typing.Union[typing.Text,dict[typing.Text, typing.Union[typing.Text,int,None]]]]"
            ],
            "arguments": {
                "file": [],
                "rewrite": [
                    "typing.Text"
                ],
                "interactionId": [
                    "int"
                ],
                "where": [
                    "None"
                ],
                "expr": [
                    "typing.Text"
                ]
            }
        },
        "goal_type_cmd": {
            "name": "goal_type_cmd",
            "location": 306,
            "return": [
                "tuple[typing.Union[typing.Text,dict[typing.Text, typing.Union[typing.Text,int,None]]]]"
            ],
            "arguments": {
                "file": [],
                "rewrite": [
                    "typing.Text"
                ],
                "interactionId": [
                    "int"
                ],
                "where": [
                    "None"
                ],
                "expr": [
                    "typing.Text"
                ]
            }
        },
        "elaborate_give_cmd": {
            "name": "elaborate_give_cmd",
            "location": 318,
            "return": [
                "tuple[typing.Union[typing.Text,dict[typing.Text, typing.Union[typing.Text,int,None]]]]"
            ],
            "arguments": {
                "file": [],
                "rewrite": [
                    "typing.Text"
                ],
                "interactionId": [
                    "int"
                ],
                "where": [
                    "None"
                ],
                "expr": [
                    "typing.Text"
                ]
            }
        },
        "goal_type_context_cmd": {
            "name": "goal_type_context_cmd",
            "location": 330,
            "return": [
                "tuple[typing.Union[typing.Text,dict[typing.Text, typing.Union[typing.Text,int,None]]]]"
            ],
            "arguments": {
                "file": [],
                "rewrite": [
                    "typing.Text"
                ],
                "interactionId": [
                    "int"
                ],
                "where": [
                    "None"
                ],
                "expr": [
                    "typing.Text"
                ]
            }
        },
        "goal_type_context_infer_cmd": {
            "name": "goal_type_context_infer_cmd",
            "location": 342,
            "return": [
                "tuple[typing.Union[typing.Text,dict[typing.Text, typing.Union[typing.Text,int,None]]]]"
            ],
            "arguments": {
                "file": [],
                "rewrite": [
                    "typing.Text"
                ],
                "interactionId": [
                    "int"
                ],
                "where": [
                    "None"
                ],
                "expr": [
                    "typing.Text"
                ]
            }
        },
        "goal_type_context_check_cmd": {
            "name": "goal_type_context_check_cmd",
            "location": 354,
            "return": [
                "tuple[typing.Union[typing.Text,dict[typing.Text, typing.Union[typing.Text,int,None]]]]"
            ],
            "arguments": {
                "file": [],
                "rewrite": [
                    "typing.Text"
                ],
                "interactionId": [
                    "int"
                ],
                "where": [
                    "None"
                ],
                "expr": [
                    "typing.Text"
                ]
            }
        },
        "show_module_contents_cmd": {
            "name": "show_module_contents_cmd",
            "location": 366,
            "return": [
                "tuple[typing.Union[typing.Text,dict[typing.Text, typing.Union[typing.Text,int,None]]]]"
            ],
            "arguments": {
                "file": [],
                "rewrite": [
                    "typing.Text"
                ],
                "interactionId": [
                    "int"
                ],
                "where": [
                    "None"
                ],
                "expr": [
                    "typing.Text"
                ]
            }
        },
        "make_case_cmd": {
            "name": "make_case_cmd",
            "location": 377,
            "return": [
                "tuple[typing.Union[typing.Text,dict[typing.Text, typing.Union[int,None,typing.Text]]]]"
            ],
            "arguments": {
                "file": [],
                "interactionId": [
                    "int"
                ],
                "where": [
                    "None"
                ],
                "expr": [
                    "typing.Text"
                ]
            }
        },
        "why_in_scope_cmd": {
            "name": "why_in_scope_cmd",
            "location": 388,
            "return": [
                "tuple[typing.Union[typing.Text,dict[typing.Text, typing.Union[int,None,typing.Text]]]]"
            ],
            "arguments": {
                "file": [],
                "interactionId": [
                    "int"
                ],
                "where": [
                    "None"
                ],
                "expr": [
                    "typing.Text"
                ]
            }
        },
        "compute_cmd": {
            "name": "compute_cmd",
            "location": 400,
            "return": [
                "tuple[typing.Union[typing.Text,dict[typing.Text, typing.Union[int,None,typing.Text]]]]"
            ],
            "arguments": {
                "file": [],
                "computeMode": [
                    "typing.Text"
                ],
                "interactionId": [
                    "int"
                ],
                "where": [
                    "None"
                ],
                "expr": [
                    "typing.Text"
                ]
            }
        },
        "why_in_scope_toplevel_cmd": {
            "name": "why_in_scope_toplevel_cmd",
            "location": 409,
            "return": [
                "tuple[typing.Union[typing.Text,dict[typing.Text, typing.Text]]]"
            ],
            "arguments": {
                "file": [],
                "expr": [
                    "typing.Text"
                ]
            }
        },
        "show_version_cmd": {
            "name": "show_version_cmd",
            "location": 416,
            "return": [
                "tuple[typing.Union[typing.Text,dict[, ]]]"
            ],
            "arguments": {}
        },
        "abort_cmd": {
            "name": "abort_cmd",
            "location": 423,
            "return": [
                "tuple[typing.Union[typing.Text,dict[, ]]]"
            ],
            "arguments": {}
        }
    },
    "refl-master/src/args/common.py": {
        "cli": {
            "name": "cli",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "refl-master/src/args/package.py": {
        "pkg": {
            "name": "pkg",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "install": {
            "name": "install",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "Optional[str]",
                    "str",
                    "Optional[List[Any]]",
                    "None",
                    "Optional[Dict[str,Any]]",
                    "List[Any]",
                    "Optional[List[str]]",
                    "Dict[str,Any]",
                    "Optional[Union[str,Any]]",
                    "List[str]",
                    "Any"
                ],
                "git": [
                    "bool",
                    "Optional[bytes]",
                    "Optional[bool]",
                    "Tuple[str]",
                    "Iterable[Tuple[Hashable,Any]]",
                    "Tuple"
                ],
                "local": [
                    "bool",
                    "str",
                    "Tuple[str]",
                    "int",
                    "Dict[str,Any]",
                    "Optional[str]"
                ],
                "remote": [
                    "bool",
                    "str",
                    "Tuple[str]",
                    "int",
                    "Dict[str,Any]",
                    "Optional[str]"
                ],
                "url": [
                    "Text",
                    "Optional[str]",
                    "str",
                    "Optional[List[str]]",
                    "Optional[Dict[str,Any]]",
                    "Optional[Sequence[Any]]",
                    "Optional[bool]"
                ],
                "head": [
                    "Text",
                    "Dict",
                    "str",
                    "bool",
                    "Optional[Dict[str,Any]]",
                    "Optional[Dict[str,str]]",
                    "Dict[str,Dict[str,Any]]",
                    "List[str]"
                ],
                "tag": [
                    "Text",
                    "Dict",
                    "str",
                    "bool",
                    "Optional[Dict[str,Any]]",
                    "Optional[Dict[str,str]]",
                    "Dict[str,Dict[str,Any]]",
                    "List[str]"
                ],
                "commit_hash": [
                    "Text",
                    "Dict",
                    "str",
                    "bool",
                    "Optional[Dict[str,Any]]",
                    "Optional[Dict[str,str]]",
                    "Dict[str,Dict[str,Any]]",
                    "List[str]"
                ],
                "location": [
                    "Text",
                    "bool",
                    "Tuple[str,str]",
                    "Optional[Union[int,str]]",
                    "Callable"
                ],
                "path": [
                    "Text",
                    "str",
                    "Optional[str]"
                ],
                "identifier": [
                    "Text",
                    "Optional[bytes]",
                    "Optional[bool]",
                    "Tuple[str]",
                    "Iterable[Tuple[Hashable,Any]]",
                    "Tuple"
                ],
                "user": [
                    "bool",
                    "Optional[bytes]",
                    "Optional[bool]",
                    "Tuple[str]",
                    "Iterable[Tuple[Hashable,Any]]",
                    "Tuple"
                ],
                "global_install": [
                    "bool",
                    "Optional[bytes]",
                    "Optional[bool]",
                    "Tuple[str]",
                    "Iterable[Tuple[Hashable,Any]]",
                    "Tuple"
                ],
                "pwd": [
                    "bool",
                    "Optional[bytes]",
                    "Optional[bool]",
                    "Tuple[str]",
                    "Iterable[Tuple[Hashable,Any]]",
                    "Tuple"
                ]
            }
        },
        "uninstall": {
            "name": "uninstall",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "user": [
                    "bool",
                    "Optional[str]",
                    "Optional[bool]",
                    "Optional[Iterable[str]]",
                    "Optional[float]",
                    "str",
                    "int"
                ],
                "global_install": [
                    "bool",
                    "Optional[str]",
                    "Optional[bool]",
                    "Optional[Iterable[str]]",
                    "Optional[float]",
                    "str",
                    "int"
                ],
                "pwd": [
                    "bool",
                    "Optional[str]",
                    "Optional[bool]",
                    "Optional[Iterable[str]]",
                    "Optional[float]",
                    "str",
                    "int"
                ],
                "soft": [
                    "bool",
                    "int",
                    "List[str]"
                ]
            }
        },
        "list": {
            "name": "list",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "List[List[str]]",
                    "bool"
                ],
                "global_install": [
                    "List[List[str]]",
                    "bool"
                ],
                "pwd": [
                    "List[List[str]]",
                    "bool"
                ]
            }
        }
    },
    "refl-master/src/args/project.py": {
        "project": {
            "name": "project",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "install": {
            "name": "install",
            "location": 44,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]",
                    "Optional[Union[Any,str]]",
                    "None",
                    "Any"
                ],
                "git": [
                    "bool",
                    "Optional[str]",
                    "Optional[float]",
                    "str",
                    "Optional[Union[float,str]]",
                    "Optional[Union[str,Callable,bool]]",
                    "Optional[InstrumentBase]"
                ],
                "local": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Dict",
                    "Iterable[str]"
                ],
                "url": [
                    "Text",
                    "str",
                    "Optional[str]",
                    "Optional[Sequence[Any]]",
                    "Optional[List[str]]",
                    "Optional[Dict[str,Any]]"
                ],
                "head": [
                    "Text",
                    "str",
                    "Optional[Dict[str,str]]",
                    "Dict",
                    "Dict[str,Dict[str,Any]]",
                    "Optional[Dict[str,Any]]"
                ],
                "tag": [
                    "Text",
                    "str",
                    "Optional[Dict[str,str]]",
                    "Dict",
                    "Dict[str,Dict[str,Any]]",
                    "Optional[Dict[str,Any]]"
                ],
                "commit_hash": [
                    "Text",
                    "str",
                    "Optional[Dict[str,str]]",
                    "Dict",
                    "Dict[str,Dict[str,Any]]",
                    "Optional[Dict[str,Any]]"
                ],
                "location": [
                    "Text",
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "uninstall": {
            "name": "uninstall",
            "location": 91,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "int"
                ],
                "user": [
                    "bool",
                    "Optional[str]",
                    "Optional[bool]",
                    "Optional[Iterable[str]]",
                    "Optional[float]",
                    "str",
                    "int"
                ],
                "global_install": [
                    "bool",
                    "Optional[str]",
                    "Optional[bool]",
                    "Optional[Iterable[str]]",
                    "Optional[float]",
                    "str",
                    "int"
                ],
                "pwd": [
                    "bool",
                    "Optional[str]",
                    "Optional[bool]",
                    "Optional[Iterable[str]]",
                    "Optional[float]",
                    "str",
                    "int"
                ],
                "soft": [
                    "bool",
                    "int",
                    "List[str]"
                ]
            }
        },
        "update": {
            "name": "update",
            "location": 113,
            "return": [
                "None",
                "str",
                "Set[str]",
                "DefaultDict"
            ],
            "arguments": {
                "name": [
                    "Optional[bool]",
                    "bool",
                    "List[str]",
                    "Optional[Any]",
                    "None",
                    "Any",
                    "Optional[str]",
                    "Iterable[T]",
                    "str",
                    "Optional[List[dict]]",
                    "List[dict]"
                ],
                "git": [
                    "bool",
                    "str",
                    "int",
                    "List[str]",
                    "Optional[Dict[str,Dict]]",
                    "Optional[str]"
                ],
                "local": [
                    "bool",
                    "str",
                    "int",
                    "List[str]",
                    "Optional[Dict[str,Dict]]",
                    "Optional[str]"
                ],
                "url": [
                    "Text",
                    "str",
                    "Dict",
                    "bool"
                ],
                "head": [
                    "Text",
                    "Optional[Dict[str,str]]",
                    "Dict",
                    "Dict[str,Dict[str,Any]]",
                    "str",
                    "Optional[Dict[str,Any]]"
                ],
                "tag": [
                    "Text",
                    "Optional[Dict[str,str]]",
                    "Dict",
                    "Dict[str,Dict[str,Any]]",
                    "str",
                    "Optional[Dict[str,Any]]"
                ],
                "commit_hash": [
                    "Text",
                    "Optional[Dict[str,str]]",
                    "Dict",
                    "Dict[str,Dict[str,Any]]",
                    "str",
                    "Optional[Dict[str,Any]]"
                ],
                "location": [
                    "Text",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "init": {
            "name": "init",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "refl-master/src/args/repl.py": {
        "repl": {
            "name": "repl",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "repl_process_commands": {
            "name": "repl_process_commands",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "processors": [
                    "bool"
                ]
            }
        },
        "agda": {
            "name": "agda",
            "location": 42,
            "return": [
                "Tuple[Union[Text,dict[Text,Union[int,Callable,str]]]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "prelude": [
                    "int",
                    "Callable",
                    "str"
                ],
                "includes": [
                    "int",
                    "Callable",
                    "str"
                ],
                "library": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "refl-master/src/args/version.py": {
        "version": {
            "name": "version",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "process_commands": {
            "name": "process_commands",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "processors": [
                    "int",
                    "List[str]",
                    "Dict",
                    "Callable",
                    "str",
                    "bool"
                ]
            }
        },
        "switch": {
            "name": "switch",
            "location": 40,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "version": [
                    "str",
                    "Iterable[int]",
                    "bool",
                    "Union[str,dict]",
                    "Callable[,None]",
                    "Optional[Callable[,None]]",
                    "None"
                ],
                "globally": [
                    "str",
                    "Iterable[int]",
                    "bool",
                    "Union[str,dict]",
                    "Callable[,None]",
                    "Optional[Callable[,None]]",
                    "None"
                ],
                "user": [
                    "str",
                    "Iterable[int]",
                    "bool",
                    "Union[str,dict]",
                    "Callable[,None]",
                    "Optional[Callable[,None]]",
                    "None"
                ]
            }
        },
        "uninstall": {
            "name": "uninstall",
            "location": 62,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "version": [
                    "str",
                    "Iterable[int]",
                    "bool",
                    "Union[str,dict]",
                    "Callable[,None]",
                    "Optional[Callable[,None]]",
                    "None"
                ],
                "globally": [
                    "str",
                    "Iterable[int]",
                    "bool",
                    "Union[str,dict]",
                    "Callable[,None]",
                    "Optional[Callable[,None]]",
                    "None"
                ],
                "user": [
                    "str",
                    "Iterable[int]",
                    "bool",
                    "Union[str,dict]",
                    "Callable[,None]",
                    "Optional[Callable[,None]]",
                    "None"
                ]
            }
        },
        "list_versions": {
            "name": "list_versions",
            "location": 81,
            "return": [
                "None",
                "Optional[int]",
                "Optional[str]",
                "Optional[Any]",
                "Optional[Literal[only_clustered,include_clustered]]",
                "Optional[bytes]",
                "Optional[bool]",
                "Dict",
                "Optional[List[Any]]"
            ],
            "arguments": {}
        }
    },
    "refl-master/src/args/__init__.py": {},
    "refl-master/src/config/config.py": {},
    "refl-master/src/config/__init__.py": {},
    "refl-master/src/packages/common.py": {
        "Origin.parse": {
            "name": "parse",
            "location": 16,
            "return": [
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "str",
                    "Dict",
                    "List[int]",
                    "Iterable[Any]"
                ]
            }
        },
        "Kind.parse": {
            "name": "parse",
            "location": 31,
            "return": [
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "str",
                    "Dict",
                    "List[int]",
                    "Iterable[Any]"
                ]
            }
        },
        "GitOptions.parse": {
            "name": "parse",
            "location": 47,
            "return": [
                "Optional[GitOptions]"
            ],
            "arguments": {
                "data": [
                    "Dict[str,Any]",
                    "Dict",
                    "Union[Dict,List]",
                    "List",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "LocalOptions.parse": {
            "name": "parse",
            "location": 61,
            "return": [
                "Optional[LocalOptions]"
            ],
            "arguments": {
                "data": [
                    "Dict[str,Any]",
                    "Dict",
                    "Union[Dict,List]",
                    "List",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "RemoteOptions.parse": {
            "name": "parse",
            "location": 75,
            "return": [
                "Optional[RemoteOptions]"
            ],
            "arguments": {
                "data": [
                    "Dict[str,Any]",
                    "Dict",
                    "Union[Dict,List]",
                    "List",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        }
    },
    "refl-master/src/packages/__init__.py": {},
    "refl-master/src/packages/package/install.py": {
        "Install.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "None"
                ],
                "origin": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "None"
                ],
                "options": [
                    "bool",
                    "str",
                    "Union[static_frame.core.util.IndexInitializer,static_frame.core.index_auto.IndexAutoFactoryType]"
                ],
                "version": [
                    "str",
                    "None",
                    "Iterable[str]",
                    "Optional[str]"
                ],
                "description": [
                    "str",
                    "None",
                    "Iterable[str]",
                    "Optional[str]"
                ],
                "source_dir": [
                    "str",
                    "None"
                ],
                "agda_version": [
                    "str",
                    "None",
                    "Iterable[str]",
                    "Optional[str]"
                ],
                "dependencies": [
                    "str",
                    "None",
                    "Iterable[str]",
                    "Optional[str]"
                ],
                "readme": [
                    "str",
                    "None",
                    "Iterable[str]",
                    "Optional[str]"
                ],
                "author": [
                    "str",
                    "None",
                    "Iterable[str]",
                    "Optional[str]"
                ],
                "author_email": [
                    "str",
                    "None",
                    "Iterable[str]",
                    "Optional[str]"
                ],
                "license": [
                    "str",
                    "None",
                    "Iterable[str]",
                    "Optional[str]"
                ],
                "tags": [
                    "str",
                    "None",
                    "int",
                    "Optional[str]",
                    "List[R]",
                    "bool",
                    "List[ResourceTypeId]"
                ],
                "install_script": [
                    "str",
                    "None",
                    "Iterable[str]",
                    "Optional[str]"
                ],
                "uninstall_script": [
                    "str",
                    "None",
                    "Iterable[str]",
                    "Optional[str]"
                ]
            }
        },
        "Install.__call__": {
            "name": "__call__",
            "location": 78,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "target_location": [
                    "str",
                    "Exception"
                ]
            }
        },
        "Install._git": {
            "name": "_git",
            "location": 88,
            "return": [
                "Install"
            ],
            "arguments": {
                "self": [
                    "_TInstall@@Install@@"
                ],
                "url": [
                    "str",
                    "int",
                    "Dict"
                ],
                "head": [
                    "None",
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "int",
                    "bool"
                ],
                "tag": [
                    "None",
                    "str",
                    "Optional[str]",
                    "Set[str]",
                    "List[str]",
                    "int",
                    "Iterable[str]"
                ],
                "commit_hash": [
                    "None",
                    "Optional[str]",
                    "str",
                    "Optional[bool]",
                    "bool",
                    "Optional[int]",
                    "Match",
                    "Optional[Match]"
                ]
            }
        },
        "Install._local": {
            "name": "_local",
            "location": 128,
            "return": [
                "Install"
            ],
            "arguments": {
                "self": [
                    "_TInstall@@Install@@"
                ],
                "location": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Uninstall.__init__": {
            "name": "__init__",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str,Any]",
                    "List[str]",
                    "Dict"
                ]
            }
        },
        "Uninstall.__call__": {
            "name": "__call__",
            "location": 155,
            "return": [
                "Uninstall"
            ],
            "arguments": {
                "self": [
                    "_TUninstall@@Uninstall@@"
                ],
                "where": [
                    "str",
                    "path.Path",
                    "tsrc.Repo"
                ],
                "non_exact": [
                    "bool",
                    "List[int]"
                ]
            }
        }
    },
    "refl-master/src/packages/package/list.py": {
        "ListPackage.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListPackage.__call__": {
            "name": "__call__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "location": [
                    "str",
                    "Callable"
                ]
            }
        }
    },
    "refl-master/src/packages/package/package.py": {
        "Package.parse": {
            "name": "parse",
            "location": 47,
            "return": [
                "Optional[str]",
                "None",
                "str",
                "Package"
            ],
            "arguments": {
                "data": [
                    "Dict",
                    "Union[Dict,List]",
                    "List"
                ]
            }
        },
        "Package.load": {
            "name": "load",
            "location": 57,
            "return": [
                "None",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "where": [
                    "str"
                ]
            }
        },
        "Package.save": {
            "name": "save",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "where": [
                    "str",
                    "bytes",
                    "IO[bytes]"
                ]
            }
        }
    },
    "refl-master/src/packages/package/__init__.py": {},
    "refl-master/src/packages/project/agda_project.py": {
        "AgdaProject.parse": {
            "name": "parse",
            "location": 22,
            "return": [
                "Optional[AgdaProject]"
            ],
            "arguments": {
                "data": [
                    "Dict",
                    "str",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "AgdaProject.__call__": {
            "name": "__call__",
            "location": 30,
            "return": [
                "AgdaProject"
            ],
            "arguments": {
                "self": [
                    "_TAgdaProject@@AgdaProject@@"
                ],
                "location": [
                    "List[str]"
                ]
            }
        },
        "AgdaProject._parse_dependencies": {
            "name": "_parse_dependencies",
            "location": 60,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str",
                    "IO[str]"
                ]
            }
        },
        "AgdaProject._remove_comment": {
            "name": "_remove_comment",
            "location": 87,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "x": [
                    "float"
                ]
            }
        }
    },
    "refl-master/src/packages/project/install.py": {
        "Install.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str",
                    "cerulean.path.AbstractPath",
                    "path.Path"
                ],
                "where": [
                    "bool",
                    "None",
                    "str",
                    "Dict",
                    "Optional[int]",
                    "Union[str,os.PathLike,None]",
                    "Optional[bool]",
                    "Optional[str]"
                ]
            }
        },
        "Install.install": {
            "name": "install",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Install._git": {
            "name": "_git",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "head": [
                    "Optional[int]",
                    "None",
                    "Optional[str]",
                    "int",
                    "Optional[Iterable[str]]",
                    "str",
                    "Optional[Callable[...,Any]]",
                    "Iterable[str]",
                    "List[str]",
                    "Callable[...,Any]"
                ],
                "tag": [
                    "str",
                    "None",
                    "List[str]",
                    "Optional[str]"
                ],
                "commit_hash": [
                    "Optional[str]",
                    "None",
                    "Optional[Dict[str,str]]",
                    "str",
                    "Dict[str,str]"
                ]
            }
        },
        "Install._local": {
            "name": "_local",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "location": [
                    "str",
                    "bool"
                ]
            }
        },
        "Install._remote": {
            "name": "_remote",
            "location": 105,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Dict[str,Union[str,int]]"
                ],
                "identifier": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "Install._load_lib_file": {
            "name": "_load_lib_file",
            "location": 136,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "directory": [
                    "str"
                ]
            }
        },
        "Install.installed": {
            "name": "installed",
            "location": 142,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "refl-master/src/packages/project/project.py": {
        "Project.load": {
            "name": "load",
            "location": 31,
            "return": [
                "str",
                "Project"
            ],
            "arguments": {
                "where": [
                    "str",
                    "int"
                ]
            }
        },
        "Project.exists": {
            "name": "exists",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int"
                ]
            }
        },
        "Project.add_dependency": {
            "name": "add_dependency",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Collection[str]",
                    "Collection"
                ],
                "git": [
                    "bool",
                    "str",
                    "Tuple[str]",
                    "int"
                ],
                "local": [
                    "bool",
                    "Iterable[tuple[Union[Hashable,Any]]]",
                    "int",
                    "str",
                    "None",
                    "static_frame.core.util.DtypesSpecifier",
                    "Iterable[Tuple[Hashable,Any]]",
                    "static_frame.core.util.IndexConstructor",
                    "Optional[str]"
                ],
                "url": [
                    "str",
                    "Dict",
                    "Dict[str,str]",
                    "Optional[Dict[str,str]]",
                    "None",
                    "Optional[Dict[str,Any]]",
                    "List[str]",
                    "Optional[str]",
                    "Optional[List[str]]"
                ],
                "head": [
                    "str",
                    "Dict",
                    "Dict[str,str]",
                    "Optional[Dict[str,str]]",
                    "None",
                    "Optional[Dict[str,Any]]",
                    "List[str]",
                    "Optional[str]",
                    "Optional[List[str]]"
                ],
                "tag": [
                    "str",
                    "Dict",
                    "Dict[str,str]",
                    "Optional[Dict[str,str]]",
                    "None",
                    "Optional[Dict[str,Any]]",
                    "List[str]",
                    "Optional[str]",
                    "Optional[List[str]]"
                ],
                "commit_hash": [
                    "str",
                    "Dict",
                    "Dict[str,str]",
                    "Optional[Dict[str,str]]",
                    "None",
                    "Optional[Dict[str,Any]]",
                    "List[str]",
                    "Optional[str]",
                    "Optional[List[str]]"
                ],
                "location": [
                    "bool",
                    "Type",
                    "Optional[T]",
                    "None",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]"
                ]
            }
        },
        "Project.remove_dependency": {
            "name": "remove_dependency",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Callable",
                    "bytes"
                ]
            }
        },
        "Project.save": {
            "name": "save",
            "location": 80,
            "return": [
                "None",
                "Union[tuple,list]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "where": [
                    "str",
                    "bytes",
                    "IO[bytes]"
                ]
            }
        },
        "Project.init": {
            "name": "init",
            "location": 95,
            "return": [
                "Project",
                "int",
                "bool",
                "float"
            ],
            "arguments": {
                "where": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Union[str,bytes]",
                    "bytes"
                ],
                "name": [
                    "str",
                    "bool",
                    "Dict[str,Any]",
                    "int"
                ],
                "includes": [
                    "str",
                    "bool",
                    "Dict[str,Any]",
                    "int"
                ]
            }
        }
    },
    "refl-master/src/packages/project/refl_project.py": {
        "ReflProject.parse": {
            "name": "parse",
            "location": 22,
            "return": [
                "None",
                "str",
                "ReflProject",
                "Optional[str]",
                "Optional[object]"
            ],
            "arguments": {
                "data": [
                    "Dict",
                    "str",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "ReflProject.__call__": {
            "name": "__call__",
            "location": 30,
            "return": [
                "Callable[[str],str]",
                "ReflProject",
                "None"
            ],
            "arguments": {
                "self": [],
                "location": [
                    "float",
                    "int"
                ]
            }
        }
    },
    "refl-master/src/packages/project/__init__.py": {},
    "refl-master/src/util/emojis.py": {},
    "refl-master/src/util/log.py": {
        "logger": {
            "name": "logger",
            "location": 12,
            "return": [
                "logging.Logger"
            ],
            "arguments": {
                "level": [
                    "Text",
                    "float",
                    "int",
                    "Union[str,int]",
                    "str"
                ]
            }
        },
        "Logging.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "Text",
                    "str",
                    "logging.Logger",
                    "List[str]",
                    "Tuple[Tuple[str,...]]"
                ]
            }
        },
        "Logging.__call__": {
            "name": "__call__",
            "location": 26,
            "return": [
                "logging.Logger"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "refl-master/src/util/util.py": {
        "download_url": {
            "name": "download_url",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [
                    "str",
                    "bool",
                    "Dict[str,Any]"
                ],
                "output_path": [
                    "str"
                ]
            }
        },
        "unzip": {
            "name": "unzip",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "fname": [
                    "str"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 36,
            "return": [
                "int"
            ],
            "arguments": {
                "cmd": [
                    "str",
                    "Dict[str,Any]"
                ],
                "cwd": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "flatten": {
            "name": "flatten",
            "location": 48,
            "return": [
                "list"
            ],
            "arguments": {
                "xs": [
                    "int",
                    "float"
                ]
            }
        },
        "module_name_from_file_name": {
            "name": "module_name_from_file_name",
            "location": 52,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "DownloadProgressBar.update_to": {
            "name": "update_to",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "b": [
                    "int",
                    "Optional[str]",
                    "bytes",
                    "str"
                ],
                "bsize": [
                    "int",
                    "Optional[str]",
                    "bytes",
                    "str"
                ],
                "tsize": [
                    "Optional[str]",
                    "None",
                    "Match",
                    "str",
                    "Optional[List[str]]",
                    "List[str]"
                ]
            }
        }
    },
    "refl-master/src/util/__init__.py": {},
    "refl-master/src/version/switcher.py": {
        "VersionSwitcher.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "bool",
                    "str",
                    "Dict[str,dict]",
                    "bytes",
                    "Optional[dict]",
                    "Dict",
                    "None"
                ],
                "install_root": [
                    "Text",
                    "str",
                    "Dict[str,Any]",
                    "TextIO"
                ]
            }
        },
        "VersionSwitcher.latest": {
            "name": "latest",
            "location": 26,
            "return": [
                "None",
                "Optional[str]",
                "List",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VersionSwitcher.install": {
            "name": "install",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VersionSwitcher.uninstall": {
            "name": "uninstall",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VersionSwitcher._switch": {
            "name": "_switch",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "to": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "VersionSwitcher._download": {
            "name": "_download",
            "location": 78,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "VersionSwitcher.get_available_versions": {
            "name": "get_available_versions",
            "location": 100,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "arch": [
                    "Text",
                    "List",
                    "Callable",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "refl-master/src/version/__init__.py": {},
    "refl-master/test/test_commands.py": {
        "test_range": {
            "name": "test_range",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_compile": {
            "name": "test_compile",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load": {
            "name": "test_load",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_constraints": {
            "name": "test_constraints",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_metas": {
            "name": "test_metas",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_show_module_contents_toplevel": {
            "name": "test_show_module_contents_toplevel",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_search_about_toplevel": {
            "name": "test_search_about_toplevel",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_solveAll": {
            "name": "test_solveAll",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_solveOne": {
            "name": "test_solveOne",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_autoAll": {
            "name": "test_autoAll",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_autoOne": {
            "name": "test_autoOne",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_auto": {
            "name": "test_auto",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_infer_toplevel": {
            "name": "test_infer_toplevel",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_compute_toplevel": {
            "name": "test_compute_toplevel",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load_highlighting_info": {
            "name": "test_load_highlighting_info",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tokenHighlighting": {
            "name": "test_tokenHighlighting",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_highlight": {
            "name": "test_highlight",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_give": {
            "name": "test_give",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_refine": {
            "name": "test_refine",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_intro": {
            "name": "test_intro",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_refine_or_intro": {
            "name": "test_refine_or_intro",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_context": {
            "name": "test_context",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_helper_function": {
            "name": "test_helper_function",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_infer": {
            "name": "test_infer",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_goal_type": {
            "name": "test_goal_type",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_elaborate_give": {
            "name": "test_elaborate_give",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_goal_type_context": {
            "name": "test_goal_type_context",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_goal_type_context_infer": {
            "name": "test_goal_type_context_infer",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_goal_type_context_check": {
            "name": "test_goal_type_context_check",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_show_module_contents": {
            "name": "test_show_module_contents",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_make_case": {
            "name": "test_make_case",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_why_in_scope": {
            "name": "test_why_in_scope",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_compute": {
            "name": "test_compute",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_why_in_scope_toplevel": {
            "name": "test_why_in_scope_toplevel",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_show_version": {
            "name": "test_show_version",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_abort": {
            "name": "test_abort",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
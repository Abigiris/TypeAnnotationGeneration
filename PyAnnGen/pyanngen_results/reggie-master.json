{
    "reggie-master/setup.py": {},
    "reggie-master/docs/conf.py": {},
    "reggie-master/reggie/cli.py": {
        "main": {
            "name": "main",
            "location": 12,
            "return": [
                "int",
                "str",
                "List[str]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "target_script_path": [
                    "str"
                ],
                "dir_path": [
                    "str"
                ]
            }
        }
    },
    "reggie-master/reggie/reggie.py": {
        "collect_created_tables": {
            "name": "collect_created_tables",
            "location": 27,
            "return": [
                "list"
            ],
            "arguments": {
                "text_stream": [
                    "str",
                    "Dict[str, Sequence[str]]"
                ]
            }
        },
        "get_table_names_from_script": {
            "name": "get_table_names_from_script",
            "location": 38,
            "return": [
                "List[Callable[[datetime.datetime], bool]]",
                "str",
                "dict",
                "Optional[List[str]]"
            ],
            "arguments": {
                "script_path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "get_matches_in_script": {
            "name": "get_matches_in_script",
            "location": 43,
            "return": [
                "list"
            ],
            "arguments": {
                "script_path": [
                    "str",
                    "pathlib.Path",
                    "Optional[str]",
                    "Dict",
                    "pathlib.PurePath"
                ],
                "regex": [
                    "Pattern",
                    "BinaryIO",
                    "Optional[str]",
                    "str",
                    "pathlib.Path",
                    "None"
                ]
            }
        },
        "get_matches_in_directory": {
            "name": "get_matches_in_directory",
            "location": 51,
            "return": [
                "list"
            ],
            "arguments": {
                "tables": [
                    "str",
                    "List[str]",
                    "Iterable[pathlib.Path]",
                    "bool",
                    "pathlib.Path"
                ],
                "dir_path": [
                    "str",
                    "List[str]",
                    "pathlib.Path"
                ]
            }
        },
        "get_consolidated_matches": {
            "name": "get_consolidated_matches",
            "location": 60,
            "return": [
                "list"
            ],
            "arguments": {
                "matches": [
                    "List",
                    "str",
                    "Dict",
                    "Type",
                    "Iterable"
                ]
            }
        },
        "render_archive_delete_statements": {
            "name": "render_archive_delete_statements",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "List[Dict[str,str]]",
                    "List[list]",
                    "List[dict[str,str]]",
                    "List[str]"
                ]
            }
        },
        "render": {
            "name": "render",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "List[str]",
                    "str",
                    "List[Dict[str,str]]",
                    "List[Union[dict[str,str],str,str,str,str,str,str,str,str,str,str,str,str,str,str]]"
                ],
                "matches": [
                    "Optional[str]",
                    "str",
                    "Union[str,int]",
                    "None",
                    "int"
                ]
            }
        },
        "sniff_out_dependencies": {
            "name": "sniff_out_dependencies",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "target_script_path": [
                    "str",
                    "pathlib.Path",
                    "Path"
                ],
                "dir_path": [
                    "str",
                    "bool",
                    "pathlib.Path"
                ]
            }
        }
    },
    "reggie-master/reggie/__init__.py": {},
    "reggie-master/tests/test_reggie.py": {
        "single_table_str": {
            "name": "single_table_str",
            "location": 21,
            "return": [
                "StringIO"
            ],
            "arguments": {}
        },
        "single_table_str_caps": {
            "name": "single_table_str_caps",
            "location": 30,
            "return": [
                "StringIO"
            ],
            "arguments": {}
        },
        "single_view_str_caps": {
            "name": "single_view_str_caps",
            "location": 39,
            "return": [
                "StringIO",
                "bytes",
                "str",
                "io.StringIO"
            ],
            "arguments": {}
        },
        "view_str_split_across_lines": {
            "name": "view_str_split_across_lines",
            "location": 49,
            "return": [
                "StringIO",
                "bytes",
                "str"
            ],
            "arguments": {}
        },
        "view_schema_and_table": {
            "name": "view_schema_and_table",
            "location": 61,
            "return": [
                "StringIO",
                "io.StringIO",
                "str",
                "bytes"
            ],
            "arguments": {}
        },
        "multiple_table_str": {
            "name": "multiple_table_str",
            "location": 70,
            "return": [
                "StringIO",
                "io.TextIOBase",
                "bytes",
                "TextIO",
                "int"
            ],
            "arguments": {}
        },
        "TestCollectCreatedTables.test_it_parses_simple_table_statements": {
            "name": "test_it_parses_simple_table_statements",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "single_table_str": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "TestCollectCreatedTables.test_it_parses_simple_table_statements_witout_case_sensitivity": {
            "name": "test_it_parses_simple_table_statements_witout_case_sensitivity",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "single_table_str_caps": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "TestCollectCreatedTables.test_it_parses_simple_view_statements": {
            "name": "test_it_parses_simple_view_statements",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "single_view_str_caps": [
                    "str"
                ]
            }
        },
        "TestCollectCreatedTables.test_it_parses_view_split_across_lines": {
            "name": "test_it_parses_view_split_across_lines",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view_str_split_across_lines": [
                    "str",
                    "List[str]",
                    "bool",
                    "Type[Any]",
                    "Type"
                ]
            }
        },
        "TestCollectCreatedTables.test_it_parses_schema_and_table_names": {
            "name": "test_it_parses_schema_and_table_names",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view_schema_and_table": [
                    "str"
                ]
            }
        },
        "TestCollectCreatedTables.test_it_parses_multiple_table_statements": {
            "name": "test_it_parses_multiple_table_statements",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "multiple_table_str": [
                    "str",
                    "bool",
                    "Type[Any]",
                    "Type"
                ]
            }
        },
        "TestGetTableNamesFromScript.test_it_returns_tables_from_script": {
            "name": "test_it_returns_tables_from_script",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetTableNamesFromScript.test_it_returns_no_tables_from_empty_script": {
            "name": "test_it_returns_no_tables_from_empty_script",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetMatchesInScript.test_it": {
            "name": "test_it",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetMatchesInDirectory.test_it": {
            "name": "test_it",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
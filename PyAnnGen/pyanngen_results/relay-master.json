{
    "relay-master/setup.py": {},
    "relay-master/src/relay/boot.py": {
        "setup_basic_logging": {
            "name": "setup_basic_logging",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "CurrentGreenletLogger._log": {
            "name": "_log",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "str",
                    "int"
                ],
                "msg": [
                    "str",
                    "int"
                ],
                "args": [],
                "exc_info": [
                    "str",
                    "int",
                    "None"
                ],
                "extra": [
                    "bool",
                    "str",
                    "None",
                    "Awaitable",
                    "collections.abc.Awaitable[]"
                ]
            }
        }
    },
    "relay-master/src/relay/concurrency_utils.py": {
        "synchronized": {
            "name": "synchronized",
            "location": 8,
            "return": [
                "bool"
            ],
            "arguments": {
                "wrapped": [
                    "int"
                ],
                "instance": [
                    "int",
                    "typing.Type",
                    "bool",
                    "None",
                    "Type['Frame']",
                    "Optional[\"Outcome\"]"
                ],
                "args": [],
                "kwargs": []
            }
        }
    },
    "relay-master/src/relay/constants.py": {},
    "relay-master/src/relay/events.py": {
        "Event.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timestamp": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Event.__str__": {
            "name": "__str__",
            "location": 11,
            "return": [
                "typing.Text",
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountEvent.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "network_address": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "dict[, ]",
                    "int",
                    "dict"
                ],
                "user": [
                    "bool",
                    "str",
                    "int"
                ],
                "account_summary": [
                    "str",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]"
                ],
                "timestamp": [
                    "int",
                    "str"
                ]
            }
        },
        "BalanceEvent.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "network_address": [
                    "str",
                    "int",
                    "list",
                    "list[]"
                ],
                "from_": [
                    "str",
                    "int",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "to": [
                    "str",
                    "int",
                    "typing.Iterable[typing.Iterable[str]]",
                    "Iterable[Iterable[str]]",
                    "Dict[str, Union[Any, Any]]"
                ],
                "account_summary": [
                    "str",
                    "int",
                    "list",
                    "list[]"
                ],
                "timestamp": [
                    "str",
                    "int",
                    "list",
                    "list[]"
                ]
            }
        },
        "MessageEvent.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "bool",
                    "list[float]",
                    "int",
                    "list[str]",
                    "List[float]",
                    "List[str]"
                ]
            }
        }
    },
    "relay-master/src/relay/main.py": {
        "patch_warnings_module": {
            "name": "patch_warnings_module",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "configure_logging": {
            "name": "configure_logging",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "dict",
                    "Dict[str, Any]",
                    "yacron.config.JobConfig"
                ]
            }
        },
        "_show_version": {
            "name": "_show_version",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "click.Context",
                    "click.core.Context",
                    "Union[click.core.Option, click.core.Parameter]"
                ],
                "param": [
                    "bool",
                    "click.Parameter",
                    "Union[click.Option, click.Parameter]",
                    "Tuple[str]",
                    "click.Context"
                ],
                "value": [
                    "bool",
                    "click.Parameter",
                    "Union[click.Option, click.Parameter]",
                    "Tuple[str]",
                    "click.Context"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "bool",
                    "str",
                    "int",
                    "Optional[bool]",
                    "float"
                ],
                "port": [
                    "bool",
                    "str",
                    "int",
                    "Optional[bool]",
                    "float"
                ],
                "config": [
                    "bool",
                    "str",
                    "int",
                    "Optional[bool]",
                    "float"
                ],
                "addresses": [
                    "bool",
                    "str",
                    "int",
                    "Optional[bool]",
                    "float"
                ],
                "version": [
                    "bool",
                    "str",
                    "int",
                    "Optional[bool]",
                    "float"
                ],
                "report_coverage": [
                    "bool",
                    "str",
                    "int",
                    "Optional[bool]",
                    "float"
                ]
            }
        },
        "select_enabled_apis": {
            "name": "select_enabled_apis",
            "location": 167,
            "return": [
                "list"
            ],
            "arguments": {
                "config_dict": [
                    "Optional[str]",
                    "str",
                    "Optional[Dict]",
                    "MutableMapping[str, Any]",
                    "app.utils.types.JSON"
                ]
            }
        },
        "patch_warnings_module.simplefilter": {
            "name": "simplefilter",
            "location": 40,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "action": [
                    "int",
                    "dict",
                    "Callable",
                    "str"
                ],
                "category": [
                    "Dict[str, Any]"
                ],
                "lineno": [
                    "int",
                    "dict",
                    "Callable",
                    "str"
                ],
                "append": [
                    "int",
                    "dict",
                    "Callable",
                    "str"
                ]
            }
        },
        "main.shutdown": {
            "name": "shutdown",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {
                "code": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "frame": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        }
    },
    "relay-master/src/relay/relay.py": {
        "create_engine": {
            "name": "create_engine",
            "location": 977,
            "return": [
                "sqlalchemy.engine.base.Engine"
            ],
            "arguments": {}
        },
        "TrustlinesRelay.__init__": {
            "name": "__init__",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "typing.Callable[, ]",
                    "bool",
                    "Callable",
                    "list[str]",
                    "List[str]",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "\"Step\""
                ],
                "addresses_json_path": [
                    "typing.Text",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TrustlinesRelay.network_addresses": {
            "name": "network_addresses",
            "location": 136,
            "return": [
                "float",
                "int",
                "gfg.bsbst_and_node.Node"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrustlinesRelay.exchange_addresses": {
            "name": "exchange_addresses",
            "location": 140,
            "return": [
                "list[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrustlinesRelay.unw_eth_addresses": {
            "name": "unw_eth_addresses",
            "location": 147,
            "return": [
                "list[]",
                "List[Dict]",
                "List[str]",
                "List[int]",
                "str",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrustlinesRelay.token_addresses": {
            "name": "token_addresses",
            "location": 151,
            "return": [
                "list[]",
                "str",
                "Sequence[str]",
                "docutils.nodes.Node"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrustlinesRelay.enable_ether_faucet": {
            "name": "enable_ether_faucet",
            "location": 155,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrustlinesRelay.enable_relay_meta_transaction": {
            "name": "enable_relay_meta_transaction",
            "location": 159,
            "return": [
                "bool",
                "str",
                "Dict[str, Any]",
                "Callable[[dbcontracts.graph.manifesManifest], Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrustlinesRelay.enable_deploy_identity": {
            "name": "enable_deploy_identity",
            "location": 163,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrustlinesRelay.get_ethindex_db_for_currency_network": {
            "name": "get_ethindex_db_for_currency_network",
            "location": 166,
            "return": [
                "ethindex_db.CurrencyNetworkEthindexDB"
            ],
            "arguments": {
                "self": [],
                "network_address": [
                    "Optional[str]"
                ]
            }
        },
        "TrustlinesRelay.get_ethindex_db_for_token": {
            "name": "get_ethindex_db_for_token",
            "location": 185,
            "return": [
                "ethindex_db.EthindexDB"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str"
                ]
            }
        },
        "TrustlinesRelay.get_ethindex_db_for_unw_eth": {
            "name": "get_ethindex_db_for_unw_eth",
            "location": 197,
            "return": [
                "ethindex_db.EthindexDB"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str"
                ]
            }
        },
        "TrustlinesRelay.get_ethindex_db_for_exchange": {
            "name": "get_ethindex_db_for_exchange",
            "location": 209,
            "return": [
                "ethindex_db.ExchangeEthindexDB"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "Optional[str]"
                ]
            }
        },
        "TrustlinesRelay.is_currency_network": {
            "name": "is_currency_network",
            "location": 221,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str"
                ]
            }
        },
        "TrustlinesRelay.is_currency_network_frozen": {
            "name": "is_currency_network_frozen",
            "location": 224,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str"
                ]
            }
        },
        "TrustlinesRelay.is_trusted_token": {
            "name": "is_trusted_token",
            "location": 227,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str"
                ]
            }
        },
        "TrustlinesRelay.get_network_info": {
            "name": "get_network_info",
            "location": 230,
            "return": [
                "NetworkInfo"
            ],
            "arguments": {
                "self": [],
                "network_address": [
                    "str"
                ]
            }
        },
        "TrustlinesRelay.get_network_infos": {
            "name": "get_network_infos",
            "location": 250,
            "return": [
                "List[NetworkInfo]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrustlinesRelay.get_users_of_network": {
            "name": "get_users_of_network",
            "location": 256,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "network_address": [
                    "str"
                ]
            }
        },
        "TrustlinesRelay.get_friends_of_user_in_network": {
            "name": "get_friends_of_user_in_network",
            "location": 259,
            "return": [
                "List[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "network_address": [
                    "str"
                ],
                "user_address": [
                    "str"
                ]
            }
        },
        "TrustlinesRelay.get_list_of_accrued_interests_for_trustline": {
            "name": "get_list_of_accrued_interests_for_trustline",
            "location": 262,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "network_address": [
                    "str"
                ],
                "user_address": [
                    "str"
                ],
                "counterparty_address": [
                    "str"
                ],
                "start_time": [
                    "int"
                ],
                "end_time": [
                    "int"
                ]
            }
        },
        "TrustlinesRelay.get_total_sum_transferred": {
            "name": "get_total_sum_transferred",
            "location": 277,
            "return": [
                "str",
                "dbcontracts.graph.manifesManifest",
                "dbcontracts.graph.parsed.ParsedMacro"
            ],
            "arguments": {
                "self": [],
                "network_address": [
                    "int",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "sender_address": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "dict[str, typing.Any]",
                    "Optional[Dict[str, Any]]",
                    "None",
                    "Optional[List[str]]",
                    "list[str]"
                ],
                "receiver_address": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "dict[str, typing.Any]",
                    "Optional[Dict[str, Any]]",
                    "None",
                    "Optional[List[str]]",
                    "list[str]"
                ],
                "start_time": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[str]]"
                ],
                "end_time": [
                    "str",
                    "None",
                    "Dict[str, Any]",
                    "int",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "Optional[List[str]]",
                    "list[str]"
                ]
            }
        },
        "TrustlinesRelay.get_transfer_information_for_tx_hash": {
            "name": "get_transfer_information_for_tx_hash",
            "location": 290,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "tx_hash": [
                    "str"
                ]
            }
        },
        "TrustlinesRelay.get_transfer_information_from_event_id": {
            "name": "get_transfer_information_from_event_id",
            "location": 294,
            "return": [
                "List[relay.ethindex_db.events_informations.TransferInformation]"
            ],
            "arguments": {
                "self": [],
                "block_hash": [
                    "str",
                    "float",
                    "bool",
                    "bytes"
                ],
                "log_index": [
                    "str",
                    "float",
                    "bool",
                    "bytes"
                ]
            }
        },
        "TrustlinesRelay.get_paid_delegation_fees_for_tx_hash": {
            "name": "get_paid_delegation_fees_for_tx_hash",
            "location": 298,
            "return": [
                "Optional[Dict]",
                "bool",
                "Optional[bool]",
                "dbcontracts.graph.manifesManifest",
                "dbcontracts.graph.parsed.ParsedMacro",
                "Optional[Tuple]"
            ],
            "arguments": {
                "self": [],
                "tx_hash": [
                    "str",
                    "int",
                    "Union[str, \"TrackingCode\"]",
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "TrustlinesRelay.get_earned_mediation_fees": {
            "name": "get_earned_mediation_fees",
            "location": 304,
            "return": [
                "List[relay.ethindex_db.events_informations.MediationFee]"
            ],
            "arguments": {
                "self": [],
                "network_address": [
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "bool"
                ],
                "user_address": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None",
                    "Optional[Callable[[], bool]]",
                    "typing.Callable[[], bool]"
                ],
                "start_time": [
                    "int"
                ],
                "end_time": [
                    "Optional[int]"
                ]
            }
        },
        "TrustlinesRelay.get_debt_list_of_user": {
            "name": "get_debt_list_of_user",
            "location": 325,
            "return": [
                "List[relay.ethindex_db.events_informations.DebtsListInCurrencyNetwork]"
            ],
            "arguments": {
                "self": [],
                "user_address": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "TrustlinesRelay.deploy_identity": {
            "name": "deploy_identity",
            "location": 334,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "factory_address": [
                    "str",
                    "bool",
                    "float"
                ],
                "implementation_address": [
                    "str",
                    "bool",
                    "float"
                ],
                "signature": [
                    "str",
                    "bool",
                    "float"
                ]
            }
        },
        "TrustlinesRelay.delegate_meta_transaction": {
            "name": "delegate_meta_transaction",
            "location": 339,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "meta_transaction": [
                    "str",
                    "int",
                    "Optional[Node]",
                    "None",
                    "type",
                    "typing.Type"
                ]
            }
        },
        "TrustlinesRelay.get_meta_transaction_status": {
            "name": "get_meta_transaction_status",
            "location": 342,
            "return": [
                "str",
                "Optional[Dict[str, Any]]",
                "int",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "identity_address": [
                    "str",
                    "int"
                ],
                "hash": [
                    "str",
                    "int"
                ]
            }
        },
        "TrustlinesRelay.meta_transaction_fees": {
            "name": "meta_transaction_fees",
            "location": 345,
            "return": [
                "List[relay.blockchain.delegate.DelegationFees]"
            ],
            "arguments": {
                "self": [],
                "meta_transaction": [
                    "str",
                    "int",
                    "Optional[Node]",
                    "None"
                ]
            }
        },
        "TrustlinesRelay.get_identity_info": {
            "name": "get_identity_info",
            "location": 348,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "identity_address": [
                    "str"
                ]
            }
        },
        "TrustlinesRelay._install_w3_middleware": {
            "name": "_install_w3_middleware",
            "location": 358,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrustlinesRelay._make_w3": {
            "name": "_make_w3",
            "location": 384,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrustlinesRelay._start_delegate": {
            "name": "_start_delegate",
            "location": 389,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrustlinesRelay.start": {
            "name": "start",
            "location": 411,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrustlinesRelay._start_sync_graphs_via_feed": {
            "name": "_start_sync_graphs_via_feed",
            "location": 427,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrustlinesRelay.new_network": {
            "name": "new_network",
            "location": 441,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str"
                ]
            }
        },
        "TrustlinesRelay.fully_sync_graph": {
            "name": "fully_sync_graph",
            "location": 462,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str",
                    "int"
                ]
            }
        },
        "TrustlinesRelay.new_exchange": {
            "name": "new_exchange",
            "location": 474,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str"
                ]
            }
        },
        "TrustlinesRelay.new_unw_eth": {
            "name": "new_unw_eth",
            "location": 490,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str"
                ]
            }
        },
        "TrustlinesRelay.new_token": {
            "name": "new_token",
            "location": 497,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str"
                ]
            }
        },
        "TrustlinesRelay.new_known_factory": {
            "name": "new_known_factory",
            "location": 504,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str"
                ]
            }
        },
        "TrustlinesRelay.get_networks_of_user": {
            "name": "get_networks_of_user",
            "location": 510,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "user_address": [
                    "str"
                ]
            }
        },
        "TrustlinesRelay.add_push_client_token": {
            "name": "add_push_client_token",
            "location": 518,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_address": [
                    "str"
                ],
                "client_token": [
                    "str"
                ]
            }
        },
        "TrustlinesRelay.delete_push_client_token": {
            "name": "delete_push_client_token",
            "location": 527,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_address": [
                    "str"
                ],
                "client_token": [
                    "str"
                ]
            }
        },
        "TrustlinesRelay._start_pushnotifications": {
            "name": "_start_pushnotifications",
            "location": 533,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_address": [
                    "str"
                ],
                "client_token": [
                    "str"
                ]
            }
        },
        "TrustlinesRelay._stop_pushnotifications": {
            "name": "_stop_pushnotifications",
            "location": 551,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_address": [
                    "str"
                ],
                "client_token": [
                    "str"
                ]
            }
        },
        "TrustlinesRelay.get_user_network_events": {
            "name": "get_user_network_events",
            "location": 571,
            "return": [
                "List[relay.blockchain.events.BlockchainEvent]"
            ],
            "arguments": {
                "self": [],
                "network_address": [
                    "str"
                ],
                "user_address": [
                    "str"
                ],
                "type": [
                    "str"
                ],
                "from_block": [
                    "int"
                ]
            }
        },
        "TrustlinesRelay.get_trustline_events": {
            "name": "get_trustline_events",
            "location": 589,
            "return": [
                "List[relay.blockchain.events.BlockchainEvent]"
            ],
            "arguments": {
                "self": [],
                "network_address": [
                    "str"
                ],
                "user_address": [
                    "str"
                ],
                "counterparty_address": [
                    "str"
                ],
                "type": [
                    "str"
                ],
                "from_block": [
                    "int"
                ]
            }
        },
        "TrustlinesRelay.get_network_events": {
            "name": "get_network_events",
            "location": 619,
            "return": [
                "List[relay.blockchain.events.BlockchainEvent]"
            ],
            "arguments": {
                "self": [],
                "network_address": [
                    "str"
                ],
                "type": [
                    "str"
                ],
                "from_block": [
                    "int"
                ]
            }
        },
        "TrustlinesRelay.get_user_events": {
            "name": "get_user_events",
            "location": 629,
            "return": [
                "List[relay.blockchain.events.BlockchainEvent]"
            ],
            "arguments": {
                "self": [],
                "user_address": [
                    "str"
                ],
                "event_type": [
                    "str"
                ],
                "from_block": [
                    "int"
                ],
                "contract_type": [
                    "ContractTypes"
                ]
            }
        },
        "TrustlinesRelay.get_user_token_events": {
            "name": "get_user_token_events",
            "location": 675,
            "return": [
                "List[relay.blockchain.events.BlockchainEvent]"
            ],
            "arguments": {
                "self": [],
                "token_address": [
                    "str"
                ],
                "user_address": [
                    "str"
                ],
                "type": [
                    "str"
                ],
                "from_block": [
                    "int"
                ]
            }
        },
        "TrustlinesRelay.get_token_events": {
            "name": "get_token_events",
            "location": 699,
            "return": [
                "List[relay.blockchain.events.BlockchainEvent]"
            ],
            "arguments": {
                "self": [],
                "token_address": [
                    "str"
                ],
                "type": [
                    "str"
                ],
                "from_block": [
                    "int"
                ]
            }
        },
        "TrustlinesRelay.get_exchange_events": {
            "name": "get_exchange_events",
            "location": 715,
            "return": [
                "List[relay.blockchain.events.BlockchainEvent]"
            ],
            "arguments": {
                "self": [],
                "exchange_address": [
                    "str"
                ],
                "type": [
                    "str"
                ],
                "from_block": [
                    "int"
                ]
            }
        },
        "TrustlinesRelay.get_user_exchange_events": {
            "name": "get_user_exchange_events",
            "location": 725,
            "return": [
                "List[relay.blockchain.events.BlockchainEvent]"
            ],
            "arguments": {
                "self": [],
                "exchange_address": [
                    "str"
                ],
                "user_address": [
                    "str"
                ],
                "type": [
                    "str"
                ],
                "from_block": [
                    "int"
                ]
            }
        },
        "TrustlinesRelay.get_all_user_exchange_events": {
            "name": "get_all_user_exchange_events",
            "location": 743,
            "return": [
                "List[relay.blockchain.events.BlockchainEvent]"
            ],
            "arguments": {
                "self": [],
                "user_address": [
                    "str"
                ],
                "type": [
                    "str"
                ],
                "from_block": [
                    "int"
                ]
            }
        },
        "TrustlinesRelay._apply_feed_update_on_graph": {
            "name": "_apply_feed_update_on_graph",
            "location": 756,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "feed_update": [
                    "Iterable[relay.ethindex_db.sync_updates.FeedUpdate]"
                ]
            }
        },
        "TrustlinesRelay._publish_feed_update_events": {
            "name": "_publish_feed_update_events",
            "location": 767,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "feed_update": [
                    "Iterable[relay.ethindex_db.sync_updates.FeedUpdate]"
                ]
            }
        },
        "TrustlinesRelay._load_gas_price_settings": {
            "name": "_load_gas_price_settings",
            "location": 814,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gas_price_settings": [
                    "dict"
                ]
            }
        },
        "TrustlinesRelay._load_orderbook": {
            "name": "_load_orderbook",
            "location": 831,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrustlinesRelay._load_addresses": {
            "name": "_load_addresses",
            "location": 837,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrustlinesRelay._start_listen_network": {
            "name": "_start_listen_network",
            "location": 866,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str",
                    "int",
                    "bytes",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "TrustlinesRelay._start_push_service": {
            "name": "_start_push_service",
            "location": 880,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrustlinesRelay._start_pushnotifications_for_registered_users": {
            "name": "_start_pushnotifications_for_registered_users",
            "location": 889,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrustlinesRelay._process_transfer": {
            "name": "_process_transfer",
            "location": 909,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transfer_event": [
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Dict[int, dict]",
                    "dict[int, dict[, ]]"
                ]
            }
        },
        "TrustlinesRelay._process_trustline_request": {
            "name": "_process_trustline_request",
            "location": 912,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trustline_request_event": [
                    "dict[, ]",
                    "dict",
                    "typing.Callable[..., None]",
                    "watchdog.events.FileSystemEvent",
                    "Callable[..., None]"
                ]
            }
        },
        "TrustlinesRelay._process_trustline_request_cancel": {
            "name": "_process_trustline_request_cancel",
            "location": 916,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trustline_request_cancel_event": [
                    "dict[str, typing.Any]",
                    "str",
                    "Dict[str, Any]",
                    "float",
                    "web3.types.LogReceipt"
                ]
            }
        },
        "TrustlinesRelay._generate_trustline_events": {
            "name": "_generate_trustline_events",
            "location": 922,
            "return": [
                "List[relay.events.BalanceEvent]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrustlinesRelay._generate_network_balance_event": {
            "name": "_generate_network_balance_event",
            "location": 937,
            "return": [
                "relay.events.NetworkBalanceEvent"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrustlinesRelay._publish_trustline_events": {
            "name": "_publish_trustline_events",
            "location": 946,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrustlinesRelay._publish_network_balance_event": {
            "name": "_publish_network_balance_event",
            "location": 956,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrustlinesRelay._process_trustline_update": {
            "name": "_process_trustline_update",
            "location": 962,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trustline_update_event": [
                    "str",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "None",
                    "Optional[str]",
                    "raiden.blockchain.events.Event"
                ]
            }
        },
        "TrustlinesRelay._publish_blockchain_event": {
            "name": "_publish_blockchain_event",
            "location": 966,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "watchdog.events.FileSystemEvent",
                    "dict"
                ]
            }
        },
        "TrustlinesRelay._publish_user_event": {
            "name": "_publish_user_event",
            "location": 972,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Optional[str]",
                    "str",
                    "Dict[str, Any]",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TrustlinesRelay._start_sync_graphs_via_feed.sync": {
            "name": "sync",
            "location": 431,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "TrustlinesRelay._publish_feed_update_events.unique_trustline_id": {
            "name": "unique_trustline_id",
            "location": 775,
            "return": [
                "bool"
            ],
            "arguments": {
                "from_": [
                    "List[str]",
                    "int",
                    "Tuple[int, int, int]",
                    "bytes",
                    "Optional[int]"
                ],
                "to": [
                    "List[str]",
                    "int",
                    "Tuple[int, int, int]",
                    "bytes",
                    "Optional[int]"
                ],
                "network_address": [
                    "int",
                    "str",
                    "float",
                    "bytes",
                    "Optional[int]"
                ]
            }
        }
    },
    "relay-master/src/relay/signing.py": {
        "pack": {
            "name": "pack",
            "location": 8,
            "return": [
                "bytes"
            ],
            "arguments": {}
        },
        "keccak256": {
            "name": "keccak256",
            "location": 48,
            "return": [
                "bytes"
            ],
            "arguments": {}
        },
        "eth_sign": {
            "name": "eth_sign",
            "location": 52,
            "return": [
                "Tuple[(int, bytes, bytes)]"
            ],
            "arguments": {
                "hash": [
                    "bytes"
                ],
                "key": [
                    "bytes"
                ]
            }
        },
        "eth_validate": {
            "name": "eth_validate",
            "location": 65,
            "return": [
                "bool",
                "int",
                "List[Callable]"
            ],
            "arguments": {
                "msg_hash": [
                    "int",
                    "str",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ],
                "vrs": [
                    "bytes",
                    "int",
                    "tuple[typing.Union[int,int,int]]",
                    "umbral.keys.UmbralPublicKey",
                    "Tuple[int, int, int]"
                ],
                "address": [
                    "str",
                    "bytes",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "priv_to_pubkey": {
            "name": "priv_to_pubkey",
            "location": 85,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "key": [
                    "str"
                ]
            }
        },
        "pack.format_int": {
            "name": "format_int",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "int"
                ],
                "size": [
                    "int"
                ]
            }
        }
    },
    "relay-master/src/relay/signing_middleware.py": {
        "_eth_send_transaction": {
            "name": "_eth_send_transaction",
            "location": 22,
            "return": [
                "str",
                "typing.Pattern",
                "None"
            ],
            "arguments": {
                "make_request": [
                    "str",
                    "bytes",
                    "dict",
                    "dict[, ]"
                ],
                "w3": [
                    "int",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "method": [
                    "str",
                    "bytes",
                    "dict",
                    "dict[, ]"
                ],
                "params": [
                    "str",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "make_prepare_signing_middleware": {
            "name": "make_prepare_signing_middleware",
            "location": 45,
            "return": [
                "Callable[([Any, Any], Any)]"
            ],
            "arguments": {
                "default_from_address": [
                    "Callable",
                    "typing.Callable[, ]",
                    "Coroutine[Any, Any, Any]",
                    "collections.abc.Coroutine"
                ]
            }
        },
        "install_signing_middleware": {
            "name": "install_signing_middleware",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "w3": [],
                "account": [
                    "str"
                ]
            }
        },
        "make_prepare_signing_middleware.prepare_signing_middleware": {
            "name": "prepare_signing_middleware",
            "location": 50,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "make_request": [],
                "w3": []
            }
        },
        "make_prepare_signing_middleware.prepare_signing_middleware.middleware": {
            "name": "middleware",
            "location": 51,
            "return": [
                "bytes",
                "dict",
                "int",
                "List[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "method": [
                    "dict",
                    "str",
                    "Optional[\"Response\"]"
                ],
                "params": [
                    "dict",
                    "str"
                ]
            }
        }
    },
    "relay-master/src/relay/streams.py": {
        "Client.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.register": {
            "name": "register",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subscription": [
                    "Subscription"
                ]
            }
        },
        "Client.unregister": {
            "name": "unregister",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subscription": [
                    "Subscription"
                ]
            }
        },
        "Client.send": {
            "name": "send",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subscription": [
                    "Subscription"
                ],
                "event": [
                    "relay.events.Event"
                ]
            }
        },
        "Client._execute_send": {
            "name": "_execute_send",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subscription": [
                    "Subscription"
                ],
                "event": [
                    "relay.events.Event"
                ]
            }
        },
        "Client.close": {
            "name": "close",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Subject.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Subject.subscribe": {
            "name": "subscribe",
            "location": 77,
            "return": [
                "Subscription"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "Client"
                ]
            }
        },
        "Subject.unsubscribe": {
            "name": "unsubscribe",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subscription": [
                    "Subscription"
                ]
            }
        },
        "Subject.publish": {
            "name": "publish",
            "location": 95,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "relay.events.Event"
                ]
            }
        },
        "Subject._create_id": {
            "name": "_create_id",
            "location": 109,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "Subscription.__init__": {
            "name": "__init__",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "Client"
                ]
            }
        },
        "Subscription.notify": {
            "name": "notify",
            "location": 121,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "relay.events.Event"
                ]
            }
        },
        "Subscription.unsubscribe": {
            "name": "unsubscribe",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessagingSubject.__init__": {
            "name": "__init__",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessagingSubject.subscribe": {
            "name": "subscribe",
            "location": 144,
            "return": [
                "MessagingSubscription"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "Client"
                ]
            }
        },
        "MessagingSubject.get_missed_messages": {
            "name": "get_missed_messages",
            "location": 161,
            "return": [
                "Iterable[relay.events.MessageEvent]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessagingSubject.publish": {
            "name": "publish",
            "location": 166,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "relay.events.Event"
                ]
            }
        },
        "MessagingSubscription.__init__": {
            "name": "__init__",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "Client"
                ]
            }
        }
    },
    "relay-master/src/relay/utils.py": {
        "merge_two_dicts": {
            "name": "merge_two_dicts",
            "location": 5,
            "return": [
                "dict[, ]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "int"
                ],
                "y": [
                    "dict",
                    "dict[, ]",
                    "Union[Dict, None]",
                    "None",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "trim_args": {
            "name": "trim_args",
            "location": 12,
            "return": [
                "dict[, ]",
                "str",
                "bool",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "args": []
            }
        },
        "sha3": {
            "name": "sha3",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "get_version": {
            "name": "get_version",
            "location": 23,
            "return": [
                "typing.Text",
                "str",
                "Optional[List[str]]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {}
        }
    },
    "relay-master/src/relay/web3provider.py": {
        "create_provider_from_config": {
            "name": "create_provider_from_config",
            "location": 17,
            "return": [
                "dict",
                "T",
                "int",
                "str",
                "dict[, ]",
                "list[]",
                "HTTPProvider",
                "IPCProvider"
            ],
            "arguments": {
                "rpc_config": [
                    "MutableMapping"
                ]
            }
        }
    },
    "relay-master/src/relay/__init__.py": {},
    "relay-master/src/relay/api/app.py": {
        "ApiApp": {
            "name": "ApiApp",
            "location": 95,
            "return": [
                "Flask",
                "flask.Flask",
                "\"App\""
            ],
            "arguments": {
                "trustlines": [
                    "str"
                ]
            }
        },
        "handle_request_parsing_error": {
            "name": "handle_request_parsing_error",
            "location": 268,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "err": [
                    "str",
                    "callable",
                    "typing.Callable[, ]",
                    "Optional[str]",
                    "None"
                ],
                "req": [
                    "str",
                    "bool",
                    "bytes"
                ],
                "schema": [
                    "str",
                    "bool",
                    "bytes"
                ],
                "status_code": [
                    "str",
                    "bool",
                    "bytes"
                ],
                "headers": [
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "handle_error": {
            "name": "handle_error",
            "location": 281,
            "return": [
                "tuple[int]",
                "str",
                "Sequence"
            ],
            "arguments": {
                "e": [
                    "dict",
                    "dict[, ]",
                    "Exception",
                    "Dict[str, Any]",
                    "str",
                    "dict[str, typing.Any]",
                    "Set[str]",
                    "set[str]"
                ]
            }
        },
        "AddressConverter.to_python": {
            "name": "to_python",
            "location": 84,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "bytes",
                    "float",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "AddressConverter.to_url": {
            "name": "to_url",
            "location": 89,
            "return": [
                "None",
                "Iterable[Mapping[str, Any]]",
                "Optional[bool]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bytes",
                    "bool",
                    "Union[str, bytes, int]"
                ]
            }
        },
        "ApiApp.add_resource": {
            "name": "add_resource",
            "location": 105,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "resource": [
                    "str",
                    "pathlib.Path",
                    "bool"
                ],
                "url": [
                    "str",
                    "pathlib.Path",
                    "bool"
                ]
            }
        }
    },
    "relay-master/src/relay/api/fields.py": {
        "Address._serialize": {
            "name": "_serialize",
            "location": 14,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "dict"
                ],
                "attr": [
                    "str",
                    "dict"
                ],
                "obj": [
                    "str",
                    "dict"
                ]
            }
        },
        "Address._deserialize": {
            "name": "_deserialize",
            "location": 17,
            "return": [
                "int",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "dict",
                    "Iterable",
                    "Optional[Iterable]",
                    "MutableMapping[str, Any]"
                ],
                "attr": [
                    "Optional[str]",
                    "str",
                    "dict"
                ],
                "data": [
                    "dict",
                    "str"
                ]
            }
        },
        "Hash._serialize": {
            "name": "_serialize",
            "location": 27,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "_T0"
                ],
                "attr": [
                    "str"
                ],
                "obj": [
                    "str"
                ]
            }
        },
        "Hash._deserialize": {
            "name": "_deserialize",
            "location": 35,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "_T0"
                ],
                "attr": [
                    "Optional[str]",
                    "str",
                    "dict"
                ],
                "data": [
                    "dict",
                    "str"
                ]
            }
        },
        "BigInteger._serialize": {
            "name": "_serialize",
            "location": 45,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "bytes"
                ],
                "attr": [
                    "str",
                    "dict"
                ],
                "obj": [
                    "str",
                    "dict"
                ]
            }
        },
        "BigInteger._deserialize": {
            "name": "_deserialize",
            "location": 50,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Optional[BaseException]",
                    "Optional[str]",
                    "bytes",
                    "Optional[int]"
                ],
                "attr": [
                    "str",
                    "Union[str, \"DatabaseURL\"]",
                    "Optional[str]",
                    "Tuple[int, int]"
                ],
                "data": [
                    "dict",
                    "str"
                ]
            }
        },
        "HexBytes._serialize": {
            "name": "_serialize",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bytes",
                    "int",
                    "str",
                    "dict"
                ],
                "attr": [
                    "str"
                ],
                "obj": [
                    "str"
                ]
            }
        },
        "HexBytes._deserialize": {
            "name": "_deserialize",
            "location": 65,
            "return": [
                "str",
                "bytearray",
                "bytes",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "AnyStr",
                    "Optional[List[Any]]",
                    "List[str]",
                    "Optional[Callable]"
                ],
                "attr": [
                    "dict",
                    "str"
                ],
                "data": [
                    "dict",
                    "str"
                ]
            }
        },
        "HexEncodedBytes._serialize": {
            "name": "_serialize",
            "location": 78,
            "return": [
                "int",
                "str",
                "Optional[float]",
                "Union[int, Tuple[int, ...]]",
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bytearray",
                    "float",
                    "Callable[..., None]",
                    "Callable",
                    "T",
                    "int"
                ],
                "attr": [
                    "str"
                ],
                "obj": [
                    "str"
                ]
            }
        },
        "HexEncodedBytes._deserialize": {
            "name": "_deserialize",
            "location": 86,
            "return": [
                "int",
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "type",
                    "int",
                    "bytes"
                ],
                "attr": [
                    "str",
                    "Optional[str]",
                    "Union[str, Iterable[str]]"
                ],
                "data": [
                    "dict",
                    "str"
                ]
            }
        },
        "FeePayerField._serialize": {
            "name": "_serialize",
            "location": 101,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "tuple"
                ],
                "attr": [
                    "str"
                ],
                "obj": [
                    "str"
                ]
            }
        },
        "FeePayerField._deserialize": {
            "name": "_deserialize",
            "location": 109,
            "return": [
                "relay.network_graph.payment_path.FeePayer"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Dict[str, Any]",
                    "str",
                    "Iterable",
                    "Optional[Iterable]",
                    "bool"
                ],
                "attr": [
                    "str"
                ],
                "data": [
                    "dict",
                    "str"
                ]
            }
        },
        "MetaTransactionStatusField._serialize": {
            "name": "_serialize",
            "location": 122,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "dict",
                    "str",
                    "Sequence[str]"
                ],
                "attr": [
                    "str"
                ],
                "obj": [
                    "str"
                ]
            }
        },
        "MetaTransactionStatusField._deserialize": {
            "name": "_deserialize",
            "location": 130,
            "return": [
                "str",
                "int",
                "bool",
                "Counter",
                "Optional[str]",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[str]",
                    "Union[Dict, List]",
                    "Optional[Mapping[str, Any]]",
                    "dict"
                ],
                "attr": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ],
                "data": [
                    "dict",
                    "str"
                ]
            }
        },
        "TransactionStatusField._serialize": {
            "name": "_serialize",
            "location": 143,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Callable",
                    "str",
                    "T",
                    "bytes"
                ],
                "attr": [
                    "str"
                ],
                "obj": [
                    "str"
                ]
            }
        },
        "TransactionStatusField._deserialize": {
            "name": "_deserialize",
            "location": 151,
            "return": [
                "str",
                "int",
                "bool",
                "Counter",
                "Optional[str]",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[str]",
                    "str",
                    "Dict[str, Any]",
                    "Union[Dict, List]",
                    "dict",
                    "Optional[Mapping[str, Any]]"
                ],
                "attr": [
                    "Dict[str, Any]",
                    "dict",
                    "str",
                    "AnyStr"
                ],
                "data": [
                    "dict",
                    "str"
                ]
            }
        },
        "OperationTypeField._serialize": {
            "name": "_serialize",
            "location": 164,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Dict[type, Callable]",
                    "dict",
                    "str",
                    "Callable",
                    "\"Atom\"",
                    "Sequence[Union[str, int]]"
                ],
                "attr": [
                    "str"
                ],
                "obj": [
                    "str"
                ]
            }
        },
        "OperationTypeField._deserialize": {
            "name": "_deserialize",
            "location": 172,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool",
                    "Callable",
                    "Dict[str, str]"
                ],
                "attr": [
                    "str",
                    "Mapping[str, T]",
                    "Union[int, bytes]"
                ],
                "data": [
                    "dict",
                    "str"
                ]
            }
        }
    },
    "relay-master/src/relay/api/resources.py": {
        "abort_if_unknown_network": {
            "name": "abort_if_unknown_network",
            "location": 68,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "trustlines": [
                    "int",
                    "Callable",
                    "str"
                ],
                "network_address": [
                    "str",
                    "int",
                    "IO[str]",
                    "typing.IO"
                ]
            }
        },
        "abort_if_frozen_network": {
            "name": "abort_if_frozen_network",
            "location": 73,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "trustlines": [
                    "int",
                    "Callable",
                    "str"
                ],
                "network_address": [
                    "float",
                    "dict",
                    "str",
                    "dict[, ]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "abort_if_unknown_or_frozen_network": {
            "name": "abort_if_unknown_or_frozen_network",
            "location": 78,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "trustlines": [
                    "int",
                    "List[int]",
                    "list[int]"
                ],
                "network_address": [
                    "int",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "dump_result_with_schema": {
            "name": "dump_result_with_schema",
            "location": 83,
            "return": [
                "int",
                "bool",
                "Tuple[str, List[str]]",
                "Tuple[str, str]",
                "float",
                "List[str]"
            ],
            "arguments": {
                "schema": [
                    "typing.IO",
                    "IO[str]",
                    "bool",
                    "typing.Type",
                    "Type",
                    "int"
                ]
            }
        },
        "handle_meta_transaction_exceptions": {
            "name": "handle_meta_transaction_exceptions",
            "location": 94,
            "return": [
                "str",
                "bool",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "function_to_call": [
                    "str",
                    "bool",
                    "float",
                    "Callable[[], bool]",
                    "typing.Callable[[], bool]",
                    "List[Dict[str, str]]",
                    "list[dict[str, str]]"
                ]
            }
        },
        "_id": {
            "name": "_id",
            "location": 198,
            "return": [
                "Callable",
                "str",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "network_address": [
                    "raiden.utils.NetworkTimeout",
                    "raiden.utils.Address",
                    "raiden.utils.TokenAmount",
                    "tests.pathfinding.utils.SimpleReachabilityContainer"
                ],
                "a_address": [
                    "raiden.utils.Address",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.PaymentNetworkID",
                    "Callable"
                ],
                "b_address": [
                    "raiden.utils.Address",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.PaymentNetworkID",
                    "Callable"
                ]
            }
        },
        "_get_extended_account_summary": {
            "name": "_get_extended_account_summary",
            "location": 205,
            "return": [
                "int",
                "flask.Response",
                "Exception",
                "dict",
                "Dict[str, Any]",
                "cmk.utils.type_defs.UserId"
            ],
            "arguments": {
                "graph": [
                    "Callable"
                ],
                "network_address": [
                    "Optional[bytes]",
                    "bytes",
                    "Optional[utils.ps.Section]",
                    "None",
                    "Optional[int]",
                    "int"
                ],
                "a_address": [
                    "Callable",
                    "typing.Callable[, ]",
                    "bool",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ],
                "b_address": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "timestamp": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "dump_result_with_schema.dump_result": {
            "name": "dump_result",
            "location": 88,
            "return": [
                "int",
                "bool",
                "List[List[str]]",
                "str"
            ],
            "arguments": {
                "wrapped": [
                    "str",
                    "Callable",
                    "bool"
                ],
                "instance": [
                    "IO[str]",
                    "Type",
                    "bool",
                    "int"
                ],
                "args": [],
                "kwargs": []
            }
        },
        "handle_meta_transaction_exceptions.handle_exceptions": {
            "name": "handle_exceptions",
            "location": 95,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "meta_transaction": [
                    "int",
                    "Union[int, str]"
                ]
            }
        },
        "Version.get": {
            "name": "get",
            "location": 142,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "NetworkList.__init__": {
            "name": "__init__",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trustlines": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "NetworkList.get": {
            "name": "get",
            "location": 151,
            "return": [
                "str",
                "Union[int, float]",
                "list",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Network.__init__": {
            "name": "__init__",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trustlines": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Network.get": {
            "name": "get",
            "location": 160,
            "return": [
                "str",
                "Union[int, float]",
                "list",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "network_address": [
                    "googleapicliendiscovery.Resource"
                ]
            }
        },
        "UserList.__init__": {
            "name": "__init__",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trustlines": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "UserList.get": {
            "name": "get",
            "location": 169,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "network_address": [
                    "int"
                ]
            }
        },
        "User.__init__": {
            "name": "__init__",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trustlines": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "User.get": {
            "name": "get",
            "location": 179,
            "return": [
                "Optional[bool]",
                "Optional[int]",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "network_address": [
                    "typing.Callable[, ]",
                    "Callable",
                    "raiden.utils.Address"
                ],
                "user_address": [
                    "str",
                    "raiden.utils.PaymentNetworkID"
                ]
            }
        },
        "ContactList.__init__": {
            "name": "__init__",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trustlines": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "ContactList.get": {
            "name": "get",
            "location": 191,
            "return": [
                "Optional[List[str]]",
                "bool",
                "Union[int, float, complex]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "network_address": [
                    "raiden.utils.Address",
                    "raiden.utils.ChannelID",
                    "raiden.utils.MessageID",
                    "mode.utils.types.trees.NodeT"
                ],
                "user_address": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Trustline.__init__": {
            "name": "__init__",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trustlines": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Trustline.get": {
            "name": "get",
            "location": 221,
            "return": [
                "bool",
                "Callable[[], T]",
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "network_address": [
                    "str",
                    "int",
                    "Sequence[int]",
                    "typing.Sequence[int]"
                ],
                "a_address": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]",
                    "List[float]",
                    "list[float]",
                    "List[str]",
                    "list[str]"
                ],
                "b_address": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]",
                    "List[float]",
                    "list[float]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "TrustlineList.__init__": {
            "name": "__init__",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trustlines": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "TrustlineList.get": {
            "name": "get",
            "location": 235,
            "return": [
                "list[]",
                "bool",
                "Callable[[], T]",
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "network_address": [
                    "Optional[bool]",
                    "bool",
                    "Callable",
                    "None",
                    "List[str]",
                    "typing.Callable[, ]",
                    "int",
                    "list[str]"
                ],
                "user_address": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "UserTrustlines.__init__": {
            "name": "__init__",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trustlines": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "UserTrustlines.get": {
            "name": "get",
            "location": 257,
            "return": [
                "list[]",
                "bytes",
                "List[str]",
                "List[Dict]",
                "str",
                "Union[str, List[Any]]",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "user_address": [
                    "str",
                    "Optional[cmk.utils.type_defs.UserId]",
                    "None",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ]
            }
        },
        "NetworkTrustlinesList.__init__": {
            "name": "__init__",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trustlines": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "NetworkTrustlinesList.get": {
            "name": "get",
            "location": 279,
            "return": [
                "list[]",
                "bool",
                "Callable[[], T]",
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "network_address": [
                    "str",
                    "bool",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "MaxCapacityPath.__init__": {
            "name": "__init__",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trustlines": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "MaxCapacityPath.post": {
            "name": "post",
            "location": 303,
            "return": [
                "dict[typing.Text, str]",
                "str",
                "ulauncher.api.server.GithubExtension.GithubExtension"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "network_address": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "UserEventsNetwork.__init__": {
            "name": "__init__",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trustlines": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "UserEventsNetwork.get": {
            "name": "get",
            "location": 336,
            "return": [
                "str",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "network_address": [
                    "int",
                    "raiden.utils.SecretRegistryAddress"
                ],
                "user_address": [
                    "str",
                    "Optional[\"LocalizedString\"]",
                    "None"
                ]
            }
        },
        "TrustlineEvents.__init__": {
            "name": "__init__",
            "location": 347,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trustlines": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "TrustlineEvents.get": {
            "name": "get",
            "location": 361,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "network_address": [
                    "int",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "user_address": [
                    "str"
                ],
                "counter_party_address": [
                    "str"
                ]
            }
        },
        "UserEvents.__init__": {
            "name": "__init__",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trustlines": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "UserEvents.get": {
            "name": "get",
            "location": 401,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "user_address": [
                    "str",
                    "int"
                ]
            }
        },
        "EventsNetwork.__init__": {
            "name": "__init__",
            "location": 415,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trustlines": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "EventsNetwork.get": {
            "name": "get",
            "location": 429,
            "return": [
                "str",
                "Union[str, int]",
                "bool",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "network_address": [
                    "str",
                    "bytes",
                    "int",
                    "raiden.utils.Address"
                ]
            }
        },
        "UserAccruedInterestList.__init__": {
            "name": "__init__",
            "location": 440,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trustlines": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "UserAccruedInterestList.get": {
            "name": "get",
            "location": 450,
            "return": [
                "list[dict[typing.Text, typing.Union[str,dict[str, typing.Any]]]]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "network_address": [
                    "mode.utils.types.trees.NodeT"
                ],
                "user_address": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TrustlineAccruedInterestList.__init__": {
            "name": "__init__",
            "location": 475,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trustlines": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "TrustlineAccruedInterestList.get": {
            "name": "get",
            "location": 485,
            "return": [
                "dict[typing.Text, typing.Union[int,list[],str]]",
                "str",
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "network_address": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "user_address": [
                    "str",
                    "int",
                    "raiden.utils.ChannelID",
                    "raiden.utils.BlockIdentifier",
                    "raiden.utils.Address",
                    "raiden.utils.MessageID",
                    "raiden.utils.TokenNetworkAddress"
                ],
                "counterparty_address": [
                    "str",
                    "int",
                    "raiden.utils.ChannelID",
                    "raiden.utils.BlockIdentifier",
                    "raiden.utils.Address",
                    "raiden.utils.MessageID",
                    "raiden.utils.TokenNetworkAddress"
                ]
            }
        },
        "UserEarnedMediationFeesList.__init__": {
            "name": "__init__",
            "location": 501,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trustlines": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "UserEarnedMediationFeesList.get": {
            "name": "get",
            "location": 511,
            "return": [
                "dict[typing.Text, typing.Union[typing.Sequence[str],int,set[],str,None,typing.Callable[dict[, ], None]]]",
                "bytes",
                "recidiviz.utils.regions.Region",
                "str"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "network_address": [
                    "str",
                    "Optional[str]",
                    "Callable[[dict], None]",
                    "bool",
                    "None",
                    "typing.Callable[dict[, ], None]"
                ],
                "user_address": [
                    "str",
                    "int"
                ]
            }
        },
        "UserDebtsLists.__init__": {
            "name": "__init__",
            "location": 527,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trustlines": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "UserDebtsLists.get": {
            "name": "get",
            "location": 531,
            "return": [
                "str",
                "int",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": [],
                "user_address": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "TotalTransferredSum.__init__": {
            "name": "__init__",
            "location": 536,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trustlines": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "TotalTransferredSum.get": {
            "name": "get",
            "location": 546,
            "return": [
                "dict[typing.Text, typing.Union[bool,typing.DefaultDict,float,str,list[]]]",
                "Optional[int]",
                "Dict[str, int]",
                "int",
                "str",
                "mode.utils.types.trees.NodeT"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "network_address": [
                    "str",
                    "int",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ],
                "sender_address": [
                    "bool"
                ],
                "receiver_address": [
                    "bool"
                ]
            }
        },
        "TransferInformation.__init__": {
            "name": "__init__",
            "location": 567,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trustlines": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "TransferInformation.get": {
            "name": "get",
            "location": 572,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "AppliedDelegationFees.__init__": {
            "name": "__init__",
            "location": 608,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trustlines": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "AppliedDelegationFees.get": {
            "name": "get",
            "location": 613,
            "return": [
                "bool",
                "Callable[[], bool]",
                "List[Dict[str, str]]",
                "int",
                "Dict[str, Tuple[str, str]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "TransactionInfos.__init__": {
            "name": "__init__",
            "location": 620,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trustlines": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "TransactionInfos.get": {
            "name": "get",
            "location": 624,
            "return": [
                "bool",
                "int",
                "Optional[Iterable[str]]"
            ],
            "arguments": {
                "self": [],
                "user_address": [
                    "str",
                    "Optional[str]",
                    "None",
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Relay.__init__": {
            "name": "__init__",
            "location": 629,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trustlines": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Relay.post": {
            "name": "post",
            "location": 635,
            "return": [
                "Optional[int]",
                "float",
                "bool"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "TransactionStatus.__init__": {
            "name": "__init__",
            "location": 643,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trustlines": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "TransactionStatus.get": {
            "name": "get",
            "location": 647,
            "return": [
                "dict[typing.Text, ]",
                "Optional[List[Any]]",
                "Optional[Dict[str, Any]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "transaction_hash": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Set[Hashable]",
                    "bool",
                    "set[typing.Hashable]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "RelayMetaTransaction.__init__": {
            "name": "__init__",
            "location": 652,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trustlines": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "RelayMetaTransaction.post": {
            "name": "post",
            "location": 662,
            "return": [
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "Status.__init__": {
            "name": "__init__",
            "location": 674,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trustlines": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Status.get": {
            "name": "get",
            "location": 678,
            "return": [
                "dict[typing.Text, ]",
                "bytes",
                "bool",
                "str",
                "cmk.utils.type_defs.UserId"
            ],
            "arguments": {
                "self": [],
                "identity_address": [
                    "int",
                    "str",
                    "bool"
                ],
                "meta_transaction_hash": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "MetaTransactionFees.__init__": {
            "name": "__init__",
            "location": 687,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trustlines": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "MetaTransactionFees.post": {
            "name": "post",
            "location": 698,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "Balance.__init__": {
            "name": "__init__",
            "location": 707,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trustlines": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Balance.get": {
            "name": "get",
            "location": 710,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "user_address": [
                    "str"
                ]
            }
        },
        "Block.__init__": {
            "name": "__init__",
            "location": 715,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trustlines": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Block.get": {
            "name": "get",
            "location": 718,
            "return": [
                "str",
                "float",
                "mode.utils.types.trees.NodeT"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestEther.__init__": {
            "name": "__init__",
            "location": 723,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trustlines": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "RequestEther.post": {
            "name": "post",
            "location": 726,
            "return": [
                "float",
                "Callable",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeployIdentity.__init__": {
            "name": "__init__",
            "location": 732,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trustlines": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "DeployIdentity.post": {
            "name": "post",
            "location": 743,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "IdentityInfos.__init__": {
            "name": "__init__",
            "location": 765,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trustlines": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "IdentityInfos.get": {
            "name": "get",
            "location": 769,
            "return": [
                "str",
                "Union[int, float]",
                "list",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "identity_address": [
                    "str",
                    "int"
                ]
            }
        },
        "Factories.__init__": {
            "name": "__init__",
            "location": 777,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trustlines": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Factories.get": {
            "name": "get",
            "location": 780,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.__init__": {
            "name": "__init__",
            "location": 785,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trustlines": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Path.post": {
            "name": "post",
            "location": 799,
            "return": [
                "PaymentPath",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "network_address": [
                    "Optional[Iterable[T]]",
                    "typing.Iterable[T]",
                    "bool",
                    "None",
                    "flask.Flask"
                ]
            }
        },
        "CloseTrustline.__init__": {
            "name": "__init__",
            "location": 846,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trustlines": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "CloseTrustline.post": {
            "name": "post",
            "location": 858,
            "return": [
                "str",
                "Optional[List[str]]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "network_address": [
                    "int"
                ]
            }
        },
        "GraphImage.__init__": {
            "name": "__init__",
            "location": 880,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trustlines": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "GraphImage.get": {
            "name": "get",
            "location": 883,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "network_address": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "GraphDump.__init__": {
            "name": "__init__",
            "location": 891,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trustlines": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "GraphDump.get": {
            "name": "get",
            "location": 894,
            "return": [
                "int",
                "List[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "network_address": [
                    "bool",
                    "typing.Sequence[int]",
                    "raiden.utils.Any",
                    "Sequence[int]"
                ]
            }
        }
    },
    "relay-master/src/relay/api/schemas.py": {
        "MetaTransactionSchema._validate": {
            "name": "_validate",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes",
                    "list[str]",
                    "List[str]",
                    "Dict[str, str]"
                ]
            }
        },
        "MetaTransactionSchema.make_meta_transaction": {
            "name": "make_meta_transaction",
            "location": 58,
            "return": [
                "MetaTransaction",
                "str",
                "Mapping[str, Any]",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "dict[, ]",
                    "str",
                    "Optional[str]",
                    "bytes",
                    "None"
                ],
                "partial": [
                    "bool",
                    "bytes",
                    "str",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]",
                    "List[str]",
                    "list[str]"
                ],
                "many": [
                    "bool",
                    "bytes",
                    "str",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "MetaTransactionFeeSchema.set_default_currency_network": {
            "name": "set_default_currency_network",
            "location": 89,
            "return": [
                "dict",
                "Dict[str, List[int]]",
                "Optional[float]",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Optional[dict]",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "None",
                    "bytes",
                    "dict",
                    "dict[str, typing.Any]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "AnyEventSchema.get_obj_type": {
            "name": "get_obj_type",
            "location": 202,
            "return": [
                "typing.Text",
                "pynmrstar.Schema",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "T",
                    "Union[int, slice]"
                ]
            }
        },
        "AnyEventSchema._dump": {
            "name": "_dump",
            "location": 214,
            "return": [
                "bool",
                "list[typing.Callable[[], typing.Any]]",
                "List[pydantic.fields.ModelField]",
                "dict[str, int]",
                "Optional[Union[str, Any]]",
                "list[str]",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bool",
                    "List[str]",
                    "list[str]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "PaymentPathSchema.make_payment_path": {
            "name": "make_payment_path",
            "location": 280,
            "return": [
                "PaymentPath",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Callable[[Any], None]",
                    "typing.Callable[typing.Any, None]",
                    "str",
                    "dict",
                    "bytes",
                    "dict[, ]",
                    "Dict[str, List[Any]]",
                    "dict[str, list[typing.Any]]"
                ],
                "partial": [
                    "str",
                    "Optional[bytes]",
                    "bytes",
                    "List[dict]",
                    "None",
                    "List[Dict[str, Any]]",
                    "list[dict[, ]]",
                    "list[dict[str, typing.Any]]"
                ],
                "many": [
                    "str",
                    "Optional[bytes]",
                    "bytes",
                    "List[dict]",
                    "None",
                    "List[Dict[str, Any]]",
                    "list[dict[, ]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "TransferIdentifierSchema.validate": {
            "name": "validate",
            "location": 346,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict"
                ],
                "partial": [
                    "int",
                    "bytes",
                    "dict[, ]",
                    "bool",
                    "dict"
                ],
                "many": [
                    "int",
                    "bytes",
                    "dict[, ]",
                    "bool",
                    "dict"
                ]
            }
        }
    },
    "relay-master/src/relay/api/__init__.py": {},
    "relay-master/src/relay/api/exchange/resources.py": {
        "abort_if_invalid_order_hash": {
            "name": "abort_if_invalid_order_hash",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "order_hash": [
                    "list[frozenset]",
                    "list[int]",
                    "int",
                    "Sequence[T]",
                    "List[FrozenSet[str]]",
                    "List[int]",
                    "T"
                ]
            }
        },
        "abort_if_unknown_exchange": {
            "name": "abort_if_unknown_exchange",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "trustlines": [
                    "str",
                    "Optional[str]",
                    "Callable[[dict], None]",
                    "None",
                    "typing.Callable[dict[, ], None]",
                    "List[str]",
                    "list[str]"
                ],
                "exchange_address": [
                    "str",
                    "float",
                    "relay.exchange.order.Order"
                ]
            }
        },
        "OrderBook.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trustlines": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "OrderBook.get": {
            "name": "get",
            "location": 46,
            "return": [
                "dict[typing.Text, ]",
                "Optional[bool]",
                "Optional[int]",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "OrderDetail.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trustlines": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "OrderDetail.get": {
            "name": "get",
            "location": 70,
            "return": [
                "str",
                "bool",
                "int",
                "float",
                "list[int]",
                "typing.Callable[typing.Any, tuple[]]",
                "None"
            ],
            "arguments": {
                "self": [],
                "order_hash": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "Orders.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trustlines": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Orders.get": {
            "name": "get",
            "location": 97,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "OrderSubmission.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trustlines": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "OrderSubmission.post": {
            "name": "post",
            "location": 138,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "ExchangeAddresses.__init__": {
            "name": "__init__",
            "location": 174,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "trustlines": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "ExchangeAddresses.get": {
            "name": "get",
            "location": 177,
            "return": [
                "list[]",
                "str",
                "List[Dict]",
                "list",
                "List[int]",
                "List[List[Any]]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnwEthAddresses.__init__": {
            "name": "__init__",
            "location": 182,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "trustlines": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "UnwEthAddresses.get": {
            "name": "get",
            "location": 185,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserEventsExchange.__init__": {
            "name": "__init__",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trustlines": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "UserEventsExchange.get": {
            "name": "get",
            "location": 204,
            "return": [
                "str",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "exchange_address": [
                    "int"
                ],
                "user_address": [
                    "str",
                    "Optional[\"LocalizedString\"]",
                    "None"
                ]
            }
        },
        "UserEventsAllExchanges.__init__": {
            "name": "__init__",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trustlines": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "UserEventsAllExchanges.get": {
            "name": "get",
            "location": 229,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "user_address": [
                    "str",
                    "float",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "EventsExchange.__init__": {
            "name": "__init__",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trustlines": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "EventsExchange.get": {
            "name": "get",
            "location": 253,
            "return": [
                "str",
                "Union[str, int]",
                "bool",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "exchange_address": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        }
    },
    "relay-master/src/relay/api/exchange/schemas.py": {},
    "relay-master/src/relay/api/exchange/__init__.py": {},
    "relay-master/src/relay/api/messaging/resources.py": {
        "PostMessage.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trustlines": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "PostMessage.post": {
            "name": "post",
            "location": 21,
            "return": [
                "typing.Text",
                "Optional[Type]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "user_address": [
                    "bool",
                    "str",
                    "Optional[List[str]]",
                    "list[str]",
                    "int",
                    "None"
                ]
            }
        }
    },
    "relay-master/src/relay/api/messaging/__init__.py": {},
    "relay-master/src/relay/api/pushservice/resources.py": {
        "AddClientToken.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trustlines": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "AddClientToken.put": {
            "name": "put",
            "location": 15,
            "return": [
                "typing.Text",
                "int",
                "Dict[str, bool]",
                "bool",
                "Iterable[Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "user_address": [
                    "str"
                ],
                "client_token": [
                    "str"
                ]
            }
        },
        "DeleteClientToken.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trustlines": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "DeleteClientToken.delete": {
            "name": "delete",
            "location": 27,
            "return": [
                "typing.Text",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "user_address": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ],
                "client_token": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ]
            }
        }
    },
    "relay-master/src/relay/api/pushservice/__init__.py": {},
    "relay-master/src/relay/api/streams/app.py": {
        "WebSocketRPCHandler": {
            "name": "WebSocketRPCHandler",
            "location": 12,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "trustlines": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "MessagingWebSocketRPCHandler": {
            "name": "MessagingWebSocketRPCHandler",
            "location": 26,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "trustlines": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "WebSocketRPCHandler.handle": {
            "name": "handle",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "ws": []
            }
        },
        "MessagingWebSocketRPCHandler.handle": {
            "name": "handle",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ws": [
                    "bool"
                ]
            }
        }
    },
    "relay-master/src/relay/api/streams/rpc_methods.py": {
        "subscribe": {
            "name": "subscribe",
            "location": 20,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "trustlines": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "int"
                ],
                "client": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "int"
                ],
                "event": [
                    "str",
                    "bool",
                    "int"
                ],
                "user": [
                    "str",
                    "bool",
                    "None",
                    "Optional[str]",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "messaging_subscribe": {
            "name": "messaging_subscribe",
            "location": 35,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "trustlines": [
                    "str",
                    "int"
                ],
                "client": [
                    "str",
                    "int"
                ],
                "type": [
                    "str",
                    "int",
                    "list[str]",
                    "relay.streams.Client",
                    "List[str]",
                    "bool"
                ],
                "user": [
                    "str",
                    "int"
                ]
            }
        },
        "get_missed_messages": {
            "name": "get_missed_messages",
            "location": 46,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "trustlines": [
                    "str",
                    "dict[, ]",
                    "dict",
                    "Client"
                ],
                "client": [
                    "str",
                    "list[str]",
                    "int",
                    "relay.streams.Client",
                    "List[str]",
                    "bool"
                ],
                "type": [
                    "str",
                    "list[str]",
                    "int",
                    "relay.streams.Client",
                    "List[str]",
                    "bool"
                ],
                "user": [
                    "str",
                    "dict[, ]",
                    "dict",
                    "Client"
                ]
            }
        }
    },
    "relay-master/src/relay/api/streams/rpc_protocol.py": {
        "validating_rpc_caller": {
            "name": "validating_rpc_caller",
            "location": 7,
            "return": [
                "str",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {
                "method": [],
                "args": [],
                "kwargs": [],
                "client": []
            }
        },
        "check_args": {
            "name": "check_args",
            "location": 18,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "schema": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "check_args.check_args_decorator": {
            "name": "check_args_decorator",
            "location": 19,
            "return": [
                "Dict[str, Dict[str, int]]",
                "str",
                "int"
            ],
            "arguments": {
                "func": [
                    "List[str]",
                    "T"
                ]
            }
        },
        "check_args.check_args_decorator.func_wrapper": {
            "name": "func_wrapper",
            "location": 21,
            "return": [
                "Mapping[str, str]",
                "Dict[str, Any]",
                "dict",
                "str"
            ],
            "arguments": {}
        }
    },
    "relay-master/src/relay/api/streams/transport.py": {
        "RPCWebSocketApplication.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rpc_protocol": [
                    "int",
                    "float",
                    "bool"
                ],
                "dispatcher": [
                    "int",
                    "float",
                    "bool"
                ],
                "ws": [
                    "str",
                    "bool"
                ]
            }
        },
        "RPCWebSocketApplication.on_open": {
            "name": "on_open",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPCWebSocketApplication.on_message": {
            "name": "on_message",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Optional[Union[(bytes, str)]]"
                ]
            }
        },
        "RPCWebSocketApplication.on_close": {
            "name": "on_close",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "RPCWebSocketClient.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ws": [
                    "int",
                    "float",
                    "bool"
                ],
                "rpc_protocol": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "RPCWebSocketClient._execute_send": {
            "name": "_execute_send",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subscription": [
                    "relay.streams.Subscription"
                ],
                "event": [
                    "relay.events.Event"
                ]
            }
        },
        "RPCWebSocketApplication.on_message.caller": {
            "name": "caller",
            "location": 36,
            "return": [
                "str",
                "type"
            ],
            "arguments": {
                "method": [
                    "Optional[str]",
                    "str"
                ],
                "args": [],
                "kwargs": []
            }
        }
    },
    "relay-master/src/relay/api/streams/__init__.py": {},
    "relay-master/src/relay/api/tokens/resources.py": {
        "abort_if_unknown_token": {
            "name": "abort_if_unknown_token",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "trustlines": [
                    "str",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "Tuple[str, dict]",
                    "pathfinding_service.api.PFSApi"
                ],
                "token_address": [
                    "str"
                ]
            }
        },
        "TokenAddresses.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "trustlines": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "TokenAddresses.get": {
            "name": "get",
            "location": 26,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenBalance.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trustlines": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "TokenBalance.get": {
            "name": "get",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "token_address": [
                    "int",
                    "bytes",
                    "float"
                ],
                "user_address": [
                    "int",
                    "bytes",
                    "Dict[str, Dict[str, Any]]",
                    "dict[str, dict[str, typing.Any]]"
                ]
            }
        },
        "UserEventsToken.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trustlines": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "UserEventsToken.get": {
            "name": "get",
            "location": 61,
            "return": [
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "token_address": [
                    "int"
                ],
                "user_address": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "EventsToken.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trustlines": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "EventsToken.get": {
            "name": "get",
            "location": 86,
            "return": [
                "str",
                "int",
                "dict",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "token_address": [
                    "Optional[str]",
                    "bool",
                    "str",
                    "None"
                ]
            }
        }
    },
    "relay-master/src/relay/api/tokens/__init__.py": {},
    "relay-master/src/relay/blockchain/currency_network_events.py": {
        "CurrencyNetworkEvent.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "web3_event": [
                    "dict[str, typing.Any]",
                    "str",
                    "Dict[str, Any]"
                ],
                "current_blocknumber": [
                    "str"
                ],
                "timestamp": [
                    "str"
                ],
                "user": [
                    "str",
                    "None"
                ]
            }
        },
        "CurrencyNetworkEvent.__str__": {
            "name": "__str__",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValueEvent.value": {
            "name": "value",
            "location": 30,
            "return": [
                "bool",
                "List[dict]",
                "str",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransferEvent.extra_data": {
            "name": "extra_data",
            "location": 36,
            "return": [
                "int",
                "dict",
                "str",
                "bytes",
                "dict[str, typing.Any]",
                "dict[bytes, int]",
                "dict[str, str]",
                "list[tuple[typing.Union[typing.Any,typing.Any,typing.Any,typing.Any,str]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DebtUpdateEvent.debt": {
            "name": "debt",
            "location": 52,
            "return": [
                "bool",
                "dict",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrustlineEvent.creditline_given": {
            "name": "creditline_given",
            "location": 58,
            "return": [
                "bool",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrustlineEvent.creditline_received": {
            "name": "creditline_received",
            "location": 62,
            "return": [
                "bool",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrustlineEvent.interest_rate_given": {
            "name": "interest_rate_given",
            "location": 66,
            "return": [
                "Optional[Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrustlineEvent.interest_rate_received": {
            "name": "interest_rate_received",
            "location": 70,
            "return": [
                "Optional[Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrustlineEvent.is_frozen": {
            "name": "is_frozen",
            "location": 74,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrustlineRequestEvent.transfer": {
            "name": "transfer",
            "location": 84,
            "return": [
                "bool",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NetworkFreezeEvent.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "web3_event": [
                    "dict[, ]",
                    "int",
                    "dict"
                ],
                "current_blocknumber": [
                    "int"
                ],
                "timestamp": [
                    "int"
                ]
            }
        }
    },
    "relay-master/src/relay/blockchain/currency_network_proxy.py": {
        "CurrencyNetworkProxy.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "web3": [
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable[[Any, Any], bool]",
                    "typing.Callable[Any,Any, bool]"
                ],
                "abi": [
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable[[Any, Any], bool]",
                    "typing.Callable[Any,Any, bool]"
                ],
                "address": [
                    "str"
                ]
            }
        },
        "CurrencyNetworkProxy.fetch_users": {
            "name": "fetch_users",
            "location": 51,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CurrencyNetworkProxy.fetch_num_users": {
            "name": "fetch_num_users",
            "location": 54,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CurrencyNetworkProxy.fetch_friends": {
            "name": "fetch_friends",
            "location": 57,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "user_address": [
                    "str"
                ]
            }
        },
        "CurrencyNetworkProxy.fetch_account": {
            "name": "fetch_account",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "a_address": [
                    "str"
                ],
                "b_address": [
                    "str"
                ]
            }
        },
        "CurrencyNetworkProxy.fetch_is_frozen_status": {
            "name": "fetch_is_frozen_status",
            "location": 63,
            "return": [
                "bool",
                "Awaitable[Any]",
                "int",
                "Callable",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "CurrencyNetworkProxy.gen_graph_representation": {
            "name": "gen_graph_representation",
            "location": 66,
            "return": [
                "List[Trustline]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CurrencyNetworkProxy.start_listen_on_trustline": {
            "name": "start_listen_on_trustline",
            "location": 96,
            "return": [
                "str",
                "Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "on_trustline_change": [
                    "bool",
                    "Iterable",
                    "typing.Iterable[]",
                    "Optional[bool]",
                    "None"
                ]
            }
        },
        "CurrencyNetworkProxy.start_listen_on_trustline_request": {
            "name": "start_listen_on_trustline_request",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "on_trustline_request": [
                    "bool",
                    "Callable[[str], None]",
                    "typing.Callable[str, None]"
                ]
            }
        },
        "CurrencyNetworkProxy.start_listen_on_trustline_request_cancel": {
            "name": "start_listen_on_trustline_request_cancel",
            "location": 118,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "on_trustline_request_cancel": [
                    "bool",
                    "List[int]",
                    "list[int]",
                    "Optional[str]",
                    "str",
                    "Callable[[str], None]",
                    "None",
                    "typing.Callable[str, None]"
                ]
            }
        },
        "CurrencyNetworkProxy.start_listen_on_transfer": {
            "name": "start_listen_on_transfer",
            "location": 130,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "on_transfer": [
                    "bool",
                    "str",
                    "Callable",
                    "typing.Callable[, ]",
                    "Iterable",
                    "typing.Iterable[]"
                ]
            }
        },
        "CurrencyNetworkProxy.start_listen_on_trustline.log_trustline": {
            "name": "log_trustline",
            "location": 99,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "log_entry": [
                    "Optional[Callable]",
                    "Optional[bool]",
                    "dict",
                    "Optional[str]",
                    "bytes"
                ]
            }
        },
        "CurrencyNetworkProxy.start_listen_on_trustline_request.log_trustline_request": {
            "name": "log_trustline_request",
            "location": 109,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "log_entry": [
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ]
            }
        },
        "CurrencyNetworkProxy.start_listen_on_trustline_request_cancel.log_trustline_request_cancel": {
            "name": "log_trustline_request_cancel",
            "location": 121,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "log_entry": [
                    "dict",
                    "Dict[str, Any]",
                    "bool",
                    "Callable"
                ]
            }
        },
        "CurrencyNetworkProxy.start_listen_on_transfer.log": {
            "name": "log",
            "location": 133,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "log_entry": [
                    "Optional[Callable]",
                    "dict",
                    "Callable",
                    "Dict[str, Any]",
                    "int",
                    "bool",
                    "Optional[str]"
                ]
            }
        }
    },
    "relay-master/src/relay/blockchain/delegate.py": {
        "Delegate.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "web3": [
                    "str",
                    "int",
                    "set",
                    "set[]",
                    "Callable[[str], str]",
                    "typing.Callable[str, str]"
                ],
                "node_address": [
                    "str"
                ],
                "identity_contract_abi": [
                    "str"
                ],
                "known_factories": [
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]",
                    "List[int]",
                    "list[int]",
                    "str",
                    "List[T]",
                    "list[T]",
                    "list",
                    "list[]"
                ],
                "delegation_fees": [
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]",
                    "List[int]",
                    "list[int]",
                    "str",
                    "List[T]",
                    "list[T]",
                    "list",
                    "list[]"
                ],
                "config": [
                    "bool",
                    "str",
                    "bytes",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Delegate.send_signed_meta_transaction": {
            "name": "send_signed_meta_transaction",
            "location": 50,
            "return": [
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "signed_meta_transaction": [
                    "bool",
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "Delegate.deploy_identity": {
            "name": "deploy_identity",
            "location": 65,
            "return": [
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "factory_address": [
                    "int",
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "implementation_address": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "signature": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Delegate.calc_next_nonce": {
            "name": "calc_next_nonce",
            "location": 85,
            "return": [
                "bool",
                "Optional[Any]",
                "str",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": [],
                "identity_address": [
                    "str"
                ]
            }
        },
        "Delegate.get_implementation_address": {
            "name": "get_implementation_address",
            "location": 91,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "identity_address": [
                    "str"
                ]
            }
        },
        "Delegate.calculate_fees_for_meta_transaction": {
            "name": "calculate_fees_for_meta_transaction",
            "location": 97,
            "return": [
                "List[DelegationFees]"
            ],
            "arguments": {
                "self": [],
                "meta_transaction": [
                    "bool",
                    "str",
                    "list[str]",
                    "List[str]",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "T"
                ]
            }
        },
        "Delegate._calculate_fees_for_meta_transaction": {
            "name": "_calculate_fees_for_meta_transaction",
            "location": 103,
            "return": [
                "List[DelegationFees]"
            ],
            "arguments": {
                "self": [],
                "meta_transaction": [
                    "typing.Iterable[bool]",
                    "Iterable[bool]",
                    "Iterator[int]"
                ]
            }
        },
        "Delegate.validate_meta_transaction_fees": {
            "name": "validate_meta_transaction_fees",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "meta_transaction": [
                    "bytes",
                    "list",
                    "list[]"
                ]
            }
        },
        "Delegate.raise_on_invalid_meta_transaction": {
            "name": "raise_on_invalid_meta_transaction",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "meta_transaction": [
                    "int",
                    "Exception"
                ]
            }
        },
        "Delegate.raise_on_invalid_signed_meta_transaction": {
            "name": "raise_on_invalid_signed_meta_transaction",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "signed_meta_transaction": [
                    "int",
                    "Optional[int]",
                    "None",
                    "Optional[Exception]",
                    "Exception"
                ]
            }
        },
        "Delegate._calculate_gas_price": {
            "name": "_calculate_gas_price",
            "location": 146,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "meta_transaction": [
                    "None",
                    "Iterable[int]",
                    "typing.Iterable[int]",
                    "Iterable[bool]",
                    "List[List[str]]",
                    "List[List[Any]]"
                ]
            }
        },
        "Delegate._calculate_gas_limit": {
            "name": "_calculate_gas_limit",
            "location": 160,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "meta_transaction": [
                    "None",
                    "Iterable[int]",
                    "typing.Iterable[int]",
                    "Iterable[bool]",
                    "List[List[str]]",
                    "List[List[Any]]"
                ]
            }
        },
        "Delegate._fetch_rpc_gas_price": {
            "name": "_fetch_rpc_gas_price",
            "location": 163,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Delegate.get_meta_transaction_status": {
            "name": "get_meta_transaction_status",
            "location": 172,
            "return": [
                "str",
                "Optional[Dict[str, Any]]",
                "int",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "identity_address": [
                    "str",
                    "int"
                ],
                "hash": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "relay-master/src/relay/blockchain/events.py": {
        "_field_to_hexbytes": {
            "name": "_field_to_hexbytes",
            "location": 75,
            "return": [
                "int",
                "bool",
                "float",
                "typing.Sequence[]",
                "Type[BaseException]",
                "str",
                "Optional[Type]",
                "Type"
            ],
            "arguments": {
                "field_value": [
                    "int",
                    "float",
                    "Sequence",
                    "str",
                    "typing.Sequence[]"
                ]
            }
        },
        "BlockchainEvent.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "web3_event": [
                    "Optional[Any]",
                    "str",
                    "typing.Any",
                    "None"
                ],
                "current_blocknumber": [
                    "homeassistancore.Event",
                    "raiden.blockchain.events.Event"
                ],
                "timestamp": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "BlockchainEvent.status": {
            "name": "status",
            "location": 27,
            "return": [
                "typing.Text",
                "int",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TLNetworkEvent.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "web3_event": [
                    "str",
                    "bytes",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ],
                "current_blocknumber": [
                    "str",
                    "bytes",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ],
                "timestamp": [
                    "str",
                    "bytes",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ],
                "from_to_types": [
                    "int",
                    "bool",
                    "str",
                    "Optional[str]",
                    "None",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ],
                "user": [
                    "int",
                    "None",
                    "bool",
                    "Optional[str]",
                    "str",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ]
            }
        },
        "TLNetworkEvent.from_": {
            "name": "from_",
            "location": 45,
            "return": [
                "Dict[str, Any]",
                "Optional[int]",
                "Optional[str]",
                "Optional[bool]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TLNetworkEvent.to": {
            "name": "to",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TLNetworkEvent.direction": {
            "name": "direction",
            "location": 57,
            "return": [
                "None",
                "Optional[str]",
                "typing.Text",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TLNetworkEvent.counter_party": {
            "name": "counter_party",
            "location": 66,
            "return": [
                "None",
                "Optional[str]",
                "Optional[int]",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "relay-master/src/relay/blockchain/exchange_events.py": {
        "ExchangeEvent.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "web3_event": [],
                "current_blocknumber": [
                    "str"
                ],
                "timestamp": [
                    "str"
                ],
                "user": [
                    "str",
                    "None"
                ]
            }
        },
        "LogFillEvent.filled_maker_amount": {
            "name": "filled_maker_amount",
            "location": 28,
            "return": [
                "Dict[str, Any]",
                "bool",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogFillEvent.filled_taker_amount": {
            "name": "filled_taker_amount",
            "location": 32,
            "return": [
                "Dict[str, Any]",
                "bool",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogCancelEvent.cancelled_maker_amount": {
            "name": "cancelled_maker_amount",
            "location": 38,
            "return": [
                "Dict[str, Any]",
                "bool",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogCancelEvent.cancelled_taker_amount": {
            "name": "cancelled_taker_amount",
            "location": 42,
            "return": [
                "Dict[str, Any]",
                "bool",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "relay-master/src/relay/blockchain/exchange_proxy.py": {
        "ExchangeProxy.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "web3": [
                    "str",
                    "bool",
                    "float"
                ],
                "exchange_abi": [
                    "str",
                    "bool",
                    "float"
                ],
                "token_abi": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]",
                    "Dict[str, int]",
                    "dict[str, int]",
                    "Optional[str]",
                    "None"
                ],
                "address": [
                    "str"
                ],
                "address_oracle": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]",
                    "Dict[str, int]",
                    "dict[str, int]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "ExchangeProxy.validate": {
            "name": "validate",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "order": [
                    "relay.exchange.order.Order"
                ]
            }
        },
        "ExchangeProxy.validate_funds": {
            "name": "validate_funds",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "order": [
                    "relay.exchange.order.Order"
                ]
            }
        },
        "ExchangeProxy.validate_filled_amount": {
            "name": "validate_filled_amount",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "order": [
                    "relay.exchange.order.Order"
                ]
            }
        },
        "ExchangeProxy.get_filled_amount": {
            "name": "get_filled_amount",
            "location": 50,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "order": [
                    "relay.exchange.order.Order"
                ]
            }
        },
        "ExchangeProxy.get_cancelled_amount": {
            "name": "get_cancelled_amount",
            "location": 53,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "order": [
                    "relay.exchange.order.Order"
                ]
            }
        },
        "ExchangeProxy.get_unavailable_amount": {
            "name": "get_unavailable_amount",
            "location": 56,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "order": [
                    "relay.exchange.order.Order"
                ]
            }
        },
        "ExchangeProxy.start_listen_on_fill": {
            "name": "start_listen_on_fill",
            "location": 59,
            "return": [
                "str",
                "Iterable[str]",
                "Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "typing.Callable[, ]",
                    "Callable",
                    "list[]",
                    "Callable[[], Any]",
                    "list"
                ]
            }
        },
        "ExchangeProxy.start_listen_on_cancel": {
            "name": "start_listen_on_cancel",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "typing.Callable[, ]",
                    "Callable",
                    "list[]",
                    "Callable[[], Any]",
                    "list"
                ]
            }
        },
        "ExchangeProxy._is_currency_network": {
            "name": "_is_currency_network",
            "location": 79,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "token_address": [
                    "str"
                ]
            }
        },
        "ExchangeProxy._is_trusted_token": {
            "name": "_is_trusted_token",
            "location": 82,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "token_address": [
                    "str"
                ]
            }
        },
        "ExchangeProxy._token_contract": {
            "name": "_token_contract",
            "location": 85,
            "return": [
                "Sequence[str]",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str"
                ]
            }
        },
        "DummyExchangeProxy.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exchange_address": [
                    "str"
                ]
            }
        },
        "DummyExchangeProxy.validate": {
            "name": "validate",
            "location": 93,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "order": [
                    "relay.exchange.order.Order"
                ]
            }
        },
        "DummyExchangeProxy.validate_funds": {
            "name": "validate_funds",
            "location": 96,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "order": [
                    "relay.exchange.order.Order"
                ]
            }
        },
        "DummyExchangeProxy.validate_filled_amount": {
            "name": "validate_filled_amount",
            "location": 99,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "order": [
                    "relay.exchange.order.Order"
                ]
            }
        },
        "DummyExchangeProxy.get_filled_amount": {
            "name": "get_filled_amount",
            "location": 102,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "order": [
                    "relay.exchange.order.Order"
                ]
            }
        },
        "DummyExchangeProxy.start_listen_on_fill": {
            "name": "start_listen_on_fill",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "typing.Callable[, ]",
                    "Callable",
                    "list[]",
                    "Callable[[], Any]",
                    "list"
                ]
            }
        },
        "DummyExchangeProxy.start_listen_on_cancel": {
            "name": "start_listen_on_cancel",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "typing.Callable[, ]",
                    "Callable",
                    "list[]",
                    "Callable[[], Any]",
                    "list"
                ]
            }
        },
        "ExchangeProxy.start_listen_on_fill.log": {
            "name": "log",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "log_entry": []
            }
        },
        "ExchangeProxy.start_listen_on_cancel.log": {
            "name": "log",
            "location": 70,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "log_entry": [
                    "Dict[str, str]",
                    "bool",
                    "AnyStr"
                ]
            }
        }
    },
    "relay-master/src/relay/blockchain/identity_events.py": {
        "FeePaymentEvent.value": {
            "name": "value",
            "location": 8,
            "return": [
                "bool",
                "List[dict]",
                "str",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FeePaymentEvent.from_": {
            "name": "from_",
            "location": 12,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FeePaymentEvent.to": {
            "name": "to",
            "location": 16,
            "return": [
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FeePaymentEvent.currency_network": {
            "name": "currency_network",
            "location": 20,
            "return": [
                "bool",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "relay-master/src/relay/blockchain/identity_proxy.py": {},
    "relay-master/src/relay/blockchain/node.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "web3": [
                    "bool",
                    "None",
                    "int",
                    "typing.Type",
                    "Optional[int]",
                    "Type[T]"
                ]
            }
        },
        "Node.relay_tx": {
            "name": "relay_tx",
            "location": 58,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "rawtxn": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Node.transaction_receipt": {
            "name": "transaction_receipt",
            "location": 61,
            "return": [
                "Optional[int]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "txn_hash": [
                    "int",
                    "str",
                    "set[str]",
                    "Set[str]",
                    "typing.Callable[, ]",
                    "bool",
                    "Callable"
                ]
            }
        },
        "Node.get_tx_infos": {
            "name": "get_tx_infos",
            "location": 64,
            "return": [
                "TxInfos"
            ],
            "arguments": {
                "self": [],
                "user_address": [
                    "int",
                    "str"
                ],
                "block_identifier": [
                    "typing.Text",
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "Node.fetch_gas_price": {
            "name": "fetch_gas_price",
            "location": 82,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.address": {
            "name": "address",
            "location": 89,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.blocknumber": {
            "name": "blocknumber",
            "location": 93,
            "return": [
                "str",
                "BaseException"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.balance": {
            "name": "balance",
            "location": 96,
            "return": [
                "str",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "dict",
                    "dict[, ]",
                    "str",
                    "Optional[str]",
                    "None",
                    "Dict[str, Set[str]]",
                    "dict[str, set[str]]"
                ]
            }
        },
        "Node.send_ether": {
            "name": "send_ether",
            "location": 99,
            "return": [
                "None",
                "Callable",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "Node.get_block_timestamp": {
            "name": "get_block_timestamp",
            "location": 111,
            "return": [
                "Optional[str]",
                "bool",
                "int",
                "Callable",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "block_number": [
                    "float"
                ]
            }
        },
        "Node.get_transaction_status": {
            "name": "get_transaction_status",
            "location": 114,
            "return": [
                "Dict[str, Any]",
                "int",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "hash": [
                    "str"
                ]
            }
        }
    },
    "relay-master/src/relay/blockchain/proxy.py": {
        "get_new_entries": {
            "name": "get_new_entries",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "filter": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "callback": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "Optional[Sequence[str]]",
                    "Mapping[str, Any]",
                    "typing.Sequence[str]",
                    "typing.Mapping"
                ]
            }
        },
        "sort_log_entries": {
            "name": "sort_log_entries",
            "location": 35,
            "return": [
                "list"
            ],
            "arguments": {
                "log_entries": [
                    "bytes",
                    "str",
                    "bool"
                ]
            }
        },
        "watch_filter": {
            "name": "watch_filter",
            "location": 52,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "filter": [
                    "Optional[Exception]",
                    "Exception",
                    "Optional[Sequence[Any]]",
                    "None",
                    "str",
                    "Optional[Iterable[int]]",
                    "typing.Sequence[typing.Any]",
                    "typing.Iterable[int]",
                    "List[str]"
                ],
                "callback": [
                    "Optional[Exception]",
                    "Exception",
                    "Optional[Sequence[Any]]",
                    "None",
                    "str",
                    "Optional[Iterable[int]]",
                    "typing.Sequence[typing.Any]",
                    "typing.Iterable[int]",
                    "List[str]"
                ]
            }
        },
        "sorted_events": {
            "name": "sorted_events",
            "location": 257,
            "return": [
                "List[relay.blockchain.events.BlockchainEvent]"
            ],
            "arguments": {
                "events": [
                    "List[relay.blockchain.events.BlockchainEvent]"
                ]
            }
        },
        "sort_log_entries.log_index_key": {
            "name": "log_index_key",
            "location": 36,
            "return": [
                "int",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "log_entry": [
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "sort_log_entries.block_number_key": {
            "name": "block_number_key",
            "location": 41,
            "return": [
                "str",
                "Dict[str, Any]",
                "float",
                "Tuple[type]"
            ],
            "arguments": {
                "log_entry": [
                    "Dict[str, Any]",
                    "Optional[Any]",
                    "Queue[Any]",
                    "Hashable"
                ]
            }
        },
        "LogFilterListener.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "web3": [
                    "str",
                    "bool"
                ],
                "filter_params": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "LogFilterListener.add_proxy": {
            "name": "add_proxy",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "proxy": [
                    "Proxy"
                ]
            }
        },
        "LogFilterListener.start": {
            "name": "start",
            "location": 76,
            "return": [
                "Optional[LogFilterListener]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogFilterListener.stop": {
            "name": "stop",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogFilterListener._watch_filter": {
            "name": "_watch_filter",
            "location": 118,
            "return": [
                "bool",
                "float",
                "Optional[Any]"
            ],
            "arguments": {
                "self": [],
                "function": [
                    "Callable"
                ],
                "params": [
                    "dict"
                ]
            }
        },
        "LogFilterListener._process_log": {
            "name": "_process_log",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "log": [
                    "str",
                    "Optional[str]",
                    "dict",
                    "Exception"
                ]
            }
        },
        "Proxy.__init__": {
            "name": "__init__",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "web3": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "abi": [
                    "str",
                    "List[List[T]]",
                    "list[list[T]]"
                ],
                "address": [
                    "str"
                ]
            }
        },
        "Proxy.start_listen_on": {
            "name": "start_listen_on",
            "location": 160,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "eventname": [
                    "str"
                ],
                "function": [
                    "Callable"
                ]
            }
        },
        "Proxy.get_transaction_events": {
            "name": "get_transaction_events",
            "location": 186,
            "return": [
                "Dict[str, Dict[str, Any]]",
                "Dict[str, str]",
                "bool",
                "dict",
                "list",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "tx_hash": [
                    "str"
                ],
                "event_types": [
                    "tuple"
                ]
            }
        },
        "Proxy._register_raw_event_log": {
            "name": "_register_raw_event_log",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "raw_event_log": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "watchdog.events.FileSystemEvent",
                    "Dict[str, Any]",
                    "events.Event",
                    "raiden.blockchain.events.Event",
                    "dict"
                ]
            }
        },
        "Proxy._get_processed_log_from_raw_log": {
            "name": "_get_processed_log_from_raw_log",
            "location": 214,
            "return": [
                "\"Step\"",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "raw_event_log": [
                    "Dict[str, Any]",
                    "Callable",
                    "telethon.events.NewMessage.Event",
                    "Optional[Dict]"
                ]
            }
        },
        "Proxy._get_abi_for_log": {
            "name": "_get_abi_for_log",
            "location": 225,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "int",
                "bool",
                "dict[, ]",
                "list[typing.Union[typing.Any,typing.Any,typing.Any,typing.Any]]",
                "None"
            ],
            "arguments": {
                "self": [],
                "raw_event_log": [
                    "list[dict[str, typing.Any]]",
                    "dict",
                    "Optional[Exception]",
                    "List[Dict[str, Any]]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "Proxy._build_events": {
            "name": "_build_events",
            "location": 235,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "events": [
                    "list"
                ]
            }
        },
        "Proxy._build_event": {
            "name": "_build_event",
            "location": 239,
            "return": [
                "relay.blockchain.events.BlockchainEvent"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict[, ]",
                    "dict",
                    "raiden_libs.events.Event",
                    "str"
                ],
                "current_blocknumber": [
                    "int"
                ]
            }
        },
        "Proxy._get_block_timestamp": {
            "name": "_get_block_timestamp",
            "location": 249,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "blocknumber": [
                    "int"
                ]
            }
        },
        "sorted_events.key": {
            "name": "key",
            "location": 258,
            "return": [
                "None",
                "bool",
                "List[Tuple[str, int]]",
                "str",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "event": [
                    "str",
                    "dict",
                    "Optional[dict]",
                    "IO",
                    "types.SimpleNamespace"
                ]
            }
        },
        "LogFilterListener.start.on_exception": {
            "name": "on_exception",
            "location": 98,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "greenlet": [
                    "int",
                    "float",
                    "str",
                    "bytes",
                    "Tuple[float]"
                ]
            }
        },
        "Proxy.start_listen_on.poll_from_queue": {
            "name": "poll_from_queue",
            "location": 169,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "relay-master/src/relay/blockchain/token_events.py": {
        "TokenEvent.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "web3_event": [
                    "dict[str, typing.Any]",
                    "str",
                    "Dict[str, Any]"
                ],
                "current_blocknumber": [
                    "str"
                ],
                "timestamp": [
                    "str"
                ],
                "user": [
                    "str",
                    "None"
                ]
            }
        },
        "ValueEvent.value": {
            "name": "value",
            "location": 17,
            "return": [
                "bool",
                "List[dict]",
                "str",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "relay-master/src/relay/blockchain/token_proxy.py": {
        "TokenProxy.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "web3": [
                    "bool",
                    "str",
                    "int"
                ],
                "token_abi": [
                    "bool",
                    "str",
                    "int"
                ],
                "address": [
                    "str"
                ]
            }
        },
        "TokenProxy.balance_of": {
            "name": "balance_of",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "user_address": [
                    "str"
                ]
            }
        }
    },
    "relay-master/src/relay/blockchain/unw_eth_events.py": {
        "UnwEthEvent.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "web3_event": [
                    "dict[str, typing.Any]",
                    "str",
                    "Dict[str, Any]"
                ],
                "current_blocknumber": [
                    "str"
                ],
                "timestamp": [
                    "str"
                ],
                "user": [
                    "str",
                    "None"
                ]
            }
        },
        "ValueEvent.value": {
            "name": "value",
            "location": 19,
            "return": [
                "bool",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "relay-master/src/relay/blockchain/unw_eth_proxy.py": {
        "UnwEthProxy.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "web3": [
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable[[Any, Any], bool]",
                    "typing.Callable[Any,Any, bool]"
                ],
                "unw_eth_abi": [
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable[[Any, Any], bool]",
                    "typing.Callable[Any,Any, bool]"
                ],
                "address": [
                    "str"
                ]
            }
        },
        "UnwEthProxy.balance_of": {
            "name": "balance_of",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "user_address": [
                    "str"
                ]
            }
        }
    },
    "relay-master/src/relay/blockchain/__init__.py": {},
    "relay-master/src/relay/config/config.py": {
        "load_config": {
            "name": "load_config",
            "location": 13,
            "return": [
                "MutableMapping"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "dump_config": {
            "name": "dump_config",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "MutableMapping"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "dump_default_config": {
            "name": "dump_default_config",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "generate_default_config": {
            "name": "generate_default_config",
            "location": 28,
            "return": [
                "MutableMapping"
            ],
            "arguments": {}
        },
        "validation_error_string": {
            "name": "validation_error_string",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "validation_error": [
                    "bool",
                    "str",
                    "Coroutine",
                    "Union[Type[Exception], Tuple[Any, ...]]"
                ]
            }
        },
        "convert_legacy_format": {
            "name": "convert_legacy_format",
            "location": 62,
            "return": [
                "MutableMapping"
            ],
            "arguments": {
                "raw_data": [
                    "MutableMapping"
                ]
            }
        },
        "_update_nested_dict": {
            "name": "_update_nested_dict",
            "location": 120,
            "return": [
                "bool",
                "\"Step\"",
                "Mapping[str, str]",
                "Optional[str]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "d": [
                    "str"
                ],
                "path": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "_get_nested_dict": {
            "name": "_get_nested_dict",
            "location": 124,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "d": [
                    "str",
                    "Optional[str]"
                ],
                "path": [
                    "str"
                ],
                "default": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "_remap_config_entry": {
            "name": "_remap_config_entry",
            "location": 128,
            "return": [
                "dict",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "d": [
                    "str",
                    "int"
                ],
                "old_path": [
                    "str"
                ],
                "new_path": [
                    "str"
                ]
            }
        },
        "_handle_deprecated_config": {
            "name": "_handle_deprecated_config",
            "location": 144,
            "return": [
                "dict",
                "Optional[dict]",
                "str",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "config": [
                    "str",
                    "Optional[str]"
                ],
                "deprecated_keys": [
                    "Iterable[str]"
                ]
            }
        },
        "_handle_not_supported_config": {
            "name": "_handle_not_supported_config",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "dict"
                ],
                "not_supported_keys": [
                    "Iterable[str]"
                ]
            }
        },
        "_remove_empty_dicts": {
            "name": "_remove_empty_dicts",
            "location": 162,
            "return": [
                "MutableMapping"
            ],
            "arguments": {
                "data": [
                    "MutableMapping"
                ],
                "factory": [
                    "Iterable[bytes]",
                    "int"
                ]
            }
        },
        "validation_error_string._validation_error_string": {
            "name": "_validation_error_string",
            "location": 36,
            "return": [
                "List[str]",
                "int",
                "Set[str]",
                "Tuple[str, str]",
                "Mapping[str, Any]",
                "str",
                "[str]",
                "List[Optional[str]]"
            ],
            "arguments": {
                "whole_key": [
                    "str",
                    "list",
                    "Callable"
                ],
                "messages": [
                    "str",
                    "Optional[str]",
                    "bytes"
                ]
            }
        },
        "convert_legacy_format.convert_delegation_fees": {
            "name": "convert_delegation_fees",
            "location": 65,
            "return": [
                "int",
                "Sequence[str]"
            ],
            "arguments": {
                "old_fees": [
                    "float",
                    "Dict[str, Any]",
                    "List[str]",
                    "int",
                    "Callable[[Any], int]",
                    "bool"
                ]
            }
        }
    },
    "relay-master/src/relay/config/schema.py": {
        "AddressField._serialize": {
            "name": "_serialize",
            "location": 13,
            "return": [
                "int",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bytes",
                    "str",
                    "Union[str, bytes, int]",
                    "int"
                ],
                "attr": [
                    "str"
                ],
                "obj": [
                    "str"
                ]
            }
        },
        "AddressField._deserialize": {
            "name": "_deserialize",
            "location": 16,
            "return": [
                "int",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "dict[, ]",
                    "dict",
                    "None",
                    "Iterable",
                    "typing.MutableMapping",
                    "Optional[Iterable]",
                    "MutableMapping[str, Any]"
                ],
                "attr": [
                    "str",
                    "Optional[str]",
                    "None",
                    "dict",
                    "dict[, ]"
                ],
                "data": [
                    "dict",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "FeeSettingsSchema.validate_currency_network": {
            "name": "validate_currency_network",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "in_data": [
                    "bytes",
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]",
                    "int",
                    "MutableMapping"
                ]
            }
        },
        "GasPriceMethodField._serialize": {
            "name": "_serialize",
            "location": 63,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bytes"
                ],
                "attr": [
                    "str"
                ],
                "obj": [
                    "str"
                ]
            }
        },
        "GasPriceMethodField._deserialize": {
            "name": "_deserialize",
            "location": 71,
            "return": [
                "relay.blockchain.delegate.GasPriceMethod"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "None",
                    "Iterable",
                    "dict[, ]",
                    "Optional[Iterable]",
                    "dict"
                ],
                "attr": [
                    "str",
                    "Optional[Mapping[str, Any]]",
                    "typing.Mapping",
                    "Optional[str]",
                    "None"
                ],
                "data": [
                    "dict",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "DelegateSchema.validate_gas_price_method": {
            "name": "validate_gas_price_method",
            "location": 94,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "in_data": [
                    "str",
                    "bytes",
                    "list[float]",
                    "List[float]",
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]",
                    "defaultdict"
                ]
            }
        },
        "ProviderTypeField._serialize": {
            "name": "_serialize",
            "location": 146,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "type",
                    "typing.Type",
                    "bytes",
                    "Dict[type, Callable]",
                    "str",
                    "dict[typing.Type, typing.Callable[, ]]"
                ],
                "attr": [
                    "str"
                ],
                "obj": [
                    "str"
                ]
            }
        },
        "ProviderTypeField._deserialize": {
            "name": "_deserialize",
            "location": 154,
            "return": [
                "relay.web3provider.ProviderType"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "Optional[str]",
                    "None"
                ],
                "attr": [
                    "str",
                    "int",
                    "Union[str, int]",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "bool"
                ],
                "data": [
                    "dict",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "ChainNodeRPCSchema.validate_only_one_provider": {
            "name": "validate_only_one_provider",
            "location": 175,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "in_data": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "original_data": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "RelaySchema.load_defaults": {
            "name": "load_defaults",
            "location": 198,
            "return": [
                "str",
                "dict",
                "Optional[float]",
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "int",
                    "Set[str]",
                    "dict",
                    "Iterable[str]"
                ]
            }
        },
        "ConfigSchema.load_defaults": {
            "name": "load_defaults",
            "location": 230,
            "return": [
                "dict[, ]",
                "str",
                "int",
                "dict",
                "dict[str, str]",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "int",
                    "dict",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "relay-master/src/relay/config/__init__.py": {},
    "relay-master/src/relay/ethindex_db/ethindex_db.py": {
        "connect": {
            "name": "connect",
            "location": 19,
            "return": [
                "psycopg2._psycopg.connection"
            ],
            "arguments": {
                "dsn": [
                    "str",
                    "bytearray"
                ]
            }
        },
        "get_latest_ethindex_block_number": {
            "name": "get_latest_ethindex_block_number",
            "location": 23,
            "return": [
                "int",
                "Hashable",
                "Optional[List[str]]",
                "bool",
                "Optional[str]",
                "list",
                "Callable",
                "str"
            ],
            "arguments": {
                "conn": [
                    "int",
                    "Callable[[bytes], None]",
                    "bool"
                ]
            }
        },
        "EventBuilder.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_event_builders": [
                    "Dict[(str, Any)]"
                ],
                "address_to_contract_types": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "EventBuilder.build_events": {
            "name": "build_events",
            "location": 55,
            "return": [
                "List[relay.blockchain.events.BlockchainEvent]"
            ],
            "arguments": {
                "self": [],
                "events": [
                    "list"
                ],
                "current_blocknumber": [
                    "int"
                ]
            }
        },
        "EventBuilder.event_types": {
            "name": "event_types",
            "location": 61,
            "return": [
                "list[]",
                "List[str]",
                "Dict[str, Any]",
                "Container[str]",
                "str",
                "Optional[Iterable[str]]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventBuilder._build_event": {
            "name": "_build_event",
            "location": 64,
            "return": [
                "relay.blockchain.events.BlockchainEvent"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict[, ]",
                    "dict",
                    "raiden_libs.events.Event",
                    "events.board.BoardTopicCreated",
                    "events.board.BoardPostingCreated"
                ],
                "current_blocknumber": [
                    "int"
                ]
            }
        },
        "EthindexDB.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conn": [
                    "bytes",
                    "str",
                    "bool",
                    "typing.Sequence[dict[str, str]]",
                    "Sequence[Dict[str, str]]",
                    "int"
                ],
                "standard_event_types": [
                    "str",
                    "bool",
                    "type",
                    "typing.Type"
                ],
                "event_builders": [
                    "int",
                    "str"
                ],
                "from_to_types": [
                    "bytes",
                    "str",
                    "bool",
                    "typing.Sequence[dict[str, str]]",
                    "Sequence[Dict[str, str]]",
                    "int"
                ],
                "address": [
                    "str",
                    "None",
                    "Optional[str]",
                    "dict",
                    "dict[, ]"
                ],
                "address_to_contract_types": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "EthindexDB.event_types": {
            "name": "event_types",
            "location": 120,
            "return": [
                "str",
                "int",
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "EthindexDB._build_events": {
            "name": "_build_events",
            "location": 123,
            "return": [
                "List[relay.blockchain.events.BlockchainEvent]"
            ],
            "arguments": {
                "self": [],
                "rows": [
                    "Mapping[str, Any]",
                    "typing.Mapping",
                    "int",
                    "List[str]",
                    "str",
                    "list[str]"
                ]
            }
        },
        "EthindexDB._get_current_blocknumber": {
            "name": "_get_current_blocknumber",
            "location": 126,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "EthindexDB._get_addr": {
            "name": "_get_addr",
            "location": 129,
            "return": [
                "str",
                "int",
                "None",
                "Set[str]",
                "bool",
                "MutableMapping[str, int]",
                "List[Optional[str]]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "_T0"
                ]
            }
        },
        "EthindexDB._get_standard_event_types": {
            "name": "_get_standard_event_types",
            "location": 139,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "standard_event_types": [
                    "Optional[Iterable[str]]"
                ]
            }
        },
        "EthindexDB._run_events_query": {
            "name": "_run_events_query",
            "location": 146,
            "return": [
                "List[relay.blockchain.events.BlockchainEvent]"
            ],
            "arguments": {
                "self": [],
                "events_query": [
                    "EventsQuery"
                ]
            }
        },
        "EthindexDB.get_user_events": {
            "name": "get_user_events",
            "location": 160,
            "return": [
                "List[relay.blockchain.events.BlockchainEvent]"
            ],
            "arguments": {
                "self": [],
                "event_type": [
                    "str"
                ],
                "user_address": [
                    "str"
                ],
                "from_block": [
                    "int"
                ],
                "contract_address": [
                    "str"
                ]
            }
        },
        "EthindexDB.get_all_contract_events": {
            "name": "get_all_contract_events",
            "location": 202,
            "return": [
                "List[relay.blockchain.events.BlockchainEvent]"
            ],
            "arguments": {
                "self": [],
                "event_types": [
                    "Iterable[str]"
                ],
                "user_address": [
                    "str"
                ],
                "from_block": [
                    "int"
                ],
                "contract_address": [
                    "str"
                ]
            }
        },
        "EthindexDB.get_events": {
            "name": "get_events",
            "location": 252,
            "return": [
                "List[relay.blockchain.events.BlockchainEvent]"
            ],
            "arguments": {
                "self": [],
                "event_type": [
                    "int",
                    "str",
                    "None",
                    "dict[, ]",
                    "bool",
                    "Optional[int]",
                    "Optional[bool]",
                    "dict"
                ],
                "from_block": [
                    "int"
                ],
                "contract_address": [
                    "str"
                ]
            }
        },
        "EthindexDB.get_events_from_to": {
            "name": "get_events_from_to",
            "location": 274,
            "return": [
                "List[relay.blockchain.events.BlockchainEvent]"
            ],
            "arguments": {
                "self": [],
                "event_types": [
                    "Iterable[str]"
                ],
                "start_time": [
                    "int"
                ],
                "end_time": [
                    "int"
                ],
                "contract_address": [
                    "str"
                ],
                "from_address": [
                    "str"
                ],
                "to_address": [
                    "str"
                ]
            }
        },
        "EthindexDB.get_query_for_from_to": {
            "name": "get_query_for_from_to",
            "location": 335,
            "return": [
                "Tuple[(str, list)]"
            ],
            "arguments": {
                "self": [],
                "event_types": [
                    "str",
                    "list[dict[str, str]]",
                    "list[]",
                    "List[Dict[str, str]]",
                    "bool",
                    "int",
                    "MutableMapping",
                    "list"
                ],
                "from_address": [
                    "Optional[int]",
                    "int",
                    "Optional[str]",
                    "None",
                    "Optional[List[Any]]",
                    "str",
                    "list[typing.Any]"
                ],
                "to_address": [
                    "Optional[int]",
                    "int",
                    "Optional[str]",
                    "None",
                    "Optional[List[Any]]",
                    "str",
                    "list[typing.Any]"
                ]
            }
        },
        "EthindexDB.get_all_events": {
            "name": "get_all_events",
            "location": 384,
            "return": [
                "List[relay.blockchain.events.BlockchainEvent]"
            ],
            "arguments": {
                "self": [],
                "from_block": [
                    "int"
                ],
                "contract_address": [
                    "str"
                ],
                "standard_event_types": [
                    "bool",
                    "None",
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "EthindexDB.get_transaction_events": {
            "name": "get_transaction_events",
            "location": 409,
            "return": [
                "List[relay.blockchain.events.BlockchainEvent]"
            ],
            "arguments": {
                "self": [],
                "tx_hash": [
                    "str"
                ],
                "from_block": [
                    "int"
                ],
                "event_types": [
                    "Iterable"
                ]
            }
        },
        "EthindexDB.get_transaction_events_by_event_id": {
            "name": "get_transaction_events_by_event_id",
            "location": 434,
            "return": [
                "List[relay.blockchain.events.BlockchainEvent]"
            ],
            "arguments": {
                "self": [],
                "block_hash": [
                    "str",
                    "float",
                    "Iterable[str]",
                    "bool",
                    "typing.Iterable[str]"
                ],
                "log_index": [
                    "str",
                    "float",
                    "Iterable[str]",
                    "bool",
                    "typing.Iterable[str]"
                ],
                "event_types": [
                    "Iterable"
                ]
            }
        },
        "EthindexDB.add_all_user_types_to_query": {
            "name": "add_all_user_types_to_query",
            "location": 463,
            "return": [
                "EventsQuery"
            ],
            "arguments": {
                "self": [],
                "events_query": [
                    "EventsQuery"
                ],
                "user_address": [
                    "str"
                ]
            }
        },
        "CurrencyNetworkEthindexDB.get_network_events": {
            "name": "get_network_events",
            "location": 480,
            "return": [
                "List[relay.blockchain.events.BlockchainEvent]"
            ],
            "arguments": {
                "self": [],
                "event_type": [
                    "str"
                ],
                "user_address": [
                    "str"
                ],
                "from_block": [
                    "int"
                ]
            }
        },
        "CurrencyNetworkEthindexDB.get_all_network_events": {
            "name": "get_all_network_events",
            "location": 485,
            "return": [
                "List[relay.blockchain.events.BlockchainEvent]"
            ],
            "arguments": {
                "self": [],
                "user_address": [
                    "str"
                ],
                "from_block": [
                    "int"
                ],
                "event_types": [
                    "Iterable[str]"
                ]
            }
        },
        "CurrencyNetworkEthindexDB.get_trustline_events": {
            "name": "get_trustline_events",
            "location": 500,
            "return": [
                "List[relay.blockchain.events.BlockchainEvent]"
            ],
            "arguments": {
                "self": [],
                "contract_address": [
                    "str"
                ],
                "user_address": [
                    "str"
                ],
                "counterparty_address": [
                    "str"
                ],
                "event_types": [
                    "Iterable[str]"
                ],
                "from_block": [
                    "int"
                ]
            }
        },
        "ExchangeEthindexDB.get_all_exchange_events_of_user": {
            "name": "get_all_exchange_events_of_user",
            "location": 554,
            "return": [
                "List[relay.blockchain.events.BlockchainEvent]"
            ],
            "arguments": {
                "self": [],
                "user_address": [
                    "str"
                ],
                "all_exchange_addresses": [
                    "Iterable[str]"
                ],
                "type": [
                    "str"
                ],
                "from_block": [
                    "int"
                ]
            }
        }
    },
    "relay-master/src/relay/ethindex_db/events_informations.py": {
        "clean_null_debt": {
            "name": "clean_null_debt",
            "location": 494,
            "return": [
                "None"
            ],
            "arguments": {
                "debts_in_all_currency_networks": [
                    "List[int]",
                    "int",
                    "str",
                    "List[List[int]]"
                ],
                "network_address": [
                    "List[int]",
                    "int",
                    "str",
                    "List[List[int]]"
                ],
                "debtor": [
                    "str",
                    "int",
                    "bool",
                    "List[tuple]",
                    "nucypher.blockchain.eth.token.NU"
                ]
            }
        },
        "does_trustline_update_trigger_balance_update": {
            "name": "does_trustline_update_trigger_balance_update",
            "location": 500,
            "return": [
                "bool"
            ],
            "arguments": {
                "graph": [
                    "relay.network_graph.graph.CurrencyNetworkGraph"
                ],
                "trustline_update_event": [
                    "relay.blockchain.currency_network_events.TrustlineUpdateEvent"
                ]
            }
        },
        "get_mediation_fee_from_balance_updates": {
            "name": "get_mediation_fee_from_balance_updates",
            "location": 517,
            "return": [
                "MediationFee"
            ],
            "arguments": {
                "graph": [
                    "relay.network_graph.graph.CurrencyNetworkGraph"
                ],
                "user_address": [
                    "str"
                ],
                "first_event": [
                    "relay.blockchain.currency_network_events.BalanceUpdateEvent"
                ],
                "second_event": [
                    "relay.blockchain.currency_network_events.BalanceUpdateEvent"
                ]
            }
        },
        "safety_checks_on_mediated_transfer_balance_updates": {
            "name": "safety_checks_on_mediated_transfer_balance_updates",
            "location": 567,
            "return": [
                "None"
            ],
            "arguments": {
                "user_address": [
                    "str"
                ],
                "first_event": [
                    "relay.blockchain.currency_network_events.BalanceUpdateEvent"
                ],
                "second_event": [
                    "relay.blockchain.currency_network_events.BalanceUpdateEvent"
                ]
            }
        },
        "apply_event_on_graph": {
            "name": "apply_event_on_graph",
            "location": 587,
            "return": [
                "None"
            ],
            "arguments": {
                "graph": [
                    "relay.network_graph.graph.CurrencyNetworkGraph"
                ],
                "event": [
                    "Union[(relay.blockchain.currency_network_events.BalanceUpdateEvent, relay.blockchain.currency_network_events.TrustlineUpdateEvent)]"
                ]
            }
        },
        "balance_viewed_from_user": {
            "name": "balance_viewed_from_user",
            "location": 609,
            "return": [
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "balance_update_event": [
                    "Dict[str, Any]",
                    "dict",
                    "raiden_libs.events.Event"
                ]
            }
        },
        "sorted_events": {
            "name": "sorted_events",
            "location": 618,
            "return": [
                "list"
            ],
            "arguments": {
                "events": [
                    "Union[str, Dict[str, Any]]",
                    "bytes",
                    "dict",
                    "Dict[str, Any]",
                    "bool"
                ],
                "reverse": [
                    "Union[str, Dict[str, Any]]",
                    "bytes",
                    "dict",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "get_interests_rates_of_trustline_for_user_before_timestamp": {
            "name": "get_interests_rates_of_trustline_for_user_before_timestamp",
            "location": 636,
            "return": [
                "dbcontracts.graph.manifesManifest",
                "dbcontracts.graph.parsed.ParsedMacro"
            ],
            "arguments": {
                "trustline_update_events": [
                    "int",
                    "Dict[str, str]"
                ],
                "balance": [
                    "str",
                    "List[str]",
                    "List[int]",
                    "Optional[str]",
                    "Callable[..., Awaitable]",
                    "dict"
                ],
                "timestamp": [
                    "List[str]"
                ]
            }
        },
        "get_accrued_interests_from_events": {
            "name": "get_accrued_interests_from_events",
            "location": 663,
            "return": [
                "List[InterestAccrued]"
            ],
            "arguments": {
                "balance_update_events": [
                    "Optional[str]",
                    "int",
                    "BinaryIO",
                    "str",
                    "Optional[int]"
                ],
                "trustline_update_events": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "filter_list_of_information_for_time_window": {
            "name": "filter_list_of_information_for_time_window",
            "location": 687,
            "return": [
                "list"
            ],
            "arguments": {
                "information_list": [
                    "list"
                ],
                "start_time": [
                    "int"
                ],
                "end_time": [
                    "Optional[int]"
                ]
            }
        },
        "filter_events_with_type": {
            "name": "filter_events_with_type",
            "location": 699,
            "return": [
                "list"
            ],
            "arguments": {
                "all_events": [
                    "MutableMapping",
                    "str",
                    "Callable"
                ],
                "event_type": [
                    "MutableMapping",
                    "str",
                    "Callable"
                ]
            }
        },
        "filter_events_with_index": {
            "name": "filter_events_with_index",
            "location": 703,
            "return": [
                "list"
            ],
            "arguments": {
                "all_events": [
                    "aioquic.h3.events.H3Event",
                    "int",
                    "Dict[str, Any]",
                    "str"
                ],
                "log_index": [
                    "aioquic.h3.events.H3Event",
                    "int",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "get_transfer_path": {
            "name": "get_transfer_path",
            "location": 707,
            "return": [
                "list"
            ],
            "arguments": {
                "sorted_balance_updates": [
                    "str",
                    "int"
                ]
            }
        },
        "find_transfer_event": {
            "name": "find_transfer_event",
            "location": 718,
            "return": [
                "relay.blockchain.currency_network_events.TransferEvent"
            ],
            "arguments": {
                "all_events": [
                    "Iterable[relay.blockchain.events.BlockchainEvent]"
                ],
                "any_transfer_event": [
                    "relay.blockchain.events.BlockchainEvent"
                ]
            }
        },
        "get_balance_update_events_for_transfer": {
            "name": "get_balance_update_events_for_transfer",
            "location": 762,
            "return": [
                "List[relay.blockchain.currency_network_events.BalanceUpdateEvent]"
            ],
            "arguments": {
                "all_events": [
                    "Iterable[relay.blockchain.events.BlockchainEvent]"
                ],
                "transfer_event": [
                    "relay.blockchain.currency_network_events.TransferEvent"
                ]
            }
        },
        "get_balance_from_update_event_viewed_from_a": {
            "name": "get_balance_from_update_event_viewed_from_a",
            "location": 808,
            "return": [
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "balance_update_event": [
                    "set",
                    "Type"
                ],
                "a": [
                    "Dict[str, Any]",
                    "str",
                    "Mapping",
                    "dbcontracts.graph.compiled.NonSourceCompiledNode"
                ]
            }
        },
        "event_id": {
            "name": "event_id",
            "location": 817,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "event": [
                    "str",
                    "watchdog.events.FileSystemEvent"
                ]
            }
        },
        "EventsInformationFetcher.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "currency_network_db": [
                    "relay.ethindex_db.ethindex_db.CurrencyNetworkEthindexDB"
                ]
            }
        },
        "EventsInformationFetcher.get_list_of_paid_interests_for_trustline": {
            "name": "get_list_of_paid_interests_for_trustline",
            "location": 77,
            "return": [
                "List[InterestAccrued]"
            ],
            "arguments": {
                "self": [],
                "currency_network_address": [
                    "str"
                ],
                "user": [
                    "str"
                ],
                "counterparty": [
                    "str"
                ]
            }
        },
        "EventsInformationFetcher.get_list_of_paid_interests_for_trustline_in_between_timestamps": {
            "name": "get_list_of_paid_interests_for_trustline_in_between_timestamps",
            "location": 99,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "currency_network_address": [
                    "str",
                    "Optional[str]",
                    "int",
                    "bool"
                ],
                "user": [
                    "str",
                    "Optional[str]",
                    "int",
                    "bool"
                ],
                "counterparty": [
                    "str",
                    "Optional[str]",
                    "int",
                    "bool"
                ],
                "start_time": [
                    "str",
                    "Optional[str]"
                ],
                "end_time": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "EventsInformationFetcher.get_transfer_details_for_id": {
            "name": "get_transfer_details_for_id",
            "location": 109,
            "return": [
                "List[TransferInformation]"
            ],
            "arguments": {
                "self": [],
                "block_hash": [
                    "str"
                ],
                "log_index": [
                    "int"
                ]
            }
        },
        "EventsInformationFetcher.get_transfer_details_for_tx": {
            "name": "get_transfer_details_for_tx",
            "location": 134,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "tx_hash": [
                    "str"
                ]
            }
        },
        "EventsInformationFetcher.get_transfer_details": {
            "name": "get_transfer_details",
            "location": 150,
            "return": [
                "TransferInformation"
            ],
            "arguments": {
                "self": [],
                "all_events": [
                    "Mapping[str, Any]"
                ],
                "transfer_event": []
            }
        },
        "EventsInformationFetcher.get_delta_balances_of_transfer": {
            "name": "get_delta_balances_of_transfer",
            "location": 188,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "currency_network_address": [
                    "float",
                    "list",
                    "Optional[int]",
                    "str",
                    "bool"
                ],
                "sorted_balance_updates": [
                    "bool",
                    "Dict[str, Dict[str, Any]]",
                    "Callable",
                    "bytes",
                    "str",
                    "int",
                    "Dict[int, str]"
                ]
            }
        },
        "EventsInformationFetcher.get_previous_balance": {
            "name": "get_previous_balance",
            "location": 228,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "currency_network_address": [
                    "bool",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "a": [
                    "bool",
                    "Dict[str, str]"
                ],
                "b": [
                    "bool",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "balance_update_event": [
                    "str",
                    "Optional[str]",
                    "Optional[bytes]"
                ]
            }
        },
        "EventsInformationFetcher.get_all_balance_update_events_for_trustline": {
            "name": "get_all_balance_update_events_for_trustline",
            "location": 252,
            "return": [
                "List[relay.blockchain.events.BlockchainEvent]"
            ],
            "arguments": {
                "self": [],
                "currency_network_address": [
                    "str",
                    "Mapping",
                    "int",
                    "Callable"
                ],
                "a": [
                    "str",
                    "Mapping",
                    "int",
                    "Callable"
                ],
                "b": [
                    "str",
                    "Mapping",
                    "int",
                    "Callable"
                ]
            }
        },
        "EventsInformationFetcher.get_interest_at": {
            "name": "get_interest_at",
            "location": 263,
            "return": [
                "bool",
                "List[dict]",
                "List[Dict[str, Any]]",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "currency_network_address": [],
                "balance_update_event": [
                    "bool"
                ]
            }
        },
        "EventsInformationFetcher.get_earned_mediation_fees": {
            "name": "get_earned_mediation_fees",
            "location": 279,
            "return": [
                "List[MediationFee]"
            ],
            "arguments": {
                "self": [],
                "user_address": [
                    "str"
                ],
                "graph": [
                    "relay.network_graph.graph.CurrencyNetworkGraph"
                ]
            }
        },
        "EventsInformationFetcher.get_earned_mediation_fees_in_between_timestamps": {
            "name": "get_earned_mediation_fees_in_between_timestamps",
            "location": 355,
            "return": [
                "List[MediationFee]"
            ],
            "arguments": {
                "self": [],
                "user_address": [
                    "str"
                ],
                "graph": [
                    "relay.network_graph.graph.CurrencyNetworkGraph"
                ],
                "start_time": [
                    "int"
                ],
                "end_time": [
                    "Optional[int]"
                ]
            }
        },
        "EventsInformationFetcher.get_debt_lists_in_all_networks_with_path": {
            "name": "get_debt_lists_in_all_networks_with_path",
            "location": 367,
            "return": [
                "List[DebtsListInCurrencyNetwork]"
            ],
            "arguments": {
                "self": [],
                "user_address": [
                    "str"
                ],
                "currency_network_graphs": [
                    "Dict[(str, relay.network_graph.graph.CurrencyNetworkGraph)]"
                ]
            }
        },
        "EventsInformationFetcher.get_debt_lists_in_all_networks": {
            "name": "get_debt_lists_in_all_networks",
            "location": 377,
            "return": [
                "Dict[(str, Dict[(str, int)])]"
            ],
            "arguments": {
                "self": [],
                "user_address": [
                    "str"
                ]
            }
        },
        "EventsInformationFetcher.add_path_information_to_debt_lists": {
            "name": "add_path_information_to_debt_lists",
            "location": 422,
            "return": [
                "List[DebtsListInCurrencyNetwork]"
            ],
            "arguments": {
                "self": [],
                "user_address": [
                    "str"
                ],
                "currency_network_graphs": [
                    "Dict[(str, relay.network_graph.graph.CurrencyNetworkGraph)]"
                ],
                "debts_list_in_all_currency_networks": [
                    "Dict[(str, Dict[(str, int)])]"
                ]
            }
        },
        "EventsInformationFetcher.get_total_sum_transferred": {
            "name": "get_total_sum_transferred",
            "location": 469,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "sender_address": [
                    "str",
                    "Optional[List[str]]",
                    "bool"
                ],
                "receiver_address": [
                    "str",
                    "Optional[List[str]]",
                    "bool"
                ],
                "start_time": [
                    "str",
                    "Optional[List[str]]",
                    "bool"
                ],
                "end_time": [
                    "str",
                    "Optional[List[str]]",
                    "bool"
                ]
            }
        },
        "sorted_events.log_index_key": {
            "name": "log_index_key",
            "location": 619,
            "return": [
                "dict",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "event": [
                    "dict",
                    "str",
                    "watchdog.events.FileSystemEvent",
                    "IO[str]"
                ]
            }
        },
        "sorted_events.block_number_key": {
            "name": "block_number_key",
            "location": 624,
            "return": [
                "Optional[str]",
                "dict",
                "Callable[..., None]"
            ],
            "arguments": {
                "event": [
                    "Optional[Dict[str, Any]]",
                    "Optional[str]",
                    "Optional[Tuple]",
                    "bool"
                ]
            }
        },
        "TransferNotFoundException.__init__": {
            "name": "__init__",
            "location": 822,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventNotFoundException.__init__": {
            "name": "__init__",
            "location": 827,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IdentifiedNotPartOfTransferException.__init__": {
            "name": "__init__",
            "location": 833,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "relay-master/src/relay/ethindex_db/sync_updates.py": {
        "graph_update_getter": {
            "name": "graph_update_getter",
            "location": 78,
            "return": [
                "Callable[([Any], List[FeedUpdate])]"
            ],
            "arguments": {}
        },
        "get_graph_updates_feed": {
            "name": "get_graph_updates_feed",
            "location": 83,
            "return": [
                "List[FeedUpdate]"
            ],
            "arguments": {
                "conn": [
                    "str",
                    "Callable",
                    "List[str]",
                    "list"
                ]
            }
        },
        "write_graph_sync_id_file": {
            "name": "write_graph_sync_id_file",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "sync_id": [
                    "int"
                ]
            }
        },
        "ensure_graph_sync_id_file_exists": {
            "name": "ensure_graph_sync_id_file_exists",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_latest_graph_sync_id": {
            "name": "get_latest_graph_sync_id",
            "location": 143,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "TrustlineUpdateFeedUpdate.from_": {
            "name": "from_",
            "location": 23,
            "return": [
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrustlineUpdateFeedUpdate.to": {
            "name": "to",
            "location": 27,
            "return": [
                "bool",
                "int",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrustlineUpdateFeedUpdate.creditline_given": {
            "name": "creditline_given",
            "location": 31,
            "return": [
                "bool",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrustlineUpdateFeedUpdate.creditline_received": {
            "name": "creditline_received",
            "location": 35,
            "return": [
                "bool",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrustlineUpdateFeedUpdate.interest_rate_given": {
            "name": "interest_rate_given",
            "location": 39,
            "return": [
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrustlineUpdateFeedUpdate.interest_rate_received": {
            "name": "interest_rate_received",
            "location": 43,
            "return": [
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrustlineUpdateFeedUpdate.is_frozen": {
            "name": "is_frozen",
            "location": 47,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BalanceUpdateFeedUpdate.value": {
            "name": "value",
            "location": 56,
            "return": [
                "bool",
                "Union[int, float]",
                "Optional[bool]",
                "float",
                "Optional[float]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BalanceUpdateFeedUpdate.from_": {
            "name": "from_",
            "location": 60,
            "return": [
                "str",
                "Dict[str, str]",
                "Dict[str, Any]",
                "Optional[int]",
                "Dict[str, Type[Any]]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BalanceUpdateFeedUpdate.to": {
            "name": "to",
            "location": 64,
            "return": [
                "bool",
                "dict",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "relay-master/src/relay/ethindex_db/__init__.py": {},
    "relay-master/src/relay/exchange/exchange_db.py": {
        "OrderORM.from_order": {
            "name": "from_order",
            "location": 42,
            "return": [
                "OrderORM"
            ],
            "arguments": {
                "cls": [
                    "Type[_TOrderORM]"
                ],
                "order": [
                    "relay.exchange.order.Order"
                ]
            }
        },
        "OrderORM.to_order": {
            "name": "to_order",
            "location": 68,
            "return": [
                "relay.exchange.order.Order"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderBookDB.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "engine": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "OrderBookDB.add_order": {
            "name": "add_order",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "order": [
                    "bytes"
                ]
            }
        },
        "OrderBookDB.add_orders": {
            "name": "add_orders",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "orders": [
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "OrderBookDB.get_order_by_hash": {
            "name": "get_order_by_hash",
            "location": 115,
            "return": [
                "Optional[str]",
                "Optional[Dict]",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "order_hash": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "OrderBookDB.get_orderbook_by_tokenpair": {
            "name": "get_orderbook_by_tokenpair",
            "location": 125,
            "return": [
                "str",
                "Optional[bool]",
                "Union[dict, list]",
                "Iterable[Dict[str, Any]]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "token_pair": [
                    "str",
                    "Optional[str]"
                ],
                "desc_price": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "OrderBookDB.get_orders": {
            "name": "get_orders",
            "location": 142,
            "return": [
                "str",
                "Optional[bool]",
                "Union[dict, list]",
                "Iterable[Dict[str, Any]]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "filter_exchange_address": [
                    "str",
                    "dict",
                    "int"
                ],
                "filter_token_address": [
                    "str",
                    "Optional[List[Any]]"
                ],
                "filter_maker_token_address": [
                    "str",
                    "int"
                ],
                "filter_taker_token_address": [
                    "str",
                    "int"
                ],
                "filter_trader_address": [
                    "str"
                ],
                "filter_maker_address": [
                    "str",
                    "dict",
                    "int"
                ],
                "filter_taker_address": [
                    "str",
                    "dict",
                    "int"
                ],
                "filter_fee_recipient_address": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "OrderBookDB.delete_order_by_hash": {
            "name": "delete_order_by_hash",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "order_hash": [
                    "sqlalchemy.orm.Session",
                    "str",
                    "hexbytes.HexBytes"
                ]
            }
        },
        "OrderBookDB.delete_orders_by_hash": {
            "name": "delete_orders_by_hash",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "order_hashes": [
                    "bool",
                    "str"
                ]
            }
        },
        "OrderBookDB.delete_old_orders": {
            "name": "delete_old_orders",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timestamp": [
                    "int",
                    "sqlalchemy.orm.Session",
                    "str",
                    "set"
                ]
            }
        },
        "OrderBookDB.order_filled": {
            "name": "order_filled",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "order_hash": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "filled_maker_token_amount": [
                    "int",
                    "Callable",
                    "str",
                    "float"
                ],
                "filled_taker_token_amount": [
                    "int",
                    "Callable",
                    "str",
                    "float"
                ]
            }
        },
        "OrderBookDB.order_cancelled": {
            "name": "order_cancelled",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "order_hash": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "cancelled_maker_token_amount": [
                    "int",
                    "Callable",
                    "str",
                    "float"
                ],
                "cancelled_taker_token_amount": [
                    "int",
                    "Callable",
                    "str",
                    "float"
                ]
            }
        }
    },
    "relay-master/src/relay/exchange/order.py": {
        "Order.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exchange_address": [
                    "str"
                ],
                "maker_address": [
                    "str"
                ],
                "taker_address": [
                    "str"
                ],
                "maker_token": [
                    "str"
                ],
                "taker_token": [
                    "str"
                ],
                "fee_recipient": [
                    "str"
                ],
                "maker_token_amount": [
                    "int"
                ],
                "taker_token_amount": [
                    "int"
                ],
                "maker_fee": [
                    "int"
                ],
                "taker_fee": [
                    "int"
                ],
                "expiration_timestamp_in_sec": [
                    "int"
                ],
                "salt": [
                    "int"
                ],
                "v": [
                    "int"
                ],
                "r": [
                    "int",
                    "float",
                    "Union[float, str]",
                    "str",
                    "Optional[int]",
                    "None"
                ],
                "s": [
                    "int",
                    "float",
                    "bool"
                ],
                "filled_maker_token_amount": [
                    "int"
                ],
                "filled_taker_token_amount": [
                    "int"
                ],
                "cancelled_maker_token_amount": [
                    "int"
                ],
                "cancelled_taker_token_amount": [
                    "int"
                ]
            }
        },
        "Order.price": {
            "name": "price",
            "location": 55,
            "return": [
                "Callable",
                "str",
                "dict",
                "int",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Order.available_maker_token_amount": {
            "name": "available_maker_token_amount",
            "location": 59,
            "return": [
                "float",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Order.available_taker_token_amount": {
            "name": "available_taker_token_amount",
            "location": 67,
            "return": [
                "float",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Order.ec_signature": {
            "name": "ec_signature",
            "location": 75,
            "return": [
                "EcSignature",
                "str",
                "Union[List[str], str]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Order.validate": {
            "name": "validate",
            "location": 78,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Order.validate_signature": {
            "name": "validate_signature",
            "location": 81,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Order.validate_addresses": {
            "name": "validate_addresses",
            "location": 84,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Order.is_expired": {
            "name": "is_expired",
            "location": 95,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "current_timestamp_in_sec": [
                    "int"
                ]
            }
        },
        "Order.is_filled": {
            "name": "is_filled",
            "location": 98,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Order.hash": {
            "name": "hash",
            "location": 104,
            "return": [
                "bytes",
                "MutableMapping[str, Any]",
                "int",
                "Iterable[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Order.__eq__": {
            "name": "__eq__",
            "location": 122,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "SignableOrder.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exchange_address": [
                    "str"
                ],
                "maker_address": [
                    "str"
                ],
                "taker_address": [
                    "str"
                ],
                "maker_token": [
                    "str"
                ],
                "taker_token": [
                    "str"
                ],
                "fee_recipient": [
                    "str"
                ],
                "maker_token_amount": [
                    "int"
                ],
                "taker_token_amount": [
                    "int"
                ],
                "maker_fee": [
                    "int"
                ],
                "taker_fee": [
                    "int"
                ],
                "expiration_timestamp_in_sec": [
                    "int"
                ],
                "salt": [
                    "int"
                ]
            }
        },
        "SignableOrder.sign": {
            "name": "sign",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int",
                    "str",
                    "typing.Hashable",
                    "Union[int, slice]",
                    "dict[str, str]",
                    "Hashable",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "relay-master/src/relay/exchange/orderbook.py": {
        "OrderBook.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderBook.exchange_addresses": {
            "name": "exchange_addresses",
            "location": 26,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderBook.connect_db": {
            "name": "connect_db",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "engine": [
                    "bool",
                    "str",
                    "List[str]",
                    "Tuple[int, int, int]"
                ]
            }
        },
        "OrderBook.add_exchange": {
            "name": "add_exchange",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exchange_proxy": [
                    "str",
                    "List[str]",
                    "List[int]"
                ]
            }
        },
        "OrderBook.validate": {
            "name": "validate",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "order": [
                    "relay.exchange.order.Order"
                ]
            }
        },
        "OrderBook.validate_exchange_address": {
            "name": "validate_exchange_address",
            "location": 45,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "order": [
                    "relay.exchange.order.Order"
                ]
            }
        },
        "OrderBook.validate_timestamp": {
            "name": "validate_timestamp",
            "location": 48,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "order": [
                    "relay.exchange.order.Order"
                ]
            }
        },
        "OrderBook.add_order": {
            "name": "add_order",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "order": [
                    "relay.exchange.order.Order"
                ]
            }
        },
        "OrderBook.add_orders": {
            "name": "add_orders",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "orders": [
                    "Sequence[relay.exchange.order.Order]"
                ]
            }
        },
        "OrderBook.delete_order": {
            "name": "delete_order",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "order": [
                    "relay.exchange.order.Order"
                ]
            }
        },
        "OrderBook.delete_order_by_hash": {
            "name": "delete_order_by_hash",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "order_hash": [
                    "List[str]",
                    "str"
                ]
            }
        },
        "OrderBook.delete_old_orders": {
            "name": "delete_old_orders",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderBook.get_asks_by_tokenpair": {
            "name": "get_asks_by_tokenpair",
            "location": 75,
            "return": [
                "Sequence[relay.exchange.order.Order]"
            ],
            "arguments": {
                "self": [],
                "token_pair": [
                    "Tuple[(str, str)]"
                ]
            }
        },
        "OrderBook.get_bids_by_tokenpair": {
            "name": "get_bids_by_tokenpair",
            "location": 80,
            "return": [
                "Sequence[relay.exchange.order.Order]"
            ],
            "arguments": {
                "self": [],
                "token_pair": [
                    "Tuple[(str, str)]"
                ]
            }
        },
        "OrderBook.order_filled": {
            "name": "order_filled",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "orderhash": [
                    "bytes"
                ],
                "filled_maker_amount": [
                    "int"
                ],
                "filled_taker_amount": [
                    "int"
                ]
            }
        },
        "OrderBook.get_orders": {
            "name": "get_orders",
            "location": 95,
            "return": [
                "Sequence[relay.exchange.order.Order]"
            ],
            "arguments": {
                "self": [],
                "filter_exchange_address": [
                    "str"
                ],
                "filter_token_address": [
                    "str"
                ],
                "filter_maker_token_address": [
                    "str"
                ],
                "filter_taker_token_address": [
                    "str"
                ],
                "filter_trader_address": [
                    "str"
                ],
                "filter_maker_address": [
                    "str"
                ],
                "filter_taker_address": [
                    "str"
                ],
                "filter_fee_recipient_address": [
                    "str"
                ]
            }
        },
        "OrderBook.order_cancelled": {
            "name": "order_cancelled",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "orderhash": [
                    "int",
                    "List[List[bool]]",
                    "Tuple[int, int]",
                    "Callable[[str, str], float]"
                ],
                "cancelled_maker_amount": [
                    "int"
                ],
                "cancelled_taker_amount": [
                    "int"
                ]
            }
        },
        "OrderBook.get_order_by_hash": {
            "name": "get_order_by_hash",
            "location": 130,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "order_hash": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "OrderBookGreenlet.__init__": {
            "name": "__init__",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderBookGreenlet.start": {
            "name": "start",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderBookGreenlet.add_exchange": {
            "name": "add_exchange",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exchange_proxy": [
                    "relay.blockchain.exchange_proxy.ExchangeProxy"
                ]
            }
        },
        "OrderBookGreenlet._start_listen_on_fill_or_cancel": {
            "name": "_start_listen_on_fill_or_cancel",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exchange_address": [
                    "str"
                ]
            }
        },
        "OrderBookGreenlet._run": {
            "name": "_run",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "relay-master/src/relay/exchange/__init__.py": {},
    "relay-master/src/relay/network_graph/alg.py": {
        "_build_path_from_backlinks": {
            "name": "_build_path_from_backlinks",
            "location": 60,
            "return": [
                "list"
            ],
            "arguments": {
                "dst": [
                    "list"
                ],
                "backlinks": [
                    "dict"
                ]
            }
        },
        "_least_cost_path_helper": {
            "name": "_least_cost_path_helper",
            "location": 70,
            "return": [
                "Tuple[(Any, list)]"
            ],
            "arguments": {
                "graph": [
                    "list[dict[str, typing.Any]]",
                    "networkx.graph.Graph",
                    "typing.Callable[T, T]",
                    "List[Dict[str, Any]]",
                    "list[T]",
                    "Callable[[T], T]",
                    "List[T]"
                ],
                "target_nodes": [
                    "set"
                ],
                "queue": [
                    "list"
                ],
                "least_costs": [
                    "dict"
                ],
                "backlinks": [
                    "dict"
                ],
                "cost_fn": [
                    "Callable"
                ],
                "max_cost": [
                    "str",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "least_cost_path": {
            "name": "least_cost_path",
            "location": 119,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {}
        },
        "CostAccumulator.zero": {
            "name": "zero",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CostAccumulator.total_cost_from_start_to_dst": {
            "name": "total_cost_from_start_to_dst",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "cost_from_start_to_node": [
                    "str",
                    "bool",
                    "list[]",
                    "int",
                    "list"
                ],
                "node": [
                    "str",
                    "bool",
                    "list[]",
                    "int",
                    "list"
                ],
                "dst": [
                    "str",
                    "bool",
                    "list[]",
                    "int",
                    "list"
                ],
                "edge_data": [
                    "str",
                    "bool",
                    "list[]",
                    "int",
                    "list"
                ]
            }
        },
        "CostAccumulator.compute_cost_for_path": {
            "name": "compute_cost_for_path",
            "location": 45,
            "return": [
                "str",
                "bool",
                "float",
                "Type[Any]",
                "int",
                "Dict[str, Any]",
                "list[]",
                "None"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "path": [
                    "list"
                ]
            }
        }
    },
    "relay-master/src/relay/network_graph/fees.py": {
        "calculate_fees": {
            "name": "calculate_fees",
            "location": 1,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "imbalance_generated": [
                    "int",
                    "Callable",
                    "str"
                ],
                "capacity_imbalance_fee_divisor": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "calculate_fees_reverse": {
            "name": "calculate_fees_reverse",
            "location": 7,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "imbalance_generated": [
                    "int",
                    "Callable",
                    "str"
                ],
                "capacity_imbalance_fee_divisor": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "imbalance_generated": {
            "name": "imbalance_generated",
            "location": 13,
            "return": [
                "int",
                "float",
                "str",
                "Type"
            ],
            "arguments": {}
        }
    },
    "relay-master/src/relay/network_graph/graph.py": {
        "Account.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Callable[[Any], None]",
                    "str",
                    "typing.Callable[typing.Any, None]",
                    "dict",
                    "dict[, ]",
                    "Mapping",
                    "typing.Mapping",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[Dict[str, Any]]",
                    "None"
                ],
                "user": [
                    "Optional[str]",
                    "str",
                    "int",
                    "None",
                    "bool"
                ],
                "counter_party": [
                    "typing.Callable[typing.Callable[, ], None]",
                    "Callable[[Callable], None]",
                    "str",
                    "list[]",
                    "list",
                    "list[dict[, ]]",
                    "\"Future[None]\"",
                    "dict[, ]",
                    "List[Dict]",
                    "dict"
                ]
            }
        },
        "Account.balance": {
            "name": "balance",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "balance": [
                    "int",
                    "List[str]",
                    "bool",
                    "dict"
                ]
            }
        },
        "Account.balance_with_interests": {
            "name": "balance_with_interests",
            "location": 64,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "timestamp_in_seconds": [
                    "int"
                ]
            }
        },
        "Account.unfrozen_balance": {
            "name": "unfrozen_balance",
            "location": 73,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Account.unfrozen_balance_with_interests": {
            "name": "unfrozen_balance_with_interests",
            "location": 80,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "timestamp_in_seconds": [
                    "int"
                ]
            }
        },
        "Account.m_time": {
            "name": "m_time",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "timestamp": [
                    "bool",
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "Account.creditline": {
            "name": "creditline",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "creditline": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "Account.reverse_creditline": {
            "name": "reverse_creditline",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "creditline": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Account.interest_rate": {
            "name": "interest_rate",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "interest_rate": [
                    "bool",
                    "Optional[List[str]]"
                ]
            }
        },
        "Account.reverse_interest_rate": {
            "name": "reverse_interest_rate",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "interest_rate": [
                    "List[str]"
                ]
            }
        },
        "Account.is_frozen": {
            "name": "is_frozen",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "is_frozen": [
                    "bool",
                    "str",
                    "dict"
                ]
            }
        },
        "Account.can_be_closed": {
            "name": "can_be_closed",
            "location": 136,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Account.__repr__": {
            "name": "__repr__",
            "location": 148,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountSummary.__init__": {
            "name": "__init__",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "balance": [
                    "int",
                    "bool",
                    "Optional[int]",
                    "List[Dict[str, Any]]"
                ],
                "creditline_given": [
                    "int",
                    "bool",
                    "Optional[int]",
                    "List[Dict[str, Any]]"
                ],
                "creditline_received": [
                    "int",
                    "bool",
                    "Optional[int]",
                    "List[Dict[str, Any]]"
                ],
                "interest_rate_given": [
                    "int",
                    "str",
                    "bool"
                ],
                "interests_received": [
                    "int",
                    "str",
                    "bool"
                ],
                "is_frozen": [
                    "bool",
                    "int",
                    "Optional[int]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "AccountSummary.creditline_left_given": {
            "name": "creditline_left_given",
            "location": 172,
            "return": [
                "int",
                "List[Tuple[int, float, float]]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountSummary.available": {
            "name": "available",
            "location": 176,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountSummary.creditline_left_received": {
            "name": "creditline_left_received",
            "location": 182,
            "return": [
                "int",
                "List[Tuple[int, float, float]]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AggregatedAccountSummary.__init__": {
            "name": "__init__",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "balance": [
                    "int",
                    "float",
                    "bool"
                ],
                "frozen_balance": [
                    "int",
                    "float",
                    "bool"
                ],
                "creditline_given": [
                    "int",
                    "float",
                    "bool"
                ],
                "creditline_received": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "AggregatedAccountSummary.creditline_left_given": {
            "name": "creditline_left_given",
            "location": 198,
            "return": [
                "int",
                "List[Tuple[int, float, float]]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AggregatedAccountSummary.available": {
            "name": "available",
            "location": 202,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AggregatedAccountSummary.creditline_left_received": {
            "name": "creditline_left_received",
            "location": 206,
            "return": [
                "int",
                "List[Tuple[int, float, float]]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SenderPaysCostAccumulatorSnapshot.__init__": {
            "name": "__init__",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SenderPaysCostAccumulatorSnapshot.zero": {
            "name": "zero",
            "location": 249,
            "return": [
                "SenderPaysCostAccumulatorSnapshot.Cost"
            ],
            "arguments": {
                "self": []
            }
        },
        "SenderPaysCostAccumulatorSnapshot.total_cost_from_start_to_dst": {
            "name": "total_cost_from_start_to_dst",
            "location": 252,
            "return": [
                "Optional[SenderPaysCostAccumulatorSnapshot.Cost]"
            ],
            "arguments": {
                "self": [],
                "cost_from_start_to_node": [
                    "int",
                    "str",
                    "list[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "node": [
                    "list[]",
                    "bool",
                    "list",
                    "typing.Hashable",
                    "Hashable",
                    "dict[typing.Hashable, typing.Any]",
                    "int",
                    "Dict[Hashable, Any]"
                ],
                "dst": [
                    "list[]",
                    "bool",
                    "list",
                    "typing.Hashable",
                    "Hashable",
                    "dict[typing.Hashable, typing.Any]",
                    "int",
                    "Dict[Hashable, Any]"
                ],
                "edge_data": [
                    "str",
                    "bool"
                ]
            }
        },
        "ReceiverPaysCostAccumulatorSnapshot.__init__": {
            "name": "__init__",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReceiverPaysCostAccumulatorSnapshot.zero": {
            "name": "zero",
            "location": 348,
            "return": [
                "ReceiverPaysCostAccumulatorSnapshot.Cost"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReceiverPaysCostAccumulatorSnapshot.total_cost_from_start_to_dst": {
            "name": "total_cost_from_start_to_dst",
            "location": 351,
            "return": [
                "Optional[ReceiverPaysCostAccumulatorSnapshot.Cost]"
            ],
            "arguments": {
                "self": [],
                "cost_from_start_to_node": [
                    "ReceiverPaysCostAccumulatorSnapshot.Cost"
                ],
                "node": [
                    "list[]",
                    "int",
                    "list",
                    "typing.Hashable",
                    "bool",
                    "Hashable"
                ],
                "dst": [
                    "list[]",
                    "int",
                    "list",
                    "typing.Hashable",
                    "bool",
                    "Hashable"
                ],
                "edge_data": [
                    "str",
                    "bool"
                ]
            }
        },
        "SenderPaysCapacityAccumulator.__init__": {
            "name": "__init__",
            "location": 420,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SenderPaysCapacityAccumulator.get_balance": {
            "name": "get_balance",
            "location": 427,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "bool",
                    "Mapping[str, Any]",
                    "typing.Mapping",
                    "dict",
                    "dict[, ]"
                ],
                "dst": [
                    "str",
                    "bool",
                    "Mapping[str, Any]",
                    "typing.Mapping",
                    "dict",
                    "dict[, ]"
                ],
                "edge_data": [
                    "str",
                    "bool",
                    "Mapping[str, Any]",
                    "typing.Mapping",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "SenderPaysCapacityAccumulator.get_capacity": {
            "name": "get_capacity",
            "location": 435,
            "return": [
                "int",
                "str",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int",
                    "Dict[int, dict]",
                    "dict[int, dict[, ]]"
                ],
                "dst": [
                    "int",
                    "Dict[int, dict]",
                    "dict[int, dict[, ]]"
                ],
                "edge_data": [
                    "int",
                    "Dict[int, dict]",
                    "dict[int, dict[, ]]"
                ]
            }
        },
        "SenderPaysCapacityAccumulator.zero": {
            "name": "zero",
            "location": 440,
            "return": [
                "Cost",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SenderPaysCapacityAccumulator.total_cost_from_start_to_dst": {
            "name": "total_cost_from_start_to_dst",
            "location": 445,
            "return": [
                "Optional[SenderPaysCapacityAccumulator.Cost]"
            ],
            "arguments": {
                "self": [],
                "cost_from_start_to_node": [
                    "SenderPaysCapacityAccumulator.Cost"
                ],
                "node": [
                    "int",
                    "str",
                    "Optional[int]",
                    "None",
                    "dict",
                    "dict[, ]"
                ],
                "dst": [
                    "int",
                    "str",
                    "Optional[int]",
                    "None",
                    "dict",
                    "dict[, ]"
                ],
                "edge_data": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "CurrencyNetworkGraph.__init__": {
            "name": "__init__",
            "location": 483,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "capacity_imbalance_fee_divisor": [
                    "int",
                    "Callable[..., None]",
                    "bool",
                    "str"
                ],
                "default_interest_rate": [
                    "int",
                    "bool",
                    "Optional[str]",
                    "Union[int, str]",
                    "List[str]",
                    "Optional[List[int]]",
                    "List[int]",
                    "str"
                ],
                "custom_interests": [
                    "bool",
                    "int",
                    "str",
                    "Optional[str]",
                    "float",
                    "Tuple[str]"
                ],
                "prevent_mediator_interests": [
                    "bool",
                    "int",
                    "Callable[..., None]",
                    "str"
                ],
                "is_frozen": [
                    "bool",
                    "int",
                    "Callable[..., None]",
                    "str"
                ]
            }
        },
        "CurrencyNetworkGraph.gen_network": {
            "name": "gen_network",
            "location": 498,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trustlines": [
                    "list"
                ]
            }
        },
        "CurrencyNetworkGraph.from_config": {
            "name": "from_config",
            "location": 519,
            "return": [
                "CurrencyNetworkGraph"
            ],
            "arguments": {
                "cls": [
                    "Type[_TCurrencyNetworkGraph]"
                ],
                "config": [
                    "NetworkGraphConfig"
                ]
            }
        },
        "CurrencyNetworkGraph.users": {
            "name": "users",
            "location": 527,
            "return": [
                "list[]",
                "List[str]",
                "List[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CurrencyNetworkGraph.money_created": {
            "name": "money_created",
            "location": 531,
            "return": [
                "bool",
                "List[int]",
                "int",
                "Tuple[int, int]",
                "Sequence[Union[str, Any]]",
                "List[Dict[str, str]]",
                "List[Tuple[int, str, str]]",
                "list",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CurrencyNetworkGraph.has_interests": {
            "name": "has_interests",
            "location": 536,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CurrencyNetworkGraph.total_creditlines": {
            "name": "total_creditlines",
            "location": 540,
            "return": [
                "bool",
                "int",
                "Tuple[int, int]",
                "tuple",
                "List[str]",
                "Union[List[str], str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CurrencyNetworkGraph.get_friends": {
            "name": "get_friends",
            "location": 545,
            "return": [
                "list[]",
                "str",
                "Optional[str]",
                "bytes",
                "int",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "CurrencyNetworkGraph.update_trustline": {
            "name": "update_trustline",
            "location": 551,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "creditor": [
                    "int",
                    "float",
                    "str"
                ],
                "debtor": [
                    "int",
                    "float",
                    "str"
                ],
                "creditline_given": [
                    "int"
                ],
                "creditline_received": [
                    "int"
                ],
                "interest_rate_given": [
                    "int"
                ],
                "interest_rate_received": [
                    "int"
                ],
                "is_frozen": [
                    "bool"
                ]
            }
        },
        "CurrencyNetworkGraph.get_balance_with_interests": {
            "name": "get_balance_with_interests",
            "location": 592,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "float",
                    "str"
                ],
                "b": [
                    "int",
                    "float",
                    "str"
                ],
                "timestamp": [
                    "list",
                    "list[]"
                ]
            }
        },
        "CurrencyNetworkGraph.update_balance": {
            "name": "update_balance",
            "location": 597,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "str"
                ],
                "b": [
                    "str"
                ],
                "balance": [
                    "int"
                ],
                "timestamp": [
                    "int"
                ]
            }
        },
        "CurrencyNetworkGraph.update_from_feed": {
            "name": "update_from_feed",
            "location": 627,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "feed_update": [
                    "List[str]",
                    "list[str]",
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "int",
                    "bytes",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "CurrencyNetworkGraph.create_edge": {
            "name": "create_edge",
            "location": 653,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ],
                "b": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "CurrencyNetworkGraph.remove_trustline": {
            "name": "remove_trustline",
            "location": 667,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "float"
                ],
                "b": [
                    "memoryview",
                    "int",
                    "float",
                    "List[int]",
                    "list[int]",
                    "Optional[str]",
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "CurrencyNetworkGraph.get_account_sum": {
            "name": "get_account_sum",
            "location": 677,
            "return": [
                "AccountSummary"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str"
                ],
                "counter_party": [
                    "str"
                ]
            }
        },
        "CurrencyNetworkGraph.get_aggregated_account_summary": {
            "name": "get_aggregated_account_summary",
            "location": 685,
            "return": [
                "AggregatedAccountSummary"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "Optional[str]",
                    "bool",
                    "str",
                    "bytes",
                    "None"
                ],
                "timestamp": [
                    "int"
                ]
            }
        },
        "CurrencyNetworkGraph.get_account_summary": {
            "name": "get_account_summary",
            "location": 701,
            "return": [
                "AccountSummary"
            ],
            "arguments": {
                "self": [],
                "user": [],
                "counter_party": [],
                "timestamp": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "CurrencyNetworkGraph.draw": {
            "name": "draw",
            "location": 715,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "bool",
                    "IO[str]",
                    "typing.IO"
                ]
            }
        },
        "CurrencyNetworkGraph.dump": {
            "name": "dump",
            "location": 732,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CurrencyNetworkGraph.get_trustlines_list": {
            "name": "get_trustlines_list",
            "location": 756,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CurrencyNetworkGraph.find_transfer_path_sender_pays_fees": {
            "name": "find_transfer_path_sender_pays_fees",
            "location": 759,
            "return": [
                "Tuple[(Any, list)]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "bool",
                    "float",
                    "int"
                ],
                "target": [
                    "str",
                    "bool",
                    "float",
                    "int"
                ],
                "value": [
                    "str",
                    "None",
                    "bool",
                    "float",
                    "int"
                ],
                "max_hops": [
                    "str",
                    "None",
                    "bool",
                    "float",
                    "int"
                ],
                "max_fees": [
                    "str",
                    "None",
                    "bool",
                    "float",
                    "int"
                ],
                "timestamp": [
                    "int",
                    "str",
                    "bool",
                    "float"
                ]
            }
        },
        "CurrencyNetworkGraph.find_transfer_path_receiver_pays_fees": {
            "name": "find_transfer_path_receiver_pays_fees",
            "location": 775,
            "return": [
                "Tuple[(Any, list)]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "int",
                    "str",
                    "None",
                    "bool",
                    "Optional[int]"
                ],
                "target": [
                    "int",
                    "str",
                    "None",
                    "bool",
                    "Optional[int]"
                ],
                "value": [
                    "int",
                    "None",
                    "str",
                    "bool",
                    "Optional[int]"
                ],
                "max_hops": [
                    "int",
                    "None",
                    "str",
                    "bool",
                    "Optional[int]"
                ],
                "max_fees": [
                    "int",
                    "None",
                    "str",
                    "bool",
                    "Optional[int]"
                ],
                "timestamp": [
                    "int",
                    "str",
                    "bool",
                    "Optional[int]"
                ]
            }
        },
        "CurrencyNetworkGraph._find_transfer_path": {
            "name": "_find_transfer_path",
            "location": 789,
            "return": [
                "Tuple[(Any, list)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CurrencyNetworkGraph.close_trustline_path_triangulation": {
            "name": "close_trustline_path_triangulation",
            "location": 827,
            "return": [
                "relay.network_graph.payment_path.PaymentPath"
            ],
            "arguments": {
                "self": [],
                "timestamp": [
                    "str"
                ],
                "source": [
                    "str"
                ],
                "target": [
                    "str"
                ],
                "max_hops": [
                    "bool",
                    "None",
                    "str",
                    "Optional[int]",
                    "tuple[]",
                    "Optional[Tuple]",
                    "typing.Sequence[int]",
                    "Optional[Sequence[int]]",
                    "tuple[typing.Union[float,float]]",
                    "Optional[str]",
                    "Optional[Tuple[float, float]]"
                ],
                "max_fees": [
                    "str",
                    "None",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "CurrencyNetworkGraph.find_maximum_capacity_path": {
            "name": "find_maximum_capacity_path",
            "location": 896,
            "return": [
                "CapacityPath"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "bytes",
                    "Union[str, bytes]",
                    "None",
                    "Literal",
                    "Optional[str]"
                ],
                "target": [
                    "str",
                    "bytes",
                    "Union[str, bytes]",
                    "None",
                    "Literal",
                    "Optional[str]"
                ],
                "max_hops": [
                    "IO",
                    "None",
                    "logging.Logger",
                    "typing.IO",
                    "Sized",
                    "typing.Sized"
                ],
                "timestamp": [
                    "int",
                    "IO",
                    "logging.Logger",
                    "Sized"
                ]
            }
        },
        "CurrencyNetworkGraph.get_balances_along_path": {
            "name": "get_balances_along_path",
            "location": 932,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "List[str]",
                    "IO"
                ]
            }
        },
        "CurrencyNetworkGraphForTesting.__init__": {
            "name": "__init__",
            "location": 945,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "capacity_imbalance_fee_divisor": [
                    "int",
                    "Optional[float]",
                    "bool",
                    "float"
                ],
                "default_interest_rate": [
                    "int",
                    "Optional[float]",
                    "bool",
                    "float"
                ],
                "custom_interests": [
                    "bool",
                    "Optional[float]",
                    "float",
                    "int"
                ],
                "prevent_mediator_interests": [
                    "bool",
                    "Optional[float]",
                    "float",
                    "int"
                ]
            }
        },
        "CurrencyNetworkGraphForTesting.freeze_trustline": {
            "name": "freeze_trustline",
            "location": 959,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "creditor": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "debtor": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "CurrencyNetworkGraphForTesting.transfer_path": {
            "name": "transfer_path",
            "location": 966,
            "return": [
                "int",
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Callable[[str], str]",
                    "typing.Callable[str, str]"
                ],
                "value": [
                    "str",
                    "int"
                ],
                "expected_fees": [
                    "str",
                    "bool",
                    "tuple",
                    "tuple[]"
                ],
                "timestamp": [
                    "int",
                    "bool",
                    "bytes",
                    "str"
                ]
            }
        },
        "CurrencyNetworkGraphForTesting.mediated_transfer": {
            "name": "mediated_transfer",
            "location": 989,
            "return": [
                "str",
                "Union[str, IO[bytes]]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "bool",
                    "bytes",
                    "List[Tuple[str, str]]",
                    "list[tuple[typing.Union[str,str]]]"
                ],
                "target": [
                    "str",
                    "bool",
                    "bytes",
                    "List[Tuple[str, str]]",
                    "list[tuple[typing.Union[str,str]]]"
                ],
                "value": [
                    "str"
                ],
                "timestamp": [
                    "str",
                    "int"
                ]
            }
        },
        "CurrencyNetworkGraph.draw.mapping": {
            "name": "mapping",
            "location": 718,
            "return": [
                "str",
                "List[str]",
                "bool",
                "bytes"
            ],
            "arguments": {
                "address": [
                    "str",
                    "int",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        }
    },
    "relay-master/src/relay/network_graph/graph_constants.py": {},
    "relay-master/src/relay/network_graph/interests.py": {
        "_ensure_non_negative_delta_time": {
            "name": "_ensure_non_negative_delta_time",
            "location": 5,
            "return": [
                "Union[(int, _T0)]"
            ],
            "arguments": {
                "delta_time": [
                    "_T0"
                ]
            }
        },
        "calculate_interests": {
            "name": "calculate_interests",
            "location": 12,
            "return": [
                "int"
            ],
            "arguments": {
                "balance": [
                    "int"
                ],
                "internal_interest_rate": [
                    "int"
                ],
                "delta_time_in_seconds": [
                    "int"
                ],
                "highest_order": [
                    "int"
                ]
            }
        },
        "balance_with_interests": {
            "name": "balance_with_interests",
            "location": 37,
            "return": [
                "int"
            ],
            "arguments": {
                "balance": [
                    "int"
                ],
                "internal_interest_rate_positive_balance": [
                    "int"
                ],
                "internal_interest_rate_negative_balance": [
                    "int"
                ],
                "delta_time_in_seconds": [
                    "int"
                ]
            }
        }
    },
    "relay-master/src/relay/network_graph/payment_path.py": {},
    "relay-master/src/relay/network_graph/trustline_data.py": {
        "get": {
            "name": "get",
            "location": 17,
            "return": [
                "Union[(_T2, _T3)]"
            ],
            "arguments": {
                "user": [
                    "bool",
                    "str",
                    "Optional[bool]",
                    "dict",
                    "int",
                    "Optional[str]"
                ],
                "counter_party": [
                    "bool",
                    "str",
                    "Optional[bool]",
                    "dict",
                    "int",
                    "Optional[str]"
                ],
                "value": [
                    "_T2"
                ],
                "reverse_value": [
                    "_T3"
                ]
            }
        },
        "set": {
            "name": "set",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "\"ks.Series\"",
                    "list",
                    "str",
                    "Pattern",
                    "List[Optional[Any]]",
                    "Optional[List[str]]",
                    "bool"
                ],
                "user": [
                    "bool",
                    "int"
                ],
                "counter_party": [
                    "bool",
                    "int"
                ],
                "setter_dict": [
                    "dict[str, float]",
                    "Dict[str, float]",
                    "dict[, ]",
                    "dict",
                    "dict[str, dict[str, typing.Any]]",
                    "Dict[str, Dict[str, Any]]",
                    "dict[str, dict[, ]]",
                    "Dict[str, dict]",
                    "dict[str, list[str]]",
                    "Dict[str, List[str]]",
                    "Mapping[str, Mapping[str, Any]]"
                ],
                "reverse_setter_dict": [
                    "dict[str, float]",
                    "Dict[str, float]",
                    "dict[, ]",
                    "dict",
                    "dict[str, dict[str, typing.Any]]",
                    "Dict[str, Dict[str, Any]]",
                    "dict[str, dict[, ]]",
                    "Dict[str, dict]",
                    "Mapping[str, Mapping[str, Any]]"
                ]
            }
        },
        "get_balance": {
            "name": "get_balance",
            "location": 33,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "data": [
                    "int",
                    "bytes",
                    "bytearray",
                    "bool"
                ],
                "user": [
                    "int",
                    "bytes",
                    "bytearray",
                    "bool"
                ],
                "counter_party": [
                    "int",
                    "bytes",
                    "bytearray",
                    "bool"
                ]
            }
        },
        "set_balance": {
            "name": "set_balance",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "Exception",
                    "str",
                    "bool",
                    "IO",
                    "typing.IO",
                    "type",
                    "typing.Type"
                ],
                "user": [
                    "Exception",
                    "str",
                    "bool",
                    "IO",
                    "typing.IO",
                    "type",
                    "typing.Type"
                ],
                "counter_party": [
                    "Exception",
                    "str",
                    "bool",
                    "IO",
                    "typing.IO",
                    "type",
                    "typing.Type"
                ],
                "balance": [
                    "bool",
                    "Exception",
                    "str",
                    "IO",
                    "type"
                ]
            }
        },
        "get_creditline": {
            "name": "get_creditline",
            "location": 46,
            "return": [
                "Optional[str]",
                "str",
                "Sequence[str]",
                "bytes",
                "Callable[[], T]",
                "tuple"
            ],
            "arguments": {
                "data": [
                    "int",
                    "bytes"
                ],
                "user": [
                    "int",
                    "bytes"
                ],
                "counter_party": [
                    "int",
                    "bytes"
                ]
            }
        },
        "set_creditline": {
            "name": "set_creditline",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "str",
                    "float"
                ],
                "user": [
                    "str",
                    "float"
                ],
                "counter_party": [
                    "str",
                    "float"
                ],
                "creditline": [
                    "str",
                    "float"
                ]
            }
        },
        "get_interest_rate": {
            "name": "get_interest_rate",
            "location": 71,
            "return": [
                "Callable[[], T]",
                "str",
                "bool",
                "Optional[Any]"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "int"
                ],
                "user": [
                    "bytes",
                    "int"
                ],
                "counter_party": [
                    "bytes",
                    "int"
                ]
            }
        },
        "set_interest_rate": {
            "name": "set_interest_rate",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "user": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "counter_party": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "interest_rate": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "get_is_frozen": {
            "name": "get_is_frozen",
            "location": 87,
            "return": [
                "str",
                "Dict[str, Any]",
                "Dict[str, Dict[str, Any]]",
                "int"
            ],
            "arguments": {
                "data": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "set_is_frozen": {
            "name": "set_is_frozen",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "_is_frozen": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "get_mtime": {
            "name": "get_mtime",
            "location": 95,
            "return": [
                "str",
                "bytes",
                "Dict[str, Any]"
            ],
            "arguments": {
                "data": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "set_mtime": {
            "name": "set_mtime",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bytes",
                    "list",
                    "list[]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "dict",
                    "dict[, ]"
                ],
                "timestamp": [
                    "str",
                    "bytes",
                    "list",
                    "list[]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "relay-master/src/relay/network_graph/__init__.py": {},
    "relay-master/src/relay/pushservice/client.py": {
        "PushNotificationClient.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rawPushService": [
                    "relay.pushservice.pushservice.FirebaseRawPushService"
                ],
                "client_token": [
                    "str"
                ]
            }
        },
        "PushNotificationClient._execute_send": {
            "name": "_execute_send",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subscription": [
                    "relay.streams.Subscription"
                ],
                "event": [
                    "relay.events.Event"
                ]
            }
        }
    },
    "relay-master/src/relay/pushservice/client_token_db.py": {
        "ClientTokenDB.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "engine": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "ClientTokenDB.session": {
            "name": "session",
            "location": 36,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientTokenDB.get_client_tokens": {
            "name": "get_client_tokens",
            "location": 48,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "user_address": [
                    "str"
                ]
            }
        },
        "ClientTokenDB.get_all_client_tokens": {
            "name": "get_all_client_tokens",
            "location": 57,
            "return": [
                "Iterable[TokenMapping]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientTokenDB.add_client_token": {
            "name": "add_client_token",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_address": [
                    "str"
                ],
                "client_token": [
                    "str"
                ]
            }
        },
        "ClientTokenDB.delete_client_token": {
            "name": "delete_client_token",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_address": [
                    "str"
                ],
                "client_token": [
                    "str"
                ]
            }
        }
    },
    "relay-master/src/relay/pushservice/pushservice.py": {
        "dedup_event_id": {
            "name": "dedup_event_id",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "client_token": [
                    "str",
                    "IO[Any]",
                    "typing.IO",
                    "dict",
                    "dict[, ]"
                ],
                "event": [
                    "relay.events.Event"
                ]
            }
        },
        "create_firebase_app_from_path_to_keyfile": {
            "name": "create_firebase_app_from_path_to_keyfile",
            "location": 54,
            "return": [],
            "arguments": {
                "path_to_keyfile": [
                    "str"
                ]
            }
        },
        "_build_data_message": {
            "name": "_build_data_message",
            "location": 136,
            "return": [
                "None",
                "bool",
                "Dict[str, Any]",
                "Optional[str]",
                "werkzeug.exceptions.HTTPException"
            ],
            "arguments": {
                "client_token": [
                    "str"
                ],
                "event": [
                    "relay.events.Event"
                ]
            }
        },
        "_build_data_prop": {
            "name": "_build_data_prop",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "relay.events.Event"
                ]
            }
        },
        "_get_data_prop_dict": {
            "name": "_get_data_prop_dict",
            "location": 170,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "event": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "FirebaseRawPushService.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "FirebaseRawPushService.send_event": {
            "name": "send_event",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_token": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "event": [
                    "relay.events.Event"
                ]
            }
        },
        "FirebaseRawPushService.check_client_token": {
            "name": "check_client_token",
            "location": 101,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "client_token": [
                    "str"
                ]
            }
        }
    },
    "relay-master/src/relay/pushservice/__init__.py": {},
    "relay-master/tests/conftest.py": {
        "pytest_collection_modifyitems": {
            "name": "pytest_collection_modifyitems",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "session": [
                    "str",
                    "float",
                    "Sequence",
                    "typing.Sequence[]"
                ],
                "config": [
                    "str",
                    "float",
                    "Sequence",
                    "typing.Sequence[]"
                ],
                "items": [
                    "list[]",
                    "list",
                    "dict[, ]",
                    "dict",
                    "dict[int, dict[str, typing.Any]]",
                    "Match",
                    "list[str]",
                    "Dict[int, Dict[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "kill_remaining_greenlets": {
            "name": "kill_remaining_greenlets",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "addresses": {
            "name": "addresses",
            "location": 57,
            "return": [
                "list[typing.Text]",
                "int",
                "str",
                "Callable",
                "IO[str]",
                "Iterable[int]"
            ],
            "arguments": {}
        },
        "test_account": {
            "name": "test_account",
            "location": 67,
            "return": [
                "int",
                "Account"
            ],
            "arguments": {}
        },
        "test_extra_data": {
            "name": "test_extra_data",
            "location": 75,
            "return": [
                "Iterable[Any]",
                "Sequence[Any]"
            ],
            "arguments": {}
        },
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "str"
                ]
            }
        },
        "pytest_collection_modifyitems.inside_unit_directory": {
            "name": "inside_unit_directory",
            "location": 22,
            "return": [
                "bool",
                "str",
                "DefaultDict[int, List[Any]]",
                "OrderedDict"
            ],
            "arguments": {
                "item": [
                    "int",
                    "str",
                    "T"
                ]
            }
        },
        "TestDataReader.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDataReader.make_param": {
            "name": "make_param",
            "location": 98,
            "return": [
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "fixturename": [
                    "str",
                    "bytes"
                ],
                "count": [
                    "str",
                    "bytes"
                ],
                "data": [
                    "bytes",
                    "int",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "TestDataReader.make_param_Transfer": {
            "name": "make_param_Transfer",
            "location": 101,
            "return": [
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "fixturename": [
                    "str",
                    "bytes"
                ],
                "count": [],
                "data": []
            }
        },
        "TestDataReader.pytest_generate_tests": {
            "name": "pytest_generate_tests",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metafunc": [
                    "str"
                ]
            }
        }
    },
    "relay-master/tests/gen_testdata.py": {
        "generate_and_write_testdata": {
            "name": "generate_and_write_testdata",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "generator_class": [
                    "int",
                    "str",
                    "bool",
                    "None",
                    "set[]",
                    "Optional[str]",
                    "set"
                ],
                "web3": [
                    "int",
                    "str",
                    "bool",
                    "None",
                    "set[]",
                    "Optional[str]",
                    "set"
                ],
                "contract": [
                    "int",
                    "str",
                    "bool",
                    "None",
                    "set[]",
                    "Optional[str]",
                    "set"
                ],
                "output_directory": [
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 202,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "url": [
                    "bool",
                    "list",
                    "list[]"
                ],
                "output_directory": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "generator_names": [
                    "tuple[typing.Union[str,str]]",
                    "Tuple[str, str]",
                    "dict[str, str]",
                    "Tuple[str, str, str, str, str, str, str, str, str]",
                    "list[str]",
                    "Dict[str, str]",
                    "tuple[typing.Union[str,list[]]]",
                    "List[str]",
                    "list[list[str]]",
                    "Tuple[str, list]",
                    "set[str]",
                    "List[List[str]]",
                    "Set[str]"
                ]
            }
        },
        "TestDataGenerator.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "web3": [
                    "int",
                    "float",
                    "bool"
                ],
                "contract": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "TestDataGenerator.name": {
            "name": "name",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Exception",
                    "typing.Type",
                    "type",
                    "Type"
                ]
            }
        },
        "TestDataGenerator.generate_input_data": {
            "name": "generate_input_data",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDataGenerator.compute_one_result": {
            "name": "compute_one_result",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDataGenerator.make_test_data": {
            "name": "make_test_data",
            "location": 39,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "CalculateFee.generate_input_data": {
            "name": "generate_input_data",
            "location": 52,
            "return": [
                "Generator[(dict, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CalculateFee.compute_one_result": {
            "name": "compute_one_result",
            "location": 63,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "imbalance_generated": [
                    "bytes",
                    "str",
                    "bool",
                    "web3.contracContract"
                ],
                "capacity_imbalance_fee_divisor": [
                    "bytes",
                    "str",
                    "bool",
                    "web3.contracContract"
                ]
            }
        },
        "ImbalanceGenerated.generate_input_data": {
            "name": "generate_input_data",
            "location": 91,
            "return": [
                "Generator[(dict, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImbalanceGenerated.compute_one_result": {
            "name": "compute_one_result",
            "location": 96,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Union[int, str]",
                    "str",
                    "bool",
                    "list[typing.Any]",
                    "Optional[List[Any]]",
                    "None"
                ],
                "balance": [
                    "int",
                    "Union[int, str]",
                    "str",
                    "bool",
                    "list[typing.Any]",
                    "Optional[List[Any]]",
                    "None"
                ]
            }
        },
        "Transfer._gen_addresses": {
            "name": "_gen_addresses",
            "location": 105,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "num_addresses": [
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "Transfer.generate_input_data": {
            "name": "generate_input_data",
            "location": 111,
            "return": [
                "itertools.chain"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transfer._generate_input_data1": {
            "name": "_generate_input_data1",
            "location": 116,
            "return": [
                "Generator[(dict, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transfer._generate_input_data0": {
            "name": "_generate_input_data0",
            "location": 130,
            "return": [
                "Generator[(dict, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transfer.compute_one_result": {
            "name": "compute_one_result",
            "location": 146,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "fees_paid_by": [
                    "bool",
                    "Callable",
                    "str",
                    "typing.Callable[, ]",
                    "dict",
                    "dict[, ]"
                ],
                "value": [
                    "bool",
                    "dict[, ]",
                    "dict",
                    "None",
                    "Optional[\"ShippingInfo\"]",
                    "set[str]",
                    "int",
                    "Optional[Set[str]]"
                ],
                "capacity_imbalance_fee_divisor": [
                    "bool",
                    "List[int]",
                    "list[int]",
                    "int",
                    "list[str]",
                    "List[str]",
                    "str",
                    "Union[str, Tuple[str, str]]",
                    "tuple[typing.Union[str,str]]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "addresses": [],
                "balances_before": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "main.make_contract": {
            "name": "make_contract",
            "location": 211,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "relay-master/tests/test_signing.py": {
        "test_eth_validate": {
            "name": "test_eth_validate",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "test_account": [
                    "int"
                ]
            }
        },
        "test_eth_validate_fail": {
            "name": "test_eth_validate_fail",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "test_account": [
                    "int"
                ]
            }
        },
        "test_eth_validate_fail2": {
            "name": "test_eth_validate_fail2",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "test_account": [
                    "str"
                ]
            }
        }
    },
    "relay-master/tests/tlclient.py": {
        "time_it": {
            "name": "time_it",
            "location": 61,
            "return": [
                "float"
            ],
            "arguments": {
                "fun": [
                    "bool",
                    "float",
                    "int"
                ]
            }
        },
        "run_performance_test": {
            "name": "run_performance_test",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "calls": [
                    "str"
                ]
            }
        },
        "run_all_close_trustline_path_info": {
            "name": "run_all_close_trustline_path_info",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "show_all_user_events": {
            "name": "show_all_user_events",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str"
                ]
            }
        },
        "performance_test_transfer_details": {
            "name": "performance_test_transfer_details",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "Client"
                ]
            }
        },
        "performance_test_transfer_status": {
            "name": "performance_test_transfer_status",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "Client"
                ]
            }
        },
        "Client.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Client.post": {
            "name": "post",
            "location": 16,
            "return": [
                "List[str]",
                "str",
                "dict",
                "List[Mapping[str, Any]]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool",
                    "dict",
                    "dict[, ]"
                ],
                "data": [
                    "str",
                    "bool",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "Client.get": {
            "name": "get",
            "location": 21,
            "return": [
                "str",
                "Set[str]",
                "bool",
                "MutableMapping[str, int]",
                "List[Optional[str]]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "params": [
                    "str",
                    "None"
                ]
            }
        },
        "Client.build_url": {
            "name": "build_url",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "Client.networks": {
            "name": "networks",
            "location": 29,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.users": {
            "name": "users",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "network": [
                    "int",
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "Client.trustlines": {
            "name": "trustlines",
            "location": 35,
            "return": [
                "str",
                "Optional[str]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "network": [
                    "List[int]",
                    "list[int]"
                ],
                "user": [
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "Client.close_trustline_path_info": {
            "name": "close_trustline_path_info",
            "location": 38,
            "return": [
                "str",
                "dict",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "network": [
                    "int",
                    "None",
                    "Optional[int]",
                    "bool"
                ],
                "user": [
                    "int",
                    "None",
                    "Optional[int]",
                    "bool"
                ],
                "other_user": [
                    "int",
                    "None",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "Client.transfer_details": {
            "name": "transfer_details",
            "location": 44,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "block_hash": [
                    "Optional[Dict]",
                    "str",
                    "dict[, ]",
                    "bool",
                    "None"
                ],
                "log_index": [
                    "Optional[Dict]",
                    "str",
                    "dict[, ]",
                    "bool",
                    "None"
                ]
            }
        },
        "Client.transfer_status": {
            "name": "transfer_status",
            "location": 50,
            "return": [
                "str",
                "dict[, ]",
                "List[Dict[str, Any]]",
                "bytes",
                "int",
                "dict[str, str]",
                "dict",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "transaction_hash": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Type",
                    "typing.Type"
                ]
            }
        },
        "Client.transfers": {
            "name": "transfers",
            "location": 54,
            "return": [
                "Type",
                "int"
            ],
            "arguments": {
                "self": [],
                "network": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Client.user_events": {
            "name": "user_events",
            "location": 57,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "network": [],
                "user": []
            }
        },
        "run_performance_test.run": {
            "name": "run",
            "location": 70,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "call": []
            }
        }
    },
    "relay-master/tests/__init__.py": {},
    "relay-master/tests/chain_integration/conftest.py": {
        "expiration_time": {
            "name": "expiration_time",
            "location": 40,
            "return": [
                "int",
                "Optional[bool]",
                "Iterable[Any]",
                "str"
            ],
            "arguments": {}
        },
        "maker": {
            "name": "maker",
            "location": 45,
            "return": [
                "int",
                "str",
                "Union[str, Dict]",
                "dict"
            ],
            "arguments": {
                "accounts": [
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "maker_key": {
            "name": "maker_key",
            "location": 51,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "account_keys": [
                    "str"
                ]
            }
        },
        "taker": {
            "name": "taker",
            "location": 57,
            "return": [
                "int",
                "str",
                "Union[str, Dict]",
                "dict"
            ],
            "arguments": {
                "accounts": [
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "trustlines": {
            "name": "trustlines",
            "location": 306,
            "return": [
                "list[tuple[typing.Union[str,int]]]",
                "Dict[str, str]",
                "Dict[str, Any]",
                "List[str]"
            ],
            "arguments": {
                "accounts": [
                    "str"
                ]
            }
        },
        "trustlines_with_interests": {
            "name": "trustlines_with_interests",
            "location": 319,
            "return": [
                "list[tuple[typing.Union[str,int]]]",
                "bool",
                "Set[str]",
                "int",
                "Dict[int, Dict[int, Any]]"
            ],
            "arguments": {
                "accounts": [
                    "str",
                    "bool"
                ]
            }
        },
        "deploy_currency_network_v2": {
            "name": "deploy_currency_network_v2",
            "location": 329,
            "return": [
                "int",
                "Iterable[Iterable[T]]",
                "Dict[str, str]"
            ],
            "arguments": {
                "web3": [
                    "str"
                ]
            }
        },
        "deploy_test_networks": {
            "name": "deploy_test_networks",
            "location": 343,
            "return": [
                "int",
                "str",
                "Dict[str, int]"
            ],
            "arguments": {
                "web3": [
                    "int",
                    "str",
                    "Dict[str, int]",
                    "dict[str, int]"
                ]
            }
        },
        "contracts": {
            "name": "contracts",
            "location": 348,
            "return": [
                "Callable[[Any], bool]",
                "Dict[str, List[Any]]",
                "bool"
            ],
            "arguments": {}
        },
        "currency_network_v2_abi": {
            "name": "currency_network_v2_abi",
            "location": 353,
            "return": [
                "str",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "contracts": [
                    "str",
                    "int"
                ]
            }
        },
        "exchange_abi": {
            "name": "exchange_abi",
            "location": 358,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "contracts": [
                    "str",
                    "int",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "token_abi": {
            "name": "token_abi",
            "location": 363,
            "return": [
                "str",
                "int",
                "list"
            ],
            "arguments": {
                "contracts": [
                    "str",
                    "bool"
                ]
            }
        },
        "testnetwork1_address": {
            "name": "testnetwork1_address",
            "location": 368,
            "return": [
                "str",
                "List[List[str]]",
                "int"
            ],
            "arguments": {
                "web3": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "testnetwork2_address": {
            "name": "testnetwork2_address",
            "location": 373,
            "return": [
                "str",
                "List[List[str]]",
                "int"
            ],
            "arguments": {
                "web3": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "testnetwork3_address": {
            "name": "testnetwork3_address",
            "location": 378,
            "return": [
                "str",
                "List[List[str]]",
                "int"
            ],
            "arguments": {
                "web3": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "chain": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "testnetwork4_address": {
            "name": "testnetwork4_address",
            "location": 383,
            "return": [
                "str",
                "List[List[str]]",
                "int"
            ],
            "arguments": {
                "web3": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "testnetworks": {
            "name": "testnetworks",
            "location": 388,
            "return": [
                "tuple[typing.Union[int,str]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "web3": [
                    "str",
                    "bytearray",
                    "int"
                ],
                "maker": [
                    "str"
                ],
                "taker": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "exchange_address": {
            "name": "exchange_address",
            "location": 409,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testnetworks": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "unw_eth_address": {
            "name": "unw_eth_address",
            "location": 414,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testnetworks": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "network_addresses_with_exchange": {
            "name": "network_addresses_with_exchange",
            "location": 419,
            "return": [
                "list[]",
                "bool",
                "int",
                "Tuple[int, int]",
                "tuple",
                "List[str]",
                "Union[List[str], str]"
            ],
            "arguments": {
                "testnetworks": [
                    "str",
                    "list[int]",
                    "List[int]",
                    "list[str]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "currency_network": {
            "name": "currency_network",
            "location": 424,
            "return": [
                "CurrencyNetworkProxy",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "web3": [
                    "int",
                    "Iterator[str]",
                    "float",
                    "typing.Iterator",
                    "List[str]",
                    "list[str]"
                ],
                "currency_network_v2_abi": [
                    "int",
                    "Iterator[str]",
                    "float",
                    "typing.Iterator",
                    "List[str]",
                    "list[str]"
                ],
                "testnetwork1_address": [
                    "int",
                    "Iterator[str]",
                    "float",
                    "typing.Iterator",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "currency_network_with_trustlines": {
            "name": "currency_network_with_trustlines",
            "location": 432,
            "return": [
                "CurrencyNetworkProxy",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "web3": [
                    "int",
                    "Iterator[str]",
                    "float",
                    "typing.Iterator",
                    "List[str]",
                    "list[str]"
                ],
                "currency_network_v2_abi": [
                    "int",
                    "Iterator[str]",
                    "float",
                    "typing.Iterator",
                    "List[str]",
                    "list[str]"
                ],
                "testnetwork2_address": [
                    "int",
                    "Iterator[str]",
                    "float",
                    "typing.Iterator",
                    "List[str]",
                    "list[str]"
                ],
                "trustlines": [
                    "int",
                    "Optional[Collection[int]]",
                    "typing.Collection",
                    "tuple",
                    "None",
                    "tuple[]"
                ]
            }
        },
        "currency_network_with_trustlines_and_interests": {
            "name": "currency_network_with_trustlines_and_interests",
            "location": 444,
            "return": [
                "CurrencyNetworkProxy",
                "bool",
                "dict"
            ],
            "arguments": {
                "web3": [
                    "int",
                    "typing.Callable[, ]",
                    "Callable",
                    "typing.Iterator",
                    "bool",
                    "Iterator[str]"
                ],
                "currency_network_v2_abi": [
                    "int",
                    "typing.Callable[, ]",
                    "Callable",
                    "typing.Iterator",
                    "bool",
                    "Iterator[str]"
                ],
                "testnetwork2_address": [
                    "int",
                    "typing.Callable[, ]",
                    "Callable",
                    "typing.Iterator",
                    "bool",
                    "Iterator[str]"
                ],
                "trustlines_with_interests": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "nucypher.blockchain.eth.signers.Signer"
                ]
            }
        },
        "currency_network_with_trustlines_and_interests_session": {
            "name": "currency_network_with_trustlines_and_interests_session",
            "location": 456,
            "return": [
                "CurrencyNetworkProxy",
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "web3": [
                    "int",
                    "typing.Callable[, ]",
                    "bool",
                    "typing.Iterator",
                    "Callable",
                    "Iterator[str]"
                ],
                "currency_network_v2_abi": [
                    "int",
                    "typing.Callable[, ]",
                    "bool",
                    "typing.Iterator",
                    "Callable",
                    "Iterator[str]"
                ],
                "testnetwork3_address": [
                    "int",
                    "typing.Callable[, ]",
                    "bool",
                    "typing.Iterator",
                    "Callable",
                    "Iterator[str]"
                ],
                "trustlines_with_interests": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "nucypher.blockchain.eth.signers.Signer",
                    "nucypher.blockchain.eth.registry.BaseContractRegistry"
                ]
            }
        },
        "currency_network_with_trustlines_session": {
            "name": "currency_network_with_trustlines_session",
            "location": 468,
            "return": [
                "CurrencyNetworkProxy",
                "int",
                "Sequence[float]",
                "Optional[List[str]]",
                "bytearray"
            ],
            "arguments": {
                "web3": [
                    "int",
                    "bytes"
                ],
                "currency_network_v2_abi": [
                    "int",
                    "bytes"
                ],
                "testnetwork4_address": [
                    "int",
                    "bytes"
                ],
                "trustlines": [
                    "int",
                    "float",
                    "Optional[List[str]]",
                    "list[str]",
                    "None"
                ]
            }
        },
        "test_currency_network_v1": {
            "name": "test_currency_network_v1",
            "location": 480,
            "return": [
                "CurrencyNetworkProxy",
                "int",
                "str"
            ],
            "arguments": {
                "web3": [
                    "int",
                    "bool"
                ],
                "currency_network_v2_abi": [
                    "str"
                ],
                "testnetwork1_address": [
                    "str"
                ],
                "contracts": []
            }
        },
        "address_oracle": {
            "name": "address_oracle",
            "location": 502,
            "return": [
                "AddressOracle",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testnetworks": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "CurrencyNetworkProxy.setup_trustlines": {
            "name": "setup_trustlines",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trustlines": [
                    "str",
                    "int",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "CurrencyNetworkProxy.update_trustline": {
            "name": "update_trustline",
            "location": 69,
            "return": [
                "float",
                "typing.Type",
                "int",
                "str",
                "list[tuple[typing.Union[int,str]]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "from_": [
                    "Optional[List[str]]",
                    "int",
                    "list[str]",
                    "None"
                ],
                "to": [
                    "Optional[List[str]]",
                    "int",
                    "list[str]",
                    "None"
                ],
                "creditline_given": [
                    "Optional[List[str]]",
                    "int",
                    "list[str]",
                    "None"
                ],
                "creditline_received": [
                    "Optional[List[str]]",
                    "int",
                    "list[str]",
                    "None"
                ],
                "interest_rate_given": [
                    "Optional[List[str]]",
                    "int",
                    "None",
                    "list[str]"
                ],
                "interest_rate_received": [
                    "Optional[List[str]]",
                    "int",
                    "None",
                    "list[str]"
                ],
                "is_frozen": [
                    "bool",
                    "Optional[List[str]]",
                    "int"
                ],
                "transfer": [
                    "int",
                    "Optional[List[str]]"
                ]
            }
        },
        "CurrencyNetworkProxy.update_trustline_function_call": {
            "name": "update_trustline_function_call",
            "location": 93,
            "return": [
                "bool",
                "BaseException"
            ],
            "arguments": {
                "self": [],
                "to": [
                    "bool"
                ],
                "creditline_given": [
                    "bool"
                ],
                "creditline_received": [
                    "bool"
                ],
                "interest_rate_given": [
                    "core.models.Subtask",
                    "None"
                ],
                "interest_rate_received": [
                    "core.models.Subtask",
                    "None"
                ],
                "is_frozen": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "str",
                    "dict"
                ],
                "transfer": [
                    "int",
                    "Optional[str]",
                    "bool",
                    "str"
                ]
            }
        },
        "CurrencyNetworkProxy.cancel_trustline_update": {
            "name": "cancel_trustline_update",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "from_": [
                    "List[str]",
                    "bool",
                    "list[str]",
                    "Mapping[Any, Any]",
                    "typing.Mapping"
                ],
                "to": [
                    "List[str]",
                    "bool",
                    "list[str]",
                    "Mapping[Any, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "CurrencyNetworkProxy.update_trustline_with_accept": {
            "name": "update_trustline_with_accept",
            "location": 132,
            "return": [
                "core.models.my_user.MyUser",
                "List[Dict[str, Any]]",
                "Tuple[str]",
                "bool",
                "Optional[int]",
                "Optional[str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "from_": [
                    "int"
                ],
                "to": [
                    "int"
                ],
                "creditline_given": [
                    "int"
                ],
                "creditline_received": [
                    "int"
                ],
                "interest_rate_given": [
                    "int",
                    "None"
                ],
                "interest_rate_received": [
                    "int",
                    "None"
                ],
                "is_frozen": [
                    "int",
                    "bool"
                ],
                "transfer": [
                    "int"
                ]
            }
        },
        "CurrencyNetworkProxy.update_trustline_and_cancel": {
            "name": "update_trustline_and_cancel",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "from_": [
                    "List[str]",
                    "list[str]"
                ],
                "to": [
                    "List[str]",
                    "list[str]"
                ],
                "creditline_given": [
                    "float"
                ],
                "creditline_received": [
                    "float"
                ],
                "interest_rate_given": [
                    "float",
                    "None"
                ],
                "interest_rate_received": [
                    "float",
                    "None"
                ],
                "is_frozen": [
                    "float",
                    "bool"
                ]
            }
        },
        "CurrencyNetworkProxy.update_trustline_and_reject": {
            "name": "update_trustline_and_reject",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "from_": [
                    "List[str]",
                    "list[str]"
                ],
                "to": [
                    "List[str]",
                    "list[str]"
                ],
                "creditline_given": [
                    "float"
                ],
                "creditline_received": [
                    "float"
                ],
                "interest_rate_given": [
                    "float",
                    "None"
                ],
                "interest_rate_received": [
                    "float",
                    "None"
                ],
                "is_frozen": [
                    "float",
                    "bool"
                ]
            }
        },
        "CurrencyNetworkProxy.close_trustline": {
            "name": "close_trustline",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "from_": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[int]",
                    "list[int]"
                ],
                "to": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "CurrencyNetworkProxy.settle_and_close_trustline": {
            "name": "settle_and_close_trustline",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "from_": [
                    "int",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "list[str]"
                ],
                "to": [
                    "int",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "CurrencyNetworkProxy.transfer": {
            "name": "transfer",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "from_": [
                    "str",
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "int",
                    "Optional[str]",
                    "None",
                    "Optional[Dict[str, str]]",
                    "dict[str, str]"
                ],
                "value": [
                    "str",
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "int",
                    "Optional[str]",
                    "None",
                    "Optional[Dict[str, str]]",
                    "dict[str, str]"
                ],
                "max_fee": [
                    "str",
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "int",
                    "Optional[str]",
                    "None",
                    "Optional[Dict[str, str]]",
                    "dict[str, str]"
                ],
                "path": [
                    "str",
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "int",
                    "Optional[str]",
                    "None",
                    "Optional[Dict[str, str]]",
                    "dict[str, str]"
                ],
                "extra_data": [
                    "bytes",
                    "str",
                    "Sequence[str]",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "int"
                ]
            }
        },
        "CurrencyNetworkProxy.transfer_on_path": {
            "name": "transfer_on_path",
            "location": 224,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Optional[int]",
                    "str",
                    "None",
                    "bool"
                ],
                "path": [
                    "str",
                    "int",
                    "bool",
                    "Optional[int]"
                ],
                "max_fee": [
                    "int",
                    "None",
                    "Optional[str]",
                    "bytes",
                    "Optional[Sequence[Any]]",
                    "str",
                    "typing.Sequence[typing.Any]"
                ],
                "extra_data": [
                    "bytes",
                    "int",
                    "bool",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "CurrencyNetworkProxy.transfer_receiver_pays_on_path": {
            "name": "transfer_receiver_pays_on_path",
            "location": 233,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "bytes",
                    "Tuple[List[Any], List[Any]]",
                    "tuple[typing.Union[list[typing.Any],list[typing.Any]]]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "path": [
                    "list[str]",
                    "bytes",
                    "int",
                    "dict",
                    "List[str]",
                    "Dict[str, List[str]]"
                ],
                "max_fee": [
                    "float",
                    "None",
                    "Optional[Sequence[Any]]",
                    "typing.Sequence[typing.Any]",
                    "Optional[float]",
                    "int",
                    "Optional[int]",
                    "Optional[bool]"
                ],
                "extra_data": [
                    "bytes",
                    "int",
                    "dict",
                    "List[str]",
                    "Dict[str, List[str]]"
                ]
            }
        },
        "CurrencyNetworkProxy.transfer_meta_transaction": {
            "name": "transfer_meta_transaction",
            "location": 242,
            "return": [
                "str",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[Dict]",
                    "dict[, ]",
                    "Callable[[dict], None]",
                    "None",
                    "List[str]",
                    "typing.Callable[dict[, ], None]",
                    "list[str]"
                ],
                "max_fee": [
                    "str",
                    "Optional[Dict]",
                    "dict[, ]",
                    "Callable[[dict], None]",
                    "None",
                    "List[str]",
                    "typing.Callable[dict[, ], None]",
                    "list[str]"
                ],
                "path": [
                    "str",
                    "Optional[Dict]",
                    "dict[, ]",
                    "Callable[[dict], None]",
                    "None",
                    "List[str]",
                    "typing.Callable[dict[, ], None]",
                    "list[str]"
                ],
                "extra_data": [
                    "bytes",
                    "str",
                    "Optional[Dict]",
                    "Callable[[dict], None]",
                    "List[str]"
                ]
            }
        },
        "CurrencyNetworkProxy.trustline_update_meta_transaction": {
            "name": "trustline_update_meta_transaction",
            "location": 251,
            "return": [
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "to": [
                    "Optional[List[str]]",
                    "int",
                    "list[str]",
                    "None"
                ],
                "creditline_given": [
                    "int",
                    "Optional[int]",
                    "Optional[List[str]]",
                    "None",
                    "list[str]"
                ],
                "creditline_received": [
                    "int",
                    "Optional[int]",
                    "Optional[List[str]]",
                    "None",
                    "list[str]"
                ],
                "interest_rate_given": [
                    "int",
                    "Optional[int]",
                    "Optional[List[str]]",
                    "None",
                    "list[str]"
                ],
                "interest_rate_received": [
                    "int",
                    "Optional[int]",
                    "Optional[List[str]]",
                    "None",
                    "list[str]"
                ],
                "is_frozen": [
                    "int",
                    "Optional[int]",
                    "Optional[List[str]]",
                    "None",
                    "list[str]"
                ],
                "transfer": [
                    "int",
                    "Optional[int]",
                    "Optional[List[str]]",
                    "None",
                    "list[str]"
                ]
            }
        },
        "CurrencyNetworkProxy.get_balance": {
            "name": "get_balance",
            "location": 277,
            "return": [
                "str",
                "int",
                "Optional[str]",
                "Type[T]"
            ],
            "arguments": {
                "self": [],
                "from_": [
                    "int",
                    "float",
                    "List[str]",
                    "list[str]",
                    "Optional[static_frame.core.util.IndexConstructor]",
                    "None"
                ],
                "to": [
                    "int",
                    "float",
                    "List[str]",
                    "list[str]",
                    "Optional[static_frame.core.util.IndexConstructor]",
                    "None"
                ]
            }
        },
        "CurrencyNetworkProxy.freeze_network": {
            "name": "freeze_network",
            "location": 280,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CurrencyNetworkProxy.time_travel_to_expiration": {
            "name": "time_travel_to_expiration",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "chain": [
                    "int",
                    "Generator",
                    "float",
                    "str",
                    "dict"
                ]
            }
        },
        "CurrencyNetworkProxy.unfreeze_network": {
            "name": "unfreeze_network",
            "location": 288,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CurrencyNetworkProxy.increase_debt": {
            "name": "increase_debt",
            "location": 291,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "debtor": [
                    "int",
                    "str",
                    "float",
                    "dict",
                    "dict[, ]",
                    "Optional[str]",
                    "None"
                ],
                "creditor": [
                    "int",
                    "str",
                    "float",
                    "dict",
                    "dict[, ]",
                    "Optional[str]",
                    "None"
                ],
                "value": [
                    "int",
                    "str",
                    "float",
                    "dict",
                    "dict[, ]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "CurrencyNetworkProxy.get_debt": {
            "name": "get_debt",
            "location": 298,
            "return": [
                "str",
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "debtor": [
                    "int",
                    "relay.exchange.order.Order"
                ],
                "creditor": [
                    "int",
                    "relay.exchange.order.Order"
                ]
            }
        },
        "CurrencyNetworkProxy.assert_debt_value": {
            "name": "assert_debt_value",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "debtor": [
                    "int",
                    "float"
                ],
                "creditor": [
                    "int",
                    "float"
                ],
                "value": [
                    "int",
                    "float"
                ]
            }
        },
        "address_oracle.AddressOracle.is_currency_network": {
            "name": "is_currency_network",
            "location": 504,
            "return": [
                "bool",
                "str",
                "Optional[Collection[int]]"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "List[str]",
                    "str",
                    "bool",
                    "slice"
                ]
            }
        },
        "address_oracle.AddressOracle.is_trusted_token": {
            "name": "is_trusted_token",
            "location": 507,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str"
                ]
            }
        }
    },
    "relay-master/tests/chain_integration/test_currency_network.py": {
        "context_switch": {
            "name": "context_switch",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_decimals": {
            "name": "test_decimals",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network": [
                    "str",
                    "float"
                ]
            }
        },
        "test_name": {
            "name": "test_name",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "test_symbol": {
            "name": "test_symbol",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network": [
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "test_address": {
            "name": "test_address",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network": [
                    "int"
                ],
                "testnetwork1_address": [
                    "int"
                ]
            }
        },
        "test_friends1": {
            "name": "test_friends1",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_with_trustlines": [],
                "accounts": []
            }
        },
        "test_friends2": {
            "name": "test_friends2",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_with_trustlines": [],
                "accounts": []
            }
        },
        "test_account1": {
            "name": "test_account1",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_with_trustlines": [
                    "str"
                ],
                "accounts": [
                    "str"
                ]
            }
        },
        "test_account2": {
            "name": "test_account2",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_with_trustlines": [
                    "str"
                ],
                "accounts": [
                    "str"
                ]
            }
        },
        "test_users": {
            "name": "test_users",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_with_trustlines": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "accounts": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_is_frozen": {
            "name": "test_is_frozen",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network": [
                    "bool",
                    "int"
                ],
                "chain": [
                    "str",
                    "bool",
                    "Dict[str, float]",
                    "dict[str, float]"
                ]
            }
        },
        "test_gen_graph_representation": {
            "name": "test_gen_graph_representation",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_with_trustlines": [],
                "accounts": []
            }
        },
        "test_listen_on_transfer": {
            "name": "test_listen_on_transfer",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network": [],
                "accounts": []
            }
        },
        "test_listen_on_trustline_update": {
            "name": "test_listen_on_trustline_update",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network": [],
                "accounts": []
            }
        },
        "test_listen_on_trustline_update_with_interests": {
            "name": "test_listen_on_trustline_update_with_interests",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network": [],
                "accounts": []
            }
        },
        "test_listen_on_transfer.f": {
            "name": "f",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "test_listen_on_trustline_update.f": {
            "name": "f",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "test_listen_on_trustline_update_with_interests.f": {
            "name": "f",
            "location": 128,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "event": [
                    "Dict[str, Any]",
                    "Optional[str]",
                    "str"
                ]
            }
        }
    },
    "relay-master/tests/chain_integration/test_delegate.py": {
        "delegate_address": {
            "name": "delegate_address",
            "location": 25,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "web3": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "delegate_config": {
            "name": "delegate_config",
            "location": 30,
            "return": [
                "dict[typing.Text, int]",
                "str",
                "Callable",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "delegate": {
            "name": "delegate",
            "location": 39,
            "return": [
                "Delegate",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "web3": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]"
                ],
                "delegate_address": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]"
                ],
                "contracts": [
                    "str",
                    "Callable",
                    "bool",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ],
                "proxy_factory": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]"
                ],
                "currency_network": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]"
                ],
                "delegate_config": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "delegate_with_one_fees": {
            "name": "delegate_with_one_fees",
            "location": 59,
            "return": [
                "Delegate",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "web3": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]"
                ],
                "delegate_address": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]"
                ],
                "contracts": [
                    "str",
                    "Callable",
                    "bool",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ],
                "proxy_factory": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]"
                ],
                "currency_network": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]"
                ],
                "delegate_config": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "owner": {
            "name": "owner",
            "location": 79,
            "return": [
                "bool",
                "str",
                "Union[str, Dict]",
                "int",
                "dict"
            ],
            "arguments": {
                "accounts": [
                    "bool"
                ]
            }
        },
        "owner_key": {
            "name": "owner_key",
            "location": 84,
            "return": [
                "str",
                "Dict[str, str]",
                "dict[str, str]"
            ],
            "arguments": {
                "account_keys": [
                    "str",
                    "int",
                    "list[dict[str, str]]",
                    "List[Dict[str, str]]"
                ]
            }
        },
        "proxy_factory": {
            "name": "proxy_factory",
            "location": 89,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "web3": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "identity_implementation": {
            "name": "identity_implementation",
            "location": 95,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "web3": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "signature_of_owner_on_implementation": {
            "name": "signature_of_owner_on_implementation",
            "location": 101,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Optional[Dict[str, Any]]",
                "Dict[str, str]",
                "Dict[str, object]",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "owner_key": [
                    "int",
                    "str",
                    "bytes",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]",
                    "Optional[Sequence[str]]",
                    "typing.Sequence[str]"
                ],
                "identity_implementation": [
                    "bytes",
                    "str",
                    "int",
                    "Dict[Tuple[int, int], str]",
                    "dict[tuple[typing.Union[int,int]], str]"
                ],
                "proxy_factory": [
                    "bytes",
                    "str",
                    "int",
                    "Dict[Tuple[int, int], str]",
                    "dict[tuple[typing.Union[int,int]], str]"
                ]
            }
        },
        "identity_contract": {
            "name": "identity_contract",
            "location": 111,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "web3": [
                    "typing.Callable[, ]",
                    "web3.contracContract",
                    "float",
                    "int",
                    "Callable"
                ],
                "proxy_factory": [
                    "typing.Callable[, ]",
                    "web3.contracContract",
                    "Callable"
                ],
                "identity_implementation": [
                    "typing.Callable[, ]",
                    "web3.contracContract",
                    "Callable"
                ],
                "signature_of_owner_on_implementation": [
                    "typing.Callable[, ]",
                    "web3.contracContract",
                    "Callable"
                ],
                "owner": [
                    "int",
                    "web3.contracContract"
                ]
            }
        },
        "identity": {
            "name": "identity",
            "location": 132,
            "return": [
                "Identity",
                "str",
                "Iterable[str]",
                "IO[str]",
                "Optional[int]"
            ],
            "arguments": {
                "identity_contract": [
                    "Iterator[str]",
                    "bytes",
                    "typing.Iterator",
                    "List[bytes]",
                    "list[bytes]"
                ],
                "owner_key": [
                    "Iterator[str]",
                    "bytes",
                    "typing.Iterator",
                    "List[bytes]",
                    "list[bytes]"
                ]
            }
        },
        "chain_id": {
            "name": "chain_id",
            "location": 137,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "web3": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "build_meta_transaction": {
            "name": "build_meta_transaction",
            "location": 142,
            "return": [
                "str"
            ],
            "arguments": {
                "chain_id": [
                    "str",
                    "int"
                ]
            }
        },
        "signed_meta_transaction": {
            "name": "signed_meta_transaction",
            "location": 152,
            "return": [
                "bytes",
                "str",
                "List[str]",
                "Callable"
            ],
            "arguments": {
                "identity": [
                    "bytes",
                    "str",
                    "float",
                    "list",
                    "list[]"
                ],
                "owner_key": [
                    "str",
                    "Optional[str]",
                    "None",
                    "List[int]",
                    "list[int]"
                ],
                "accounts": [
                    "bytes",
                    "str",
                    "list[]",
                    "float",
                    "list"
                ],
                "build_meta_transaction": [
                    "bytes",
                    "str",
                    "float",
                    "list",
                    "list[]"
                ]
            }
        },
        "meta_transaction_for_currency_network_transfer": {
            "name": "meta_transaction_for_currency_network_transfer",
            "location": 164,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "currency_network": [
                    "int",
                    "str",
                    "Iterable[T]",
                    "List[str]"
                ],
                "identity": [
                    "str",
                    "int",
                    "Iterable[Union[Any, int]]",
                    "typing.Iterable[typing.Union[typing.Any,int]]",
                    "Optional[str]",
                    "None"
                ],
                "source": [
                    "int",
                    "str",
                    "typing.Iterable[T]",
                    "Iterable[T]",
                    "List[str]"
                ],
                "destination": [
                    "int",
                    "str",
                    "typing.Iterable[T]",
                    "Iterable[T]",
                    "List[str]"
                ]
            }
        },
        "meta_transaction_update_trustline": {
            "name": "meta_transaction_update_trustline",
            "location": 175,
            "return": [
                "bool",
                "str",
                "Callable",
                "int"
            ],
            "arguments": {
                "currency_network": [
                    "Callable",
                    "int",
                    "str"
                ],
                "identity": [
                    "str",
                    "Tuple[str, str]",
                    "tuple[typing.Union[str,str]]",
                    "dict",
                    "dict[, ]"
                ],
                "trustline": [
                    "str",
                    "bool",
                    "float",
                    "int"
                ]
            }
        },
        "test_delegate_meta_transaction": {
            "name": "test_delegate_meta_transaction",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "delegate": [],
                "identity": [
                    "str",
                    "Optional[Tuple[float, float]]",
                    "tuple[typing.Union[float,float]]",
                    "None"
                ],
                "web3": [
                    "str"
                ],
                "signed_meta_transaction": []
            }
        },
        "test_delegated_transaction_trustlines_flow": {
            "name": "test_delegated_transaction_trustlines_flow",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network": [],
                "identity": [
                    "bool"
                ],
                "delegate": [
                    "Dict[str, Sequence[Any]]",
                    "dict[str, typing.Sequence[typing.Any]]"
                ],
                "accounts": []
            }
        },
        "test_deploy_identity": {
            "name": "test_deploy_identity",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network": [
                    "int",
                    "web3.contracContract"
                ],
                "delegate": [],
                "accounts": [
                    "str",
                    "web3.Web3",
                    "bool"
                ],
                "proxy_factory": [],
                "owner_key": [
                    "typing.Callable[, ]",
                    "web3.contracContract",
                    "Callable"
                ],
                "identity_implementation": [],
                "signature_of_owner_on_implementation": [],
                "web3": [
                    "typing.Callable[, ]",
                    "Callable",
                    "web3.contracContract"
                ]
            }
        },
        "test_next_nonce": {
            "name": "test_next_nonce",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "delegate": [
                    "list[str]",
                    "Optional[List[str]]",
                    "None",
                    "Callable",
                    "typing.Callable[, ]",
                    "list[dict[, ]]",
                    "List[Dict]",
                    "List[str]",
                    "web3.Web3",
                    "web3.contracContract"
                ],
                "identity_contract": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "Dict[str, Sequence[str]]",
                    "dict[str, typing.Sequence[str]]"
                ],
                "accounts": [
                    "str"
                ],
                "owner_key": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "build_meta_transaction": [
                    "int",
                    "bytes",
                    "str"
                ]
            }
        },
        "test_delegated_transaction_invalid_signature": {
            "name": "test_delegated_transaction_invalid_signature",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "identity": [
                    "int",
                    "typing.Callable[, ]",
                    "Callable",
                    "tuple[]",
                    "bool",
                    "None",
                    "tuple",
                    "Optional[Callable]"
                ],
                "delegate": [
                    "Dict[str, Sequence[Any]]"
                ],
                "accounts": [
                    "int"
                ],
                "account_keys": [
                    "tuple[]",
                    "int",
                    "Callable",
                    "bool",
                    "tuple",
                    "Optional[Callable]"
                ],
                "build_meta_transaction": [
                    "int",
                    "typing.Callable[, ]",
                    "Callable",
                    "tuple[]",
                    "bool",
                    "None",
                    "tuple",
                    "Optional[Callable]"
                ]
            }
        },
        "test_delegated_transaction_invalid_nonce": {
            "name": "test_delegated_transaction_invalid_nonce",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "identity": [
                    "str"
                ],
                "delegate": [],
                "accounts": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_delegated_transaction_invalid_identity_contract": {
            "name": "test_delegated_transaction_invalid_identity_contract",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "delegate": [
                    "Dict[str, Sequence[Any]]",
                    "dict[str, typing.Sequence[typing.Any]]"
                ],
                "accounts": [
                    "web3.Web3",
                    "bool",
                    "Mapping[str, Any]"
                ],
                "account_keys": [
                    "Callable",
                    "web3.Web3"
                ],
                "build_meta_transaction": [
                    "typing.Callable[, ]",
                    "Callable",
                    "web3.Web3"
                ]
            }
        },
        "test_meta_transaction_fees_valid": {
            "name": "test_meta_transaction_fees_valid",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "delegate_with_one_fees": [
                    "str",
                    "float"
                ],
                "signed_meta_transaction": [
                    "Sequence['cirq.Qid']",
                    "typing.Sequence['cirq.Qid']"
                ],
                "owner_key": []
            }
        },
        "test_meta_transaction_fees_invalid_value": {
            "name": "test_meta_transaction_fees_invalid_value",
            "location": 359,
            "return": [
                "None"
            ],
            "arguments": {
                "delegate_with_one_fees": [
                    "Dict[str, Any]",
                    "str"
                ],
                "signed_meta_transaction": [
                    "Sequence['cirq.Qid']",
                    "str",
                    "typing.Sequence['cirq.Qid']"
                ],
                "owner_key": []
            }
        },
        "test_meta_transaction_fees_invalid_network": {
            "name": "test_meta_transaction_fees_invalid_network",
            "location": 386,
            "return": [
                "None"
            ],
            "arguments": {
                "delegate_with_one_fees": [
                    "str",
                    "float"
                ],
                "signed_meta_transaction": [
                    "Iterable[Any]",
                    "str",
                    "typing.Iterable[typing.Any]",
                    "float"
                ],
                "owner_key": []
            }
        },
        "test_meta_transaction_fee_recipient_invalid": {
            "name": "test_meta_transaction_fee_recipient_invalid",
            "location": 413,
            "return": [
                "None"
            ],
            "arguments": {
                "delegate_with_one_fees": [
                    "str",
                    "float"
                ],
                "signed_meta_transaction": [
                    "Iterable[Any]",
                    "str",
                    "typing.Iterable[typing.Any]",
                    "float"
                ],
                "owner_key": []
            }
        },
        "test_gas_pricing": {
            "name": "test_gas_pricing",
            "location": 467,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "delegate": [
                    "bool"
                ],
                "delegate_config": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "Callable",
                    "None",
                    "typing.Callable[, ]"
                ],
                "gas_price_config": [
                    "dict",
                    "dict[, ]"
                ],
                "gas_price": []
            }
        },
        "build_meta_transaction.f": {
            "name": "f",
            "location": 145,
            "return": [
                "MetaTransaction",
                "Iterable[int]",
                "IO[str]",
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        }
    },
    "relay-master/tests/chain_integration/test_exchange_chain.py": {
        "engine": {
            "name": "engine",
            "location": 9,
            "return": [
                "Tuple[int, int]",
                "str",
                "int",
                "T"
            ],
            "arguments": {}
        },
        "orderBook": {
            "name": "orderBook",
            "location": 14,
            "return": [
                "OrderBookGreenlet",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "engine": [
                    "int",
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "web3": [
                    "bool",
                    "Optional[bool]",
                    "List[str]",
                    "float",
                    "None",
                    "list[str]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "exchange_abi": [
                    "bool",
                    "Optional[bool]",
                    "List[str]",
                    "float",
                    "None",
                    "list[str]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "token_abi": [
                    "bool",
                    "Optional[bool]",
                    "List[str]",
                    "float",
                    "None",
                    "list[str]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "testnetworks": [
                    "list[str]",
                    "str",
                    "bool",
                    "Optional[List[str]]",
                    "Optional[float]",
                    "Iterable[Sequence[str]]",
                    "Optional[str]"
                ],
                "is_currency_network_function": [
                    "bool",
                    "Optional[bool]",
                    "List[str]",
                    "float",
                    "None",
                    "list[str]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "relay-master/tests/chain_integration/test_exchange_proxy.py": {
        "order_token": {
            "name": "order_token",
            "location": 10,
            "return": [
                "SignableOrder",
                "str",
                "float"
            ],
            "arguments": {
                "exchange_address": [
                    "str",
                    "nucypher.blockchain.eth.actors.Staker"
                ],
                "network_addresses_with_exchange": [
                    "str",
                    "nucypher.blockchain.eth.actors.Staker"
                ],
                "unw_eth_address": [
                    "str",
                    "nucypher.blockchain.eth.actors.Staker"
                ],
                "maker": [
                    "str",
                    "nucypher.blockchain.eth.actors.Staker"
                ],
                "maker_key": [
                    "str",
                    "bool",
                    "List[List[int]]",
                    "list[list[int]]"
                ]
            }
        },
        "order_trustlines": {
            "name": "order_trustlines",
            "location": 32,
            "return": [
                "SignableOrder",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "exchange_address": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "network_addresses_with_exchange": [
                    "str",
                    "Optional[str]"
                ],
                "unw_eth_address": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "maker": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "maker_key": [
                    "str",
                    "bool",
                    "List[List[int]]",
                    "float",
                    "list[list[int]]"
                ]
            }
        },
        "exchange_proxy": {
            "name": "exchange_proxy",
            "location": 54,
            "return": [
                "ExchangeProxy",
                "str",
                "dict",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "web3": [
                    "int",
                    "typing.Callable[, ]",
                    "bool",
                    "Callable"
                ],
                "exchange_abi": [
                    "int",
                    "typing.Callable[, ]",
                    "bool",
                    "Callable"
                ],
                "token_abi": [
                    "int",
                    "typing.Callable[, ]",
                    "bool",
                    "Callable"
                ],
                "exchange_address": [
                    "int",
                    "typing.Callable[, ]",
                    "bool",
                    "Callable"
                ],
                "address_oracle": [
                    "int",
                    "typing.Callable[, ]",
                    "bool",
                    "Callable"
                ]
            }
        },
        "test_validate": {
            "name": "test_validate",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "order_trustlines": [
                    "str",
                    "float"
                ],
                "exchange_proxy": [
                    "str",
                    "float"
                ]
            }
        },
        "test_not_enough_funds": {
            "name": "test_not_enough_funds",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "order_token": [
                    "str",
                    "bool",
                    "Tuple[str]",
                    "tuple[str]"
                ],
                "exchange_proxy": [
                    "str",
                    "bool",
                    "Tuple[str]",
                    "tuple[str]"
                ]
            }
        },
        "test_enough_funds": {
            "name": "test_enough_funds",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "order_token": [
                    "bool",
                    "int"
                ],
                "exchange_proxy": [
                    "str",
                    "bool",
                    "Tuple[str]",
                    "tuple[str]"
                ],
                "testnetworks": [
                    "bytes"
                ]
            }
        },
        "test_no_filled_amount": {
            "name": "test_no_filled_amount",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "order_token": [
                    "str",
                    "bool",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "exchange_proxy": [
                    "str",
                    "bool",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_filled_amount": {
            "name": "test_filled_amount",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "order_trustlines": [],
                "exchange_proxy": [],
                "testnetworks": [],
                "maker": [],
                "taker": []
            }
        },
        "test_cancelled_amount": {
            "name": "test_cancelled_amount",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "order_trustlines": [],
                "exchange_proxy": [
                    "str"
                ],
                "testnetworks": [],
                "maker": [],
                "taker": []
            }
        },
        "test_unavailable_amount": {
            "name": "test_unavailable_amount",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "order_trustlines": [],
                "exchange_proxy": [
                    "str"
                ],
                "testnetworks": [],
                "maker": [],
                "taker": []
            }
        },
        "test_listen_on_fill": {
            "name": "test_listen_on_fill",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "order_trustlines": [
                    "str",
                    "float"
                ],
                "exchange_proxy": [
                    "str",
                    "int"
                ],
                "testnetworks": [
                    "str",
                    "float"
                ],
                "maker": [],
                "taker": []
            }
        },
        "test_listen_on_cancel": {
            "name": "test_listen_on_cancel",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "order_token": [
                    "bytes"
                ],
                "exchange_proxy": [
                    "str"
                ],
                "testnetworks": [
                    "bytes"
                ],
                "maker": [
                    "Dict[str, Set[str]]",
                    "dict[str, set[str]]"
                ],
                "taker": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Sequence[Hashable]",
                    "typing.Sequence[typing.Hashable]",
                    "List[Tuple[int, int]]",
                    "list[tuple[typing.Union[int,int]]]"
                ]
            }
        },
        "test_listen_on_fill.log": {
            "name": "log",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "order_hash": [],
                "maker_token_amount": [],
                "taker_token_amount": []
            }
        },
        "test_listen_on_cancel.log": {
            "name": "log",
            "location": 271,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "order_hash": [
                    "str",
                    "Optional[str]",
                    "float",
                    "dict"
                ],
                "maker_token_amount": [
                    "str",
                    "Optional[str]",
                    "float",
                    "dict"
                ],
                "taker_token_amount": [
                    "str",
                    "Optional[str]",
                    "float",
                    "dict"
                ]
            }
        }
    },
    "relay-master/tests/chain_integration/test_node.py": {
        "node": {
            "name": "node",
            "location": 7,
            "return": [
                "Node",
                "blib2to3.pytree.Node",
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "web3": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_tx_status_success": {
            "name": "test_tx_status_success",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "Dict[str, Sequence[Any]]",
                    "dict[str, typing.Sequence[typing.Any]]"
                ],
                "node": [
                    "float"
                ],
                "accounts": [
                    "Dict[str, Sequence[Any]]"
                ]
            }
        },
        "test_tx_status_not_found": {
            "name": "test_tx_status_not_found",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "node": [
                    "int",
                    "Union['KspNativeControl', int]"
                ]
            }
        },
        "test_tx_status_pending": {
            "name": "test_tx_status_pending",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "Dict[str, Sequence[Any]]",
                    "dict[str, typing.Sequence[typing.Any]]"
                ],
                "node": [
                    "float"
                ],
                "accounts": [
                    "Dict[str, Sequence[Any]]"
                ],
                "chain": [
                    "Dict[str, Sequence[Any]]"
                ]
            }
        }
    },
    "relay-master/tests/chain_integration/tlcontracts_deploy.py": {},
    "relay-master/tests/chain_integration/__init__.py": {},
    "relay-master/tests/chain_integration/database_integration/conftest.py": {
        "is_port_in_use": {
            "name": "is_port_in_use",
            "location": 187,
            "return": [
                "bool"
            ],
            "arguments": {
                "port": [
                    "int",
                    "Optional[float]"
                ]
            }
        },
        "use_local_database": {
            "name": "use_local_database",
            "location": 195,
            "return": [
                "bytes",
                "int",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "pytestconfig": [
                    "str",
                    "int"
                ]
            }
        },
        "postgres_port": {
            "name": "postgres_port",
            "location": 200,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "use_local_database": [
                    "bool",
                    "float",
                    "int"
                ]
            }
        },
        "environment_variables": {
            "name": "environment_variables",
            "location": 208,
            "return": [
                "dict[typing.Text, typing.Text]",
                "str",
                "Dict[str, str]",
                "list",
                "Dict[str, Any]"
            ],
            "arguments": {
                "postgres_port": [
                    "bool"
                ]
            }
        },
        "address_file_path": {
            "name": "address_file_path",
            "location": 225,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "tmp_path_factory": [
                    "str"
                ],
                "currency_network_with_trustlines_and_interests_session": [
                    "int",
                    "dict",
                    "dict[, ]",
                    "Dict[str, int]",
                    "dict[str, int]",
                    "List[Tuple[int, int]]",
                    "list[tuple[typing.Union[int,int]]]"
                ],
                "currency_network_with_trustlines_session": [
                    "int",
                    "dict",
                    "dict[, ]",
                    "Dict[str, int]",
                    "dict[str, int]",
                    "List[Tuple[int, int]]",
                    "list[tuple[typing.Union[int,int]]]"
                ],
                "currency_network": [
                    "int",
                    "dict",
                    "dict[, ]",
                    "Dict[str, int]",
                    "dict[str, int]",
                    "List[Tuple[int, int]]",
                    "list[tuple[typing.Union[int,int]]]"
                ],
                "test_currency_network_v1": [
                    "int",
                    "dict",
                    "dict[, ]",
                    "Dict[str, int]",
                    "dict[str, int]",
                    "List[Tuple[int, int]]",
                    "list[tuple[typing.Union[int,int]]]"
                ]
            }
        },
        "setup_database": {
            "name": "setup_database",
            "location": 250,
            "return": [
                "",
                "typing.Generator[]",
                "typing.Generator[PostgresDatabase]"
            ],
            "arguments": {
                "use_local_database": [
                    "typing.Sequence[str]",
                    "str",
                    "Sequence[str]",
                    "bool",
                    "typing.Callable[, ]",
                    "Callable",
                    "int"
                ],
                "environment_variables": [
                    "bool",
                    "str",
                    "None",
                    "Union[str, int]",
                    "Optional[str]"
                ]
            }
        },
        "start_indexer": {
            "name": "start_indexer",
            "location": 263,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "pytestconfig": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "Optional[int]",
                    "None"
                ],
                "setup_database": [
                    "bool",
                    "str",
                    "List[str]",
                    "list[str]",
                    "Optional[str]",
                    "None"
                ],
                "environment_variables": [
                    "str"
                ],
                "address_file_path": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "replace_blocks_with_empty_from_snapshot": {
            "name": "replace_blocks_with_empty_from_snapshot",
            "location": 319,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "web3": [
                    "str",
                    "List[List[Any]]",
                    "list[list[typing.Any]]"
                ],
                "chain": [
                    "str",
                    "List[List[Any]]",
                    "list[list[typing.Any]]"
                ]
            }
        },
        "chain_cleanup": {
            "name": "chain_cleanup",
            "location": 336,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "chain": [
                    "bool",
                    "Callable",
                    "int",
                    "Tuple[int, int, int]",
                    "Optional[str]"
                ],
                "web3": [
                    "int",
                    "list[str]",
                    "bool",
                    "str",
                    "List[str]",
                    "dict[, ]",
                    "Iterable[int]",
                    "Union[str, dict]"
                ],
                "wait_for_ethindex_to_sync": [
                    "int",
                    "list[str]",
                    "bool",
                    "str",
                    "List[str]",
                    "dict[, ]",
                    "Iterable[int]",
                    "Union[str, dict]"
                ],
                "replace_blocks_with_empty_from_snapshot": [
                    "str",
                    "int",
                    "list[]",
                    "T",
                    "list"
                ]
            }
        },
        "generic_db_connection": {
            "name": "generic_db_connection",
            "location": 348,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "postgres_port": [
                    "int",
                    "str"
                ]
            }
        },
        "wait_for_ethindex_to_sync": {
            "name": "wait_for_ethindex_to_sync",
            "location": 363,
            "return": [
                "bool",
                "Union[str, Pattern]",
                "int",
                "T",
                "str",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "generic_db_connection": [
                    "bool"
                ],
                "web3": [
                    "bool"
                ]
            }
        },
        "ethindex_db_for_currency_network": {
            "name": "ethindex_db_for_currency_network",
            "location": 393,
            "return": [
                "Optional[int]",
                "str",
                "Sequence[str]",
                "Callable"
            ],
            "arguments": {
                "currency_network": [
                    "float",
                    "bool"
                ],
                "generic_db_connection": [
                    "float",
                    "bool"
                ]
            }
        },
        "ethindex_db_for_currency_network_with_trustlines": {
            "name": "ethindex_db_for_currency_network_with_trustlines",
            "location": 398,
            "return": [
                "Optional[int]",
                "str",
                "Sequence[str]",
                "Callable"
            ],
            "arguments": {
                "currency_network_with_trustlines_session": [
                    "int"
                ],
                "generic_db_connection": [
                    "int"
                ]
            }
        },
        "ethindex_db_for_currency_network_with_trustlines_and_interests": {
            "name": "ethindex_db_for_currency_network_with_trustlines_and_interests",
            "location": 407,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "currency_network_with_trustlines_and_interests_session": [
                    "Callable",
                    "int",
                    "typing.Callable[, ]"
                ],
                "generic_db_connection": [
                    "Callable",
                    "int",
                    "typing.Callable[, ]"
                ]
            }
        },
        "make_ethindex_db": {
            "name": "make_ethindex_db",
            "location": 416,
            "return": [
                "ethindex_db.CurrencyNetworkEthindexDB"
            ],
            "arguments": {
                "network_address": [
                    "str",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]"
                ],
                "conn": [
                    "str",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "Timer.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "int",
                    "float"
                ]
            }
        },
        "Timer.__enter__": {
            "name": "__enter__",
            "location": 48,
            "return": [
                "imer"
            ],
            "arguments": {
                "self": [
                    "_TTimer"
                ]
            }
        },
        "Timer.__exit__": {
            "name": "__exit__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_val": [
                    "Optional[BaseException]"
                ],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "typing.Type",
                    "str",
                    "BaseException",
                    "None",
                    "Exception",
                    "Optional[BaseException]"
                ]
            }
        },
        "Timer.start": {
            "name": "start",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timer.is_timed_out": {
            "name": "is_timed_out",
            "location": 58,
            "return": [
                "bool",
                "float",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timer.time_left": {
            "name": "time_left",
            "location": 64,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timer.time_passed": {
            "name": "time_passed",
            "location": 70,
            "return": [
                "float",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PostgresDatabase.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "environment_variables": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "PostgresDatabase.start": {
            "name": "start",
            "location": 109,
            "return": [
                "subprocess.Popen[bytes]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PostgresDatabase._wait_for_up": {
            "name": "_wait_for_up",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PostgresDatabase.is_up": {
            "name": "is_up",
            "location": 148,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PostgresDatabase.terminate": {
            "name": "terminate",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "replace_blocks_with_empty_from_snapshot.revert": {
            "name": "revert",
            "location": 320,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "snapshot": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "wait_for_ethindex_to_sync.wait_for_sync": {
            "name": "wait_for_sync",
            "location": 364,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "timeout": [
                    "int",
                    "Optional[int]",
                    "float",
                    "Optional[float]"
                ],
                "poll_interval": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "relay-master/tests/chain_integration/database_integration/test_events_information.py": {
        "accrue_interests": {
            "name": "accrue_interests",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "web3": [
                    "float",
                    "dict"
                ],
                "chain": [
                    "bytes",
                    "bool",
                    "str"
                ],
                "path": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "years": [
                    "bool",
                    "int",
                    "Callable[[float], None]",
                    "str"
                ]
            }
        },
        "test_get_interests_received_for_trustline_positive_balance": {
            "name": "test_get_interests_received_for_trustline_positive_balance",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "ethindex_db_for_currency_network_with_trustlines_and_interests": [
                    "int"
                ],
                "currency_network_with_trustlines_and_interests_session": [
                    "Callable",
                    "str",
                    "bool"
                ],
                "web3": [
                    "str"
                ],
                "chain": [
                    "str"
                ],
                "accounts": [],
                "years": [
                    "str"
                ],
                "interests": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ],
                "wait_for_ethindex_to_sync": [
                    "Callable[..., None]",
                    "str",
                    "Callable[[], None]"
                ]
            }
        },
        "test_get_interests_received_for_trustline_negative_balance": {
            "name": "test_get_interests_received_for_trustline_negative_balance",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "ethindex_db_for_currency_network_with_trustlines_and_interests": [
                    "int"
                ],
                "currency_network_with_trustlines_and_interests_session": [
                    "Callable",
                    "str",
                    "bool"
                ],
                "web3": [
                    "str"
                ],
                "chain": [
                    "str"
                ],
                "accounts": [],
                "years": [
                    "str"
                ],
                "interests": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ],
                "wait_for_ethindex_to_sync": [
                    "Callable[..., None]",
                    "str",
                    "Callable[[], None]"
                ]
            }
        },
        "test_get_interests_paid_for_trustline_positive_balance": {
            "name": "test_get_interests_paid_for_trustline_positive_balance",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "ethindex_db_for_currency_network_with_trustlines_and_interests": [
                    "int"
                ],
                "currency_network_with_trustlines_and_interests_session": [
                    "Callable",
                    "str",
                    "bool"
                ],
                "web3": [
                    "str"
                ],
                "chain": [
                    "str"
                ],
                "accounts": [],
                "years": [
                    "str"
                ],
                "interests": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ],
                "wait_for_ethindex_to_sync": [
                    "Callable[..., None]",
                    "str",
                    "Callable[[], None]"
                ]
            }
        },
        "test_get_interests_paid_for_trustline_negative_balance": {
            "name": "test_get_interests_paid_for_trustline_negative_balance",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "ethindex_db_for_currency_network_with_trustlines_and_interests": [
                    "int"
                ],
                "currency_network_with_trustlines_and_interests_session": [
                    "Callable",
                    "str",
                    "bool"
                ],
                "web3": [
                    "str"
                ],
                "chain": [
                    "str"
                ],
                "accounts": [],
                "years": [
                    "str"
                ],
                "interests": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ],
                "wait_for_ethindex_to_sync": [
                    "Callable[..., None]",
                    "str",
                    "Callable[[], None]"
                ]
            }
        },
        "test_get_interests_received_open_trustline_with_transfer": {
            "name": "test_get_interests_received_open_trustline_with_transfer",
            "location": 168,
            "return": [
                ""
            ],
            "arguments": {
                "ethindex_db_for_currency_network_with_trustlines_and_interests": [
                    "int"
                ],
                "currency_network_with_trustlines_and_interests_session": [
                    "Callable",
                    "bool",
                    "str"
                ],
                "web3": [
                    "str"
                ],
                "chain": [
                    "str"
                ],
                "accounts": [
                    "bool",
                    "str"
                ],
                "years": [
                    "str"
                ],
                "interests": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "bool"
                ],
                "wait_for_ethindex_to_sync": [
                    "str",
                    "Callable[..., None]",
                    "int"
                ]
            }
        },
        "test_get_interests_paid_open_trustline_with_transfer": {
            "name": "test_get_interests_paid_open_trustline_with_transfer",
            "location": 211,
            "return": [
                ""
            ],
            "arguments": {
                "ethindex_db_for_currency_network_with_trustlines_and_interests": [
                    "int"
                ],
                "currency_network_with_trustlines_and_interests_session": [
                    "Callable",
                    "bool",
                    "str"
                ],
                "web3": [
                    "str"
                ],
                "chain": [
                    "str"
                ],
                "accounts": [
                    "bool",
                    "str"
                ],
                "years": [
                    "str"
                ],
                "interests": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "bool"
                ],
                "wait_for_ethindex_to_sync": [
                    "str",
                    "Callable[..., None]",
                    "int"
                ]
            }
        },
        "test_get_interests_received_during_opening_of_trustline": {
            "name": "test_get_interests_received_during_opening_of_trustline",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "ethindex_db_for_currency_network_with_trustlines_and_interests": [
                    "int",
                    "Dict[str, Any]"
                ],
                "currency_network_with_trustlines_and_interests_session": [
                    "bool",
                    "Callable",
                    "str"
                ],
                "web3": [
                    "Optional[Union[float, str]]"
                ],
                "chain": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "tests.conftesWorker",
                    "Callable"
                ],
                "accounts": [
                    "bool"
                ],
                "wait_for_ethindex_to_sync": [
                    "str",
                    "Callable[..., None]",
                    "tests.testmodels.Signals"
                ]
            }
        },
        "test_get_interests_paid_during_opening_of_trustline": {
            "name": "test_get_interests_paid_during_opening_of_trustline",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "ethindex_db_for_currency_network_with_trustlines_and_interests": [
                    "int",
                    "Dict[str, Any]"
                ],
                "currency_network_with_trustlines_and_interests_session": [
                    "bool",
                    "Callable",
                    "str"
                ],
                "web3": [
                    "Optional[Union[float, str]]"
                ],
                "chain": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "tests.conftesWorker",
                    "Callable"
                ],
                "accounts": [
                    "bool"
                ],
                "wait_for_ethindex_to_sync": [
                    "str",
                    "Callable[..., None]",
                    "tests.testmodels.Signals"
                ]
            }
        },
        "test_get_transfer_information_path": {
            "name": "test_get_transfer_information_path",
            "location": 352,
            "return": [
                ""
            ],
            "arguments": {
                "ethindex_db_for_currency_network_with_trustlines": [],
                "currency_network_with_trustlines_session": [
                    "tests.conftesWorker"
                ],
                "web3": [
                    "tests.conftesWorker"
                ],
                "accounts": [
                    "str",
                    "List[str]",
                    "tests.fixtures.cloud_uploader.Uploader"
                ],
                "path": [
                    "str"
                ],
                "fee_payer": [
                    "Callable[..., None]",
                    "Callable[[], None]"
                ],
                "lookup_method": [
                    "Dict[str, Any]"
                ],
                "wait_for_ethindex_to_sync": [
                    "Callable[..., None]",
                    "Callable[[], None]"
                ]
            }
        },
        "test_get_transfer_information_values": {
            "name": "test_get_transfer_information_values",
            "location": 405,
            "return": [
                ""
            ],
            "arguments": {
                "ethindex_db_for_currency_network_with_trustlines": [],
                "currency_network_with_trustlines_session": [
                    "tests.hints.CleavageCall",
                    "tests.conftesWorker",
                    "tests.hints.RightAccumulatorCall",
                    "tests.hints.LeftAccumulatorCall",
                    "tests.hints.RightFolderCall"
                ],
                "web3": [
                    "tests.hints.CleavageCall",
                    "tests.conftesWorker",
                    "tests.hints.RightAccumulatorCall",
                    "tests.hints.LeftAccumulatorCall",
                    "tests.hints.RightFolderCall"
                ],
                "accounts": [
                    "Callable",
                    "bool"
                ],
                "fee_payer": [
                    "tests.hints.CleavageCall",
                    "tests.conftesWorker",
                    "tests.hints.RightAccumulatorCall",
                    "tests.hints.LeftAccumulatorCall",
                    "tests.hints.RightFolderCall"
                ],
                "lookup_method": [],
                "wait_for_ethindex_to_sync": [
                    "Callable[..., None]",
                    "str",
                    "Callable[[], None]"
                ]
            }
        },
        "test_get_transfer_information_trustline_update": {
            "name": "test_get_transfer_information_trustline_update",
            "location": 462,
            "return": [
                ""
            ],
            "arguments": {
                "ethindex_db_for_currency_network_with_trustlines": [],
                "currency_network_with_trustlines_session": [
                    "tests.hints.CleavageCall",
                    "tests.hints.RightAccumulatorCall",
                    "tests.conftesWorker"
                ],
                "web3": [
                    "tests.hints.CleavageCall",
                    "tests.hints.RightAccumulatorCall",
                    "tests.conftesWorker"
                ],
                "accounts": [
                    "tests.hints.CleavageCall",
                    "tests.hints.RightAccumulatorCall",
                    "tests.conftesWorker"
                ],
                "lookup_method": [
                    "Callable"
                ],
                "transfer_value": [
                    "Callable"
                ],
                "wait_for_ethindex_to_sync": [
                    "Callable[..., None]",
                    "str",
                    "Callable[[], None]"
                ]
            }
        },
        "test_transfer_by_wrong_balance_update": {
            "name": "test_transfer_by_wrong_balance_update",
            "location": 520,
            "return": [
                "None"
            ],
            "arguments": {
                "ethindex_db_for_currency_network": [],
                "currency_network": [
                    "Callable"
                ],
                "web3": [
                    "bool",
                    "Callable",
                    "Dict[str, Any]"
                ],
                "accounts": [
                    "Sequence[str]",
                    "int",
                    "List[str]"
                ],
                "chain": [
                    "Callable",
                    "dict",
                    "int"
                ],
                "wait_for_ethindex_to_sync": [
                    "Callable",
                    "tests.testmodels.Signals"
                ]
            }
        },
        "assert_fee": {
            "name": "assert_fee",
            "location": 553,
            "return": [
                "None"
            ],
            "arguments": {
                "fee": [
                    "bool",
                    "dict"
                ],
                "value": [
                    "str",
                    "int",
                    "T",
                    "bool"
                ],
                "from_": [
                    "str",
                    "float",
                    "int",
                    "dict"
                ],
                "to": [
                    "str",
                    "float",
                    "int",
                    "dict"
                ],
                "tx_hash": [
                    "str",
                    "Set[str]",
                    "Sequence",
                    "Mapping[str, Any]",
                    "int"
                ],
                "timestamp": [
                    "str",
                    "Set[str]",
                    "Sequence",
                    "Mapping[str, Any]",
                    "int"
                ]
            }
        },
        "make_transfer": {
            "name": "make_transfer",
            "location": 561,
            "return": [
                "str"
            ],
            "arguments": {
                "currency_network": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "value": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "path": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "fee_payer": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_get_mediation_fees": {
            "name": "test_get_mediation_fees",
            "location": 571,
            "return": [
                ""
            ],
            "arguments": {
                "ethindex_db_for_currency_network_with_trustlines_and_interests": [
                    "int"
                ],
                "currency_network_with_trustlines_and_interests_session": [
                    "Callable",
                    "bool",
                    "str"
                ],
                "web3": [
                    "Optional[Union[float, str]]"
                ],
                "accounts": [
                    "str",
                    "Callable"
                ],
                "fee_payer": [
                    "Sequence[relay.exchange.order.Order]",
                    "str"
                ],
                "transfer_value": [
                    "Sequence[relay.exchange.order.Order]",
                    "str"
                ],
                "fee_value": [
                    "Callable"
                ],
                "wait_for_ethindex_to_sync": [
                    "Callable[..., None]",
                    "Callable",
                    "str",
                    "Callable[[], None]"
                ]
            }
        },
        "test_get_mediation_fees_with_pollution": {
            "name": "test_get_mediation_fees_with_pollution",
            "location": 614,
            "return": [
                ""
            ],
            "arguments": {
                "ethindex_db_for_currency_network_with_trustlines_and_interests": [
                    "int"
                ],
                "currency_network_with_trustlines_and_interests_session": [
                    "Callable",
                    "bool",
                    "str"
                ],
                "web3": [
                    "Optional[Union[float, str]]"
                ],
                "accounts": [
                    "str",
                    "Dict[Hashable, Iterable[Hashable]]"
                ],
                "fee_payer": [
                    "str"
                ],
                "transfer_value": [
                    "str"
                ],
                "fee_value": [
                    "str"
                ],
                "wait_for_ethindex_to_sync": [
                    "Callable[..., None]",
                    "Callable",
                    "str",
                    "Callable[[], None]"
                ]
            }
        },
        "get_debts_of_single_currency_network": {
            "name": "get_debts_of_single_currency_network",
            "location": 733,
            "return": [
                "Dict[(str, int)]"
            ],
            "arguments": {
                "ethindex_db": [
                    "str"
                ],
                "creditor": [
                    "str"
                ],
                "currency_network_address": [
                    "Set[str]",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "test_get_debts": {
            "name": "test_get_debts",
            "location": 744,
            "return": [
                ""
            ],
            "arguments": {
                "ethindex_db_for_currency_network": [
                    "bool",
                    "Optional[Union[float, str]]"
                ],
                "currency_network": [
                    "str"
                ],
                "accounts": [
                    "Dict[str, Any]",
                    "Callable",
                    "bool"
                ],
                "creditor_number": [
                    "Dict[str, Any]",
                    "Callable",
                    "bool"
                ],
                "debtor_number": [
                    "Dict[str, Any]",
                    "Callable",
                    "bool"
                ],
                "wait_for_ethindex_to_sync": [
                    "Callable",
                    "bool",
                    "tests.testmodels.Signals"
                ]
            }
        },
        "test_get_debts_repaid_debt": {
            "name": "test_get_debts_repaid_debt",
            "location": 775,
            "return": [
                "None"
            ],
            "arguments": {
                "ethindex_db_for_currency_network": [],
                "currency_network": [
                    "str",
                    "Callable"
                ],
                "accounts": [
                    "bool",
                    "Callable",
                    "Dict[str, Any]"
                ],
                "wait_for_ethindex_to_sync": [
                    "Callable",
                    "bool",
                    "tests.testmodels.Signals"
                ]
            }
        },
        "test_get_debts_multiple_updates": {
            "name": "test_get_debts_multiple_updates",
            "location": 798,
            "return": [
                "None"
            ],
            "arguments": {
                "ethindex_db_for_currency_network": [
                    "Callable",
                    "bool",
                    "str"
                ],
                "currency_network": [
                    "Sequence[relay.exchange.order.Order]",
                    "str"
                ],
                "accounts": [
                    "bool",
                    "Dict[str, Any]"
                ],
                "wait_for_ethindex_to_sync": [
                    "Callable",
                    "str",
                    "Callable[..., None]"
                ]
            }
        },
        "test_get_debts_multiple_debtors": {
            "name": "test_get_debts_multiple_debtors",
            "location": 822,
            "return": [
                "None"
            ],
            "arguments": {
                "ethindex_db_for_currency_network": [
                    "Callable"
                ],
                "currency_network": [
                    "Callable"
                ],
                "accounts": [
                    "Callable"
                ],
                "wait_for_ethindex_to_sync": [
                    "Callable",
                    "bool",
                    "tests.testmodels.Signals"
                ]
            }
        },
        "test_get_total_sum_transferred_single_transfer": {
            "name": "test_get_total_sum_transferred_single_transfer",
            "location": 848,
            "return": [
                "None"
            ],
            "arguments": {
                "ethindex_db_for_currency_network_with_trustlines": [
                    "relay.exchange.exchange_db.OrderBookDB",
                    "relay.exchange.order.Order",
                    "str"
                ],
                "currency_network_with_trustlines_session": [
                    "tests.chain_integration.conftest.CurrencyNetworkProxy"
                ],
                "accounts": [
                    "tests.hints.RightAccumulatorCall",
                    "tests.hints.CleavageCall",
                    "tests.hints.LeftAccumulatorCall",
                    "tests.conftesWorker"
                ],
                "wait_for_ethindex_to_sync": [
                    "Callable[..., None]",
                    "str",
                    "Callable[[], None]",
                    "Callable"
                ]
            }
        },
        "test_get_total_sum_transferred_multi_transfer": {
            "name": "test_get_total_sum_transferred_multi_transfer",
            "location": 871,
            "return": [
                "None"
            ],
            "arguments": {
                "ethindex_db_for_currency_network_with_trustlines": [
                    "relay.exchange.exchange_db.OrderBookDB",
                    "relay.exchange.order.Order",
                    "str"
                ],
                "currency_network_with_trustlines_session": [
                    "tests.chain_integration.conftest.CurrencyNetworkProxy"
                ],
                "accounts": [
                    "tests.hints.RightAccumulatorCall",
                    "tests.hints.CleavageCall",
                    "tests.hints.LeftAccumulatorCall",
                    "tests.conftesWorker"
                ],
                "wait_for_ethindex_to_sync": [
                    "Callable[..., None]",
                    "str",
                    "Callable[[], None]",
                    "Callable"
                ]
            }
        },
        "test_get_total_sum_transferred_time_window": {
            "name": "test_get_total_sum_transferred_time_window",
            "location": 896,
            "return": [
                "None"
            ],
            "arguments": {
                "ethindex_db_for_currency_network_with_trustlines": [
                    "int"
                ],
                "currency_network_with_trustlines_session": [
                    "tests.chain_integration.conftest.CurrencyNetworkProxy"
                ],
                "accounts": [
                    "str",
                    "tests.conftesWorker",
                    "int",
                    "Dict[str, Any]"
                ],
                "wait_for_ethindex_to_sync": [
                    "Callable",
                    "Callable[[], None]",
                    "str",
                    "tests.testmodels.Signals"
                ],
                "chain": [
                    "int",
                    "Callable"
                ]
            }
        },
        "test_get_total_sum_transferred_with_noise": {
            "name": "test_get_total_sum_transferred_with_noise",
            "location": 930,
            "return": [
                "None"
            ],
            "arguments": {
                "ethindex_db_for_currency_network_with_trustlines": [
                    "relay.exchange.exchange_db.OrderBookDB",
                    "relay.exchange.order.Order",
                    "str"
                ],
                "currency_network_with_trustlines_session": [
                    "tests.chain_integration.conftest.CurrencyNetworkProxy"
                ],
                "accounts": [
                    "relay.exchange.exchange_db.OrderBookDB",
                    "str",
                    "Dict[str, Any]",
                    "Type"
                ],
                "wait_for_ethindex_to_sync": [
                    "Callable[..., None]",
                    "str",
                    "Callable[[], None]",
                    "Callable"
                ]
            }
        },
        "test_get_total_sum_transferred_trustline_update": {
            "name": "test_get_total_sum_transferred_trustline_update",
            "location": 965,
            "return": [
                "None"
            ],
            "arguments": {
                "ethindex_db_for_currency_network": [
                    "Dict[str, Any]",
                    "Callable[[List, bool], None]"
                ],
                "currency_network": [
                    "tests.chain_integration.conftest.CurrencyNetworkProxy"
                ],
                "accounts": [
                    "Dict[str, Any]",
                    "bool",
                    "tests.hints.Function"
                ],
                "wait_for_ethindex_to_sync": [
                    "Callable",
                    "str",
                    "Callable[..., None]",
                    "bool"
                ]
            }
        }
    },
    "relay-master/tests/chain_integration/database_integration/test_graph_sync.py": {
        "fix_ensure_graph_sync_id_file_exists": {
            "name": "fix_ensure_graph_sync_id_file_exists",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "delete_event_feed_table": {
            "name": "delete_event_feed_table",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "generic_db_connection": [
                    "str",
                    "Optional[Dict[str, str]]",
                    "int"
                ],
                "currency_network_with_trustlines_and_interests": [
                    "List[str]",
                    "list[str]",
                    "bool",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "currency_network_with_trustlines_and_interests_session": [
                    "List[str]",
                    "list[str]",
                    "bool",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "currency_network_with_trustlines": [
                    "List[str]",
                    "list[str]",
                    "bool",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "currency_network_with_trustlines_session": [
                    "List[str]",
                    "list[str]",
                    "bool",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "chain_cleanup": [
                    "List[str]",
                    "list[str]",
                    "bool",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "assert_equal_graphs": {
            "name": "assert_equal_graphs",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "feed_graph": [
                    "relay.network_graph.graph.CurrencyNetworkGraph"
                ],
                "event_graph": [
                    "relay.network_graph.graph.CurrencyNetworkGraph"
                ]
            }
        },
        "test_get_event_feed_trustline_update": {
            "name": "test_get_event_feed_trustline_update",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network": [
                    "tests.chain_integration.conftest.CurrencyNetworkProxy"
                ],
                "wait_for_ethindex_to_sync": [
                    "bool",
                    "Type[Any]",
                    "typing.Type",
                    "List[str]",
                    "list[str]"
                ],
                "accounts": [
                    "list[]",
                    "Callable",
                    "list[str]",
                    "tuple[typing.Union[int,int]]",
                    "dict",
                    "list",
                    "List[str]",
                    "Tuple[int, int]",
                    "bool"
                ],
                "generic_db_connection": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_get_event_feed_balance_update": {
            "name": "test_get_event_feed_balance_update",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_with_trustlines_and_interests_session": [
                    "tests.chain_integration.conftest.CurrencyNetworkProxy"
                ],
                "wait_for_ethindex_to_sync": [
                    "typing.Callable[, ]",
                    "bool",
                    "Callable",
                    "Exception",
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "Callable[[], None]"
                ],
                "accounts": [
                    "bool",
                    "Callable"
                ],
                "generic_db_connection": [
                    "str",
                    "bool",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_get_event_feed_reversed_trustline_update_to_empty": {
            "name": "test_get_event_feed_reversed_trustline_update_to_empty",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network": [
                    "tests.chain_integration.conftest.CurrencyNetworkProxy"
                ],
                "wait_for_ethindex_to_sync": [
                    "bool",
                    "str",
                    "Callable",
                    "typing.Callable[, ]",
                    "Optional[str]",
                    "None"
                ],
                "accounts": [
                    "list[]",
                    "list[str]",
                    "Callable",
                    "tuple[typing.Union[int,int]]",
                    "dict",
                    "list",
                    "List[str]",
                    "Tuple[int, int]",
                    "AbstractSet[\"TemplateObjectVariable\"]",
                    "AbstractSet[\"TemplateActionTypeVariable\"]"
                ],
                "generic_db_connection": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "chain": [
                    "Dict[str, Any]",
                    "tests.conftesWorker",
                    "tests.hints.Function",
                    "Callable",
                    "str"
                ],
                "replace_blocks_with_empty_from_snapshot": [
                    "str",
                    "bytes",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_get_event_feed_reversed_trustline_update_to_old": {
            "name": "test_get_event_feed_reversed_trustline_update_to_old",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network": [
                    "tests.chain_integration.conftest.CurrencyNetworkProxy"
                ],
                "wait_for_ethindex_to_sync": [
                    "Callable",
                    "bool",
                    "typing.Callable[, ]",
                    "Iterable[T]",
                    "typing.Iterable[T]"
                ],
                "accounts": [
                    "list[]",
                    "tuple[typing.Union[int,int]]",
                    "T",
                    "dict",
                    "list",
                    "Callable",
                    "Tuple[int, int]",
                    "AbstractSet[\"TemplateObjectVariable\"]",
                    "AbstractSet[\"TemplateActionTypeVariable\"]",
                    "bool"
                ],
                "generic_db_connection": [
                    "Callable",
                    "int",
                    "typing.Callable[, ]"
                ],
                "chain": [
                    "Set[str]",
                    "int",
                    "Dict[str, Any]",
                    "Callable"
                ],
                "replace_blocks_with_empty_from_snapshot": [
                    "str",
                    "bytes",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_get_event_feed_reversed_balance_update_to_empty": {
            "name": "test_get_event_feed_reversed_balance_update_to_empty",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_with_trustlines_and_interests_session": [
                    "tests.chain_integration.conftest.CurrencyNetworkProxy"
                ],
                "wait_for_ethindex_to_sync": [
                    "typing.Callable[, ]",
                    "bool",
                    "Callable",
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "List[Tuple[str, Any]]"
                ],
                "accounts": [
                    "bool"
                ],
                "generic_db_connection": [
                    "Callable",
                    "bool",
                    "typing.Callable[, ]"
                ],
                "replace_blocks_with_empty_from_snapshot": [
                    "Iterable[int]",
                    "typing.Iterable[int]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "chain": [
                    "bool",
                    "tests.conftesWorker"
                ]
            }
        },
        "test_get_event_feed_reversed_balance_update_to_old": {
            "name": "test_get_event_feed_reversed_balance_update_to_old",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_with_trustlines_and_interests_session": [
                    "tests.chain_integration.conftest.CurrencyNetworkProxy"
                ],
                "wait_for_ethindex_to_sync": [
                    "typing.Callable[, ]",
                    "bool",
                    "Callable",
                    "list[tuple[typing.Union[str,typing.Any]]]",
                    "List[Tuple[str, Any]]",
                    "list[str]",
                    "Iterable[str]",
                    "List[str]"
                ],
                "accounts": [
                    "bool"
                ],
                "generic_db_connection": [
                    "Callable",
                    "bool",
                    "typing.Callable[, ]"
                ],
                "replace_blocks_with_empty_from_snapshot": [
                    "Iterable[int]",
                    "typing.Iterable[int]"
                ],
                "chain": [
                    "bool",
                    "tests.conftesWorker",
                    "str"
                ]
            }
        },
        "test_get_event_feed_replaced_trustline_update": {
            "name": "test_get_event_feed_replaced_trustline_update",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network": [
                    "tests.chain_integration.conftest.CurrencyNetworkProxy"
                ],
                "wait_for_ethindex_to_sync": [
                    "bool",
                    "Iterable[T]",
                    "typing.Iterable[T]"
                ],
                "accounts": [
                    "list[]",
                    "tuple[typing.Union[int,int]]",
                    "dict",
                    "list",
                    "T",
                    "Callable",
                    "Tuple[int, int]",
                    "bool"
                ],
                "generic_db_connection": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "chain": [
                    "int"
                ]
            }
        },
        "test_get_event_feed_replaced_balance_update": {
            "name": "test_get_event_feed_replaced_balance_update",
            "location": 372,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_with_trustlines_and_interests_session": [
                    "tests.chain_integration.conftest.CurrencyNetworkProxy"
                ],
                "wait_for_ethindex_to_sync": [
                    "typing.Callable[, ]",
                    "bool",
                    "Callable",
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "List[str]"
                ],
                "accounts": [
                    "bool"
                ],
                "generic_db_connection": [
                    "str",
                    "bool",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "chain": [
                    "Dict[str, Any]",
                    "Union[Tuple[int], Tuple[int, int]]"
                ]
            }
        },
        "test_get_event_feed_network_freeze": {
            "name": "test_get_event_feed_network_freeze",
            "location": 405,
            "return": [
                "None"
            ],
            "arguments": {
                "test_currency_network_v1": [
                    "tests.chain_integration.conftest.CurrencyNetworkProxy"
                ],
                "wait_for_ethindex_to_sync": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None",
                    "int"
                ],
                "generic_db_connection": [
                    "int"
                ]
            }
        },
        "test_get_event_feed_network_unfreeze": {
            "name": "test_get_event_feed_network_unfreeze",
            "location": 421,
            "return": [
                "None"
            ],
            "arguments": {
                "test_currency_network_v1": [
                    "tests.chain_integration.conftest.CurrencyNetworkProxy"
                ],
                "wait_for_ethindex_to_sync": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None",
                    "int"
                ],
                "generic_db_connection": [
                    "int"
                ]
            }
        },
        "test_get_event_feed_reversed_network_freeze": {
            "name": "test_get_event_feed_reversed_network_freeze",
            "location": 437,
            "return": [
                "None"
            ],
            "arguments": {
                "test_currency_network_v1": [
                    "tests.chain_integration.conftest.CurrencyNetworkProxy"
                ],
                "wait_for_ethindex_to_sync": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None",
                    "int"
                ],
                "generic_db_connection": [
                    "int"
                ],
                "chain": [
                    "str",
                    "int"
                ],
                "replace_blocks_with_empty_from_snapshot": [
                    "str",
                    "typing.Callable[, ]",
                    "Callable",
                    "Callable[[KT], VT]"
                ]
            }
        },
        "test_get_event_feed_reversed_network_unfreeze": {
            "name": "test_get_event_feed_reversed_network_unfreeze",
            "location": 459,
            "return": [
                "None"
            ],
            "arguments": {
                "test_currency_network_v1": [
                    "tests.chain_integration.conftest.CurrencyNetworkProxy"
                ],
                "wait_for_ethindex_to_sync": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None",
                    "int"
                ],
                "generic_db_connection": [
                    "int"
                ],
                "chain": [
                    "str",
                    "int"
                ],
                "replace_blocks_with_empty_from_snapshot": [
                    "str",
                    "typing.Callable[, ]",
                    "Callable",
                    "Callable[[KT], VT]"
                ]
            }
        },
        "sync_if_enough_transactions_sent": {
            "name": "sync_if_enough_transactions_sent",
            "location": 482,
            "return": [
                "None"
            ],
            "arguments": {
                "transactions_sent": [
                    "bool"
                ],
                "transactions_between_sync": [
                    "bool"
                ],
                "graph": [
                    "bool",
                    "float"
                ],
                "connection": [
                    "bool",
                    "float"
                ],
                "wait_for_ethindex_to_sync": [
                    "bool",
                    "str",
                    "Iterable[str]",
                    "typing.Iterable[str]",
                    "Optional[str]",
                    "None",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ]
            }
        },
        "revert_if_enough_transactions_sent": {
            "name": "revert_if_enough_transactions_sent",
            "location": 495,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "replace_blocks_with_empty_from_snapshot": [
                    "int",
                    "list[str]",
                    "List[str]",
                    "None",
                    "bool",
                    "typing.Sequence[str]",
                    "Optional[int]",
                    "Sequence[str]"
                ]
            }
        },
        "test_sync_same_graphs": {
            "name": "test_sync_same_graphs",
            "location": 506,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "currency_network_with_trustlines_and_interests_session": [],
                "ethindex_db_for_currency_network_with_trustlines_and_interests": [
                    "Callable",
                    "str"
                ],
                "wait_for_ethindex_to_sync": [
                    "int",
                    "str",
                    "bool"
                ],
                "accounts": [
                    "str",
                    "Callable",
                    "Optional[\"Game\"]",
                    "bool"
                ],
                "generic_db_connection": [
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[Callable[..., Any]]",
                    "typing.Callable[..., typing.Any]",
                    "int",
                    "None"
                ],
                "transactions_between_sync": [
                    "int",
                    "str",
                    "bool"
                ],
                "transactions_between_revert": [
                    "str",
                    "float",
                    "bool",
                    "typing.Callable[, ]",
                    "Callable",
                    "int"
                ],
                "chain": [
                    "tests.conftesWorker",
                    "str",
                    "bool"
                ],
                "revert_if_enough_transactions_sent": [
                    "str",
                    "float",
                    "bool",
                    "typing.Callable[, ]",
                    "Callable",
                    "int"
                ]
            }
        },
        "test_sync_with_reordering_of_events": {
            "name": "test_sync_with_reordering_of_events",
            "location": 625,
            "return": [
                "None"
            ],
            "arguments": {
                "currency_network_with_trustlines_and_interests_session": [
                    "tests.chain_integration.conftest.CurrencyNetworkProxy"
                ],
                "wait_for_ethindex_to_sync": [
                    "typing.Callable[, ]",
                    "bool",
                    "Callable",
                    "list[tuple[typing.Union[str,typing.Any]]]",
                    "List[Tuple[str, Any]]",
                    "list[str]",
                    "Iterable[str]",
                    "List[str]"
                ],
                "accounts": [
                    "bool"
                ],
                "generic_db_connection": [
                    "Callable",
                    "bool",
                    "typing.Callable[, ]",
                    "Optional[bool]",
                    "None",
                    "List[str]",
                    "list[str]"
                ],
                "chain": [
                    "Iterable[str]",
                    "Union[Tuple[int], Tuple[int, int]]",
                    "bool"
                ]
            }
        },
        "test_sync_network_freeze_on_graph": {
            "name": "test_sync_network_freeze_on_graph",
            "location": 681,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sync_network_unfreeze_on_graph": {
            "name": "test_sync_network_unfreeze_on_graph",
            "location": 690,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Graph.apply_events_on_graph": {
            "name": "apply_events_on_graph",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "events": [
                    "str",
                    "bool",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "Graph.apply_feed_updates_on_graph": {
            "name": "apply_feed_updates_on_graph",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "feed_updates": [
                    "str",
                    "bool"
                ]
            }
        },
        "revert_if_enough_transactions_sent.revert": {
            "name": "revert",
            "location": 496,
            "return": [
                "List[dict]",
                "Match",
                "str",
                "bool",
                "OrderedDict"
            ],
            "arguments": {
                "snapshot": [
                    "bool",
                    "\"Pipeline\"",
                    "Sequence[T]"
                ],
                "transactions_sent": [
                    "str",
                    "int",
                    "Type[T]"
                ],
                "transactions_between_revert": [
                    "str",
                    "int",
                    "Type[T]"
                ]
            }
        }
    },
    "relay-master/tests/chain_integration/database_integration/__init__.py": {},
    "relay-master/tests/integration/__init__.py": {},
    "relay-master/tests/integration/exchange/conftest.py": {
        "engine": {
            "name": "engine",
            "location": 9,
            "return": [
                "Tuple[int, int]",
                "str",
                "int",
                "T"
            ],
            "arguments": {}
        },
        "orders": {
            "name": "orders",
            "location": 14,
            "return": [
                "list[SignableOrder]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "addresses": [
                    "int",
                    "bytes"
                ],
                "test_account": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "order": {
            "name": "order",
            "location": 95,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "orders": [
                    "str",
                    "int",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "relay-master/tests/integration/exchange/test_exchange_db.py": {
        "orderbook_db": {
            "name": "orderbook_db",
            "location": 10,
            "return": [
                "OrderBookDB",
                "str",
                "bool"
            ],
            "arguments": {
                "engine": [
                    "bool",
                    "str",
                    "List[str]",
                    "list[str]",
                    "Tuple[int, int, int]",
                    "tuple[typing.Union[int,int,int]]"
                ]
            }
        },
        "test_get_order": {
            "name": "test_get_order",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "order": [
                    "relay.exchange.order.Order"
                ],
                "orderbook_db": [
                    "relay.exchange.exchange_db.OrderBookDB"
                ]
            }
        },
        "test_get_orders": {
            "name": "test_get_orders",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "orders": [
                    "Sequence[relay.exchange.order.Order]"
                ],
                "orderbook_db": [
                    "relay.exchange.exchange_db.OrderBookDB"
                ],
                "addresses": [
                    "Sequence[str]"
                ]
            }
        },
        "test_same_order_not_added": {
            "name": "test_same_order_not_added",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "order": [
                    "relay.exchange.order.Order"
                ],
                "orderbook_db": [
                    "relay.exchange.exchange_db.OrderBookDB"
                ],
                "addresses": [
                    "Sequence[str]"
                ]
            }
        },
        "test_get_orders_order": {
            "name": "test_get_orders_order",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "orders": [
                    "Sequence[relay.exchange.order.Order]"
                ],
                "orderbook_db": [
                    "relay.exchange.exchange_db.OrderBookDB"
                ],
                "addresses": [
                    "Sequence[str]"
                ]
            }
        },
        "test_get_orders_order_price_desc": {
            "name": "test_get_orders_order_price_desc",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "orders": [
                    "Sequence[relay.exchange.order.Order]"
                ],
                "orderbook_db": [
                    "relay.exchange.exchange_db.OrderBookDB"
                ],
                "addresses": [
                    "Sequence[str]"
                ]
            }
        },
        "test_delete_order": {
            "name": "test_delete_order",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "orders": [
                    "Sequence[relay.exchange.order.Order]"
                ],
                "orderbook_db": [
                    "relay.exchange.exchange_db.OrderBookDB"
                ],
                "addresses": [
                    "Sequence[str]"
                ]
            }
        },
        "test_delete_orders": {
            "name": "test_delete_orders",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "orders": [
                    "Sequence[relay.exchange.order.Order]"
                ],
                "orderbook_db": [
                    "relay.exchange.exchange_db.OrderBookDB"
                ],
                "addresses": [
                    "Sequence[str]"
                ]
            }
        },
        "test_delete_old_orders": {
            "name": "test_delete_old_orders",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "orders": [
                    "Sequence[relay.exchange.order.Order]"
                ],
                "orderbook_db": [
                    "relay.exchange.exchange_db.OrderBookDB"
                ],
                "addresses": [
                    "Sequence[str]"
                ]
            }
        }
    },
    "relay-master/tests/integration/exchange/test_orderbook_int.py": {
        "orderbook": {
            "name": "orderbook",
            "location": 8,
            "return": [
                "OrderBook",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "engine": [
                    "bool",
                    "str",
                    "int"
                ],
                "addresses": [
                    "str",
                    "int",
                    "Optional[List]",
                    "list[]",
                    "Iterable[bool]",
                    "None"
                ]
            }
        },
        "test_bids": {
            "name": "test_bids",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "orderbook": [
                    "relay.exchange.orderbook.OrderBook"
                ],
                "orders": [
                    "Tuple[int]",
                    "tuple[int]",
                    "Optional[Exception]",
                    "Exception",
                    "Sequence[Union[int, float]]",
                    "None",
                    "typing.Sequence[typing.Union[int,float]]"
                ],
                "addresses": []
            }
        },
        "test_asks": {
            "name": "test_asks",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "orderbook": [
                    "relay.exchange.orderbook.OrderBook"
                ],
                "orders": [
                    "Tuple[int]",
                    "tuple[int]",
                    "Optional[Exception]",
                    "Exception",
                    "Sequence[Union[int, float]]",
                    "None",
                    "typing.Sequence[typing.Union[int,float]]"
                ],
                "addresses": []
            }
        }
    },
    "relay-master/tests/integration/exchange/__init__.py": {},
    "relay-master/tests/unit/conftest.py": {
        "web3_event": {
            "name": "web3_event",
            "location": 12,
            "return": [
                "dict[typing.Text, typing.Union[int,typing.Text]]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "web3_event_trustline_update": {
            "name": "web3_event_trustline_update",
            "location": 23,
            "return": [
                "str",
                "dict[typing.Text, dict[typing.Text, typing.Union[typing.Text,int]]]"
            ],
            "arguments": {
                "web3_event": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "web3_event_trustline_request": {
            "name": "web3_event_trustline_request",
            "location": 41,
            "return": [
                "dict[typing.Text, dict[typing.Text, typing.Union[typing.Text,int]]]",
                "dict",
                "Mapping[str, Any]",
                "bytes",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "web3_event": [
                    "List[relay.blockchain.events.BlockchainEvent]",
                    "str",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "web3_event_trustline_request_cancel": {
            "name": "web3_event_trustline_request_cancel",
            "location": 60,
            "return": [
                "dict[typing.Text, dict[typing.Text, typing.Text]]",
                "dict",
                "Dict[str, str]",
                "bool",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "web3_event": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "web3_event_transfer": {
            "name": "web3_event_transfer",
            "location": 72,
            "return": [
                "bool",
                "dict[typing.Text, dict[typing.Text, typing.Union[typing.Text,int,typing.Callable[..., collections.abc.Awaitable[]],dict[str, typing.Any]]]]"
            ],
            "arguments": {
                "web3_event": [
                    "int"
                ],
                "test_extra_data": [
                    "str",
                    "Callable[..., Awaitable]",
                    "typing.Callable[..., collections.abc.Awaitable[]]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "relay-master/tests/unit/test_concurrency_utils.py": {
        "unsafe_list_operation": {
            "name": "unsafe_list_operation",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "lst": [
                    "str"
                ]
            }
        },
        "test_synchronized_function": {
            "name": "test_synchronized_function",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_synchronized_method": {
            "name": "test_synchronized_method",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_synchronized_function.doit": {
            "name": "doit",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_synchronized_method.Foo.doit": {
            "name": "doit",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "relay-master/tests/unit/test_config.py": {
        "example_config_filepath": {
            "name": "example_config_filepath",
            "location": 24,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "uncommented_example_config_filepath": {
            "name": "uncommented_example_config_filepath",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "example_config_filepath": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "dict",
                    "pathlib.Path",
                    "cerise.config.Config"
                ],
                "tmp_path": [
                    "str",
                    "tuple",
                    "Tuple[str]"
                ]
            }
        },
        "correct_fees_config_file": {
            "name": "correct_fees_config_file",
            "location": 44,
            "return": [
                "pathlib.Path",
                "str"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "list"
                ]
            }
        },
        "test_remove_empty_dicts": {
            "name": "test_remove_empty_dicts",
            "location": 73,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "test_input": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "int"
                ],
                "expected_output": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "int"
                ]
            }
        },
        "test_example_file_matches_default_config": {
            "name": "test_example_file_matches_default_config",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "example_config_filepath": []
            }
        },
        "test_uncommented_default_config_is_valid": {
            "name": "test_uncommented_default_config_is_valid",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "uncommented_example_config_filepath": []
            }
        },
        "test_correct_fee_config_is_valid": {
            "name": "test_correct_fee_config_is_valid",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "correct_fees_config_file": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "pathlib.Path"
                ]
            }
        },
        "test_validation_error_message": {
            "name": "test_validation_error_message",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "relay-master/tests/unit/test_event.py": {
        "test_trustline_update_event": {
            "name": "test_trustline_update_event",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "web3_event_trustline_update": [
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_transfer_event": {
            "name": "test_transfer_event",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "web3_event_transfer": [
                    "tuple",
                    "tuple[]"
                ],
                "test_extra_data": []
            }
        }
    },
    "relay-master/tests/unit/test_main.py": {
        "test_get_version": {
            "name": "test_get_version",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "relay-master/tests/unit/test_signing_middleware.py": {
        "parity_next_nonce": {
            "name": "parity_next_nonce",
            "location": 11,
            "return": [
                "Callable[([Any, Any], Any)]"
            ],
            "arguments": {
                "make_request": [],
                "w3": []
            }
        },
        "signing_account": {
            "name": "signing_account",
            "location": 28,
            "return": [
                "Dict[str, Any]",
                "Exception",
                "Dict[str, str]",
                "int",
                "str",
                "dict",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {}
        },
        "w3": {
            "name": "w3",
            "location": 34,
            "return": [
                "Web3",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "signing_account": [
                    "str"
                ]
            }
        },
        "test_eth_default_account": {
            "name": "test_eth_default_account",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "w3": [
                    "int",
                    "relay.pushservice.client_token_db.ClientTokenDB"
                ],
                "signing_account": [
                    "int",
                    "relay.pushservice.client_token_db.ClientTokenDB"
                ]
            }
        },
        "test_auto_signing": {
            "name": "test_auto_signing",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "w3": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "web3.contracContract"
                ],
                "signing_account": [
                    "bool",
                    "web3.Web3"
                ]
            }
        },
        "parity_next_nonce.middleware": {
            "name": "middleware",
            "location": 17,
            "return": [
                "bytes",
                "dict",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "method": [
                    "MutableMapping",
                    "str",
                    "List[str]"
                ],
                "params": [
                    "dict",
                    "Iterator",
                    "str"
                ]
            }
        }
    },
    "relay-master/tests/unit/test_streams.py": {
        "subject": {
            "name": "subject",
            "location": 48,
            "return": [
                "Subject",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "messaging_subject": {
            "name": "messaging_subject",
            "location": 53,
            "return": [
                "MessagingSubject",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "client": {
            "name": "client",
            "location": 58,
            "return": [
                "LogClient",
                "str",
                "List[str]"
            ],
            "arguments": {}
        },
        "test_subscription": {
            "name": "test_subscription",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "subject": [],
                "client": [
                    "zulip.Client"
                ]
            }
        },
        "test_cancel_subscription": {
            "name": "test_cancel_subscription",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "subject": [],
                "client": [
                    "neuromation.api.Client",
                    "zulip.Client"
                ]
            }
        },
        "test_auto_unsubscribe": {
            "name": "test_auto_unsubscribe",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "subject": [],
                "client": [
                    "neuromation.api.Client",
                    "zulip.Client"
                ]
            }
        },
        "test_auto_unsubscribe_dont_skip": {
            "name": "test_auto_unsubscribe_dont_skip",
            "location": 93,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "subject": []
            }
        },
        "test_subscription_after_puplish": {
            "name": "test_subscription_after_puplish",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "messaging_subject": [],
                "client": [
                    "str",
                    "slice"
                ]
            }
        },
        "test_subscription_after_resubscribe": {
            "name": "test_subscription_after_resubscribe",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "messaging_subject": [],
                "client": [
                    "Callable[..., neuromation.api.Client]",
                    "typing.Callable[..., C]"
                ]
            }
        },
        "test_subscription_both": {
            "name": "test_subscription_both",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "messaging_subject": [],
                "client": [
                    "str"
                ]
            }
        },
        "test_unsubscription_race_condition": {
            "name": "test_unsubscription_race_condition",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "subject": []
            }
        },
        "test_many_subscription": {
            "name": "test_many_subscription",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "subject": []
            }
        },
        "test_stop_subscription": {
            "name": "test_stop_subscription",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "subject": []
            }
        },
        "test_close_client": {
            "name": "test_close_client",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "subject": []
            }
        },
        "test_not_reading_client_does_not_mark_as_read": {
            "name": "test_not_reading_client_does_not_mark_as_read",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "messaging_subject": [
                    "Callable[..., neuromation.api.Client]",
                    "str",
                    "neuromation.api.Client"
                ],
                "client": [
                    "neuromation.api.Client"
                ]
            }
        },
        "LogClient.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogClient._execute_send": {
            "name": "_execute_send",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subscription": [
                    "relay.streams.Subscription"
                ],
                "event": [
                    "relay.events.Event"
                ]
            }
        },
        "SafeLogClient.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SafeLogClient._execute_send": {
            "name": "_execute_send",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subscription": [
                    "relay.streams.Subscription"
                ],
                "event": [
                    "relay.events.Event"
                ]
            }
        },
        "GeventClient._execute_send": {
            "name": "_execute_send",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subscription": [
                    "relay.streams.Subscription"
                ],
                "event": [
                    "relay.events.Event"
                ]
            }
        }
    },
    "relay-master/tests/unit/test_utils.py": {
        "test_sha3": {
            "name": "test_sha3",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "relay-master/tests/unit/__init__.py": {},
    "relay-master/tests/unit/api/test_schemas.py": {
        "gen_meta_transactions": {
            "name": "gen_meta_transactions",
            "location": 56,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "test_meta_transaction_roundtrip": {
            "name": "test_meta_transaction_roundtrip",
            "location": 69,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "meta_transaction": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "test_load_meta_transaction_invalid_values": {
            "name": "test_load_meta_transaction_invalid_values",
            "location": 97,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "values": [
                    "dict[, ]",
                    "dict[str, str]",
                    "dict",
                    "Dict[str, str]",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_load_meta_transaction_valid_values": {
            "name": "test_load_meta_transaction_valid_values",
            "location": 118,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "values": [
                    "dict[str, str]",
                    "str",
                    "dict[, ]",
                    "dict[str, dict[str, typing.Any]]",
                    "Dict[str, str]",
                    "Optional[Dict[str, Any]]",
                    "dict",
                    "werkzeug.datastructures.ImmutableMultiDict",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        },
        "payment_path": {
            "name": "payment_path",
            "location": 126,
            "return": [
                "str",
                "PaymentPath"
            ],
            "arguments": {
                "request": [
                    "str"
                ]
            }
        },
        "test_payment_path_roundtrip": {
            "name": "test_payment_path_roundtrip",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "payment_path": [
                    "List[str]",
                    "str",
                    "list[str]"
                ]
            }
        },
        "test_no_class_type_in_event": {
            "name": "test_no_class_type_in_event",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "relay-master/tests/unit/api/__init__.py": {},
    "relay-master/tests/unit/api/exchange/test_schema.py": {
        "order": {
            "name": "order",
            "location": 8,
            "return": [
                "Order",
                "int",
                "List[int]",
                "str"
            ],
            "arguments": {}
        },
        "test_sig_v": {
            "name": "test_sig_v",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "order": [
                    "set",
                    "set[]"
                ]
            }
        },
        "test_sig_rs": {
            "name": "test_sig_rs",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "order": [
                    "set",
                    "set[]"
                ]
            }
        },
        "test_sig_lowercase": {
            "name": "test_sig_lowercase",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "order": [
                    "str"
                ]
            }
        }
    },
    "relay-master/tests/unit/exchange/conftest.py": {
        "invalid_signature_order": {
            "name": "invalid_signature_order",
            "location": 9,
            "return": [
                "Order",
                "int",
                "Callable",
                "str",
                "List[dict]"
            ],
            "arguments": {
                "addresses": [
                    "int",
                    "float"
                ]
            }
        },
        "invalid_exchange_order": {
            "name": "invalid_exchange_order",
            "location": 31,
            "return": [
                "SignableOrder",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "addresses": [
                    "int",
                    "bytes"
                ],
                "test_account": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "invalid_taker_order": {
            "name": "invalid_taker_order",
            "location": 53,
            "return": [
                "SignableOrder",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "addresses": [
                    "int",
                    "bytes"
                ],
                "test_account": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "expired_order": {
            "name": "expired_order",
            "location": 75,
            "return": [
                "SignableOrder",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "addresses": [
                    "int",
                    "bytes"
                ],
                "test_account": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "valid_order": {
            "name": "valid_order",
            "location": 97,
            "return": [
                "SignableOrder",
                "Callable[[str], bool]",
                "List[object]",
                "Optional[str]",
                "dict",
                "int"
            ],
            "arguments": {
                "addresses": [
                    "int",
                    "bytes",
                    "bool"
                ],
                "test_account": [
                    "str",
                    "Union[int,str]",
                    "int"
                ]
            }
        }
    },
    "relay-master/tests/unit/exchange/test_order.py": {
        "test_invalid_signature": {
            "name": "test_invalid_signature",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "invalid_signature_order": [
                    "relay.exchange.order.Order"
                ]
            }
        },
        "test_invalid_address": {
            "name": "test_invalid_address",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "invalid_exchange_order": [
                    "relay.exchange.order.Order"
                ]
            }
        },
        "test_valid_order": {
            "name": "test_valid_order",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "valid_order": [
                    "relay.exchange.order.Order"
                ]
            }
        },
        "test_expired": {
            "name": "test_expired",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "valid_order": [
                    "relay.exchange.order.Order"
                ]
            }
        }
    },
    "relay-master/tests/unit/exchange/test_orderbook.py": {
        "orderbook": {
            "name": "orderbook",
            "location": 9,
            "return": [
                "OrderBook",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_invalid_signature_order": {
            "name": "test_invalid_signature_order",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "orderbook": [
                    "relay.exchange.orderbook.OrderBook"
                ],
                "invalid_signature_order": [
                    "relay.exchange.order.Order"
                ]
            }
        },
        "test_invalid_exchange_order": {
            "name": "test_invalid_exchange_order",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "orderbook": [
                    "relay.exchange.orderbook.OrderBook"
                ],
                "valid_order": [
                    "relay.exchange.order.Order"
                ]
            }
        },
        "test_invalid_taker_order": {
            "name": "test_invalid_taker_order",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "orderbook": [
                    "relay.exchange.orderbook.OrderBook"
                ],
                "invalid_taker_order": [
                    "relay.exchange.order.Order"
                ]
            }
        },
        "test_expired_order": {
            "name": "test_expired_order",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "orderbook": [
                    "relay.exchange.orderbook.OrderBook"
                ],
                "expired_order": [
                    "relay.exchange.order.Order"
                ]
            }
        },
        "test_valid_order": {
            "name": "test_valid_order",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "orderbook": [
                    "relay.exchange.orderbook.OrderBook"
                ],
                "valid_order": [
                    "relay.exchange.order.Order"
                ]
            }
        }
    },
    "relay-master/tests/unit/exchange/__init__.py": {},
    "relay-master/tests/unit/network_graph/conftest.py": {
        "trustlines": {
            "name": "trustlines",
            "location": 13,
            "return": [
                "list[Trustline]",
                "str",
                "bytearray",
                "bytes",
                "int",
                "Union[str, bytes]",
                "float"
            ],
            "arguments": {}
        },
        "community_with_trustlines": {
            "name": "community_with_trustlines",
            "location": 24,
            "return": [
                "bool",
                "int",
                "Tuple[str, List[str]]"
            ],
            "arguments": {
                "trustlines": [
                    "str",
                    "int",
                    "Tuple[int, int]",
                    "float",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "community_with_trustlines_and_fees": {
            "name": "community_with_trustlines_and_fees",
            "location": 31,
            "return": [
                "bool",
                "int",
                "Tuple[str, List[str]]"
            ],
            "arguments": {
                "trustlines": [
                    "str",
                    "int",
                    "Tuple[int, int]",
                    "float",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "configurable_community": {
            "name": "configurable_community",
            "location": 38,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "request": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "relay-master/tests/unit/network_graph/test_alg.py": {
        "test_optimize_number_of_costfn_calls": {
            "name": "test_optimize_number_of_costfn_calls",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "FeeCostAccumulatorCounter.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FeeCostAccumulatorCounter.zero": {
            "name": "zero",
            "location": 10,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FeeCostAccumulatorCounter.total_cost_from_start_to_dst": {
            "name": "total_cost_from_start_to_dst",
            "location": 13,
            "return": [
                "str",
                "int",
                "bytes",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "cost_from_start_to_node": [
                    "str",
                    "list[str]",
                    "bytes",
                    "List[str]",
                    "dict",
                    "Optional[str]"
                ],
                "node": [
                    "str",
                    "bool",
                    "list[]",
                    "int",
                    "list"
                ],
                "dst": [
                    "str",
                    "bool",
                    "list[]",
                    "int",
                    "list"
                ],
                "graph_data": [
                    "str",
                    "list[str]",
                    "bytes",
                    "List[str]",
                    "dict",
                    "Optional[str]"
                ]
            }
        }
    },
    "relay-master/tests/unit/network_graph/test_fees.py": {
        "test_imbalance_generated": {
            "name": "test_imbalance_generated",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "ImbalanceGenerated": [
                    "str",
                    "Iterable[Any]",
                    "Callable",
                    "Sequence[Any]"
                ]
            }
        },
        "test_calculate_fees": {
            "name": "test_calculate_fees",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "CalculateFee": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_calculate_fees_reverse": {
            "name": "test_calculate_fees_reverse",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "CalculateFee": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "relay-master/tests/unit/network_graph/test_find_path.py": {
        "graph": {
            "name": "graph",
            "location": 18,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "sanity_check_fees": {
            "name": "sanity_check_fees",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "graph": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Optional[Dict]",
                    "None"
                ],
                "cost_path": [
                    "str",
                    "TextIO",
                    "typing.TextIO"
                ]
            }
        },
        "test_find_path_cost_wrong_bug_issue_219": {
            "name": "test_find_path_cost_wrong_bug_issue_219",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "graph": [
                    "str",
                    "bool"
                ]
            }
        },
        "FeeCostAccumulator.zero": {
            "name": "zero",
            "location": 8,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FeeCostAccumulator.total_cost_from_start_to_dst": {
            "name": "total_cost_from_start_to_dst",
            "location": 11,
            "return": [
                "str",
                "int",
                "bytes",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "cost_from_start_to_node": [
                    "str",
                    "list[str]",
                    "bytes",
                    "List[str]",
                    "dict",
                    "Optional[str]"
                ],
                "node": [
                    "str",
                    "bool",
                    "list[]",
                    "int",
                    "list"
                ],
                "dst": [
                    "str",
                    "bool",
                    "list[]",
                    "int",
                    "list"
                ],
                "graph_data": [
                    "str",
                    "list[str]",
                    "bytes",
                    "List[str]",
                    "dict",
                    "Optional[str]"
                ]
            }
        }
    },
    "relay-master/tests/unit/network_graph/test_graph.py": {
        "assert_maximum_path": {
            "name": "assert_maximum_path",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "community": [
                    "int",
                    "bool"
                ],
                "max_path": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ],
                "max_amount": [
                    "int",
                    "bool"
                ]
            }
        },
        "complextrustlines": {
            "name": "complextrustlines",
            "location": 28,
            "return": [
                "list[Trustline]",
                "Callable",
                "str",
                "Tuple[Any, Any, Any]",
                "bytearray",
                "float"
            ],
            "arguments": {}
        },
        "balance_trustlines": {
            "name": "balance_trustlines",
            "location": 42,
            "return": [
                "list[Trustline]",
                "int",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "address_not_used_in_graphs": {
            "name": "address_not_used_in_graphs",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "complextrustlines": [
                    "tuple[typing.Union[int,int]]",
                    "str",
                    "Tuple[int, int]",
                    "int",
                    "Iterable"
                ],
                "balance_trustlines": [
                    "tuple[typing.Union[int,int]]",
                    "str",
                    "Tuple[int, int]",
                    "int",
                    "Iterable"
                ]
            }
        },
        "balances_community": {
            "name": "balances_community",
            "location": 56,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "balance_trustlines": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "complex_community_with_trustlines_and_fees": {
            "name": "complex_community_with_trustlines_and_fees",
            "location": 63,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "complextrustlines": [
                    "bool",
                    "int"
                ]
            }
        },
        "complex_community_with_trustlines_and_fees_33": {
            "name": "complex_community_with_trustlines_and_fees_33",
            "location": 70,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "complextrustlines": [
                    "bool",
                    "int"
                ]
            }
        },
        "complex_community_with_trustlines_and_fees_202": {
            "name": "complex_community_with_trustlines_and_fees_202",
            "location": 77,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "complextrustlines": [
                    "bool",
                    "int"
                ]
            }
        },
        "complex_community_with_trustlines_and_fees_10": {
            "name": "complex_community_with_trustlines_and_fees_10",
            "location": 84,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "complextrustlines": [
                    "bool",
                    "int"
                ]
            }
        },
        "complex_community_with_trustlines": {
            "name": "complex_community_with_trustlines",
            "location": 91,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "complextrustlines": [
                    "bool",
                    "int"
                ]
            }
        },
        "complex_community_with_trustlines_and_fees_configurable_balances": {
            "name": "complex_community_with_trustlines_and_fees_configurable_balances",
            "location": 98,
            "return": [
                "bool",
                "str",
                "Optional[Any]",
                "dict[str, dict[str, str]]",
                "bytes",
                "None",
                "typing.Callable[dict[, ], bool]"
            ],
            "arguments": {
                "complex_community_with_trustlines": [
                    "bool",
                    "bytes",
                    "Dict[str, Dict[str, str]]",
                    "dict[str, dict[str, str]]",
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[Callable[[Dict], bool]]",
                    "typing.Callable[dict[, ], bool]"
                ],
                "request": [
                    "str",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ]
            }
        },
        "parametrised_find_transfer_path_function": {
            "name": "parametrised_find_transfer_path_function",
            "location": 113,
            "return": [
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "community_with_trustlines": [
                    "bool",
                    "str",
                    "typing.Type",
                    "Type[T]",
                    "dict[, ]",
                    "dict",
                    "int"
                ],
                "request": [
                    "bool",
                    "int"
                ]
            }
        },
        "test_users": {
            "name": "test_users",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "community_with_trustlines": [
                    "str",
                    "tests.basilisp.helpers.CompileFn",
                    "slice",
                    "cli_ui.tests.MessageRecorder"
                ]
            }
        },
        "test_friends": {
            "name": "test_friends",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "community_with_trustlines": [
                    "str",
                    "tests.basilisp.helpers.CompileFn",
                    "slice"
                ]
            }
        },
        "test_account": {
            "name": "test_account",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "community_with_trustlines": []
            }
        },
        "test_account_sum": {
            "name": "test_account_sum",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "community_with_trustlines": []
            }
        },
        "test_frozen_account_summary": {
            "name": "test_frozen_account_summary",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "community_with_trustlines": [
                    "Iterable[Iterable[Any]]",
                    "int",
                    "typing.Iterable[typing.Iterable[typing.Any]]"
                ]
            }
        },
        "test_frozen_aggregated_account_summary": {
            "name": "test_frozen_aggregated_account_summary",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "community_with_trustlines": [
                    "int",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_update_trustline": {
            "name": "test_update_trustline",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "community_with_trustlines": [
                    "str",
                    "tests.basilisp.helpers.CompileFn",
                    "slice"
                ]
            }
        },
        "test_update_balance": {
            "name": "test_update_balance",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "community_with_trustlines": [
                    "str",
                    "tests.basilisp.helpers.CompileFn",
                    "slice"
                ]
            }
        },
        "test_close_trustline_no_cost_exact_amount": {
            "name": "test_close_trustline_no_cost_exact_amount",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "complex_community_with_trustlines_and_fees": [
                    "Optional[str]",
                    "str",
                    "tests.basilisp.helpers.CompileFn",
                    "None"
                ]
            }
        },
        "test_close_trustline_not_enough_capacity": {
            "name": "test_close_trustline_not_enough_capacity",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "complex_community_with_trustlines_and_fees": [
                    "Optional[str]",
                    "str",
                    "tests.basilisp.helpers.CompileFn",
                    "None"
                ]
            }
        },
        "test_close_trustline_first_edge_insufficient_capacity": {
            "name": "test_close_trustline_first_edge_insufficient_capacity",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "complex_community_with_trustlines_and_fees": [
                    "Optional[str]",
                    "str",
                    "tests.basilisp.helpers.CompileFn",
                    "None"
                ]
            }
        },
        "test_close_trustline_last_edge_insufficient_capacity": {
            "name": "test_close_trustline_last_edge_insufficient_capacity",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "complex_community_with_trustlines_and_fees": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_close_trustline_source_not_in_graph": {
            "name": "test_close_trustline_source_not_in_graph",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "balances_community": [
                    "Tuple[paradigm.models.Base, tests.utils.Kwargs]",
                    "int",
                    "tuple[typing.Union[paradigm.models.Base,tests.utils.Kwargs]]"
                ],
                "address_not_used_in_graphs": [
                    "Tuple[paradigm.models.Base, tests.utils.Kwargs]",
                    "int",
                    "tuple[typing.Union[paradigm.models.Base,tests.utils.Kwargs]]"
                ]
            }
        },
        "test_close_trustline_target_not_in_graph": {
            "name": "test_close_trustline_target_not_in_graph",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "balances_community": [
                    "str",
                    "Tuple[paradigm.models.Base, tests.utils.Kwargs]",
                    "tuple[typing.Union[paradigm.models.Base,tests.utils.Kwargs]]"
                ],
                "address_not_used_in_graphs": [
                    "str",
                    "Tuple[paradigm.models.Base, tests.utils.Kwargs]",
                    "tuple[typing.Union[paradigm.models.Base,tests.utils.Kwargs]]"
                ]
            }
        },
        "test_capacity_is_maximum": {
            "name": "test_capacity_is_maximum",
            "location": 299,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "complex_community_with_trustlines_and_fees_configurable_balances": [
                    "str",
                    "bool",
                    "int"
                ],
                "source": [
                    "str",
                    "int",
                    "float"
                ],
                "destination": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "test_capacity_path_single_hop": {
            "name": "test_capacity_path_single_hop",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "complex_community_with_trustlines": [
                    "str"
                ]
            }
        },
        "test_capacity_path_single_hop_more_capacity": {
            "name": "test_capacity_path_single_hop_more_capacity",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "complex_community_with_trustlines": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_capacity_path_single_hop_less_capacity": {
            "name": "test_capacity_path_single_hop_less_capacity",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "complex_community_with_trustlines": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_capacity_path_multi_hops_negative_balance": {
            "name": "test_capacity_path_multi_hops_negative_balance",
            "location": 347,
            "return": [
                "None"
            ],
            "arguments": {
                "complex_community_with_trustlines": [
                    "str",
                    "int",
                    "tests.e2e.Helper"
                ]
            }
        },
        "test_capacity_path_multi_hops_negative_balance_lowers_capacity": {
            "name": "test_capacity_path_multi_hops_negative_balance_lowers_capacity",
            "location": 357,
            "return": [
                "None"
            ],
            "arguments": {
                "complex_community_with_trustlines": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_capacity_path_multi_hops_positive_balance": {
            "name": "test_capacity_path_multi_hops_positive_balance",
            "location": 370,
            "return": [
                "None"
            ],
            "arguments": {
                "complex_community_with_trustlines": [
                    "str",
                    "int"
                ]
            }
        },
        "test_capacity_path_single_hop_with_fees": {
            "name": "test_capacity_path_single_hop_with_fees",
            "location": 382,
            "return": [
                "None"
            ],
            "arguments": {
                "complex_community_with_trustlines_and_fees": [
                    "Tuple[paradigm.models.Base, tests.utils.Kwargs]",
                    "tuple[typing.Union[paradigm.models.Base,tests.utils.Kwargs]]",
                    "bool",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_capacity_path_multi_hop_with_fees": {
            "name": "test_capacity_path_multi_hop_with_fees",
            "location": 397,
            "return": [
                "None"
            ],
            "arguments": {
                "complex_community_with_trustlines_and_fees": [
                    "Tuple[paradigm.models.Base, tests.utils.Kwargs]",
                    "tuple[typing.Union[paradigm.models.Base,tests.utils.Kwargs]]",
                    "bool",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_capacity_path_multi_hop_with_fees_one_hop_no_fee": {
            "name": "test_capacity_path_multi_hop_with_fees_one_hop_no_fee",
            "location": 412,
            "return": [
                "None"
            ],
            "arguments": {
                "complex_community_with_trustlines_and_fees": []
            }
        },
        "test_max_capacity_estimation_no_fees_on_one_path": {
            "name": "test_max_capacity_estimation_no_fees_on_one_path",
            "location": 433,
            "return": [
                "None"
            ],
            "arguments": {
                "complex_community_with_trustlines_and_fees": [
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "test_max_capacity_estimation_different_length_paths": {
            "name": "test_max_capacity_estimation_different_length_paths",
            "location": 460,
            "return": [
                "None"
            ],
            "arguments": {
                "community_with_trustlines_and_fees": [
                    "bool"
                ]
            }
        },
        "test_capacity_path_single_hop_reducing_imbalance": {
            "name": "test_capacity_path_single_hop_reducing_imbalance",
            "location": 477,
            "return": [
                "None"
            ],
            "arguments": {
                "complex_community_with_trustlines_and_fees": [
                    "str"
                ]
            }
        },
        "test_max_capacity_estimation_long_path": {
            "name": "test_max_capacity_estimation_long_path",
            "location": 497,
            "return": [
                "None"
            ],
            "arguments": {
                "complex_community_with_trustlines_and_fees_10": [
                    "Dict[str, Sequence[Any]]",
                    "dict[str, typing.Sequence[typing.Any]]"
                ]
            }
        },
        "test_max_capacity_estimation_long_path_offset_by_two": {
            "name": "test_max_capacity_estimation_long_path_offset_by_two",
            "location": 526,
            "return": [
                "None"
            ],
            "arguments": {
                "complex_community_with_trustlines_and_fees_10": [
                    "Dict[str, Sequence[Any]]",
                    "dict[str, typing.Sequence[typing.Any]]"
                ]
            }
        },
        "test_max_path_closed_trustlines": {
            "name": "test_max_path_closed_trustlines",
            "location": 555,
            "return": [
                "None"
            ],
            "arguments": {
                "balances_community": [
                    "str"
                ]
            }
        },
        "test_max_path_ignores_frozen_lines": {
            "name": "test_max_path_ignores_frozen_lines",
            "location": 568,
            "return": [
                "None"
            ],
            "arguments": {
                "community_with_trustlines": [
                    "cli_ui.tests.MessageRecorder",
                    "slice"
                ]
            }
        },
        "test_mediated_transfer": {
            "name": "test_mediated_transfer",
            "location": 579,
            "return": [
                "None"
            ],
            "arguments": {
                "community_with_trustlines": [
                    "str",
                    "tests.basilisp.helpers.CompileFn",
                    "slice"
                ]
            }
        },
        "test_path": {
            "name": "test_path",
            "location": 589,
            "return": [
                "None"
            ],
            "arguments": {
                "community_with_trustlines": [
                    "bool",
                    "float",
                    "int"
                ],
                "parametrised_find_transfer_path_function": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "bool",
                    "TextIO",
                    "typing.TextIO",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "test_no_path": {
            "name": "test_no_path",
            "location": 601,
            "return": [
                "None"
            ],
            "arguments": {
                "community_with_trustlines": [
                    "str",
                    "bool",
                    "dict",
                    "dict[, ]"
                ],
                "parametrised_find_transfer_path_function": [
                    "str"
                ]
            }
        },
        "test_no_capacity": {
            "name": "test_no_capacity",
            "location": 612,
            "return": [
                "None"
            ],
            "arguments": {
                "community_with_trustlines": [
                    "str",
                    "bool",
                    "dict",
                    "dict[, ]"
                ],
                "parametrised_find_transfer_path_function": [
                    "str"
                ]
            }
        },
        "test_no_direction": {
            "name": "test_no_direction",
            "location": 628,
            "return": [
                "None"
            ],
            "arguments": {
                "community_with_trustlines": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "parametrised_find_transfer_path_function": [
                    "str"
                ]
            }
        },
        "test_valid_path_raises_no_value_error": {
            "name": "test_valid_path_raises_no_value_error",
            "location": 643,
            "return": [
                "None"
            ],
            "arguments": {
                "complex_community_with_trustlines_and_fees": [
                    "str",
                    "tests.basilisp.helpers.CompileFn",
                    "typing.Iterable[typing.Iterable[typing.Any]]",
                    "Iterable[Iterable[Any]]"
                ]
            }
        },
        "test_max_hops": {
            "name": "test_max_hops",
            "location": 662,
            "return": [
                "None"
            ],
            "arguments": {
                "community_with_trustlines": [
                    "str",
                    "bool",
                    "dict",
                    "dict[, ]"
                ],
                "parametrised_find_transfer_path_function": [
                    "str"
                ]
            }
        },
        "test_finding_path_ignores_frozen_lines": {
            "name": "test_finding_path_ignores_frozen_lines",
            "location": 672,
            "return": [
                "None"
            ],
            "arguments": {
                "community_with_trustlines": [
                    "str"
                ],
                "parametrised_find_transfer_path_function": [
                    "str"
                ]
            }
        },
        "test_send_back": {
            "name": "test_send_back",
            "location": 686,
            "return": [
                "None"
            ],
            "arguments": {
                "community_with_trustlines": [
                    "str",
                    "tests.basilisp.helpers.CompileFn",
                    "slice"
                ]
            }
        },
        "test_send_more": {
            "name": "test_send_more",
            "location": 712,
            "return": [
                "None"
            ],
            "arguments": {
                "community_with_trustlines": [
                    "str",
                    "tests.basilisp.helpers.CompileFn",
                    "slice"
                ]
            }
        },
        "test_send_more_nopath": {
            "name": "test_send_more_nopath",
            "location": 741,
            "return": [
                "None"
            ],
            "arguments": {
                "community_with_trustlines": [
                    "str",
                    "tests.basilisp.helpers.CompileFn",
                    "slice"
                ]
            }
        },
        "test_no_money_created": {
            "name": "test_no_money_created",
            "location": 782,
            "return": [
                "None"
            ],
            "arguments": {
                "community_with_trustlines": [
                    "str",
                    "slice",
                    "cli_ui.tests.MessageRecorder",
                    "tests.conftesWorker",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_money_created": {
            "name": "test_money_created",
            "location": 787,
            "return": [
                "None"
            ],
            "arguments": {
                "balances_community": [
                    "typing.Callable[, ]",
                    "str",
                    "cli_ui.tests.MessageRecorder",
                    "Callable"
                ]
            }
        },
        "test_no_creditlines": {
            "name": "test_no_creditlines",
            "location": 792,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_total_creditlines": {
            "name": "test_total_creditlines",
            "location": 797,
            "return": [
                "None"
            ],
            "arguments": {
                "balances_community": [
                    "tuple[typing.Union[str,str]]",
                    "cli_ui.tests.MessageRecorder",
                    "typing.Callable[, ]",
                    "Tuple[str, str]",
                    "Callable"
                ]
            }
        },
        "test_mediated_transfer_with_fees": {
            "name": "test_mediated_transfer_with_fees",
            "location": 802,
            "return": [
                "None"
            ],
            "arguments": {
                "community_with_trustlines_and_fees": [
                    "str",
                    "tests.basilisp.helpers.CompileFn",
                    "slice"
                ]
            }
        },
        "test_path_with_fees_sender_pays": {
            "name": "test_path_with_fees_sender_pays",
            "location": 812,
            "return": [
                "None"
            ],
            "arguments": {
                "community_with_trustlines_and_fees": [
                    "str",
                    "Optional[Dict]",
                    "dict[, ]",
                    "bool",
                    "List[List[str]]",
                    "None",
                    "list[list[str]]",
                    "List[int]",
                    "int",
                    "list[int]"
                ]
            }
        },
        "test_path_with_fees_receiver_pays": {
            "name": "test_path_with_fees_receiver_pays",
            "location": 822,
            "return": [
                "None"
            ],
            "arguments": {
                "community_with_trustlines_and_fees": [
                    "str",
                    "Optional[Dict]",
                    "dict[, ]",
                    "bool",
                    "List[List[str]]",
                    "None",
                    "list[list[str]]",
                    "List[int]",
                    "int",
                    "list[int]"
                ]
            }
        },
        "test_path_fee_symmetry_sanity": {
            "name": "test_path_fee_symmetry_sanity",
            "location": 832,
            "return": [
                "None"
            ],
            "arguments": {
                "complex_community_with_trustlines_and_fees": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_max_fees": {
            "name": "test_max_fees",
            "location": 847,
            "return": [
                "None"
            ],
            "arguments": {
                "community_with_trustlines_and_fees": [
                    "str",
                    "tests.basilisp.helpers.CompileFn",
                    "slice"
                ]
            }
        },
        "test_no_capacity_with_fees": {
            "name": "test_no_capacity_with_fees",
            "location": 856,
            "return": [
                "None"
            ],
            "arguments": {
                "community_with_trustlines_and_fees": [
                    "str",
                    "tests.basilisp.helpers.CompileFn",
                    "slice",
                    "cli_ui.tests.MessageRecorder"
                ]
            }
        },
        "test_send_back_with_fees": {
            "name": "test_send_back_with_fees",
            "location": 868,
            "return": [
                "None"
            ],
            "arguments": {
                "community_with_trustlines_and_fees": [
                    "str",
                    "tests.basilisp.helpers.CompileFn",
                    "slice"
                ]
            }
        },
        "test_send_more_with_fees": {
            "name": "test_send_more_with_fees",
            "location": 893,
            "return": [
                "None"
            ],
            "arguments": {
                "community_with_trustlines_and_fees": [
                    "str",
                    "tests.basilisp.helpers.CompileFn",
                    "slice"
                ]
            }
        },
        "test_close_trustline_zero_balance": {
            "name": "test_close_trustline_zero_balance",
            "location": 915,
            "return": [
                "None"
            ],
            "arguments": {
                "complex_community_with_trustlines_and_fees": []
            }
        },
        "test_close_trustline_positive_balance": {
            "name": "test_close_trustline_positive_balance",
            "location": 923,
            "return": [
                "None"
            ],
            "arguments": {
                "complex_community_with_trustlines_and_fees": [
                    "Dict[str, Sequence[Any]]",
                    "dict[str, typing.Sequence[typing.Any]]"
                ]
            }
        },
        "test_close_trustline_negative_balance": {
            "name": "test_close_trustline_negative_balance",
            "location": 934,
            "return": [
                "None"
            ],
            "arguments": {
                "complex_community_with_trustlines_and_fees": [
                    "Dict[str, Sequence[Any]]",
                    "dict[str, typing.Sequence[typing.Any]]"
                ]
            }
        },
        "test_close_trustline_with_cost_exact_amount": {
            "name": "test_close_trustline_with_cost_exact_amount",
            "location": 945,
            "return": [
                "None"
            ],
            "arguments": {
                "complex_community_with_trustlines_and_fees": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "Optional[str]",
                    "None",
                    "Iterable[Iterable[Any]]",
                    "typing.Iterable[typing.Iterable[typing.Any]]"
                ]
            }
        },
        "test_close_trustline_multi": {
            "name": "test_close_trustline_multi",
            "location": 963,
            "return": [
                "None"
            ],
            "arguments": {
                "complex_community_with_trustlines_and_fees": [
                    "Tuple[paradigm.models.Base, tests.utils.Kwargs]",
                    "tuple[typing.Union[paradigm.models.Base,tests.utils.Kwargs]]",
                    "Dict[str, Sequence[str]]",
                    "str",
                    "dict[str, typing.Sequence[str]]",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "test_update_to_closed_trustlines_remove_from_graph": {
            "name": "test_update_to_closed_trustlines_remove_from_graph",
            "location": 985,
            "return": [
                "None"
            ],
            "arguments": {
                "complex_community_with_trustlines_and_fees": [
                    "bool"
                ]
            }
        },
        "test_update_balance_to_closed_trustlines_remove_from_graph": {
            "name": "test_update_balance_to_closed_trustlines_remove_from_graph",
            "location": 997,
            "return": [
                "None"
            ],
            "arguments": {
                "complex_community_with_trustlines_and_fees": []
            }
        }
    },
    "relay-master/tests/unit/network_graph/test_graph_cost_accumulators.py": {
        "zero_edge_data": {
            "name": "zero_edge_data",
            "location": 14,
            "return": [
                "dict"
            ],
            "arguments": {}
        },
        "simplegraph": {
            "name": "simplegraph",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "cost_accumulator_class": {
            "name": "cost_accumulator_class",
            "location": 44,
            "return": [
                "int",
                "Optional[Type[BaseException]]",
                "str"
            ],
            "arguments": {
                "request": [
                    "str",
                    "Set[str]",
                    "set[str]",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "test_cost_accumulator_max_hops": {
            "name": "test_cost_accumulator_max_hops",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "cost_accumulator_class": [
                    "bool",
                    "list[str]",
                    "List[str]",
                    "typing.Type",
                    "Iterable[str]",
                    "Type[Any]"
                ],
                "simplegraph": [
                    "str",
                    "int",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "test_cost_accumulator_max_hops_exceeded": {
            "name": "test_cost_accumulator_max_hops_exceeded",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "cost_accumulator_class": [
                    "bool",
                    "list[str]",
                    "List[str]",
                    "typing.Type",
                    "Iterable[str]",
                    "Type[Any]"
                ],
                "simplegraph": [
                    "bytes",
                    "str",
                    "bool",
                    "BinaryIO",
                    "typing.BinaryIO"
                ]
            }
        },
        "test_max_fees": {
            "name": "test_max_fees",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "cost_accumulator_class": [
                    "bool",
                    "list[str]",
                    "List[str]",
                    "typing.Type",
                    "Iterable[str]",
                    "Type[Any]"
                ],
                "simplegraph": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]",
                    "List[Tuple[int, int]]",
                    "list[tuple[typing.Union[int,int]]]"
                ]
            }
        },
        "capgraph": {
            "name": "capgraph",
            "location": 94,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_capacity": {
            "name": "test_capacity",
            "location": 104,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cost_accumulator_class": [
                    "bool"
                ],
                "value": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "Optional[int]"
                ],
                "capgraph": [
                    "str",
                    "Optional[List[str]]",
                    "list[str]",
                    "Dict[str, Any]",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_capacity_exceeded": {
            "name": "test_capacity_exceeded",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "cost_accumulator_class": [
                    "bool",
                    "networkx.MultiDiGraph"
                ],
                "capgraph": [
                    "Optional[List[str]]",
                    "list[str]",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "build_graph": {
            "name": "build_graph",
            "location": 137,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "transfer_info": {
            "name": "transfer_info",
            "location": 201,
            "return": [
                "TransferInfo",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "Transfer": [
                    "bool"
                ]
            }
        },
        "test_transfer_ample_creditlines": {
            "name": "test_transfer_ample_creditlines",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "transfer_info": [
                    "TransferInfo"
                ]
            }
        },
        "test_transfer_minimal_creditlines": {
            "name": "test_transfer_minimal_creditlines",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "transfer_info": [
                    "TransferInfo"
                ]
            }
        },
        "test_transfer_creditlines_insufficient": {
            "name": "test_transfer_creditlines_insufficient",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "transfer_info": [
                    "TransferInfo"
                ]
            }
        },
        "test_find_path_creditlines_insufficient": {
            "name": "test_find_path_creditlines_insufficient",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "transfer_info": [
                    "TransferInfo"
                ]
            }
        },
        "TransferInfo.assert_expected_cost": {
            "name": "assert_expected_cost",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gr": [
                    "str",
                    "int",
                    "Tuple[str, str]",
                    "tuple[typing.Union[str,str]]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "TransferInfo.assert_find_path": {
            "name": "assert_find_path",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gr": [
                    "str"
                ]
            }
        },
        "TransferInfo.insufficient_creditlines": {
            "name": "insufficient_creditlines",
            "location": 190,
            "return": [
                "Generator[(list, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "relay-master/tests/unit/network_graph/test_interests.py": {
        "small_non_positive_delta_time": {
            "name": "small_non_positive_delta_time",
            "location": 25,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "Set[str]",
                    "str",
                    "set[str]"
                ]
            }
        },
        "basic_data": {
            "name": "basic_data",
            "location": 30,
            "return": [
                "dict[, int]",
                "Dict[str, List[int]]",
                "dict",
                "str",
                "Optional[float]",
                "bytes"
            ],
            "arguments": {}
        },
        "basic_account": {
            "name": "basic_account",
            "location": 44,
            "return": [
                "Account",
                "List[Dict[str, Any]]",
                "Dict[int, dict]",
                "str"
            ],
            "arguments": {
                "basic_data": [
                    "bool",
                    "bytes",
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Dict[str, Dict[str, float]]",
                    "dict[str, dict[str, float]]"
                ]
            }
        },
        "test_interests_calculation_zero_interest_rate": {
            "name": "test_interests_calculation_zero_interest_rate",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_interests_calculation_returns_integer": {
            "name": "test_interests_calculation_returns_integer",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_interests_calculation_low_interest_rate": {
            "name": "test_interests_calculation_low_interest_rate",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_interests_calculation_high_interest_rate": {
            "name": "test_interests_calculation_high_interest_rate",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_interests_calculation_gives_same_result_as_smart_contracts": {
            "name": "test_interests_calculation_gives_same_result_as_smart_contracts",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "tests_interests_calculation_no_time": {
            "name": "tests_interests_calculation_no_time",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_interests_calculation_negative_balance": {
            "name": "test_interests_calculation_negative_balance",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_interests_calculation_from_A_balance_positive_relevant_interests": {
            "name": "test_interests_calculation_from_A_balance_positive_relevant_interests",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "basic_account": [
                    "nucypher.blockchain.eth.registry.BaseContractRegistry"
                ]
            }
        },
        "test_interests_calculation_from_A_balance_negative_relevant_interests": {
            "name": "test_interests_calculation_from_A_balance_negative_relevant_interests",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "basic_account": [
                    "int",
                    "nucypher.blockchain.eth.registry.BaseContractRegistry",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_interests_calculation_from_A_balance_positive_irrelevant_interests": {
            "name": "test_interests_calculation_from_A_balance_positive_irrelevant_interests",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "basic_account": [
                    "int",
                    "nucypher.blockchain.eth.registry.BaseContractRegistry",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_interests_calculation_from_A_balance_negative_irrelevant_interests": {
            "name": "test_interests_calculation_from_A_balance_negative_irrelevant_interests",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "basic_account": [
                    "nucypher.blockchain.eth.registry.BaseContractRegistry"
                ]
            }
        },
        "test_interests_calculation_delta_time": {
            "name": "test_interests_calculation_delta_time",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "basic_account": []
            }
        },
        "test_interests_path_from_A_balance_positive_relevant_interests": {
            "name": "test_interests_path_from_A_balance_positive_relevant_interests",
            "location": 172,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "configurable_community": []
            }
        },
        "test_interests_path_from_A_balance_negative_relevant_interests": {
            "name": "test_interests_path_from_A_balance_negative_relevant_interests",
            "location": 196,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "configurable_community": []
            }
        },
        "test_interests_path_from_A_balance_positive_irrelevant_interests": {
            "name": "test_interests_path_from_A_balance_positive_irrelevant_interests",
            "location": 220,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "configurable_community": []
            }
        },
        "test_interests_path_from_A_balance_negative_irrelevant_interests": {
            "name": "test_interests_path_from_A_balance_negative_irrelevant_interests",
            "location": 244,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "configurable_community": []
            }
        },
        "test_interests_path_from_B_balance_positive_relevant_interests": {
            "name": "test_interests_path_from_B_balance_positive_relevant_interests",
            "location": 268,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "configurable_community": [
                    "str",
                    "list[str]",
                    "List[str]",
                    "tests.clienMDMClient"
                ]
            }
        },
        "test_interests_path_from_B_balance_negative_relevant_interests": {
            "name": "test_interests_path_from_B_balance_negative_relevant_interests",
            "location": 292,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "configurable_community": [
                    "str",
                    "list[str]",
                    "List[str]",
                    "tests.clienMDMClient"
                ]
            }
        },
        "test_interests_path_from_B_balance_positive_irrelevant_interests": {
            "name": "test_interests_path_from_B_balance_positive_irrelevant_interests",
            "location": 316,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "configurable_community": [
                    "str",
                    "list[str]",
                    "List[str]",
                    "tests.clienMDMClient"
                ]
            }
        },
        "test_interests_path_from_B_balance_negative_irrelevant_interests": {
            "name": "test_interests_path_from_B_balance_negative_irrelevant_interests",
            "location": 340,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "configurable_community": [
                    "str",
                    "list[str]",
                    "List[str]",
                    "tests.clienMDMClient"
                ]
            }
        },
        "test_calculate_interests_time_glitch": {
            "name": "test_calculate_interests_time_glitch",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {
                "small_non_positive_delta_time": [
                    "bool",
                    "str",
                    "typing.Callable[, ]",
                    "int",
                    "Callable"
                ]
            }
        }
    },
    "relay-master/tests/unit/network_graph/test_trustline_data.py": {
        "data": {
            "name": "data",
            "location": 22,
            "return": [
                "dict[, ]",
                "str",
                "int",
                "bytes",
                "set"
            ],
            "arguments": {}
        },
        "test_set_get": {
            "name": "test_set_get",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "bytes",
                    "dict[, ]",
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_balance": {
            "name": "test_balance",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "bool"
                ]
            }
        },
        "test_creditline": {
            "name": "test_creditline",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "Dict[str, str]",
                    "dict[str, str]",
                    "str",
                    "dict",
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "test_interests": {
            "name": "test_interests",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "str",
                    "dict[, ]",
                    "dict",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "list[]",
                    "list",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_mtime": {
            "name": "test_mtime",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "dict[, ]",
                    "dict",
                    "int",
                    "typing.Sequence[]",
                    "Sequence",
                    "bool"
                ]
            }
        }
    },
    "relay-master/tests/unit/network_graph/__init__.py": {},
    "relay-master/tests/unit/pushnotifications/test_client_token_db.py": {
        "client_token_db": {
            "name": "client_token_db",
            "location": 11,
            "return": [
                "ClientTokenDB",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "test_add_client_token": {
            "name": "test_add_client_token",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "client_token_db": [
                    "relay.pushservice.client_token_db.ClientTokenDB"
                ]
            }
        },
        "test_add_multiple_client_token": {
            "name": "test_add_multiple_client_token",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "client_token_db": [
                    "relay.pushservice.client_token_db.ClientTokenDB"
                ]
            }
        },
        "test_cannot_add_same_token_twice": {
            "name": "test_cannot_add_same_token_twice",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "client_token_db": [
                    "relay.pushservice.client_token_db.ClientTokenDB"
                ]
            }
        },
        "test_delete_token": {
            "name": "test_delete_token",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "client_token_db": [
                    "relay.pushservice.client_token_db.ClientTokenDB"
                ]
            }
        },
        "test_delete_non_existent_token": {
            "name": "test_delete_non_existent_token",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "client_token_db": [
                    "relay.pushservice.client_token_db.ClientTokenDB"
                ]
            }
        },
        "test_get_client_tokens": {
            "name": "test_get_client_tokens",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "client_token_db": [
                    "relay.pushservice.client_token_db.ClientTokenDB"
                ]
            }
        },
        "test_all_tokens": {
            "name": "test_all_tokens",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "client_token_db": [
                    "relay.pushservice.client_token_db.ClientTokenDB"
                ]
            }
        }
    },
    "relay-master/tests/unit/pushnotifications/test_pushservice.py": {
        "_instrument_messaging_service": {
            "name": "_instrument_messaging_service",
            "location": 54,
            "return": [
                "Tuple[(Any, List[nothing])]"
            ],
            "arguments": {
                "app": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Callable[[dict], None]",
                    "None",
                    "typing.Callable[dict[, ], None]",
                    "dict",
                    "dict[, ]"
                ],
                "status": [
                    "str",
                    "int"
                ],
                "payload": [
                    "str"
                ]
            }
        },
        "raw_push_service": {
            "name": "raw_push_service",
            "location": 64,
            "return": [
                "FirebaseRawPushService",
                "bytes",
                "str",
                "utils.diskstaSection",
                "bool",
                "rl_algorithms.utils.config.ConfigDict"
            ],
            "arguments": {}
        },
        "recorder": {
            "name": "recorder",
            "location": 69,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "raw_push_service": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "assert_body_has_correct_payload": {
            "name": "assert_body_has_correct_payload",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "recorder": [
                    "List[Dict[str, Any]]",
                    "str",
                    "list[dict[str, typing.Any]]",
                    "dict",
                    "dict[, ]",
                    "Dict[str, int]",
                    "dict[str, int]"
                ],
                "events": [
                    "tuple[int]",
                    "int",
                    "list[int]",
                    "str",
                    "Tuple[int]",
                    "list[]",
                    "List[int]",
                    "list"
                ]
            }
        },
        "test_send_on_blockchain_event": {
            "name": "test_send_on_blockchain_event",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "raw_push_service": [],
                "recorder": [],
                "web3_event_transfer": [],
                "web3_event_trustline_request": [],
                "web3_event_trustline_request_cancel": [],
                "web3_event_trustline_update": []
            }
        },
        "test_send_on_non_blockchain_event": {
            "name": "test_send_on_non_blockchain_event",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "raw_push_service": [
                    "int"
                ],
                "recorder": [
                    "str"
                ]
            }
        },
        "test_build_data_prop_trustline_update": {
            "name": "test_build_data_prop_trustline_update",
            "location": 139,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "web3_event_trustline_update": [
                    "List[str]",
                    "list[str]",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_build_data_prop_trustline_transfer": {
            "name": "test_build_data_prop_trustline_transfer",
            "location": 151,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "web3_event_transfer": [
                    "list[dict[, ]]",
                    "raiden.utils.Address",
                    "List[dict]"
                ]
            }
        },
        "test_build_data_prop_trustline_request_event": {
            "name": "test_build_data_prop_trustline_request_event",
            "location": 169,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "web3_event_trustline_request": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "test_build_data_prop_trustline_request_cancel_event": {
            "name": "test_build_data_prop_trustline_request_cancel_event",
            "location": 187,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "web3_event_trustline_request_cancel": [
                    "list[dict[, ]]",
                    "relay.events.Event",
                    "List[dict]"
                ]
            }
        },
        "test_build_data_prop_payment_request": {
            "name": "test_build_data_prop_payment_request",
            "location": 207,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_build_data_prop_payment_request_decline": {
            "name": "test_build_data_prop_payment_request_decline",
            "location": 217,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_build_firebase_data_message": {
            "name": "test_build_firebase_data_message",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "web3_event_trustline_request": [
                    "raiden.utils.Address"
                ]
            }
        }
    },
    "relay-master/tests/unit/pushnotifications/utils.py": {
        "MockResponse.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "int",
                    "List[int]",
                    "list[int]",
                    "dict",
                    "dict[, ]"
                ],
                "response": [
                    "int",
                    "List[int]",
                    "list[int]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "MockResponse.status": {
            "name": "status",
            "location": 29,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockResponse.headers": {
            "name": "headers",
            "location": 33,
            "return": [
                "dict[, ]",
                "Optional[str]",
                "str",
                "complex"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockResponse.data": {
            "name": "data",
            "location": 37,
            "return": [
                "dict",
                "Optional[str]",
                "List[dict]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockRequest.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "str",
                    "int",
                    "bytes",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]",
                    "dict",
                    "dict[, ]"
                ],
                "response": [
                    "str",
                    "int",
                    "bytes",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "MockRequest.__call__": {
            "name": "__call__",
            "location": 54,
            "return": [
                "MockResponse"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockFailedRequest.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error": [
                    "str",
                    "bool",
                    "float",
                    "typing.Callable[, ]",
                    "int",
                    "zerver.models.Realm",
                    "Callable"
                ]
            }
        },
        "MockFailedRequest.__call__": {
            "name": "__call__",
            "location": 66,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockGoogleCredential.refresh": {
            "name": "refresh",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool"
                ]
            }
        },
        "MockCredential.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockCredential.get_credential": {
            "name": "get_credential",
            "location": 84,
            "return": [
                "MockGoogleCredential"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockMultiRequestAdapter.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "responses": [
                    "Union[float, str]",
                    "Callable",
                    "bytes",
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ],
                "statuses": [
                    "bytes",
                    "Union[bytes, str, None]",
                    "zam_repondeur.models.Lecture",
                    "List[int]",
                    "List[Dict[str, Any]]",
                    "Optional[\"TrackingData\"]",
                    "Callable"
                ],
                "recorder": [
                    "int",
                    "str",
                    "tuple",
                    "tuple[]",
                    "bool",
                    "dict[str, typing.Any]",
                    "Optional[Dict[str, Any]]",
                    "None"
                ]
            }
        },
        "MockMultiRequestAdapter.send": {
            "name": "send",
            "location": 107,
            "return": [
                "models.Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "MockAdapter.__init__": {
            "name": "__init__",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "Optional[bytes]",
                    "Dict[str, AsyncGenerator]",
                    "None",
                    "dict[str, collections.abc.AsyncGenerator]"
                ],
                "status": [
                    "int",
                    "bytes",
                    "Optional[bytes]",
                    "Dict[str, AsyncGenerator]",
                    "None",
                    "dict[str, collections.abc.AsyncGenerator]"
                ],
                "recorder": [
                    "int",
                    "bytes",
                    "Optional[bytes]",
                    "Dict[str, AsyncGenerator]",
                    "None",
                    "dict[str, collections.abc.AsyncGenerator]"
                ]
            }
        },
        "MockAdapter.status": {
            "name": "status",
            "location": 127,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockAdapter.data": {
            "name": "data",
            "location": 131,
            "return": [
                "dict",
                "Optional[str]",
                "List[dict]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "relay-master/tests/unit/pushnotifications/__init__.py": {}
}
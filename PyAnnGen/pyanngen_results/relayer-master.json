{
    "relayer-master/setup.py": {
        "get_version": {
            "name": "get_version",
            "location": 6,
            "return": [
                "Optional[str]"
            ],
            "arguments": {}
        }
    },
    "relayer-master/relayer/event_emitter.py": {
        "EventEmitter.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "producer": [
                    "int",
                    "float",
                    "bool"
                ],
                "topic_prefix": [
                    "str"
                ],
                "topic_suffix": [
                    "str"
                ]
            }
        },
        "EventEmitter.emit": {
            "name": "emit",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "str"
                ],
                "message": [
                    "dict"
                ],
                "partition_key": [
                    "str",
                    "None",
                    "List[bytes]",
                    "bytes",
                    "dict",
                    "list[bytes]",
                    "Union[str, bytes]",
                    "dict[, ]"
                ]
            }
        },
        "EventEmitter.flush": {
            "name": "flush",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "relayer-master/relayer/exceptions.py": {
        "ConfigurationError.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnsupportedPartitionKeyTypeError.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "provided_type": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "relayer-master/relayer/logger.py": {
        "log_kafka_message": {
            "name": "log_kafka_message",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "topic": [
                    "str"
                ],
                "payload": [
                    "Union[(dict, str)]"
                ],
                "partition_key": [
                    "str"
                ]
            }
        }
    },
    "relayer-master/relayer/logging.py": {
        "log_deprecation_notice": {
            "name": "log_deprecation_notice",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [
                    "str"
                ]
            }
        }
    },
    "relayer-master/relayer/__init__.py": {
        "Relayer.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logging_topic": [
                    "str"
                ]
            }
        },
        "Relayer.emit": {
            "name": "emit",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event_type": [
                    "str"
                ],
                "event_subtype": [
                    "str"
                ],
                "payload": [
                    "Union[(dict, str)]"
                ],
                "partition_key": [
                    "str"
                ]
            }
        },
        "Relayer.emit_raw": {
            "name": "emit_raw",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "str"
                ],
                "message": [
                    "dict"
                ],
                "partition_key": [
                    "str"
                ]
            }
        },
        "Relayer.log": {
            "name": "log",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "log_level": [
                    "str"
                ],
                "payload": [
                    "Union[(dict, str)]"
                ]
            }
        },
        "Relayer.flush": {
            "name": "flush",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "relayer-master/relayer/flask/__init__.py": {
        "FlaskRelayer.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "flask.Flask"
                ],
                "logging_topic": [
                    "str"
                ],
                "kafka_hosts": [
                    "str"
                ]
            }
        },
        "FlaskRelayer.init_app": {
            "name": "init_app",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "flask.Flask",
                    "str",
                    "Optional[str]"
                ],
                "logging_topic": [
                    "str",
                    "Callable",
                    "int"
                ],
                "kafka_hosts": [
                    "str"
                ]
            }
        },
        "FlaskRelayer.emit": {
            "name": "emit",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlaskRelayer.emit_raw": {
            "name": "emit_raw",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlaskRelayer.log": {
            "name": "log",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlaskRelayer.flush": {
            "name": "flush",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "relayer-master/relayer/rpc/__init__.py": {
        "make_rpc_relayer": {
            "name": "make_rpc_relayer",
            "location": 9,
            "return": [
                "Callable"
            ],
            "arguments": {
                "logging_topic": [
                    "str"
                ],
                "kafka_hosts": [
                    "str"
                ]
            }
        },
        "make_rpc_relayer.decorator": {
            "name": "decorator",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "function": [
                    "Callable",
                    "bool",
                    "vimiv.utils.customtypes.FuncT",
                    "Callable[[T], Any]"
                ]
            }
        },
        "make_rpc_relayer.decorator.wrapper": {
            "name": "wrapper",
            "location": 22,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "raiden.utils.Dict[str, raiden.utils.Any]",
                "Dict[str, dict]",
                "str",
                "bool"
            ],
            "arguments": {}
        }
    },
    "relayer-master/relayer/test/mocked_producer.py": {
        "MockedProducer.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockedProducer.send": {
            "name": "send",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "str"
                ],
                "value": [
                    "str"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "MockedProducer.flush": {
            "name": "flush",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "relayer-master/relayer/test/relayer_patch.py": {
        "RelayerPatch.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RelayerPatch.start": {
            "name": "start",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RelayerPatch.stop": {
            "name": "stop",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "relayer-master/relayer/test/__init__.py": {},
    "relayer-master/relayer/utils/__init__.py": {
        "get_elapsed_time_in_milliseconds": {
            "name": "get_elapsed_time_in_milliseconds",
            "location": 4,
            "return": [
                "float"
            ],
            "arguments": {
                "start_time": [
                    "_datetime.datetime"
                ],
                "end_time": [
                    "_datetime.datetime"
                ]
            }
        }
    },
    "relayer-master/tests/test_event_emitter.py": {
        "TestEventEmitter.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEventEmitter.test_sending_message": {
            "name": "test_sending_message",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEventEmitter.test_throws_if_not_sending_json_serializable": {
            "name": "test_throws_if_not_sending_json_serializable",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEventEmitter.test_incorrect_partition_key": {
            "name": "test_incorrect_partition_key",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEventEmitter.test_string_partition_key": {
            "name": "test_string_partition_key",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEventEmitter.test_uuid_partition_key": {
            "name": "test_uuid_partition_key",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEventEmitter.test_flush": {
            "name": "test_flush",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEventEmitter.test_message_prefix": {
            "name": "test_message_prefix",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEventEmitter.test_message_suffix": {
            "name": "test_message_suffix",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "relayer-master/tests/test_flask_relayer.py": {
        "FlaskRelayerTestCase.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlaskRelayerTestCase.test_request_works_fine": {
            "name": "test_request_works_fine",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlaskRelayerTestCase.test_emitted_messages": {
            "name": "test_emitted_messages",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlaskRelayerTestCase.test_emitted_raw_messages": {
            "name": "test_emitted_raw_messages",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlaskRelayerTestCase.test_flush": {
            "name": "test_flush",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlaskRelayerTestCase.setUp.test_emit": {
            "name": "test_emit",
            "location": 22,
            "return": [
                "str",
                "float"
            ],
            "arguments": {}
        },
        "FlaskRelayerTestCase.setUp.test_emit_raw": {
            "name": "test_emit_raw",
            "location": 28,
            "return": [
                "str",
                "float"
            ],
            "arguments": {}
        },
        "FlaskRelayerTestCase.setUp.test_log_and_flush": {
            "name": "test_log_and_flush",
            "location": 33,
            "return": [
                "int",
                "str",
                "Tuple[float, float, float, float, float]",
                "float",
                "Callable"
            ],
            "arguments": {}
        }
    },
    "relayer-master/tests/test_relayer.py": {
        "TestRelayer.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRelayer.test_requires_kafka_hosts": {
            "name": "test_requires_kafka_hosts",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRelayer.test_emit": {
            "name": "test_emit",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRelayer.test_emit_with_partition_key": {
            "name": "test_emit_with_partition_key",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRelayer.test_source_not_present": {
            "name": "test_source_not_present",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRelayer.test_source": {
            "name": "test_source",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRelayer.test_emit_raw": {
            "name": "test_emit_raw",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRelayer.test_flush": {
            "name": "test_flush",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "relayer-master/tests/test_rpc_relayer.py": {
        "TestRPCRelayer.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPCRelayer.test_input_and_output_works": {
            "name": "test_input_and_output_works",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPCRelayer.test_input_and_output_with_payload_works": {
            "name": "test_input_and_output_with_payload_works",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPCRelayer.test_emitted_messages": {
            "name": "test_emitted_messages",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPCRelayer.test_decorator_expose_instance": {
            "name": "test_decorator_expose_instance",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPCRelayer.setUp.third_party_method": {
            "name": "third_party_method",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestRPCRelayer.setUp.rpc_method": {
            "name": "rpc_method",
            "location": 20,
            "return": [
                "str",
                "list",
                "float"
            ],
            "arguments": {
                "value": [
                    "bool",
                    "str",
                    "Optional[Any]",
                    "T",
                    "List[dict]",
                    "float"
                ],
                "relayer": [
                    "relayer.Relayer",
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "TestRPCRelayer.setUp.rpc_payload_method": {
            "name": "rpc_payload_method",
            "location": 26,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "list"
            ],
            "arguments": {
                "value": [
                    "bool",
                    "bytes",
                    "float",
                    "List[dict]",
                    "str",
                    "T",
                    "Callable"
                ],
                "relayer": [
                    "relayer.Relayer",
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "TestRPCRelayer.setUp.method_with_third_party": {
            "name": "method_with_third_party",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "relayer": [
                    "relayer.Relayer",
                    "None"
                ]
            }
        }
    },
    "relayer-master/tests/test_utils.py": {
        "TestUtils.test_elapsed_time_in_milliseconds": {
            "name": "test_elapsed_time_in_milliseconds",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "relayer-master/tests/__init__.py": {
        "BaseTestCase.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseTestCase.tearDown": {
            "name": "tearDown",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseTestCase._get_topic_messages": {
            "name": "_get_topic_messages",
            "location": 18,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "str"
                ]
            }
        }
    }
}
{
    "rem-master/data-streamer/remdata/changestream.py": {
        "send_changes.init_stream": {
            "name": "init_stream",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "rem-master/data-streamer/remdata/core.py": {
        "make_app": {
            "name": "make_app",
            "location": 25,
            "return": [
                "\"App\"",
                "Sanic"
            ],
            "arguments": {
                "mongo_uri": [
                    "bool",
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "es_hosts": [
                    "str"
                ],
                "db_name": [
                    "typing.Text",
                    "str",
                    "bool"
                ]
            }
        },
        "setup_routes": {
            "name": "setup_routes",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [],
                "mongo_db": [],
                "es_client": []
            }
        },
        "make_ws_handler": {
            "name": "make_ws_handler",
            "location": 57,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "handler": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "encoder": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "rem-master/data-streamer/remdata/dataaccess.py": {},
    "rem-master/data-streamer/remdata/json.py": {
        "maybe_convert_to_object_id": {
            "name": "maybe_convert_to_object_id",
            "location": 26,
            "return": [
                "bool",
                "Type",
                "ObjectId",
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "oid": [
                    "int",
                    "float"
                ]
            }
        },
        "BSONDocForJSON.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "raw_doc": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "BSONDocForJSON.__json__": {
            "name": "__json__",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONEncoder.encode": {
            "name": "encode",
            "location": 45,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "obj": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "T",
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "JSONEncoder.decode": {
            "name": "decode",
            "location": 53,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "bytes",
                    "Union[Dict, List]",
                    "list[]"
                ]
            }
        }
    },
    "rem-master/data-streamer/remdata/media.py": {},
    "rem-master/data-streamer/remdata/message.py": {
        "SocketMessage.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "float",
                    "bool"
                ],
                "socket": [
                    "int",
                    "float",
                    "bool"
                ],
                "encoder": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "SocketMessage.req_id": {
            "name": "req_id",
            "location": 26,
            "return": [
                "str",
                "Union[int, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SocketMessage.get": {
            "name": "get",
            "location": 48,
            "return": [
                "Optional[bool]",
                "Optional[Dict[str, Any]]",
                "Optional[str]",
                "str",
                "Iterable[Sequence[str]]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[int]",
                    "int",
                    "bool",
                    "None"
                ],
                "default": [
                    "str",
                    "None",
                    "Optional[int]",
                    "bool",
                    "int"
                ]
            }
        },
        "SocketMessage.logger": {
            "name": "logger",
            "location": 55,
            "return": [
                "FieldLogger",
                "Dict[str, Any]",
                "dict",
                "Dict[str, int]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rem-master/data-streamer/remdata/search.py": {},
    "rem-master/data-streamer/remdata/__init__.py": {},
    "rem-master/data-streamer/remdata/__main__.py": {},
    "rem-master/data-streamer/remdata/inttest/test_changestream.py": {},
    "rem-master/data-streamer/remdata/inttest/test_dataaccess.py": {},
    "rem-master/data-streamer/remdata/inttest/test_media.py": {},
    "rem-master/data-streamer/remdata/inttest/test_search.py": {},
    "rem-master/data-streamer/remdata/inttest/util.py": {},
    "rem-master/data-streamer/remdata/inttest/__init__.py": {},
    "rem-master/models/fieldnames.py": {
        "generate_json_schema": {
            "name": "generate_json_schema",
            "location": 14,
            "return": [
                "int",
                "bool",
                "Optional[float]",
                "Dict[str, str]",
                "dict",
                "str"
            ],
            "arguments": {}
        },
        "camel_case_to_snake_case": {
            "name": "camel_case_to_snake_case",
            "location": 31,
            "return": [
                "float",
                "int",
                "Union[bool, None]",
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "make_constants": {
            "name": "make_constants",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "schema": [
                    "Dict[str, object]",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, int]]",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "rem-master/parceldata/remparceldata/adapter.py": {
        "register": {
            "name": "register",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "float",
                    "Type",
                    "type"
                ]
            }
        },
        "county_shapefile_dir": {
            "name": "county_shapefile_dir",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "county": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "state": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "shapefile_path": {
            "name": "shapefile_path",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "county": [
                    "str",
                    "bool"
                ],
                "state": [
                    "str",
                    "bool"
                ],
                "shapefile_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_county_adapter": {
            "name": "get_county_adapter",
            "location": 33,
            "return": [
                "str",
                "dict[str, str]",
                "bool",
                "dict[, ]",
                "dict[str, list[str]]"
            ],
            "arguments": {
                "county": [
                    "str",
                    "int",
                    "bool",
                    "typing.Hashable",
                    "Optional[Hashable]",
                    "None"
                ],
                "state": [
                    "str",
                    "int",
                    "bool",
                    "typing.Hashable",
                    "Optional[Hashable]",
                    "None"
                ]
            }
        },
        "get_parcel_data_by_pin": {
            "name": "get_parcel_data_by_pin",
            "location": 42,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "county": [
                    "List[List[int]]",
                    "list[list[int]]",
                    "str",
                    "int",
                    "Optional[str]",
                    "None",
                    "Optional[Mapping[str, Any]]",
                    "typing.Mapping"
                ],
                "state": [
                    "List[List[int]]",
                    "list[list[int]]",
                    "str",
                    "int",
                    "Optional[str]",
                    "None",
                    "Optional[Mapping[str, Any]]",
                    "typing.Mapping"
                ],
                "pin_number": [
                    "str"
                ]
            }
        },
        "AdapterMeta.__new__": {
            "name": "__new__",
            "location": 19,
            "return": [
                "dict[, ]",
                "str",
                "int"
            ],
            "arguments": {
                "mcs": [
                    "str",
                    "bool",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]"
                ],
                "clsname": [
                    "str",
                    "bool",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]"
                ],
                "bases": [
                    "str",
                    "bool",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]"
                ],
                "attrs": [
                    "str",
                    "bool",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        }
    },
    "rem-master/parceldata/remparceldata/exceptions.py": {
        "ParcelDataError.__str__": {
            "name": "__str__",
            "location": 2,
            "return": [
                "typing.Text",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rem-master/parceldata/remparceldata/grpc.py": {
        "serve": {
            "name": "serve",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "GISService.GetParcelInfo": {
            "name": "GetParcelInfo",
            "location": 12,
            "return": [
                "dict",
                "Callable",
                "Optional[str]",
                "bool",
                "int",
                "Dict[str, Union[str, int]]"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": [
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        }
    },
    "rem-master/parceldata/remparceldata/shapefile.py": {
        "load_shapefile": {
            "name": "load_shapefile",
            "location": 12,
            "return": [
                "str",
                "TextIO",
                "None",
                "BinaryIO",
                "int"
            ],
            "arguments": {
                "path": []
            }
        },
        "get_features_by_field": {
            "name": "get_features_by_field",
            "location": 27,
            "return": [
                "list[]",
                "int",
                "str",
                "bytes"
            ],
            "arguments": {
                "data_source": [
                    "str",
                    "Optional[str]"
                ],
                "field_name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "field_value": [
                    "str",
                    "bytes",
                    "int",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "get_feature_fields_as_dict": {
            "name": "get_feature_fields_as_dict",
            "location": 47,
            "return": [
                "dict[, ]",
                "str",
                "List[str]",
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "feature": [
                    "str",
                    "int"
                ]
            }
        },
        "get_geometry_as_wgs84_wkt": {
            "name": "get_geometry_as_wgs84_wkt",
            "location": 64,
            "return": [
                "str",
                "bool",
                "Iterable[int]",
                "int"
            ],
            "arguments": {
                "feature": [
                    "List[str]",
                    "int",
                    "str",
                    "tuple"
                ]
            }
        }
    },
    "rem-master/parceldata/remparceldata/util.py": {
        "single_quote_if_string": {
            "name": "single_quote_if_string",
            "location": 7,
            "return": [
                "str",
                "float",
                "typing.Text",
                "list[str]",
                "int"
            ],
            "arguments": {
                "val": [
                    "List[str]",
                    "int",
                    "list[str]",
                    "str"
                ]
            }
        },
        "merge_wkts": {
            "name": "merge_wkts",
            "location": 17,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "wkts": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "rem-master/parceldata/remparceldata/__init__.py": {},
    "rem-master/parceldata/remparceldata/__main__.py": {},
    "rem-master/parceldata/remparceldata/adapters/bladen_nc.py": {
        "BladenNCAdapter.normalize_pin": {
            "name": "normalize_pin",
            "location": 15,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "pin": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "BladenNCAdapter.owner_name_from_parcel_fields": {
            "name": "owner_name_from_parcel_fields",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "fields": [
                    "str",
                    "list[str]",
                    "List[str]",
                    "Type[T]"
                ]
            }
        },
        "BladenNCAdapter.acreage_from_parcel_fields": {
            "name": "acreage_from_parcel_fields",
            "location": 23,
            "return": [
                "str",
                "int",
                "List[str]",
                "Iterable[str]",
                "Callable[[None], None]"
            ],
            "arguments": {
                "fields": [
                    "str",
                    "Dict[str, Any]",
                    "Iterable[str]",
                    "bool",
                    "int"
                ]
            }
        },
        "BladenNCAdapter.street_address_from_parcel_fields": {
            "name": "street_address_from_parcel_fields",
            "location": 27,
            "return": [
                "str",
                "List[str]",
                "Dict[str, Any]",
                "Callable[[None], None]"
            ],
            "arguments": {
                "fields": [
                    "list",
                    "list[]",
                    "List[str]",
                    "list[str]"
                ]
            }
        }
    },
    "rem-master/parceldata/remparceldata/adapters/cumberland_nc.py": {
        "CumberlandNCAdapter.normalize_pin": {
            "name": "normalize_pin",
            "location": 12,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "pin": [
                    "str",
                    "float"
                ]
            }
        },
        "CumberlandNCAdapter.owner_name_from_parcel_fields": {
            "name": "owner_name_from_parcel_fields",
            "location": 17,
            "return": [
                "str",
                "int",
                "Optional[Any]"
            ],
            "arguments": {
                "fields": [
                    "str",
                    "list[str]",
                    "List[str]",
                    "Type[T]"
                ]
            }
        },
        "CumberlandNCAdapter.acreage_from_parcel_fields": {
            "name": "acreage_from_parcel_fields",
            "location": 21,
            "return": [
                "str",
                "int",
                "List[str]",
                "Iterable[str]",
                "Callable[[None], None]"
            ],
            "arguments": {
                "fields": [
                    "str",
                    "Dict[str, Any]",
                    "Iterable[str]",
                    "bool",
                    "int"
                ]
            }
        },
        "CumberlandNCAdapter.street_address_from_parcel_fields": {
            "name": "street_address_from_parcel_fields",
            "location": 25,
            "return": [
                "typing.Text",
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "fields": [
                    "str",
                    "ValueError"
                ]
            }
        }
    },
    "rem-master/parceldata/remparceldata/adapters/pender_nc.py": {
        "PenderNCAdapter.normalize_pin": {
            "name": "normalize_pin",
            "location": 12,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "pin": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "PenderNCAdapter.owner_name_from_parcel_fields": {
            "name": "owner_name_from_parcel_fields",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "fields": [
                    "str",
                    "list[str]",
                    "List[str]",
                    "Type[T]"
                ]
            }
        },
        "PenderNCAdapter.acreage_from_parcel_fields": {
            "name": "acreage_from_parcel_fields",
            "location": 20,
            "return": [
                "str",
                "int",
                "List[str]",
                "Iterable[str]",
                "Callable[[None], None]"
            ],
            "arguments": {
                "fields": [
                    "str",
                    "Dict[str, Any]",
                    "Iterable[str]",
                    "bool",
                    "int"
                ]
            }
        },
        "PenderNCAdapter.street_address_from_parcel_fields": {
            "name": "street_address_from_parcel_fields",
            "location": 24,
            "return": [
                "str",
                "bool",
                "Union[int, float, complex]",
                "Sequence",
                "ClassVar"
            ],
            "arguments": {
                "fields": [
                    "list",
                    "list[]",
                    "List[str]",
                    "list[str]"
                ]
            }
        }
    },
    "rem-master/parceldata/remparceldata/adapters/robeson_nc.py": {
        "RobesonNCAdapter.normalize_pin": {
            "name": "normalize_pin",
            "location": 12,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "pin": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "RobesonNCAdapter.owner_name_from_parcel_fields": {
            "name": "owner_name_from_parcel_fields",
            "location": 16,
            "return": [
                "str",
                "Optional[str]",
                "List[str]",
                "int"
            ],
            "arguments": {
                "fields": [
                    "str",
                    "int"
                ]
            }
        },
        "RobesonNCAdapter.acreage_from_parcel_fields": {
            "name": "acreage_from_parcel_fields",
            "location": 20,
            "return": [
                "str",
                "int",
                "List[str]",
                "Iterable[str]",
                "Callable[[None], None]"
            ],
            "arguments": {
                "fields": [
                    "str",
                    "Dict[str, Any]",
                    "Iterable[str]",
                    "bool",
                    "int"
                ]
            }
        },
        "RobesonNCAdapter.street_address_from_parcel_fields": {
            "name": "street_address_from_parcel_fields",
            "location": 24,
            "return": [
                "str",
                "List[str]",
                "Dict[str, Any]",
                "Callable[[None], None]"
            ],
            "arguments": {
                "fields": [
                    "list",
                    "list[]",
                    "List[str]",
                    "list[str]"
                ]
            }
        }
    },
    "rem-master/parceldata/remparceldata/adapters/__init__.py": {},
    "rem-master/protobuf/python/setup.py": {},
    "rem-master/protobuf/python/remprotobuf/gis_pb2.py": {},
    "rem-master/protobuf/python/remprotobuf/gis_pb2_grpc.py": {
        "add_GISServicer_to_server": {
            "name": "add_GISServicer_to_server",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "servicer": [
                    "bool",
                    "str",
                    "Optional['models.LTI1p3Provider']",
                    "None"
                ],
                "server": [
                    "str",
                    "int"
                ]
            }
        },
        "GISStub.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "int"
                ]
            }
        },
        "GISServicer.GetParcelInfo": {
            "name": "GetParcelInfo",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "context": [
                    "List[int]"
                ]
            }
        }
    },
    "rem-master/protobuf/python/remprotobuf/__init__.py": {},
    "rem-master/pycommon/setup.py": {},
    "rem-master/pycommon/remcommon/fieldnames_gen.py": {},
    "rem-master/pycommon/remcommon/log.py": {
        "FieldLogger.process": {
            "name": "process",
            "location": 12,
            "return": [
                "tuple[str]",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "bool",
                    "dict"
                ],
                "kwargs": []
            }
        },
        "FieldLogger.copy": {
            "name": "copy",
            "location": 17,
            "return": [
                "FieldLogger",
                "str",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rem-master/pycommon/remcommon/models_gen.py": {
        "from_str": {
            "name": "from_str",
            "location": 37,
            "return": [
                "str",
                "list[str]",
                "FrozenSet[str]",
                "Callable[[Any], None]",
                "dict",
                "int"
            ],
            "arguments": {
                "x": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "from_none": {
            "name": "from_none",
            "location": 42,
            "return": [
                "str",
                "int",
                "None",
                "bool",
                "Tuple[float, float, float]",
                "typing.Sequence[typing.Any]",
                "Exception",
                "typing.Sequence[str]",
                "typing.Callable[, ]",
                "typing.Iterable[typing.Any]"
            ],
            "arguments": {
                "x": [
                    "Optional[T]",
                    "None",
                    "int",
                    "Optional[Sequence[Any]]",
                    "typing.Sequence[typing.Any]",
                    "str",
                    "Optional[Exception]",
                    "Exception",
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "Callable",
                    "typing.Callable[, ]",
                    "Optional[Iterable[Any]]",
                    "typing.Iterable[typing.Any]"
                ]
            }
        },
        "from_union": {
            "name": "from_union",
            "location": 47,
            "return": [
                "str",
                "int",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "fs": [
                    "str",
                    "bool",
                    "Iterable[Tuple[int, int]]"
                ],
                "x": [
                    "typing.Iterable[tuple[typing.Union[typing.Any,typing.Any]]]",
                    "Iterable[Tuple[Any, Any]]",
                    "List[Dict]"
                ]
            }
        },
        "from_datetime": {
            "name": "from_datetime",
            "location": 56,
            "return": [
                "list",
                "str"
            ],
            "arguments": {
                "x": [
                    "str",
                    "int"
                ]
            }
        },
        "from_list": {
            "name": "from_list",
            "location": 60,
            "return": [
                "list[]",
                "List[str]",
                "str"
            ],
            "arguments": {
                "f": [
                    "typing.Callable[typing.Any, T]",
                    "Callable[[Any], T]",
                    "list[]",
                    "int",
                    "list",
                    "list[int]",
                    "List[int]",
                    "Iterable[float]"
                ],
                "x": [
                    "int",
                    "Iterable"
                ]
            }
        },
        "to_class": {
            "name": "to_class",
            "location": 65,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Dict[str, str]",
                "\"ks.Series[bool]\""
            ],
            "arguments": {
                "c": [
                    "Type[T]",
                    "typing.Type",
                    "List[str]",
                    "bool",
                    "list[str]",
                    "str",
                    "Set[str]",
                    "set[str]"
                ],
                "x": [
                    "typing.Type",
                    "Type[T]",
                    "float",
                    "typing.Iterable[typing.Any]",
                    "bool",
                    "Iterable[Any]",
                    "Set[str]"
                ]
            }
        },
        "from_float": {
            "name": "from_float",
            "location": 70,
            "return": [
                "float",
                "int",
                "List[int]",
                "str"
            ],
            "arguments": {
                "x": [
                    "Optional[Iterable[T]]",
                    "typing.Iterable[T]",
                    "dict",
                    "None",
                    "Type[T]",
                    "typing.Type"
                ]
            }
        },
        "to_enum": {
            "name": "to_enum",
            "location": 75,
            "return": [
                "str",
                "int",
                "bool",
                "dict"
            ],
            "arguments": {
                "c": [
                    "int",
                    "str"
                ],
                "x": [
                    "float",
                    "str",
                    "Tuple[int, int, int]",
                    "tuple[typing.Union[int,int,int]]"
                ]
            }
        },
        "to_float": {
            "name": "to_float",
            "location": 80,
            "return": [
                "bool",
                "str",
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "int"
                ]
            }
        },
        "from_int": {
            "name": "from_int",
            "location": 85,
            "return": [
                "str",
                "dict[, ]",
                "Set[Optional[str]]",
                "int",
                "Tuple[float, float, float]",
                "float"
            ],
            "arguments": {
                "x": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "from_dict": {
            "name": "from_dict",
            "location": 90,
            "return": [
                "dict[tuple[typing.Union[str,typing.Any]], ]",
                "dict",
                "Dict[str, Any]",
                "Dict[str, str]",
                "Dict[str, int]"
            ],
            "arguments": {
                "f": [
                    "dict",
                    "dict[, ]",
                    "List[str]",
                    "list[str]",
                    "Callable",
                    "typing.Callable[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Dict[str, object]",
                    "dict[str, object]"
                ],
                "x": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "list",
                    "int",
                    "str",
                    "T"
                ]
            }
        },
        "from_bool": {
            "name": "from_bool",
            "location": 95,
            "return": [
                "int",
                "list[tuple[typing.Union[str,str]]]",
                "Set[Optional[str]]",
                "tuple[typing.Union[int,int]]",
                "List[str]",
                "str",
                "bytes"
            ],
            "arguments": {
                "x": [
                    "List[Tuple[str, str]]",
                    "list[tuple[typing.Union[str,str]]]",
                    "str",
                    "Tuple[int, int]",
                    "bytes",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "collection_name_from_dict": {
            "name": "collection_name_from_dict",
            "location": 798,
            "return": [
                "CollectionName",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "collection_name_to_dict": {
            "name": "collection_name_to_dict",
            "location": 802,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "x": [
                    "str",
                    "bool"
                ]
            }
        },
        "common_from_dict": {
            "name": "common_from_dict",
            "location": 806,
            "return": [
                "str",
                "Dict[str, Any]",
                "bool",
                "dict",
                "typing.Iterable[]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bool",
                    "Iterable",
                    "typing.Iterable[]"
                ]
            }
        },
        "common_to_dict": {
            "name": "common_to_dict",
            "location": 810,
            "return": [
                "typing.Callable[, ]",
                "str",
                "int",
                "Set[Optional[str]]"
            ],
            "arguments": {
                "x": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "insurance_policy_from_dict": {
            "name": "insurance_policy_from_dict",
            "location": 814,
            "return": [
                "int",
                "List[str]",
                "List[Dict[str, Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "insurance_policy_to_dict": {
            "name": "insurance_policy_to_dict",
            "location": 818,
            "return": [
                "str",
                "bool",
                "int",
                "Callable"
            ],
            "arguments": {
                "x": []
            }
        },
        "lease_from_dict": {
            "name": "lease_from_dict",
            "location": 822,
            "return": [
                "Optional[str]",
                "Dict[str, Any]",
                "str",
                "List[Dict[str, Any]]",
                "dict"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes",
                    "int",
                    "Union[str, Iterable[str]]",
                    "typing.Iterable[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "lease_to_dict": {
            "name": "lease_to_dict",
            "location": 826,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "x": []
            }
        },
        "media_from_dict": {
            "name": "media_from_dict",
            "location": 830,
            "return": [
                "Optional[str]",
                "Dict[str, Any]",
                "str",
                "List[Dict[str, Any]]",
                "dict"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes",
                    "int",
                    "Union[str, Iterable[str]]",
                    "typing.Iterable[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "media_to_dict": {
            "name": "media_to_dict",
            "location": 834,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "x": []
            }
        },
        "mongo_doc_from_dict": {
            "name": "mongo_doc_from_dict",
            "location": 838,
            "return": [
                "int",
                "List[str]",
                "List[Dict[str, Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "Sequence[bytes]",
                    "typing.Sequence[bytes]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "mongo_doc_to_dict": {
            "name": "mongo_doc_to_dict",
            "location": 842,
            "return": [
                "str",
                "bool",
                "int",
                "Callable"
            ],
            "arguments": {
                "x": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "typing.Mapping",
                    "Mapping[str, Any]",
                    "dict[, ]",
                    "dict",
                    "Mapping"
                ]
            }
        },
        "note_from_dict": {
            "name": "note_from_dict",
            "location": 846,
            "return": [
                "Optional[str]",
                "Dict[str, Any]",
                "str",
                "List[Dict[str, Any]]",
                "dict"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes",
                    "int",
                    "Union[str, Iterable[str]]",
                    "typing.Iterable[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "note_to_dict": {
            "name": "note_to_dict",
            "location": 850,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "x": [
                    "int",
                    "str",
                    "float",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "party_from_dict": {
            "name": "party_from_dict",
            "location": 854,
            "return": [
                "Optional[str]",
                "Dict[str, Any]",
                "str",
                "List[Dict[str, Any]]",
                "dict"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes",
                    "int",
                    "Union[str, Iterable[str]]",
                    "typing.Iterable[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "party_to_dict": {
            "name": "party_to_dict",
            "location": 858,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "x": []
            }
        },
        "property_from_dict": {
            "name": "property_from_dict",
            "location": 862,
            "return": [
                "Optional[Iterable[str]]",
                "Mapping",
                "Optional[List[str]]"
            ],
            "arguments": {
                "s": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "dict",
                    "None",
                    "Optional[Dict[str, Any]]",
                    "typing.Literal",
                    "Literal",
                    "Optional[Dict]"
                ]
            }
        },
        "property_to_dict": {
            "name": "property_to_dict",
            "location": 866,
            "return": [
                "Dict[str, Any]",
                "bytes",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "x": [
                    "bytes",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "user_from_dict": {
            "name": "user_from_dict",
            "location": 870,
            "return": [],
            "arguments": {
                "s": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "user_to_dict": {
            "name": "user_to_dict",
            "location": 874,
            "return": [
                "Dict[str, Any]",
                "str",
                "Optional[\"permissions_doc\"]",
                "Callable[[KT, VT], bool]",
                "dict"
            ],
            "arguments": {
                "x": [
                    "int",
                    "complex",
                    "Sequence[Any]",
                    "typing.Sequence[typing.Any]"
                ]
            }
        },
        "OID.from_dict": {
            "name": "from_dict",
            "location": 121,
            "return": [
                "ObjectId",
                "str",
                "int"
            ],
            "arguments": {
                "obj": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "OID.to_dict": {
            "name": "to_dict",
            "location": 126,
            "return": [
                "dict[typing.Text, ]",
                "Dict[str, Any]",
                "dict",
                "Tuple[int, Dict[str, Any]]",
                "list",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InsurancePolicy.from_dict": {
            "name": "from_dict",
            "location": 152,
            "return": [
                "InsurancePolicy",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "obj": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "dict",
                    "dict[str, float]",
                    "Mapping[str, Any]",
                    "Dict[str, float]"
                ]
            }
        },
        "InsurancePolicy.to_dict": {
            "name": "to_dict",
            "location": 166,
            "return": [
                "dict[typing.Text, ]",
                "Dict[str, Any]",
                "dict",
                "Tuple[int, Dict[str, Any]]",
                "list",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Note.from_dict": {
            "name": "from_dict",
            "location": 208,
            "return": [
                "Note",
                "Dict[str, Any]",
                "List[Dict[str, Any]]",
                "Iterable['Event']",
                "int",
                "\"PRecord\""
            ],
            "arguments": {
                "obj": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "dict",
                    "dict[str, float]",
                    "Mapping[str, Any]",
                    "Dict[str, float]"
                ]
            }
        },
        "Note.to_dict": {
            "name": "to_dict",
            "location": 221,
            "return": [
                "dict[typing.Text, ]",
                "Dict[str, Any]",
                "dict",
                "Tuple[int, Dict[str, Any]]",
                "list",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lease.from_dict": {
            "name": "from_dict",
            "location": 265,
            "return": [
                "Lease",
                "Dict[str, Any]",
                "List[Dict[str, Any]]",
                "Iterable['Event']",
                "int",
                "\"PRecord\""
            ],
            "arguments": {
                "obj": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "dict",
                    "dict[str, float]",
                    "Mapping[str, Any]",
                    "Dict[str, float]"
                ]
            }
        },
        "Lease.to_dict": {
            "name": "to_dict",
            "location": 283,
            "return": [
                "dict[typing.Text, ]",
                "Dict[str, Any]",
                "dict",
                "Tuple[int, Dict[str, Any]]",
                "list",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Metadata.from_dict": {
            "name": "from_dict",
            "location": 308,
            "return": [
                "Metadata",
                "str",
                "int",
                "Set[T]"
            ],
            "arguments": {
                "obj": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "Metadata.to_dict": {
            "name": "to_dict",
            "location": 314,
            "return": [
                "dict[typing.Text, ]",
                "Dict[str, Any]",
                "dict",
                "Tuple[int, Dict[str, Any]]",
                "list",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Media.from_dict": {
            "name": "from_dict",
            "location": 344,
            "return": [
                "Media",
                "Dict[str, Any]",
                "List[Dict[str, Any]]",
                "Iterable['Event']",
                "int",
                "\"PRecord\""
            ],
            "arguments": {
                "obj": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "dict",
                    "dict[str, float]",
                    "Mapping[str, Any]",
                    "Dict[str, float]"
                ]
            }
        },
        "Media.to_dict": {
            "name": "to_dict",
            "location": 361,
            "return": [
                "dict[typing.Text, ]",
                "Dict[str, Any]",
                "dict",
                "Tuple[int, Dict[str, Any]]",
                "list",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoDoc.from_dict": {
            "name": "from_dict",
            "location": 394,
            "return": [
                "MongoDoc",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "obj": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "dict",
                    "dict[str, float]",
                    "Mapping[str, Any]",
                    "Dict[str, float]"
                ]
            }
        },
        "MongoDoc.to_dict": {
            "name": "to_dict",
            "location": 404,
            "return": [
                "dict[typing.Text, ]",
                "Dict[str, Any]",
                "dict",
                "Tuple[int, Dict[str, Any]]",
                "list",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Party.from_dict": {
            "name": "from_dict",
            "location": 447,
            "return": [
                "Party",
                "Dict[str, Any]",
                "List[Dict[str, Any]]",
                "Iterable['Event']",
                "int",
                "\"PRecord\""
            ],
            "arguments": {
                "obj": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "dict",
                    "dict[str, float]",
                    "Mapping[str, Any]",
                    "Dict[str, float]"
                ]
            }
        },
        "Party.to_dict": {
            "name": "to_dict",
            "location": 466,
            "return": [
                "dict[typing.Text, ]",
                "Dict[str, Any]",
                "dict",
                "Tuple[int, Dict[str, Any]]",
                "list",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Owner.from_dict": {
            "name": "from_dict",
            "location": 492,
            "return": [
                "Owner",
                "str",
                "int"
            ],
            "arguments": {
                "obj": [
                    "Optional[Any]",
                    "typing.Any",
                    "bytes",
                    "datetime.date.time",
                    "None",
                    "List[Dict]",
                    "list[dict[, ]]"
                ]
            }
        },
        "Owner.to_dict": {
            "name": "to_dict",
            "location": 498,
            "return": [
                "dict[typing.Text, ]",
                "Dict[str, Any]",
                "dict",
                "Tuple[int, Dict[str, Any]]",
                "list",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineItem.from_dict": {
            "name": "from_dict",
            "location": 518,
            "return": [
                "LineItem",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "obj": [
                    "dict[, ]",
                    "dict",
                    "dict[str, set[str]]",
                    "Dict[str, Set[str]]",
                    "dict[str, float]",
                    "Dict[str, float]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "LineItem.to_dict": {
            "name": "to_dict",
            "location": 524,
            "return": [
                "dict[typing.Text, ]",
                "Dict[str, Any]",
                "dict",
                "Tuple[int, Dict[str, Any]]",
                "list",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Payment.from_dict": {
            "name": "from_dict",
            "location": 537,
            "return": [
                "Payment",
                "bool",
                "int",
                "str",
                "Callable",
                "Optional[datetime.datetime]"
            ],
            "arguments": {
                "obj": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, float]",
                    "dict[str, float]"
                ]
            }
        },
        "Payment.to_dict": {
            "name": "to_dict",
            "location": 543,
            "return": [
                "dict[typing.Text, ]",
                "Dict[str, Any]",
                "dict",
                "Tuple[int, Dict[str, Any]]",
                "list",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaxBill.from_dict": {
            "name": "from_dict",
            "location": 561,
            "return": [
                "TaxBill",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "obj": [
                    "dict[typing.Type, typing.Callable[, ]]",
                    "Dict[type, Callable]",
                    "dict[, ]",
                    "dict[str, object]",
                    "List['PydanticModelField']",
                    "dict",
                    "Dict[str, object]",
                    "Dict[str, Any]"
                ]
            }
        },
        "TaxBill.to_dict": {
            "name": "to_dict",
            "location": 572,
            "return": [
                "dict[typing.Text, ]",
                "Dict[str, Any]",
                "dict",
                "Tuple[int, Dict[str, Any]]",
                "list",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaxPropInfo.from_dict": {
            "name": "from_dict",
            "location": 601,
            "return": [
                "TaxPropInfo",
                "Tuple[int, int]",
                "int",
                "List[str]",
                "Optional[Tuple[int, int]]",
                "bool",
                "Optional[datetime.date]",
                "str"
            ],
            "arguments": {
                "obj": [
                    "dict[str, set[str]]",
                    "Dict[str, Set[str]]",
                    "dict[str, float]",
                    "dict[, ]",
                    "bool",
                    "Dict[str, float]",
                    "dict",
                    "Mapping[str, Any]"
                ]
            }
        },
        "TaxPropInfo.to_dict": {
            "name": "to_dict",
            "location": 618,
            "return": [
                "dict[typing.Text, ]",
                "Dict[str, Any]",
                "dict",
                "Tuple[int, Dict[str, Any]]",
                "list",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Property.from_dict": {
            "name": "from_dict",
            "location": 675,
            "return": [
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "obj": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "dict",
                    "dict[str, float]",
                    "Mapping[str, Any]",
                    "Dict[str, float]"
                ]
            }
        },
        "Property.to_dict": {
            "name": "to_dict",
            "location": 707,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Tuple[int, Dict[str, Any]]",
                "list",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.from_dict": {
            "name": "from_dict",
            "location": 763,
            "return": [
                "User",
                "Dict[str, Any]",
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "obj": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "dict",
                    "dict[str, float]",
                    "Mapping[str, Any]",
                    "Dict[str, float]"
                ]
            }
        },
        "User.to_dict": {
            "name": "to_dict",
            "location": 780,
            "return": [
                "dict[typing.Text, ]",
                "Dict[str, Any]",
                "dict",
                "Tuple[int, Dict[str, Any]]",
                "list",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rem-master/pycommon/remcommon/watch.py": {
        "claim_coll": {
            "name": "claim_coll",
            "location": 46,
            "return": [
                "asyncio.Transport",
                "str",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {
                "db": [
                    "str",
                    "tuple[typing.Union[float,float]]",
                    "pymongo.database.Database",
                    "Tuple[float, float]"
                ]
            }
        }
    },
    "rem-master/pycommon/remcommon/__init__.py": {},
    "rem-master/pycommon/remcommon/inttest/test_watch.py": {
        "test_multiple_instances_coordinate.has_length": {
            "name": "has_length",
            "location": 134,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "le": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "rem-master/pycommon/remcommon/inttest/__init__.py": {},
    "rem-master/pycommon/remtesting/containers.py": {
        "docker_client": {
            "name": "docker_client",
            "location": 18,
            "return": [
                "str",
                "dict",
                "type"
            ],
            "arguments": {}
        },
        "tcp_socket_open": {
            "name": "tcp_socket_open",
            "location": 31,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "host": [
                    "str",
                    "int",
                    "asyncio.AbstractEventLoop"
                ],
                "port": [
                    "str",
                    "int",
                    "asyncio.AbstractEventLoop"
                ]
            }
        },
        "container_ip": {
            "name": "container_ip",
            "location": 40,
            "return": [
                "denite.util.UserContext"
            ],
            "arguments": {
                "container": [
                    "int",
                    "Container"
                ]
            }
        }
    },
    "rem-master/pycommon/remtesting/es.py": {},
    "rem-master/pycommon/remtesting/mongo.py": {},
    "rem-master/pycommon/remtesting/util.py": {
        "asyncify": {
            "name": "asyncify",
            "location": 5,
            "return": [
                "str",
                "Optional[Callable[[str], bool]]",
                "dict",
                "bool"
            ],
            "arguments": {}
        }
    },
    "rem-master/pycommon/remtesting/wait.py": {
        "wait_for": {
            "name": "wait_for",
            "location": 11,
            "return": [
                "bool",
                "typing.Pattern",
                "int",
                "str"
            ],
            "arguments": {
                "test_func": [
                    "int",
                    "List[List[float]]",
                    "str",
                    "list[list[float]]",
                    "Optional[float]",
                    "float",
                    "None"
                ],
                "timeout_seconds": [
                    "int",
                    "float",
                    "Optional[int]"
                ]
            }
        }
    },
    "rem-master/pycommon/remtesting/__init__.py": {},
    "rem-master/search/remsearch/es.py": {},
    "rem-master/search/remsearch/text.py": {},
    "rem-master/search/remsearch/tikaclient.py": {
        "TikaClient.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "List[str]",
                    "bool",
                    "list[str]",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ],
                "host": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]"
                ],
                "port": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]"
                ]
            }
        }
    },
    "rem-master/search/remsearch/watch.py": {
        "is_gridfs_collection": {
            "name": "is_gridfs_collection",
            "location": 100,
            "return": [
                "bool",
                "str",
                "Callable"
            ],
            "arguments": {
                "collection": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "rem-master/search/remsearch/__init__.py": {},
    "rem-master/search/remsearch/__main__.py": {},
    "rem-master/search/remsearch/inttest/test_files.py": {},
    "rem-master/search/remsearch/inttest/test_indexer.py": {},
    "rem-master/search/remsearch/inttest/util.py": {},
    "rem-master/search/remsearch/inttest/__init__.py": {},
    "rem-master/tax-info/remtaxinfo/constants.py": {},
    "rem-master/tax-info/remtaxinfo/fetch.py": {
        "Updater.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mongo_db": [
                    "Set[str]",
                    "accounts.models.Account"
                ],
                "http_session": [
                    "deeplearning.ml4pl.models.log_database.Database"
                ]
            }
        }
    },
    "rem-master/tax-info/remtaxinfo/watch.py": {},
    "rem-master/tax-info/remtaxinfo/__init__.py": {},
    "rem-master/tax-info/remtaxinfo/__main__.py": {},
    "rem-master/tax-info/remtaxinfo/adapters/cumberland_nc.py": {},
    "rem-master/tax-info/remtaxinfo/adapters/__init__.py": {},
    "rem-master/tax-info/remtaxinfo/adapters/tests/fixtures.py": {
        "load_fixture": {
            "name": "load_fixture",
            "location": 4,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "file_name": [
                    "str"
                ]
            }
        }
    },
    "rem-master/tax-info/remtaxinfo/adapters/tests/test_cumberland_nc.py": {},
    "rem-master/tax-info/remtaxinfo/adapters/tests/__init__.py": {},
    "rem-master/tax-info/remtaxinfo/util/adapter.py": {
        "adapter": {
            "name": "adapter",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "county": [
                    "dict",
                    "dict[, ]"
                ],
                "state": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "get": {
            "name": "get",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "county": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "List[str]",
                    "list[str]"
                ],
                "state": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "adapter.decorator": {
            "name": "decorator",
            "location": 28,
            "return": [
                "Dict[str, Any]",
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "models.Subtask",
                    "float",
                    "type"
                ]
            }
        }
    },
    "rem-master/tax-info/remtaxinfo/util/conversion.py": {
        "parse_currency_to_cents": {
            "name": "parse_currency_to_cents",
            "location": 7,
            "return": [
                "None",
                "Optional[int]",
                "int",
                "Optional[float]",
                "type"
            ],
            "arguments": {
                "amount": [
                    "int",
                    "Optional[int]",
                    "str",
                    "float",
                    "Union[int, None]",
                    "Union[None, str, int, float]"
                ]
            }
        }
    },
    "rem-master/tax-info/remtaxinfo/util/models.py": {},
    "rem-master/tax-info/remtaxinfo/util/tables.py": {
        "parse_simple_vertical_table": {
            "name": "parse_simple_vertical_table",
            "location": 8,
            "return": [
                "dict[, ]",
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "table": [
                    "Callable[[T], bool]",
                    "float",
                    "\"Counter\"",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        },
        "parse_simple_horizontal_table": {
            "name": "parse_simple_horizontal_table",
            "location": 19,
            "return": [
                "str",
                "dict[, ]"
            ],
            "arguments": {
                "table": [
                    "str",
                    "bool"
                ],
                "skip_columns": [
                    "int",
                    "str",
                    "bool"
                ],
                "skip_rows": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "parse_horizontal_table": {
            "name": "parse_horizontal_table",
            "location": 28,
            "return": [
                "int",
                "list[]",
                "Optional[bytes]",
                "list[dict[, ]]"
            ],
            "arguments": {
                "table": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "skip_columns": [
                    "int",
                    "str",
                    "dict",
                    "Optional[str]",
                    "Optional[Dict]"
                ],
                "skip_rows": [
                    "int",
                    "str",
                    "dict",
                    "Optional[str]",
                    "Optional[Dict]"
                ]
            }
        },
        "parse_2d_table": {
            "name": "parse_2d_table",
            "location": 45,
            "return": [
                "str",
                "int",
                "Tuple[int, int]"
            ],
            "arguments": {
                "table": [
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ],
                "skip_columns": [
                    "int",
                    "bool",
                    "Optional[str]",
                    "str"
                ],
                "skip_rows": [
                    "int",
                    "bool",
                    "Optional[str]",
                    "str"
                ],
                "transpose": [
                    "bool",
                    "int",
                    "str",
                    "Dict[str, int]",
                    "Any"
                ]
            }
        },
        "transpose_nested_dicts": {
            "name": "transpose_nested_dicts",
            "location": 74,
            "return": [
                "dict[, dict[tuple[typing.Union[str,typing.Any]], ]]",
                "Set[str]",
                "Type",
                "Dict[str, Any]",
                "str",
                "Union[type, Tuple[type, ...]]"
            ],
            "arguments": {
                "di": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "rem-master/tax-info/remtaxinfo/util/__init__.py": {},
    "rem-master/tax-info/remtaxinfo/util/tests/test_tables.py": {
        "test_parse_2d_table": {
            "name": "test_parse_2d_table",
            "location": 99,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "html": [
                    "Callable",
                    "typing.Callable[, ]",
                    "Optional[Callable]",
                    "None",
                    "Iterable[Iterable[Any]]",
                    "typing.Iterable[typing.Iterable[typing.Any]]"
                ],
                "transpose": [
                    "Callable",
                    "typing.Callable[, ]",
                    "Optional[Callable]",
                    "None",
                    "Iterable[Iterable[Any]]",
                    "typing.Iterable[typing.Iterable[typing.Any]]"
                ],
                "expected": [
                    "Callable",
                    "typing.Callable[, ]",
                    "Optional[Callable]",
                    "None",
                    "Iterable[Iterable[Any]]",
                    "typing.Iterable[typing.Iterable[typing.Any]]"
                ]
            }
        },
        "test_transpose_nested_dicts": {
            "name": "test_transpose_nested_dicts",
            "location": 103,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "rem-master/tax-info/remtaxinfo/util/tests/__init__.py": {},
    "rem-master/thumbnailer/remthumbnailer/server.py": {
        "make_app": {
            "name": "make_app",
            "location": 18,
            "return": [
                "\"App\"",
                "Sanic"
            ],
            "arguments": {
                "mongo_uri": [
                    "str",
                    "bool"
                ],
                "db_name": [
                    "typing.Text",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "rem-master/thumbnailer/remthumbnailer/__init__.py": {},
    "rem-master/thumbnailer/remthumbnailer/__main__.py": {}
}
{
    "reobject-master/setup.py": {},
    "reobject-master/examples/facade.py": {
        "A.run": {
            "name": "run",
            "location": 11,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "B.run": {
            "name": "run",
            "location": 17,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Facade.__new__": {
            "name": "__new__",
            "location": 23,
            "return": [
                "bool",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "Optional[str]",
                    "str",
                    "float",
                    "Callable[...,None]",
                    "None",
                    "Callable"
                ]
            }
        },
        "Facade.run_all": {
            "name": "run_all",
            "location": 29,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFacade.setUp": {
            "name": "setUp",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFacade.test_facade": {
            "name": "test_facade",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "reobject-master/examples/flux.py": {
        "increment": {
            "name": "increment",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Dispatcher.register": {
            "name": "register",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Callable",
                    "Channel"
                ],
                "store": [
                    "Callable",
                    "Channel"
                ]
            }
        },
        "Dispatcher.unregister": {
            "name": "unregister",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str,object]",
                    "bool",
                    "float",
                    "Union[None,str]",
                    "None"
                ],
                "store": [
                    "str",
                    "Dict[str,object]",
                    "bool",
                    "float",
                    "Union[None,str]",
                    "None"
                ]
            }
        },
        "Dispatcher.dispatch": {
            "name": "dispatch",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "float",
                    "models.Subtask"
                ],
                "action": [
                    "Union[int,str]",
                    "str",
                    "int",
                    "Iterator[T]",
                    "Iterator"
                ]
            }
        },
        "Store.get_state": {
            "name": "get_state",
            "location": 30,
            "return": [
                "Dict[str, str]",
                "int",
                "dict",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "List[int]",
                    "Type[DataclassT]",
                    "Type"
                ]
            }
        },
        "Store.emit_change_event": {
            "name": "emit_change_event",
            "location": 34,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [
                    "Callable",
                    "Dict"
                ]
            }
        },
        "Store.reduce": {
            "name": "reduce",
            "location": 38,
            "return": [
                "str",
                "Callable",
                "List[str]",
                "Dict",
                "ajapaik.ajapaik.models.Album",
                "int"
            ],
            "arguments": {
                "state": [
                    "str"
                ],
                "action": [
                    "str"
                ]
            }
        },
        "Store.get_update_hook": {
            "name": "get_update_hook",
            "location": 42,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "List[str]",
                    "Iterable[str]"
                ]
            }
        },
        "Counter.reduce": {
            "name": "reduce",
            "location": 57,
            "return": [
                "bool",
                "Callable",
                "str",
                "salon.models.ServiceCategory",
                "models.Name"
            ],
            "arguments": {
                "state": [
                    "str"
                ],
                "action": [
                    "str"
                ]
            }
        },
        "Counter.emit_change_event": {
            "name": "emit_change_event",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Callable",
                    "Dict"
                ]
            }
        },
        "View.__call__": {
            "name": "__call__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFlux.setUpClass": {
            "name": "setUpClass",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Type[Any]",
                    "List[str]",
                    "Type",
                    "str",
                    "bool",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        },
        "TestFlux.test_flux_increment": {
            "name": "test_flux_increment",
            "location": 88,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Store.get_update_hook.f": {
            "name": "f",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "action": [
                    "bool",
                    "Union[server.models.Bike, int]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "reobject-master/examples/flyweight.py": {
        "TestCard.test_flyweight": {
            "name": "test_flyweight",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "reobject-master/examples/prototype.py": {
        "Prototype.clone": {
            "name": "clone",
            "location": 12,
            "return": [
                "Prototype"
            ],
            "arguments": {
                "self": [
                    "_TPrototype@@Prototype@@"
                ]
            }
        },
        "TestPrototype.setUp": {
            "name": "setUp",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPrototype.test_dispatcher": {
            "name": "test_dispatcher",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "reobject-master/examples/singleton.py": {
        "Singleton.__new__": {
            "name": "__new__",
            "location": 11,
            "return": [
                "bool",
                "int",
                "Optional[Any]"
            ],
            "arguments": {
                "cls": [
                    "List[Dict]",
                    "List[dict]"
                ]
            }
        },
        "TestSingleton.setUp": {
            "name": "setUp",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSingleton.test_count": {
            "name": "test_count",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSingleton.test_instance": {
            "name": "test_instance",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "reobject-master/reobject/transaction.py": {
        "_memento": {
            "name": "_memento",
            "location": 42,
            "return": [
                "Callable[([], Any)]"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Transaction.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Transaction.__enter__": {
            "name": "__enter__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transaction.__exit__": {
            "name": "__exit__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "transactional.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "bool",
                    "List[str]",
                    "Sequence[str]",
                    "int",
                    "str",
                    "float",
                    "Optional[float]",
                    "None"
                ]
            }
        },
        "transactional.__get__": {
            "name": "__get__",
            "location": 30,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Optional[type]",
                    "Type",
                    "int",
                    "List[Tuple[str,str,str,str]]",
                    "None",
                    "List[tuple[Union[str,str,str,str]]]",
                    "bool"
                ],
                "T": [
                    "Optional[type]",
                    "Type",
                    "int",
                    "List[Tuple[str,str,str,str]]",
                    "None",
                    "List[tuple[Union[str,str,str,str]]]",
                    "bool"
                ]
            }
        },
        "_memento.f": {
            "name": "f",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "transactional.__get__.transaction": {
            "name": "transaction",
            "location": 31,
            "return": [
                "bool",
                "T",
                "Callable[[KT], VT]",
                "bytes"
            ],
            "arguments": {}
        }
    },
    "reobject-master/reobject/types.py": {},
    "reobject-master/reobject/utils.py": {
        "flatmap": {
            "name": "flatmap",
            "location": 4,
            "return": [
                "itertools.chain"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "bool"
                ],
                "iterable": [
                    "Callable",
                    "bool"
                ]
            }
        },
        "cmp": {
            "name": "cmp",
            "location": 8,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {}
        },
        "resolve_attr": {
            "name": "resolve_attr",
            "location": 20,
            "return": [
                "str",
                "bool",
                "float"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "Dict[str, Any]",
                    "MutableMapping[str, Any]",
                    "dict",
                    "Optional[str]"
                ],
                "attr": [
                    "str",
                    "Dict[str,str]"
                ]
            }
        },
        "cmp.g": {
            "name": "g",
            "location": 12,
            "return": [
                "Tuple",
                "str",
                "bool",
                "int",
                "List[Tuple[str,str]]"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "Mapping[str, Any]",
                    "List[Dict]",
                    "dict"
                ]
            }
        }
    },
    "reobject-master/reobject/__init__.py": {},
    "reobject-master/reobject/exceptions/__init__.py": {},
    "reobject-master/reobject/models/fields.py": {
        "Field": {
            "name": "Field",
            "location": 4,
            "return": [
                "Annotated[(Any, 'pytype_metadata', {'tag': 'attr.ib', 'init': True, 'kw_only': False, 'type_source': 'DEFAULT', 'default': True})]"
            ],
            "arguments": {}
        },
        "ForeignKey": {
            "name": "ForeignKey",
            "location": 11,
            "return": [
                "Annotated[(Any, 'pytype_metadata', {'tag': 'attr.ib', 'init': True, 'kw_only': False, 'type_source': None, 'default': False})]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "List[int]",
                    "Type[DataclassT]",
                    "Type"
                ]
            }
        }
    },
    "reobject-master/reobject/models/manager.py": {
        "ManagerDescriptor.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagerDescriptor.__get__": {
            "name": "__get__",
            "location": 14,
            "return": [
                "str",
                "bool",
                "int",
                "Manager"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Callable[,None]",
                    "str",
                    "List[libkol.types.ItemQuantity]",
                    "List",
                    "List[Q]",
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "owner": [
                    "bytes",
                    "Callable",
                    "str",
                    "server.models.User",
                    "None",
                    "bool",
                    "zerver.models.Realm",
                    "zerver.models.UserProfile",
                    "Optional[str]",
                    "Optional[bool]",
                    "int"
                ]
            }
        },
        "RelatedManagerDescriptor.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "bool",
                    "None",
                    "int",
                    "Optional[Union[IPUtilityFunction,UtilityDistribution]]"
                ]
            }
        },
        "RelatedManagerDescriptor.__get__": {
            "name": "__get__",
            "location": 33,
            "return": [
                "RelatedManager",
                "str",
                "Union[fonduer.candidates.models.Candidate,fonduer.candidates.models.Mention,fonduer.candidates.models.span_mention.TemporarySpanMention]",
                "app.models.Question",
                "int"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Type",
                    "Type[Signature]",
                    "Type[Any]"
                ],
                "owner": [
                    "Type",
                    "Type[Signature]",
                    "Type[Any]"
                ]
            }
        },
        "Manager.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "bool",
                    "None",
                    "int",
                    "Optional[Union[IPUtilityFunction,UtilityDistribution]]"
                ]
            }
        },
        "Manager.store": {
            "name": "store",
            "location": 69,
            "return": [
                "int",
                "bool",
                "Optional[Any]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager.get_queryset": {
            "name": "get_queryset",
            "location": 72,
            "return": [
                "reobject.query.queryset.QuerySet"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager.add": {
            "name": "add",
            "location": 78,
            "return": [
                "int",
                "Dict[str,Any]",
                "Optional[str]",
                "datetime.datetime"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "int",
                    "Dict[str,Any]",
                    "allennlp.models.model.Model",
                    "esm.models.service_instance.ServiceInstance",
                    "zerver.models.Realm"
                ]
            }
        },
        "Manager._delete": {
            "name": "_delete",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "int",
                    "daylighdb.models.Photo",
                    "Union[server.models.Bike,int]",
                    "viewer.models.Archive"
                ]
            }
        },
        "Manager.all": {
            "name": "all",
            "location": 94,
            "return": [
                "reobject.query.queryset.QuerySet"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager.count": {
            "name": "count",
            "location": 100,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager.earliest": {
            "name": "earliest",
            "location": 108,
            "return": [
                "str",
                "type",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "field_name": [
                    "str",
                    "Text"
                ]
            }
        },
        "Manager.exclude": {
            "name": "exclude",
            "location": 121,
            "return": [
                "reobject.query.queryset.QuerySet"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager.filter": {
            "name": "filter",
            "location": 124,
            "return": [
                "reobject.query.queryset.QuerySet"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager.first": {
            "name": "first",
            "location": 127,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "set",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager.get": {
            "name": "get",
            "location": 133,
            "return": [
                "bool",
                "bytes",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager.get_or_create": {
            "name": "get_or_create",
            "location": 136,
            "return": [
                "Tuple[(Any, bool)]"
            ],
            "arguments": {
                "self": [],
                "defaults": [
                    "str",
                    "None",
                    "Sequence[str]",
                    "Optional[Callable]",
                    "List[str]",
                    "int",
                    "Callable"
                ]
            }
        },
        "Manager.last": {
            "name": "last",
            "location": 139,
            "return": [
                "str",
                "Dict[str, Any]",
                "set",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager.latest": {
            "name": "latest",
            "location": 145,
            "return": [
                "str",
                "type",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "field_name": [
                    "str",
                    "Text"
                ]
            }
        },
        "Manager.none": {
            "name": "none",
            "location": 157,
            "return": [
                "reobject.query.queryset.EmptyQuerySet"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager.random": {
            "name": "random",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager.map": {
            "name": "map",
            "location": 171,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable[[float],float]",
                    "Dict[str,Any]",
                    "Callable[float,float]",
                    "str",
                    "float"
                ]
            }
        },
        "Manager.__repr__": {
            "name": "__repr__",
            "location": 177,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RelatedManagerDescriptor.__get__.RelatedManager.get_queryset": {
            "name": "get_queryset",
            "location": 47,
            "return": [
                "reobject.query.queryset.QuerySet"
            ],
            "arguments": {
                "related_manager_self": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        }
    },
    "reobject-master/reobject/models/model.py": {
        "ModelBase.__new__": {
            "name": "__new__",
            "location": 13,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str,Any]"
                ],
                "name": [
                    "str",
                    "Dict[str,Any]"
                ],
                "bases": [
                    "str",
                    "Dict[str,Any]",
                    "bool",
                    "django.db.models.Model"
                ],
                "attrs": [
                    "Dict[str, Any]",
                    "dict",
                    "type",
                    "Sequence[type]",
                    "str",
                    "bool",
                    "MutableMapping[str, Any]",
                    "Dict[str, str]"
                ]
            }
        },
        "Model.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.__new__": {
            "name": "__new__",
            "location": 30,
            "return": [
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "int",
                    "asgard.models.spec.container.ContainerParameterSpec"
                ]
            }
        },
        "Model.id": {
            "name": "id",
            "location": 46,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.pk": {
            "name": "pk",
            "location": 53,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.delete": {
            "name": "delete",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model._attrs": {
            "name": "_attrs",
            "location": 65,
            "return": [
                "int",
                "List[str]",
                "bool",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "reobject-master/reobject/models/store.py": {},
    "reobject-master/reobject/models/__init__.py": {},
    "reobject-master/reobject/query/parser.py": {
        "_Q.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Q._comparator_func": {
            "name": "_comparator_func",
            "location": 43,
            "return": [
                "str",
                "Union[bool, List, Tuple]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "_Q.__and__": {
            "name": "__and__",
            "location": 51,
            "return": [
                "_Q"
            ],
            "arguments": {
                "self": [
                    "_T_Q@@_Q@@"
                ],
                "other": [
                    "Union[int, \"BitVec\"]"
                ]
            }
        },
        "_Q.__or__": {
            "name": "__or__",
            "location": 57,
            "return": [
                "_Q"
            ],
            "arguments": {
                "self": [
                    "_T_Q@@_Q@@"
                ],
                "other": [
                    "Union[int, \"BitVec\"]"
                ]
            }
        },
        "_Q.__invert__": {
            "name": "__invert__",
            "location": 63,
            "return": [
                "_Q"
            ],
            "arguments": {
                "self": [
                    "_T_Q@@_Q@@"
                ]
            }
        },
        "_Q.apply_verb": {
            "name": "apply_verb",
            "location": 68,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int"
                ]
            }
        },
        "Q.__new__": {
            "name": "__new__",
            "location": 131,
            "return": [
                "Optional[int]",
                "Dict[str, int]",
                "bool",
                "int"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "int",
                    "Type",
                    "Type[T]",
                    "str",
                    "Callable[[None], None]"
                ]
            }
        },
        "Q.from_Qs": {
            "name": "from_Qs",
            "location": 139,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "reobject-master/reobject/query/queryset.py": {
        "QuerySet.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuerySet._attrs": {
            "name": "_attrs",
            "location": 19,
            "return": [
                "Set",
                "str",
                "List[dict]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.__or__": {
            "name": "__or__",
            "location": 22,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "QuerySet.count": {
            "name": "count",
            "location": 28,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.delete": {
            "name": "delete",
            "location": 31,
            "return": [
                "Tuple[(Any, dict)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.distinct": {
            "name": "distinct",
            "location": 40,
            "return": [
                "bool",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.earliest": {
            "name": "earliest",
            "location": 54,
            "return": [
                "Optional[str]",
                "str",
                "None",
                "Optional[int]",
                "Dict[str,list[str]]",
                "List[tuple[Union[str,Any]]]",
                "List[str]",
                "Dict[str,int]"
            ],
            "arguments": {
                "self": [],
                "field_name": [
                    "Text",
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "QuerySet.exclude": {
            "name": "exclude",
            "location": 66,
            "return": [
                "QuerySet"
            ],
            "arguments": {
                "self": [
                    "_TQuerySet@@QuerySet@@"
                ]
            }
        },
        "QuerySet.exists": {
            "name": "exists",
            "location": 74,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.filter": {
            "name": "filter",
            "location": 77,
            "return": [
                "QuerySet"
            ],
            "arguments": {
                "self": [
                    "_TQuerySet@@QuerySet@@"
                ]
            }
        },
        "QuerySet.first": {
            "name": "first",
            "location": 85,
            "return": [
                "Optional[str]",
                "str",
                "None",
                "Optional[int]",
                "int",
                "Dict",
                "List[int]",
                "List[list[int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.get": {
            "name": "get",
            "location": 93,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.get_or_create": {
            "name": "get_or_create",
            "location": 113,
            "return": [
                "Tuple[(Any, bool)]"
            ],
            "arguments": {
                "self": [],
                "defaults": [
                    "Dict[str,Any]",
                    "Dict[str,tuple]",
                    "List[Tuple[str,str,str]]",
                    "Tuple[bytes,int]",
                    "T"
                ]
            }
        },
        "QuerySet.last": {
            "name": "last",
            "location": 127,
            "return": [
                "Optional[str]",
                "Optional[float]",
                "None",
                "int",
                "Dict",
                "List[int]",
                "List[list[int]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.latest": {
            "name": "latest",
            "location": 135,
            "return": [
                "Optional[str]",
                "str",
                "None",
                "Optional[int]",
                "Dict[str,list[str]]",
                "List[tuple[Union[str,Any]]]",
                "List[str]",
                "Dict[str,int]"
            ],
            "arguments": {
                "self": [],
                "field_name": [
                    "Text",
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "QuerySet.map": {
            "name": "map",
            "location": 147,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable",
                    "Optional[Callable[...,Any]]",
                    "None"
                ]
            }
        },
        "QuerySet.none": {
            "name": "none",
            "location": 155,
            "return": [
                "EmptyQuerySet"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.order_by": {
            "name": "order_by",
            "location": 158,
            "return": [
                "QuerySet"
            ],
            "arguments": {
                "self": [
                    "_TQuerySet@@QuerySet@@"
                ]
            }
        },
        "QuerySet.random": {
            "name": "random",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.reverse": {
            "name": "reverse",
            "location": 175,
            "return": [
                "QuerySet"
            ],
            "arguments": {
                "self": [
                    "_TQuerySet@@QuerySet@@"
                ]
            }
        },
        "QuerySet.values": {
            "name": "values",
            "location": 181,
            "return": [
                "QuerySet"
            ],
            "arguments": {
                "self": [
                    "_TQuerySet@@QuerySet@@"
                ]
            }
        },
        "QuerySet.values_list": {
            "name": "values_list",
            "location": 193,
            "return": [
                "QuerySet"
            ],
            "arguments": {
                "self": [
                    "_TQuerySet@@QuerySet@@"
                ]
            }
        },
        "EmptyQuerySet.__init__": {
            "name": "__init__",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "bool",
                    "None",
                    "int",
                    "Optional[Union[IPUtilityFunction,UtilityDistribution]]"
                ]
            }
        }
    },
    "reobject-master/reobject/query/__init__.py": {},
    "reobject-master/tests/__init__.py": {},
    "reobject-master/tests/unit/test_manager.py": {
        "TestQuery.setUp": {
            "name": "setUp",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuery.tearDown": {
            "name": "tearDown",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuery.test_descriptor_cls": {
            "name": "test_descriptor_cls",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuery.test_descriptor_instance": {
            "name": "test_descriptor_instance",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuery.test_create": {
            "name": "test_create",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuery.test_none": {
            "name": "test_none",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuery.test_all": {
            "name": "test_all",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuery.test_manager_model": {
            "name": "test_manager_model",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRelatedManager.setUp": {
            "name": "setUp",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRelatedManager.tearDown": {
            "name": "tearDown",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRelatedManager.test_manager_cls": {
            "name": "test_manager_cls",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRelatedManager.test_many_to_many_relationship": {
            "name": "test_many_to_many_relationship",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "reobject-master/tests/unit/test_Q.py": {
        "StringSecret.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gem": [
                    "typing.Text"
                ]
            }
        },
        "NumericSecret.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gem": [
                    "int"
                ]
            }
        },
        "IterableSecret.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gem": [
                    "tuple[typing.Text]"
                ]
            }
        },
        "TestQ.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQ.test_simple": {
            "name": "test_simple",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQ.test_nested_attrs": {
            "name": "test_nested_attrs",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQ.test_nested_contains": {
            "name": "test_nested_contains",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQ.test_nested_endswith": {
            "name": "test_nested_endswith",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQ.test_nested_iendswith": {
            "name": "test_nested_iendswith",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQ.test_exact": {
            "name": "test_exact",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQ.test_nested_icontains": {
            "name": "test_nested_icontains",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQ.test_iexact": {
            "name": "test_iexact",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQ.test_nested_gt": {
            "name": "test_nested_gt",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQ.test_nested_gte": {
            "name": "test_nested_gte",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQ.test_nested_in": {
            "name": "test_nested_in",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQ.test_nested_iin": {
            "name": "test_nested_iin",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQ.test_isnone": {
            "name": "test_isnone",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQ.test_nested_lt": {
            "name": "test_nested_lt",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQ.test_nested_lte": {
            "name": "test_nested_lte",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQ.test_nested_startswith": {
            "name": "test_nested_startswith",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQ.test_nested_istartswith": {
            "name": "test_nested_istartswith",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQ.test_nested_dict_istartswith": {
            "name": "test_nested_dict_istartswith",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQ.test_Q_composition_AND": {
            "name": "test_Q_composition_AND",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQ.test_Q_composition_OR": {
            "name": "test_Q_composition_OR",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "reobject-master/tests/unit/test_queryset.py": {
        "TestQuerySet.setUp": {
            "name": "setUp",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuerySet.tearDown": {
            "name": "tearDown",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuerySet.test_pipe": {
            "name": "test_pipe",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuerySet.test_count": {
            "name": "test_count",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuerySet.test_manager_count": {
            "name": "test_manager_count",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuerySet.test_delete": {
            "name": "test_delete",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuerySet.test_distinct": {
            "name": "test_distinct",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuerySet.test_earliest": {
            "name": "test_earliest",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuerySet.test_exists": {
            "name": "test_exists",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuerySet.test_exclude": {
            "name": "test_exclude",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuerySet.test_manager_exclude_some_multiple_kwargs": {
            "name": "test_manager_exclude_some_multiple_kwargs",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuerySet.test_manager_filter_nokwargs": {
            "name": "test_manager_filter_nokwargs",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuerySet.test_manager_filter_none": {
            "name": "test_manager_filter_none",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuerySet.test_manager_filter_some_single_kwarg": {
            "name": "test_manager_filter_some_single_kwarg",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuerySet.test_manager_filter_some_multiple_kwargs": {
            "name": "test_manager_filter_some_multiple_kwargs",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuerySet.test_queryset_get": {
            "name": "test_queryset_get",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuerySet.test_manager_get_success": {
            "name": "test_manager_get_success",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuerySet.test_manager_get_does_not_exist": {
            "name": "test_manager_get_does_not_exist",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuerySet.test_manager_get_multiple_objects_returned": {
            "name": "test_manager_get_multiple_objects_returned",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuerySet.test_get_or_create": {
            "name": "test_get_or_create",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuerySet.test_latest": {
            "name": "test_latest",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuerySet.test_none": {
            "name": "test_none",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuerySet.test_order_by": {
            "name": "test_order_by",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuerySet.test_reverse": {
            "name": "test_reverse",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuerySet.test_values": {
            "name": "test_values",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuerySet.test_values_list": {
            "name": "test_values_list",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuerySet.test_invalid_lookup_params": {
            "name": "test_invalid_lookup_params",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuerySet.test_values_list_flat": {
            "name": "test_values_list_flat",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuerySet.test_first": {
            "name": "test_first",
            "location": 309,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuerySet.test_manager_first": {
            "name": "test_manager_first",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuerySet.test_first_none": {
            "name": "test_first_none",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuerySet.test_last": {
            "name": "test_last",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuerySet.test_manager_last": {
            "name": "test_manager_last",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuerySet.test_last_none": {
            "name": "test_last_none",
            "location": 348,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuerySet.test_manager_random": {
            "name": "test_manager_random",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuerySet.test_manager_map": {
            "name": "test_manager_map",
            "location": 361,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuerySet.test_map": {
            "name": "test_map",
            "location": 371,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuerySet.test_manager_map_non_callable": {
            "name": "test_manager_map_non_callable",
            "location": 381,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "reobject-master/tests/unit/test_transaction.py": {
        "Number.kaboom": {
            "name": "kaboom",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransaction.setUp": {
            "name": "setUp",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransaction.tearDown": {
            "name": "tearDown",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransaction.test_transaction_decorator": {
            "name": "test_transaction_decorator",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransaction.test_transaction_ctx_manager": {
            "name": "test_transaction_ctx_manager",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "reobject-master/tests/unit/__init__.py": {}
}
{
    "repo_link-master/setup.py": {},
    "repo_link-master/repo_link/repo_link.py": {
        "parse": {
            "name": "parse",
            "location": 28,
            "return": [
                "RepoData"
            ],
            "arguments": {
                "link": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "checkout": {
            "name": "checkout",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "repo": [
                    "str",
                    "tsrc.Repo"
                ],
                "commit": [
                    "str",
                    "tsrc.Repo"
                ]
            }
        },
        "clone": {
            "name": "clone",
            "location": 50,
            "return": [
                "str",
                "IO[str]"
            ],
            "arguments": {
                "repo_link": [
                    "str",
                    "pathlib.Path",
                    "path.Path"
                ],
                "target_path": [
                    "str",
                    "None",
                    "pathlib.Path",
                    "path.Path",
                    "Optional[path.Path]",
                    "Union[str,pathlib.Path]"
                ]
            }
        },
        "open_in_editor": {
            "name": "open_in_editor",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str",
                    "List",
                    "apistar.http.Path",
                    "Union[str,List]"
                ],
                "editor": [
                    "str",
                    "List",
                    "apistar.http.Path",
                    "Union[str,List]"
                ],
                "line": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Tuple",
                    "List",
                    "int"
                ]
            }
        },
        "open_file": {
            "name": "open_file",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "repo": [
                    "IO",
                    "pathlib.Path",
                    "IO[Any]"
                ],
                "data": [
                    "IO",
                    "pathlib.Path",
                    "IO[Any]"
                ],
                "editor": [
                    "str",
                    "path.Path"
                ]
            }
        },
        "find_in_sequence": {
            "name": "find_in_sequence",
            "location": 80,
            "return": [
                "List[str]",
                "Optional[dict]",
                "Dict[str, Any]",
                "int",
                "Optional[T]"
            ],
            "arguments": {
                "sequence": [
                    "str",
                    "Sequence[T]",
                    "Callable[[T],bool]",
                    "int",
                    "bool"
                ],
                "predicate": [
                    "Sequence[T]",
                    "int",
                    "Callable[T,bool]",
                    "str",
                    "Callable[[T],bool]",
                    "bool"
                ]
            }
        },
        "find_repo": {
            "name": "find_repo",
            "location": 87,
            "return": [
                "Repo",
                "None",
                "Optional[int]",
                "str",
                "T",
                "Optional[str]",
                "Dict",
                "Optional[Iterable[Any]]"
            ],
            "arguments": {
                "parents": [
                    "str",
                    "int",
                    "Type[object]",
                    "Type"
                ],
                "data": [
                    "Dict[str,Any]",
                    "Dict",
                    "bytes",
                    "Literal",
                    "None",
                    "Optional[Dict[str,Any]]",
                    "str"
                ]
            }
        },
        "open_link": {
            "name": "open_link",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "link": [
                    "str",
                    "Callable[[str],str]",
                    "int",
                    "Callable[str,str]",
                    "Optional[str]",
                    "None"
                ],
                "editor": [
                    "str",
                    "bytes"
                ],
                "parents": [
                    "Sequence[pathlib.Path]",
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "parse_args": {
            "name": "parse_args",
            "location": 121,
            "return": [
                "argparse.Namespace"
            ],
            "arguments": {}
        },
        "RepoData.clone_link": {
            "name": "clone_link",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "repo_link-master/repo_link/__init__.py": {},
    "repo_link-master/tests/test_parse.py": {
        "test_parse": {
            "name": "test_parse",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "link": [
                    "Dict",
                    "Dict[str,Any]"
                ],
                "data": [
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        }
    }
}
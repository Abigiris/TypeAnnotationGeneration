{
    "requirementslib-main/noxfile.py": {
        "tests": {
            "name": "tests",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "nox.sessions.Session"
                ]
            }
        },
        "coverage": {
            "name": "coverage",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "session": []
            }
        },
        "docs": {
            "name": "docs",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "nox.sessions.Session"
                ]
            }
        },
        "package": {
            "name": "package",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "session": []
            }
        },
        "_current_version": {
            "name": "_current_version",
            "location": 38,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {}
        },
        "_prebump": {
            "name": "_prebump",
            "location": 44,
            "return": [
                "int",
                "Dict[str,int]",
                "List"
            ],
            "arguments": {
                "version": [
                    "int",
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "_write_version": {
            "name": "_write_version",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "v": [
                    "str",
                    "int",
                    "Optional[str]",
                    "List[str]",
                    "None",
                    "AnyStr",
                    "Type"
                ]
            }
        },
        "_get_changelog": {
            "name": "_get_changelog",
            "location": 61,
            "return": [
                "str",
                "bool",
                "List[str]",
                "Tuple[str]"
            ],
            "arguments": {}
        },
        "bump_version": {
            "name": "bump_version",
            "location": 69,
            "return": [
                "str",
                "int",
                "List",
                "pathlib.Path",
                "Dict[str,Dict[str,int]]",
                "Dict[str,int]",
                "Dict",
                "Pattern",
                "MutableMapping",
                "DefaultDict",
                "Dict[str,str]"
            ],
            "arguments": {
                "session": [
                    "bool"
                ]
            }
        },
        "release": {
            "name": "release",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "str"
                ]
            }
        }
    },
    "requirementslib-main/setup.py": {
        "read": {
            "name": "read",
            "location": 9,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "find_version": {
            "name": "find_version",
            "location": 16,
            "return": [
                "bool",
                "str",
                "Union[int, float, complex]"
            ],
            "arguments": {}
        }
    },
    "requirementslib-main/docs/conf.py": {
        "read": {
            "name": "read",
            "location": 26,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "find_version": {
            "name": "find_version",
            "location": 33,
            "return": [
                "Text",
                "bool",
                "str",
                "Union[int,float,complex]"
            ],
            "arguments": {}
        }
    },
    "requirementslib-main/src/requirementslib/environment.py": {
        "is_type_checking": {
            "name": "is_type_checking",
            "location": 9,
            "return": [
                "bool",
                "Tuple",
                "T"
            ],
            "arguments": {}
        }
    },
    "requirementslib-main/src/requirementslib/exceptions.py": {
        "MissingParameter.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "param": [
                    "str",
                    "float"
                ]
            }
        },
        "MissingParameter.get_message": {
            "name": "get_message",
            "location": 19,
            "return": [
                "Text",
                "Dict",
                "Dict[str,Any]",
                "int",
                "Callable",
                "Union[int,float,complex]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None",
                    "Type[T]",
                    "Type"
                ],
                "param": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None",
                    "Type[T]",
                    "Type"
                ]
            }
        },
        "MissingParameter.show": {
            "name": "show",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "param": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "FileCorruptException.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "FileCorruptException.get_message": {
            "name": "get_message",
            "location": 43,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "backup_path": [
                    "str",
                    "None",
                    "List",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "FileCorruptException.show": {
            "name": "show",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LockfileCorruptException.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Dict[str,Any]"
                ],
                "backup_path": [
                    "str",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        },
        "LockfileCorruptException.get_message": {
            "name": "get_message",
            "location": 61,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "backup_path": [
                    "str",
                    "None",
                    "List",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "LockfileCorruptException.show": {
            "name": "show",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "backup_path": [
                    "str",
                    "None"
                ]
            }
        },
        "PipfileCorruptException.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Dict[str,Any]"
                ],
                "backup_path": [
                    "str",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        },
        "PipfileCorruptException.get_message": {
            "name": "get_message",
            "location": 79,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "backup_path": [
                    "str",
                    "None",
                    "List",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "PipfileCorruptException.show": {
            "name": "show",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "backup_path": [
                    "str",
                    "None"
                ]
            }
        },
        "PipfileNotFound.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "requirementslib-main/src/requirementslib/utils.py": {
        "setup_logger": {
            "name": "setup_logger",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "is_installable_dir": {
            "name": "is_installable_dir",
            "location": 74,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "strip_ssh_from_git_uri": {
            "name": "strip_ssh_from_git_uri",
            "location": 88,
            "return": [],
            "arguments": {
                "uri": []
            }
        },
        "add_ssh_scheme_to_git_uri": {
            "name": "add_ssh_scheme_to_git_uri",
            "location": 105,
            "return": [],
            "arguments": {
                "uri": []
            }
        },
        "is_vcs": {
            "name": "is_vcs",
            "location": 120,
            "return": [],
            "arguments": {
                "pipfile_entry": []
            }
        },
        "is_editable": {
            "name": "is_editable",
            "location": 135,
            "return": [],
            "arguments": {
                "pipfile_entry": []
            }
        },
        "is_star": {
            "name": "is_star",
            "location": 144,
            "return": [],
            "arguments": {
                "val": []
            }
        },
        "convert_entry_to_path": {
            "name": "convert_entry_to_path",
            "location": 151,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "is_installable_file": {
            "name": "is_installable_file",
            "location": 171,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "get_dist_metadata": {
            "name": "get_dist_metadata",
            "location": 215,
            "return": [],
            "arguments": {
                "dist": []
            }
        },
        "get_setup_paths": {
            "name": "get_setup_paths",
            "location": 234,
            "return": [],
            "arguments": {
                "base_path": [],
                "subdirectory": []
            }
        },
        "prepare_pip_source_args": {
            "name": "prepare_pip_source_args",
            "location": 259,
            "return": [],
            "arguments": {
                "sources": [],
                "pip_args": []
            }
        },
        "_ensure_dir": {
            "name": "_ensure_dir",
            "location": 284,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "get_path": {
            "name": "get_path",
            "location": 350,
            "return": [],
            "arguments": {
                "root": [],
                "path": [],
                "default": []
            }
        },
        "default_visit": {
            "name": "default_visit",
            "location": 403,
            "return": [],
            "arguments": {
                "path": [],
                "key": [],
                "value": []
            }
        },
        "dict_path_enter": {
            "name": "dict_path_enter",
            "location": 411,
            "return": [],
            "arguments": {
                "path": [],
                "key": [],
                "value": []
            }
        },
        "dict_path_exit": {
            "name": "dict_path_exit",
            "location": 430,
            "return": [],
            "arguments": {
                "path": [],
                "key": [],
                "old_parent": [],
                "new_parent": [],
                "new_items": []
            }
        },
        "remap": {
            "name": "remap",
            "location": 466,
            "return": [],
            "arguments": {
                "root": [],
                "visit": [],
                "enter": [],
                "exit": []
            }
        },
        "merge_items": {
            "name": "merge_items",
            "location": 620,
            "return": [],
            "arguments": {
                "target_list": [],
                "sourced": []
            }
        },
        "PathAccessError.__init__": {
            "name": "__init__",
            "location": 333,
            "return": [],
            "arguments": {
                "self": [],
                "exc": [],
                "seg": [],
                "path": []
            }
        },
        "PathAccessError.__repr__": {
            "name": "__repr__",
            "location": 338,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathAccessError.__str__": {
            "name": "__str__",
            "location": 342,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "merge_items.remerge_enter": {
            "name": "remerge_enter",
            "location": 627,
            "return": [],
            "arguments": {
                "path": [],
                "key": [],
                "value": []
            }
        },
        "merge_items.remerge_exit": {
            "name": "remerge_exit",
            "location": 641,
            "return": [],
            "arguments": {
                "path": [],
                "key": [],
                "old_parent": [],
                "new_parent": [],
                "new_items": []
            }
        },
        "merge_items.remerge_visit": {
            "name": "remerge_visit",
            "location": 647,
            "return": [],
            "arguments": {
                "path": [],
                "key": [],
                "value": []
            }
        }
    },
    "requirementslib-main/src/requirementslib/__init__.py": {},
    "requirementslib-main/src/requirementslib/models/cache.py": {
        "read_cache_file": {
            "name": "read_cache_file",
            "location": 36,
            "return": [],
            "arguments": {
                "cache_file_path": [
                    "str"
                ]
            }
        },
        "CorruptCacheError.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "int"
                ]
            }
        },
        "CorruptCacheError.__str__": {
            "name": "__str__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DependencyCache.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cache_dir": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "DependencyCache.cache": {
            "name": "cache",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DependencyCache.as_cache_key": {
            "name": "as_cache_key",
            "location": 83,
            "return": [
                "tuple[typing.Union[str,set[],typing.Type,None,BaseException,float]]"
            ],
            "arguments": {
                "self": [],
                "ireq": [
                    "str",
                    "bool"
                ]
            }
        },
        "DependencyCache.read_cache": {
            "name": "read_cache",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DependencyCache.write_cache": {
            "name": "write_cache",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DependencyCache.clear": {
            "name": "clear",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DependencyCache.__contains__": {
            "name": "__contains__",
            "location": 122,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "ireq": [
                    "str",
                    "bytes"
                ]
            }
        },
        "DependencyCache.__getitem__": {
            "name": "__getitem__",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "ireq": [
                    "str",
                    "bytes"
                ]
            }
        },
        "DependencyCache.__setitem__": {
            "name": "__setitem__",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ireq": [
                    "str",
                    "int",
                    "None"
                ],
                "values": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "DependencyCache.__delitem__": {
            "name": "__delitem__",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ireq": [
                    "str",
                    "bytes"
                ]
            }
        },
        "DependencyCache.get": {
            "name": "get",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "ireq": [
                    "str",
                    "int"
                ],
                "default": [
                    "None",
                    "dict[, ]",
                    "str",
                    "int"
                ]
            }
        },
        "DependencyCache.reverse_dependencies": {
            "name": "reverse_dependencies",
            "location": 148,
            "return": [],
            "arguments": {
                "self": [],
                "ireqs": [
                    "str"
                ]
            }
        },
        "DependencyCache._reverse_dependencies": {
            "name": "_reverse_dependencies",
            "location": 160,
            "return": [],
            "arguments": {
                "self": [],
                "cache_keys": [
                    "str"
                ]
            }
        },
        "HashCache.__init__": {
            "name": "__init__",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HashCache.get_hash": {
            "name": "get_hash",
            "location": 207,
            "return": [],
            "arguments": {
                "self": [],
                "location": [
                    "str",
                    "bool",
                    "typing.Sequence[str]"
                ]
            }
        },
        "HashCache._get_file_hash": {
            "name": "_get_file_hash",
            "location": 232,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "location": [
                    "str"
                ]
            }
        },
        "_JSONCache.__init__": {
            "name": "__init__",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cache_dir": []
            }
        },
        "_JSONCache.cache": {
            "name": "cache",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_JSONCache.as_cache_key": {
            "name": "as_cache_key",
            "location": 272,
            "return": [
                "tuple[str]"
            ],
            "arguments": {
                "self": [],
                "ireq": [
                    "dict[str, typing.Any]",
                    "bool",
                    "dict[, ]",
                    "typing.Type"
                ]
            }
        },
        "_JSONCache.read_cache": {
            "name": "read_cache",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_JSONCache.write_cache": {
            "name": "write_cache",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_JSONCache.clear": {
            "name": "clear",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_JSONCache.__contains__": {
            "name": "__contains__",
            "location": 315,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "ireq": [
                    "str",
                    "bytes"
                ]
            }
        },
        "_JSONCache.__getitem__": {
            "name": "__getitem__",
            "location": 319,
            "return": [],
            "arguments": {
                "self": [],
                "ireq": [
                    "str",
                    "bytes"
                ]
            }
        },
        "_JSONCache.__setitem__": {
            "name": "__setitem__",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ireq": [
                    "str",
                    "int",
                    "None"
                ],
                "values": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "_JSONCache.__delitem__": {
            "name": "__delitem__",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ireq": [
                    "str",
                    "bytes"
                ]
            }
        },
        "_JSONCache.get": {
            "name": "get",
            "location": 337,
            "return": [],
            "arguments": {
                "self": [],
                "ireq": [
                    "str",
                    "int"
                ],
                "default": [
                    "None",
                    "dict[, ]",
                    "str",
                    "int"
                ]
            }
        }
    },
    "requirementslib-main/src/requirementslib/models/dependencies.py": {
        "_get_wheel_cache": {
            "name": "_get_wheel_cache",
            "location": 75,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "_get_filtered_versions": {
            "name": "_get_filtered_versions",
            "location": 82,
            "return": [
                "set[]"
            ],
            "arguments": {
                "ireq": [
                    "str",
                    "bool",
                    "typing.Sequence[str]",
                    "None",
                    "list[str]"
                ],
                "versions": [
                    "str",
                    "bool",
                    "typing.Sequence[str]",
                    "None",
                    "list[str]"
                ],
                "prereleases": [
                    "str",
                    "bool",
                    "typing.Sequence[str]",
                    "None",
                    "list[str]"
                ]
            }
        },
        "find_all_matches": {
            "name": "find_all_matches",
            "location": 86,
            "return": [
                "set[]"
            ],
            "arguments": {
                "finder": [
                    "str",
                    "bool"
                ],
                "ireq": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "pre": [
                    "bool"
                ]
            }
        },
        "get_pip_command": {
            "name": "get_pip_command",
            "location": 108,
            "return": [
                "str",
                "list[str]",
                "list[]",
                "int"
            ],
            "arguments": {}
        },
        "get_abstract_dependencies": {
            "name": "get_abstract_dependencies",
            "location": 284,
            "return": [
                "list[]"
            ],
            "arguments": {
                "reqs": [
                    "str"
                ],
                "sources": [
                    "None",
                    "str"
                ],
                "parent": [
                    "None",
                    "str",
                    "bool",
                    "typing.Callable[[], None]"
                ]
            }
        },
        "get_dependencies": {
            "name": "get_dependencies",
            "location": 320,
            "return": [
                "str",
                "None",
                "typing.NamedTuple"
            ],
            "arguments": {
                "ireq": [
                    "str",
                    "bool",
                    "tuple[typing.Type]"
                ],
                "sources": [
                    "None",
                    "str",
                    "int",
                    "dict[, ]"
                ],
                "parent": [
                    "None",
                    "str"
                ]
            }
        },
        "get_dependencies_from_wheel_cache": {
            "name": "get_dependencies_from_wheel_cache",
            "location": 356,
            "return": [
                "None",
                "set[]"
            ],
            "arguments": {
                "ireq": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "_marker_contains_extra": {
            "name": "_marker_contains_extra",
            "location": 379,
            "return": [
                "bool"
            ],
            "arguments": {
                "ireq": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "get_dependencies_from_json": {
            "name": "get_dependencies_from_json",
            "location": 384,
            "return": [
                "None",
                "set[str]"
            ],
            "arguments": {
                "ireq": [
                    "str",
                    "dict[str, float]"
                ]
            }
        },
        "get_dependencies_from_cache": {
            "name": "get_dependencies_from_cache",
            "location": 434,
            "return": [
                "None",
                "set[]"
            ],
            "arguments": {
                "ireq": [
                    "dict[str, float]",
                    "str",
                    "int",
                    "list[str]"
                ]
            }
        },
        "is_python": {
            "name": "is_python",
            "location": 472,
            "return": [
                "bool"
            ],
            "arguments": {
                "section": [
                    "str"
                ]
            }
        },
        "get_dependencies_from_index": {
            "name": "get_dependencies_from_index",
            "location": 476,
            "return": [
                "set[]"
            ],
            "arguments": {
                "dep": [
                    "float",
                    "typing.MutableMapping",
                    "dict[str, str]",
                    "list[str]",
                    "typing.Callable[, ]",
                    "bool"
                ],
                "sources": [
                    "None",
                    "dict[str, str]",
                    "str"
                ],
                "pip_options": [
                    "None",
                    "dict[str, str]",
                    "str"
                ],
                "wheel_cache": [
                    "None",
                    "str"
                ]
            }
        },
        "get_pip_options": {
            "name": "get_pip_options",
            "location": 510,
            "return": [
                "list[]",
                "str",
                "tuple[typing.Union[typing.Any,typing.Any]]",
                "list[tuple[typing.Union[str,str,typing.Any]]]",
                "list[str]",
                "dict[str, typing.Union[float,None]]"
            ],
            "arguments": {
                "args": [
                    "None"
                ],
                "sources": [
                    "None",
                    "str"
                ],
                "pip_command": [
                    "None",
                    "str"
                ]
            }
        },
        "get_finder": {
            "name": "get_finder",
            "location": 534,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "sources": [
                    "None",
                    "str",
                    "bool"
                ],
                "pip_command": [],
                "pip_options": [
                    "None",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "start_resolver": {
            "name": "start_resolver",
            "location": 563,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "finder": [
                    "None",
                    "str"
                ],
                "session": [
                    "None",
                    "str"
                ],
                "wheel_cache": [
                    "None"
                ]
            }
        },
        "get_grouped_dependencies": {
            "name": "get_grouped_dependencies",
            "location": 628,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "constraints": [
                    "str",
                    "bool"
                ]
            }
        },
        "AbstractDependency.version_set": {
            "name": "version_set",
            "location": 129,
            "return": [
                "set[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractDependency.compatible_versions": {
            "name": "compatible_versions",
            "location": 141,
            "return": [
                "AbstractDependency",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str"
                ]
            }
        },
        "AbstractDependency.compatible_abstract_dep": {
            "name": "compatible_abstract_dep",
            "location": 157,
            "return": [
                "AbstractDependency",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int"
                ]
            }
        },
        "AbstractDependency.get_deps": {
            "name": "get_deps",
            "location": 209,
            "return": [],
            "arguments": {
                "self": [],
                "candidate": [
                    "str",
                    "typing.IO",
                    "dict[, ]"
                ]
            }
        },
        "AbstractDependency.from_requirement": {
            "name": "from_requirement",
            "location": 228,
            "return": [],
            "arguments": {
                "cls": [
                    "bool",
                    "dict[str, dict[str, str]]",
                    "dict[str, str]",
                    "str"
                ],
                "requirement": [],
                "parent": [
                    "None",
                    "list[str]",
                    "typing.Type"
                ]
            }
        },
        "AbstractDependency.from_string": {
            "name": "from_string",
            "location": 276,
            "return": [],
            "arguments": {
                "cls": [
                    "bool",
                    "dict[, ]",
                    "str"
                ],
                "line": [
                    "str",
                    "int"
                ],
                "parent": [
                    "None",
                    "bool",
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "get_dependencies_from_json.gen": {
            "name": "gen",
            "location": 406,
            "return": [
                "None",
                "typing.Generator[]"
            ],
            "arguments": {
                "ireq": []
            }
        }
    },
    "requirementslib-main/src/requirementslib/models/lockfile.py": {
        "preferred_newlines": {
            "name": "preferred_newlines",
            "location": 22,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "f": [
                    "tuple[typing.Union[bytes,bytes]]",
                    "bytes",
                    "typing.IO",
                    "str"
                ]
            }
        },
        "Lockfile._get_path": {
            "name": "_get_path",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lockfile._get_projectfile": {
            "name": "_get_projectfile",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lockfile._get_lockfile": {
            "name": "_get_lockfile",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lockfile.lockfile": {
            "name": "lockfile",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lockfile.section_keys": {
            "name": "section_keys",
            "location": 58,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lockfile.extended_keys": {
            "name": "extended_keys",
            "location": 62,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lockfile.get": {
            "name": "get",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "k": [
                    "int",
                    "str",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "Lockfile.__contains__": {
            "name": "__contains__",
            "location": 68,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "dict[, ]",
                    "bytes",
                    "str"
                ]
            }
        },
        "Lockfile.__setitem__": {
            "name": "__setitem__",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "int",
                    "str",
                    "None"
                ],
                "v": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "Lockfile.__getitem__": {
            "name": "__getitem__",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "k": [
                    "str"
                ]
            }
        },
        "Lockfile.__getattr__": {
            "name": "__getattr__",
            "location": 99,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "typing.Type",
                    "collections.abc.Awaitable[typing.Any]"
                ]
            }
        },
        "Lockfile.get_deps": {
            "name": "get_deps",
            "location": 110,
            "return": [
                "dict[, ]",
                "float",
                "int",
                "list[]",
                "list[list[typing.Any]]"
            ],
            "arguments": {
                "self": [],
                "dev": [
                    "bool"
                ],
                "only": [
                    "bool"
                ]
            }
        },
        "Lockfile.read_projectfile": {
            "name": "read_projectfile",
            "location": 120,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "list[str]",
                    "None"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "Lockfile.lockfile_from_pipfile": {
            "name": "lockfile_from_pipfile",
            "location": 133,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "tuple[str]"
                ],
                "pipfile_path": [
                    "str",
                    "None"
                ]
            }
        },
        "Lockfile.load_projectfile": {
            "name": "load_projectfile",
            "location": 144,
            "return": [],
            "arguments": {
                "cls": [],
                "path": [
                    "str"
                ],
                "create": [
                    "bool"
                ],
                "data": [
                    "None",
                    "str",
                    "dict[str, str]",
                    "list[list[int]]",
                    "typing.Mapping"
                ]
            }
        },
        "Lockfile.from_data": {
            "name": "from_data",
            "location": 181,
            "return": [],
            "arguments": {
                "cls": [],
                "path": [
                    "str",
                    "None"
                ],
                "data": [
                    "str",
                    "None",
                    "dict[, ]",
                    "typing.Any"
                ],
                "meta_from_project": [
                    "bool"
                ]
            }
        },
        "Lockfile.load": {
            "name": "load",
            "location": 219,
            "return": [],
            "arguments": {
                "cls": [],
                "path": [
                    "str"
                ],
                "create": [
                    "bool"
                ]
            }
        },
        "Lockfile.create": {
            "name": "create",
            "location": 253,
            "return": [],
            "arguments": {
                "cls": [],
                "path": [
                    "str",
                    "None",
                    "bool"
                ],
                "create": [
                    "bool"
                ]
            }
        },
        "Lockfile.develop": {
            "name": "develop",
            "location": 257,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lockfile.default": {
            "name": "default",
            "location": 261,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lockfile.get_requirements": {
            "name": "get_requirements",
            "location": 264,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "dev": [
                    "bool"
                ],
                "only": [
                    "bool"
                ]
            }
        },
        "Lockfile.dev_requirements": {
            "name": "dev_requirements",
            "location": 278,
            "return": [
                "int",
                "float",
                "list[typing.Union[typing.Any,typing.Any]]",
                "dict[, ]",
                "list[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lockfile.requirements": {
            "name": "requirements",
            "location": 284,
            "return": [
                "bool",
                "str",
                "set[str]",
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lockfile.dev_requirements_list": {
            "name": "dev_requirements_list",
            "location": 290,
            "return": [
                "list[dict[, ]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lockfile.requirements_list": {
            "name": "requirements_list",
            "location": 294,
            "return": [
                "list[dict[, ]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lockfile.write": {
            "name": "write",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lockfile.as_requirements": {
            "name": "as_requirements",
            "location": 301,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "include_hashes": [
                    "bool"
                ],
                "dev": [
                    "bool"
                ]
            }
        }
    },
    "requirementslib-main/src/requirementslib/models/markers.py": {
        "is_instance": {
            "name": "is_instance",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "item": [
                    "typing.Callable[..., str]",
                    "dict[, ]"
                ],
                "cls": [
                    "typing.Callable[..., str]",
                    "dict[, ]"
                ]
            }
        },
        "_tuplize_version": {
            "name": "_tuplize_version",
            "location": 121,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "version": [
                    "str"
                ]
            }
        },
        "_format_version": {
            "name": "_format_version",
            "location": 136,
            "return": [
                "str",
                "tuple[typing.Union[dict[, ],dict[, ]]]",
                "list[str]"
            ],
            "arguments": {
                "version": [
                    "str",
                    "tuple[typing.Union[dict[, ],dict[, ]]]",
                    "list[str]"
                ]
            }
        },
        "_format_pyspec": {
            "name": "_format_pyspec",
            "location": 148,
            "return": [
                "str",
                "Specifier"
            ],
            "arguments": {
                "specifier": [
                    "str",
                    "dict[str, str]",
                    "dict[, ]"
                ]
            }
        },
        "_get_specs": {
            "name": "_get_specs",
            "location": 184,
            "return": [
                "None",
                "list[tuple[typing.Text]]"
            ],
            "arguments": {
                "specset": [
                    "typing.Type",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "_group_by_op": {
            "name": "_group_by_op",
            "location": 210,
            "return": [],
            "arguments": {
                "specs": []
            }
        },
        "normalize_specifier_set": {
            "name": "normalize_specifier_set",
            "location": 222,
            "return": [
                "None",
                "set[]"
            ],
            "arguments": {
                "specs": [
                    "str",
                    "None"
                ]
            }
        },
        "get_sorted_version_string": {
            "name": "get_sorted_version_string",
            "location": 255,
            "return": [
                "str"
            ],
            "arguments": {
                "version_set": [
                    "str"
                ]
            }
        },
        "cleanup_pyspecs": {
            "name": "cleanup_pyspecs",
            "location": 268,
            "return": [
                "list[tuple[typing.Union[tuple[dict[tuple[typing.Union[cmk.utils.type_defs.CheckPluginName,typing.Any]], S]],list[],str,None,tuple[typing.Union[tuple[dict[tuple[typing.Union[cmk.utils.type_defs.CheckPluginName,typing.Any]], S]],list[]]],tuple[typing.Union[tuple[dict[tuple[typing.Union[cmk.utils.type_defs.CheckPluginName,typing.Any]], S]],str]],tuple[typing.Optional[tuple[dict[tuple[typing.Union[cmk.utils.type_defs.CheckPluginName,typing.Any]], S]]]]]]]"
            ],
            "arguments": {
                "specs": [
                    "typing.Callable[, ]",
                    "int"
                ],
                "joiner": [
                    "typing.Text"
                ]
            }
        },
        "fix_version_tuple": {
            "name": "fix_version_tuple",
            "location": 314,
            "return": [
                "tuple[typing.Union[int,tuple[typing.Union[typing.Any,typing.Any]],str,tuple[str]]]",
                "tuple[typing.Union[int,tuple[typing.Union[typing.Any,typing.Any]],str,tuple[typing.Union[str,int]]]]"
            ],
            "arguments": {
                "version_tuple": [
                    "str",
                    "int"
                ]
            }
        },
        "get_versions": {
            "name": "get_versions",
            "location": 329,
            "return": [
                "list[tuple[list[]]]"
            ],
            "arguments": {
                "specset": [
                    "list[list[typing.Any]]",
                    "list[typing.Union[str,str,str,str,str,str,str,str]]",
                    "str",
                    "list[]"
                ],
                "group_by_operator": [
                    "bool"
                ]
            }
        },
        "_ensure_marker": {
            "name": "_ensure_marker",
            "location": 353,
            "return": [
                "Marker",
                "str",
                "int",
                "list[int]",
                "dict[str, typing.Any]"
            ],
            "arguments": {
                "marker": [
                    "str",
                    "int",
                    "list[int]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "gen_marker": {
            "name": "gen_marker",
            "location": 360,
            "return": [
                "Marker"
            ],
            "arguments": {
                "mkr": [
                    "str",
                    "typing.Callable[[], None]",
                    "int"
                ]
            }
        },
        "_strip_extra": {
            "name": "_strip_extra",
            "location": 368,
            "return": [],
            "arguments": {
                "elements": [
                    "str",
                    "list[]",
                    "list[dict[, ]]"
                ]
            }
        },
        "_strip_pyversion": {
            "name": "_strip_pyversion",
            "location": 374,
            "return": [],
            "arguments": {
                "elements": [
                    "str",
                    "list[]",
                    "list[dict[, ]]"
                ]
            }
        },
        "_strip_marker_elem": {
            "name": "_strip_marker_elem",
            "location": 378,
            "return": [
                "bool"
            ],
            "arguments": {
                "elem_name": [
                    "str",
                    "int"
                ],
                "elements": [
                    "str"
                ]
            }
        },
        "_get_stripped_marker": {
            "name": "_get_stripped_marker",
            "location": 410,
            "return": [
                "None",
                "list[]",
                "str",
                "typing.Counter",
                "dict[, ]",
                "dict[str, typing.Union[int,str]]"
            ],
            "arguments": {
                "marker": [
                    "str",
                    "float"
                ],
                "strip_func": [
                    "int",
                    "str",
                    "tuple[typing.Union[str,str,str]]"
                ]
            }
        },
        "get_without_extra": {
            "name": "get_without_extra",
            "location": 423,
            "return": [],
            "arguments": {
                "marker": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_without_pyversion": {
            "name": "get_without_pyversion",
            "location": 436,
            "return": [],
            "arguments": {
                "marker": [
                    "str",
                    "bool"
                ]
            }
        },
        "_markers_collect_extras": {
            "name": "_markers_collect_extras",
            "location": 446,
            "return": [
                "None"
            ],
            "arguments": {
                "markers": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "collection": [
                    "typing.IO",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "_markers_collect_pyversions": {
            "name": "_markers_collect_pyversions",
            "location": 455,
            "return": [
                "None"
            ],
            "arguments": {
                "markers": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "collection": [
                    "list[str]",
                    "list[]"
                ]
            }
        },
        "_markers_contains_extra": {
            "name": "_markers_contains_extra",
            "location": 469,
            "return": [],
            "arguments": {
                "markers": [
                    "str",
                    "list[int]"
                ]
            }
        },
        "_markers_contains_pyversion": {
            "name": "_markers_contains_pyversion",
            "location": 474,
            "return": [],
            "arguments": {
                "markers": [
                    "str",
                    "list[int]"
                ]
            }
        },
        "_markers_contains_key": {
            "name": "_markers_contains_key",
            "location": 478,
            "return": [
                "bool"
            ],
            "arguments": {
                "markers": [
                    "bool",
                    "str",
                    "typing.Iterable[typing.Iterable[T]]",
                    "bytes",
                    "None"
                ],
                "key": [
                    "str",
                    "int"
                ]
            }
        },
        "get_contained_extras": {
            "name": "get_contained_extras",
            "location": 489,
            "return": [
                "set[]"
            ],
            "arguments": {
                "marker": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_contained_pyversions": {
            "name": "get_contained_pyversions",
            "location": 503,
            "return": [
                "set[]",
                "str",
                "int",
                "list[str]",
                "float"
            ],
            "arguments": {
                "marker": [
                    "str",
                    "bool"
                ]
            }
        },
        "contains_extra": {
            "name": "contains_extra",
            "location": 534,
            "return": [
                "bool"
            ],
            "arguments": {
                "marker": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "contains_pyversion": {
            "name": "contains_pyversion",
            "location": 543,
            "return": [
                "bool"
            ],
            "arguments": {
                "marker": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "_split_specifierset_str": {
            "name": "_split_specifierset_str",
            "location": 552,
            "return": [
                "set[Specifier]"
            ],
            "arguments": {
                "specset_str": [
                    "str"
                ],
                "prefix": [
                    "typing.Text"
                ]
            }
        },
        "_get_specifiers_from_markers": {
            "name": "_get_specifiers_from_markers",
            "location": 574,
            "return": [
                "dict[str, str]"
            ],
            "arguments": {
                "marker_item": [
                    "str",
                    "dict[, ]",
                    "list[typing.Match]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "get_specset": {
            "name": "get_specset",
            "location": 599,
            "return": [
                "SpecifierSet"
            ],
            "arguments": {
                "marker_list": [
                    "list[]",
                    "list[str]",
                    "list[dict[, ]]",
                    "list[int]",
                    "list[dict[str, typing.Any]]",
                    "list[list[str]]"
                ]
            }
        },
        "parse_marker_dict": {
            "name": "parse_marker_dict",
            "location": 614,
            "return": [
                "tuple[typing.Union[SpecifierSet,typing.Text]]"
            ],
            "arguments": {
                "marker_dict": []
            }
        },
        "_contains_micro_version": {
            "name": "_contains_micro_version",
            "location": 682,
            "return": [],
            "arguments": {
                "version_string": [
                    "str"
                ]
            }
        },
        "format_pyversion": {
            "name": "format_pyversion",
            "location": 686,
            "return": [
                "str"
            ],
            "arguments": {
                "parts": [
                    "dict[str, str]",
                    "float",
                    "bool",
                    "None"
                ]
            }
        },
        "normalize_marker_str": {
            "name": "normalize_marker_str",
            "location": 694,
            "return": [
                "None",
                "str"
            ],
            "arguments": {
                "marker": [
                    "str"
                ]
            }
        },
        "marker_from_specifier": {
            "name": "marker_from_specifier",
            "location": 715,
            "return": [
                "None",
                "Marker"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "bytes"
                ]
            }
        },
        "merge_markers": {
            "name": "merge_markers",
            "location": 732,
            "return": [],
            "arguments": {
                "m1": [
                    "int",
                    "str",
                    "None",
                    "tuple[typing.Union[float,float]]"
                ],
                "m2": [
                    "int",
                    "str",
                    "None",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        },
        "PipenvMarkers.line_part": {
            "name": "line_part",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PipenvMarkers.pipfile_part": {
            "name": "pipfile_part",
            "location": 81,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PipenvMarkers.make_marker": {
            "name": "make_marker",
            "location": 85,
            "return": [
                "Marker"
            ],
            "arguments": {
                "cls": [
                    "list[str]",
                    "str",
                    "typing.Sequence[str]",
                    "None",
                    "int"
                ],
                "marker_string": [
                    "str"
                ]
            }
        },
        "PipenvMarkers.from_line": {
            "name": "from_line",
            "location": 95,
            "return": [],
            "arguments": {
                "cls": [],
                "line": [
                    "str"
                ]
            }
        },
        "PipenvMarkers.from_pipfile": {
            "name": "from_pipfile",
            "location": 102,
            "return": [],
            "arguments": {
                "cls": [],
                "name": [
                    "str"
                ],
                "pipfile": []
            }
        }
    },
    "requirementslib-main/src/requirementslib/models/metadata.py": {
        "validate_extras": {
            "name": "validate_extras",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "inst": [
                    "int",
                    "typing.Iterable['cirq.Qid']",
                    "None"
                ],
                "attrib": [
                    "int",
                    "typing.Iterable['cirq.Qid']",
                    "None"
                ],
                "value": [
                    "bytes"
                ]
            }
        },
        "validate_digest": {
            "name": "validate_digest",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "inst": [
                    "str",
                    "int",
                    "list[float]",
                    "dict[, ]",
                    "list[str]"
                ],
                "attrib": [
                    "int",
                    "typing.Iterable['cirq.Qid']",
                    "None"
                ],
                "value": []
            }
        },
        "get_local_wheel_metadata": {
            "name": "get_local_wheel_metadata",
            "location": 140,
            "return": [
                "str",
                "int",
                "dict[str, str]",
                "None",
                "set[str]"
            ],
            "arguments": {
                "wheel_file": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_remote_sdist_metadata": {
            "name": "get_remote_sdist_metadata",
            "location": 157,
            "return": [],
            "arguments": {
                "line": [
                    "str",
                    "bytes"
                ]
            }
        },
        "get_remote_wheel_metadata": {
            "name": "get_remote_wheel_metadata",
            "location": 168,
            "return": [
                "str",
                "int",
                "dict[str, str]",
                "None",
                "set[str]"
            ],
            "arguments": {
                "whl_file": [
                    "str",
                    "int"
                ]
            }
        },
        "create_specifierset": {
            "name": "create_specifierset",
            "location": 188,
            "return": [
                "SpecifierSet"
            ],
            "arguments": {
                "spec": [
                    "None",
                    "list[]",
                    "bool"
                ]
            }
        },
        "create_digest_collection": {
            "name": "create_digest_collection",
            "location": 418,
            "return": [],
            "arguments": {
                "digest_dict": [
                    "dict[, ]",
                    "list[]",
                    "dict[str, typing.Any]",
                    "dict[str, str]",
                    "None"
                ]
            }
        },
        "instance_check_converter": {
            "name": "instance_check_converter",
            "location": 423,
            "return": [],
            "arguments": {
                "expected_type": [
                    "None",
                    "str",
                    "typing.Iterable[str]"
                ],
                "converter": [
                    "None",
                    "str",
                    "typing.Iterable[str]"
                ]
            }
        },
        "parse_tag": {
            "name": "parse_tag",
            "location": 445,
            "return": [
                "ParsedTag"
            ],
            "arguments": {
                "tag": [
                    "str",
                    "typing.Callable[, ]",
                    "bytes"
                ]
            }
        },
        "create_release_urls_from_list": {
            "name": "create_release_urls_from_list",
            "location": 649,
            "return": [
                "list[ReleaseUrl]"
            ],
            "arguments": {
                "urls": [
                    "str",
                    "set[str]",
                    "tuple[typing.Union[str,str]]"
                ],
                "name": [
                    "None",
                    "str",
                    "set[str]",
                    "set[]"
                ]
            }
        },
        "convert_release_urls_to_collection": {
            "name": "convert_release_urls_to_collection",
            "location": 737,
            "return": [],
            "arguments": {
                "urls": [
                    "None",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "name": [
                    "None",
                    "str"
                ]
            }
        },
        "get_release": {
            "name": "get_release",
            "location": 810,
            "return": [
                "Release"
            ],
            "arguments": {
                "version": [
                    "str",
                    "typing.Pattern"
                ],
                "urls": [
                    "str",
                    "bool",
                    "list[str]"
                ],
                "name": [
                    "None",
                    "str",
                    "dict[str, D]",
                    "typing.Callable[str, str]",
                    "int"
                ]
            }
        },
        "get_releases_from_package": {
            "name": "get_releases_from_package",
            "location": 820,
            "return": [
                "list[]"
            ],
            "arguments": {
                "releases": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "dict[str, str]"
                ],
                "name": [
                    "None",
                    "str",
                    "list[]",
                    "bool"
                ]
            }
        },
        "convert_releases_to_collection": {
            "name": "convert_releases_to_collection",
            "location": 892,
            "return": [],
            "arguments": {
                "releases": [
                    "str",
                    "typing.Callable[, ]"
                ],
                "name": [
                    "None",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "split_keywords": {
            "name": "split_keywords",
            "location": 897,
            "return": [
                "list[str]",
                "list[]"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        },
        "create_dependencies": {
            "name": "create_dependencies",
            "location": 906,
            "return": [
                "None",
                "set[typing.Text]"
            ],
            "arguments": {
                "requires_dist": [
                    "str",
                    "list[]"
                ],
                "parent": [
                    "None",
                    "int"
                ]
            }
        },
        "convert_package_info": {
            "name": "convert_package_info",
            "location": 991,
            "return": [
                "PackageInfo"
            ],
            "arguments": {
                "info_json": [
                    "dict[, ]"
                ]
            }
        },
        "add_markers_to_dep": {
            "name": "add_markers_to_dep",
            "location": 998,
            "return": [
                "str"
            ],
            "arguments": {
                "d": [
                    "str",
                    "bytes"
                ],
                "marker_str": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "get_package": {
            "name": "get_package",
            "location": 1210,
            "return": [],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "get_package_version": {
            "name": "get_package_version",
            "location": 1220,
            "return": [],
            "arguments": {
                "name": [
                    "str",
                    "typing.Any",
                    "None"
                ],
                "version": [
                    "str",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "get_package_from_requirement": {
            "name": "get_package_from_requirement",
            "location": 1230,
            "return": [
                "tuple[set[str]]"
            ],
            "arguments": {
                "req": [
                    "list[cmk.gui.plugins.visuals.utils.Filter]",
                    "str",
                    "None"
                ]
            }
        },
        "PackageEncoder.default": {
            "name": "default",
            "location": 107,
            "return": [
                "tuple[]",
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "float",
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "ExtrasCollection.add_dependency": {
            "name": "add_dependency",
            "location": 208,
            "return": [],
            "arguments": {
                "self": [],
                "dependency": [
                    "dict[, ]",
                    "typing.Callable[, ]",
                    "bool",
                    "str",
                    "list[int]"
                ]
            }
        },
        "Dependency.__str__": {
            "name": "__str__",
            "location": 243,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dependency.as_line": {
            "name": "as_line",
            "location": 247,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dependency.pin": {
            "name": "pin",
            "location": 269,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dependency.from_requirement": {
            "name": "from_requirement",
            "location": 297,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[str, typing.Any]",
                    "list[int]",
                    "typing.AbstractSet",
                    "typing.Container",
                    "str"
                ],
                "req": [
                    "str",
                    "None"
                ],
                "parent": [
                    "None",
                    "dict[str, typing.Any]",
                    "list[int]",
                    "typing.AbstractSet",
                    "typing.Container",
                    "str"
                ]
            }
        },
        "Dependency.from_info": {
            "name": "from_info",
            "location": 332,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[str, typing.Any]",
                    "str",
                    "bool",
                    "None"
                ],
                "info": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]",
                    "tuple[typing.Union[str,str]]",
                    "typing.Type"
                ]
            }
        },
        "Dependency.from_str": {
            "name": "from_str",
            "location": 380,
            "return": [],
            "arguments": {
                "cls": [],
                "depstr": [
                    "str",
                    "typing.Callable[..., T]",
                    "list[]"
                ],
                "parent": [
                    "None",
                    "str",
                    "tuple[typing.Type]",
                    "typing.Type"
                ]
            }
        },
        "Dependency.add_parent": {
            "name": "add_parent",
            "location": 388,
            "return": [],
            "arguments": {
                "self": [],
                "parent": [
                    "list[str]",
                    "bool",
                    "typing.Type"
                ]
            }
        },
        "Digest.__str__": {
            "name": "__str__",
            "location": 402,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Digest.create": {
            "name": "create",
            "location": 407,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "typing.Type"
                ],
                "algorithm": [
                    "str",
                    "int",
                    "typing.Type"
                ],
                "value": [
                    "str",
                    "int",
                    "typing.Type"
                ]
            }
        },
        "Digest.collection_from_dict": {
            "name": "collection_from_dict",
            "location": 412,
            "return": [
                "list[]"
            ],
            "arguments": {
                "cls": [],
                "digest_dict": [
                    "dict[, ]",
                    "dict[str, float]",
                    "dict[str, str]"
                ]
            }
        },
        "instance_check_converter._converter": {
            "name": "_converter",
            "location": 425,
            "return": [],
            "arguments": {
                "val": []
            }
        },
        "ReleaseUrl.is_wheel": {
            "name": "is_wheel",
            "location": 539,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReleaseUrl.is_sdist": {
            "name": "is_sdist",
            "location": 544,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReleaseUrl.markers": {
            "name": "markers",
            "location": 549,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReleaseUrl.pep508_url": {
            "name": "pep508_url",
            "location": 564,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReleaseUrl.get_markers_from_wheel": {
            "name": "get_markers_from_wheel",
            "location": 572,
            "return": [
                "typing.Text",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReleaseUrl.get_dependencies": {
            "name": "get_dependencies",
            "location": 596,
            "return": [
                "tuple[typing.Union[list[],tuple[typing.Optional[tuple[typing.Optional[]]]]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReleaseUrl.sha256": {
            "name": "sha256",
            "location": 618,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReleaseUrl.create": {
            "name": "create",
            "location": 625,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "collections.abc.Awaitable[]",
                    "None",
                    "typing.Any"
                ],
                "release_dict": [],
                "name": [
                    "None",
                    "list[str]",
                    "str",
                    "typing.Type"
                ]
            }
        },
        "ReleaseUrlCollection.create": {
            "name": "create",
            "location": 670,
            "return": [],
            "arguments": {
                "cls": [
                    "str"
                ],
                "urls": [
                    "str"
                ],
                "name": [
                    "None",
                    "str"
                ]
            }
        },
        "ReleaseUrlCollection.wheels": {
            "name": "wheels",
            "location": 675,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReleaseUrlCollection.sdists": {
            "name": "sdists",
            "location": 683,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReleaseUrlCollection.__iter__": {
            "name": "__iter__",
            "location": 690,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReleaseUrlCollection.__getitem__": {
            "name": "__getitem__",
            "location": 694,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "typing.Hashable"
                ]
            }
        },
        "ReleaseUrlCollection.__len__": {
            "name": "__len__",
            "location": 698,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReleaseUrlCollection.latest": {
            "name": "latest",
            "location": 703,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReleaseUrlCollection.latest_timestamp": {
            "name": "latest_timestamp",
            "location": 712,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReleaseUrlCollection.find_package_type": {
            "name": "find_package_type",
            "location": 719,
            "return": [],
            "arguments": {
                "self": [],
                "type_": [
                    "str",
                    "typing.Type",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Release.__iter__": {
            "name": "__iter__",
            "location": 759,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Release.__getitem__": {
            "name": "__getitem__",
            "location": 763,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "None",
                    "tuple[]",
                    "dict[str, str]",
                    "int",
                    "typing.Callable[T, T]",
                    "typing.Type"
                ]
            }
        },
        "Release.__len__": {
            "name": "__len__",
            "location": 766,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Release.yanked": {
            "name": "yanked",
            "location": 771,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Release.parsed_version": {
            "name": "parsed_version",
            "location": 778,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Release.wheels": {
            "name": "wheels",
            "location": 783,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Release.sdists": {
            "name": "sdists",
            "location": 788,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Release.latest": {
            "name": "latest",
            "location": 793,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Release.latest_timestamp": {
            "name": "latest_timestamp",
            "location": 798,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Release.to_lockfile": {
            "name": "to_lockfile",
            "location": 802,
            "return": [
                "dict[typing.Text, typing.Union[list[str],str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReleaseCollection.__iter__": {
            "name": "__iter__",
            "location": 835,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReleaseCollection.__getitem__": {
            "name": "__getitem__",
            "location": 839,
            "return": [
                "list[list[]]",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "ReleaseCollection.__len__": {
            "name": "__len__",
            "location": 846,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReleaseCollection.get_latest_lockfile": {
            "name": "get_latest_lockfile",
            "location": 850,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReleaseCollection.wheels": {
            "name": "wheels",
            "location": 854,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReleaseCollection.sdists": {
            "name": "sdists",
            "location": 860,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReleaseCollection.non_yanked_releases": {
            "name": "non_yanked_releases",
            "location": 867,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReleaseCollection.sort_releases": {
            "name": "sort_releases",
            "location": 871,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReleaseCollection.latest": {
            "name": "latest",
            "location": 880,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReleaseCollection.load": {
            "name": "load",
            "location": 885,
            "return": [],
            "arguments": {
                "cls": [
                    "bool",
                    "str"
                ],
                "releases": [
                    "str",
                    "list[str]",
                    "None",
                    "typing.Sequence[str]",
                    "dict[str, typing.Any]"
                ],
                "name": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "PackageInfo.from_json": {
            "name": "from_json",
            "location": 952,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "str",
                    "bool",
                    "None",
                    "tuple[bytes]",
                    "dict[T, T]"
                ],
                "info_json": [
                    "dict[, ]",
                    "str",
                    "bool",
                    "None",
                    "tuple[bytes]",
                    "dict[T, T]"
                ]
            }
        },
        "PackageInfo.to_dependency": {
            "name": "to_dependency",
            "location": 956,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PackageInfo.create_dependencies": {
            "name": "create_dependencies",
            "location": 960,
            "return": [
                "PackageInfo"
            ],
            "arguments": {
                "self": [],
                "force": [
                    "bool"
                ]
            }
        },
        "Package._get_urls_collection": {
            "name": "_get_urls_collection",
            "location": 1031,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Package.name": {
            "name": "name",
            "location": 1037,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Package.version": {
            "name": "version",
            "location": 1042,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Package.requirement": {
            "name": "requirement",
            "location": 1047,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Package.latest_sdist": {
            "name": "latest_sdist",
            "location": 1052,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Package.latest_wheels": {
            "name": "latest_wheels",
            "location": 1057,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Package.dependencies": {
            "name": "dependencies",
            "location": 1063,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Package.get_dependencies": {
            "name": "get_dependencies",
            "location": 1070,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Package.from_json": {
            "name": "from_json",
            "location": 1101,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "list[str]",
                    "dict[, ]"
                ],
                "package_json": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Package.pin_dependencies": {
            "name": "pin_dependencies",
            "location": 1115,
            "return": [
                "tuple[typing.Union[list[],list[str]]]"
            ],
            "arguments": {
                "self": [],
                "include_extras": [
                    "list[int]",
                    "list[tuple[typing.Union[int,typing.Any]]]",
                    "list[typing.Union[P,str,str,str,str,str,str,str,str,str]]",
                    "str"
                ]
            }
        },
        "Package.get_latest_lockfile": {
            "name": "get_latest_lockfile",
            "location": 1135,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Package.as_dict": {
            "name": "as_dict",
            "location": 1201,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Package.serialize": {
            "name": "serialize",
            "location": 1205,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "requirementslib-main/src/requirementslib/models/old_pip_utils.py": {
        "is_socket": {
            "name": "is_socket",
            "location": 33,
            "return": [
                "str",
                "Optional[str]",
                "Iterable[str]",
                "Dict[str, Any]",
                "Exception"
            ],
            "arguments": {
                "path": [
                    "str",
                    "IO[bytes]",
                    "IO",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "copy2_fixed": {
            "name": "copy2_fixed",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "src": [
                    "str"
                ],
                "dest": [
                    "str"
                ]
            }
        },
        "_copy2_ignoring_special_files": {
            "name": "_copy2_ignoring_special_files",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "src": [
                    "str",
                    "Union[str,bytes,IO[bytes]]",
                    "bytes",
                    "Union[str,bytes]",
                    "IO"
                ],
                "dest": [
                    "str",
                    "Union[str,bytes,IO[bytes]]",
                    "bytes",
                    "Union[str,bytes]",
                    "IO"
                ]
            }
        },
        "_copy_source_tree": {
            "name": "_copy_source_tree",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [
                    "str",
                    "bool",
                    "List[Tuple]",
                    "List[tuple]"
                ],
                "target": [
                    "str",
                    "bool",
                    "List[Tuple]",
                    "List[tuple]"
                ]
            }
        },
        "old_unpack_url": {
            "name": "old_unpack_url",
            "location": 111,
            "return": [
                "None",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "link": [
                    "raiden.tests.fuzz.utils.SendSecretRevealInNode",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "raiden.utils.Nonce",
                    "raiden.utils.BalanceHash",
                    "raiden.utils.AdditionalHash"
                ],
                "location": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "download": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "verbosity": [
                    "Optional[str]",
                    "str",
                    "List",
                    "Optional[Callable]",
                    "None",
                    "Callable"
                ],
                "download_dir": [
                    "str",
                    "None",
                    "Optional[str]",
                    "List[Tuple[int,str]]",
                    "List[tuple[Union[int,str]]]"
                ],
                "hashes": [
                    "str",
                    "None",
                    "Optional[str]",
                    "List[Tuple[int,str]]",
                    "List[tuple[Union[int,str]]]"
                ]
            }
        },
        "_copy_source_tree.ignore": {
            "name": "ignore",
            "location": 88,
            "return": [
                "List[Text]",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "d": [
                    "str"
                ],
                "names": [
                    "str",
                    "Type[T]",
                    "bool"
                ]
            }
        }
    },
    "requirementslib-main/src/requirementslib/models/pipfile.py": {
        "reorder_source_keys": {
            "name": "reorder_source_keys",
            "location": 37,
            "return": [],
            "arguments": {
                "data": [
                    "dict[, ]",
                    "int",
                    "typing.Mapping",
                    "bytes",
                    "dict[int, dict[, ]]"
                ]
            }
        },
        "PipfileLoader.validate": {
            "name": "validate",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "data": [
                    "dict[, ]",
                    "dict[str, dict[str, typing.Any]]",
                    "str",
                    "typing.Type"
                ]
            }
        },
        "PipfileLoader.ensure_package_sections": {
            "name": "ensure_package_sections",
            "location": 68,
            "return": [
                "dict[, ]",
                "dict[str, typing.Any]",
                "dict[str, float]"
            ],
            "arguments": {
                "cls": [
                    "list[]",
                    "list[str]",
                    "bytes",
                    "list[dict[str, typing.Any]]",
                    "bool",
                    "str",
                    "typing.Callable[..., None]"
                ],
                "data": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "dict[str, float]"
                ]
            }
        },
        "PipfileLoader.populate_source": {
            "name": "populate_source",
            "location": 88,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "typing.Iterable[typing.Union[str,os.PathLike]]",
                    "bool",
                    "None"
                ],
                "source": []
            }
        },
        "PipfileLoader.load": {
            "name": "load",
            "location": 100,
            "return": [],
            "arguments": {
                "cls": [
                    "Exception",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "f": [],
                "encoding": [
                    "None",
                    "str",
                    "list[str]",
                    "dict[str, str]",
                    "tuple[typing.Union[str,None,str,None]]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "PipfileLoader.__contains__": {
            "name": "__contains__",
            "location": 124,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "PipfileLoader.__getattribute__": {
            "name": "__getattribute__",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "typing.Iterable[str]",
                    "int"
                ]
            }
        },
        "Pipfile._get_path": {
            "name": "_get_path",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Pipfile._get_projectfile": {
            "name": "_get_projectfile",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Pipfile._get_pipfile": {
            "name": "_get_pipfile",
            "location": 162,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Pipfile.root": {
            "name": "root",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Pipfile.extended_keys": {
            "name": "extended_keys",
            "location": 171,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipfile.pipfile": {
            "name": "pipfile",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Pipfile.get_deps": {
            "name": "get_deps",
            "location": 184,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "dev": [
                    "bool"
                ],
                "only": [
                    "bool"
                ]
            }
        },
        "Pipfile.get": {
            "name": "get",
            "location": 195,
            "return": [],
            "arguments": {
                "self": [],
                "k": [
                    "int",
                    "str",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "Pipfile.__contains__": {
            "name": "__contains__",
            "location": 199,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "Pipfile.__getitem__": {
            "name": "__getitem__",
            "location": 206,
            "return": [],
            "arguments": {
                "self": [],
                "k": [
                    "str"
                ]
            }
        },
        "Pipfile.__getattr__": {
            "name": "__getattr__",
            "location": 229,
            "return": [
                "dict[, ]",
                "typing.Callable[typing.Any, typing.Any]",
                "None",
                "dict[str, set[typing.Any]]"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "str",
                    "typing.Type",
                    "int"
                ]
            }
        },
        "Pipfile.requires_python": {
            "name": "requires_python",
            "location": 242,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Pipfile.allow_prereleases": {
            "name": "allow_prereleases",
            "location": 251,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Pipfile.read_projectfile": {
            "name": "read_projectfile",
            "location": 256,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "list[str]",
                    "None"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "Pipfile.load_projectfile": {
            "name": "load_projectfile",
            "location": 269,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "None"
                ],
                "path": [],
                "create": [
                    "bool"
                ]
            }
        },
        "Pipfile.load": {
            "name": "load",
            "location": 294,
            "return": [],
            "arguments": {
                "cls": [],
                "path": [
                    "str",
                    "typing.Iterable[str]",
                    "None"
                ],
                "create": [
                    "bool"
                ]
            }
        },
        "Pipfile.write": {
            "name": "write",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipfile.dev_packages": {
            "name": "dev_packages",
            "location": 321,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Pipfile.packages": {
            "name": "packages",
            "location": 326,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Pipfile.dev_requirements": {
            "name": "dev_requirements",
            "location": 331,
            "return": [
                "typing.DefaultDict",
                "typing.MutableMapping",
                "typing.ValuesView",
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipfile.requirements": {
            "name": "requirements",
            "location": 343,
            "return": [
                "dict[typing.Any, tuple[typing.Union[typing.Any,typing.Any]]]",
                "typing.Match",
                "None",
                "dict[str, dict[str, typing.Any]]",
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipfile._read_pyproject": {
            "name": "_read_pyproject",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipfile.build_requires": {
            "name": "build_requires",
            "location": 370,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Pipfile.build_backend": {
            "name": "build_backend",
            "location": 377,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "requirementslib-main/src/requirementslib/models/project.py": {
        "_are_pipfile_entries_equal": {
            "name": "_are_pipfile_entries_equal",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {
                "a": [
                    "bool",
                    "List[str]",
                    "Sequence[Tuple[str, str]]"
                ],
                "b": [
                    "Dict",
                    "Dict[str,str]",
                    "float",
                    "Iterable",
                    "Optional[str]"
                ]
            }
        },
        "preferred_newlines": {
            "name": "preferred_newlines",
            "location": 39,
            "return": [
                "str",
                "float",
                "Text"
            ],
            "arguments": {
                "f": [
                    "Tuple[Union[bytes,bytes]]",
                    "bytes",
                    "Tuple[bytes,bytes]",
                    "IO",
                    "str",
                    "T"
                ]
            }
        },
        "ProjectFile.read": {
            "name": "read",
            "location": 54,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "Callable"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Optional[Union[int,Any]]",
                    "Any",
                    "str",
                    "Union[int,str]",
                    "None",
                    "Optional[bool]",
                    "Optional[int]"
                ],
                "location": [
                    "str",
                    "int"
                ],
                "model_cls": [
                    "str"
                ],
                "invalid_ok": [
                    "bool",
                    "str",
                    "Type",
                    "Dict[str,Any]",
                    "List[str]"
                ]
            }
        },
        "ProjectFile.write": {
            "name": "write",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectFile.dumps": {
            "name": "dumps",
            "location": 73,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.pipfile": {
            "name": "pipfile",
            "location": 94,
            "return": [
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.pipfile_location": {
            "name": "pipfile_location",
            "location": 98,
            "return": [
                "bool",
                "float",
                "Optional[Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.lockfile": {
            "name": "lockfile",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "new": [
                    "str"
                ]
            }
        },
        "Project.lockfile_location": {
            "name": "lockfile_location",
            "location": 106,
            "return": [
                "Set[str]",
                "dict",
                "List[str]",
                "List[object]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.is_synced": {
            "name": "is_synced",
            "location": 113,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project._get_pipfile_section": {
            "name": "_get_pipfile_section",
            "location": 116,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "develop": [
                    "str",
                    "bool"
                ],
                "insert": [
                    "bool",
                    "str",
                    "T",
                    "Dict"
                ]
            }
        },
        "Project.contains_key_in_pipfile": {
            "name": "contains_key_in_pipfile",
            "location": 126,
            "return": [
                "bool",
                "List[str]",
                "str",
                "Type",
                "Dict[str,str]",
                "Tuple[List[str],List[str]]",
                "Callable[[str],Any]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Dict"
                ]
            }
        },
        "Project.add_line_to_pipfile": {
            "name": "add_line_to_pipfile",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str",
                    "int"
                ],
                "develop": [
                    "str"
                ]
            }
        },
        "Project.remove_keys_from_pipfile": {
            "name": "remove_keys_from_pipfile",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keys": [
                    "str",
                    "List",
                    "Dict",
                    "Sequence[str]"
                ],
                "default": [
                    "str",
                    "Tuple",
                    "bool",
                    "Optional[Any]",
                    "Any",
                    "None"
                ],
                "develop": [
                    "str",
                    "int"
                ]
            }
        },
        "Project.remove_keys_from_lockfile": {
            "name": "remove_keys_from_lockfile",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keys": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "Project.difference_lockfile": {
            "name": "difference_lockfile",
            "location": 190,
            "return": [
                "FileDifference",
                "str",
                "IO",
                "Dict[str,Any]",
                "TextIO",
                "BinaryIO"
            ],
            "arguments": {
                "self": [],
                "lockfile": [
                    "str",
                    "Callable"
                ]
            }
        }
    },
    "requirementslib-main/src/requirementslib/models/requirements.py": {
        "file_req_from_parsed_line": {
            "name": "file_req_from_parsed_line",
            "location": 3068,
            "return": [
                "FileRequirement"
            ],
            "arguments": {
                "parsed_line": [
                    "str",
                    "list[]",
                    "list[str]"
                ]
            }
        },
        "vcs_req_from_parsed_line": {
            "name": "vcs_req_from_parsed_line",
            "location": 3096,
            "return": [
                "VCSRequirement"
            ],
            "arguments": {
                "parsed_line": [
                    "list[str]",
                    "dict[str, str]",
                    "tuple[]",
                    "typing.Sequence[str]",
                    "int"
                ]
            }
        },
        "named_req_from_parsed_line": {
            "name": "named_req_from_parsed_line",
            "location": 3142,
            "return": [
                "NamedRequirement"
            ],
            "arguments": {
                "parsed_line": [
                    "str"
                ]
            }
        },
        "Line.__init__": {
            "name": "__init__",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str",
                    "bytes"
                ],
                "extras": [
                    "None",
                    "typing.Iterable[str]",
                    "int",
                    "str",
                    "typing.Sequence[str]"
                ]
            }
        },
        "Line.__hash__": {
            "name": "__hash__",
            "location": 173,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.__repr__": {
            "name": "__repr__",
            "location": 189,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.__str__": {
            "name": "__str__",
            "location": 203,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.get_line": {
            "name": "get_line",
            "location": 209,
            "return": [
                "list[typing.Text]",
                "str"
            ],
            "arguments": {
                "self": [],
                "with_prefix": [
                    "bool"
                ],
                "with_markers": [
                    "bool"
                ],
                "with_hashes": [
                    "bool"
                ],
                "as_list": [
                    "bool"
                ]
            }
        },
        "Line.name_and_specifier": {
            "name": "name_and_specifier",
            "location": 256,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.split_hashes": {
            "name": "split_hashes",
            "location": 268,
            "return": [
                "tuple[typing.Union[str,bytes,list[]]]",
                "tuple[typing.Union[str,list[bytes]]]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "list[str]",
                    "list[dict[str, str]]",
                    "int",
                    "list[]"
                ],
                "line": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Line.line_with_prefix": {
            "name": "line_with_prefix",
            "location": 285,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Line.line_for_ireq": {
            "name": "line_for_ireq",
            "location": 290,
            "return": [
                "typing.Text",
                "list[str]",
                "dict[str, list[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.base_path": {
            "name": "base_path",
            "location": 347,
            "return": [
                "None",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.setup_py": {
            "name": "setup_py",
            "location": 363,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.setup_cfg": {
            "name": "setup_cfg",
            "location": 370,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.pyproject_toml": {
            "name": "pyproject_toml",
            "location": 377,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.specifier": {
            "name": "specifier",
            "location": 407,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int",
                "None"
            ],
            "arguments": {
                "self": [],
                "spec": []
            }
        },
        "Line.specifiers": {
            "name": "specifiers",
            "location": 446,
            "return": [
                "SpecifierSet",
                "None"
            ],
            "arguments": {
                "self": [],
                "specifiers": []
            }
        },
        "Line.get_requirement_specs": {
            "name": "get_requirement_specs",
            "location": 462,
            "return": [
                "list[]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "None",
                    "typing.Type",
                    "list[str]"
                ],
                "specifierset": [
                    "str",
                    "int",
                    "None",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Line.requirement": {
            "name": "requirement",
            "location": 471,
            "return": [
                "list[str]",
                "str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.populate_setup_paths": {
            "name": "populate_setup_paths",
            "location": 488,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.pyproject_requires": {
            "name": "pyproject_requires",
            "location": 505,
            "return": [
                "tuple[int]",
                "set[str]",
                "int",
                "str",
                "list[tuple[typing.Union[int,int,int]]]",
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.pyproject_backend": {
            "name": "pyproject_backend",
            "location": 519,
            "return": [
                "float",
                "str",
                "int",
                "dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.parse_hashes": {
            "name": "parse_hashes",
            "location": 539,
            "return": [
                "Line"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.parse_extras": {
            "name": "parse_extras",
            "location": 551,
            "return": [
                "Line"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.get_url": {
            "name": "get_url",
            "location": 590,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Line.name": {
            "name": "name",
            "location": 612,
            "return": [
                "str",
                "dict[str, str]",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Line.url": {
            "name": "url",
            "location": 623,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.link": {
            "name": "link",
            "location": 637,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.subdirectory": {
            "name": "subdirectory",
            "location": 644,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.is_wheel": {
            "name": "is_wheel",
            "location": 651,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.is_artifact": {
            "name": "is_artifact",
            "location": 658,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.is_vcs": {
            "name": "is_vcs",
            "location": 666,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.is_url": {
            "name": "is_url",
            "location": 678,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.is_remote_url": {
            "name": "is_remote_url",
            "location": 689,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Line.is_path": {
            "name": "is_path",
            "location": 694,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.is_file_url": {
            "name": "is_file_url",
            "location": 717,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.is_file": {
            "name": "is_file",
            "location": 732,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.is_named": {
            "name": "is_named",
            "location": 751,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.ref": {
            "name": "ref",
            "location": 762,
            "return": [
                "str",
                "typing.Sequence[typing.Any]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.ireq": {
            "name": "ireq",
            "location": 769,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.is_installable": {
            "name": "is_installable",
            "location": 776,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.wheel_kwargs": {
            "name": "wheel_kwargs",
            "location": 786,
            "return": [
                "int",
                "float",
                "typing.Pattern",
                "dict[str, str]",
                "dict[str, dict[str, typing.Any]]",
                "dict[str, dict[, ]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.get_setup_info": {
            "name": "get_setup_info",
            "location": 791,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Line.setup_info": {
            "name": "setup_info",
            "location": 815,
            "return": [
                "str",
                "list[dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "setup_info": []
            }
        },
        "Line._get_vcsrepo": {
            "name": "_get_vcsrepo",
            "location": 823,
            "return": [
                "VCSRepository"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.vcsrepo": {
            "name": "vcsrepo",
            "location": 894,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "repo": []
            }
        },
        "Line.parsed_url": {
            "name": "parsed_url",
            "location": 852,
            "return": [
                "str",
                "int",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.is_direct_url": {
            "name": "is_direct_url",
            "location": 859,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.metadata": {
            "name": "metadata",
            "location": 867,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.parsed_setup_cfg": {
            "name": "parsed_setup_cfg",
            "location": 874,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.parsed_setup_py": {
            "name": "parsed_setup_py",
            "location": 886,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.get_ireq": {
            "name": "get_ireq",
            "location": 912,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Line.parse_ireq": {
            "name": "parse_ireq",
            "location": 931,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line._parse_wheel": {
            "name": "_parse_wheel",
            "location": 939,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Line._parse_name_from_link": {
            "name": "_parse_name_from_link",
            "location": 951,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line._parse_name_from_line": {
            "name": "_parse_name_from_line",
            "location": 961,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Line._parse_name_from_path": {
            "name": "_parse_name_from_path",
            "location": 990,
            "return": [
                "str",
                "dict[, ]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.parse_name": {
            "name": "parse_name",
            "location": 1011,
            "return": [
                "Line"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line._parse_requirement_from_vcs": {
            "name": "_parse_requirement_from_vcs",
            "location": 1038,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Line.parse_requirement": {
            "name": "parse_requirement",
            "location": 1073,
            "return": [
                "Line"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.parse_link": {
            "name": "parse_link",
            "location": 1119,
            "return": [
                "None",
                "Line"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.parse_markers": {
            "name": "parse_markers",
            "location": 1182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.requirement_info": {
            "name": "requirement_info",
            "location": 1190,
            "return": [
                "tuple[typing.Union[None,str,set[str],list[str],tuple[],bool,typing.Counter,dict[, ]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.line_is_installable": {
            "name": "line_is_installable",
            "location": 1230,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.parse": {
            "name": "parse",
            "location": 1281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamedRequirement.get_requirement": {
            "name": "get_requirement",
            "location": 1320,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamedRequirement.parsed_line": {
            "name": "parsed_line",
            "location": 1328,
            "return": [
                "int",
                "Line"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamedRequirement.from_line": {
            "name": "from_line",
            "location": 1335,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "float"
                ],
                "line": [
                    "str",
                    "bool",
                    "set[]",
                    "dict[int, str]"
                ],
                "parsed_line": [
                    "None",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "NamedRequirement.from_pipfile": {
            "name": "from_pipfile",
            "location": 1363,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "int"
                ],
                "name": [
                    "str",
                    "dict[, ]"
                ],
                "pipfile": []
            }
        },
        "NamedRequirement.line_part": {
            "name": "line_part",
            "location": 1385,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NamedRequirement.pipfile_part": {
            "name": "pipfile_part",
            "location": 1393,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileRequirement.get_link_from_line": {
            "name": "get_link_from_line",
            "location": 1456,
            "return": [
                "LinkInfo"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "list[]",
                    "None",
                    "list[str]"
                ],
                "line": [
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "FileRequirement.setup_py_dir": {
            "name": "setup_py_dir",
            "location": 1560,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileRequirement.dependencies": {
            "name": "dependencies",
            "location": 1567,
            "return": [
                "tuple[typing.Union[dict[, typing.Union[str,typing.Any,int]],list[]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileRequirement.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 1590,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileRequirement.setup_info": {
            "name": "setup_info",
            "location": 1636,
            "return": [
                "dict[, ]",
                "dict[str, typing.Any]",
                "dict[typing.Any, dict[, ]]"
            ],
            "arguments": {
                "self": [],
                "setup_info": []
            }
        },
        "FileRequirement.get_uri": {
            "name": "get_uri",
            "location": 1643,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileRequirement.get_name": {
            "name": "get_name",
            "location": 1659,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileRequirement.get_link": {
            "name": "get_link",
            "location": 1669,
            "return": [
                "str",
                "list[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileRequirement.get_requirement": {
            "name": "get_requirement",
            "location": 1678,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileRequirement.parsed_line": {
            "name": "parsed_line",
            "location": 1700,
            "return": [
                "int",
                "Line"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileRequirement.is_local": {
            "name": "is_local",
            "location": 1707,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileRequirement.is_remote_artifact": {
            "name": "is_remote_artifact",
            "location": 1724,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileRequirement.is_direct_url": {
            "name": "is_direct_url",
            "location": 1736,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileRequirement.formatted_path": {
            "name": "formatted_path",
            "location": 1743,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileRequirement.from_line": {
            "name": "from_line",
            "location": 1753,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "list[]",
                    "int",
                    "typing.Callable[, ]"
                ],
                "line": [
                    "int",
                    "str"
                ],
                "editable": [
                    "None",
                    "str",
                    "list[]",
                    "int",
                    "typing.Callable[, ]"
                ],
                "extras": [
                    "None",
                    "str",
                    "list[]",
                    "int",
                    "typing.Callable[, ]"
                ],
                "parsed_line": [
                    "None",
                    "str",
                    "list[]",
                    "int",
                    "float",
                    "set[str]"
                ]
            }
        },
        "FileRequirement.from_pipfile": {
            "name": "from_pipfile",
            "location": 1759,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "None",
                    "dict[str, str]"
                ],
                "name": [
                    "str",
                    "None"
                ],
                "pipfile": []
            }
        },
        "FileRequirement.line_part": {
            "name": "line_part",
            "location": 1846,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileRequirement.pipfile_part": {
            "name": "pipfile_part",
            "location": 1869,
            "return": [
                "dict[typing.Union[list[],None], ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VCSRequirement.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 1956,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VCSRequirement.url": {
            "name": "url",
            "location": 1973,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VCSRequirement.get_link": {
            "name": "get_link",
            "location": 1982,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VCSRequirement.get_name": {
            "name": "get_name",
            "location": 1996,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VCSRequirement.vcs_uri": {
            "name": "vcs_uri",
            "location": 2005,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VCSRequirement.setup_info": {
            "name": "setup_info",
            "location": 2035,
            "return": [],
            "arguments": {
                "self": [],
                "setup_info": []
            }
        },
        "VCSRequirement.get_requirement": {
            "name": "get_requirement",
            "location": 2041,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VCSRequirement.repo": {
            "name": "repo",
            "location": 2109,
            "return": [
                "typing.Sequence[typing.Any]",
                "list[tuple[typing.Union[str,str]]]",
                "str",
                "None",
                "dict[str, typing.Any]",
                "bool",
                "float",
                "typing.TextIO"
            ],
            "arguments": {
                "self": []
            }
        },
        "VCSRequirement.get_checkout_dir": {
            "name": "get_checkout_dir",
            "location": 2120,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "src_dir": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "VCSRequirement.get_vcs_repo": {
            "name": "get_vcs_repo",
            "location": 2137,
            "return": [
                "VCSRepository"
            ],
            "arguments": {
                "self": [],
                "src_dir": [
                    "None",
                    "str"
                ],
                "checkout_dir": [
                    "None",
                    "str",
                    "bytes"
                ]
            }
        },
        "VCSRequirement.get_commit_hash": {
            "name": "get_commit_hash",
            "location": 2170,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "VCSRequirement.update_repo": {
            "name": "update_repo",
            "location": 2176,
            "return": [
                "list[]",
                "dict[, ]",
                "list[tuple[typing.Union[str,typing.Any]]]"
            ],
            "arguments": {
                "self": [],
                "src_dir": [
                    "None",
                    "list[str]",
                    "str",
                    "dict[, ]",
                    "list[]"
                ],
                "ref": [
                    "None",
                    "str",
                    "int",
                    "typing.Callable[[], typing.Any]",
                    "typing.Any"
                ]
            }
        },
        "VCSRequirement.locked_vcs_repo": {
            "name": "locked_vcs_repo",
            "location": 2189,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "src_dir": [
                    "None",
                    "bool",
                    "str",
                    "typing.TextIO"
                ]
            }
        },
        "VCSRequirement.from_pipfile": {
            "name": "from_pipfile",
            "location": 2233,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "dict[str, str]",
                    "None"
                ],
                "name": [
                    "str",
                    "list[str]"
                ],
                "pipfile": [
                    "str",
                    "dict[str, typing.Any]",
                    "tuple[object]"
                ]
            }
        },
        "VCSRequirement.from_line": {
            "name": "from_line",
            "location": 2285,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "list[]",
                    "int",
                    "typing.Callable[, ]"
                ],
                "line": [
                    "int",
                    "str"
                ],
                "editable": [
                    "None",
                    "str",
                    "list[]",
                    "int",
                    "typing.Callable[, ]"
                ],
                "extras": [
                    "None",
                    "str",
                    "list[]",
                    "int",
                    "typing.Callable[, ]"
                ],
                "parsed_line": [
                    "None",
                    "str",
                    "typing.Callable[pathlib.Path, bool]"
                ]
            }
        },
        "VCSRequirement.line_part": {
            "name": "line_part",
            "location": 2291,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "VCSRequirement._choose_vcs_source": {
            "name": "_choose_vcs_source",
            "location": 2324,
            "return": [],
            "arguments": {
                "pipfile": []
            }
        },
        "VCSRequirement.pipfile_part": {
            "name": "pipfile_part",
            "location": 2345,
            "return": [
                "dict[list[], typing.Union[dict[, ],dict[typing.Any, dict[typing.Any, typing.Any]],dict[typing.Any, str],list[tuple[typing.Union[typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any]]],dict[str, str],dict[str, None]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Requirement.__hash__": {
            "name": "__hash__",
            "location": 2405,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Requirement.get_name": {
            "name": "get_name",
            "location": 2409,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Requirement.name": {
            "name": "name",
            "location": 2416,
            "return": [
                "str",
                "list[str]",
                "dict[int, str]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Requirement.requirement": {
            "name": "requirement",
            "location": 2429,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Requirement.add_hashes": {
            "name": "add_hashes",
            "location": 2435,
            "return": [],
            "arguments": {
                "self": [],
                "hashes": [
                    "typing.Type",
                    "str",
                    "None"
                ]
            }
        },
        "Requirement.get_hashes_as_pip": {
            "name": "get_hashes_as_pip",
            "location": 2446,
            "return": [
                "typing.Text",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "as_list": [
                    "bool"
                ]
            }
        },
        "Requirement.hashes_as_pip": {
            "name": "hashes_as_pip",
            "location": 2460,
            "return": [
                "int",
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Requirement.markers_as_pip": {
            "name": "markers_as_pip",
            "location": 2467,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Requirement.extras_as_pip": {
            "name": "extras_as_pip",
            "location": 2475,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Requirement.commit_hash": {
            "name": "commit_hash",
            "location": 2485,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Requirement.get_specifiers": {
            "name": "get_specifiers",
            "location": 2496,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Requirement.update_name_from_path": {
            "name": "update_name_from_path",
            "location": 2502,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "list[pathlib.Path]"
                ]
            }
        },
        "Requirement.get_line_instance": {
            "name": "get_line_instance",
            "location": 2521,
            "return": [
                "Line"
            ],
            "arguments": {
                "self": []
            }
        },
        "Requirement.line_instance": {
            "name": "line_instance",
            "location": 2557,
            "return": [
                "int",
                "dict[, ]",
                "str",
                "tuple[typing.Union[typing.Any,typing.Any]]",
                "list[]",
                "typing.Iterator",
                "None"
            ],
            "arguments": {
                "self": [],
                "line_instance": []
            }
        },
        "Requirement.specifiers": {
            "name": "specifiers",
            "location": 2564,
            "return": [
                "str",
                "list[list[int]]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Requirement.is_vcs": {
            "name": "is_vcs",
            "location": 2616,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Requirement.build_backend": {
            "name": "build_backend",
            "location": 2621,
            "return": [
                "str",
                "bytes",
                "dict[, ]",
                "typing.Any",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Requirement.uses_pep517": {
            "name": "uses_pep517",
            "location": 2633,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Requirement.is_file_or_url": {
            "name": "is_file_or_url",
            "location": 2640,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Requirement.is_named": {
            "name": "is_named",
            "location": 2645,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Requirement.is_wheel": {
            "name": "is_wheel",
            "location": 2650,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Requirement.normalized_name": {
            "name": "normalized_name",
            "location": 2661,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Requirement.copy": {
            "name": "copy",
            "location": 2665,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Requirement.from_line": {
            "name": "from_line",
            "location": 2670,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "typing.Callable[, ]",
                    "tuple[]"
                ],
                "line": [
                    "str"
                ]
            }
        },
        "Requirement.from_ireq": {
            "name": "from_ireq",
            "location": 2723,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "typing.Mapping"
                ],
                "ireq": [
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "Requirement.from_metadata": {
            "name": "from_metadata",
            "location": 2727,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "int"
                ],
                "name": [
                    "str",
                    "int"
                ],
                "version": [
                    "str",
                    "int"
                ],
                "extras": [
                    "str",
                    "int"
                ],
                "markers": [
                    "str",
                    "int"
                ]
            }
        },
        "Requirement.from_pipfile": {
            "name": "from_pipfile",
            "location": 2733,
            "return": [
                "str",
                "set[str]",
                "dict[str, typing.Any]",
                "int",
                "tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal]]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool"
                ],
                "name": [
                    "list[str]",
                    "str"
                ],
                "pipfile": [
                    "dict[str, object]"
                ]
            }
        },
        "Requirement.as_line": {
            "name": "as_line",
            "location": 2778,
            "return": [
                "list[str]",
                "list[]",
                "str"
            ],
            "arguments": {
                "self": [],
                "sources": [
                    "list[str]"
                ],
                "include_hashes": [
                    "bool"
                ],
                "include_extras": [
                    "bool"
                ],
                "include_markers": [
                    "bool"
                ],
                "as_list": [
                    "bool"
                ]
            }
        },
        "Requirement.get_markers": {
            "name": "get_markers",
            "location": 2815,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Requirement.get_specifier": {
            "name": "get_specifier",
            "location": 2823,
            "return": [
                "Specifier",
                "LegacySpecifier"
            ],
            "arguments": {
                "self": []
            }
        },
        "Requirement.get_version": {
            "name": "get_version",
            "location": 2830,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Requirement.get_requirement": {
            "name": "get_requirement",
            "location": 2833,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Requirement.constraint_line": {
            "name": "constraint_line",
            "location": 2847,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Requirement.is_direct_url": {
            "name": "is_direct_url",
            "location": 2851,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Requirement.as_pipfile": {
            "name": "as_pipfile",
            "location": 2858,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Requirement.as_ireq": {
            "name": "as_ireq",
            "location": 2911,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Requirement.pipfile_entry": {
            "name": "pipfile_entry",
            "location": 2933,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Requirement.ireq": {
            "name": "ireq",
            "location": 2937,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Requirement.get_dependencies": {
            "name": "get_dependencies",
            "location": 2940,
            "return": [],
            "arguments": {
                "self": [],
                "sources": [
                    "None",
                    "str"
                ]
            }
        },
        "Requirement.get_abstract_dependencies": {
            "name": "get_abstract_dependencies",
            "location": 2960,
            "return": [],
            "arguments": {
                "self": [],
                "sources": [
                    "None",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Requirement.find_all_matches": {
            "name": "find_all_matches",
            "location": 2991,
            "return": [],
            "arguments": {
                "self": [],
                "sources": [
                    "None",
                    "str",
                    "dict[, ]",
                    "list[tuple[]]"
                ],
                "finder": [
                    "None",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "Requirement.run_requires": {
            "name": "run_requires",
            "location": 3010,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "sources": [
                    "None",
                    "int"
                ],
                "finder": [
                    "None",
                    "bool",
                    "str"
                ]
            }
        },
        "Requirement.merge_markers": {
            "name": "merge_markers",
            "location": 3034,
            "return": [
                "Requirement"
            ],
            "arguments": {
                "self": [],
                "markers": [
                    "str",
                    "bool",
                    "list['cirq.Qid']"
                ]
            }
        }
    },
    "requirementslib-main/src/requirementslib/models/resolvers.py": {
        "DependencyResolver.create": {
            "name": "create",
            "location": 38,
            "return": [
                "bool",
                "float",
                "int",
                "List[str]",
                "str",
                "Dict",
                "Tuple[Union[Type,Type]]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "None",
                    "float",
                    "Optional[int]",
                    "str",
                    "Type",
                    "Type[T]",
                    "utils.mssql_counters.Section"
                ],
                "finder": [
                    "str",
                    "bool",
                    "None",
                    "Exception"
                ],
                "allow_prereleases": [
                    "bool",
                    "Optional[str]",
                    "Callable",
                    "float",
                    "Optional[Callable[[Dict],bool]]",
                    "Dict"
                ],
                "get_all_hashes": [
                    "bool",
                    "Optional[str]",
                    "Callable",
                    "float",
                    "Optional[Callable[[Dict],bool]]",
                    "Dict"
                ]
            }
        },
        "DependencyResolver.dependencies": {
            "name": "dependencies",
            "location": 56,
            "return": [
                "List",
                "List[str]",
                "List[T]",
                "List[int]",
                "str",
                "List[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DependencyResolver.resolution": {
            "name": "resolution",
            "location": 60,
            "return": [
                "List",
                "str",
                "List[Dict]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DependencyResolver.add_abstract_dep": {
            "name": "add_abstract_dep",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dep": []
            }
        },
        "DependencyResolver.pin_deps": {
            "name": "pin_deps",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DependencyResolver.resolve": {
            "name": "resolve",
            "location": 125,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "root_nodes": [
                    "List[T]",
                    "List[int]",
                    "int"
                ],
                "max_rounds": [
                    "int",
                    "Sequence[T]",
                    "str"
                ]
            }
        },
        "DependencyResolver.get_hashes": {
            "name": "get_hashes",
            "location": 184,
            "return": [
                "int",
                "str",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DependencyResolver.get_hashes_for_one": {
            "name": "get_hashes_for_one",
            "location": 190,
            "return": [
                "Set",
                "str",
                "List[Dict]",
                "utils.mssql_counters.Section"
            ],
            "arguments": {
                "self": [],
                "ireq": [
                    "float",
                    "bool",
                    "Sequence[cirq.Qid]",
                    "cmk.utils.type_defs.UserId"
                ]
            }
        },
        "DependencyResolver.allow_all_wheels": {
            "name": "allow_all_wheels",
            "location": 231,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DependencyResolver.allow_all_wheels._wheel_supported": {
            "name": "_wheel_supported",
            "location": 239,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "tags": [
                    "None",
                    "str",
                    "List[str]"
                ]
            }
        },
        "DependencyResolver.allow_all_wheels._wheel_support_index_min": {
            "name": "_wheel_support_index_min",
            "location": 243,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "tags": [
                    "None",
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "requirementslib-main/src/requirementslib/models/setup_info.py": {
        "pep517_subprocess_runner": {
            "name": "pep517_subprocess_runner",
            "location": 97,
            "return": [],
            "arguments": {
                "cmd": [],
                "cwd": [],
                "extra_environ": []
            }
        },
        "make_base_requirements": {
            "name": "make_base_requirements",
            "location": 150,
            "return": [],
            "arguments": {
                "reqs": []
            }
        },
        "suppress_unparsable": {
            "name": "suppress_unparsable",
            "location": 167,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "setuptools_parse_setup_cfg": {
            "name": "setuptools_parse_setup_cfg",
            "location": 516,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "parse_setup_cfg": {
            "name": "parse_setup_cfg",
            "location": 544,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "_suppress_distutils_logs": {
            "name": "_suppress_distutils_logs",
            "location": 549,
            "return": [],
            "arguments": {}
        },
        "build_pep517": {
            "name": "build_pep517",
            "location": 568,
            "return": [],
            "arguments": {
                "source_dir": [],
                "build_dir": [],
                "config_settings": [],
                "dist_type": []
            }
        },
        "_get_src_dir": {
            "name": "_get_src_dir",
            "location": 588,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "ensure_reqs": {
            "name": "ensure_reqs",
            "location": 605,
            "return": [],
            "arguments": {
                "reqs": []
            }
        },
        "any_valid_values": {
            "name": "any_valid_values",
            "location": 622,
            "return": [],
            "arguments": {
                "data": [],
                "fields": []
            }
        },
        "_prepare_wheel_building_kwargs": {
            "name": "_prepare_wheel_building_kwargs",
            "location": 634,
            "return": [],
            "arguments": {
                "ireq": [],
                "src_root": [],
                "src_dir": [],
                "editable": []
            }
        },
        "_is_venv_dir": {
            "name": "_is_venv_dir",
            "location": 687,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "iter_metadata": {
            "name": "iter_metadata",
            "location": 699,
            "return": [],
            "arguments": {
                "path": [],
                "pkg_name": [],
                "metadata_type": []
            }
        },
        "find_egginfo": {
            "name": "find_egginfo",
            "location": 720,
            "return": [],
            "arguments": {
                "target": [],
                "pkg_name": []
            }
        },
        "find_distinfo": {
            "name": "find_distinfo",
            "location": 734,
            "return": [],
            "arguments": {
                "target": [],
                "pkg_name": []
            }
        },
        "get_distinfo_dist": {
            "name": "get_distinfo_dist",
            "location": 750,
            "return": [],
            "arguments": {
                "path": [],
                "pkg_name": []
            }
        },
        "get_egginfo_dist": {
            "name": "get_egginfo_dist",
            "location": 764,
            "return": [],
            "arguments": {
                "path": [],
                "pkg_name": []
            }
        },
        "get_metadata": {
            "name": "get_metadata",
            "location": 780,
            "return": [],
            "arguments": {
                "path": [],
                "pkg_name": [],
                "metadata_type": []
            }
        },
        "get_extra_name_from_marker": {
            "name": "get_extra_name_from_marker",
            "location": 795,
            "return": [],
            "arguments": {
                "marker": []
            }
        },
        "get_metadata_from_wheel": {
            "name": "get_metadata_from_wheel",
            "location": 807,
            "return": [],
            "arguments": {
                "wheel_path": []
            }
        },
        "get_metadata_from_dist": {
            "name": "get_metadata_from_dist",
            "location": 840,
            "return": [],
            "arguments": {
                "dist": []
            }
        },
        "ast_parse_setup_py": {
            "name": "ast_parse_setup_py",
            "location": 884,
            "return": [],
            "arguments": {
                "path": [],
                "raising": []
            }
        },
        "run_setup": {
            "name": "run_setup",
            "location": 888,
            "return": [],
            "arguments": {
                "script_path": [],
                "egg_base": []
            }
        },
        "BuildEnv.pip_install": {
            "name": "pip_install",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "reqs": []
            }
        },
        "HookCaller.__init__": {
            "name": "__init__",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "source_dir": [],
                "build_backend": [],
                "backend_path": []
            }
        },
        "SetupReader.read_setup_py": {
            "name": "read_setup_py",
            "location": 182,
            "return": [],
            "arguments": {
                "cls": [],
                "file": [],
                "raising": []
            }
        },
        "SetupReader.read_setup_cfg": {
            "name": "read_setup_cfg",
            "location": 212,
            "return": [],
            "arguments": {
                "file": []
            }
        },
        "SetupReader._find_setup_call": {
            "name": "_find_setup_call",
            "location": 260,
            "return": [],
            "arguments": {
                "cls": [],
                "elements": []
            }
        },
        "SetupReader._find_sub_setup_call": {
            "name": "_find_sub_setup_call",
            "location": 310,
            "return": [],
            "arguments": {
                "cls": [],
                "elements": []
            }
        },
        "SetupReader._find_install_requires": {
            "name": "_find_install_requires",
            "location": 328,
            "return": [],
            "arguments": {
                "cls": [],
                "call": [],
                "body": []
            }
        },
        "SetupReader._find_extras_require": {
            "name": "_find_extras_require",
            "location": 369,
            "return": [],
            "arguments": {
                "cls": [],
                "call": [],
                "body": []
            }
        },
        "SetupReader._find_single_string": {
            "name": "_find_single_string",
            "location": 431,
            "return": [],
            "arguments": {
                "cls": [],
                "call": [],
                "body": [],
                "name": []
            }
        },
        "SetupReader._find_in_call": {
            "name": "_find_in_call",
            "location": 473,
            "return": [],
            "arguments": {
                "call": [],
                "name": []
            }
        },
        "SetupReader._find_call_kwargs": {
            "name": "_find_call_kwargs",
            "location": 480,
            "return": [],
            "arguments": {
                "call": []
            }
        },
        "SetupReader._find_variable_in_body": {
            "name": "_find_variable_in_body",
            "location": 489,
            "return": [],
            "arguments": {
                "body": [],
                "name": []
            }
        },
        "SetupReader._find_in_dict": {
            "name": "_find_in_dict",
            "location": 509,
            "return": [],
            "arguments": {
                "dict_": [],
                "name": []
            }
        },
        "_suppress_distutils_logs._log": {
            "name": "_log",
            "location": 559,
            "return": [],
            "arguments": {
                "log": [],
                "level": [],
                "msg": [],
                "args": []
            }
        },
        "any_valid_values.is_valid": {
            "name": "is_valid",
            "location": 623,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "ScandirCloser.__init__": {
            "name": "__init__",
            "location": 668,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "ScandirCloser.__next__": {
            "name": "__next__",
            "location": 671,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScandirCloser.__iter__": {
            "name": "__iter__",
            "location": 674,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScandirCloser.next": {
            "name": "next",
            "location": 677,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScandirCloser.close": {
            "name": "close",
            "location": 680,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseRequirement.__str__": {
            "name": "__str__",
            "location": 949,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseRequirement.as_dict": {
            "name": "as_dict",
            "location": 953,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseRequirement.as_tuple": {
            "name": "as_tuple",
            "location": 957,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseRequirement.from_string": {
            "name": "from_string",
            "location": 963,
            "return": [],
            "arguments": {
                "cls": [],
                "line": []
            }
        },
        "BaseRequirement.from_req": {
            "name": "from_req",
            "location": 971,
            "return": [],
            "arguments": {
                "cls": [],
                "req": []
            }
        },
        "Extra.__str__": {
            "name": "__str__",
            "location": 989,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Extra.add": {
            "name": "add",
            "location": 995,
            "return": [],
            "arguments": {
                "self": [],
                "req": []
            }
        },
        "Extra.as_dict": {
            "name": "as_dict",
            "location": 1003,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SetupInfo.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 1032,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SetupInfo.get_build_backend": {
            "name": "get_build_backend",
            "location": 1036,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SetupInfo.requires": {
            "name": "requires",
            "location": 1041,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SetupInfo.extras": {
            "name": "extras",
            "location": 1049,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SetupInfo.version": {
            "name": "version",
            "location": 1064,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SetupInfo.egg_base": {
            "name": "egg_base",
            "location": 1072,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SetupInfo.update_from_dict": {
            "name": "update_from_dict",
            "location": 1091,
            "return": [],
            "arguments": {
                "self": [],
                "metadata": []
            }
        },
        "SetupInfo.get_extras_from_ireq": {
            "name": "get_extras_from_ireq",
            "location": 1139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SetupInfo.parse_setup_cfg": {
            "name": "parse_setup_cfg",
            "location": 1150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SetupInfo.parse_setup_py": {
            "name": "parse_setup_py",
            "location": 1162,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SetupInfo.run_setup": {
            "name": "run_setup",
            "location": 1171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SetupInfo.pep517_config": {
            "name": "pep517_config",
            "location": 1209,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SetupInfo.build_wheel": {
            "name": "build_wheel",
            "location": 1214,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SetupInfo.build_sdist": {
            "name": "build_sdist",
            "location": 1253,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SetupInfo.build": {
            "name": "build",
            "location": 1285,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SetupInfo.reload": {
            "name": "reload",
            "location": 1312,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SetupInfo.get_metadata_from_wheel": {
            "name": "get_metadata_from_wheel",
            "location": 1326,
            "return": [],
            "arguments": {
                "self": [],
                "wheel_path": []
            }
        },
        "SetupInfo.get_egg_metadata": {
            "name": "get_egg_metadata",
            "location": 1337,
            "return": [],
            "arguments": {
                "self": [],
                "metadata_dir": [],
                "metadata_type": []
            }
        },
        "SetupInfo.populate_metadata": {
            "name": "populate_metadata",
            "location": 1366,
            "return": [],
            "arguments": {
                "self": [],
                "metadata": []
            }
        },
        "SetupInfo.run_pyproject": {
            "name": "run_pyproject",
            "location": 1399,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SetupInfo.get_initial_info": {
            "name": "get_initial_info",
            "location": 1422,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SetupInfo.get_info": {
            "name": "get_info",
            "location": 1451,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SetupInfo.as_dict": {
            "name": "as_dict",
            "location": 1475,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SetupInfo.from_requirement": {
            "name": "from_requirement",
            "location": 1496,
            "return": [],
            "arguments": {
                "cls": [],
                "requirement": [],
                "finder": []
            }
        },
        "SetupInfo.from_ireq": {
            "name": "from_ireq",
            "location": 1504,
            "return": [],
            "arguments": {
                "cls": [],
                "ireq": [],
                "subdir": [],
                "finder": [],
                "session": []
            }
        },
        "SetupInfo.create": {
            "name": "create",
            "location": 1597,
            "return": [],
            "arguments": {
                "cls": [],
                "base_dir": [],
                "subdirectory": [],
                "ireq": [],
                "kwargs": [],
                "stack": []
            }
        },
        "SetupReader.read_setup_py.caller": {
            "name": "caller",
            "location": 195,
            "return": [],
            "arguments": {
                "func": []
            }
        }
    },
    "requirementslib-main/src/requirementslib/models/url.py": {
        "_get_parsed_url": {
            "name": "_get_parsed_url",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "remove_password_from_url": {
            "name": "remove_password_from_url",
            "location": 52,
            "return": [],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "update_url_name_and_fragment": {
            "name": "update_url_name_and_fragment",
            "location": 478,
            "return": [],
            "arguments": {
                "name_with_extras": [
                    "str",
                    "dict[, ]",
                    "None",
                    "typing.Type",
                    "list[str]"
                ],
                "ref": [
                    "str"
                ],
                "parsed_dict": []
            }
        },
        "URI._parse_query": {
            "name": "_parse_query",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URI._parse_fragment": {
            "name": "_parse_fragment",
            "location": 125,
            "return": [
                "URI"
            ],
            "arguments": {
                "self": []
            }
        },
        "URI._parse_auth": {
            "name": "_parse_auth",
            "location": 156,
            "return": [
                "URI"
            ],
            "arguments": {
                "self": []
            }
        },
        "URI.get_password": {
            "name": "get_password",
            "location": 177,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "unquote": [
                    "bool"
                ],
                "include_token": [
                    "bool"
                ]
            }
        },
        "URI.get_username": {
            "name": "get_username",
            "location": 184,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "unquote": [
                    "bool"
                ]
            }
        },
        "URI.parse_subdirectory": {
            "name": "parse_subdirectory",
            "location": 192,
            "return": [
                "tuple[typing.Optional[str]]"
            ],
            "arguments": {
                "url_part": [
                    "str"
                ]
            }
        },
        "URI.get_parsed_url": {
            "name": "get_parsed_url",
            "location": 204,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "list[]",
                    "list[int]",
                    "tuple[str]",
                    "list[str]",
                    "bool"
                ],
                "url": [
                    "str"
                ]
            }
        },
        "URI.parse": {
            "name": "parse",
            "location": 220,
            "return": [],
            "arguments": {
                "cls": [],
                "url": [
                    "str"
                ]
            }
        },
        "URI.to_string": {
            "name": "to_string",
            "location": 257,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "escape_password": [
                    "bool"
                ],
                "unquote": [
                    "bool"
                ],
                "direct": [
                    "None",
                    "str",
                    "bool"
                ],
                "strip_ssh": [
                    "bool"
                ],
                "strip_ref": [
                    "bool"
                ],
                "strip_name": [
                    "bool"
                ],
                "strip_subdir": [
                    "bool"
                ]
            }
        },
        "URI.get_host_port_path": {
            "name": "get_host_port_path",
            "location": 338,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "strip_ref": [
                    "bool"
                ]
            }
        },
        "URI.hidden_auth": {
            "name": "hidden_auth",
            "location": 349,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "URI.name_with_extras": {
            "name": "name_with_extras",
            "location": 361,
            "return": [
                "typing.Text",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "URI.as_link": {
            "name": "as_link",
            "location": 371,
            "return": [
                "tuple[str]",
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "URI.bare_url": {
            "name": "bare_url",
            "location": 379,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URI.url_without_fragment_or_ref": {
            "name": "url_without_fragment_or_ref",
            "location": 391,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URI.url_without_fragment": {
            "name": "url_without_fragment",
            "location": 402,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URI.url_without_ref": {
            "name": "url_without_ref",
            "location": 412,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URI.base_url": {
            "name": "base_url",
            "location": 422,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URI.full_url": {
            "name": "full_url",
            "location": 432,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URI.secret": {
            "name": "secret",
            "location": 437,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URI.safe_string": {
            "name": "safe_string",
            "location": 442,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URI.unsafe_string": {
            "name": "unsafe_string",
            "location": 447,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URI.uri_escape": {
            "name": "uri_escape",
            "location": 452,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URI.is_installable": {
            "name": "is_installable",
            "location": 457,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URI.is_vcs": {
            "name": "is_vcs",
            "location": 462,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "URI.is_file_url": {
            "name": "is_file_url",
            "location": 469,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "URI.__str__": {
            "name": "__str__",
            "location": 473,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "requirementslib-main/src/requirementslib/models/utils.py": {
        "filter_none": {
            "name": "filter_none",
            "location": 96,
            "return": [
                "bool"
            ],
            "arguments": {
                "k": [
                    "typing.Iterable[dict[str, typing.Any]]",
                    "str"
                ],
                "v": [
                    "typing.Iterable[dict[str, typing.Any]]",
                    "str"
                ]
            }
        },
        "filter_dict": {
            "name": "filter_dict",
            "location": 103,
            "return": [
                "dict[tuple[typing.Union[str,bool]], tuple[typing.Union[str,bool]]]"
            ],
            "arguments": {
                "dict_": [
                    "dict[, ]",
                    "dict[str, bool]",
                    "dict[str, str]"
                ]
            }
        },
        "optional_instance_of": {
            "name": "optional_instance_of",
            "location": 108,
            "return": [],
            "arguments": {
                "cls": [
                    "tuple[str]",
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "create_link": {
            "name": "create_link",
            "location": 113,
            "return": [
                "Link"
            ],
            "arguments": {
                "link": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "tomlkit_value_to_python": {
            "name": "tomlkit_value_to_python",
            "location": 123,
            "return": [
                "list[]",
                "str",
                "Item"
            ],
            "arguments": {
                "toml_value": []
            }
        },
        "tomlkit_dict_to_python": {
            "name": "tomlkit_dict_to_python",
            "location": 144,
            "return": [
                "dict[, ]",
                "None"
            ],
            "arguments": {
                "toml_dict": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "dict[str, int]"
                ]
            }
        },
        "get_url_name": {
            "name": "get_url_name",
            "location": 177,
            "return": [],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "init_requirement": {
            "name": "init_requirement",
            "location": 190,
            "return": [],
            "arguments": {
                "name": [
                    "str",
                    "list[str]",
                    "None",
                    "bool"
                ]
            }
        },
        "extras_to_string": {
            "name": "extras_to_string",
            "location": 205,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "extras": [
                    "str"
                ]
            }
        },
        "parse_extras": {
            "name": "parse_extras",
            "location": 223,
            "return": [
                "list[]"
            ],
            "arguments": {
                "extras_str": [
                    "str"
                ]
            }
        },
        "specs_to_string": {
            "name": "specs_to_string",
            "location": 238,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "specs": [
                    "str",
                    "typing.Type",
                    "None"
                ]
            }
        },
        "build_vcs_uri": {
            "name": "build_vcs_uri",
            "location": 258,
            "return": [
                "str"
            ],
            "arguments": {
                "vcs": [
                    "str",
                    "None",
                    "int"
                ],
                "uri": [
                    "str"
                ],
                "name": [
                    "None",
                    "str",
                    "bool",
                    "float"
                ],
                "ref": [
                    "None",
                    "str",
                    "int"
                ],
                "subdirectory": [
                    "None",
                    "str",
                    "int"
                ],
                "extras": [
                    "None",
                    "str",
                    "dict[str, typing.Any]",
                    "bool"
                ]
            }
        },
        "_get_parsed_url": {
            "name": "_get_parsed_url",
            "location": 286,
            "return": [
                "str",
                "dict[str, typing.Any]"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "convert_direct_url_to_url": {
            "name": "convert_direct_url_to_url",
            "location": 308,
            "return": [
                "str",
                "dict[str, str]",
                "None",
                "dict[str, typing.Union[bytes,str]]",
                "dict[, ]",
                "dict[str, None]"
            ],
            "arguments": {
                "direct_url": [
                    "str",
                    "dict[str, str]"
                ]
            }
        },
        "convert_url_to_direct_url": {
            "name": "convert_url_to_direct_url",
            "location": 349,
            "return": [
                "str",
                "list[str]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "list[str]"
                ],
                "name": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "get_version": {
            "name": "get_version",
            "location": 398,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "pipfile_entry": []
            }
        },
        "strip_extras_markers_from_requirement": {
            "name": "strip_extras_markers_from_requirement",
            "location": 413,
            "return": [
                "float",
                "int",
                "None"
            ],
            "arguments": {
                "req": [
                    "float",
                    "None",
                    "int"
                ]
            }
        },
        "_strip_extras_markers": {
            "name": "_strip_extras_markers",
            "location": 437,
            "return": [],
            "arguments": {
                "marker": []
            }
        },
        "get_setuptools_version": {
            "name": "get_setuptools_version",
            "location": 460,
            "return": [],
            "arguments": {}
        },
        "get_default_pyproject_backend": {
            "name": "get_default_pyproject_backend",
            "location": 470,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "get_pyproject": {
            "name": "get_pyproject",
            "location": 480,
            "return": [
                "None",
                "tuple[typing.Union[str,typing.Any,list[typing.Text],dict[str, typing.Any]]]"
            ],
            "arguments": {
                "path": []
            }
        },
        "split_markers_from_line": {
            "name": "split_markers_from_line",
            "location": 523,
            "return": [
                "tuple[typing.Optional[str]]"
            ],
            "arguments": {
                "line": [
                    "str"
                ]
            }
        },
        "split_vcs_method_from_uri": {
            "name": "split_vcs_method_from_uri",
            "location": 543,
            "return": [
                "tuple[typing.Union[frozenset,float,list[str],dict[str, float],str]]"
            ],
            "arguments": {
                "uri": [
                    "str"
                ]
            }
        },
        "split_ref_from_uri": {
            "name": "split_ref_from_uri",
            "location": 555,
            "return": [
                "tuple[typing.Optional[str]]"
            ],
            "arguments": {
                "uri": [
                    "str",
                    "int",
                    "None",
                    "typing.Type"
                ]
            }
        },
        "validate_vcs": {
            "name": "validate_vcs",
            "location": 576,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "str",
                    "list[]",
                    "dict[str, typing.Any]"
                ],
                "attr_": [
                    "str",
                    "list[]",
                    "dict[str, typing.Any]"
                ],
                "value": [
                    "int",
                    "typing.Sequence[]",
                    "float",
                    "None"
                ]
            }
        },
        "validate_path": {
            "name": "validate_path",
            "location": 581,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "int",
                    "None",
                    "typing.MutableMapping",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "attr_": [
                    "int",
                    "None",
                    "typing.MutableMapping",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "value": [
                    "str",
                    "None",
                    "bool"
                ]
            }
        },
        "validate_markers": {
            "name": "validate_markers",
            "location": 586,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "str",
                    "list[]",
                    "dict[str, typing.Any]"
                ],
                "attr_": [
                    "str",
                    "float",
                    "typing.Any",
                    "None"
                ],
                "value": [
                    "str",
                    "float",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "validate_specifiers": {
            "name": "validate_specifiers",
            "location": 593,
            "return": [
                "bool"
            ],
            "arguments": {
                "instance": [
                    "str",
                    "list[]",
                    "dict[str, typing.Any]"
                ],
                "attr_": [
                    "str",
                    "list[]",
                    "dict[str, typing.Any]"
                ],
                "value": [
                    "str",
                    "None",
                    "list[str]"
                ]
            }
        },
        "key_from_ireq": {
            "name": "key_from_ireq",
            "location": 602,
            "return": [
                "str"
            ],
            "arguments": {
                "ireq": [
                    "typing.Any",
                    "str",
                    "None"
                ]
            }
        },
        "key_from_req": {
            "name": "key_from_req",
            "location": 610,
            "return": [
                "dict[str, str]",
                "set[str]",
                "str"
            ],
            "arguments": {
                "req": [
                    "str",
                    "dict[, ]",
                    "dict[int, str]"
                ]
            }
        },
        "_requirement_to_str_lowercase_name": {
            "name": "_requirement_to_str_lowercase_name",
            "location": 623,
            "return": [
                "str"
            ],
            "arguments": {
                "requirement": [
                    "list[dict[str, typing.Any]]",
                    "typing.Mapping",
                    "dict[str, typing.Any]",
                    "dict[str, int]",
                    "list[str]"
                ]
            }
        },
        "format_requirement": {
            "name": "format_requirement",
            "location": 652,
            "return": [
                "str"
            ],
            "arguments": {
                "ireq": [
                    "str"
                ]
            }
        },
        "format_specifier": {
            "name": "format_specifier",
            "location": 678,
            "return": [
                "str"
            ],
            "arguments": {
                "ireq": [
                    "str",
                    "bool",
                    "typing.Sequence[str]"
                ]
            }
        },
        "get_pinned_version": {
            "name": "get_pinned_version",
            "location": 693,
            "return": [],
            "arguments": {
                "ireq": [
                    "str",
                    "typing.Mapping",
                    "dict[, ]"
                ]
            }
        },
        "is_pinned_requirement": {
            "name": "is_pinned_requirement",
            "location": 731,
            "return": [
                "bool"
            ],
            "arguments": {
                "ireq": [
                    "str",
                    "int"
                ]
            }
        },
        "as_tuple": {
            "name": "as_tuple",
            "location": 755,
            "return": [
                "tuple[tuple[]]"
            ],
            "arguments": {
                "ireq": [
                    "int",
                    "float"
                ]
            }
        },
        "full_groupby": {
            "name": "full_groupby",
            "location": 768,
            "return": [],
            "arguments": {
                "iterable": [
                    "str",
                    "list[T]",
                    "list[P]"
                ],
                "key": [
                    "None",
                    "str",
                    "typing.Any",
                    "float",
                    "int",
                    "list[T]",
                    "list[P]"
                ]
            }
        },
        "flat_map": {
            "name": "flat_map",
            "location": 774,
            "return": [],
            "arguments": {
                "fn": [
                    "list[pathlib.Path]",
                    "typing.Callable[, ]",
                    "bool",
                    "str"
                ],
                "collection": [
                    "list[pathlib.Path]",
                    "typing.Callable[, ]",
                    "bool",
                    "str"
                ]
            }
        },
        "lookup_table": {
            "name": "lookup_table",
            "location": 780,
            "return": [],
            "arguments": {
                "values": [
                    "list[dict[str, typing.Any]]",
                    "dict[str, typing.Any]",
                    "str"
                ],
                "key": [
                    "None",
                    "str",
                    "dict[, ]",
                    "typing.Callable[, ]",
                    "list[str]"
                ],
                "keyval": [
                    "None",
                    "list[typing.Any]",
                    "list[str]",
                    "dict[str, Exception]",
                    "list[float]",
                    "str",
                    "int"
                ],
                "unique": [
                    "bool"
                ],
                "use_lists": [
                    "bool"
                ]
            }
        },
        "name_from_req": {
            "name": "name_from_req",
            "location": 841,
            "return": [],
            "arguments": {
                "req": [
                    "str",
                    "dict[, ]",
                    "dict[str, int]"
                ]
            }
        },
        "make_install_requirement": {
            "name": "make_install_requirement",
            "location": 851,
            "return": [],
            "arguments": {
                "name": [
                    "str",
                    "bytes"
                ],
                "version": [
                    "None",
                    "str"
                ],
                "extras": [
                    "str",
                    "list[str]"
                ],
                "markers": [
                    "None",
                    "str"
                ],
                "constraint": [
                    "bool"
                ]
            }
        },
        "version_from_ireq": {
            "name": "version_from_ireq",
            "location": 888,
            "return": [],
            "arguments": {
                "ireq": [
                    "bool",
                    "None",
                    "str"
                ]
            }
        },
        "_get_requires_python": {
            "name": "_get_requires_python",
            "location": 901,
            "return": [
                "None",
                "str",
                "list[str]",
                "dict[, ]",
                "int",
                "set[str]"
            ],
            "arguments": {
                "candidate": [
                    "str",
                    "list[V]",
                    "typing.Type",
                    "typing.Callable[, ]"
                ]
            }
        },
        "clean_requires_python": {
            "name": "clean_requires_python",
            "location": 910,
            "return": [
                "list[\"Name\"]"
            ],
            "arguments": {
                "candidates": [
                    "list[\"Name\"]"
                ]
            }
        },
        "fix_requires_python_marker": {
            "name": "fix_requires_python_marker",
            "location": 938,
            "return": [],
            "arguments": {
                "requires_python": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[str, list[typing.Any]]",
                    "list[list[str]]",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "normalize_name": {
            "name": "normalize_name",
            "location": 964,
            "return": [],
            "arguments": {
                "pkg": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_name_variants": {
            "name": "get_name_variants",
            "location": 977,
            "return": [
                "set[str]"
            ],
            "arguments": {
                "pkg": [
                    "str"
                ]
            }
        },
        "read_source": {
            "name": "read_source",
            "location": 997,
            "return": [],
            "arguments": {
                "path": [
                    "str"
                ],
                "encoding": [
                    "typing.Text"
                ]
            }
        },
        "expand_env_variables": {
            "name": "expand_env_variables",
            "location": 1011,
            "return": [],
            "arguments": {
                "line": [
                    "str"
                ]
            }
        },
        "expand_env_variables.replace_with_env": {
            "name": "replace_with_env",
            "location": 1021,
            "return": [],
            "arguments": {
                "match": []
            }
        }
    },
    "requirementslib-main/src/requirementslib/models/vcs.py": {
        "VCSRepository.get_parsed_url": {
            "name": "get_parsed_url",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VCSRepository.get_repo_backend": {
            "name": "get_repo_backend",
            "location": 39,
            "return": [
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "VCSRepository.is_local": {
            "name": "is_local",
            "location": 54,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "VCSRepository.obtain": {
            "name": "obtain",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "verbosity": [
                    "int",
                    "str"
                ]
            }
        },
        "VCSRepository.checkout_ref": {
            "name": "checkout_ref",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "Callable",
                    "Callable[..., T]",
                    "bool"
                ]
            }
        },
        "VCSRepository.update": {
            "name": "update",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "str",
                    "Sequence[Any]"
                ]
            }
        },
        "VCSRepository.get_commit_hash": {
            "name": "get_commit_hash",
            "location": 113,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "str",
                    "None",
                    "bool",
                    "TextIO",
                    "Callable",
                    "int"
                ]
            }
        },
        "VCSRepository.monkeypatch_pip": {
            "name": "monkeypatch_pip",
            "location": 119,
            "return": [
                "Tuple[str]",
                "str",
                "bool",
                "Iterable[str]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "requirementslib-main/src/requirementslib/models/__init__.py": {},
    "requirementslib-main/tasks/__init__.py": {
        "_get_git_root": {
            "name": "_get_git_root",
            "location": 34,
            "return": [
                "Path",
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "_get_branch": {
            "name": "_get_branch",
            "location": 38,
            "return": [
                "str",
                "Type[Any]"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "find_version": {
            "name": "find_version",
            "location": 42,
            "return": [
                "bool",
                "str",
                "Union[int, float, complex]"
            ],
            "arguments": {}
        },
        "typecheck": {
            "name": "typecheck",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "str"
                ]
            }
        },
        "clean": {
            "name": "clean",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "_read_version": {
            "name": "_read_version",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "_write_version": {
            "name": "_write_version",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "v": [
                    "str",
                    "int",
                    "Optional[str]",
                    "List[str]",
                    "None",
                    "AnyStr",
                    "Type"
                ]
            }
        },
        "_render_log": {
            "name": "_render_log",
            "location": 93,
            "return": [
                "Dict[str,Any]",
                "str",
                "List[bytes]",
                "Iterable[float]",
                "Type",
                "int"
            ],
            "arguments": {}
        },
        "_bump_release": {
            "name": "_bump_release",
            "location": 122,
            "return": [
                "int",
                "Dict[str,int]",
                "str",
                "List"
            ],
            "arguments": {
                "version": [
                    "str",
                    "bool",
                    "List[str]",
                    "int"
                ],
                "type_": [
                    "Type",
                    "Iterable[str]",
                    "list",
                    "Sequence[Dict[str, Any]]"
                ],
                "log": [
                    "bool",
                    "Type[object]",
                    "bytes",
                    "int",
                    "MutableSequence[str]",
                    "Type[T]"
                ]
            }
        },
        "_prebump": {
            "name": "_prebump",
            "location": 133,
            "return": [
                "int",
                "str",
                "Pattern",
                "List"
            ],
            "arguments": {
                "version": [
                    "int",
                    "str",
                    "bytes",
                    "bool"
                ],
                "prebump": [
                    "int",
                    "float",
                    "Set"
                ],
                "log": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "build": {
            "name": "build",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "get_next_version": {
            "name": "get_next_version",
            "location": 150,
            "return": [
                "str",
                "Dict[str,Any]",
                "List"
            ],
            "arguments": {
                "ctx": [
                    "bool",
                    "str",
                    "Tuple[str]"
                ],
                "type_": [
                    "Text",
                    "bool",
                    "str",
                    "float",
                    "int"
                ],
                "log": [
                    "bool",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "Optional[pathlib.Path]",
                    "List[Exception]",
                    "float",
                    "Exception"
                ]
            }
        },
        "bump_version": {
            "name": "bump_version",
            "location": 161,
            "return": [
                "str",
                "int",
                "MutableMapping",
                "pathlib.Path",
                "Dict",
                "Dict[str,Dict[str,int]]",
                "List",
                "List[tuple[Union[str,str]]]"
            ],
            "arguments": {
                "ctx": [
                    "bool"
                ],
                "type_": [
                    "bool",
                    "Text"
                ],
                "log": [
                    "bool"
                ],
                "dry_run": [
                    "bool",
                    "str",
                    "Optional[Sequence[str]]"
                ]
            }
        },
        "generate_news": {
            "name": "generate_news",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "List[Tuple[pathlib.Path, pathlib.Path]]",
                    "bytes",
                    "int"
                ],
                "yes": [
                    "bool"
                ],
                "dry_run": [
                    "bool"
                ]
            }
        },
        "get_changelog": {
            "name": "get_changelog",
            "location": 179,
            "return": [
                "str",
                "bool",
                "Dict",
                "float",
                "int",
                "Dict[str,Any]"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "Callable",
                    "bool"
                ]
            }
        },
        "tag_release": {
            "name": "tag_release",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "bytes",
                    "Dict[str, Any]"
                ],
                "version": [
                    "None"
                ],
                "type_": [
                    "typing.Text"
                ],
                "yes": [
                    "bool",
                    "Dict[str,Any]"
                ],
                "dry_run": [
                    "str",
                    "bool"
                ]
            }
        },
        "release": {
            "name": "release",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "dict"
                ],
                "version": [
                    "None"
                ],
                "type_": [
                    "bool",
                    "Text"
                ],
                "yes": [
                    "bool",
                    "Dict[str,Any]"
                ],
                "dry_run": [
                    "bool",
                    "str"
                ]
            }
        },
        "full_release": {
            "name": "full_release",
            "location": 234,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "ctx": [
                    "str"
                ],
                "type_": [
                    "bool",
                    "str"
                ],
                "repo": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "prebump": [
                    "typing.Text"
                ],
                "yes": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "build_docs": {
            "name": "build_docs",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "log": {
            "name": "log",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "task": [
                    "Mapping",
                    "int",
                    "Mapping[str,Any]",
                    "Dict",
                    "Dict[str,Any]",
                    "Iterable[Callable]"
                ],
                "message": [
                    "Dict"
                ],
                "level": [
                    "int"
                ]
            }
        },
        "profile": {
            "name": "profile",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "str"
                ],
                "filepath": [
                    "str",
                    "pathlib.Path",
                    "pathlib2.Path"
                ],
                "calltree": [
                    "bool"
                ]
            }
        }
    },
    "requirementslib-main/tests/conftest.py": {
        "check_for_mercurial": {
            "name": "check_for_mercurial",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "try_internet": {
            "name": "try_internet",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [
                    "Text",
                    "str",
                    "Optional[Dict]"
                ],
                "timeout": [
                    "float",
                    "str",
                    "Optional[Dict]"
                ]
            }
        },
        "check_internet": {
            "name": "check_internet",
            "location": 37,
            "return": [
                "bool",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        },
        "should_skip_internet": {
            "name": "should_skip_internet",
            "location": 56,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "mock_run_requires": {
            "name": "mock_run_requires",
            "location": 67,
            "return": [
                "Dict",
                "str",
                "List[bytes]",
                "Iterable[float]",
                "int",
                "float",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Callable",
                    "Type",
                    "List[magic.models.Card]",
                    "Type[object]",
                    "Type[Exception]"
                ]
            }
        },
        "mock_unpack": {
            "name": "mock_unpack",
            "location": 71,
            "return": [
                "None",
                "str",
                "int"
            ],
            "arguments": {
                "link": [
                    "bool",
                    "str",
                    "List[str]"
                ],
                "source_dir": [
                    "bool",
                    "str",
                    "List[str]"
                ],
                "download_dir": [
                    "bool",
                    "str",
                    "List[str]"
                ],
                "only_download": [
                    "bool",
                    "str",
                    "List[str]"
                ],
                "session": [
                    "bool",
                    "str",
                    "None",
                    "List[str]"
                ],
                "hashes": [
                    "bool",
                    "str",
                    "None",
                    "List[str]"
                ],
                "progress_bar": [
                    "Text",
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        },
        "pytest_runtest_setup": {
            "name": "pytest_runtest_setup",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "item": [
                    "bool",
                    "Type[T]"
                ]
            }
        },
        "pathlib_tmpdir": {
            "name": "pathlib_tmpdir",
            "location": 91,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "tmpdir": [
                    "pathlib.Path",
                    "str",
                    "type"
                ]
            }
        },
        "pip_src_dir": {
            "name": "pip_src_dir",
            "location": 100,
            "return": [
                "Set[str]",
                "str",
                "int",
                "Tuple[Union[int,int]]",
                "float",
                "Dict[str,Any]",
                "bool"
            ],
            "arguments": {
                "request": [
                    "Set[str]",
                    "str",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ],
                "pathlib_tmpdir": [
                    "dict",
                    "django.db.models.query.QuerySet"
                ]
            }
        },
        "monkeypatch_if_needed": {
            "name": "monkeypatch_if_needed",
            "location": 112,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "monkeypatch": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "artifact_dir": {
            "name": "artifact_dir",
            "location": 123,
            "return": [
                "pathlib.Path",
                "str",
                "dep_check.models.Module"
            ],
            "arguments": {}
        },
        "fixture_dir": {
            "name": "fixture_dir",
            "location": 128,
            "return": [
                "pathlib.Path",
                "str",
                "dep_check.models.Module"
            ],
            "arguments": {}
        },
        "setup_py_dir": {
            "name": "setup_py_dir",
            "location": 133,
            "return": [
                "int",
                "pathlib.Path",
                "str"
            ],
            "arguments": {
                "fixture_dir": [
                    "bool",
                    "pathlib.Path",
                    "Iterable[str]"
                ]
            }
        },
        "setup_cfg_dir": {
            "name": "setup_cfg_dir",
            "location": 138,
            "return": [
                "int",
                "pathlib.Path",
                "str"
            ],
            "arguments": {
                "fixture_dir": [
                    "bool",
                    "pathlib.Path",
                    "Iterable[str]"
                ]
            }
        },
        "pipfile_dir": {
            "name": "pipfile_dir",
            "location": 143,
            "return": [
                "int",
                "str",
                "pathlib.Path",
                "Iterable[str]"
            ],
            "arguments": {
                "fixture_dir": [
                    "bool",
                    "pathlib.Path",
                    "Iterable[str]"
                ]
            }
        },
        "package_json": {
            "name": "package_json",
            "location": 148,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "fixture_dir": [
                    "str",
                    "Union[pathlib.Path, str]"
                ],
                "request": [
                    "Dict[str,str]",
                    "str",
                    "Optional[Dict[str,bytes]]",
                    "Dict[str,bytes]",
                    "Optional[Dict[str,Any]]",
                    "None"
                ]
            }
        },
        "monkeypatch_wheel_download": {
            "name": "monkeypatch_wheel_download",
            "location": 155,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "monkeypatch": [
                    "int",
                    "str",
                    "List[int]"
                ],
                "fixture_dir": [
                    "bool",
                    "str",
                    "List[pathlib.Path]",
                    "Union[str,bytes]",
                    "bytes"
                ]
            }
        },
        "gen_metadata": {
            "name": "gen_metadata",
            "location": 170,
            "return": [
                "Tuple",
                "str"
            ],
            "arguments": {
                "request": [
                    "starlette.requests.Request"
                ]
            }
        },
        "test_artifact": {
            "name": "test_artifact",
            "location": 212,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "artifact_dir": [
                    "Callable",
                    "str",
                    "Union[pathlib.Path,str]",
                    "pathlib.Path"
                ],
                "pathlib_tmpdir": [
                    "Callable",
                    "bool",
                    "pathlib.Path"
                ],
                "request": [
                    "str"
                ]
            }
        },
        "pip_src_dir.finalize": {
            "name": "finalize",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "monkeypatch_wheel_download.open_file": {
            "name": "open_file",
            "location": 157,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "link": [
                    "str",
                    "List[str]"
                ],
                "session": [
                    "None",
                    "bytes",
                    "bool",
                    "List[Dict[str,Any]]",
                    "List[cutepaste.files.models.File]",
                    "Dict[str,Any]",
                    "str"
                ],
                "stream": [
                    "bool",
                    "bytes",
                    "List[Dict[str,Any]]",
                    "List[cutepaste.files.models.File]",
                    "Dict[str,Any]",
                    "str"
                ]
            }
        }
    },
    "requirementslib-main/tests/__init__.py": {},
    "requirementslib-main/tests/artifacts/environ_config/environ_config/conftest.py": {},
    "requirementslib-main/tests/artifacts/environ_config/environ_config/setup.py": {
        "read": {
            "name": "read",
            "location": 38,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        },
        "find_meta": {
            "name": "find_meta",
            "location": 60,
            "return": [
                "int",
                "Dict[str, int]",
                "str",
                "type"
            ],
            "arguments": {
                "meta": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "requirementslib-main/tests/artifacts/environ_config/environ_config/src/environ/exceptions.py": {},
    "requirementslib-main/tests/artifacts/environ_config/environ_config/src/environ/secrets.py": {
        "_load_ini": {
            "name": "_load_ini",
            "location": 136,
            "return": [
                "RawConfigParser",
                "str",
                "bool"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "INISecrets.from_path": {
            "name": "from_path",
            "location": 30,
            "return": [
                "str",
                "Optional[str]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[Sequence[str]]",
                    "Sequence[str]"
                ],
                "path": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[Sequence[str]]",
                    "Sequence[str]"
                ],
                "section": [
                    "Text",
                    "Optional[str]",
                    "str",
                    "Optional[Sequence[str]]"
                ]
            }
        },
        "INISecrets.from_path_in_env": {
            "name": "from_path_in_env",
            "location": 34,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "None",
                    "Optional[str]",
                    "List[str]",
                    "Union[None,List[str]]",
                    "Optional[List[str]]"
                ],
                "env_name": [
                    "str",
                    "None",
                    "Optional[str]",
                    "List[str]",
                    "Union[None,List[str]]",
                    "Optional[List[str]]"
                ],
                "default": [
                    "str",
                    "None",
                    "Optional[str]",
                    "List[str]",
                    "Union[None,List[str]]",
                    "Optional[List[str]]"
                ],
                "section": [
                    "Text",
                    "str",
                    "Optional[str]",
                    "Union[None,List[str]]",
                    "Optional[List[str]]"
                ]
            }
        },
        "INISecrets.secret": {
            "name": "secret",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "default": [
                    "str",
                    "Optional[str]",
                    "Dict[str, str]"
                ],
                "converter": [
                    "str",
                    "None",
                    "Dict[str,str]",
                    "Optional[str]"
                ],
                "name": [
                    "str",
                    "None",
                    "Dict[str,str]",
                    "Optional[str]"
                ],
                "section": [
                    "str",
                    "None",
                    "List[str]",
                    "Optional[str]",
                    "float",
                    "Dict[str,Union[str,int,bool]]",
                    "bool",
                    "Optional[bool]",
                    "int"
                ]
            }
        },
        "INISecrets._get": {
            "name": "_get",
            "location": 54,
            "return": [
                "_SecretStr",
                "str",
                "Optional[str]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "str",
                    "Dict[str,str]"
                ],
                "metadata": [
                    "bool",
                    "Optional[bool]",
                    "bytes",
                    "str",
                    "None",
                    "int",
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]"
                ],
                "prefix": [
                    "str",
                    "bool"
                ],
                "name": [
                    "str",
                    "None",
                    "int",
                    "Optional[str]",
                    "Iterable[str]",
                    "Optional[Iterable[str]]",
                    "Dict[str,str]"
                ]
            }
        },
        "VaultEnvSecrets.secret": {
            "name": "secret",
            "location": 90,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "default": [
                    "str",
                    "Optional[str]",
                    "list"
                ],
                "converter": [
                    "str",
                    "None",
                    "List",
                    "Optional[str]"
                ],
                "name": [
                    "str",
                    "None",
                    "List",
                    "Optional[str]"
                ]
            }
        },
        "VaultEnvSecrets._get": {
            "name": "_get",
            "location": 97,
            "return": [
                "_SecretStr",
                "str",
                "Type[Any]"
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "str",
                    "Dict"
                ],
                "metadata": [
                    "str",
                    "int",
                    "Mapping[str,str]",
                    "Mapping"
                ],
                "prefix": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "name": [
                    "str",
                    "bool",
                    "IO"
                ]
            }
        },
        "_SecretStr.__repr__": {
            "name": "__repr__",
            "location": 119,
            "return": [
                "Text",
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "requirementslib-main/tests/artifacts/environ_config/environ_config/src/environ/_environ_config.py": {
        "config": {
            "name": "config",
            "location": 25,
            "return": [
                "dict"
            ],
            "arguments": {
                "maybe_cls": [
                    "bool",
                    "None"
                ],
                "prefix": [
                    "Text",
                    "bool",
                    "str",
                    "Iterable[T]"
                ]
            }
        },
        "var": {
            "name": "var",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "default": [
                    "Raise",
                    "str",
                    "MutableSequence[str]"
                ],
                "converter": [
                    "str",
                    "None",
                    "MutableSequence[str]",
                    "MutableSequence"
                ],
                "name": [
                    "str",
                    "None",
                    "MutableSequence[str]",
                    "MutableSequence"
                ],
                "validator": [
                    "str",
                    "None",
                    "MutableSequence[str]",
                    "MutableSequence"
                ]
            }
        },
        "_env_to_bool": {
            "name": "_env_to_bool",
            "location": 53,
            "return": [
                "bool"
            ],
            "arguments": {
                "val": [
                    "bool",
                    "Dict",
                    "Optional[Dict[str,str]]",
                    "str",
                    "Dict[str,str]",
                    "None"
                ]
            }
        },
        "bool_var": {
            "name": "bool_var",
            "location": 64,
            "return": [
                "type"
            ],
            "arguments": {
                "default": [
                    "str",
                    "Raise"
                ],
                "name": [
                    "str",
                    "None"
                ]
            }
        },
        "group": {
            "name": "group",
            "location": 72,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "Tuple[List[str],Optional[Any]]",
                    "Tuple[Union[list[str],Any,None]]",
                    "Optional[dict]",
                    "Dict",
                    "str",
                    "Type",
                    "Optional[Any]",
                    "int",
                    "None",
                    "Any"
                ]
            }
        },
        "to_config": {
            "name": "to_config",
            "location": 76,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "config_cls": [
                    "List[str]",
                    "Callable"
                ],
                "environ": [
                    "List[str]",
                    "Callable"
                ]
            }
        },
        "_to_config": {
            "name": "_to_config",
            "location": 98,
            "return": [
                "bool",
                "str",
                "dict",
                "Optional[dict]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "config_cls": [
                    "Dict",
                    "int",
                    "Dict[str,int]",
                    "Dict[str,Dict[str,Any]]",
                    "Dict[str,dict[str,Any]]"
                ],
                "default_get": [
                    "Dict"
                ],
                "environ": [
                    "Dict[str,Any]",
                    "Dict"
                ],
                "prefix": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "config.wrap": {
            "name": "wrap",
            "location": 26,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Callable"
                ]
            }
        },
        "to_config.default_get": {
            "name": "default_get",
            "location": 82,
            "return": [
                "RAISE",
                "List",
                "Callable",
                "str"
            ],
            "arguments": {
                "environ": [
                    "str"
                ],
                "metadata": [
                    "str",
                    "int",
                    "Mapping[str, str]"
                ],
                "prefix": [
                    "str"
                ],
                "name": [
                    "Optional[str]",
                    "Iterable",
                    "List[str]",
                    "str",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "requirementslib-main/tests/artifacts/environ_config/environ_config/src/environ/__init__.py": {},
    "requirementslib-main/tests/artifacts/environ_config/environ_config/tests/test_environ_config.py": {
        "TestEnvironConfig.test_empty": {
            "name": "test_empty",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEnvironConfig.test_flat": {
            "name": "test_flat",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEnvironConfig.test_nested": {
            "name": "test_nested",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEnvironConfig.test_missing": {
            "name": "test_missing",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEnvironConfig.test_default": {
            "name": "test_default",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEnvironConfig.test_no_prefix": {
            "name": "test_no_prefix",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": []
            }
        },
        "TestEnvironConfig.test_overwrite": {
            "name": "test_overwrite",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEnvironConfig.test_no_prefixes": {
            "name": "test_no_prefixes",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEnvironConfig.test_bool_var": {
            "name": "test_bool_var",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "TestEnvironConfig.test_tolerates_attribs": {
            "name": "test_tolerates_attribs",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "requirementslib-main/tests/artifacts/environ_config/environ_config/tests/test_secrets.py": {
        "ini_file": {
            "name": "ini_file",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "bool"
                ]
            }
        },
        "ini": {
            "name": "ini",
            "location": 49,
            "return": [
                "str",
                "Optional[dict]",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "ini_file": [
                    "Optional[Callable]",
                    "Callable",
                    "str",
                    "None",
                    "Optional[int]",
                    "Union[str,List[str]]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "vault": {
            "name": "vault",
            "location": 130,
            "return": [
                "VaultEnvSecrets",
                "int",
                "List[str]",
                "List",
                "float"
            ],
            "arguments": {}
        },
        "TestSecretStr.test_secret_str_no_repr": {
            "name": "test_secret_str_no_repr",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSecretStr.test_secret_str_censors": {
            "name": "test_secret_str_censors",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIniSecret.test_missing_default_raises": {
            "name": "test_missing_default_raises",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ini": [
                    "str",
                    "Dict[str, Sequence[Any]]"
                ]
            }
        },
        "TestIniSecret.test_default": {
            "name": "test_default",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ini": [
                    "set",
                    "str"
                ]
            }
        },
        "TestIniSecret.test_name_overwrite": {
            "name": "test_name_overwrite",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ini": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestIniSecret.test_overwrite_sections": {
            "name": "test_overwrite_sections",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ini": [
                    "bool"
                ]
            }
        },
        "TestIniSecret.test_nested": {
            "name": "test_nested",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ini": [
                    "str",
                    "Dict[str, Sequence[Any]]"
                ]
            }
        },
        "TestIniSecret.test_from_path_in_env_delayed": {
            "name": "test_from_path_in_env_delayed",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ini_file": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "TestVaultEnvSecrets.test_returns_secret_str": {
            "name": "test_returns_secret_str",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vault": [
                    "str",
                    "Dict[str, Sequence[Any]]"
                ]
            }
        },
        "TestVaultEnvSecrets.test_overwrite_name": {
            "name": "test_overwrite_name",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vault": []
            }
        },
        "TestVaultEnvSecrets.test_missing_raises_missing_secret": {
            "name": "test_missing_raises_missing_secret",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vault": [
                    "str",
                    "Dict[str, Sequence[Any]]"
                ]
            }
        },
        "TestVaultEnvSecrets.test_prefix_callable": {
            "name": "test_prefix_callable",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVaultEnvSecrets.test_prefix_callable.extract": {
            "name": "extract",
            "location": 178,
            "return": [
                "Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "env": [
                    "str",
                    "type"
                ]
            }
        }
    },
    "requirementslib-main/tests/fixtures/setup_cfg/package_with_multiple_extras/setup.py": {},
    "requirementslib-main/tests/fixtures/setup_cfg/package_with_multiple_extras/src/test_package/__init__.py": {},
    "requirementslib-main/tests/fixtures/setup_cfg/package_with_special_directives/setup.py": {},
    "requirementslib-main/tests/fixtures/setup_cfg/package_with_special_directives/bug/__init__.py": {},
    "requirementslib-main/tests/fixtures/setup_py/package_using_fully_qualified_setuptools/setup.py": {},
    "requirementslib-main/tests/fixtures/setup_py/package_using_fully_qualified_setuptools/src/test_package/__init__.py": {},
    "requirementslib-main/tests/fixtures/setup_py/package_with_annoted_assignments/setup.py": {},
    "requirementslib-main/tests/fixtures/setup_py/package_with_conditional_install_requires/setup.py": {},
    "requirementslib-main/tests/fixtures/setup_py/package_with_conditional_install_requires/src/fakepkg/__init__.py": {},
    "requirementslib-main/tests/fixtures/setup_py/package_with_dependence_on_env_vars/setup.py": {},
    "requirementslib-main/tests/fixtures/setup_py/package_with_extras_as_variable/setup.py": {
        "print_with_bin_ops": {
            "name": "print_with_bin_ops",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "requirementslib-main/tests/fixtures/setup_py/package_with_extras_as_variable/src/test_package/__init__.py": {},
    "requirementslib-main/tests/fixtures/setup_py/package_with_function_call_as_name/setup.py": {
        "read_file": {
            "name": "read_file",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "find_version": {
            "name": "find_version",
            "location": 20,
            "return": [
                "bool",
                "str",
                "Union[int, float, complex]"
            ],
            "arguments": {}
        },
        "find_name": {
            "name": "find_name",
            "location": 29,
            "return": [
                "str",
                "type"
            ],
            "arguments": {}
        }
    },
    "requirementslib-main/tests/fixtures/setup_py/package_with_function_call_as_name/src/package_with_function_call_as_name/__init__.py": {},
    "requirementslib-main/tests/fixtures/setup_py/package_with_multiple_extras/setup.py": {},
    "requirementslib-main/tests/fixtures/setup_py/package_with_multiple_extras/src/test_package/__init__.py": {},
    "requirementslib-main/tests/fixtures/setup_py/package_with_one_extra/setup.py": {},
    "requirementslib-main/tests/fixtures/setup_py/package_with_one_extra/src/test_package/__init__.py": {},
    "requirementslib-main/tests/fixtures/setup_py/package_with_repeated_assignments/setup.py": {
        "my_function": {
            "name": "my_function",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "other_list": [
                    "str",
                    "dict",
                    "List[str]",
                    "Sequence"
                ]
            }
        }
    },
    "requirementslib-main/tests/fixtures/setup_py/package_with_repeated_assignments/src/test_package_with_repeated_assignments/__init__.py": {},
    "requirementslib-main/tests/fixtures/setup_py/package_with_setup_from_dict/setup.py": {},
    "requirementslib-main/tests/fixtures/setup_py/package_with_setup_from_dict_with_name/setup.py": {},
    "requirementslib-main/tests/fixtures/setup_py/package_with_setup_with_list_comp/setup.py": {},
    "requirementslib-main/tests/unit/strategies.py": {
        "flatten_pyparsing_exprs": {
            "name": "flatten_pyparsing_exprs",
            "location": 74,
            "return": [
                "dict[, ]",
                "set[str]"
            ],
            "arguments": {
                "expr": [
                    "str"
                ]
            }
        },
        "valid_names": {
            "name": "valid_names",
            "location": 84,
            "return": [],
            "arguments": {}
        },
        "urls": {
            "name": "urls",
            "location": 90,
            "return": [],
            "arguments": {}
        },
        "legal_path_chars": {
            "name": "legal_path_chars",
            "location": 126,
            "return": [],
            "arguments": {}
        },
        "relative_paths": {
            "name": "relative_paths",
            "location": 147,
            "return": [],
            "arguments": {}
        },
        "unparsed_urls": {
            "name": "unparsed_urls",
            "location": 162,
            "return": [],
            "arguments": {}
        },
        "vcs_requirements": {
            "name": "vcs_requirements",
            "location": 166,
            "return": [],
            "arguments": {}
        },
        "auth_list": {
            "name": "auth_list",
            "location": 179,
            "return": [],
            "arguments": {}
        },
        "auth_strings": {
            "name": "auth_strings",
            "location": 184,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "draw": [
                    "list[int]",
                    "list[]",
                    "None",
                    "str",
                    "bool"
                ],
                "auth": [
                    "list[int]",
                    "list[]",
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "auth_url_strategy": {
            "name": "auth_url_strategy",
            "location": 206,
            "return": [],
            "arguments": {}
        },
        "repo_url_strategy": {
            "name": "repo_url_strategy",
            "location": 229,
            "return": [],
            "arguments": {}
        },
        "unparse_requirement": {
            "name": "unparse_requirement",
            "location": 272,
            "return": [],
            "arguments": {
                "r": [
                    "str",
                    "bytes"
                ]
            }
        },
        "vcs_req": {
            "name": "vcs_req",
            "location": 280,
            "return": [],
            "arguments": {}
        },
        "random_marker_variables": {
            "name": "random_marker_variables",
            "location": 324,
            "return": [],
            "arguments": {}
        },
        "random_marker_values": {
            "name": "random_marker_values",
            "location": 329,
            "return": [],
            "arguments": {}
        },
        "random_marker_ops": {
            "name": "random_marker_ops",
            "location": 333,
            "return": [],
            "arguments": {}
        },
        "marker_tuple_val_lists": {
            "name": "marker_tuple_val_lists",
            "location": 337,
            "return": [],
            "arguments": {}
        },
        "marker_tuple": {
            "name": "marker_tuple",
            "location": 348,
            "return": [],
            "arguments": {}
        },
        "random_op_val_pair": {
            "name": "random_op_val_pair",
            "location": 358,
            "return": [
                "str"
            ],
            "arguments": {
                "draw": [
                    "int",
                    "float"
                ],
                "ops": [
                    "str"
                ],
                "vals": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "random_marker_strings": {
            "name": "random_marker_strings",
            "location": 369,
            "return": [],
            "arguments": {}
        },
        "random_repositories": {
            "name": "random_repositories",
            "location": 411,
            "return": [],
            "arguments": {}
        },
        "repository_url": {
            "name": "repository_url",
            "location": 416,
            "return": [
                "str"
            ],
            "arguments": {
                "draw": [
                    "int",
                    "list[]"
                ],
                "elements": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "repository_line": {
            "name": "repository_line",
            "location": 459,
            "return": [
                "str"
            ],
            "arguments": {
                "draw": [
                    "str",
                    "int"
                ],
                "repositories": [
                    "str",
                    "tuple[typing.Union[str,str]]",
                    "bytes"
                ],
                "markers": [
                    "str",
                    "int",
                    "set[]"
                ]
            }
        },
        "random_requirements": {
            "name": "random_requirements",
            "location": 493,
            "return": [],
            "arguments": {}
        },
        "make_version_key": {
            "name": "make_version_key",
            "location": 497,
            "return": [
                "int"
            ],
            "arguments": {
                "value": [
                    "str",
                    "None",
                    "int",
                    "float"
                ]
            }
        },
        "requirements": {
            "name": "requirements",
            "location": 504,
            "return": [],
            "arguments": {
                "draw": [
                    "str",
                    "float",
                    "typing.Iterable[str]"
                ],
                "requirement_selection": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "markers": []
            }
        },
        "urls.url_encode": {
            "name": "url_encode",
            "location": 93,
            "return": [
                "str"
            ],
            "arguments": {
                "s": []
            }
        },
        "vcs_requirements.url_encode": {
            "name": "url_encode",
            "location": 167,
            "return": [
                "str"
            ],
            "arguments": {
                "s": []
            }
        },
        "auth_url_strategy.url_encode": {
            "name": "url_encode",
            "location": 208,
            "return": [
                "str"
            ],
            "arguments": {
                "s": []
            }
        },
        "repo_url_strategy.url_encode": {
            "name": "url_encode",
            "location": 230,
            "return": [
                "str"
            ],
            "arguments": {
                "s": []
            }
        }
    },
    "requirementslib-main/tests/unit/test_dependencies.py": {
        "test_find_all_matches": {
            "name": "test_find_all_matches",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_abstract_deps": {
            "name": "test_abstract_deps",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_two_deps": {
            "name": "test_two_deps",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_dependencies": {
            "name": "test_get_dependencies",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_abstract_deps": {
            "name": "get_abstract_deps",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_deps_from_json": {
            "name": "test_get_deps_from_json",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_deps_from_index": {
            "name": "test_get_deps_from_index",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_editable_from_index": {
            "name": "test_get_editable_from_index",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "requirementslib-main/tests/unit/test_exceptions.py": {
        "test_fileexistserror": {
            "name": "test_fileexistserror",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "exc_type": [
                    "str",
                    "bytes",
                    "List[str]",
                    "Dict",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "msg": [
                    "List[str]",
                    "bool",
                    "str",
                    "Set[str]"
                ],
                "match": [
                    "str",
                    "bytes",
                    "List[str]",
                    "Dict",
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        },
        "test_fileexistserror.raise_exc": {
            "name": "raise_exc",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "requirementslib-main/tests/unit/test_lockfile.py": {
        "test_lockfile": {
            "name": "test_lockfile",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "bool",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ],
                "fixture_dir": [
                    "str"
                ]
            }
        },
        "test_lockfile_requirements": {
            "name": "test_lockfile_requirements",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "pathlib_tmpdir": [
                    "str"
                ]
            }
        },
        "test_failure": {
            "name": "test_failure",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "pipfile_dir": [
                    "str"
                ]
            }
        }
    },
    "requirementslib-main/tests/unit/test_markers.py": {
        "test_tuplize_version": {
            "name": "test_tuplize_version",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "version": [
                    "bool"
                ],
                "cleaned": [
                    "bool"
                ]
            }
        },
        "test_format_version": {
            "name": "test_format_version",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "version_tuple": [
                    "str",
                    "bool",
                    "int"
                ],
                "version_str": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "test_format_pyspec": {
            "name": "test_format_pyspec",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "specifier": [
                    "int",
                    "str"
                ],
                "rounded_specifier": [
                    "int",
                    "str"
                ]
            }
        },
        "test_get_specs": {
            "name": "test_get_specs",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "specset": [],
                "new_set": []
            }
        },
        "test_cleanup_pyspecs": {
            "name": "test_cleanup_pyspecs",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "specset": [
                    "bool",
                    "str"
                ],
                "new_set": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_get_versions": {
            "name": "test_get_versions",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "specset": [
                    "str"
                ],
                "versions": [
                    "str"
                ]
            }
        },
        "test_get_extras": {
            "name": "test_get_extras",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "marker": [],
                "extras": []
            }
        },
        "test_get_pyversions": {
            "name": "test_get_pyversions",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "marker": [],
                "pyversions": []
            }
        },
        "test_normalize_marker_str": {
            "name": "test_normalize_marker_str",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "marker": [
                    "str",
                    "bool",
                    "int",
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "expected": [
                    "str",
                    "bool",
                    "int",
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        },
        "test_normalize_marker_str_invalid_marker": {
            "name": "test_normalize_marker_str_invalid_marker",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "marker": []
            }
        },
        "test_contains_extras_or_pyversions": {
            "name": "test_contains_extras_or_pyversions",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "marker": [],
                "contains_extras": [
                    "bool"
                ],
                "contains_pyversion": [
                    "bool"
                ]
            }
        },
        "test_marker_from_specifier": {
            "name": "test_marker_from_specifier",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "marker": [
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ],
                "expected": [
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ]
            }
        }
    },
    "requirementslib-main/tests/unit/test_metadata.py": {
        "test_metadata": {
            "name": "test_metadata",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch_wheel_download": [
                    "str"
                ],
                "package_json": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "requirementslib-main/tests/unit/test_pipfile.py": {
        "test_pipfile_loader": {
            "name": "test_pipfile_loader",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "pathlib_tmpdir": [
                    "Callable",
                    "pathlib.Path",
                    "pypi2nix.path.Path"
                ],
                "pipfile_dir": [
                    "str",
                    "Optional[str]",
                    "pypi2nix.path.Path"
                ],
                "extension": [
                    "str",
                    "None",
                    "paradigm.models.Base",
                    "Optional[str]"
                ],
                "default_len": [
                    "int",
                    "str",
                    "BinaryIO"
                ],
                "dev_len": [
                    "int",
                    "str",
                    "Union[int,slice]",
                    "zerver.models.Realm",
                    "Type[Exception]"
                ],
                "requires_python": [
                    "str",
                    "bool",
                    "float",
                    "boggle.models.board.Board",
                    "int",
                    "Union[str,float]"
                ]
            }
        },
        "test_failures": {
            "name": "test_failures",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "pathlib_tmpdir": [
                    "pathlib.Path",
                    "Optional[List[str]]",
                    "django.db.models.QuerySet"
                ]
            }
        }
    },
    "requirementslib-main/tests/unit/test_project.py": {
        "pairwise": {
            "name": "pairwise",
            "location": 12,
            "return": [
                "str",
                "bool",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "seq": [
                    "Iterable[Any]",
                    "Iterable[T]",
                    "int",
                    "Iterator[Any]",
                    "BaseException",
                    "Tuple[int,int]",
                    "None",
                    "Optional[BaseException]"
                ]
            }
        },
        "test_pipfile_entry_comparisons": {
            "name": "test_pipfile_entry_comparisons",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "entry_1": [],
                "entry_2": [
                    "Dict"
                ]
            }
        },
        "test_project_file_works_if_file_exists_but_is_empty": {
            "name": "test_project_file_works_if_file_exists_but_is_empty",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "pathlib_tmpdir": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "test_dir_with_empty_pipfile_file_raises_exception": {
            "name": "test_dir_with_empty_pipfile_file_raises_exception",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "pathlib_tmpdir": []
            }
        },
        "test_dir_with_pipfile_creates_project_file": {
            "name": "test_dir_with_pipfile_creates_project_file",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "pathlib_tmpdir": [
                    "pathlib.Path",
                    "Callable"
                ]
            }
        },
        "test_dir_with_pipfile_creates_project": {
            "name": "test_dir_with_pipfile_creates_project",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "pathlib_tmpdir": []
            }
        }
    },
    "requirementslib-main/tests/unit/test_requirements.py": {
        "test_requirement_line": {
            "name": "test_requirement_line",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "req": [
                    "str"
                ]
            }
        },
        "test_repo_line": {
            "name": "test_repo_line",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "repo_line": []
            }
        },
        "mock_run_requires": {
            "name": "mock_run_requires",
            "location": 192,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "typing.Type",
                    "typing.Callable[, ]",
                    "list[magic.models.Card]"
                ]
            }
        },
        "mock_unpack": {
            "name": "mock_unpack",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "link": [
                    "bool",
                    "str",
                    "list[str]"
                ],
                "source_dir": [
                    "bool",
                    "str",
                    "list[str]"
                ],
                "download_dir": [
                    "bool",
                    "str",
                    "list[str]"
                ],
                "only_download": [
                    "bool"
                ],
                "session": [
                    "None",
                    "bool",
                    "str",
                    "list[str]"
                ],
                "hashes": [
                    "None",
                    "bool",
                    "str",
                    "list[str]"
                ],
                "progress_bar": [
                    "typing.Text"
                ]
            }
        },
        "test_convert_from_pip": {
            "name": "test_convert_from_pip",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [],
                "expected": [],
                "requirement": [
                    "str"
                ]
            }
        },
        "test_convert_from_pipfile": {
            "name": "test_convert_from_pipfile",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [],
                "requirement": [],
                "expected": [
                    "str"
                ]
            }
        },
        "test_convert_from_pipfile_vcs": {
            "name": "test_convert_from_pipfile_vcs",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_convert_from_pip_fail_if_no_egg": {
            "name": "test_convert_from_pip_fail_if_no_egg",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_convert_non_installable_dir_fail": {
            "name": "test_convert_non_installable_dir_fail",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "pathlib_tmpdir": []
            }
        },
        "test_one_way_editable_extras": {
            "name": "test_one_way_editable_extras",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_convert_from_pip_git_uri_normalize": {
            "name": "test_convert_from_pip_git_uri_normalize",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_get_requirements": {
            "name": "test_get_requirements",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch_if_needed": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_get_requirements_when_subdirectory_fragment": {
            "name": "test_get_requirements_when_subdirectory_fragment",
            "location": 391,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch_if_needed": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_get_ref": {
            "name": "test_get_ref",
            "location": 399,
            "return": [
                "None"
            ],
            "arguments": {
                "artifact_dir": [
                    "str",
                    "int"
                ]
            }
        },
        "test_get_local_ref": {
            "name": "test_get_local_ref",
            "location": 410,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ]
            }
        },
        "test_stdout_is_suppressed": {
            "name": "test_stdout_is_suppressed",
            "location": 426,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": [],
                "tmpdir": []
            }
        },
        "test_local_editable_ref": {
            "name": "test_local_editable_ref",
            "location": 434,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_pep_508": {
            "name": "test_pep_508",
            "location": 445,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_named_requirement_selected_over_non_installable_path": {
            "name": "test_named_requirement_selected_over_non_installable_path",
            "location": 465,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [],
                "pathlib_tmpdir": []
            }
        },
        "test_file_url_with_percent_encoding": {
            "name": "test_file_url_with_percent_encoding",
            "location": 478,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_vcs_requirement_with_env_vars": {
            "name": "test_vcs_requirement_with_env_vars",
            "location": 496,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_remote_requirement_with_env_vars": {
            "name": "test_remote_requirement_with_env_vars",
            "location": 511,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "requirementslib-main/tests/unit/test_setup_info.py": {
        "test_local_req": {
            "name": "test_local_req",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "test_artifact": [
                    "str"
                ]
            }
        },
        "test_remote_req": {
            "name": "test_remote_req",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "url_line": [
                    "str",
                    "List",
                    "List[str]"
                ],
                "name": [
                    "str",
                    "Dict",
                    "Sequence[str]",
                    "Dict[str,Tuple[Any,Any]]",
                    "Dict[str,tuple[Union[Any,Any]]]"
                ],
                "requires": [
                    "Dict[str,str]",
                    "str",
                    "Dict",
                    "Type",
                    "Dict[str,Any]"
                ]
            }
        },
        "test_remote_source_in_subdirectory": {
            "name": "test_remote_source_in_subdirectory",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "url_line": [
                    "str",
                    "Dict[str,str]",
                    "Dict[str,Dict[str,Any]]",
                    "List",
                    "Dict[str,dict[str,Any]]"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "test_no_duplicate_egg_info": {
            "name": "test_no_duplicate_egg_info",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_without_extras": {
            "name": "test_without_extras",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "pathlib_tmpdir": []
            }
        },
        "test_extras": {
            "name": "test_extras",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "pathlib_tmpdir": [
                    "str",
                    "bool",
                    "Set[str]",
                    "List[str]"
                ],
                "setup_py_dir": [
                    "bool",
                    "str"
                ],
                "setup_py_name": [
                    "bool",
                    "str"
                ],
                "extras": [
                    "str",
                    "bool",
                    "int"
                ],
                "dependencies": [
                    "Dict[str,Any]",
                    "str",
                    "Dict",
                    "bytes",
                    "Dict[str,str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_ast_parser_finds_variables": {
            "name": "test_ast_parser_finds_variables",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "setup_py_dir": [
                    "bool"
                ]
            }
        },
        "test_ast_parser_finds_fully_qualified_setup": {
            "name": "test_ast_parser_finds_fully_qualified_setup",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "setup_py_dir": [
                    "bool"
                ]
            }
        },
        "test_ast_parser_handles_binops": {
            "name": "test_ast_parser_handles_binops",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "setup_py_dir": [
                    "bool"
                ]
            }
        },
        "test_ast_parser_handles_binops_alternate": {
            "name": "test_ast_parser_handles_binops_alternate",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "setup_py_dir": [
                    "bool"
                ]
            }
        },
        "test_parse_function_call_as_name": {
            "name": "test_parse_function_call_as_name",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "setup_py_dir": [
                    "bool"
                ],
                "pathlib_tmpdir": []
            }
        },
        "test_ast_parser_handles_repeated_assignments": {
            "name": "test_ast_parser_handles_repeated_assignments",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "setup_py_dir": [
                    "bool"
                ]
            }
        },
        "test_ast_parser_handles_exceptions": {
            "name": "test_ast_parser_handles_exceptions",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "artifact_dir": [
                    "str"
                ]
            }
        },
        "test_ast_parser_handles_annoted_assignments": {
            "name": "test_ast_parser_handles_annoted_assignments",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "setup_py_dir": [
                    "str",
                    "Optional[Callable[[Any],None]]",
                    "Callable[Any,None]",
                    "zerver.models.Realm",
                    "None"
                ]
            }
        },
        "test_read_requirements_with_list_comp": {
            "name": "test_read_requirements_with_list_comp",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "setup_py_dir": [
                    "str"
                ]
            }
        },
        "test_ast_parse_from_dict_with_name": {
            "name": "test_ast_parse_from_dict_with_name",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "setup_py_dir": [
                    "str",
                    "Optional[Callable[[Any], None]]"
                ]
            }
        },
        "test_no_duplicate_egg_info.find_metadata": {
            "name": "find_metadata",
            "location": 81,
            "return": [
                "None",
                "str",
                "Optional[int]",
                "bool",
                "Dict"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        }
    },
    "requirementslib-main/tests/unit/test_uri.py": {
        "test_uri": {
            "name": "test_uri",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "authurl": [
                    "str",
                    "int"
                ]
            }
        },
        "test_repository_url": {
            "name": "test_repository_url",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [
                    "str",
                    "int",
                    "Dict",
                    "salon.models.Stylist"
                ]
            }
        }
    },
    "requirementslib-main/tests/unit/test_utils.py": {
        "mock_run_requires": {
            "name": "mock_run_requires",
            "location": 16,
            "return": [
                "Dict",
                "str",
                "List[bytes]",
                "Iterable[float]",
                "int",
                "float",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Callable",
                    "Type",
                    "List[magic.models.Card]",
                    "Type[object]",
                    "Type[Exception]"
                ]
            }
        },
        "mock_unpack": {
            "name": "mock_unpack",
            "location": 20,
            "return": [
                "None",
                "str",
                "int"
            ],
            "arguments": {
                "link": [
                    "bool",
                    "str",
                    "List[str]"
                ],
                "source_dir": [
                    "bool",
                    "str",
                    "List[str]"
                ],
                "download_dir": [
                    "bool",
                    "str",
                    "List[str]"
                ],
                "only_download": [
                    "bool",
                    "str",
                    "List[str]"
                ],
                "session": [
                    "bool",
                    "str",
                    "None",
                    "List[str]"
                ],
                "hashes": [
                    "bool",
                    "str",
                    "None",
                    "List[str]"
                ],
                "progress_bar": [
                    "Text",
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_filter_none": {
            "name": "test_filter_none",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_init_requirement": {
            "name": "test_init_requirement",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_extras_to_string": {
            "name": "test_extras_to_string",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_build_vcs_uri": {
            "name": "test_build_vcs_uri",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_strip_ssh_from_git_url": {
            "name": "test_strip_ssh_from_git_url",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_split_markers_from_line": {
            "name": "test_split_markers_from_line",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_split_vcs_method_from_uri": {
            "name": "test_split_vcs_method_from_uri",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_split_ref_from_uri": {
            "name": "test_split_ref_from_uri",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_format_requirement": {
            "name": "test_format_requirement",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_format_requirement_editable": {
            "name": "test_format_requirement_editable",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "bool",
                    "list",
                    "invoices.models.Invoice"
                ]
            }
        },
        "test_format_specifier": {
            "name": "test_format_specifier",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_as_tuple": {
            "name": "test_as_tuple",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_flat_map": {
            "name": "test_flat_map",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_convert_to_path": {
            "name": "test_convert_to_path",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "entry": [
                    "str",
                    "List"
                ],
                "expected": [
                    "str",
                    "List"
                ]
            }
        },
        "test_convert_to_path_failures": {
            "name": "test_convert_to_path_failures",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_editable_check": {
            "name": "test_editable_check",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "input": [
                    "str",
                    "Set",
                    "Sequence[pathlib.Path]"
                ],
                "expected": [
                    "str",
                    "Set",
                    "Sequence[pathlib.Path]"
                ]
            }
        },
        "test_expand_env_variables": {
            "name": "test_expand_env_variables",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "requirementslib-main/tests/unit/__init__.py": {}
}
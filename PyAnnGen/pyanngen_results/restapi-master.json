{
    "restapi-master/aiohttp-connexion-example/__init__.py": {},
    "restapi-master/aiohttp-connexion-example/service/app.py": {},
    "restapi-master/aiohttp-connexion-example/service/database.py": {},
    "restapi-master/aiohttp-connexion-example/service/middlewares.py": {
        "get": {
            "name": "get",
            "location": 11,
            "return": [
                "List",
                "str",
                "Optional[str]",
                "bool",
                "List[str]"
            ],
            "arguments": {}
        }
    },
    "restapi-master/aiohttp-connexion-example/service/__init__.py": {},
    "restapi-master/aiohttp-connexion-example/service/api/status.py": {},
    "restapi-master/aiohttp-connexion-example/service/api/user.py": {},
    "restapi-master/aiohttp-connexion-example/service/api/users.py": {},
    "restapi-master/aiohttp-connexion-example/service/api/__init__.py": {},
    "restapi-master/aiohttp-connexion-example/service/models/user.py": {
        "User.dumps": {
            "name": "dumps",
            "location": 20,
            "return": [
                "Text",
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "Dict",
                    "Callable",
                    "List[bytes]"
                ]
            }
        }
    },
    "restapi-master/aiohttp-connexion-example/service/models/__init__.py": {},
    "restapi-master/aiohttp-connexion-example/tests/__init__.py": {},
    "restapi-master/connexion-example/service/app.py": {
        "after_request": {
            "name": "after_request",
            "location": 30,
            "return": [
                "Dict[str,Any]",
                "bytes",
                "Dict",
                "Dict[str,Union[int,str]]",
                "Optional[Dict[str,Any]]",
                "Optional[Dict[str,str]]"
            ],
            "arguments": {
                "response": [
                    "Dict[str,Any]",
                    "bytes"
                ]
            }
        }
    },
    "restapi-master/connexion-example/service/__init__.py": {},
    "restapi-master/connexion-example/service/api/status.py": {
        "get": {
            "name": "get",
            "location": 6,
            "return": [
                "Tuple[int]",
                "str",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {}
        }
    },
    "restapi-master/connexion-example/service/api/user.py": {
        "_get_user": {
            "name": "_get_user",
            "location": 13,
            "return": [
                "str",
                "int",
                "zerver.models.Realm",
                "Optional[str]"
            ],
            "arguments": {
                "user_id": [
                    "int",
                    "List[int]",
                    "str",
                    "List",
                    "transfer.models.BadgeID",
                    "transfer.models.PostingID"
                ]
            }
        },
        "get": {
            "name": "get",
            "location": 22,
            "return": [
                "Tuple[int]",
                "str",
                "Optional[str]",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "int",
                    "None",
                    "transfer.models.OrderID",
                    "Optional[str]"
                ]
            }
        },
        "delete": {
            "name": "delete",
            "location": 36,
            "return": [
                "Tuple[Union[Text,int]]",
                "str",
                "int",
                "sqlalchemy.orm.Session"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        }
    },
    "restapi-master/connexion-example/service/api/users.py": {
        "get": {
            "name": "get",
            "location": 14,
            "return": [
                "Tuple[Union[list,int]]",
                "Tuple",
                "bytes",
                "bool",
                "str"
            ],
            "arguments": {
                "last_name": [
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "post": {
            "name": "post",
            "location": 34,
            "return": [
                "Tuple[int]",
                "Optional[str]",
                "str",
                "bool",
                "zerver.models.Realm"
            ],
            "arguments": {
                "body": [
                    "str",
                    "Dict[str,Any]",
                    "None",
                    "sqlalchemy.orm.session.Session",
                    "zerver.models.UserProfile",
                    "Optional[zerver.models.UserProfile]",
                    "Union[str,TrackingCode]"
                ]
            }
        }
    },
    "restapi-master/connexion-example/service/api/__init__.py": {},
    "restapi-master/connexion-example/service/config/__init__.py": {},
    "restapi-master/connexion-example/service/models/base.py": {
        "BaseModel.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.to_dict": {
            "name": "to_dict",
            "location": 16,
            "return": [
                "Dict",
                "Dict[str,Any]",
                "Tuple[int,Dict[str,Any]]",
                "List",
                "Optional[Dict[str,Any]]"
            ],
            "arguments": {
                "self": [],
                "found": [
                    "Callable[[None],bool]",
                    "None",
                    "Type",
                    "Optional[Dict[str,Any]]",
                    "List",
                    "Callable[None,bool]",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "str"
                ]
            }
        }
    },
    "restapi-master/connexion-example/service/models/database.py": {},
    "restapi-master/connexion-example/service/models/user.py": {},
    "restapi-master/connexion-example/service/models/__init__.py": {},
    "restapi-master/connexion-example/tests/__init__.py": {},
    "restapi-master/flaskrestful-example/service/app.py": {},
    "restapi-master/flaskrestful-example/service/__init__.py": {},
    "restapi-master/flaskrestful-example/service/api/status.py": {
        "Status.get": {
            "name": "get",
            "location": 7,
            "return": [
                "Tuple[Union[Text,int]]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "restapi-master/flaskrestful-example/service/api/swagger.py": {
        "Swagger.get": {
            "name": "get",
            "location": 9,
            "return": [
                "Tuple[Union[Text,int]]",
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "restapi-master/flaskrestful-example/service/api/user.py": {
        "User._get_user": {
            "name": "_get_user",
            "location": 14,
            "return": [
                "str",
                "int",
                "zerver.models.Realm",
                "Optional[str]",
                "Dict[str,dict[str,Any]]"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int",
                    "List[int]",
                    "transfer.models.ArticleNumberSequenceID",
                    "transfer.models.OrderNumber.SequenceID",
                    "transfer.models.SubjectID",
                    "transfer.models.BadgeID"
                ]
            }
        },
        "User.get": {
            "name": "get",
            "location": 23,
            "return": [
                "Tuple[int]",
                "int",
                "zerver.models.UserProfile",
                "bytes",
                "Dict[str,str]"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str",
                    "int",
                    "None",
                    "transfer.models.OrderID",
                    "Optional[str]"
                ]
            }
        },
        "User.delete": {
            "name": "delete",
            "location": 28,
            "return": [
                "Tuple[Union[Text,int]]",
                "str",
                "int",
                "sqlalchemy.orm.Session"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        }
    },
    "restapi-master/flaskrestful-example/service/api/users.py": {
        "Users.get": {
            "name": "get",
            "location": 16,
            "return": [
                "Tuple[Union[list,int]]",
                "Dict",
                "bool",
                "str",
                "Dict[str,bool]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Users.post": {
            "name": "post",
            "location": 26,
            "return": [
                "Tuple[int]",
                "bool",
                "Dict[str,Any]",
                "int",
                "str",
                "List[zerver.models.DefaultStreamGroup]",
                "Optional[Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "restapi-master/flaskrestful-example/service/api/__init__.py": {},
    "restapi-master/flaskrestful-example/service/config/__init__.py": {},
    "restapi-master/flaskrestful-example/service/models/base.py": {
        "BaseModel.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.to_dict": {
            "name": "to_dict",
            "location": 16,
            "return": [
                "Dict",
                "Dict[str,Any]",
                "Tuple[int,Dict[str,Any]]",
                "List",
                "Optional[Dict[str,Any]]"
            ],
            "arguments": {
                "self": [],
                "found": [
                    "Callable[[None],bool]",
                    "None",
                    "Type",
                    "Optional[Dict[str,Any]]",
                    "List",
                    "Callable[None,bool]",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "str"
                ]
            }
        }
    },
    "restapi-master/flaskrestful-example/service/models/database.py": {},
    "restapi-master/flaskrestful-example/service/models/user.py": {},
    "restapi-master/flaskrestful-example/service/models/__init__.py": {},
    "restapi-master/flaskrestful-example/tests/__init__.py": {},
    "restapi-master/flaskrestplus-example/__init__.py": {},
    "restapi-master/flaskrestplus-example/service/app.py": {},
    "restapi-master/flaskrestplus-example/service/__init__.py": {},
    "restapi-master/flaskrestplus-example/service/api/status.py": {
        "Status.get": {
            "name": "get",
            "location": 17,
            "return": [
                "Tuple[Union[Text,int]]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "restapi-master/flaskrestplus-example/service/api/users.py": {
        "Users.get": {
            "name": "get",
            "location": 25,
            "return": [
                "Tuple[Union[list,int]]",
                "Dict",
                "bool",
                "str",
                "Dict[str,bool]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Users.post": {
            "name": "post",
            "location": 44,
            "return": [
                "Tuple[int]",
                "bool",
                "Dict[str,Any]",
                "int",
                "str",
                "List[zerver.models.DefaultStreamGroup]",
                "Optional[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User._get_user": {
            "name": "_get_user",
            "location": 70,
            "return": [
                "str",
                "int",
                "zerver.models.Realm",
                "Optional[str]",
                "Dict[str,dict[str,Any]]"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int",
                    "List[int]",
                    "transfer.models.ArticleNumberSequenceID",
                    "transfer.models.OrderNumber.SequenceID",
                    "transfer.models.SubjectID",
                    "transfer.models.BadgeID"
                ]
            }
        },
        "User.get": {
            "name": "get",
            "location": 85,
            "return": [
                "Tuple[int]",
                "int",
                "zerver.models.UserProfile",
                "bytes",
                "Dict[str,str]"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str",
                    "int",
                    "None",
                    "transfer.models.OrderID",
                    "Optional[str]"
                ]
            }
        },
        "User.delete": {
            "name": "delete",
            "location": 98,
            "return": [
                "Tuple[Union[Text,int]]",
                "str",
                "int",
                "sqlalchemy.orm.Session"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        }
    },
    "restapi-master/flaskrestplus-example/service/api/__init__.py": {},
    "restapi-master/flaskrestplus-example/service/config/__init__.py": {},
    "restapi-master/flaskrestplus-example/service/models/base.py": {
        "BaseModel.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.to_dict": {
            "name": "to_dict",
            "location": 16,
            "return": [
                "Dict",
                "Dict[str,Any]",
                "Tuple[int,Dict[str,Any]]",
                "List",
                "Optional[Dict[str,Any]]"
            ],
            "arguments": {
                "self": [],
                "found": [
                    "Callable[[None],bool]",
                    "None",
                    "Type",
                    "Optional[Dict[str,Any]]",
                    "List",
                    "Callable[None,bool]",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "str"
                ]
            }
        }
    },
    "restapi-master/flaskrestplus-example/service/models/database.py": {},
    "restapi-master/flaskrestplus-example/service/models/user.py": {},
    "restapi-master/flaskrestplus-example/service/models/__init__.py": {},
    "restapi-master/flaskrestplus-example/tests/__init__.py": {},
    "restapi-master/locust/locustfile.py": {
        "StressBehavior.users_get": {
            "name": "users_get",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StressBehavior.status": {
            "name": "status",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StressBehavior.swagger_json": {
            "name": "swagger_json",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "restapi-master/locust/locust_files/locust.py": {
        "UserBehavior.on_start": {
            "name": "on_start",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserBehavior.on_stop": {
            "name": "on_stop",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserBehavior.index": {
            "name": "index",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserBehavior.profile": {
            "name": "profile",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "restapi-master/locust/locust_files/__init__.py": {}
}
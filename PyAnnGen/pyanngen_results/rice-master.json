{
    "rice-master/manage.py": {
        "main": {
            "name": "main",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "rice-master/cooker-proj/cook.py": {
        "help_target": {
            "name": "help_target",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "target": [
                    "Dict",
                    "bytes"
                ]
            }
        },
        "run_subcommand": {
            "name": "run_subcommand",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "subcommand": [
                    "str",
                    "int"
                ],
                "subargs": [
                    "str",
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "rice-master/cooker-proj/tmates.py": {
        "main": {
            "name": "main",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Tmate.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tmate.kill": {
            "name": "kill",
            "location": 26,
            "return": [
                "subprocess.CompletedProcess[bytes]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tmate.new_session": {
            "name": "new_session",
            "location": 29,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tmate.get_session_url": {
            "name": "get_session_url",
            "location": 35,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tmate._get_row": {
            "name": "_get_row",
            "location": 44,
            "return": [
                "str",
                "List[str]",
                "List[Variable]",
                "frozenset[str]"
            ],
            "arguments": {
                "self": [],
                "rows": [
                    "Dict[str,Any]",
                    "str",
                    "bool",
                    "int",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "Tmate.update_session": {
            "name": "update_session",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tmate.update_csv": {
            "name": "update_csv",
            "location": 71,
            "return": [
                "str",
                "Union[int,float,complex]",
                "bool",
                "List",
                "List[Dict[str,Any]]"
            ],
            "arguments": {
                "self": [],
                "rows": [
                    "List[int]",
                    "bool",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "rice-master/cooker-proj/commandos/base.py": {
        "parent": {
            "name": "parent",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str",
                    "os.PathLike"
                ]
            }
        },
        "BaseCommando.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cmd_type": [
                    "str",
                    "int",
                    "Literal"
                ],
                "name": [
                    "str",
                    "Callable[...,T]"
                ],
                "doc": [
                    "Optional[str]",
                    "str",
                    "int",
                    "Sequence",
                    "None",
                    "bool"
                ],
                "filepath": [
                    "Optional[str]",
                    "str",
                    "int",
                    "Sequence",
                    "None",
                    "bool"
                ],
                "module": [
                    "Optional[str]",
                    "None",
                    "int",
                    "Sequence",
                    "str",
                    "bool"
                ]
            }
        },
        "BaseCommando.get_module": {
            "name": "get_module",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict"
                ],
                "full_path": [
                    "str",
                    "Dict"
                ]
            }
        },
        "BaseCommando.from_alias": {
            "name": "from_alias",
            "location": 41,
            "return": [
                "BaseCommando"
            ],
            "arguments": {
                "cls": [
                    "Type[_TBaseCommando]"
                ],
                "name": [
                    "List[str]",
                    "bool"
                ],
                "doc": [
                    "List[str]",
                    "bool"
                ]
            }
        },
        "BaseCommando.__str__": {
            "name": "__str__",
            "location": 49,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseCommando.relpath": {
            "name": "relpath",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "full_path": [
                    "str",
                    "bool"
                ]
            }
        },
        "BaseCommando.get_all": {
            "name": "get_all",
            "location": 57,
            "return": [
                "list"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Dict[str,str]",
                    "memoryview",
                    "Iterable[Tuple[int,int]]"
                ]
            }
        },
        "BaseCommando.run_from_argv": {
            "name": "run_from_argv",
            "location": 73,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "argv": [
                    "int",
                    "List[str]",
                    "Dict",
                    "bool",
                    "Iterable[dict]"
                ]
            }
        },
        "PyModule.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "module": [
                    "str",
                    "bool",
                    "Dict[str,Any]"
                ]
            }
        },
        "PyModule.run_from_argv": {
            "name": "run_from_argv",
            "location": 89,
            "return": [
                "bool",
                "Optional[str]",
                "Dict[str, Union[str, int]]"
            ],
            "arguments": {
                "self": [],
                "argv": [
                    "str"
                ]
            }
        },
        "PyModule.print_help": {
            "name": "print_help",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rice-master/cooker-proj/commandos/colors.py": {},
    "rice-master/cooker-proj/commandos/create_react_container.py": {
        "render": {
            "name": "render",
            "location": 16,
            "return": [
                "str",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "container_name": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "rice-master/cooker-proj/commandos/get_all_aliases.py": {
        "get_all_aliases": {
            "name": "get_all_aliases",
            "location": 9,
            "return": [
                "Dict[(Optional[str], Optional[str])]"
            ],
            "arguments": {}
        }
    },
    "rice-master/cooker-proj/commandos/manage.py": {},
    "rice-master/cooker-proj/commandos/printer.py": {
        "print_red": {
            "name": "print_red",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Commando.run_from_argv": {
            "name": "run_from_argv",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "argv": [
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        }
    },
    "rice-master/cooker-proj/commandos/__init__.py": {},
    "rice-master/cooker-proj/cooker/authentication.py": {
        "JWTAuthentication.get_jwt_value": {
            "name": "get_jwt_value",
            "location": 6,
            "return": [
                "str",
                "Type",
                "int",
                "List[str]",
                "Dict[str,Any]",
                "Set[str]",
                "float",
                "Dict[str,int]",
                "None"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        }
    },
    "rice-master/cooker-proj/cooker/urls.py": {},
    "rice-master/cooker-proj/cooker/wsgi.py": {},
    "rice-master/cooker-proj/cooker/__init__.py": {},
    "rice-master/cooker-proj/cooker/api/__init__.py": {},
    "rice-master/cooker-proj/cooker/api/v1/resource_serializers.py": {},
    "rice-master/cooker-proj/cooker/api/v1/urls.py": {},
    "rice-master/cooker-proj/cooker/api/v1/__init__.py": {},
    "rice-master/cooker-proj/cooker/core/models.py": {},
    "rice-master/cooker-proj/cooker/core/__init__.py": {},
    "rice-master/cooker-proj/cooker/settings/base_settings.py": {
        "get_environ": {
            "name": "get_environ",
            "location": 26,
            "return": [
                "Union[(str, _T1)]"
            ],
            "arguments": {
                "key": [
                    "str",
                    "T"
                ],
                "default": [
                    "str",
                    "None"
                ],
                "required": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Optional[Collection[str]]",
                    "Optional[bool]",
                    "float",
                    "Union[List,Tuple]"
                ]
            }
        }
    },
    "rice-master/cooker-proj/cooker/settings/deploy_settings.py": {},
    "rice-master/cooker-proj/cooker/settings/dev_settings.py": {},
    "rice-master/cooker-proj/cooker/settings/__init__.py": {},
    "rice-master/cooker-proj/gdrive/clients.py": {
        "GClient.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GClient.get_service": {
            "name": "get_service",
            "location": 37,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "credentials": [
                    "str",
                    "None",
                    "Dict[str,str]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "GClient.get_credentials": {
            "name": "get_credentials",
            "location": 46,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "GClient.list_files": {
            "name": "list_files",
            "location": 75,
            "return": [
                "Tuple[str, str]",
                "str",
                "tuple",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GClient.export_file_as_str": {
            "name": "export_file_as_str",
            "location": 84,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GClient.get_csv_rows": {
            "name": "get_csv_rows",
            "location": 101,
            "return": [
                "List[Dict[(str, str)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GClient.update_file": {
            "name": "update_file",
            "location": 109,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rice-master/cooker-proj/gdrive/__init__.py": {}
}
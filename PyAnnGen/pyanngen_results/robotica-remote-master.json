{
    "robotica-remote-master/src/arequests.py": {
        "Response.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "List[str]",
                    "str",
                    "List[cirq.Circuit]",
                    "int",
                    "Optional[Sequence[str]]",
                    "Sequence[str]",
                    "None",
                    "Optional[Set[str]]",
                    "Set[str]"
                ],
                "status": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "reason": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "robotica-remote-master/src/buttons.py": {
        "_has_priority": {
            "name": "_has_priority",
            "location": 69,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "priorities": [
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "None",
                    "Optional[float]",
                    "int",
                    "bool",
                    "float"
                ],
                "priority": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "get_button_controller": {
            "name": "get_button_controller",
            "location": 281,
            "return": [
                "Union[(LightButton, SwitchButton)]"
            ],
            "arguments": {
                "config": [
                    "Dict"
                ]
            }
        },
        "Config.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "id": [
                    "str",
                    "Sequence[Any]",
                    "Optional[str]",
                    "None"
                ],
                "location": [
                    "bool",
                    "str",
                    "int",
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]"
                ],
                "device": [
                    "bool",
                    "List[str]",
                    "Optional[str]",
                    "str",
                    "Sequence",
                    "None",
                    "Optional[bool]"
                ],
                "type": [
                    "bool",
                    "List[str]",
                    "Optional[str]",
                    "str",
                    "Sequence",
                    "None",
                    "Optional[bool]"
                ],
                "action": [
                    "bool",
                    "List[str]",
                    "Optional[str]",
                    "str",
                    "Sequence",
                    "None",
                    "Optional[bool]"
                ],
                "params": [
                    "bool",
                    "List[str]",
                    "Optional[str]",
                    "str",
                    "Sequence",
                    "None",
                    "Optional[bool]"
                ]
            }
        },
        "Button.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict"
                ]
            }
        },
        "Button.get_topics": {
            "name": "get_topics",
            "location": 47,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Button.process_nessage": {
            "name": "process_nessage",
            "location": 51,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str",
                    "Dict",
                    "Optional[bytes]",
                    "bytes",
                    "None"
                ],
                "data": [
                    "str",
                    "Dict",
                    "Optional[bytes]",
                    "bytes",
                    "None"
                ]
            }
        },
        "Button.get_display_state": {
            "name": "get_display_state",
            "location": 55,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Button.get_press_commands": {
            "name": "get_press_commands",
            "location": 59,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Button.get_long_commands": {
            "name": "get_long_commands",
            "location": 62,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Button.get_double_commands": {
            "name": "get_double_commands",
            "location": 65,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LightButton.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "LightButton.get_topics": {
            "name": "get_topics",
            "location": 87,
            "return": [
                "List[Tuple[(list, str, str)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LightButton.process_nessage": {
            "name": "process_nessage",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str",
                    "int"
                ],
                "data": []
            }
        },
        "LightButton.get_display_state": {
            "name": "get_display_state",
            "location": 115,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LightButton._get_commands": {
            "name": "_get_commands",
            "location": 167,
            "return": [
                "List[Command]"
            ],
            "arguments": {
                "self": [],
                "scene": [
                    "Dict[int,dict]",
                    "bool",
                    "Optional[Dict]",
                    "Dict",
                    "None"
                ],
                "desired_state": [
                    "int",
                    "Optional[bool]",
                    "None"
                ]
            }
        },
        "LightButton.get_press_commands": {
            "name": "get_press_commands",
            "location": 191,
            "return": [
                "List[Command]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LightButton.get_long_commands": {
            "name": "get_long_commands",
            "location": 194,
            "return": [
                "List[Command]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LightButton.get_double_commands": {
            "name": "get_double_commands",
            "location": 197,
            "return": [
                "List[Command]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SwitchButton.__init__": {
            "name": "__init__",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "SwitchButton.get_topics": {
            "name": "get_topics",
            "location": 208,
            "return": [
                "List[Tuple[(list, str, str)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SwitchButton.process_nessage": {
            "name": "process_nessage",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str",
                    "int"
                ],
                "data": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "SwitchButton.get_display_state": {
            "name": "get_display_state",
            "location": 224,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SwitchButton.get_press_commands": {
            "name": "get_press_commands",
            "location": 257,
            "return": [
                "List[Command]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "robotica-remote-master/src/main.py": {
        "_handle_exception": {
            "name": "_handle_exception",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "loop": [
                    "float",
                    "str",
                    "bool"
                ],
                "context": [
                    "str",
                    "float"
                ]
            }
        },
        "launch": {
            "name": "launch",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "func": [
                    "int",
                    "Iterable[str]",
                    "Callable",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 501,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Button.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pin": [
                    "str",
                    "float",
                    "Dict[str, str]"
                ]
            }
        },
        "Button.press_func": {
            "name": "press_func",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable",
                    "float",
                    "Callable[[T],bool]"
                ]
            }
        },
        "Button.release_func": {
            "name": "release_func",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable",
                    "float",
                    "Callable[[T],bool]"
                ]
            }
        },
        "Button.double_func": {
            "name": "double_func",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable",
                    "float",
                    "Callable[[T],bool]"
                ]
            }
        },
        "Button.long_func": {
            "name": "long_func",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable",
                    "float",
                    "Callable[[T],bool]"
                ]
            }
        },
        "Button.rawstate": {
            "name": "rawstate",
            "location": 107,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Button.__call__": {
            "name": "__call__",
            "location": 111,
            "return": [
                "Callable",
                "Union[concurrenfutures.Future, asyncio.futures.Future]",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Button._irq": {
            "name": "_irq",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pin": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "LightsTask.__init__": {
            "name": "__init__",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pin": [
                    "int",
                    "float",
                    "Optional[float]",
                    "None",
                    "Union[int,float]",
                    "dss.config.Replica"
                ],
                "num_lights": [
                    "int",
                    "float"
                ],
                "write_ok_func": [
                    "int",
                    "bool",
                    "List[Any]",
                    "Optional[List[Any]]",
                    "None"
                ],
                "stop_func": [
                    "int",
                    "bool",
                    "List[Any]",
                    "Optional[List[Any]]",
                    "None"
                ]
            }
        },
        "LightsTask.cancel": {
            "name": "cancel",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LightsTask.stop": {
            "name": "stop",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LightsTask.is_stopped": {
            "name": "is_stopped",
            "location": 182,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LightsTask.fill": {
            "name": "fill",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "color": [
                    "bool",
                    "str",
                    "float",
                    "Sequence[int]",
                    "int"
                ]
            }
        },
        "LightsTask.clear": {
            "name": "clear",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LightsTask.n": {
            "name": "n",
            "location": 193,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "LightsTask.__getitem__": {
            "name": "__getitem__",
            "location": 196,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "LightsTask.__setitem__": {
            "name": "__setitem__",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "List",
                    "float",
                    "List[str]"
                ],
                "value": [
                    "int",
                    "List",
                    "float",
                    "List[str]"
                ]
            }
        },
        "LightsTask.__str__": {
            "name": "__str__",
            "location": 203,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LightsTask.write": {
            "name": "write",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LightsTaskTimer._set_timer": {
            "name": "_set_timer",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "minutes": [
                    "int"
                ]
            }
        },
        "LightsTaskStatus.set_warn": {
            "name": "set_warn",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LightsTaskStatus.set_ok": {
            "name": "set_ok",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LightsTaskStatus.set_danger": {
            "name": "set_danger",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LightsTaskColor.set_color": {
            "name": "set_color",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "color": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "LightsTaskButtonColor.set_button_colors": {
            "name": "set_button_colors",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "bool",
                    "Dict"
                ],
                "colors": [
                    "List[dict[str,Any]]",
                    "List[Dict[str,Any]]",
                    "bool"
                ]
            }
        },
        "LightsTaskBoot.set_boot": {
            "name": "set_boot",
            "location": 344,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lights.__init__": {
            "name": "__init__",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pin": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Lights.create_task": {
            "name": "create_task",
            "location": 357,
            "return": [
                "str",
                "Dict[str, Any]",
                "int",
                "List[str]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "task_type": [
                    "int",
                    "str",
                    "Union[int,str]"
                ]
            }
        },
        "Lights.create_bg_task": {
            "name": "create_bg_task",
            "location": 363,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "List[str]",
                "bytes",
                "Callable[[str, str], None]"
            ],
            "arguments": {
                "self": [],
                "task_type": [
                    "int",
                    "str"
                ]
            }
        },
        "Lights._write_task_ok": {
            "name": "_write_task_ok",
            "location": 369,
            "return": [
                "bool",
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "str",
                    "asyncio.Task[Any]"
                ]
            }
        },
        "Lights._stop_task": {
            "name": "_stop_task",
            "location": 374,
            "return": [
                "None",
                "bytes",
                "Iterable[Mapping[str,Any]]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "str",
                    "asyncio.Task[Any]"
                ]
            }
        },
        "MQTT.__init__": {
            "name": "__init__",
            "location": 387,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MQTT._callback": {
            "name": "_callback",
            "location": 394,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "str",
                    "bool",
                    "float"
                ],
                "message": [
                    "str",
                    "bool",
                    "float"
                ],
                "retained": [
                    "str",
                    "bool",
                    "float"
                ]
            }
        },
        "MQTT.close": {
            "name": "close",
            "location": 416,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeVar": {
            "name": "TypeVar",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Button._buttoncheck._timer": {
            "name": "_timer",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "robotica-remote-master/src/subscriptions.py": {
        "_get_message_format": {
            "name": "_get_message_format",
            "location": 12,
            "return": [
                "str",
                "bool",
                "Dict[str,Any]",
                "int"
            ],
            "arguments": {
                "message_str": [
                    "str",
                    "Dict[str,Any]"
                ],
                "format": [
                    "str",
                    "Dict",
                    "bytes"
                ]
            }
        },
        "Subscriptions.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "float"
                ]
            }
        }
    }
}
{
    "roguelike-master/setup.py": {},
    "roguelike-master/roguelike/app.py": {
        "play_game": {
            "name": "play_game",
            "location": 31,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "player": [
                    "int",
                    "float",
                    "Dict[str, Any]"
                ],
                "entities": [
                    "bool",
                    "int",
                    "Iterable[str]"
                ],
                "game_map": [
                    "IO",
                    "bool",
                    "int",
                    "Dict[str, Any]",
                    "str",
                    "dict"
                ],
                "message_log": [
                    "bool",
                    "int",
                    "Iterable[str]"
                ],
                "game_state": [
                    "int",
                    "Dict[str, str]",
                    "str",
                    "Callable"
                ],
                "con": [
                    "bool",
                    "int",
                    "Iterable[str]"
                ],
                "panel": [
                    "bool",
                    "int",
                    "Iterable[str]"
                ],
                "constants": [
                    "int",
                    "float",
                    "Dict[str, Any]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "roguelike-master/roguelike/death_functions.py": {
        "kill_player": {
            "name": "kill_player",
            "location": 8,
            "return": [
                "Tuple[(roguelike.game_messages.Message, Any)]"
            ],
            "arguments": {
                "player": [
                    "List[int]",
                    "str",
                    "list[int]"
                ]
            }
        },
        "kill_monster": {
            "name": "kill_monster",
            "location": 15,
            "return": [
                "roguelike.game_messages.Message"
            ],
            "arguments": {
                "monster": [
                    "dict",
                    "int",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "roguelike-master/roguelike/entity.py": {
        "get_blocking_entities_at_location": {
            "name": "get_blocking_entities_at_location",
            "location": 156,
            "return": [
                "Optional[str]",
                "typing.Text",
                "str",
                "None"
            ],
            "arguments": {
                "entities": [
                    "str",
                    "bool",
                    "int",
                    "Iterator[\"pytesmark.structures.ParameterSet[CaseInfo]\"]",
                    "Iterable[dict]"
                ],
                "destination_x": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "destination_y": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Entity.__post_init__": {
            "name": "__post_init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Entity.move": {
            "name": "move",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dx": [
                    "int"
                ],
                "dy": [
                    "int"
                ]
            }
        },
        "Entity.move_towards": {
            "name": "move_towards",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target_x": [
                    "int",
                    "List[str]",
                    "list[str]",
                    "Sequence[Any]",
                    "typing.Sequence[typing.Any]",
                    "tuple",
                    "tuple[]"
                ],
                "target_y": [
                    "float",
                    "int",
                    "List[List[int]]",
                    "list[list[int]]",
                    "str",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]"
                ],
                "game_map": [
                    "list",
                    "list[]",
                    "int",
                    "List[str]",
                    "list[str]"
                ],
                "entities": [
                    "list",
                    "list[]",
                    "int",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "Entity.move_astar": {
            "name": "move_astar",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "list[]",
                    "int",
                    "list",
                    "str",
                    "bool"
                ],
                "entities": [
                    "str",
                    "int",
                    "dict[, ]",
                    "set[str]",
                    "bool",
                    "dict",
                    "Optional[Set[str]]"
                ],
                "game_map": [
                    "int",
                    "str",
                    "bytes",
                    "bytearray"
                ]
            }
        },
        "Entity.distance": {
            "name": "distance",
            "location": 147,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "Entity.distance_to": {
            "name": "distance_to",
            "location": 150,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "T"
                ]
            }
        }
    },
    "roguelike-master/roguelike/equipment_slots.py": {},
    "roguelike-master/roguelike/fov_functions.py": {
        "initialize_fov": {
            "name": "initialize_fov",
            "location": 4,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "game_map": [
                    "int"
                ]
            }
        },
        "recompute_fov": {
            "name": "recompute_fov",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "fov_map": [
                    "float",
                    "bool"
                ],
                "x": [
                    "float",
                    "bool"
                ],
                "y": [
                    "float",
                    "bool"
                ],
                "radius": [
                    "float",
                    "bool"
                ],
                "light_walls": [
                    "bool",
                    "float"
                ],
                "algorithm": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "roguelike-master/roguelike/game_messages.py": {
        "Message.__post_init__": {
            "name": "__post_init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageLog.add_message": {
            "name": "add_message",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Message"
                ]
            }
        }
    },
    "roguelike-master/roguelike/game_states.py": {},
    "roguelike-master/roguelike/input_handlers.py": {
        "handle_keys": {
            "name": "handle_keys",
            "location": 33,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "key": [
                    "str",
                    "Union[str, dict]",
                    "dict[, ]"
                ],
                "game_state": [
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "handle_inventory_keys": {
            "name": "handle_inventory_keys",
            "location": 39,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "key": [
                    "str"
                ]
            }
        },
        "handle_player_turn_keys": {
            "name": "handle_player_turn_keys",
            "location": 53,
            "return": [
                "Dict[(str, Union[(bool, Tuple[(int, int)])])]"
            ],
            "arguments": {
                "key": [
                    "str",
                    "bytes",
                    "float",
                    "KT"
                ]
            }
        },
        "handle_targeting_keys": {
            "name": "handle_targeting_keys",
            "location": 64,
            "return": [
                "Dict[(str, bool)]"
            ],
            "arguments": {
                "key": [
                    "str",
                    "bytes",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "handle_player_dead_keys": {
            "name": "handle_player_dead_keys",
            "location": 71,
            "return": [
                "Dict[(str, bool)]"
            ],
            "arguments": {
                "key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "handle_main_menu": {
            "name": "handle_main_menu",
            "location": 85,
            "return": [
                "Dict[(str, bool)]"
            ],
            "arguments": {
                "key": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Mapping[str, str]",
                    "typing.Mapping"
                ]
            }
        },
        "handle_level_up_menu": {
            "name": "handle_level_up_menu",
            "location": 94,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "handle_character_screen": {
            "name": "handle_character_screen",
            "location": 104,
            "return": [
                "Dict[(str, bool)]"
            ],
            "arguments": {
                "key": [
                    "bytes",
                    "str",
                    "bytearray"
                ]
            }
        },
        "handle_mouse": {
            "name": "handle_mouse",
            "location": 108,
            "return": [
                "Dict[(str, Tuple[(Any, Any)])]"
            ],
            "arguments": {
                "mouse": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "roguelike-master/roguelike/item_functions.py": {
        "heal": {
            "name": "heal",
            "location": 8,
            "return": [
                "List[Dict[(str, Union[(bool, roguelike.game_messages.Message)])]]"
            ],
            "arguments": {}
        },
        "cast_lightning": {
            "name": "cast_lightning",
            "location": 34,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "cast_fireball": {
            "name": "cast_fireball",
            "location": 81,
            "return": [
                "List[Dict[(str, Union[(bool, roguelike.game_messages.Message)])]]"
            ],
            "arguments": {}
        },
        "cast_confuse": {
            "name": "cast_confuse",
            "location": 127,
            "return": [
                "List[Dict[(str, Union[(bool, roguelike.game_messages.Message)])]]"
            ],
            "arguments": {}
        }
    },
    "roguelike-master/roguelike/menus.py": {
        "menu": {
            "name": "menu",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "con": [
                    "int",
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Callable[[Any], str]",
                    "typing.Callable[typing.Any, str]",
                    "list",
                    "list[]"
                ],
                "header": [
                    "int",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "List[int]",
                    "list[int]"
                ],
                "options": [
                    "int",
                    "List[float]",
                    "list"
                ],
                "width": [
                    "int",
                    "List[str]",
                    "Set[Tuple[str, ...]]",
                    "str"
                ],
                "screen_width": [
                    "int",
                    "List[int]",
                    "Tuple[int, int]",
                    "str"
                ],
                "screen_height": [
                    "int",
                    "Optional[Any]"
                ]
            }
        },
        "inventory_menu": {
            "name": "inventory_menu",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "con": [
                    "int",
                    "typing.Sequence[str]",
                    "Sequence[str]",
                    "bool"
                ],
                "header": [
                    "int",
                    "typing.Sequence[str]",
                    "Sequence[str]",
                    "bool"
                ],
                "player": [
                    "bool",
                    "Union['AbstractSetIntStr', 'MappingIntStrAny']",
                    "dict[object, typing.Any]",
                    "Optional[Dict[object, Any]]",
                    "None",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "inventory_width": [
                    "int",
                    "typing.Sequence[str]",
                    "Sequence[str]",
                    "bool"
                ],
                "screen_width": [
                    "int",
                    "typing.Sequence[str]",
                    "Sequence[str]",
                    "bool"
                ],
                "screen_height": [
                    "int",
                    "typing.Sequence[str]",
                    "Sequence[str]",
                    "bool"
                ]
            }
        },
        "main_menu": {
            "name": "main_menu",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "con": [
                    "int",
                    "float",
                    "Tuple[int]",
                    "tuple[int]"
                ],
                "background_image": [
                    "int",
                    "str",
                    "bool"
                ],
                "screen_width": [
                    "int",
                    "list"
                ],
                "screen_height": [
                    "int",
                    "list"
                ]
            }
        },
        "level_up_menu": {
            "name": "level_up_menu",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "con": [
                    "int",
                    "typing.Sequence[str]",
                    "Sequence[str]",
                    "bool"
                ],
                "header": [
                    "int",
                    "typing.Sequence[str]",
                    "Sequence[str]",
                    "bool"
                ],
                "player": [
                    "bool",
                    "None",
                    "int",
                    "Optional[int]"
                ],
                "menu_width": [
                    "int",
                    "typing.Sequence[str]",
                    "Sequence[str]",
                    "bool"
                ],
                "screen_width": [
                    "int",
                    "typing.Sequence[str]",
                    "Sequence[str]",
                    "bool"
                ],
                "screen_height": [
                    "int",
                    "typing.Sequence[str]",
                    "Sequence[str]",
                    "bool"
                ]
            }
        },
        "character_screen": {
            "name": "character_screen",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "player": [
                    "int",
                    "List[int]",
                    "list[int]",
                    "list",
                    "list[]",
                    "List[str]",
                    "list[str]",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ],
                "character_screen_width": [
                    "int",
                    "float"
                ],
                "character_screen_height": [
                    "int",
                    "float"
                ],
                "screen_width": [
                    "float",
                    "int"
                ],
                "screen_height": [
                    "float",
                    "bool",
                    "int",
                    "bytes",
                    "Optional[float]"
                ]
            }
        },
        "message_box": {
            "name": "message_box",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "con": [
                    "int",
                    "list",
                    "list[]",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ],
                "header": [
                    "int",
                    "list",
                    "list[]",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ],
                "width": [
                    "int",
                    "list",
                    "list[]",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ],
                "screen_width": [
                    "int",
                    "list",
                    "list[]",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ],
                "screen_height": [
                    "int",
                    "list",
                    "list[]",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        }
    },
    "roguelike-master/roguelike/random_utils.py": {
        "from_dungeon_level": {
            "name": "from_dungeon_level",
            "location": 4,
            "return": [
                "int",
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "table": [
                    "str",
                    "int",
                    "type",
                    "typing.Type"
                ],
                "dungeon_level": [
                    "str",
                    "int",
                    "type",
                    "typing.Type"
                ]
            }
        },
        "random_choice_index": {
            "name": "random_choice_index",
            "location": 12,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "chances": [
                    "int",
                    "numpy.random.RandomState",
                    "random.Random",
                    "Sequence[int]"
                ]
            }
        },
        "random_choice_from_dict": {
            "name": "random_choice_from_dict",
            "location": 26,
            "return": [
                "list[str]",
                "bool",
                "dict",
                "bytes",
                "Sequence[float]"
            ],
            "arguments": {
                "choice_dict": [
                    "dict[, ]",
                    "dict",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "dict[str, list[typing.Any]]",
                    "Dict[str, Any]",
                    "Dict[str, List[Any]]"
                ]
            }
        }
    },
    "roguelike-master/roguelike/render_functions.py": {
        "get_names_under_mouse": {
            "name": "get_names_under_mouse",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "mouse": [
                    "int",
                    "str",
                    "float"
                ],
                "entities": [
                    "str",
                    "float"
                ],
                "fov_map": [
                    "str",
                    "float"
                ]
            }
        },
        "render_bar": {
            "name": "render_bar",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "panel": [
                    "int",
                    "float",
                    "\"DataFrame\""
                ],
                "x": [
                    "str",
                    "bool",
                    "float"
                ],
                "y": [
                    "str",
                    "bool",
                    "float"
                ],
                "total_width": [
                    "int"
                ],
                "name": [
                    "Tuple[int]",
                    "int",
                    "tuple[int]"
                ],
                "value": [
                    "int",
                    "float"
                ],
                "maximum": [
                    "int",
                    "float"
                ],
                "bar_color": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "int"
                ],
                "back_color": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "int"
                ]
            }
        },
        "render_all": {
            "name": "render_all",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "con": [
                    "int",
                    "str",
                    "float",
                    "bool",
                    "None",
                    "Optional[float]"
                ],
                "panel": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Optional[Mapping[str, Any]]",
                    "typing.Mapping",
                    "Optional[Any]",
                    "None",
                    "typing.Any"
                ],
                "entities": [
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "player": [
                    "int",
                    "Tuple[str]",
                    "tuple[str]",
                    "Type",
                    "typing.Type",
                    "Optional[Mapping[str, Any]]",
                    "typing.Mapping",
                    "None"
                ],
                "game_map": [
                    "int",
                    "float",
                    "List[str]",
                    "list[str]",
                    "bytes",
                    "bytearray",
                    "Optional[int]",
                    "None"
                ],
                "fov_map": [
                    "bool",
                    "str",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ],
                "fov_recompute": [
                    "bool",
                    "str"
                ],
                "message_log": [
                    "str",
                    "Union[dict, list]",
                    "dict[, ]",
                    "Optional[str]",
                    "list[]",
                    "None"
                ],
                "screen_width": [
                    "int",
                    "float",
                    "str",
                    "bool"
                ],
                "screen_height": [
                    "int",
                    "float",
                    "str",
                    "bool"
                ],
                "bar_width": [
                    "int",
                    "Tuple[str]",
                    "tuple[str]",
                    "Type",
                    "typing.Type",
                    "Optional[Mapping[str, Any]]",
                    "typing.Mapping",
                    "None"
                ],
                "panel_height": [
                    "int",
                    "Callable",
                    "typing.Callable[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "panel_y": [
                    "int",
                    "Callable",
                    "typing.Callable[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "mouse": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "colors": [
                    "int",
                    "bool",
                    "str",
                    "Optional[float]",
                    "float"
                ],
                "game_state": [
                    "int",
                    "Iterable[T]",
                    "typing.Iterable[T]"
                ]
            }
        },
        "clear_all": {
            "name": "clear_all",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "con": [
                    "str",
                    "int",
                    "tuple",
                    "tuple[]",
                    "Optional[str]",
                    "None"
                ],
                "entities": [
                    "list[str]",
                    "str",
                    "bool",
                    "List[str]",
                    "int"
                ]
            }
        },
        "draw_entity": {
            "name": "draw_entity",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "con": [
                    "dict[, ]",
                    "dict",
                    "T"
                ],
                "entity": [
                    "str"
                ],
                "fov_map": [
                    "str"
                ],
                "game_map": [
                    "str"
                ]
            }
        },
        "clear_entity": {
            "name": "clear_entity",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "con": [
                    "int",
                    "str"
                ],
                "entity": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "roguelike-master/roguelike/__init__.py": {},
    "roguelike-master/roguelike/__main__.py": {},
    "roguelike-master/roguelike/components/ai.py": {
        "BasicMonster.__post_init__": {
            "name": "__post_init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasicMonster.take_turn": {
            "name": "take_turn",
            "location": 15,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "int",
                    "str",
                    "bool",
                    "dict[, ]",
                    "dict"
                ],
                "fov_map": [
                    "bool",
                    "str",
                    "dict[str, typing.Any]",
                    "int",
                    "Union[str, Dict[str, Any]]"
                ],
                "game_map": [
                    "bool",
                    "int"
                ],
                "entities": [
                    "bool",
                    "int"
                ]
            }
        },
        "ConfusedMonster.take_turn": {
            "name": "take_turn",
            "location": 36,
            "return": [
                "List[Dict[(str, roguelike.game_messages.Message)]]"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "bool"
                ],
                "fov_map": [
                    "bool"
                ],
                "game_map": [
                    "Callable",
                    "typing.Callable[, ]",
                    "dict",
                    "int",
                    "dict[, ]",
                    "Tuple[int]",
                    "tuple[int]"
                ],
                "entities": [
                    "Callable",
                    "typing.Callable[, ]",
                    "dict",
                    "int",
                    "dict[, ]",
                    "Tuple[int]",
                    "tuple[int]"
                ]
            }
        }
    },
    "roguelike-master/roguelike/components/equipment.py": {
        "Equipment.max_hp_bonus": {
            "name": "max_hp_bonus",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Equipment.defense_bonus": {
            "name": "defense_bonus",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Equipment.power_bonus": {
            "name": "power_bonus",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Equipment.toggle_equip": {
            "name": "toggle_equip",
            "location": 50,
            "return": [
                "List[Dict[(str, _T0)]]"
            ],
            "arguments": {
                "self": [],
                "equippable_entity": [
                    "_T0"
                ]
            }
        }
    },
    "roguelike-master/roguelike/components/equippable.py": {},
    "roguelike-master/roguelike/components/fighter.py": {
        "Fighter.__post_init__": {
            "name": "__post_init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fighter.max_hp": {
            "name": "max_hp",
            "location": 30,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fighter.power_level": {
            "name": "power_level",
            "location": 39,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fighter.defense_level": {
            "name": "defense_level",
            "location": 48,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fighter.take_damage": {
            "name": "take_damage",
            "location": 56,
            "return": [
                "List[Dict[(str, Union[(Fighter, int)])]]"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "int",
                    "str"
                ]
            }
        },
        "Fighter.heal": {
            "name": "heal",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "int",
                    "str"
                ]
            }
        },
        "Fighter.attack": {
            "name": "attack",
            "location": 72,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "dict[, ]",
                    "dict",
                    "twitchio.Message"
                ]
            }
        }
    },
    "roguelike-master/roguelike/components/inventory.py": {
        "Inventory.add_item": {
            "name": "add_item",
            "location": 16,
            "return": [
                "List[Dict[(str, Optional[roguelike.game_messages.Message])]]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Inventory.use": {
            "name": "use",
            "location": 40,
            "return": [
                "List[Dict[(str, _T0)]]"
            ],
            "arguments": {
                "self": [],
                "item_entity": [
                    "_T0"
                ]
            }
        },
        "Inventory.remove_item": {
            "name": "remove_item",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "dict[, ]",
                    "scrapy.Item",
                    "dict[str, dict[str, str]]",
                    "dict",
                    "dict[str, str]",
                    "Dict[str, Dict[str, str]]",
                    "typing.Mapping",
                    "Dict[str, str]",
                    "Mapping[str, Dict[str, Any]]"
                ]
            }
        },
        "Inventory.drop_item": {
            "name": "drop_item",
            "location": 78,
            "return": [
                "List[Dict[(str, Union[(roguelike.game_messages.Message, _T0)])]]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "_T0"
                ]
            }
        }
    },
    "roguelike-master/roguelike/components/item.py": {
        "Item.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "use_function": [
                    "bool",
                    "str",
                    "None"
                ],
                "targeting": [
                    "bool",
                    "str",
                    "Optional[List[str]]",
                    "int",
                    "List[str]"
                ],
                "targeting_message": [
                    "bool",
                    "None",
                    "str",
                    "int"
                ]
            }
        }
    },
    "roguelike-master/roguelike/components/level.py": {
        "Level.experience_to_next_level": {
            "name": "experience_to_next_level",
            "location": 12,
            "return": [
                "str",
                "float",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Level.add_xp": {
            "name": "add_xp",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "xp": [
                    "int",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        }
    },
    "roguelike-master/roguelike/components/stairs.py": {},
    "roguelike-master/roguelike/components/__init__.py": {},
    "roguelike-master/roguelike/loader_functions/data_loaders.py": {
        "save_game": {
            "name": "save_game",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "player": [
                    "str",
                    "bool",
                    "tuple"
                ],
                "entities": [
                    "str",
                    "int",
                    "dict",
                    "Optional[dict]"
                ],
                "game_map": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None"
                ],
                "message_log": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "game_state": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None"
                ]
            }
        },
        "load_game": {
            "name": "load_game",
            "location": 19,
            "return": [
                "Tuple[(Any, Any, Any, Any, Any)]"
            ],
            "arguments": {}
        }
    },
    "roguelike-master/roguelike/loader_functions/initialize_new_game.py": {
        "get_constants": {
            "name": "get_constants",
            "location": 16,
            "return": [
                "Dict[(str, Union[(int, Dict[(str, Any)])])]"
            ],
            "arguments": {}
        },
        "get_game_variables": {
            "name": "get_game_variables",
            "location": 82,
            "return": [
                "Tuple[(roguelike.entity.Entity, List[roguelike.entity.Entity], roguelike.map_objects.game_map.GameMap, roguelike.game_messages.MessageLog, Any)]"
            ],
            "arguments": {
                "constants": [
                    "str",
                    "bytes",
                    "list[str]",
                    "int",
                    "List[str]"
                ]
            }
        }
    },
    "roguelike-master/roguelike/map_objects/game_map.py": {
        "GameMap.__post_init__": {
            "name": "__post_init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameMap.initialize_tiles": {
            "name": "initialize_tiles",
            "location": 34,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameMap.make_map": {
            "name": "make_map",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_rooms": [
                    "int",
                    "Optional[int]"
                ],
                "room_min_size": [
                    "int",
                    "Optional[int]",
                    "float"
                ],
                "room_max_size": [
                    "int",
                    "Optional[int]",
                    "float"
                ],
                "map_width": [
                    "int",
                    "float",
                    "Optional[int]"
                ],
                "map_height": [
                    "int",
                    "Optional[float]",
                    "float"
                ],
                "player": [
                    "int",
                    "float",
                    "List[float]"
                ],
                "entities": [
                    "List[float]",
                    "List[Dict[str, Any]]",
                    "bool",
                    "Iterable[\"Entity\"]"
                ]
            }
        },
        "GameMap.create_room": {
            "name": "create_room",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "room": [
                    "int",
                    "Dict[str, int]"
                ]
            }
        },
        "GameMap.create_h_tunnel": {
            "name": "create_h_tunnel",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x1": [
                    "float"
                ],
                "x2": [
                    "float"
                ],
                "y": [
                    "bool"
                ]
            }
        },
        "GameMap.create_v_tunnel": {
            "name": "create_v_tunnel",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "y1": [
                    "int",
                    "str",
                    "List[Dict]",
                    "float"
                ],
                "y2": [
                    "int",
                    "str",
                    "List[Dict]",
                    "float"
                ],
                "x": [
                    "int",
                    "float"
                ]
            }
        },
        "GameMap.place_entities": {
            "name": "place_entities",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "room": [
                    "str",
                    "Sequence[Sequence[Any]]"
                ],
                "entities": [
                    "str",
                    "Exception"
                ]
            }
        },
        "GameMap.is_blocked": {
            "name": "is_blocked",
            "location": 303,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "Union[int, float]",
                    "str"
                ],
                "y": [
                    "int",
                    "float",
                    "Union[int, float]",
                    "str"
                ]
            }
        },
        "GameMap.next_floor": {
            "name": "next_floor",
            "location": 309,
            "return": [
                "List[Union[(roguelike.entity.Entity, _T0)]]"
            ],
            "arguments": {
                "self": [],
                "player": [
                    "_T0"
                ],
                "message_log": [
                    "Callable[[T], bool]",
                    "str",
                    "bool",
                    "Sequence[str]"
                ],
                "constants": [
                    "Optional[str]",
                    "float",
                    "bool",
                    "Set[Tuple[int, int]]",
                    "dict"
                ]
            }
        }
    },
    "roguelike-master/roguelike/map_objects/rectangle.py": {
        "Rect.__post_init__": {
            "name": "__post_init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rect.center": {
            "name": "center",
            "location": 15,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rect.intersect": {
            "name": "intersect",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int"
                ]
            }
        }
    },
    "roguelike-master/roguelike/map_objects/tile.py": {
        "Tile.__post_init__": {
            "name": "__post_init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "roguelike-master/roguelike/map_objects/__init__.py": {},
    "roguelike-master/tests/test_roguelike.py": {
        "test_version": {
            "name": "test_version",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "roguelike-master/tests/__init__.py": {}
}
{
    "rolemaker-master/rolemaker_server.py": {
        "RolemakerError": {
            "name": "RolemakerError",
            "location": 49,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "error_code": [
                    "str",
                    "int"
                ],
                "message": [
                    "str",
                    "int"
                ],
                "operation_name": [
                    "str",
                    "int"
                ],
                "status_code": [
                    "str",
                    "int"
                ]
            }
        },
        "api": {
            "name": "api",
            "location": 77,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "api_name": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None",
                    "Any",
                    "int",
                    "Iterable[float]",
                    "Callable",
                    "Optional[Callable]"
                ]
            }
        },
        "InvalidParameterValue": {
            "name": "InvalidParameterValue",
            "location": 111,
            "return": [
                "bool",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "message": [
                    "str"
                ],
                "operation_name": [
                    "str",
                    "Text"
                ]
            }
        },
        "DeleteConflict": {
            "name": "DeleteConflict",
            "location": 119,
            "return": [
                "int",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "message": [
                    "str"
                ],
                "operation_name": [
                    "str",
                    "Text"
                ]
            }
        },
        "lambda_handler": {
            "name": "lambda_handler",
            "location": 978,
            "return": [
                "bool",
                "Optional[Union[str,Any]]",
                "Dict",
                "List",
                "Tuple[Optional[Any]]",
                "Dict[str,int]"
            ],
            "arguments": {
                "event": [
                    "Dict[str, Any]",
                    "bool",
                    "logging.Logger"
                ],
                "context": [
                    "Dict"
                ]
            }
        },
        "api.decorate_function": {
            "name": "decorate_function",
            "location": 81,
            "return": [
                "int",
                "bool",
                "Iterator"
            ],
            "arguments": {
                "f": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "RolemakerAPI.__call__": {
            "name": "__call__",
            "location": 134,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "RolemakerAPI.mandatory_policy_arn": {
            "name": "mandatory_policy_arn",
            "location": 138,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RolemakerAPI.create_restricted_role": {
            "name": "create_restricted_role",
            "location": 150,
            "return": [
                "str",
                "bool",
                "Dict",
                "List[str]",
                "IO",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RolemakerAPI.delete_restricted_role": {
            "name": "delete_restricted_role",
            "location": 185,
            "return": [
                "dict",
                "bool",
                "str",
                "Dict[str, Any]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RolemakerAPI.attach_restricted_role_policy": {
            "name": "attach_restricted_role_policy",
            "location": 226,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RolemakerAPI.detach_restricted_role_policy": {
            "name": "detach_restricted_role_policy",
            "location": 236,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RolemakerAPI.put_restricted_role_policy": {
            "name": "put_restricted_role_policy",
            "location": 249,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RolemakerAPI.delete_restricted_role_policy": {
            "name": "delete_restricted_role_policy",
            "location": 261,
            "return": [
                "str",
                "dict",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RolemakerAPI.update_assume_restricted_role_policy": {
            "name": "update_assume_restricted_role_policy",
            "location": 271,
            "return": [
                "str",
                "dict",
                "Callable",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RolemakerAPI.update_restricted_role_description": {
            "name": "update_restricted_role_description",
            "location": 282,
            "return": [
                "Mapping[str, Any]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "RolemakerAPI.assert_is_restricted_role": {
            "name": "assert_is_restricted_role",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "RoleName": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]",
                    "int",
                    "None"
                ]
            }
        },
        "RolemakerAPI.get_attached_policies_for_role": {
            "name": "get_attached_policies_for_role",
            "location": 317,
            "return": [
                "set"
            ],
            "arguments": {
                "self": [],
                "role_name": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "RolemakerAPI.get_inline_policy_names_for_role": {
            "name": "get_inline_policy_names_for_role",
            "location": 336,
            "return": [
                "set"
            ],
            "arguments": {
                "self": [],
                "role_name": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "CustomResourceHandler.__init__": {
            "name": "__init__",
            "location": 361,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Dict[str,Any]",
                    "Dict",
                    "bool",
                    "str"
                ],
                "context": [
                    "float",
                    "bool",
                    "Dict[str,Any]",
                    "Step",
                    "Tuple[Union[list,list]]",
                    "Tuple[List,List]"
                ]
            }
        },
        "CustomResourceHandler.stack_id": {
            "name": "stack_id",
            "location": 376,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomResourceHandler.stack_name": {
            "name": "stack_name",
            "location": 383,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Container[str]",
                "bool",
                "Union[List, Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomResourceHandler.resource_type": {
            "name": "resource_type",
            "location": 397,
            "return": [
                "str",
                "Exception",
                "Callable[..., T]",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomResourceHandler.request_type": {
            "name": "request_type",
            "location": 404,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomResourceHandler.logical_resource_id": {
            "name": "logical_resource_id",
            "location": 411,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomResourceHandler.resource_properties": {
            "name": "resource_properties",
            "location": 418,
            "return": [
                "str",
                "Type",
                "Dict[str,str]",
                "int",
                "Dict[str,int]",
                "List[str]",
                "Dict",
                "Set"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomResourceHandler.old_resource_properties": {
            "name": "old_resource_properties",
            "location": 428,
            "return": [
                "str",
                "int",
                "Dict[str,str]",
                "float",
                "Dict[str,int]",
                "Dict[str,Any]",
                "Dict",
                "Set"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomResourceHandler.__call__": {
            "name": "__call__",
            "location": 438,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomRestrictedRoleHandler.handle_create_restricted_role": {
            "name": "handle_create_restricted_role",
            "location": 517,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomRestrictedRoleHandler.handle_delete_restricted_role": {
            "name": "handle_delete_restricted_role",
            "location": 580,
            "return": [
                "Dict[(nothing, nothing)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomRestrictedRoleHandler.handle_update_restricted_role": {
            "name": "handle_update_restricted_role",
            "location": 590,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomRestrictedRoleHandler.handle_replace_update": {
            "name": "handle_replace_update",
            "location": 613,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomRestrictedRoleHandler.handle_inplace_update": {
            "name": "handle_inplace_update",
            "location": 639,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomRestrictedRoleHandler.inline_policies_as_dict": {
            "name": "inline_policies_as_dict",
            "location": 790,
            "return": [
                "dict"
            ],
            "arguments": {
                "policy_list": [
                    "List[dict[str,Any]]",
                    "List[Dict[str,Any]]",
                    "List[str]",
                    "List[tuple[Union[str,str]]]",
                    "List",
                    "List[Tuple[str,str]]",
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "CustomRestrictedRoleHandler.policy_as_json": {
            "name": "policy_as_json",
            "location": 846,
            "return": [
                "int",
                "Dict",
                "bytes",
                "str",
                "Dict[str,Any]",
                "bool",
                "None",
                "Any",
                "Tuple[Type]",
                "Callable[,None]"
            ],
            "arguments": {
                "policy": [
                    "str",
                    "Union[str,Dict[str,Any]]",
                    "List[str]",
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "Optional[str]",
                    "None"
                ],
                "default": [
                    "Optional[Dict[str,Any]]",
                    "None",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "Callable[,None]",
                    "Optional[Any]",
                    "str",
                    "Tuple[type]",
                    "Any",
                    "Tuple[Type]",
                    "Optional[Iterable[str]]"
                ],
                "name": [
                    "Text",
                    "str",
                    "Optional[Dict]",
                    "Dict[str,List[str]]"
                ]
            }
        },
        "CustomRestrictedRoleHandler.check_resource_properties": {
            "name": "check_resource_properties",
            "location": 870,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomRestrictedRoleHandler.force_delete_role": {
            "name": "force_delete_role",
            "location": 892,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "RoleName": [
                    "str"
                ]
            }
        },
        "DirectInvokeHandler.__init__": {
            "name": "__init__",
            "location": 917,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str",
                    "Dict[str,Any]"
                ],
                "context": [
                    "float",
                    "bool",
                    "Dict[str,Any]",
                    "Step",
                    "Tuple[Union[list,list]]",
                    "Tuple[List,List]"
                ]
            }
        },
        "DirectInvokeHandler.__call__": {
            "name": "__call__",
            "location": 923,
            "return": [
                "Dict[Text,Union[dict[Text,Text],dict[Text,int]]]",
                "bool",
                "str",
                "Iterable[str]",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "api.decorate_function.wrapper": {
            "name": "wrapper",
            "location": 86,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "rolemaker-master/tests/test_handler.py": {
        "policy_detach_from_role": {
            "name": "policy_detach_from_role",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "role": [
                    "List[str]",
                    "str",
                    "dict"
                ]
            }
        },
        "role_delete_policy": {
            "name": "role_delete_policy",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "policy_name": [
                    "str",
                    "dict"
                ]
            }
        },
        "role_put_policy": {
            "name": "role_put_policy",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "policy_name": [
                    "str"
                ],
                "policy_json": [
                    "str"
                ]
            }
        },
        "backend_detach_role_policy": {
            "name": "backend_detach_role_policy",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "policy_arn": [
                    "str",
                    "Optional[str]"
                ],
                "role_name": [
                    "Dict[str, List[str]]"
                ]
            }
        },
        "backend_delete_role_policy": {
            "name": "backend_delete_role_policy",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "role_name": [
                    "str"
                ],
                "policy_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "response_detach_role_policy": {
            "name": "response_detach_role_policy",
            "location": 71,
            "return": [
                "str",
                "Type[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "response_delete_role_policy": {
            "name": "response_delete_role_policy",
            "location": 85,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "randstr": {
            "name": "randstr",
            "location": 94,
            "return": [
                "str"
            ],
            "arguments": {
                "length": [
                    "str",
                    "int",
                    "slice"
                ]
            }
        },
        "InvalidParameterError.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "models.LTI1p3Provider"
                ]
            }
        },
        "ResponseHandler.do_PUT": {
            "name": "do_PUT",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseHandler.log_message": {
            "name": "log_message",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "format": [
                    "str",
                    "List[str]",
                    "int",
                    "Type[BaseException]",
                    "Optional[str]"
                ]
            }
        },
        "TestCustomResourceHandler.setUpClass": {
            "name": "setUpClass",
            "location": 193,
            "return": [],
            "arguments": {
                "cls": [
                    "Dict[str, str]",
                    "mitmproxy.http.HTTPFlow",
                    "Tuple[Optional[float], Optional[float]]",
                    "logging.LogRecord",
                    "bool"
                ]
            }
        },
        "TestCustomResourceHandler.tearDownClass": {
            "name": "tearDownClass",
            "location": 199,
            "return": [
                "Iterator[Tuple[str, str]]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "str",
                    "dict"
                ]
            }
        },
        "TestCustomResourceHandler.setUp": {
            "name": "setUp",
            "location": 204,
            "return": [
                "Union[tuple, list]",
                "Dict[str, Any]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCustomResourceHandler.invoke": {
            "name": "invoke",
            "location": 225,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "ResourceType": [
                    "str",
                    "int"
                ],
                "RequestType": [
                    "str",
                    "int"
                ],
                "LogicalResourceId": [
                    "str",
                    "int"
                ]
            }
        },
        "TestCustomResourceHandler.test_unknown_type": {
            "name": "test_unknown_type",
            "location": 249,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCustomResourceHandler.test_basic_create_delete": {
            "name": "test_basic_create_delete",
            "location": 258,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCustomResourceHandler.test_policy_updates": {
            "name": "test_policy_updates",
            "location": 279,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCustomResourceHandler.test_name_change_updates": {
            "name": "test_name_change_updates",
            "location": 443,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCustomResourceHandler.test_no_update_path": {
            "name": "test_no_update_path",
            "location": 519,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCustomResourceHandler.test_create_bad_inline_policy": {
            "name": "test_create_bad_inline_policy",
            "location": 573,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCustomResourceHandler.test_create_missing_assume_role": {
            "name": "test_create_missing_assume_role",
            "location": 625,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCustomResourceHandler.test_create_unknown_props": {
            "name": "test_create_unknown_props",
            "location": 631,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDirectInvoke.setUp": {
            "name": "setUp",
            "location": 647,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDirectInvoke.invoke": {
            "name": "invoke",
            "location": 662,
            "return": [
                "str",
                "Exception",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDirectInvoke.test_basic_workflows": {
            "name": "test_basic_workflows",
            "location": 665,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDirectInvoke.test_attempt_modify_nonrestricted": {
            "name": "test_attempt_modify_nonrestricted",
            "location": 742,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDirectInvoke.test_attempt_detach_mandatory": {
            "name": "test_attempt_detach_mandatory",
            "location": 785,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDirectInvoke.test_empty_rolename": {
            "name": "test_empty_rolename",
            "location": 800,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDirectInvoke.test_delete_nonexistent_role": {
            "name": "test_delete_nonexistent_role",
            "location": 893,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDirectInvoke.test_delete_nonexistent_attached_policy": {
            "name": "test_delete_nonexistent_attached_policy",
            "location": 902,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDirectInvoke.test_attempt_delete_role_with_policies": {
            "name": "test_attempt_delete_role_with_policies",
            "location": 917,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDirectInvoke.test_create_bad_parameters": {
            "name": "test_create_bad_parameters",
            "location": 962,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDirectInvoke.test_attach_detach_bad_parameters": {
            "name": "test_attach_detach_bad_parameters",
            "location": 999,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDirectInvoke.test_put_delete_bad_parameters": {
            "name": "test_put_delete_bad_parameters",
            "location": 1059,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDirectInvoke.test_missing_environ": {
            "name": "test_missing_environ",
            "location": 1135,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDirectInvoke.test_bad_mandatory_policy": {
            "name": "test_bad_mandatory_policy",
            "location": 1186,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDirectInvoke.test_delete_non_restricted_role": {
            "name": "test_delete_non_restricted_role",
            "location": 1207,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDirectInvoke.test_unknown_action": {
            "name": "test_unknown_action",
            "location": 1219,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDirectInvoke.test_unknown_parameters": {
            "name": "test_unknown_parameters",
            "location": 1224,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDirectInvoke.test_attempt_modify_nonrestricted.check_result": {
            "name": "check_result",
            "location": 744,
            "return": [],
            "arguments": {
                "result": []
            }
        },
        "TestDirectInvoke.test_empty_rolename.check_result": {
            "name": "check_result",
            "location": 801,
            "return": [],
            "arguments": {
                "result": []
            }
        },
        "TestDirectInvoke.test_create_bad_parameters.check_result": {
            "name": "check_result",
            "location": 964,
            "return": [],
            "arguments": {
                "result": [],
                "message": []
            }
        },
        "TestDirectInvoke.test_attach_detach_bad_parameters.check_result": {
            "name": "check_result",
            "location": 1001,
            "return": [],
            "arguments": {
                "result": [],
                "message": []
            }
        },
        "TestDirectInvoke.test_put_delete_bad_parameters.check_result": {
            "name": "check_result",
            "location": 1062,
            "return": [],
            "arguments": {
                "result": [],
                "message": []
            }
        },
        "TestDirectInvoke.test_missing_environ.check_result": {
            "name": "check_result",
            "location": 1136,
            "return": [],
            "arguments": {
                "result": [
                    "List[Dict]",
                    "Iterable[Any]",
                    "dict",
                    "str"
                ]
            }
        }
    },
    "rolemaker-master/tests/__init__.py": {}
}
{
    "roskilde-program-spider-master/main.py": {
        "main": {
            "name": "main",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "argv": [
                    "List[str]",
                    "bool",
                    "Optional[Sequence[str]]",
                    "Sequence[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        },
        "get_data": {
            "name": "get_data",
            "location": 31,
            "return": [
                "dict"
            ],
            "arguments": {}
        },
        "get_parsed": {
            "name": "get_parsed",
            "location": 36,
            "return": [
                "str",
                "Callable",
                "bool",
                "Dict[str, Dict[str, Any]]",
                "float"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "bandlist": {
            "name": "bandlist",
            "location": 51,
            "return": [
                "dict"
            ],
            "arguments": {
                "line_up_tree": [
                    "MutableSequence[str]",
                    "str"
                ]
            }
        },
        "session.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "session.get": {
            "name": "get",
            "location": 67,
            "return": [
                "requests.models.Response"
            ],
            "arguments": {
                "self": []
            }
        },
        "BandListItem.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "Dict[str,int]",
                    "Mapping[str,Dict[str,Any]]",
                    "Mapping",
                    "Dict[str,Dict[str,str]]",
                    "Dict[str,dict[str,str]]"
                ]
            }
        },
        "BandListItem.parse": {
            "name": "parse",
            "location": 79,
            "return": [
                "Tuple[(Any, dict)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BandListItem._a": {
            "name": "_a",
            "location": 88,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BandListItem.key": {
            "name": "key",
            "location": 92,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BandListItem.link": {
            "name": "link",
            "location": 96,
            "return": [
                "Tuple[int, int]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "BandListItem.country": {
            "name": "country",
            "location": 100,
            "return": [
                "str",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "BandListItem.data_filters": {
            "name": "data_filters",
            "location": 105,
            "return": [
                "List[str]",
                "str",
                "Iterable",
                "Optional[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BandListItem.parsed_act_page": {
            "name": "parsed_act_page",
            "location": 120,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActPage.__init__": {
            "name": "__init__",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "Dict[str,int]",
                    "Mapping[str,Dict[str,Any]]",
                    "Mapping",
                    "Dict[str,Dict[str,str]]",
                    "Dict[str,dict[str,str]]"
                ]
            }
        },
        "ActPage.parse": {
            "name": "parse",
            "location": 132,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActPage.stage": {
            "name": "stage",
            "location": 142,
            "return": [
                "bool",
                "Hashable",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActPage._blocks": {
            "name": "_blocks",
            "location": 146,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActPage.date": {
            "name": "date",
            "location": 151,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActPage.tagline": {
            "name": "tagline",
            "location": 158,
            "return": [
                "str",
                "Mapping[str, Any]",
                "bool",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActPage.links": {
            "name": "links",
            "location": 167,
            "return": [
                "Dict",
                "Dict[str,Any]",
                "Dict[str,Dict[str,Any]]",
                "Dict[str,Type[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActPage.article": {
            "name": "article",
            "location": 177,
            "return": [
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "roskilde-program-spider-master/tests/test_main.py": {
        "prevent_requests": {
            "name": "prevent_requests",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Dict[str, Any]",
                    "dict",
                    "List[Dict]",
                    "bool"
                ]
            }
        },
        "get_parsed": {
            "name": "get_parsed",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Dict",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "parse_file": {
            "name": "parse_file",
            "location": 47,
            "return": [
                "str",
                "Union[tuple, list]",
                "int"
            ],
            "arguments": {
                "fil": [
                    "str"
                ]
            }
        },
        "filename_here": {
            "name": "filename_here",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "fil": [
                    "str"
                ]
            }
        },
        "_assert_bob": {
            "name": "_assert_bob",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "bob": [
                    "str",
                    "float",
                    "datetime.timedelta",
                    "int"
                ]
            }
        },
        "_date_assert": {
            "name": "_date_assert",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "dat": [
                    "int",
                    "datetime.datetime",
                    "Callable",
                    "str",
                    "float"
                ],
                "isostr": [
                    "int",
                    "datetime.datetime",
                    "Callable",
                    "str",
                    "float"
                ]
            }
        },
        "_date_iso": {
            "name": "_date_iso",
            "location": 115,
            "return": [
                "datetime.datetime",
                "int",
                "Callable",
                "str",
                "float"
            ],
            "arguments": {
                "dat": [
                    "datetime.datetime",
                    "int",
                    "Callable",
                    "str",
                    "float"
                ]
            }
        },
        "_assert_shambs": {
            "name": "_assert_shambs",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "shambs": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "_assert_zusa": {
            "name": "_assert_zusa",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "zusa": [
                    "Dict[str,float]",
                    "float",
                    "List[float]",
                    "str",
                    "Dict",
                    "Optional[Tuple[str,...]]",
                    "Tuple[Union[str,...]]",
                    "None"
                ]
            }
        },
        "_normalize_html": {
            "name": "_normalize_html",
            "location": 168,
            "return": [
                "Callable",
                "str",
                "Dict[str, Any]",
                "bool",
                "list"
            ],
            "arguments": {
                "s": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "get_parsed._get": {
            "name": "_get",
            "location": 28,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "url": [
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "get_parsed._file_match": {
            "name": "_file_match",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "url": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "TestMain.test_returns_string": {
            "name": "test_returns_string",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "get_parsed": [
                    "bool",
                    "str",
                    "List[int]",
                    "Set[int]",
                    "int"
                ]
            }
        },
        "TestGetData.test_returns_data": {
            "name": "test_returns_data",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "get_parsed": [
                    "str",
                    "int",
                    "List[dict[str,str]]",
                    "bool",
                    "None",
                    "List[Dict[str,str]]",
                    "Optional[bool]"
                ]
            }
        },
        "TestGetParsed.test_returns_etree": {
            "name": "test_returns_etree",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestBandlist.bandlist": {
            "name": "bandlist",
            "location": 202,
            "return": [
                "str",
                "Callable",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBandlist.parsed_bandlist": {
            "name": "parsed_bandlist",
            "location": 206,
            "return": [
                "str",
                "list",
                "int",
                "Dict[str, str]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "bandlist": [
                    "str",
                    "int",
                    "None",
                    "bool",
                    "Optional[datetime.datetime]"
                ],
                "get_parsed": [
                    "bool",
                    "str",
                    "List",
                    "List[int]",
                    "Dict[str,object]",
                    "int"
                ]
            }
        },
        "TestBandlist.test_returns_bandlist": {
            "name": "test_returns_bandlist",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parsed_bandlist": []
            }
        },
        "TestBandlist.test_bob_properties": {
            "name": "test_bob_properties",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parsed_bandlist": [
                    "str"
                ]
            }
        },
        "TestBandlist.test_shambs_properties": {
            "name": "test_shambs_properties",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parsed_bandlist": [
                    "str"
                ]
            }
        },
        "TestBandlist.test_zusa_properties": {
            "name": "test_zusa_properties",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parsed_bandlist": [
                    "str"
                ]
            }
        },
        "TestParseMainItem.test_has_properties": {
            "name": "test_has_properties",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WithBobPage.parsed_bob": {
            "name": "parsed_bob",
            "location": 260,
            "return": [
                "str",
                "list",
                "int",
                "Dict[str, str]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseActPage.test_has_stage": {
            "name": "test_has_stage",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parsed_bob": [
                    "str",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "TestParseActPage.test_has_date": {
            "name": "test_has_date",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parsed_bob": [
                    "int",
                    "datetime.date.time"
                ]
            }
        },
        "TestBandListItem.test_complete_bob": {
            "name": "test_complete_bob",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "bool"
                ],
                "get_parsed": [
                    "str",
                    "bool"
                ]
            }
        }
    }
}
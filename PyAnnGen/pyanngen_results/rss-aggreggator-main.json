{
    "rss-aggreggator-main/api/setup.py": {},
    "rss-aggreggator-main/api/api/api.py": {},
    "rss-aggreggator-main/api/api/__init__.py": {},
    "rss-aggreggator-main/api/api/__main__.py": {},
    "rss-aggreggator-main/core_lib/setup.py": {},
    "rss-aggreggator-main/core_lib/core_lib/application_data.py": {
        "repositories": {
            "name": "repositories",
            "location": 42,
            "return": [
                "None",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "venue_processors": {
            "name": "venue_processors",
            "location": 48,
            "return": [
                "None",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "Repositories.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "typing.Callable[, ]",
                    "Callable",
                    "aiohttp.web.Application",
                    "aiohttp.ClientSession"
                ],
                "mongodb_db": [
                    "str"
                ],
                "client_session": [
                    "IO",
                    "typing.IO"
                ]
            }
        },
        "Processors.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "processors": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "rss-aggreggator-main/core_lib/core_lib/app_config.py": {
        "AppConfig._required_env": {
            "name": "_required_env",
            "location": 14,
            "return": [
                "None",
                "str",
                "list"
            ],
            "arguments": {
                "variable_name": [
                    "str"
                ]
            }
        },
        "AppConfig.is_production": {
            "name": "is_production",
            "location": 21,
            "return": [
                "bool",
                "str",
                "List[str]"
            ],
            "arguments": {}
        },
        "AppConfig.is_localhost": {
            "name": "is_localhost",
            "location": 25,
            "return": [
                "bool",
                "str",
                "List[str]"
            ],
            "arguments": {}
        },
        "AppConfig.sentry_dsn_api": {
            "name": "sentry_dsn_api",
            "location": 29,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "AppConfig.sentry_dsn_cron": {
            "name": "sentry_dsn_cron",
            "location": 33,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "AppConfig.token_secret_key": {
            "name": "token_secret_key",
            "location": 37,
            "return": [
                "Dict[str, Any]",
                "dict",
                "str",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "AppConfig.environment": {
            "name": "environment",
            "location": 41,
            "return": [
                "bool",
                "Mapping[str, str]",
                "str"
            ],
            "arguments": {}
        },
        "AppConfig.mongodb_url": {
            "name": "mongodb_url",
            "location": 45,
            "return": [
                "typing.Text",
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "AppConfig.mongo_db": {
            "name": "mongo_db",
            "location": 54,
            "return": [
                "dict",
                "int",
                "str"
            ],
            "arguments": {}
        }
    },
    "rss-aggreggator-main/core_lib/core_lib/__init__.py": {},
    "rss-aggreggator-main/core_lib/core_lib/core/exceptions.py": {},
    "rss-aggreggator-main/core_lib/core_lib/core/fetcher_util.py": {
        "setlocale": {
            "name": "setlocale",
            "location": 18,
            "return": [
                "typing.Generator",
                "typing.Generator[]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "rss-aggreggator-main/core_lib/core_lib/core/fetch_and_parse_details.py": {
        "FetchAndParseDetails.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "bytearray",
                    "bool",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "client_session": [
                    "str",
                    "bytes",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "rss-aggreggator-main/core_lib/core_lib/core/parser.py": {
        "ParsingFailed.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "parsing_context": [
                    "Exception",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "Parser.do_parse": {
            "name": "do_parse",
            "location": 35,
            "return": [
                "typing.List[core_lib.core.repositories.Event]",
                "None"
            ],
            "arguments": {
                "self": [],
                "parsing_context": [
                    "bool",
                    "set[]",
                    "int",
                    "set"
                ]
            }
        },
        "Parser.parse": {
            "name": "parse",
            "location": 38,
            "return": [
                "str",
                "List[List[str]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "parsing_context": [
                    "bytes"
                ]
            }
        },
        "Parser.update_event_with_details": {
            "name": "update_event_with_details",
            "location": 44,
            "return": [
                "core_lib.core.repositories.Event",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str",
                    "dict[, ]",
                    "list[E]",
                    "core_lib.core.models.Event",
                    "domain.Event",
                    "dict",
                    "List[aw_core.models.Event]",
                    "nose2.events.Event"
                ],
                "additional_details": [
                    "str",
                    "dict[, ]",
                    "list[E]",
                    "core_lib.core.models.Event",
                    "domain.Event",
                    "dict",
                    "List[aw_core.models.Event]",
                    "nose2.events.Event"
                ]
            }
        },
        "ParserUtil.not_empty": {
            "name": "not_empty",
            "location": 53,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "Callable[..., None]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "text": [
                    "str",
                    "type",
                    "Optional[str]"
                ]
            }
        },
        "ParserUtil.is_empty": {
            "name": "is_empty",
            "location": 57,
            "return": [
                "bool",
                "Optional[Iterable[Any]]",
                "bytes",
                "float",
                "bs4.BeautifulSoup",
                "int",
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "ParserUtil.has_non_empty_text": {
            "name": "has_non_empty_text",
            "location": 61,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "tag": [
                    "dict[str, typing.Any]",
                    "bs4.Tag",
                    "tuple[typing.Union[str,None,str,None]]",
                    "Dict[str, Any]",
                    "dict[str, set[str]]",
                    "Tuple[Optional[str], Optional[str]]",
                    "Dict[str, Set[str]]"
                ]
            }
        },
        "ParserUtil.stripped_text_or_default_if_empty": {
            "name": "stripped_text_or_default_if_empty",
            "location": 65,
            "return": [
                "str",
                "Dict[str, Any]",
                "bool",
                "Tuple[type]",
                "bytes",
                "int"
            ],
            "arguments": {
                "tag": [
                    "str",
                    "bs4.Tag",
                    "typing.Iterable[str]",
                    "typing.Sequence[str]",
                    "bs4.elemenTag",
                    "Iterable[str]",
                    "Dict[str, Any]",
                    "Sequence[str]"
                ],
                "default": [
                    "str",
                    "bool",
                    "bytes",
                    "int"
                ]
            }
        },
        "ParserUtil.sanitize_text": {
            "name": "sanitize_text",
            "location": 71,
            "return": [
                "str",
                "Exception",
                "int"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "ParserUtil.remove_children_text_from": {
            "name": "remove_children_text_from",
            "location": 75,
            "return": [
                "str",
                "Exception",
                "typing.Sequence[typing.Any]",
                "typing.Mapping",
                "typing.Callable[..., static_frame.core.index_base.IndexBase]",
                "None",
                "dict[typing.Hashable, typing.Any]"
            ],
            "arguments": {
                "parent_tag": [
                    "str",
                    "bs4.Tag",
                    "None",
                    "Optional[str]"
                ],
                "text": [
                    "str",
                    "typing.Sequence[typing.Any]",
                    "Sequence[Any]",
                    "typing.Mapping",
                    "Mapping[str, Any]",
                    "typing.Callable[..., static_frame.core.index_base.IndexBase]",
                    "static_frame.core.util.DtypeSpecifier",
                    "None",
                    "static_frame.core.util.NameType",
                    "dict[typing.Hashable, typing.Any]",
                    "Optional[Callable[..., static_frame.core.index_base.IndexBase]]",
                    "Dict[Hashable, Any]"
                ]
            }
        },
        "ParserUtil.parse_date_time_to_datetime": {
            "name": "parse_date_time_to_datetime",
            "location": 83,
            "return": [
                "None",
                "bool",
                "str",
                "Optional[Tuple[Any, Any]]",
                "Optional[str]",
                "Optional[Tuple[str, str]]"
            ],
            "arguments": {
                "date": [
                    "str",
                    "datetime.datetime.datetime"
                ],
                "time": [
                    "str",
                    "datetime.datetime.datetime"
                ],
                "tz_str": [
                    "str",
                    "datetime.datetime.datetime"
                ]
            }
        }
    },
    "rss-aggreggator-main/core_lib/core_lib/core/processing_chain.py": {
        "Link.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Chain.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "chain": [
                    "str",
                    "int"
                ]
            }
        },
        "DatabaseSink.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event_repository": [
                    "str",
                    "float",
                    "int",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        }
    },
    "rss-aggreggator-main/core_lib/core_lib/core/repositories.py": {
        "uuid4_str": {
            "name": "uuid4_str",
            "location": 16,
            "return": [
                "int",
                "str"
            ],
            "arguments": {}
        },
        "PyObjectId.__get_validators__": {
            "name": "__get_validators__",
            "location": 22,
            "return": [
                "bson.ObjectId"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "List[int]",
                    "Type['DataclassT']",
                    "str",
                    "List[str]"
                ]
            }
        },
        "PyObjectId.validate": {
            "name": "validate",
            "location": 26,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "T",
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "value": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "PyObjectId.__modify_schema__": {
            "name": "__modify_schema__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Callable",
                    "Type['DataclassT']",
                    "Callable[[None], \"Expr\"]",
                    "Mapping[str, Any]",
                    "dict",
                    "Iterable[T]"
                ],
                "field_schema": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "Event.convert_utc_to_timezone": {
            "name": "convert_utc_to_timezone",
            "location": 70,
            "return": [
                "int",
                "bool",
                "dict",
                "datetime.datetime"
            ],
            "arguments": {
                "when": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]",
                    "float"
                ],
                "tz_str": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]",
                    "float"
                ]
            }
        },
        "Event.convert_utc_to_venue_timezone": {
            "name": "convert_utc_to_venue_timezone",
            "location": 73,
            "return": [
                "int",
                "dict",
                "str",
                "Callable[[], Iterable[Any]]"
            ],
            "arguments": {
                "self": [],
                "when": [
                    "datetime.datetime",
                    "str",
                    "Tuple[float, float]",
                    "List['cirq.Qid']"
                ]
            }
        },
        "Event.__repr__": {
            "name": "__repr__",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.is_not_empty": {
            "name": "is_not_empty",
            "location": 81,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "Optional[T]"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "bool"
                ]
            }
        },
        "Event.is_valid": {
            "name": "is_valid",
            "location": 84,
            "return": [
                "str",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VenueRepository.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "database": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "EventRepository.__init__": {
            "name": "__init__",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "database": [
                    "str",
                    "TextIO",
                    "int"
                ]
            }
        }
    },
    "rss-aggreggator-main/core_lib/core_lib/core/rss.py": {
        "RSSChannel.generate_pre_amble": {
            "name": "generate_pre_amble",
            "location": 26,
            "return": [
                "bool",
                "Callable",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "RSSChannel.generate_post_amble": {
            "name": "generate_post_amble",
            "location": 44,
            "return": [
                "bytes",
                "bool",
                "Optional[int]",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "RSSItem.as_node": {
            "name": "as_node",
            "location": 58,
            "return": [
                "int",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transformer.item_to_rss": {
            "name": "item_to_rss",
            "location": 72,
            "return": [
                "RSSItem",
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "item": [
                    "list[]",
                    "T",
                    "list",
                    "dataclasses.Field"
                ]
            }
        }
    },
    "rss-aggreggator-main/core_lib/core_lib/core/source.py": {
        "Source.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "venue": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Optional[str]",
                    "None",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "scrape_url": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "parser": [
                    "str",
                    "bool",
                    "Optional[Callable[[Dict], Any]]",
                    "typing.Callable[dict[, ], typing.Any]",
                    "None"
                ]
            }
        }
    },
    "rss-aggreggator-main/core_lib/core_lib/core/venue_processor.py": {
        "VenueProcessor.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event_repository": [
                    "str",
                    "float",
                    "int",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "venue_repository": [
                    "float",
                    "bool",
                    "\"Step\"",
                    "tuple[typing.Union[list[],list[]]]",
                    "dict[str, typing.Any]",
                    "Tuple[List, List]",
                    "Dict[str, Any]"
                ],
                "venue": [
                    "float",
                    "bool",
                    "\"Step\"",
                    "tuple[typing.Union[list[],list[]]]",
                    "dict[str, typing.Any]",
                    "Tuple[List, List]",
                    "Dict[str, Any]"
                ]
            }
        },
        "VenueProcessor.create_processing_chain": {
            "name": "create_processing_chain",
            "location": 29,
            "return": [
                "str",
                "Chain"
            ],
            "arguments": {
                "self": [],
                "client_session": [
                    "None",
                    "aiohttp.ClientSession",
                    "bool",
                    "list[dict[str, typing.Any]]",
                    "Optional[datetime.datetime]",
                    "List[Dict[str, Any]]",
                    "list[list[str]]",
                    "List[List[str]]"
                ],
                "database_sink": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "str",
                    "None",
                    "Optional[Dict[str, Any]]",
                    "aiohttp.ClientSession"
                ]
            }
        },
        "VenueProcessor.processing_chain_with_additionals": {
            "name": "processing_chain_with_additionals",
            "location": 32,
            "return": [
                "Chain",
                "str",
                "bool",
                "dict",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "client_session": [
                    "str",
                    "Union[int,str]",
                    "int"
                ],
                "database_sink": [
                    "str",
                    "Union[int,str]",
                    "int"
                ]
            }
        },
        "VenueProcessor.fetch_source": {
            "name": "fetch_source",
            "location": 61,
            "return": [
                "core_lib.core.source.Source",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rss-aggreggator-main/core_lib/core_lib/core/__init__.py": {},
    "rss-aggreggator-main/core_lib/core_lib/venues/hedon_zwolle.py": {
        "HedonParser.do_parse": {
            "name": "do_parse",
            "location": 38,
            "return": [
                "list[]",
                "tuple",
                "str"
            ],
            "arguments": {
                "self": [],
                "parsing_context": [
                    "core_lib.core.parser.ParsingContext",
                    "interpreter.src.parser.operation.Operation"
                ]
            }
        },
        "HedonParser._transform": {
            "name": "_transform",
            "location": 57,
            "return": [
                "Event",
                "bool",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "venue": [
                    "str"
                ],
                "article": [
                    "str",
                    "dict"
                ],
                "parsing_context": [
                    "Callable",
                    "bool",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "HedonProcessor.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event_repository": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "aiohttp.ClientSession"
                ],
                "venue_repository": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "aiohttp.ClientSession"
                ],
                "venue": [
                    "Optional[Iterable[str]]",
                    "typing.Iterable[str]",
                    "Optional[str]",
                    "None",
                    "Type['BaseConfig']",
                    "str",
                    "widark.Event",
                    "typing.Type"
                ]
            }
        },
        "HedonProcessor.fetch_source": {
            "name": "fetch_source",
            "location": 97,
            "return": [
                "HedonSource",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HedonSource.__init__": {
            "name": "__init__",
            "location": 122,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "venue": [
                    "str",
                    "core_lib.core.models.Venue"
                ],
                "scrape_url": [
                    "typing.Text",
                    "str",
                    "core_lib.core.models.Venue"
                ]
            }
        }
    },
    "rss-aggreggator-main/core_lib/core_lib/venues/melkweg_amsterdam.py": {
        "MelkwegParser._make_description": {
            "name": "_make_description",
            "location": 17,
            "return": [
                "bytes",
                "bool",
                "Optional[str]",
                "Optional[static_frame.core.util.PathSpecifierOrFileLike]"
            ],
            "arguments": {
                "event": [
                    "bytes",
                    "widark.Event",
                    "Dict[str, Any]"
                ]
            }
        },
        "MelkwegParser.do_parse": {
            "name": "do_parse",
            "location": 25,
            "return": [
                "list[Event]",
                "bool",
                "Dict[str, int]",
                "Optional[Union[str, Any]]",
                "float"
            ],
            "arguments": {
                "self": [],
                "parsing_context": [
                    "Dict[str, Any]",
                    "str",
                    "dict[str, typing.Any]",
                    "list",
                    "list[]",
                    "dict",
                    "dict[, ]",
                    "Mapping[str, Mapping[str, panda3d.core.LPoint3f]]",
                    "typing.Mapping"
                ]
            }
        },
        "MelkwegProcessor.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event_repository": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "aiohttp.ClientSession"
                ],
                "venue_repository": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "aiohttp.ClientSession"
                ],
                "venue": [
                    "Optional[Iterable[str]]",
                    "typing.Iterable[str]",
                    "Optional[str]",
                    "None",
                    "Type['BaseConfig']",
                    "str",
                    "widark.Event",
                    "typing.Type"
                ]
            }
        },
        "MelkwegProcessor.fetch_source": {
            "name": "fetch_source",
            "location": 69,
            "return": [
                "MelkwegSource",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MelkwegSource.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "venue": [
                    "str",
                    "core_lib.core.models.Venue"
                ],
                "scrape_url": [
                    "typing.Text",
                    "str",
                    "core_lib.core.models.Venue"
                ]
            }
        }
    },
    "rss-aggreggator-main/core_lib/core_lib/venues/neushoorn_leeuwarden.py": {
        "NeushoornParser.do_parse": {
            "name": "do_parse",
            "location": 17,
            "return": [
                "list[Event]",
                "aiohttp.web.Application",
                "bool",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "parsing_context": []
            }
        },
        "NeushoornParser.update_event_with_details": {
            "name": "update_event_with_details",
            "location": 50,
            "return": [
                "dict",
                "dict[str, typing.Any]",
                "int",
                "dict[, ]",
                "List[str]",
                "Exception",
                "Tuple[int, int]",
                "bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "core_lib.core.models.Event",
                    "dict[str, typing.Any]",
                    "Exception",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "dict",
                    "bool",
                    "Optional[bool]",
                    "None"
                ],
                "additional_details": [
                    "float",
                    "bool",
                    "threading.Event",
                    "None",
                    "list[O]",
                    "\"Step\"",
                    "int",
                    "Optional[float]",
                    "List[src.core.offer.Offer]"
                ]
            }
        },
        "NeushoornProcessor.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event_repository": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "aiohttp.ClientSession"
                ],
                "venue_repository": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "aiohttp.ClientSession"
                ],
                "venue": [
                    "Optional[Iterable[str]]",
                    "typing.Iterable[str]",
                    "Optional[str]",
                    "None",
                    "Type['BaseConfig']",
                    "str",
                    "widark.Event",
                    "typing.Type"
                ]
            }
        },
        "NeushoornProcessor.fetch_source": {
            "name": "fetch_source",
            "location": 79,
            "return": [
                "NeushoornSource",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NeushoornProcessor.create_processing_chain": {
            "name": "create_processing_chain",
            "location": 83,
            "return": [
                "Chain"
            ],
            "arguments": {
                "self": [],
                "client_session": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "core_lib.core.processing_chain.DatabaseSink",
                    "aiohttp.ClientSession"
                ],
                "database_sink": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "core_lib.core.processing_chain.DatabaseSink",
                    "aiohttp.ClientSession"
                ]
            }
        },
        "NeushoornSource.__init__": {
            "name": "__init__",
            "location": 113,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "venue": [
                    "str",
                    "core_lib.core.models.Venue"
                ],
                "scrape_url": [
                    "typing.Text",
                    "str",
                    "core_lib.core.models.Venue"
                ]
            }
        }
    },
    "rss-aggreggator-main/core_lib/core_lib/venues/oost_groningen.py": {
        "OostGroningenParser.do_parse": {
            "name": "do_parse",
            "location": 16,
            "return": [
                "tuple",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "parsing_context": [
                    "str"
                ]
            }
        },
        "OostGroningenParser._transform": {
            "name": "_transform",
            "location": 23,
            "return": [
                "Event",
                "bool",
                "List[str]",
                "datetime.datetime",
                "aiohttp.web.Application"
            ],
            "arguments": {
                "venue": [
                    "str",
                    "Hashable",
                    "typing.Hashable",
                    "dict",
                    "dict[, ]",
                    "Optional[str]",
                    "None"
                ],
                "tag": [
                    "str",
                    "Type[Any]",
                    "Dict[str, str]",
                    "dict"
                ],
                "parsing_context": [
                    "str",
                    "bool",
                    "typing.Mapping",
                    "Mapping",
                    "Source"
                ]
            }
        },
        "OostGroningenProcessor.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event_repository": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "aiohttp.ClientSession"
                ],
                "venue_repository": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "aiohttp.ClientSession"
                ],
                "venue": [
                    "Optional[Iterable[str]]",
                    "typing.Iterable[str]",
                    "Optional[str]",
                    "None",
                    "Type['BaseConfig']",
                    "str",
                    "widark.Event",
                    "typing.Type"
                ]
            }
        },
        "OostGroningenProcessor.fetch_source": {
            "name": "fetch_source",
            "location": 66,
            "return": [
                "OostGroningenSource",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OostGroningenSource.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "venue": [
                    "str",
                    "core_lib.core.models.Venue"
                ],
                "scrape_url": [
                    "typing.Text",
                    "str",
                    "core_lib.core.models.Venue"
                ]
            }
        }
    },
    "rss-aggreggator-main/core_lib/core_lib/venues/paradiso_amsterdam.py": {
        "ParadisoParser.do_parse": {
            "name": "do_parse",
            "location": 17,
            "return": [
                "tuple",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "parsing_context": [
                    "Type['Model']",
                    "typing.Type",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "ParadisoParser._transform": {
            "name": "_transform",
            "location": 22,
            "return": [
                "Event",
                "bool",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "venue": [
                    "dict",
                    "bytes",
                    "dict[, ]",
                    "str",
                    "type",
                    "typing.Type"
                ],
                "data": [
                    "bytes",
                    "Dict[str, Any]",
                    "dict"
                ],
                "parsing_context": [
                    "typing.Mapping",
                    "bool",
                    "Mapping[str, Any]",
                    "data.Event"
                ]
            }
        },
        "ParadisoParser.update_event_with_details": {
            "name": "update_event_with_details",
            "location": 51,
            "return": [
                "dict",
                "dict[str, typing.Any]",
                "int",
                "dict[, ]",
                "List[str]",
                "bool",
                "Tuple[int, int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "bool",
                    "dict[, ]",
                    "str",
                    "dict",
                    "homeassistancore.Event"
                ],
                "additional_details": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "Event"
                ]
            }
        },
        "ParadisoProcessor.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event_repository": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "aiohttp.ClientSession"
                ],
                "venue_repository": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "aiohttp.ClientSession"
                ],
                "venue": [
                    "Optional[Iterable[str]]",
                    "typing.Iterable[str]",
                    "Optional[str]",
                    "None",
                    "Type['BaseConfig']",
                    "str",
                    "widark.Event",
                    "typing.Type"
                ]
            }
        },
        "ParadisoProcessor.fetch_source": {
            "name": "fetch_source",
            "location": 74,
            "return": [
                "ParadisoSource",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParadisoProcessor.create_processing_chain": {
            "name": "create_processing_chain",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "client_session": [
                    "str",
                    "core_lib.core.processing_chain.DatabaseSink",
                    "None",
                    "dict[str, typing.Any]",
                    "aiohttp.ClientSession",
                    "Union[aiohttp.ClientSession, None]",
                    "Dict[str, Any]"
                ],
                "database_sink": [
                    "str",
                    "core_lib.core.processing_chain.DatabaseSink",
                    "None",
                    "dict[str, typing.Any]",
                    "aiohttp.ClientSession",
                    "Union[aiohttp.ClientSession, None]",
                    "Dict[str, Any]"
                ]
            }
        },
        "ParadisoSource.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "venue": [
                    "str",
                    "core_lib.core.models.Venue"
                ],
                "scrape_url": [
                    "typing.Text",
                    "str",
                    "core_lib.core.models.Venue"
                ]
            }
        }
    },
    "rss-aggreggator-main/core_lib/core_lib/venues/simplon_groningen.py": {
        "SimplonParser.do_parse": {
            "name": "do_parse",
            "location": 16,
            "return": [
                "list[]",
                "tuple",
                "bool"
            ],
            "arguments": {
                "self": [],
                "parsing_context": [
                    "Callable",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "SimplonParser._transform": {
            "name": "_transform",
            "location": 23,
            "return": [
                "Event",
                "bool",
                "List[str]",
                "datetime.datetime",
                "aiohttp.web.Application"
            ],
            "arguments": {
                "venue": [
                    "str",
                    "Mapping[str, int]",
                    "typing.Mapping",
                    "Optional[Dict]",
                    "dict[, ]",
                    "List[str]",
                    "None",
                    "list[str]"
                ],
                "tag": [
                    "dict",
                    "Dict[str, Any]",
                    "Type[T]",
                    "Exception"
                ],
                "parsing_context": [
                    "str",
                    "bool",
                    "typing.Mapping",
                    "Mapping",
                    "Source"
                ]
            }
        },
        "SimplonProcessor.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event_repository": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "aiohttp.ClientSession"
                ],
                "venue_repository": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "aiohttp.ClientSession"
                ],
                "venue": [
                    "Optional[Iterable[str]]",
                    "typing.Iterable[str]",
                    "Optional[str]",
                    "None",
                    "Type['BaseConfig']",
                    "str",
                    "widark.Event",
                    "typing.Type"
                ]
            }
        },
        "SimplonProcessor.fetch_source": {
            "name": "fetch_source",
            "location": 63,
            "return": [
                "SimplonSource",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimplonSource.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "venue": [
                    "str",
                    "core_lib.core.models.Venue"
                ],
                "scrape_url": [
                    "typing.Text",
                    "str",
                    "core_lib.core.models.Venue"
                ]
            }
        }
    },
    "rss-aggreggator-main/core_lib/core_lib/venues/spot_groningen.py": {
        "SpotParser.do_parse": {
            "name": "do_parse",
            "location": 17,
            "return": [
                "list[]",
                "tuple",
                "str"
            ],
            "arguments": {
                "self": [],
                "parsing_context": [
                    "core_lib.core.parser.ParsingContext",
                    "aioredis.parser.PyReader"
                ]
            }
        },
        "SpotParser._transform": {
            "name": "_transform",
            "location": 23,
            "return": [
                "Event",
                "str",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "venue": [
                    "str",
                    "int",
                    "bytes"
                ],
                "article": [
                    "purplship.core.models.TrackingRequest"
                ],
                "parsing_context": [
                    "Callable",
                    "bool",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "SpotProcessor.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event_repository": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "aiohttp.ClientSession"
                ],
                "venue_repository": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "aiohttp.ClientSession"
                ],
                "venue": [
                    "Optional[Iterable[str]]",
                    "typing.Iterable[str]",
                    "Optional[str]",
                    "None",
                    "Type['BaseConfig']",
                    "str",
                    "widark.Event",
                    "typing.Type"
                ]
            }
        },
        "SpotProcessor.fetch_source": {
            "name": "fetch_source",
            "location": 62,
            "return": [
                "SpotSource",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpotSource.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "venue": [
                    "str",
                    "core_lib.core.models.Venue"
                ],
                "scrape_url": [
                    "typing.Text",
                    "str",
                    "core_lib.core.models.Venue"
                ]
            }
        }
    },
    "rss-aggreggator-main/core_lib/core_lib/venues/t013_tilburg.py": {
        "T013Parser.do_parse": {
            "name": "do_parse",
            "location": 19,
            "return": [
                "list[]",
                "core_lib.core.parser.ParsingContext",
                "List[core_lib.core.models.Event]",
                "str",
                "Callable[[Any], bool]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "parsing_context": [
                    "core_lib.core.parser.ParsingContext",
                    "aioredis.parser.PyReader"
                ]
            }
        },
        "T013Parser._transform": {
            "name": "_transform",
            "location": 34,
            "return": [
                "Event",
                "str",
                "bool",
                "datetime.datetime"
            ],
            "arguments": {
                "venue": [
                    "dict",
                    "int",
                    "dict[, ]",
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "list[str]"
                ],
                "json_event": [
                    "tuple[typing.Union[str,int]]",
                    "Tuple[str, int]",
                    "int"
                ],
                "parsing_context": [
                    "str"
                ]
            }
        },
        "T013Processor.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event_repository": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "aiohttp.ClientSession"
                ],
                "venue_repository": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "aiohttp.ClientSession"
                ],
                "venue": [
                    "Optional[Iterable[str]]",
                    "typing.Iterable[str]",
                    "Optional[str]",
                    "None",
                    "Type['BaseConfig']",
                    "str",
                    "widark.Event",
                    "typing.Type"
                ]
            }
        },
        "T013Processor.fetch_source": {
            "name": "fetch_source",
            "location": 72,
            "return": [
                "T013Source",
                "str",
                "int",
                "Optional[Mapping[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "T013Source.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "venue": [
                    "str",
                    "core_lib.core.models.Venue"
                ],
                "scrape_url": [
                    "typing.Text",
                    "str",
                    "core_lib.core.models.Venue"
                ]
            }
        }
    },
    "rss-aggreggator-main/core_lib/core_lib/venues/tivoli_utrecht.py": {
        "TivoliParser.do_parse": {
            "name": "do_parse",
            "location": 17,
            "return": [
                "list[]",
                "Parser",
                "core_lib.core.parser.ParsingContext",
                "str"
            ],
            "arguments": {
                "self": [],
                "parsing_context": [
                    "core_lib.core.parser.ParsingContext"
                ]
            }
        },
        "TivoliParser._transform": {
            "name": "_transform",
            "location": 23,
            "return": [
                "Event",
                "bool",
                "Optional[int]",
                "str",
                "int"
            ],
            "arguments": {
                "venue": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "str",
                    "dict",
                    "homeassistancore.Event",
                    "None",
                    "Optional[str]"
                ],
                "event": [
                    "widark.Event",
                    "dict",
                    "core.D.Event"
                ]
            }
        },
        "TivoliParser.update_event_with_details": {
            "name": "update_event_with_details",
            "location": 55,
            "return": [
                "dict[str, typing.Any]",
                "dict",
                "dict[, ]",
                "int",
                "str",
                "List[str]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "additional_details": [
                    "float",
                    "bool",
                    "threading.Event",
                    "None",
                    "list[src.core.offer.Offer]",
                    "\"Step\"",
                    "int",
                    "Optional[float]",
                    "List[src.core.offer.Offer]"
                ]
            }
        },
        "TivoliProcessor.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event_repository": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "aiohttp.ClientSession"
                ],
                "venue_repository": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "aiohttp.ClientSession"
                ],
                "venue": [
                    "Optional[Iterable[str]]",
                    "typing.Iterable[str]",
                    "Optional[str]",
                    "None",
                    "Type['BaseConfig']",
                    "str",
                    "widark.Event",
                    "typing.Type"
                ]
            }
        },
        "TivoliProcessor.create_processing_chain": {
            "name": "create_processing_chain",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "client_session": [
                    "str",
                    "core_lib.core.processing_chain.DatabaseSink",
                    "None",
                    "dict[str, typing.Any]",
                    "aiohttp.ClientSession",
                    "Union[aiohttp.ClientSession, None]",
                    "Dict[str, Any]"
                ],
                "database_sink": [
                    "str",
                    "core_lib.core.processing_chain.DatabaseSink",
                    "None",
                    "dict[str, typing.Any]",
                    "aiohttp.ClientSession",
                    "Union[aiohttp.ClientSession, None]",
                    "Dict[str, Any]"
                ]
            }
        },
        "TivoliProcessor.fetch_source": {
            "name": "fetch_source",
            "location": 87,
            "return": [
                "TivoliSource",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TivoliSource.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "venue": [
                    "str",
                    "core_lib.core.models.Venue"
                ],
                "scrape_url": [
                    "typing.Text",
                    "str",
                    "core_lib.core.models.Venue"
                ]
            }
        }
    },
    "rss-aggreggator-main/core_lib/core_lib/venues/vera_groningen.py": {
        "VeraParser.do_parse": {
            "name": "do_parse",
            "location": 18,
            "return": [
                "list[]",
                "tuple",
                "bool"
            ],
            "arguments": {
                "self": [],
                "parsing_context": [
                    "Callable",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "VeraParser._add_sup_text_from_text": {
            "name": "_add_sup_text_from_text",
            "location": 25,
            "return": [
                "typing.Text",
                "str",
                "None",
                "typing.Container",
                "Sequence[Any]",
                "Union[Type, Tuple[Type, ...]]",
                "Type[Any]",
                "dateutil.relativedelta.relativedelta"
            ],
            "arguments": {
                "parent_tag": [
                    "str",
                    "Optional[str]",
                    "bs4.Tag"
                ],
                "text": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Container",
                    "typing.Container"
                ]
            }
        },
        "VeraParser._find_extra": {
            "name": "_find_extra",
            "location": 30,
            "return": [
                "typing.Text",
                "Optional[str]",
                "Optional[Iterable[Any]]",
                "list",
                "str",
                "bool"
            ],
            "arguments": {
                "tag": [
                    "str",
                    "List[str]",
                    "bool",
                    "dict"
                ]
            }
        },
        "VeraParser._transform": {
            "name": "_transform",
            "location": 39,
            "return": [
                "Event",
                "bool",
                "List[str]",
                "datetime.datetime",
                "aiohttp.web.Application"
            ],
            "arguments": {
                "venue": [
                    "str",
                    "Optional[str]",
                    "None",
                    "dict[str, typing.Any]",
                    "Optional[datetime.datetime]",
                    "int",
                    "Dict[str, Any]",
                    "float",
                    "Optional[preacher.core.value.Value.Context]",
                    "core_lib.core.models.Venue",
                    "Union[None, int, float]",
                    "Optional[datetime.time]",
                    "Optional[int]"
                ],
                "tag": [
                    "str",
                    "Type",
                    "dict",
                    "Dict[str, str]"
                ],
                "parsing_context": [
                    "str",
                    "bool",
                    "typing.Mapping",
                    "Mapping",
                    "Source"
                ]
            }
        },
        "VeraProcessor.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "event_repository": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "aiohttp.ClientSession"
                ],
                "venue_repository": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "aiohttp.ClientSession"
                ],
                "venue": [
                    "Optional[Iterable[str]]",
                    "typing.Iterable[str]",
                    "Optional[str]",
                    "None",
                    "Type['BaseConfig']",
                    "str",
                    "widark.Event",
                    "typing.Type"
                ]
            }
        },
        "VeraProcessor.fetch_source": {
            "name": "fetch_source",
            "location": 103,
            "return": [
                "VeraSource",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VeraSource.__init__": {
            "name": "__init__",
            "location": 125,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "venue": [
                    "str",
                    "core_lib.core.models.Venue"
                ],
                "scrape_url": [
                    "typing.Text",
                    "str",
                    "core_lib.core.models.Venue"
                ]
            }
        }
    },
    "rss-aggreggator-main/core_lib/core_lib/venues/__init__.py": {},
    "rss-aggreggator-main/cron/setup.py": {},
    "rss-aggreggator-main/cron/cron/cron.py": {},
    "rss-aggreggator-main/cron/cron/__init__.py": {},
    "rss-aggreggator-main/cron/cron/__main__.py": {},
    "rss-aggreggator-main/unittests/tests/conftest.py": {
        "faker": {
            "name": "faker",
            "location": 33,
            "return": [
                "Faker",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "mongo_url": {
            "name": "mongo_url",
            "location": 103,
            "return": [
                "typing.Text",
                "str",
                "Optional[str]",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {}
        },
        "mongo_db": {
            "name": "mongo_db",
            "location": 110,
            "return": [
                "typing.Text",
                "Dict[str, Callable[[], Any]]",
                "Union[int, float, complex]",
                "Dict[str, Any]",
                "list",
                "bool"
            ],
            "arguments": {}
        },
        "mongodb_client": {
            "name": "mongodb_client",
            "location": 115,
            "return": [
                "AsyncIOMotorClient",
                "str",
                "tensorhive.core.ssh.Username"
            ],
            "arguments": {
                "mongo_url": [
                    "str"
                ]
            }
        },
        "event_loop": {
            "name": "event_loop",
            "location": 120,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "client_session_mocker": {
            "name": "client_session_mocker",
            "location": 221,
            "return": [
                "ClientSessionMocker",
                "aiohttp.web.Application",
                "dict"
            ],
            "arguments": {
                "repositories": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "ClientSessionMocker.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "repositories": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "ClientSessionMocker._fix": {
            "name": "_fix",
            "location": 42,
            "return": [
                "str",
                "datetime.datetime",
                "int",
                "Tuple[datetime.datetime, datetime.datetime, str]"
            ],
            "arguments": {
                "line": [
                    "str",
                    "Union[str, List[str]]"
                ]
            }
        },
        "ClientSessionMocker.setup_client_session_for": {
            "name": "setup_client_session_for",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_directory": [
                    "str",
                    "Iterable[str]",
                    "typing.Iterable[str]",
                    "List[str]",
                    "bool",
                    "Optional[bool]",
                    "None"
                ]
            }
        },
        "ClientSessionMocker.setup_client_session_for._response_for_file": {
            "name": "_response_for_file",
            "location": 75,
            "return": [
                "Mock",
                "dict",
                "Mapping[str, Any]",
                "Dict[str, Union[str, int]]",
                "List[str]",
                "List[Tuple[str, str, int]]",
                "List[Dict[str, Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "file_name": [
                    "str"
                ]
            }
        },
        "ClientSessionMocker.setup_client_session_for.resolve_file_name": {
            "name": "resolve_file_name",
            "location": 89,
            "return": [
                "bool",
                "str",
                "Optional[Dict[str, Any]]",
                "Union[str, Pattern]"
            ],
            "arguments": {
                "url_to_resolve": [
                    "str",
                    "Callable[[], str]",
                    "OSError"
                ]
            }
        }
    },
    "rss-aggreggator-main/unittests/tests/__init__.py": {},
    "rss-aggreggator-main/unittests/tests/samples/__init__.py": {},
    "rss-aggreggator-main/unittests/tests/samples/neushoorn-leeuwarden/fetch_neushoorn_test_data.py": {},
    "rss-aggreggator-main/unittests/tests/samples/neushoorn-leeuwarden/__init__.py": {},
    "rss-aggreggator-main/unittests/tests/samples/paradiso-amsterdam/fetch_details_for_test_paradiso.py": {},
    "rss-aggreggator-main/unittests/tests/samples/paradiso-amsterdam/__init__.py": {},
    "rss-aggreggator-main/unittests/tests/samples/tivoli-utrecht/fetch_details_for_test.py": {},
    "rss-aggreggator-main/unittests/tests/samples/vera-groningen/fetch_test_data.py": {},
    "rss-aggreggator-main/unittests/tests/samples/vera-groningen/__init__.py": {},
    "rss-aggreggator-main/unittests/tests/venues/conftest.py": {
        "assert_rss_channel": {
            "name": "assert_rss_channel",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "xml": [
                    "Element"
                ]
            }
        }
    },
    "rss-aggreggator-main/unittests/tests/venues/test_clean_up.py": {},
    "rss-aggreggator-main/unittests/tests/venues/test_hedon_zwolle.py": {},
    "rss-aggreggator-main/unittests/tests/venues/test_melkweg_amsterdam.py": {},
    "rss-aggreggator-main/unittests/tests/venues/test_neushoorn_leeuwarden.py": {},
    "rss-aggreggator-main/unittests/tests/venues/test_oost_groningen_feed.py": {},
    "rss-aggreggator-main/unittests/tests/venues/test_paradiso_feed.py": {},
    "rss-aggreggator-main/unittests/tests/venues/test_simplon_feed.py": {},
    "rss-aggreggator-main/unittests/tests/venues/test_spot_feed.py": {},
    "rss-aggreggator-main/unittests/tests/venues/test_t013_tilburg_feed.py": {},
    "rss-aggreggator-main/unittests/tests/venues/test_tivoli_feed.py": {},
    "rss-aggreggator-main/unittests/tests/venues/test_vera_feed.py": {},
    "rss-aggreggator-main/unittests/tests/venues/__init__.py": {}
}
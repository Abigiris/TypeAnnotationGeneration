{
    "rst_include-master/conftest.py": {
        "pytest_load_initial_conftests": {
            "name": "pytest_load_initial_conftests",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "early_config": [
                    "Dict",
                    "Exception"
                ],
                "parser": [
                    "Dict",
                    "Exception"
                ],
                "args": []
            }
        }
    },
    "rst_include-master/setup.py": {
        "is_travis_deploy": {
            "name": "is_travis_deploy",
            "location": 12,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "is_tagged_commit": {
            "name": "is_tagged_commit",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "strip_links_from_required": {
            "name": "strip_links_from_required",
            "location": 26,
            "return": [
                "list"
            ],
            "arguments": {
                "l_required": [
                    "List[str]",
                    "List",
                    "int"
                ]
            }
        },
        "get_requirements_from_file": {
            "name": "get_requirements_from_file",
            "location": 52,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "requirements_filename": [
                    "str",
                    "pathlib.Path",
                    "Union[str,os.PathLike]",
                    "Union[str,pathlib.Path]"
                ]
            }
        },
        "get_line_data": {
            "name": "get_line_data",
            "location": 68,
            "return": [
                "str",
                "Optional[Set[str]]",
                "List[str]",
                "float"
            ],
            "arguments": {
                "line": [
                    "str"
                ]
            }
        }
    },
    "rst_include-master/rst_include/rst_include.py": {
        "include": {
            "name": "include",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [
                    "str",
                    "bool",
                    "pathlib.Path",
                    "Union[str,pathlib.Path]"
                ],
                "target": [
                    "str"
                ],
                "quiet": [
                    "bool",
                    "int"
                ],
                "inplace": [
                    "bool",
                    "float",
                    "str",
                    "int"
                ],
                "source_encoding": [
                    "str",
                    "pathlib.Path"
                ],
                "target_encoding": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "replace": {
            "name": "replace",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [
                    "str",
                    "pathlib.Path",
                    "Union[str,pathlib.Path]",
                    "pathlib.PurePosixPath"
                ],
                "target": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "str_pattern": [
                    "str",
                    "int"
                ],
                "str_replace": [
                    "str",
                    "int"
                ],
                "count": [
                    "str",
                    "int"
                ],
                "quiet": [
                    "int",
                    "float",
                    "str",
                    "bool"
                ],
                "inplace": [
                    "bool",
                    "float",
                    "str",
                    "Optional[float]",
                    "None",
                    "Optional[str]",
                    "int"
                ],
                "source_encoding": [
                    "str",
                    "int"
                ],
                "target_encoding": [
                    "str",
                    "int"
                ]
            }
        },
        "import_module_from_file": {
            "name": "import_module_from_file",
            "location": 79,
            "return": [
                "module"
            ],
            "arguments": {
                "module_fullpath": [
                    "str",
                    "pathlib.Path",
                    "Union[pathlib.Path,str]"
                ],
                "reload": [
                    "bool",
                    "str",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "invalidate_caches": {
            "name": "invalidate_caches",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "adjust_cli_parameters": {
            "name": "adjust_cli_parameters",
            "location": 133,
            "return": [
                "Tuple[(Union[(str, _T0)], Union[(bool, _T1)])]"
            ],
            "arguments": {
                "target": [
                    "int",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "quiet": [
                    "bool",
                    "str",
                    "List[str]",
                    "List",
                    "None",
                    "Iterable[float]",
                    "Optional[str]"
                ],
                "inplace": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "rst_include-master/rst_include/rst_include_cli.py": {
        "info": {
            "name": "info",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "cli_main": {
            "name": "cli_main",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "traceback": [
                    "Optional[bool]",
                    "None",
                    "Optional[str]",
                    "bool",
                    "int",
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]"
                ]
            }
        },
        "cli_info": {
            "name": "cli_info",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "cli_include": {
            "name": "cli_include",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [
                    "str",
                    "bool",
                    "Sequence[str]"
                ],
                "target": [
                    "str",
                    "bool",
                    "Sequence[str]"
                ],
                "quiet": [
                    "str",
                    "bool",
                    "Sequence[str]"
                ],
                "inplace": [
                    "str",
                    "bool",
                    "Sequence[str]"
                ],
                "source_encoding": [
                    "str",
                    "bool",
                    "Sequence[str]"
                ],
                "target_encoding": [
                    "str",
                    "bool",
                    "Sequence[str]"
                ]
            }
        },
        "cli_replace": {
            "name": "cli_replace",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [
                    "str",
                    "bool",
                    "int"
                ],
                "target": [
                    "str",
                    "bool",
                    "int"
                ],
                "str_pattern": [
                    "str",
                    "bool",
                    "int"
                ],
                "str_replace": [
                    "str",
                    "bool",
                    "int"
                ],
                "count": [
                    "str",
                    "bool",
                    "int"
                ],
                "quiet": [
                    "str",
                    "bool",
                    "int"
                ],
                "inplace": [
                    "str",
                    "bool",
                    "int"
                ],
                "source_encoding": [
                    "str",
                    "bool",
                    "int"
                ],
                "target_encoding": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "rst_include-master/rst_include/__init__.py": {},
    "rst_include-master/rst_include/__init__conf__.py": {
        "print_info": {
            "name": "print_info",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "rst_include-master/rst_include/libs/lib_assemble_block.py": {
        "create_l_rst_files_from_templates": {
            "name": "create_l_rst_files_from_templates",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "l_rst_files": [
                    "Dict",
                    "bool"
                ]
            }
        },
        "create_rst_file_from_template": {
            "name": "create_rst_file_from_template",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "rst_file": [
                    "str",
                    "pathlib.Path",
                    "Iterable[str]",
                    "None",
                    "Optional[pathlib.Path]"
                ]
            }
        },
        "process_source_lines": {
            "name": "process_source_lines",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "path_source_file": [
                    "Sequence[str]",
                    "int",
                    "pathlib.Path"
                ],
                "source_lines": [
                    "Sequence[str]",
                    "int",
                    "pathlib.Path"
                ]
            }
        },
        "assemble_blocks": {
            "name": "assemble_blocks",
            "location": 75,
            "return": [
                "Text",
                "str",
                "bytes",
                "pathlib.Path",
                "Dict"
            ],
            "arguments": {
                "l_blocks": [
                    "Iterable[bytes]",
                    "List[lib_classes.Block]",
                    "bool",
                    "List[Dict[str, Any]]",
                    "int",
                    "Optional[bool]"
                ]
            }
        },
        "create_content_from_include": {
            "name": "create_content_from_include",
            "location": 89,
            "return": [
                "str",
                "Union[int, str]"
            ],
            "arguments": {
                "block": [
                    "str",
                    "lib_classes.Block",
                    "None",
                    "Dict",
                    "Optional[str]",
                    "Optional[Dict]"
                ]
            }
        },
        "assemble_additional_content": {
            "name": "assemble_additional_content",
            "location": 99,
            "return": [
                "str"
            ],
            "arguments": {
                "block": [
                    "List[set[str]]",
                    "lib_classes.Block",
                    "bool",
                    "str",
                    "List[Set[str]]"
                ]
            }
        },
        "assemble_include_block": {
            "name": "assemble_include_block",
            "location": 115,
            "return": [
                "str",
                "bytes",
                "int",
                "pathlib.Path"
            ],
            "arguments": {
                "block": [
                    "Callable",
                    "Dict[str,Any]"
                ]
            }
        },
        "get_block_header": {
            "name": "get_block_header",
            "location": 140,
            "return": [
                "str"
            ],
            "arguments": {
                "block": [
                    "Type",
                    "int",
                    "Exception",
                    "lib_classes.Block"
                ]
            }
        },
        "set_number_of_blanks_to_add": {
            "name": "set_number_of_blanks_to_add",
            "location": 165,
            "return": [
                "int"
            ],
            "arguments": {
                "block": [
                    "str",
                    "lib_classes.Block",
                    "Dict[str,str]",
                    "Type",
                    "Callable",
                    "Type[T]"
                ]
            }
        },
        "get_intended_include_lines_content": {
            "name": "get_intended_include_lines_content",
            "location": 188,
            "return": [
                "Dict[str,Any]",
                "str",
                "List",
                "Optional[str]",
                "int",
                "bool"
            ],
            "arguments": {
                "block": [
                    "str",
                    "lib_classes.Block"
                ]
            }
        },
        "add_indention_to_include_file_content": {
            "name": "add_indention_to_include_file_content",
            "location": 220,
            "return": [
                "str"
            ],
            "arguments": {
                "block": []
            }
        }
    },
    "rst_include-master/rst_include/libs/lib_block.py": {
        "is_include_block": {
            "name": "is_include_block",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "block": [
                    "lib_classes.Block"
                ]
            }
        },
        "get_block_source_lines_joined": {
            "name": "get_block_source_lines_joined",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "l_source_lines": [
                    "List[lib_classes.SourceLine]",
                    "Set[str]",
                    "Iterable[str]"
                ]
            }
        }
    },
    "rst_include-master/rst_include/libs/lib_block_options.py": {
        "get_option_value_from_block_or_raise_if_empty_or_invalid": {
            "name": "get_option_value_from_block_or_raise_if_empty_or_invalid",
            "location": 19,
            "return": [
                "str",
                "int",
                "Optional[int]",
                "Optional[str]",
                "Optional[bool]"
            ],
            "arguments": {
                "option": [
                    "List[str]"
                ],
                "block": [
                    "List[str]"
                ],
                "value_must_be_int": [
                    "bool",
                    "Optional[Union[str,Any]]",
                    "float"
                ]
            }
        },
        "get_option_value_from_block": {
            "name": "get_option_value_from_block",
            "location": 57,
            "return": [
                "Text",
                "str",
                "Dict[str,List[str]]",
                "Type"
            ],
            "arguments": {
                "option": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "block": [
                    "bool",
                    "lib_classes.Block",
                    "mypy.nodes.Block"
                ]
            }
        },
        "get_option_value_from_source_line": {
            "name": "get_option_value_from_source_line",
            "location": 79,
            "return": [
                "str",
                "Dict[str,str]",
                "Dict[str,Union[int,str]]",
                "Dict[str,list]",
                "Type"
            ],
            "arguments": {
                "source_line": [
                    "str",
                    "lib_classes.SourceLine",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "is_option_in_block": {
            "name": "is_option_in_block",
            "location": 84,
            "return": [
                "bool"
            ],
            "arguments": {
                "option": [
                    "str",
                    "int"
                ],
                "block": [
                    "str",
                    "lib_classes.Block",
                    "bool",
                    "Dict[str,Any]"
                ]
            }
        },
        "get_source_line_number_for_option": {
            "name": "get_source_line_number_for_option",
            "location": 101,
            "return": [
                "int",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "option": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "block": [
                    "Type",
                    "lib_classes.Block",
                    "Dict[str,Any]",
                    "Exception"
                ]
            }
        },
        "is_option_in_source_line": {
            "name": "is_option_in_source_line",
            "location": 122,
            "return": [
                "bool"
            ],
            "arguments": {
                "source_line": [
                    "str",
                    "int",
                    "lib_classes.SourceLine"
                ],
                "option": [
                    "str",
                    "List",
                    "Callable[...,T]",
                    "bool"
                ]
            }
        },
        "get_option_key_from_source_line": {
            "name": "get_option_key_from_source_line",
            "location": 138,
            "return": [
                "str",
                "IO[Any]",
                "int"
            ],
            "arguments": {
                "source_line": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "log_and_raise_value_error_if_option_not_in_block": {
            "name": "log_and_raise_value_error_if_option_not_in_block",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "option": [
                    "Type",
                    "str"
                ],
                "block": [
                    "Type",
                    "str"
                ]
            }
        },
        "log_and_raise_if_value_of_option_in_block_is_empty": {
            "name": "log_and_raise_if_value_of_option_in_block_is_empty",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "str",
                    "bool",
                    "Collection",
                    "int",
                    "Collection[str]"
                ],
                "option": [
                    "str",
                    "Dict"
                ],
                "block": [
                    "str",
                    "Dict"
                ]
            }
        },
        "log_and_raise_if_value_of_option_in_block_must_be_int_castable_but_is_not": {
            "name": "log_and_raise_if_value_of_option_in_block_must_be_int_castable_but_is_not",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "str",
                    "bool",
                    "Optional[Any]"
                ],
                "option": [
                    "str",
                    "List[str]",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "block": [
                    "str",
                    "List[str]",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "value_must_be_int": [
                    "str",
                    "bool",
                    "Optional[Any]",
                    "Any",
                    "None"
                ]
            }
        }
    },
    "rst_include-master/rst_include/libs/lib_check_files.py": {
        "check_source_and_target": {
            "name": "check_source_and_target",
            "location": 22,
            "return": [
                "Tuple[(_T0, Union[(_T0, _T1)])]"
            ],
            "arguments": {
                "source": [
                    "Dict[str,Any]",
                    "IO",
                    "str",
                    "None",
                    "Optional[IO]",
                    "bytes",
                    "pathlib.Path",
                    "Optional[IO[str]]",
                    "Union[pathlib.Path,str]",
                    "IO[str]"
                ],
                "target": [
                    "str",
                    "bytes",
                    "Union[pathlib.Path,str]",
                    "None",
                    "pathlib.Path",
                    "Union[str,pathlib.Path]",
                    "Optional[pathlib.Path]"
                ],
                "in_place": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "log_and_raise_if_source_file_not_ok": {
            "name": "log_and_raise_if_source_file_not_ok",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "log_and_raise_if_source_file_equals_target_file": {
            "name": "log_and_raise_if_source_file_equals_target_file",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [
                    "str",
                    "List[str]",
                    "pathlib.Path",
                    "pathlib.PurePath",
                    "Union[pathlib.Path,str]"
                ],
                "target": [
                    "str",
                    "List[str]",
                    "pathlib.Path",
                    "Union[pathlib.Path,str]"
                ]
            }
        },
        "log_warning_if_target_file_exist": {
            "name": "log_warning_if_target_file_exist",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "path_target": [
                    "pathlib.Path",
                    "pathlib.PurePath"
                ]
            }
        },
        "read_input": {
            "name": "read_input",
            "location": 163,
            "return": [
                "str",
                "bytes",
                "List",
                "List[pathlib.Path]"
            ],
            "arguments": {
                "source": [
                    "str",
                    "pathlib.Path",
                    "Union[pathlib.Path,str]"
                ],
                "encoding": [
                    "Text",
                    "str",
                    "Union[str,pathlib.Path]",
                    "bytes",
                    "pathlib.Path"
                ]
            }
        },
        "read_source_lines": {
            "name": "read_source_lines",
            "location": 197,
            "return": [
                "list"
            ],
            "arguments": {
                "source": [
                    "str",
                    "pathlib.Path",
                    "Union[str,pathlib.Path]"
                ],
                "encoding": [
                    "Text",
                    "str",
                    "bool"
                ]
            }
        },
        "write_output": {
            "name": "write_output",
            "location": 261,
            "return": [
                "str",
                "List[str]",
                "pathlib.Path",
                "bytes"
            ],
            "arguments": {
                "target": [
                    "pathlib.Path"
                ],
                "content": [
                    "str",
                    "List[str]"
                ],
                "encoding": [
                    "str",
                    "Text"
                ]
            }
        }
    },
    "rst_include-master/rst_include/libs/lib_classes.py": {
        "RstFile.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "int",
                    "Optional[str]",
                    "List",
                    "None",
                    "OrderedDict",
                    "defaultdict",
                    "DefaultDict"
                ],
                "target": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]",
                    "int",
                    "None",
                    "List[List[T]]",
                    "List[list[T]]"
                ],
                "source_encoding": [
                    "Text",
                    "int",
                    "Optional[Dict]",
                    "bool"
                ],
                "target_encoding": [
                    "Text",
                    "bool",
                    "str",
                    "Callable"
                ]
            }
        },
        "SourceLine.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line_number": [
                    "int",
                    "Sequence[str]",
                    "Optional[str]",
                    "str",
                    "Dict"
                ],
                "content": [
                    "Text",
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Dict",
                    "bool",
                    "Set[str]",
                    "IO[bytes]"
                ]
            }
        },
        "Block.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None"
                ]
            }
        }
    },
    "rst_include-master/rst_include/libs/lib_get_include_options.py": {
        "get_include_options": {
            "name": "get_include_options",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "block": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "get_include_block_pass_through_options": {
            "name": "get_include_block_pass_through_options",
            "location": 41,
            "return": [
                "list"
            ],
            "arguments": {
                "block": [
                    "lib_classes.Block"
                ]
            }
        },
        "append_if_pass_through_option": {
            "name": "append_if_pass_through_option",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "source_line": [
                    "str",
                    "bool"
                ],
                "pass_through_options": [
                    "List[str]",
                    "str"
                ]
            }
        },
        "get_include_block_additional_content": {
            "name": "get_include_block_additional_content",
            "location": 69,
            "return": [
                "List",
                "List[str]",
                "Dict[str,Callable[,Any]]",
                "Mapping",
                "bool",
                "str"
            ],
            "arguments": {
                "block": [
                    "int",
                    "bytes"
                ]
            }
        },
        "get_include_filename": {
            "name": "get_include_filename",
            "location": 98,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "block": [
                    "int",
                    "bool"
                ]
            }
        },
        "get_include_file_code": {
            "name": "get_include_file_code",
            "location": 147,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "block": [
                    "str",
                    "Dict",
                    "lib_classes.Block"
                ]
            }
        },
        "get_include_file_encoding": {
            "name": "get_include_file_encoding",
            "location": 176,
            "return": [
                "str",
                "pathlib.Path",
                "Optional[str]"
            ],
            "arguments": {
                "block": [
                    "Pattern",
                    "int",
                    "Optional[Type]",
                    "Type",
                    "Optional[Exception]",
                    "None",
                    "Exception"
                ]
            }
        },
        "get_include_file_start_line": {
            "name": "get_include_file_start_line",
            "location": 205,
            "return": [
                "int",
                "T",
                "Optional[int]",
                "Optional[str]",
                "List[str]",
                "str"
            ],
            "arguments": {
                "block": []
            }
        },
        "get_include_file_end_line": {
            "name": "get_include_file_end_line",
            "location": 242,
            "return": [
                "int",
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "block": [
                    "bool"
                ]
            }
        },
        "get_include_file_start_after": {
            "name": "get_include_file_start_after",
            "location": 278,
            "return": [
                "str",
                "int",
                "Optional[bool]",
                "bytes"
            ],
            "arguments": {
                "block": [
                    "str",
                    "Type",
                    "Dict",
                    "int",
                    "Tuple[int]",
                    "lib_classes.Block"
                ]
            }
        },
        "get_include_file_end_before": {
            "name": "get_include_file_end_before",
            "location": 308,
            "return": [
                "str",
                "pathlib.Path",
                "Optional[List[str]]"
            ],
            "arguments": {
                "block": [
                    "str",
                    "List[str]",
                    "lib_classes.Block"
                ]
            }
        },
        "get_blanks_to_add_to_content": {
            "name": "get_blanks_to_add_to_content",
            "location": 336,
            "return": [
                "int"
            ],
            "arguments": {
                "block": [
                    "float",
                    "lib_classes.Block",
                    "str",
                    "IO",
                    "IO[bytes]"
                ]
            }
        }
    },
    "rst_include-master/rst_include/libs/lib_include_file.py": {
        "read_include_file": {
            "name": "read_include_file",
            "location": 36,
            "return": [
                "str",
                "List[str]",
                "AbstractSet[str]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "block": [
                    "Tuple[object]",
                    "bool",
                    "lib_classes.Block"
                ]
            }
        },
        "delete_empty_lines_from_list": {
            "name": "delete_empty_lines_from_list",
            "location": 82,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "source_lines": [
                    "str",
                    "Tuple[str]",
                    "Union[str,Tuple[str,...]]",
                    "Tuple[Union[str,...]]"
                ]
            }
        },
        "right_strip_lines_from_list": {
            "name": "right_strip_lines_from_list",
            "location": 87,
            "return": [
                "list"
            ],
            "arguments": {
                "source_lines": [
                    "str",
                    "Dict"
                ]
            }
        },
        "process_include_file_lines": {
            "name": "process_include_file_lines",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "block": [
                    "Type",
                    "str",
                    "lib_classes.Block"
                ]
            }
        },
        "slice_include_file_lines": {
            "name": "slice_include_file_lines",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "block": [
                    "bool",
                    "float",
                    "lib_classes.Block"
                ]
            }
        },
        "slice_include_file_markers": {
            "name": "slice_include_file_markers",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "block": [
                    "str",
                    "lib_classes.Block"
                ]
            }
        },
        "log_and_raise_if_start_after_not_found_in_string": {
            "name": "log_and_raise_if_start_after_not_found_in_string",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "content": [
                    "str",
                    "bool",
                    "TextIO",
                    "Iterable[I]",
                    "Iterable[Issue]",
                    "Dict[str,str]"
                ],
                "block": [
                    "str",
                    "bool",
                    "lib_classes.Block"
                ]
            }
        },
        "log_and_raise_if_end_before_not_found_in_string": {
            "name": "log_and_raise_if_end_before_not_found_in_string",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "content": [
                    "str"
                ],
                "block": []
            }
        },
        "get_additional_error_string": {
            "name": "get_additional_error_string",
            "location": 244,
            "return": [
                "str"
            ],
            "arguments": {
                "block": [
                    "bool",
                    "str",
                    "lib_classes.Block",
                    "mypy.nodes.Block"
                ]
            }
        },
        "get_additional_error_string_start_after": {
            "name": "get_additional_error_string_start_after",
            "location": 255,
            "return": [
                "str"
            ],
            "arguments": {
                "block": [
                    "str",
                    "Dict"
                ]
            }
        },
        "IncludeTrace.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path_source_file": [
                    "str",
                    "Optional[str]",
                    "Sequence[str]",
                    "None",
                    "pathlib.PurePosixPath",
                    "pathlib.Path"
                ],
                "line_number": [
                    "int",
                    "float",
                    "Iterator",
                    "Tuple[int]",
                    "bool",
                    "Iterator[int]"
                ]
            }
        }
    },
    "rst_include-master/rst_include/libs/lib_main.py": {
        "rst_str_replace": {
            "name": "rst_str_replace",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [
                    "str",
                    "int",
                    "Union[str,pathlib.Path]",
                    "None",
                    "pathlib.PurePosixPath",
                    "Optional[str]",
                    "bool"
                ],
                "target": [
                    "str",
                    "int",
                    "List[str]",
                    "IO",
                    "Union[str,pathlib.Path]",
                    "None",
                    "Union[pathlib3x.Path,IO[str],None]",
                    "pathlib.Path"
                ],
                "str_pattern": [
                    "str",
                    "bool",
                    "None",
                    "List[str]",
                    "Optional[str]",
                    "bytes",
                    "int"
                ],
                "str_replace": [
                    "str",
                    "bool",
                    "None",
                    "List[str]",
                    "Optional[str]",
                    "bytes",
                    "int"
                ],
                "count": [
                    "int",
                    "str",
                    "Optional[str]",
                    "bool",
                    "List[str]",
                    "bytes"
                ],
                "source_encoding": [
                    "Text",
                    "str",
                    "bool"
                ],
                "target_encoding": [
                    "Text",
                    "str",
                    "List[str]",
                    "bool"
                ],
                "inplace": [
                    "bool",
                    "str",
                    "Callable",
                    "List[str]",
                    "Optional[str]",
                    "List"
                ]
            }
        },
        "rst_inc": {
            "name": "rst_inc",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [
                    "List[TextIO]",
                    "str",
                    "Iterable[T]",
                    "IO",
                    "bytes",
                    "Dict[str,Any]",
                    "None",
                    "Union[pathlib3x.Path,IO[str]]",
                    "pathlib.Path",
                    "Union[pathlib3x.Path,IO[str],None]",
                    "Union[str,pathlib.Path]"
                ],
                "target": [
                    "IO",
                    "Union[pathlib3x.Path,IO[str],None]",
                    "str",
                    "bytes",
                    "None",
                    "List[TextIO]",
                    "List",
                    "Dict[str,Any]",
                    "pathlib.Path",
                    "Union[pathlib3x.Path,IO[str]]"
                ],
                "source_encoding": [
                    "Text",
                    "str",
                    "Callable[[str],str]",
                    "IO[Any]",
                    "Dict"
                ],
                "target_encoding": [
                    "Text",
                    "str",
                    "Callable[[str],str]",
                    "IO[Any]",
                    "Dict"
                ],
                "inplace": [
                    "bool",
                    "str",
                    "List[int]",
                    "Dict[str,Any]",
                    "Callable"
                ]
            }
        }
    },
    "rst_include-master/rst_include/libs/lib_source_line.py": {
        "divide_source_line_in_blocks": {
            "name": "divide_source_line_in_blocks",
            "location": 18,
            "return": [
                "list"
            ],
            "arguments": {
                "path_source_file": [
                    "Sequence[str]",
                    "Iterable[pathlib.Path]",
                    "str",
                    "Union[str,pathlib3x.Path,IO[str]]",
                    "IO",
                    "pathlib.Path",
                    "FrozenSet[str]"
                ],
                "source_lines": [
                    "List[lib_classes.SourceLine]",
                    "str",
                    "bytes",
                    "bool",
                    "Iterable[str]"
                ]
            }
        },
        "append_non_empty_block": {
            "name": "append_non_empty_block",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "block": [
                    "Dict"
                ],
                "blocks": [
                    "List[str]",
                    "Callable"
                ]
            }
        },
        "source_line_starts_with_include_statement": {
            "name": "source_line_starts_with_include_statement",
            "location": 70,
            "return": [
                "bool"
            ],
            "arguments": {
                "source_line": [
                    "Container",
                    "Dict[str,Any]",
                    "lib_classes.SourceLine",
                    "str",
                    "T",
                    "Container[T]"
                ]
            }
        },
        "source_line_contains_option": {
            "name": "source_line_contains_option",
            "location": 84,
            "return": [
                "bool"
            ],
            "arguments": {
                "source_line": [
                    "str",
                    "int",
                    "List[dict]"
                ]
            }
        }
    },
    "rst_include-master/rst_include/libs/lib_str.py": {
        "strip_multiline_string": {
            "name": "strip_multiline_string",
            "location": 5,
            "return": [
                "str"
            ],
            "arguments": {
                "str_multiline": [
                    "str",
                    "Union[str,bytes]",
                    "bytes"
                ]
            }
        },
        "has_trailing_character_return": {
            "name": "has_trailing_character_return",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "str_multiline": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "join_if_not_empty": {
            "name": "join_if_not_empty",
            "location": 44,
            "return": [
                "bool",
                "str",
                "Optional[Union[str,Any]]",
                "int"
            ],
            "arguments": {
                "sep": [
                    "str",
                    "Optional[List[str]]"
                ],
                "str1": [
                    "str",
                    "AnyStr"
                ],
                "str2": [
                    "str",
                    "AnyStr"
                ]
            }
        }
    },
    "rst_include-master/rst_include/libs/lib_test.py": {
        "run_template_tests": {
            "name": "run_template_tests",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_template_tests_not_supported": {
            "name": "run_template_tests_not_supported",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "read_include_file_2": {
            "name": "read_include_file_2",
            "location": 60,
            "return": [
                "str",
                "List[tuple[Union[Any,str]]]",
                "Type[Any]",
                "List"
            ],
            "arguments": {}
        },
        "get_test_block_ok": {
            "name": "get_test_block_ok",
            "location": 67,
            "return": [
                "Block",
                "str",
                "Exception",
                "BaseException",
                "MutableMapping[str,Any]"
            ],
            "arguments": {}
        },
        "get_test_block_include2_ok": {
            "name": "get_test_block_include2_ok",
            "location": 92,
            "return": [
                "str",
                "Exception",
                "List[str]",
                "BaseException",
                "Tuple[Union[dict[str,Any],int]]",
                "MutableMapping[str,Any]",
                "Dict",
                "Set"
            ],
            "arguments": {}
        },
        "get_test_block_no_include_filename": {
            "name": "get_test_block_no_include_filename",
            "location": 100,
            "return": [
                "str",
                "Type",
                "List[str]",
                "BaseException",
                "int"
            ],
            "arguments": {}
        },
        "get_test_block_include_filename_not_existing": {
            "name": "get_test_block_include_filename_not_existing",
            "location": 106,
            "return": [
                "str",
                "list[str]"
            ],
            "arguments": {}
        },
        "get_test_block_code_not_set": {
            "name": "get_test_block_code_not_set",
            "location": 112,
            "return": [
                "str",
                "int",
                "MutableMapping[str,Any]",
                "BaseException"
            ],
            "arguments": {}
        },
        "get_test_block_code_invalid": {
            "name": "get_test_block_code_invalid",
            "location": 118,
            "return": [
                "str",
                "Type",
                "List[str]",
                "MutableMapping[str,Any]",
                "BaseException"
            ],
            "arguments": {}
        },
        "get_test_block_encoding_not_set": {
            "name": "get_test_block_encoding_not_set",
            "location": 124,
            "return": [
                "float",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "get_test_block_encoding_invalid": {
            "name": "get_test_block_encoding_invalid",
            "location": 130,
            "return": [
                "str",
                "List[str]",
                "Exception",
                "BaseException",
                "MutableMapping[str,Any]"
            ],
            "arguments": {}
        },
        "get_test_block_start_line_not_set": {
            "name": "get_test_block_start_line_not_set",
            "location": 136,
            "return": [
                "str",
                "int",
                "T"
            ],
            "arguments": {}
        },
        "get_test_block_start_line_invalid": {
            "name": "get_test_block_start_line_invalid",
            "location": 142,
            "return": [
                "str",
                "T",
                "List[str]",
                "int"
            ],
            "arguments": {}
        },
        "get_test_block_start_line_not_integer": {
            "name": "get_test_block_start_line_not_integer",
            "location": 148,
            "return": [
                "str",
                "T",
                "List[str]",
                "int"
            ],
            "arguments": {}
        },
        "get_test_block_end_line_not_set": {
            "name": "get_test_block_end_line_not_set",
            "location": 154,
            "return": [
                "int",
                "str",
                "float"
            ],
            "arguments": {}
        },
        "get_test_block_end_line_invalid": {
            "name": "get_test_block_end_line_invalid",
            "location": 160,
            "return": [
                "float",
                "str",
                "List[str]"
            ],
            "arguments": {}
        },
        "get_test_block_end_line_not_integer": {
            "name": "get_test_block_end_line_not_integer",
            "location": 166,
            "return": [
                "float",
                "str",
                "List[str]"
            ],
            "arguments": {}
        },
        "get_test_block_start_after_not_set": {
            "name": "get_test_block_start_after_not_set",
            "location": 172,
            "return": [
                "T",
                "str",
                "float",
                "int"
            ],
            "arguments": {}
        },
        "get_test_block_start_after_invalid": {
            "name": "get_test_block_start_after_invalid",
            "location": 178,
            "return": [
                "str",
                "BaseException",
                "List[str]",
                "Exception",
                "int"
            ],
            "arguments": {}
        },
        "get_test_block_end_before_not_set": {
            "name": "get_test_block_end_before_not_set",
            "location": 184,
            "return": [
                "str",
                "float",
                "int"
            ],
            "arguments": {}
        },
        "get_test_block_end_before_invalid": {
            "name": "get_test_block_end_before_invalid",
            "location": 190,
            "return": [
                "str",
                "List[str]",
                "Exception",
                "BaseException",
                "MutableMapping[str,Any]"
            ],
            "arguments": {}
        },
        "get_path_test_dir": {
            "name": "get_path_test_dir",
            "location": 196,
            "return": [
                "pathlib.Path",
                "List[int]",
                "str",
                "pathlib.PurePath"
            ],
            "arguments": {}
        }
    },
    "rst_include-master/rst_include/libs/lib_test_compare_results.py": {
        "compare_results_equal": {
            "name": "compare_results_equal",
            "location": 18,
            "return": [
                "bool"
            ],
            "arguments": {
                "expected_file": [
                    "str",
                    "pathlib3x.Path",
                    "int",
                    "None",
                    "Optional[int]",
                    "float",
                    "Optional[float]",
                    "bool"
                ],
                "result_file": [
                    "str",
                    "pathlib3x.Path",
                    "int",
                    "None",
                    "Optional[int]",
                    "float",
                    "Optional[float]",
                    "bool"
                ],
                "file_expected_encoding": [
                    "Text",
                    "str",
                    "bool"
                ],
                "file_result_encoding": [
                    "Text",
                    "str",
                    "bool"
                ]
            }
        },
        "read_files_into_lines": {
            "name": "read_files_into_lines",
            "location": 55,
            "return": [
                "Tuple[(List[str], List[str])]"
            ],
            "arguments": {
                "expected_file": [
                    "str",
                    "pathlib3x.Path",
                    "int",
                    "Optional[int]",
                    "None",
                    "Optional[float]",
                    "float"
                ],
                "result_file": [
                    "str",
                    "pathlib3x.Path"
                ],
                "expected_file_encoding": [
                    "Text",
                    "str",
                    "pathlib3x.Path",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "result_file_encoding": [
                    "Text",
                    "str",
                    "pathlib3x.Path"
                ]
            }
        },
        "log_file_lengths_not_equal": {
            "name": "log_file_lengths_not_equal",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "expected_file": [
                    "str",
                    "int",
                    "pathlib3x.Path"
                ],
                "result_file": [
                    "str",
                    "int",
                    "pathlib3x.Path"
                ],
                "len_expected_lines": [
                    "str",
                    "int",
                    "pathlib3x.Path"
                ],
                "len_result_lines": [
                    "str",
                    "int",
                    "pathlib3x.Path"
                ]
            }
        },
        "log_difference_expected_line": {
            "name": "log_difference_expected_line",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "expected_file": [
                    "str"
                ],
                "line_number": [
                    "str"
                ],
                "expected_line": [
                    "str",
                    "bytes",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "log_difference_result_line": {
            "name": "log_difference_result_line",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "result_file": [
                    "str",
                    "List[str]"
                ],
                "line_number": [
                    "str",
                    "List[str]"
                ],
                "result_line": [
                    "str",
                    "int",
                    "pathlib3x.Path",
                    "bool"
                ]
            }
        }
    },
    "rst_include-master/rst_include/libs/__init__.py": {},
    "rst_include-master/tests/include1.py": {
        "my_include": {
            "name": "my_include",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "rst_include-master/tests/include2.py": {
        "my_include2_0": {
            "name": "my_include2_0",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "my_include2_1": {
            "name": "my_include2_1",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "my_include2_2": {
            "name": "my_include2_2",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "my_include2_3": {
            "name": "my_include2_3",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "rst_include-master/tests/include3.py": {
        "my_include": {
            "name": "my_include",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "rst_include-master/tests/test_cli.py": {
        "call_cli_command": {
            "name": "call_cli_command",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "commandline_args": [
                    "Text",
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "test_cli_commands": {
            "name": "test_cli_commands",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "rst_include-master/tests/test_include_files.py": {
        "test": {
            "name": "test",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "rst_include-master/tests/__init__.py": {},
    "rst_include-master/tests/local_testscripts/testing_tools.py": {
        "append_subdirs_to_mypy_paths": {
            "name": "append_subdirs_to_mypy_paths",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "root_directory": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "append_directory_to_env_path_variable": {
            "name": "append_directory_to_env_path_variable",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "env_variable": [
                    "Dict",
                    "str",
                    "logging.Logger"
                ],
                "directory": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "get_env_data": {
            "name": "get_env_data",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "env_variable": [
                    "str",
                    "Dict[str,Any]",
                    "Callable"
                ]
            }
        },
        "set_env_data": {
            "name": "set_env_data",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "env_variable": [
                    "str"
                ],
                "env_str": [
                    "str"
                ]
            }
        },
        "cli_main": {
            "name": "cli_main",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "cli_append_immediate_subdirs_to_mypy_path": {
            "name": "cli_append_immediate_subdirs_to_mypy_path",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "root_directory": [
                    "str",
                    "List[str]",
                    "Optional[List]",
                    "List",
                    "None"
                ]
            }
        },
        "cli_append_directory_to_mypy_path": {
            "name": "cli_append_directory_to_mypy_path",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "directory": [
                    "str",
                    "TextIO",
                    "BinaryIO",
                    "pathlib.Path",
                    "Type",
                    "Type[GenericList]",
                    "Type[Declared]"
                ]
            }
        },
        "cli_append_directory_to_python_path": {
            "name": "cli_append_directory_to_python_path",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "directory": [
                    "str",
                    "TextIO",
                    "BinaryIO",
                    "pathlib.Path",
                    "Type",
                    "Type[GenericList]",
                    "Type[Declared]"
                ]
            }
        }
    },
    "rst_include-master/tests/subdir/include_subdir.py": {
        "my_include2_0": {
            "name": "my_include2_0",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "my_include2_1": {
            "name": "my_include2_1",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "my_include2_2": {
            "name": "my_include2_2",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "my_include2_3": {
            "name": "my_include2_3",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "rst_include-master/tests/subdir/__init__.py": {}
}
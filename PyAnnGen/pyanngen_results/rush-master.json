{
    "rush-master/setup.py": {},
    "rush-master/doc/source/conf.py": {},
    "rush-master/examples/flask/setup.py": {},
    "rush-master/examples/flask/src/limiterapp/views.py": {
        "home": {
            "name": "home",
            "location": 15,
            "return": [
                "bytes",
                "dict",
                "flask.Response"
            ],
            "arguments": {}
        }
    },
    "rush-master/examples/flask/src/limiterapp/__init__.py": {},
    "rush-master/examples/flask/src/limiterapp/__main__.py": {},
    "rush-master/examples/flask/test/__init__.py": {},
    "rush-master/scripts/cleanup-lint-dist.py": {},
    "rush-master/src/rush/exceptions.py": {
        "MismatchedDataError.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "DataChangedInStoreError.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "bool"
                ]
            }
        },
        "InvalidRedisURL.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "rush-master/src/rush/limit_data.py": {
        "convert_str_to_datetime": {
            "name": "convert_str_to_datetime",
            "location": 10,
            "return": [
                "bytes",
                "str",
                "datetime.date",
                "List[datetime.date]",
                "Optional[datetime.date]",
                "datetime.datetime.datetime",
                "datetime.datetime"
            ],
            "arguments": {
                "value": [
                    "str",
                    "bytes",
                    "Union[str, datetime.datetime]",
                    "datetime.date"
                ]
            }
        },
        "maybe_convert_str_to_datetime": {
            "name": "maybe_convert_str_to_datetime",
            "location": 19,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "bool",
                    "Union[str, datetime.datetime]"
                ]
            }
        },
        "LimitData._now": {
            "name": "_now",
            "location": 42,
            "return": [
                "int",
                "str",
                "List[str]",
                "datetime.date",
                "datetime.timedelta"
            ],
            "arguments": {
                "self": []
            }
        },
        "LimitData.asdict": {
            "name": "asdict",
            "location": 45,
            "return": [
                "dict[typing.Text, typing.Union[str,float,list[None],typing.Final,list[]]]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LimitData.copy_with": {
            "name": "copy_with",
            "location": 62,
            "return": [
                "LimitData",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rush-master/src/rush/quota.py": {
        "Quota._period_is_positive": {
            "name": "_period_is_positive",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attribute": [
                    "str",
                    "int",
                    "bool"
                ],
                "period": [
                    "int",
                    "datetime.timedelta",
                    "str"
                ]
            }
        },
        "Quota._count_is_positive": {
            "name": "_count_is_positive",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attribute": [
                    "str",
                    "int",
                    "bool"
                ],
                "count": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "Quota._burst_is_positive": {
            "name": "_burst_is_positive",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attribute": [
                    "str",
                    "int",
                    "bool"
                ],
                "count": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "Quota.per_second": {
            "name": "per_second",
            "location": 61,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "int"
                ],
                "count": [
                    "int"
                ]
            }
        },
        "Quota.per_minute": {
            "name": "per_minute",
            "location": 78,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "int"
                ],
                "count": [
                    "int"
                ]
            }
        },
        "Quota.per_hour": {
            "name": "per_hour",
            "location": 95,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "int"
                ],
                "count": [
                    "int"
                ]
            }
        },
        "Quota.per_day": {
            "name": "per_day",
            "location": 110,
            "return": [
                "int",
                "List[int]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "int"
                ],
                "count": [
                    "int"
                ]
            }
        },
        "Quota.limit": {
            "name": "limit",
            "location": 125,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rush-master/src/rush/result.py": {
        "RateLimitResult._now": {
            "name": "_now",
            "location": 55,
            "return": [
                "int",
                "str",
                "List[str]",
                "datetime.date",
                "datetime.timedelta"
            ],
            "arguments": {}
        },
        "RateLimitResult.resets_at": {
            "name": "resets_at",
            "location": 58,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "Optional[float]",
                "Union[str, Dict]"
            ],
            "arguments": {
                "self": [],
                "from_when": [
                    "None",
                    "str",
                    "Optional[datetime.datetime]",
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "Optional[Tuple[int, int]]",
                    "typing.Callable[, ]",
                    "Callable",
                    "Optional[int]"
                ]
            }
        },
        "RateLimitResult.retry_at": {
            "name": "retry_at",
            "location": 71,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "Optional[float]",
                "Union[str, Dict]"
            ],
            "arguments": {
                "self": [],
                "from_when": [
                    "Optional[datetime.datetime]",
                    "str",
                    "None",
                    "int",
                    "Optional[Tuple[int, int]]",
                    "tuple[typing.Union[int,int]]",
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "rush-master/src/rush/throttle.py": {
        "Throttle.check": {
            "name": "check",
            "location": 30,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int",
                    "str",
                    "Optional[int]",
                    "None"
                ],
                "quantity": [
                    "int",
                    "str",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "Throttle.clear": {
            "name": "clear",
            "location": 44,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "typing.Hashable",
                    "str",
                    "Hashable",
                    "int",
                    "Union[int, slice]"
                ]
            }
        },
        "Throttle.peek": {
            "name": "peek",
            "location": 56,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int",
                    "str",
                    "Optional[int]",
                    "None"
                ]
            }
        }
    },
    "rush-master/src/rush/__init__.py": {},
    "rush-master/src/rush/contrib/decorator.py": {
        "ThrottleDecorator._check": {
            "name": "_check",
            "location": 30,
            "return": [
                "bool",
                "dict[, ]",
                "Optional[Union[str, Any]]",
                "dict[str, int]",
                "list[list[]]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Set[str]",
                    "set[str]",
                    "Tuple[str]",
                    "tuple[str]"
                ]
            }
        },
        "ThrottleDecorator.__call__": {
            "name": "__call__",
            "location": 36,
            "return": [
                "Callable",
                "Union[concurrenfutures.Future, asyncio.futures.Future]",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "ThrottleDecorator.sleep_and_retry": {
            "name": "sleep_and_retry",
            "location": 91,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "typing.Callable[, ]",
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "ThrottleExceeded.__init__": {
            "name": "__init__",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "Union[Sequence[Any], Tuple[float, float]]",
                    "typing.Sequence[typing.Any]",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        },
        "ThrottleDecorator.__call__.wrapper": {
            "name": "wrapper",
            "location": 71,
            "return": [],
            "arguments": {}
        },
        "ThrottleDecorator.sleep_and_retry.wrapper": {
            "name": "wrapper",
            "location": 128,
            "return": [
                "int",
                "str"
            ],
            "arguments": {}
        }
    },
    "rush-master/src/rush/contrib/__init__.py": {},
    "rush-master/src/rush/limiters/base.py": {
        "BaseLimiter.rate_limit": {
            "name": "rate_limit",
            "location": 17,
            "return": [
                "result.RateLimitResult",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Union[float, int]",
                    "float",
                    "int"
                ],
                "quantity": [
                    "str",
                    "Union[float, int]",
                    "float",
                    "int"
                ],
                "rate": [
                    "str",
                    "Union[float, int]",
                    "float",
                    "int"
                ]
            }
        },
        "BaseLimiter.reset": {
            "name": "reset",
            "location": 23,
            "return": [
                "result.RateLimitResult",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Union[float, int]",
                    "float",
                    "int"
                ],
                "rate": [
                    "str",
                    "Union[float, int]",
                    "float",
                    "int"
                ]
            }
        }
    },
    "rush-master/src/rush/limiters/gcra.py": {
        "GenericCellRatelimiter.rate_limit": {
            "name": "rate_limit",
            "location": 14,
            "return": [
                "bool",
                "Dict[str, int]",
                "Optional[Union[str, Any]]",
                "Dict[int, dict]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "quantity": [
                    "int",
                    "str",
                    "float",
                    "list[float]",
                    "quota.Quota",
                    "datetime.timedelta",
                    "List[float]",
                    "datetime.timezone"
                ],
                "rate": [
                    "int",
                    "quota.Quota",
                    "str",
                    "list[float]",
                    "None",
                    "datetime.timedelta",
                    "List[float]",
                    "Optional[datetime.datetime]"
                ]
            }
        },
        "GenericCellRatelimiter.reset": {
            "name": "reset",
            "location": 85,
            "return": [
                "bool",
                "Dict[str, int]",
                "Optional[Union[str, Any]]",
                "Dict[int, dict]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Union[str, Iterable[str]]",
                    "typing.Iterable[str]"
                ],
                "rate": [
                    "str",
                    "int",
                    "None",
                    "T",
                    "Optional[base.OrderSpec]"
                ]
            }
        }
    },
    "rush-master/src/rush/limiters/periodic.py": {
        "_fresh_limitdata": {
            "name": "_fresh_limitdata",
            "location": 11,
            "return": [
                "dict",
                "float",
                "bytes",
                "int",
                "List[List[int]]"
            ],
            "arguments": {
                "rate": [
                    "Tuple[int]",
                    "float",
                    "tuple[int]",
                    "Sequence[int]",
                    "typing.Sequence[int]"
                ],
                "now": [
                    "Tuple[int]",
                    "float",
                    "tuple[int]",
                    "Sequence[int]",
                    "typing.Sequence[int]"
                ],
                "used": [
                    "int",
                    "Tuple[int]",
                    "float",
                    "Sequence[int]"
                ]
            }
        },
        "PeriodicLimiter.rate_limit": {
            "name": "rate_limit",
            "location": 20,
            "return": [
                "bool",
                "OrderedDict",
                "Tuple[str, int]",
                "Tuple[Dict[str, Any], int]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes"
                ],
                "quantity": [
                    "str",
                    "int",
                    "typing.Type",
                    "SupportsFloat",
                    "Type"
                ],
                "rate": [
                    "int",
                    "Optional[float]",
                    "float",
                    "str",
                    "SupportsFloat",
                    "None",
                    "Type",
                    "typing.Type"
                ]
            }
        },
        "PeriodicLimiter.reset": {
            "name": "reset",
            "location": 60,
            "return": [
                "int",
                "Union[int, float, complex]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "Optional[List[str]]",
                    "list[str]",
                    "None"
                ],
                "rate": [
                    "str",
                    "Optional[base.OrderSpec]",
                    "None"
                ]
            }
        },
        "PeriodicLimiter.result_from_quota": {
            "name": "result_from_quota",
            "location": 72,
            "return": [
                "dict",
                "bool",
                "float"
            ],
            "arguments": {
                "rate": [
                    "Optional[int]",
                    "int",
                    "bool",
                    "None",
                    "Optional[str]",
                    "str"
                ],
                "limited": [
                    "bool",
                    "list[]",
                    "limit_data.LimitData",
                    "int",
                    "list"
                ],
                "limitdata": [
                    "bool",
                    "list[]",
                    "limit_data.LimitData",
                    "int",
                    "list"
                ],
                "elapsed_since_period_start": [
                    "int",
                    "float",
                    "bytes",
                    "str",
                    "datetime.date.time"
                ],
                "retry_after": [
                    "None",
                    "int",
                    "Optional[datetime.timedelta]",
                    "str",
                    "datetime.datetime",
                    "dict[str, typing.Any]",
                    "datetime.date",
                    "Optional[Dict[str, Any]]"
                ]
            }
        }
    },
    "rush-master/src/rush/limiters/redis_gcra.py": {
        "GenericCellRatelimiter.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 139,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenericCellRatelimiter._call_lua": {
            "name": "_call_lua",
            "location": 149,
            "return": [
                "IO",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenericCellRatelimiter.rate_limit": {
            "name": "rate_limit",
            "location": 165,
            "return": [
                "bool",
                "Dict[str, int]",
                "Optional[Union[str, Any]]",
                "Dict[int, dict]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "Optional[base.OrderSpec]",
                    "None",
                    "bytes",
                    "Hashable",
                    "typing.Hashable",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "quantity": [
                    "str",
                    "int",
                    "Optional[base.OrderSpec]",
                    "None",
                    "bytes",
                    "Hashable",
                    "typing.Hashable",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "rate": [
                    "int",
                    "str",
                    "bytes",
                    "Hashable",
                    "typing.Hashable"
                ]
            }
        },
        "GenericCellRatelimiter.reset": {
            "name": "reset",
            "location": 188,
            "return": [
                "bool",
                "Dict[str, int]",
                "Optional[Union[str, Any]]",
                "Dict[int, dict]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "Hashable",
                    "typing.Hashable"
                ],
                "rate": [
                    "str",
                    "bool",
                    "list[]",
                    "Union[str, List]",
                    "Optional[bool]",
                    "None",
                    "Optional[str]"
                ]
            }
        }
    },
    "rush-master/src/rush/limiters/__init__.py": {},
    "rush-master/src/rush/stores/base.py": {
        "BaseStore.get": {
            "name": "get",
            "location": 11,
            "return": [
                "typing.Optional[limit_data.LimitData]",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Iterable[str]",
                    "typing.Iterable[str]",
                    "Optional[datetime.timedelta]",
                    "None"
                ]
            }
        },
        "BaseStore.set": {
            "name": "set",
            "location": 15,
            "return": [
                "limit_data.LimitData",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseStore.compare_and_swap": {
            "name": "compare_and_swap",
            "location": 21,
            "return": [
                "limit_data.LimitData",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseStore.get_with_time": {
            "name": "get_with_time",
            "location": 31,
            "return": [
                "tuple[None]",
                "tuple[typing.Union[float,dict[, ],int,list[]]]",
                "float",
                "datetime.datetime",
                "Tuple[int, int, int]",
                "Optional[datetime.date]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "tzinfo": [
                    "str",
                    "Iterable[str]",
                    "int"
                ]
            }
        },
        "BaseStore.set_with_time": {
            "name": "set_with_time",
            "location": 48,
            "return": [
                "dict",
                "str",
                "bool",
                "Optional[List[str]]",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseStore.current_time": {
            "name": "current_time",
            "location": 61,
            "return": [
                "datetime.datetime",
                "datetime.date",
                "str",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "tzinfo": [
                    "Optional[datetime.tzinfo]",
                    "str",
                    "datetime.datetime",
                    "float",
                    "bool",
                    "datetime.timezone",
                    "int"
                ]
            }
        }
    },
    "rush-master/src/rush/stores/dictionary.py": {
        "DictionaryStore.compare_and_swap": {
            "name": "compare_and_swap",
            "location": 17,
            "return": [
                "Dict[str, Any]",
                "Mapping",
                "Mapping[str, Any]",
                "int",
                "str",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "KT"
                ],
                "old": [
                    "str",
                    "bytes",
                    "TextIO",
                    "typing.TextIO"
                ],
                "new": [
                    "str",
                    "tuple",
                    "tuple[]",
                    "List[int]",
                    "list[int]",
                    "Optional[bytes]",
                    "bytes",
                    "None"
                ]
            }
        },
        "DictionaryStore.get": {
            "name": "get",
            "location": 41,
            "return": [
                "dict[, ]",
                "bytes",
                "str",
                "dict[str, typing.Union[int,str]]",
                "Dict[str, Any]",
                "list[]",
                "Callable",
                "dict[str, str]",
                "Optional[str]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "DictionaryStore.set": {
            "name": "set",
            "location": 46,
            "return": [
                "str",
                "Optional[str]",
                "bytes",
                "Mapping",
                "bool",
                "Tuple[float, float, float, float]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rush-master/src/rush/stores/redis.py": {
        "parse": {
            "name": "parse",
            "location": 20,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "int",
                    "bytes",
                    "float",
                    "Union[str, bytes]"
                ]
            }
        },
        "RedisStore._validate_url": {
            "name": "_validate_url",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "attribute": [
                    "str"
                ],
                "value": [
                    "str",
                    "dict",
                    "Union[bytes, str]"
                ]
            }
        },
        "RedisStore._make_client": {
            "name": "_make_client",
            "location": 50,
            "return": [
                "Callable[[List, bool], None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RedisStore.compare_and_swap": {
            "name": "compare_and_swap",
            "location": 59,
            "return": [
                "Iterable[str]",
                "shapely.geometry.base.BaseGeometry",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bool",
                    "list[]",
                    "list",
                    "KT"
                ],
                "old": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "new": [
                    "str",
                    "int",
                    "Hashable",
                    "Dict[str, str]",
                    "bytes"
                ]
            }
        },
        "RedisStore.set": {
            "name": "set",
            "location": 86,
            "return": [
                "bytes",
                "str",
                "Dict[str, Any]",
                "Optional[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RedisStore.get": {
            "name": "get",
            "location": 102,
            "return": [
                "None",
                "int",
                "bool",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None",
                    "Optional[Any]",
                    "typing.Any"
                ]
            }
        },
        "RedisStore.current_time": {
            "name": "current_time",
            "location": 107,
            "return": [
                "datetime.datetime",
                "datetime.date",
                "str",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "tzinfo": [
                    "Optional[datetime.tzinfo]",
                    "float",
                    "int",
                    "str",
                    "Optional[int]",
                    "datetime.datetime",
                    "datetime.timedelta"
                ]
            }
        }
    },
    "rush-master/src/rush/stores/__init__.py": {},
    "rush-master/test/__init__.py": {},
    "rush-master/test/integration/test_periodic_throttle.py": {
        "test_periodic_end_to_end": {
            "name": "test_periodic_end_to_end",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "rush-master/test/integration/__init__.py": {},
    "rush-master/test/unit/helpers.py": {
        "new_quota": {
            "name": "new_quota",
            "location": 56,
            "return": [
                "List[str]",
                "str",
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {}
        },
        "MockStore.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "recording_store": [
                    "bool",
                    "None"
                ]
            }
        },
        "MockStore.get": {
            "name": "get",
            "location": 25,
            "return": [
                "Optional[bool]",
                "Optional[str]",
                "Iterable[Sequence[str]]",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Tuple[str]",
                    "tuple[str]"
                ]
            }
        },
        "MockStore.get_with_time": {
            "name": "get_with_time",
            "location": 29,
            "return": [
                "tuple[typing.Union[str,tuple[typing.Union[str,str]],dict[, ],list[]]]",
                "str",
                "bool",
                "dict",
                "Optional[Dict[str, Any]]",
                "Dict[str, Any]",
                "Sequence[str]",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Mapping",
                    "typing.Mapping"
                ],
                "tzinfo": [
                    "str",
                    "Callable[[None], Any]",
                    "VT",
                    "KT",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "MockStore.set": {
            "name": "set",
            "location": 36,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockStore.set_with_time": {
            "name": "set_with_time",
            "location": 40,
            "return": [
                "str",
                "dict[, ]",
                "dict[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockStore.compare_and_swap": {
            "name": "compare_and_swap",
            "location": 49,
            "return": [
                "str",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bool"
                ],
                "old": [
                    "str",
                    "bool"
                ],
                "new": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "rush-master/test/unit/test_dictionary_store.py": {
        "TestDictionaryStore.test_begins_life_empty": {
            "name": "test_begins_life_empty",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDictionaryStore.test_may_begin_life_with_data": {
            "name": "test_may_begin_life_with_data",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDictionaryStore.test_set": {
            "name": "test_set",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDictionaryStore.test_set_with_time_uses_now": {
            "name": "test_set_with_time_uses_now",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDictionaryStore.test_set_with_time_uses_provided_value": {
            "name": "test_set_with_time_uses_provided_value",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDictionaryStore.test_get": {
            "name": "test_get",
            "location": 63,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDictionaryStore.test_get_with_time_defaults_to_now": {
            "name": "test_get_with_time_defaults_to_now",
            "location": 70,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDictionaryStore.test_get_with_time_uses_existing_time": {
            "name": "test_get_with_time_uses_existing_time",
            "location": 81,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDictionaryStore.test_compare_and_swap_raises_mismatched_data_error": {
            "name": "test_compare_and_swap_raises_mismatched_data_error",
            "location": 102,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rush-master/test/unit/test_gcra_limiter.py": {
        "limiter": {
            "name": "limiter",
            "location": 13,
            "return": [
                "str",
                "Dict[str, Any]",
                "List[dict]",
                "dict"
            ],
            "arguments": {}
        },
        "TestGenericCellRatelimiter.test_reset": {
            "name": "test_reset",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "limiter": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestGenericCellRatelimiter.test_ratelimit_first_time_seeing_key": {
            "name": "test_ratelimit_first_time_seeing_key",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "limiter": []
            }
        },
        "TestGenericCellRatelimiter.test_ratelimit_existing_key_within_cell": {
            "name": "test_ratelimit_existing_key_within_cell",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "limiter": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestGenericCellRatelimiter.test_ratelimit_exceeded": {
            "name": "test_ratelimit_exceeded",
            "location": 83,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "limiter": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "rush-master/test/unit/test_limiters_base.py": {
        "_test_must_be_implemented": {
            "name": "_test_must_be_implemented",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "method": [
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "bool",
                    "typing.Callable[, ]",
                    "Callable",
                    "List[Dict[str, str]]"
                ],
                "args": [],
                "kwargs": [
                    "dict[, ]"
                ]
            }
        },
        "base_limiter": {
            "name": "base_limiter",
            "location": 14,
            "return": [
                "str",
                "bytearray",
                "bytes"
            ],
            "arguments": {}
        },
        "test_rate_limit_must_be_implemented": {
            "name": "test_rate_limit_must_be_implemented",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "base_limiter": [
                    "str",
                    "int",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "test_get_with_time_must_be_implemented": {
            "name": "test_get_with_time_must_be_implemented",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "base_limiter": [
                    "str",
                    "int",
                    "Union[None, dict]",
                    "None",
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "rush-master/test/unit/test_limit_data.py": {
        "test_conversion_helper": {
            "name": "test_conversion_helper",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "value": [
                    "str",
                    "int"
                ],
                "expected_retval": [
                    "str",
                    "int"
                ]
            }
        },
        "TestLimitData.test_asdict_without_time": {
            "name": "test_asdict_without_time",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLimitData.test_asdict_with_time": {
            "name": "test_asdict_with_time",
            "location": 66,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLimitData.test_copy_with_no_arguments": {
            "name": "test_copy_with_no_arguments",
            "location": 88,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLimitData.test_copy_with_arguments": {
            "name": "test_copy_with_arguments",
            "location": 94,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLimitData.test_conversion": {
            "name": "test_conversion",
            "location": 103,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rush-master/test/unit/test_periodic_limiter.py": {
        "limiter": {
            "name": "limiter",
            "location": 15,
            "return": [
                "str",
                "bytes",
                "dict",
                "List[dict]"
            ],
            "arguments": {}
        },
        "TestPeriodicLimiter.test_reset": {
            "name": "test_reset",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "limiter": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestPeriodicLimiter.test_no_preexisting_limitdata": {
            "name": "test_no_preexisting_limitdata",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "limiter": []
            }
        },
        "TestPeriodicLimiter.test_preexisting_limitdata": {
            "name": "test_preexisting_limitdata",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "limiter": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestPeriodicLimiter.test_last_rate_limit_in_period": {
            "name": "test_last_rate_limit_in_period",
            "location": 76,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "limiter": []
            }
        },
        "TestPeriodicLimiter.test_rate_limit_exceeded_none_remaining": {
            "name": "test_rate_limit_exceeded_none_remaining",
            "location": 101,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "limiter": []
            }
        },
        "TestPeriodicLimiter.test_rate_limit_reset_after_period": {
            "name": "test_rate_limit_reset_after_period",
            "location": 119,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "limiter": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestPeriodicLimiter.test_result_from_quota": {
            "name": "test_result_from_quota",
            "location": 140,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "limiter": []
            }
        },
        "TestPeriodicLimiter.test_result_from_quota_when_limited": {
            "name": "test_result_from_quota_when_limited",
            "location": 155,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "limiter": []
            }
        },
        "TestPeriodicLimiter.test_result_from_quota_explicitly_passed": {
            "name": "test_result_from_quota_explicitly_passed",
            "location": 172,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "limiter": []
            }
        }
    },
    "rush-master/test/unit/test_quota.py": {
        "TestQuota.test_per_second": {
            "name": "test_per_second",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuota.test_per_minute": {
            "name": "test_per_minute",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuota.test_per_hour": {
            "name": "test_per_hour",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuota.test_per_day": {
            "name": "test_per_day",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuota.test_requires_a_positive_period": {
            "name": "test_requires_a_positive_period",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuota.test_requires_a_non_negative_count": {
            "name": "test_requires_a_non_negative_count",
            "location": 52,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuota.test_requires_a_non_negative_maximum_burst": {
            "name": "test_requires_a_non_negative_maximum_burst",
            "location": 57,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuota.test_calculates_limit_from_count_and_burst": {
            "name": "test_calculates_limit_from_count_and_burst",
            "location": 62,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rush-master/test/unit/test_redis_gcra_limiter.py": {
        "limiterf": {
            "name": "limiterf",
            "location": 20,
            "return": [
                "int",
                "LimiterFixture"
            ],
            "arguments": {}
        },
        "TestGenericCellRatelimiter.test_reset": {
            "name": "test_reset",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "limiterf": []
            }
        },
        "TestGenericCellRatelimiter.test_ratelimit_first_time_seeing_key": {
            "name": "test_ratelimit_first_time_seeing_key",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "limiterf": []
            }
        },
        "TestGenericCellRatelimiter.test_ratelimit_exceeded": {
            "name": "test_ratelimit_exceeded",
            "location": 89,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "limiterf": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        }
    },
    "rush-master/test/unit/test_redis_store.py": {
        "test_parse": {
            "name": "test_parse",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "url": [
                    "str",
                    "bytearray"
                ]
            }
        },
        "TestRedisStore.test_valid_url": {
            "name": "test_valid_url",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "TestRedisStore.test_invalid_url": {
            "name": "test_invalid_url",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedisStore.test_set": {
            "name": "test_set",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedisStore.test_get": {
            "name": "test_get",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedisStore.test_get_returns_none": {
            "name": "test_get_returns_none",
            "location": 81,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedisStore.test_current_time_uses_redis_time": {
            "name": "test_current_time_uses_redis_time",
            "location": 93,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedisStore.test_compare_and_set": {
            "name": "test_compare_and_set",
            "location": 108,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedisStore.test_compare_and_set_raises_mismatched_data_error": {
            "name": "test_compare_and_set_raises_mismatched_data_error",
            "location": 126,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedisStore.test_compare_and_set_raises_data_changed_in_store_error": {
            "name": "test_compare_and_set_raises_data_changed_in_store_error",
            "location": 140,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rush-master/test/unit/test_result.py": {
        "TestRateLimitResult.test_resets_at": {
            "name": "test_resets_at",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRateLimitResult.test_retry_at": {
            "name": "test_retry_at",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRateLimitResult.test_static_now_method": {
            "name": "test_static_now_method",
            "location": 49,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "dt": [
                    "int",
                    "datetime.date.time"
                ]
            }
        },
        "TestRateLimitResult.test_resets_at_uses_now": {
            "name": "test_resets_at_uses_now",
            "location": 56,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "dt": [
                    "int",
                    "datetime.date.time",
                    "str",
                    "None",
                    "Optional[str]",
                    "datetime.datetime"
                ]
            }
        },
        "TestRateLimitResult.test_retry_at_uses_now": {
            "name": "test_retry_at_uses_now",
            "location": 70,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "dt": [
                    "int",
                    "datetime.date.time",
                    "str",
                    "None",
                    "Optional[str]",
                    "datetime.datetime"
                ]
            }
        }
    },
    "rush-master/test/unit/test_rush.py": {
        "test_rush_has_a_version": {
            "name": "test_rush_has_a_version",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "rush-master/test/unit/test_stores_base.py": {
        "_test_must_be_implemented": {
            "name": "_test_must_be_implemented",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "method": [
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "bool",
                    "typing.Callable[, ]",
                    "Callable",
                    "List[Dict[str, str]]"
                ],
                "args": [],
                "kwargs": [
                    "dict[, ]"
                ]
            }
        },
        "test_get_must_be_implemented": {
            "name": "test_get_must_be_implemented",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_set_must_be_implemented": {
            "name": "test_set_must_be_implemented",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_compare_and_swap": {
            "name": "test_compare_and_swap",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_get_with_time": {
            "name": "test_get_with_time",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_current_time": {
            "name": "test_current_time",
            "location": 60,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "rush-master/test/unit/test_throttle.py": {
        "TestThrottle.test_check": {
            "name": "test_check",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestThrottle.test_clear": {
            "name": "test_clear",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestThrottle.test_peek": {
            "name": "test_peek",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rush-master/test/unit/test_throttle_decorator.py": {
        "TestThrottleDecorator.test_call_sync_non_limited": {
            "name": "test_call_sync_non_limited",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestThrottleDecorator.test_call_sync_limited": {
            "name": "test_call_sync_limited",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestThrottleDecorator.test_call_async_non_limited": {
            "name": "test_call_async_non_limited",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestThrottleDecorator.test_call_async_limited": {
            "name": "test_call_async_limited",
            "location": 55,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestThrottleDecorator.test_sleep_and_retry_sync": {
            "name": "test_sleep_and_retry_sync",
            "location": 70,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestThrottleDecorator.test_sleep_and_retry_async": {
            "name": "test_sleep_and_retry_async",
            "location": 92,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestThrottleDecorator.test_call_sync_non_limited.test_func": {
            "name": "test_func",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "TestThrottleDecorator.test_call_sync_limited.test_func": {
            "name": "test_func",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "TestThrottleDecorator.test_sleep_and_retry_sync.test_func": {
            "name": "test_func",
            "location": 85,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "rush-master/test/unit/__init__.py": {}
}
{
    "s3-bucket-inspector-master/lambda/config.py": {
        "generate": {
            "name": "generate",
            "location": 33,
            "return": [
                "Dict[(str, Union[(list, Dict[(Any, list)])])]"
            ],
            "arguments": {}
        },
        "get_configs": {
            "name": "get_configs",
            "location": 45,
            "return": [
                "dict"
            ],
            "arguments": {
                "config_bucket_name": [
                    "Dict",
                    "Dict[str,Any]",
                    "str",
                    "Type"
                ]
            }
        },
        "ConfigGenerator.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bucket_name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "ConfigGenerator.upload_config": {
            "name": "upload_config",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output": [
                    "str",
                    "Dict[str,Any]",
                    "bool",
                    "Optional[str]",
                    "None",
                    "IO[bytes]",
                    "IO"
                ]
            }
        },
        "ConfigGenerator.generate_and_upload": {
            "name": "generate_and_upload",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "s3-bucket-inspector-master/lambda/issues.py": {
        "Issue.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Issue.issue": {
            "name": "issue",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Issue.resource": {
            "name": "resource",
            "location": 13,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Issue.help": {
            "name": "help",
            "location": 17,
            "return": [
                "Optional[str]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Issue.to_json": {
            "name": "to_json",
            "location": 20,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "s3-bucket-inspector-master/lambda/json_dumper.py": {
        "json_decode": {
            "name": "json_decode",
            "location": 6,
            "return": [
                "None",
                "str",
                "Optional[str]",
                "Optional[List[Any]]",
                "List",
                "Optional[BaseException]"
            ],
            "arguments": {
                "o": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "dumps": {
            "name": "dumps",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "js": [
                    "Dict[str,Any]",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "s3-bucket-inspector-master/lambda/lambda.py": {
        "initialise_logging": {
            "name": "initialise_logging",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "config_handler": {
            "name": "config_handler",
            "location": 16,
            "return": [
                "Dict[(str, int)]"
            ],
            "arguments": {
                "event": [
                    "Dict",
                    "Callable[[str,str],bool]",
                    "Callable[str,str,bool]"
                ],
                "context": [
                    "Dict",
                    "Callable[[str,str],bool]",
                    "Callable[str,str,bool]"
                ]
            }
        },
        "run_handler": {
            "name": "run_handler",
            "location": 23,
            "return": [
                "Dict[(str, int)]"
            ],
            "arguments": {
                "event": [
                    "str"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "s3-bucket-inspector-master/lambda/run.py": {
        "diff_previous": {
            "name": "diff_previous",
            "location": 110,
            "return": [
                "Tuple[(set, set)]"
            ],
            "arguments": {
                "latest_output": [
                    "Callable",
                    "int",
                    "bool"
                ],
                "previous_output": [
                    "Callable",
                    "int",
                    "bool"
                ],
                "whitelist": [
                    "int",
                    "None",
                    "bytes",
                    "BinaryIO",
                    "Callable",
                    "List[bool]"
                ]
            }
        },
        "parse_whitelist": {
            "name": "parse_whitelist",
            "location": 127,
            "return": [
                "Whitelist"
            ],
            "arguments": {
                "whitelist_json": [
                    "Dict[str,list[str]]",
                    "Dict[str,List[str]]",
                    "str"
                ]
            }
        },
        "get_whitelist": {
            "name": "get_whitelist",
            "location": 138,
            "return": [
                "Optional[Whitelist]"
            ],
            "arguments": {
                "config_bucket_name": [
                    "str",
                    "Dict[str,Any]",
                    "Union[int,str]",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "set_of_issues": {
            "name": "set_of_issues",
            "location": 156,
            "return": [
                "Set[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "output": [
                    "str",
                    "List[dict[str,Any]]",
                    "bool",
                    "int",
                    "List[Dict[str,Any]]"
                ],
                "whitelist": [
                    "str",
                    "Type[T]"
                ]
            }
        },
        "key_from_output": {
            "name": "key_from_output",
            "location": 166,
            "return": [
                "str"
            ],
            "arguments": {
                "output": [
                    "str",
                    "List[int]",
                    "bytes",
                    "Type[GenericList]",
                    "Union[str,bytes]",
                    "int"
                ]
            }
        },
        "get_external_ip": {
            "name": "get_external_ip",
            "location": 170,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "TestRunner.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_bucket_name": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "TestRunner._get_issues": {
            "name": "_get_issues",
            "location": 40,
            "return": [
                "Generator[(Dict[(str, Any)], Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRunner.run": {
            "name": "run",
            "location": 46,
            "return": [
                "Output"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRunner.run_and_upload": {
            "name": "run_and_upload",
            "location": 61,
            "return": [
                "Output"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRunner._previous_output_s3": {
            "name": "_previous_output_s3",
            "location": 71,
            "return": [
                "None",
                "Optional[Dict]",
                "Optional[int]",
                "bytes",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "ignore_key": [
                    "Text",
                    "str",
                    "Optional[str]"
                ],
                "hours_in_past_to_search": [
                    "int",
                    "Optional[str]",
                    "Optional[bool]",
                    "Optional[List[str]]",
                    "Optional[float]"
                ]
            }
        },
        "TestRunner.diff_previous_s3": {
            "name": "diff_previous_s3",
            "location": 93,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "latest_output": [
                    "bool",
                    "List[int]",
                    "bytes",
                    "str",
                    "Optional[int]",
                    "None"
                ],
                "whitelist": [
                    "bool",
                    "None",
                    "str",
                    "int"
                ],
                "hours_in_past_to_search": [
                    "int",
                    "str",
                    "bytes",
                    "bool",
                    "Hashable",
                    "List[str]"
                ]
            }
        }
    },
    "s3-bucket-inspector-master/lambda/s3_bucket_inspector.py": {
        "bucket_root": {
            "name": "bucket_root",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "bucket_name": [
                    "str"
                ]
            }
        },
        "bucket_region": {
            "name": "bucket_region",
            "location": 25,
            "return": [
                "str",
                "Dict",
                "Tuple[bytes]",
                "Dict[int,Any]",
                "float",
                "bool"
            ],
            "arguments": {
                "bucket_name": [
                    "str"
                ]
            }
        },
        "bucket_publicly_listable": {
            "name": "bucket_publicly_listable",
            "location": 62,
            "return": [
                "bool"
            ],
            "arguments": {
                "bucket_name": [
                    "str",
                    "Union[Dict[str,Any],None]",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        },
        "bucket_publicly_uploadable": {
            "name": "bucket_publicly_uploadable",
            "location": 96,
            "return": [
                "bool"
            ],
            "arguments": {
                "bucket_name": [
                    "str"
                ]
            }
        },
        "bucket_publicly_deletable": {
            "name": "bucket_publicly_deletable",
            "location": 126,
            "return": [
                "bool"
            ],
            "arguments": {
                "bucket_name": [
                    "str"
                ]
            }
        },
        "file_publicly_readable": {
            "name": "file_publicly_readable",
            "location": 162,
            "return": [
                "bool"
            ],
            "arguments": {
                "bucket_name": [
                    "str"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "get_s3_bucket_list": {
            "name": "get_s3_bucket_list",
            "location": 167,
            "return": [
                "list"
            ],
            "arguments": {
                "s3_client": [
                    "botocore.clienBaseClient",
                    "str",
                    "List[str]"
                ]
            }
        },
        "keys_in_bucket": {
            "name": "keys_in_bucket",
            "location": 172,
            "return": [
                "list"
            ],
            "arguments": {
                "s3_client": [
                    "str",
                    "botocore.clienBaseClient"
                ],
                "bucket_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "max_keys": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "get_s3_random_files": {
            "name": "get_s3_random_files",
            "location": 183,
            "return": [
                "Dict[(Any, list)]"
            ],
            "arguments": {
                "s3_client": [
                    "str",
                    "Dict"
                ],
                "keys_to_return": [
                    "int",
                    "Dict[str,Any]",
                    "List",
                    "Dict[str,List[str]]",
                    "Dict",
                    "Set",
                    "List[str]"
                ],
                "keys_to_request": [
                    "int",
                    "str",
                    "Dict"
                ]
            }
        },
        "PubliclyListableBucketIssue.help": {
            "name": "help",
            "location": 43,
            "return": [
                "Text",
                "List[str]",
                "str",
                "List[Dict]",
                "List[List[Any]]",
                "Dict[str,str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PubliclyListableBuckets.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s3_bucket_list": [
                    "Optional[List[str]]",
                    "List[str]",
                    "Dict",
                    "List",
                    "None",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "PubliclyListableBuckets.find_issues": {
            "name": "find_issues",
            "location": 56,
            "return": [
                "Generator[(PubliclyListableBucketIssue, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PubliclyUploadableBucketIssue.help": {
            "name": "help",
            "location": 77,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "PubliclyUploadableBuckets.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s3_bucket_list": [
                    "Optional[List[str]]",
                    "List[str]",
                    "Dict",
                    "List",
                    "None",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "PubliclyUploadableBuckets.find_issues": {
            "name": "find_issues",
            "location": 90,
            "return": [
                "Generator[(PubliclyUploadableBucketIssue, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PubliclyDeletableBucketIssue.help": {
            "name": "help",
            "location": 107,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "PubliclyDeletableBuckets.__init__": {
            "name": "__init__",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s3_bucket_list": [
                    "Optional[List[str]]",
                    "List[str]",
                    "Dict",
                    "List",
                    "None",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "PubliclyDeletableBuckets.find_issues": {
            "name": "find_issues",
            "location": 120,
            "return": [
                "Generator[(PubliclyDeletableBucketIssue, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PubliclyReadableFileIssue.__init__": {
            "name": "__init__",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bucket_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "key": [
                    "str",
                    "Dict[str,Any]",
                    "List[str]",
                    "Dict[str,LabwareDefinition]",
                    "Dict[str,D]"
                ]
            }
        },
        "PubliclyReadableFileIssue.to_json": {
            "name": "to_json",
            "location": 137,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PubliclyReadableFileIssue.help": {
            "name": "help",
            "location": 141,
            "return": [
                "Text",
                "str",
                "Optional[int]",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "PubliclyReadableFiles.__init__": {
            "name": "__init__",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s3_random_files": [
                    "str",
                    "Tuple[List[Any],int]",
                    "bool",
                    "Tuple[Union[list[Any],int]]",
                    "Optional[User]",
                    "None",
                    "Dict[str,Optional[str]]",
                    "Dict[str,Union[str,None]]"
                ]
            }
        },
        "PubliclyReadableFiles.find_issues": {
            "name": "find_issues",
            "location": 154,
            "return": [
                "Generator[(PubliclyReadableFileIssue, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "s3-bucket-inspector-master/lambda/slack.py": {
        "build_message": {
            "name": "build_message",
            "location": 21,
            "return": [
                "Dict[(str, List[Dict[(str, Any)]])]"
            ],
            "arguments": {
                "issue_groups": [
                    "str",
                    "Dict",
                    "int",
                    "bool",
                    "Optional[str]"
                ],
                "output_bucket_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "output_key": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "send_diff_message": {
            "name": "send_diff_message",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "new_issues": [
                    "Set[Tuple[str, str]]",
                    "int",
                    "List[str]",
                    "bool",
                    "List[int]",
                    "Set[str]"
                ],
                "fixed_issues": [
                    "Set[Tuple[str, str]]",
                    "int",
                    "List[str]",
                    "Set[str]",
                    "List[int]",
                    "List[float]"
                ],
                "output_bucket_name": [
                    "str",
                    "bytes",
                    "bool",
                    "None",
                    "int",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "output_key": [
                    "str",
                    "bytes",
                    "bool",
                    "None",
                    "int",
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        },
        "send_full_message": {
            "name": "send_full_message",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "issues": [
                    "str",
                    "Set[Tuple[str, str]]",
                    "bool",
                    "int"
                ],
                "output_bucket_name": [
                    "str",
                    "bool",
                    "Set[tuple[Union[str,str]]]",
                    "Set[Tuple[str,str]]",
                    "int"
                ],
                "output_key": [
                    "str",
                    "bool",
                    "Set[tuple[Union[str,str]]]",
                    "Set[Tuple[str,str]]",
                    "int"
                ]
            }
        },
        "send": {
            "name": "send",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "Dict[str,Any]",
                    "Dict",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        }
    },
    "s3-bucket-inspector-master/lambda/tests/test_bi.py": {
        "test_output_parsing_nothing": {
            "name": "test_output_parsing_nothing",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_output_parsing": {
            "name": "test_output_parsing",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_build_message": {
            "name": "test_build_message",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_diff": {
            "name": "test_diff",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
{
    "safe-maps-master/backend/manage.py": {
        "runserver": {
            "name": "runserver",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "runworker": {
            "name": "runworker",
            "location": 49,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "safe-maps-master/backend/_init_.py": {},
    "safe-maps-master/backend/api/config.py": {},
    "safe-maps-master/backend/api/constants.py": {},
    "safe-maps-master/backend/api/core.py": {
        "create_response": {
            "name": "create_response",
            "location": 47,
            "return": [
                "Tuple[(Any, int)]"
            ],
            "arguments": {
                "data": [
                    "dict"
                ],
                "status": [
                    "int"
                ],
                "message": [
                    "str"
                ]
            }
        },
        "serialize_list": {
            "name": "serialize_list",
            "location": 84,
            "return": [
                "list"
            ],
            "arguments": {
                "items": [
                    "list"
                ]
            }
        },
        "all_exception_handler": {
            "name": "all_exception_handler",
            "location": 96,
            "return": [
                "Tuple[(Any, int)]"
            ],
            "arguments": {
                "error": [
                    "Exception"
                ]
            }
        },
        "can_be_authenticated": {
            "name": "can_be_authenticated",
            "location": 104,
            "return": [
                "Callable"
            ],
            "arguments": {
                "route": []
            }
        },
        "authenticated_route": {
            "name": "authenticated_route",
            "location": 117,
            "return": [
                "Callable"
            ],
            "arguments": {
                "route": []
            }
        },
        "get_auth_server_user": {
            "name": "get_auth_server_user",
            "location": 134,
            "return": [
                "requests.models.Response"
            ],
            "arguments": {}
        },
        "necessary_post_params": {
            "name": "necessary_post_params",
            "location": 147,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {}
        },
        "invalid_model_helper": {
            "name": "invalid_model_helper",
            "location": 168,
            "return": [
                "Optional[list]"
            ],
            "arguments": {
                "user_data": [],
                "props": []
            }
        },
        "get_mongo_credentials": {
            "name": "get_mongo_credentials",
            "location": 178,
            "return": [
                "tuple"
            ],
            "arguments": {
                "file": [
                    "str"
                ]
            }
        },
        "Mixin.to_dict": {
            "name": "to_dict",
            "location": 31,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONEncoder.default": {
            "name": "default",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "o": []
            }
        },
        "can_be_authenticated.wrapper_wroute": {
            "name": "wrapper_wroute",
            "location": 106,
            "return": [],
            "arguments": {}
        },
        "authenticated_route.wrapper_wroute": {
            "name": "wrapper_wroute",
            "location": 119,
            "return": [],
            "arguments": {}
        },
        "necessary_post_params.real_decorator": {
            "name": "real_decorator",
            "location": 148,
            "return": [],
            "arguments": {
                "route": []
            }
        },
        "necessary_post_params.real_decorator.wrapper_wroute": {
            "name": "wrapper_wroute",
            "location": 150,
            "return": [],
            "arguments": {}
        }
    },
    "safe-maps-master/backend/api/__init__.py": {
        "create_app": {
            "name": "create_app",
            "location": 21,
            "return": [
                "flask.Flask",
                "Flask"
            ],
            "arguments": {
                "test_config": [
                    "dict",
                    "app.config.HealthCheckConfig",
                    "Dict[str, Any]"
                ]
            }
        },
        "RequestFormatter.format": {
            "name": "format",
            "location": 15,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "safe-maps-master/backend/api/models/Business.py": {},
    "safe-maps-master/backend/api/models/BusStop.py": {},
    "safe-maps-master/backend/api/models/Crime.py": {},
    "safe-maps-master/backend/api/models/EmergencyPhone.py": {},
    "safe-maps-master/backend/api/models/Location.py": {},
    "safe-maps-master/backend/api/models/OpenHours.py": {},
    "safe-maps-master/backend/api/models/PoliceStation.py": {},
    "safe-maps-master/backend/api/models/Streetlight.py": {},
    "safe-maps-master/backend/api/models/Tips.py": {},
    "safe-maps-master/backend/api/models/User.py": {},
    "safe-maps-master/backend/api/models/__init__.py": {},
    "safe-maps-master/backend/api/scrapers/bus_stops.py": {
        "get_qs_url": {
            "name": "get_qs_url",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "url": [
                    "str"
                ],
                "args": []
            }
        },
        "get_stops": {
            "name": "get_stops",
            "location": 34,
            "return": [
                "Dict[(Any, dict)]"
            ],
            "arguments": {
                "payload": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "url": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "req_fields": [
                    "str",
                    "list[str]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "get_full_stop_info": {
            "name": "get_full_stop_info",
            "location": 52,
            "return": [
                "_T0"
            ],
            "arguments": {
                "stop_data": [
                    "_T0"
                ],
                "payload": [
                    "bool",
                    "Sequence[int]",
                    "Optional[str]",
                    "List[int]",
                    "Tuple[str, List[str]]"
                ],
                "url": [
                    "str",
                    "Optional[bytes]",
                    "bytes",
                    "Optional[str]",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[dict]",
                    "dict[, ]"
                ]
            }
        },
        "scrape": {
            "name": "scrape",
            "location": 86,
            "return": [
                "Dict[(Any, Dict[(str, Any)])]"
            ],
            "arguments": {}
        }
    },
    "safe-maps-master/backend/api/scrapers/crimes.py": {
        "get_qs_url": {
            "name": "get_qs_url",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "url": [
                    "str"
                ],
                "args": []
            }
        },
        "get_datetime": {
            "name": "get_datetime",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "days_ago": [
                    "int",
                    "float",
                    "str",
                    "None",
                    "Optional[int]",
                    "datetime.date",
                    "datetime.datetime"
                ]
            }
        },
        "pull_data": {
            "name": "pull_data",
            "location": 59,
            "return": [
                "Dict[(Any, Dict[(str, Any)])]"
            ],
            "arguments": {
                "headers": [
                    "str",
                    "dict",
                    "Exception",
                    "dict[, ]",
                    "Optional[MutableMapping]",
                    "typing.MutableMapping",
                    "None",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "payload": [
                    "str",
                    "dict",
                    "Exception",
                    "dict[, ]",
                    "Optional[MutableMapping]",
                    "typing.MutableMapping",
                    "None",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "api_url": [
                    "str",
                    "dict",
                    "Exception",
                    "dict[, ]",
                    "Optional[MutableMapping]",
                    "typing.MutableMapping",
                    "None",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "format_string": {
            "name": "format_string",
            "location": 80,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str",
                    "int"
                ]
            }
        },
        "crime_scrape": {
            "name": "crime_scrape",
            "location": 86,
            "return": [
                "Dict[(Any, Dict[(str, Any)])]"
            ],
            "arguments": {}
        }
    },
    "safe-maps-master/backend/api/scrapers/emergency_phones.py": {
        "get_phones": {
            "name": "get_phones",
            "location": 80,
            "return": [
                "list"
            ],
            "arguments": {}
        }
    },
    "safe-maps-master/backend/api/scrapers/open_businesses.py": {
        "get_qs_url": {
            "name": "get_qs_url",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "url": [
                    "str"
                ],
                "args": []
            }
        },
        "business_scrape": {
            "name": "business_scrape",
            "location": 37,
            "return": [
                "Dict[(Any, Dict[(str, Any)])]"
            ],
            "arguments": {}
        }
    },
    "safe-maps-master/backend/api/scrapers/police_stations.py": {
        "get_stations": {
            "name": "get_stations",
            "location": 21,
            "return": [
                "List[Dict[(str, Union[(float, str)])]]"
            ],
            "arguments": {}
        }
    },
    "safe-maps-master/backend/api/scrapers/streetlights.py": {
        "streetlight_scrape": {
            "name": "streetlight_scrape",
            "location": 7,
            "return": [
                "Dict[(Any, Dict[(str, Any)])]"
            ],
            "arguments": {}
        }
    },
    "safe-maps-master/backend/api/scrapers/__init__.py": {},
    "safe-maps-master/backend/api/views/auth.py": {
        "invalid_email": {
            "name": "invalid_email",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "email_address": [
                    "str"
                ]
            }
        },
        "register": {
            "name": "register",
            "location": 20,
            "return": [
                "tuple[typing.Union[str,list[str],int,typing.Pattern,bytes]]",
                "int",
                "dict",
                "salon.models.Stylist"
            ],
            "arguments": {}
        },
        "login": {
            "name": "login",
            "location": 40,
            "return": [
                "str",
                "Iterable[int]"
            ],
            "arguments": {}
        },
        "forgot_password": {
            "name": "forgot_password",
            "location": 46,
            "return": [
                "bool",
                "str",
                "models.User"
            ],
            "arguments": {}
        },
        "password_reset": {
            "name": "password_reset",
            "location": 54,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "wrap_auth_server_response": {
            "name": "wrap_auth_server_response",
            "location": 60,
            "return": [
                "Tuple[(Any, int)]"
            ],
            "arguments": {
                "auth_server_response": [
                    "zerver.models.UserProfile"
                ]
            }
        },
        "post_and_expect_token": {
            "name": "post_and_expect_token",
            "location": 67,
            "return": [
                "Tuple[(Any, int)]"
            ],
            "arguments": {
                "endpoint": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "forward_post_to_auth_server": {
            "name": "forward_post_to_auth_server",
            "location": 83,
            "return": [
                "requests.models.Response"
            ],
            "arguments": {
                "endpoint": [
                    "str",
                    "Optional[\"permissions_doc\"]",
                    "Callable",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "get_user_by_token": {
            "name": "get_user_by_token",
            "location": 91,
            "return": [
                "None",
                "Optional[str]",
                "Optional[List[str]]",
                "Optional[int]",
                "Optional[Dict]",
                "str"
            ],
            "arguments": {
                "token": [
                    "str"
                ]
            }
        },
        "verifyEmail": {
            "name": "verifyEmail",
            "location": 108,
            "return": [
                "bool",
                "bob_emploi.frontend.api.auth_pb2.AuthResponse",
                "str",
                "Optional[str]",
                "http_quesuser.model.User",
                "bytes",
                "bob_emploi.frontend.api.auth_pb2.AuthRequest"
            ],
            "arguments": {}
        },
        "create_new_db_user": {
            "name": "create_new_db_user",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "client_data": [
                    "tuple[]",
                    "core_lib.core.processing_chain.Chain",
                    "list[dict[, ]]",
                    "Optional[Tuple]",
                    "List[dict]"
                ],
                "auth_uid": [
                    "core_lib.core.processing_chain.Chain",
                    "tuple[]",
                    "Optional[Tuple]",
                    "None",
                    "List[dict]",
                    "list[dict[, ]]"
                ]
            }
        }
    },
    "safe-maps-master/backend/api/views/business.py": {
        "open_businesses": {
            "name": "open_businesses",
            "location": 12,
            "return": [
                "Optional[Exception]",
                "List[int]",
                "zerver.models.UserProfile"
            ],
            "arguments": {}
        },
        "get_open_business_day": {
            "name": "get_open_business_day",
            "location": 47,
            "return": [
                "None",
                "Optional[str]",
                "bool",
                "Optional[float]"
            ],
            "arguments": {
                "business": [
                    "int",
                    "str",
                    "AsyncIterator[T]",
                    "collections.abc.AsyncIterator"
                ],
                "day": [
                    "int",
                    "float",
                    "Optional[bool]",
                    "None"
                ]
            }
        },
        "get_business": {
            "name": "get_business",
            "location": 61,
            "return": [
                "bool",
                "server.models.User",
                "core.models.User",
                "\"User\"",
                "Tuple[Optional[str], str]"
            ],
            "arguments": {}
        },
        "scrape_businesses": {
            "name": "scrape_businesses",
            "location": 74,
            "return": [
                "List[Dict[str, Any]]",
                "services.shop.order.models.order_evenOrderEvenData",
                "models.topic.Topic",
                "Dict[str, Any]",
                "str",
                "bytes"
            ],
            "arguments": {}
        },
        "save_business_to_db": {
            "name": "save_business_to_db",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "business_dict": [
                    "flask.wrappers.Response",
                    "flask.Request",
                    "Exception"
                ]
            }
        },
        "clear_businesses": {
            "name": "clear_businesses",
            "location": 134,
            "return": [
                "List[Dict[str, Any]]",
                "services.shop.order.models.order_evenOrderEvenData",
                "core_lib.core.models.Event"
            ],
            "arguments": {}
        },
        "delete_business_collection": {
            "name": "delete_business_collection",
            "location": 150,
            "return": [
                "str",
                "typing.Type",
                "dict[, ]",
                "bool",
                "Union[int, float, complex]",
                "dict[str, set[]]",
                "IO",
                "Dict[str, Any]"
            ],
            "arguments": {}
        }
    },
    "safe-maps-master/backend/api/views/busStop.py": {
        "get_busStop": {
            "name": "get_busStop",
            "location": 11,
            "return": [
                "bool",
                "Tuple[Optional[str], str]",
                "dict",
                "server.models.User",
                "\"User\"",
                "Optional[models.User]",
                "str"
            ],
            "arguments": {}
        },
        "scrape_stops": {
            "name": "scrape_stops",
            "location": 22,
            "return": [
                "List[Dict[str, Any]]",
                "services.shop.order.models.order_evenOrderEvenData",
                "models.topic.Topic",
                "Dict[str, Any]",
                "str",
                "bytes"
            ],
            "arguments": {}
        },
        "save_stop_to_db": {
            "name": "save_stop_to_db",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "stop_dict": [
                    "dict",
                    "core.models.AnalyticsSession",
                    "models.facilityData",
                    "Dict[str, Any]"
                ]
            }
        },
        "clear_stops": {
            "name": "clear_stops",
            "location": 59,
            "return": [
                "List[Dict[str, Any]]",
                "services.shop.order.models.order_evenOrderEvenData",
                "core_lib.core.models.Event"
            ],
            "arguments": {}
        },
        "delete_stop_collection": {
            "name": "delete_stop_collection",
            "location": 75,
            "return": [
                "str",
                "dict[str, list[int]]",
                "bool",
                "int",
                "Union[int, float, complex]",
                "tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal]]",
                "IO",
                "set[str]",
                "Dict[str, Any]",
                "dict[str, set[]]"
            ],
            "arguments": {}
        }
    },
    "safe-maps-master/backend/api/views/crime.py": {
        "get_crime": {
            "name": "get_crime",
            "location": 15,
            "return": [
                "bool",
                "Tuple[Optional[str], str]",
                "dict",
                "server.models.User",
                "\"User\"",
                "Optional[models.User]",
                "str"
            ],
            "arguments": {}
        },
        "scrape_crimes": {
            "name": "scrape_crimes",
            "location": 26,
            "return": [
                "List[Dict[str, Any]]",
                "services.shop.order.models.order_evenOrderEvenData",
                "models.topic.Topic",
                "Dict[str, Any]",
                "str",
                "bytes"
            ],
            "arguments": {}
        },
        "save_crime_to_db": {
            "name": "save_crime_to_db",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "crime_dict": [
                    "dict[, ]",
                    "dict",
                    "str",
                    "bob_emploi.frontend.api.user_pb2.User",
                    "pandas.core.series.Series"
                ]
            }
        },
        "clear_crimes": {
            "name": "clear_crimes",
            "location": 71,
            "return": [
                "List[Dict[str, Any]]",
                "services.shop.order.models.order_evenOrderEvenData",
                "core_lib.core.models.Event",
                "datetime"
            ],
            "arguments": {}
        },
        "delete_crime_collection": {
            "name": "delete_crime_collection",
            "location": 87,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "check_crime_duration": {
            "name": "check_crime_duration",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "check_filter": {
            "name": "check_filter",
            "location": 113,
            "return": [
                "Union[(int, str)]"
            ],
            "arguments": {
                "id": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ]
            }
        }
    },
    "safe-maps-master/backend/api/views/emergencyPhone.py": {
        "get_emergencyPhone": {
            "name": "get_emergencyPhone",
            "location": 10,
            "return": [
                "bool",
                "Tuple[Optional[str], str]",
                "dict",
                "server.models.User",
                "\"User\"",
                "Optional[models.User]",
                "str"
            ],
            "arguments": {}
        },
        "scrape_phones": {
            "name": "scrape_phones",
            "location": 21,
            "return": [
                "List[Dict[str, Any]]",
                "services.shop.order.models.order_evenOrderEvenData",
                "models.topic.Topic",
                "Dict[str, Any]",
                "str",
                "bytes"
            ],
            "arguments": {}
        },
        "save_phone_to_db": {
            "name": "save_phone_to_db",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "phone_dict": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "clear_phones": {
            "name": "clear_phones",
            "location": 52,
            "return": [
                "List[Dict[str, Any]]",
                "services.shop.order.models.order_evenOrderEvenData",
                "core_lib.core.models.Event"
            ],
            "arguments": {}
        },
        "delete_phone_collection": {
            "name": "delete_phone_collection",
            "location": 68,
            "return": [
                "str",
                "dict[str, list[int]]",
                "bool",
                "int",
                "Union[int, float, complex]",
                "tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal]]",
                "IO",
                "set[str]",
                "Dict[str, Any]",
                "dict[str, set[]]"
            ],
            "arguments": {}
        }
    },
    "safe-maps-master/backend/api/views/main.py": {
        "index": {
            "name": "index",
            "location": 9,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "safe-maps-master/backend/api/views/policeStations.py": {
        "get_police_stations": {
            "name": "get_police_stations",
            "location": 10,
            "return": [
                "bool",
                "Tuple[Optional[str], str]",
                "dict",
                "server.models.User",
                "\"User\"",
                "Optional[models.User]",
                "str"
            ],
            "arguments": {}
        },
        "scrape_station": {
            "name": "scrape_station",
            "location": 21,
            "return": [
                "List[Dict[str, Any]]",
                "services.shop.order.models.order_evenOrderEvenData",
                "models.topic.Topic",
                "Dict[str, Any]",
                "str",
                "bytes"
            ],
            "arguments": {}
        },
        "save_station": {
            "name": "save_station",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "station_dict": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "dict",
                    "flask.Response"
                ]
            }
        },
        "clear_stations": {
            "name": "clear_stations",
            "location": 52,
            "return": [
                "List[Dict[str, Any]]",
                "services.shop.order.models.order_evenOrderEvenData",
                "core_lib.core.models.Event"
            ],
            "arguments": {}
        },
        "delete_police_station_collection": {
            "name": "delete_police_station_collection",
            "location": 68,
            "return": [
                "str",
                "dict[str, list[int]]",
                "bool",
                "int",
                "Union[int, float, complex]",
                "tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal]]",
                "IO",
                "set[str]",
                "Dict[str, Any]",
                "dict[str, set[]]"
            ],
            "arguments": {}
        }
    },
    "safe-maps-master/backend/api/views/streetlight.py": {
        "get_streetlight": {
            "name": "get_streetlight",
            "location": 11,
            "return": [
                "bool",
                "Tuple[Optional[str], str]",
                "dict",
                "server.models.User",
                "\"User\"",
                "Optional[models.User]",
                "str"
            ],
            "arguments": {}
        },
        "scrape_streetlights": {
            "name": "scrape_streetlights",
            "location": 22,
            "return": [
                "List[Dict[str, Any]]",
                "services.shop.order.models.order_evenOrderEvenData",
                "models.topic.Topic",
                "Dict[str, Any]",
                "str",
                "bytes"
            ],
            "arguments": {}
        },
        "save_streetlight_to_db": {
            "name": "save_streetlight_to_db",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "streetlight_dict": [
                    "dict[, ]",
                    "dict",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "clear_streetlights": {
            "name": "clear_streetlights",
            "location": 57,
            "return": [
                "List[Dict[str, Any]]",
                "services.shop.order.models.order_evenOrderEvenData",
                "core_lib.core.models.Event"
            ],
            "arguments": {}
        },
        "delete_streetlight_collection": {
            "name": "delete_streetlight_collection",
            "location": 73,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "safe-maps-master/backend/api/views/tips.py": {
        "get_all_tips": {
            "name": "get_all_tips",
            "location": 23,
            "return": [
                "bool",
                "Tuple[Optional[str], str]",
                "str",
                "dict",
                "\"User\"",
                "Optional[models.User]",
                "medtagger.database.models.Slice"
            ],
            "arguments": {}
        },
        "get_tip": {
            "name": "get_tip",
            "location": 42,
            "return": [
                "str",
                "zerver.models.UserProfile",
                "bool",
                "Dict[str, Any]",
                "models.Dashboard"
            ],
            "arguments": {
                "id": [
                    "int",
                    "str",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "get_tips_by_user": {
            "name": "get_tips_by_user",
            "location": 49,
            "return": [
                "str",
                "Dict[str, Any]",
                "int",
                "app.domain.users.User",
                "core.types.FBAccessToken"
            ],
            "arguments": {
                "user_db": [
                    "str",
                    "List[domain.models.User]",
                    "Optional[int]",
                    "User"
                ]
            }
        },
        "get_tips_by_category": {
            "name": "get_tips_by_category",
            "location": 58,
            "return": [
                "bool",
                "Tuple[Optional[str], str]",
                "dict",
                "server.models.User",
                "\"User\"",
                "Optional[models.User]",
                "str"
            ],
            "arguments": {
                "category": [
                    "bool"
                ]
            }
        },
        "get_tip_upvotes": {
            "name": "get_tip_upvotes",
            "location": 65,
            "return": [
                "bool",
                "Tuple[Optional[str], str]",
                "dict",
                "server.models.User",
                "\"User\"",
                "Optional[models.User]",
                "str"
            ],
            "arguments": {
                "tips_id": [
                    "int"
                ]
            }
        },
        "get_tip_downvotes": {
            "name": "get_tip_downvotes",
            "location": 76,
            "return": [
                "bool",
                "Tuple[Optional[str], str]",
                "dict",
                "server.models.User",
                "\"User\"",
                "Optional[models.User]",
                "str"
            ],
            "arguments": {
                "tips_id": [
                    "int"
                ]
            }
        },
        "get_verified_tips": {
            "name": "get_verified_tips",
            "location": 91,
            "return": [
                "bool",
                "Tuple[Optional[str], str]",
                "dict",
                "server.models.User",
                "\"User\"",
                "Optional[models.User]",
                "str"
            ],
            "arguments": {
                "user_db": [
                    "None",
                    "Optional[zerver.models.UserProfile]",
                    "int",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "get_pending_tips": {
            "name": "get_pending_tips",
            "location": 107,
            "return": [
                "bool",
                "Tuple[Optional[str], str]",
                "dict",
                "server.models.User",
                "\"User\"",
                "Optional[models.User]",
                "str"
            ],
            "arguments": {
                "user_db": [
                    "None",
                    "Optional[zerver.models.UserProfile]",
                    "int",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "get_denied_tips": {
            "name": "get_denied_tips",
            "location": 123,
            "return": [
                "bool",
                "Tuple[Optional[str], str]",
                "dict",
                "server.models.User",
                "\"User\"",
                "Optional[models.User]",
                "str"
            ],
            "arguments": {
                "user_db": [
                    "None",
                    "Optional[zerver.models.UserProfile]",
                    "int",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "create_tip": {
            "name": "create_tip",
            "location": 140,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, Any]]",
                "Dict[str, int]"
            ],
            "arguments": {
                "db_user": [
                    "zerver.models.UserProfile"
                ]
            }
        },
        "edit_tip": {
            "name": "edit_tip",
            "location": 160,
            "return": [
                "Union[str, List[str]]",
                "Tuple[int, int, int]",
                "str",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "tips_id": [
                    "int"
                ]
            }
        },
        "update_status": {
            "name": "update_status",
            "location": 183,
            "return": [
                "bool"
            ],
            "arguments": {
                "id": [
                    "int"
                ]
            }
        },
        "change_vote": {
            "name": "change_vote",
            "location": 201,
            "return": [
                "Union[str, List[str]]",
                "Tuple[int, int, int]",
                "str",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "user_db": [
                    "str",
                    "int",
                    "Union[None, str]",
                    "None",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "delete_tips_by_id": {
            "name": "delete_tips_by_id",
            "location": 231,
            "return": [
                "str",
                "int",
                "bool",
                "User",
                "zerver.models.UserProfile"
            ],
            "arguments": {
                "tips_id": [
                    "str",
                    "int",
                    "parsing.specials.ObjectId",
                    "pymap.parsing.specials.ObjectId"
                ]
            }
        },
        "clear_tips": {
            "name": "clear_tips",
            "location": 247,
            "return": [
                "List[Dict[str, Any]]",
                "services.shop.order.models.order_evenOrderEvenData",
                "core_lib.core.models.Event",
                "datetime"
            ],
            "arguments": {}
        },
        "delete_tips_collection": {
            "name": "delete_tips_collection",
            "location": 263,
            "return": [
                "str",
                "typing.Type",
                "dict[, ]",
                "bool",
                "Union[int, float, complex]",
                "dict[str, set[]]",
                "IO",
                "Dict[str, Any]"
            ],
            "arguments": {}
        }
    },
    "safe-maps-master/backend/api/views/user.py": {
        "get_users": {
            "name": "get_users",
            "location": 11,
            "return": [
                "bool",
                "Tuple[Optional[str], str]",
                "\"User\"",
                "dict",
                "int",
                "server.models.User"
            ],
            "arguments": {}
        },
        "create_user": {
            "name": "create_user",
            "location": 22,
            "return": [
                "Dict[str, Any]",
                "int",
                "dep_check.models.GlobalDependencies",
                "Dict[str, float]",
                "Optional[Dict[str, Any]]",
                "Optional[Mapping[str, Any]]"
            ],
            "arguments": {}
        },
        "current_user_info": {
            "name": "current_user_info",
            "location": 42,
            "return": [
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "db_user": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "get_user": {
            "name": "get_user",
            "location": 49,
            "return": [
                "zerver.models.UserProfile",
                "bool",
                "http_quesuser.model.User",
                "str",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "id": [
                    "int",
                    "str",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "update_user": {
            "name": "update_user",
            "location": 59,
            "return": [
                "int",
                "Dict[str, float]",
                "dep_check.models.GlobalDependencies",
                "Dict[str, Any]",
                "Dict[str, str]",
                "Optional[Mapping[str, Any]]"
            ],
            "arguments": {
                "user": [
                    "dict[str, src.api.DividendInfo]",
                    "Dict[str, src.api.DividendInfo]",
                    "dict[str, src.api.SecurityInfo]",
                    "dict[str, src.api.HoldingInfo]",
                    "Dict[str, src.api.SecurityInfo]",
                    "zerver.models.UserProfile",
                    "Dict[str, src.api.HoldingInfo]",
                    "Dict[str, Any]"
                ]
            }
        },
        "delete_user": {
            "name": "delete_user",
            "location": 82,
            "return": [
                "Dict[str, Any]",
                "Dict[str, str]",
                "int"
            ],
            "arguments": {
                "id": [
                    "str",
                    "None",
                    "Optional[str]",
                    "typing.Iterable[int]",
                    "Optional[Iterable[int]]",
                    "Dict[bytes, int]"
                ]
            }
        },
        "update_verified": {
            "name": "update_verified",
            "location": 91,
            "return": [
                "Dict[str, Any]",
                "dict",
                "bool"
            ],
            "arguments": {
                "id": [
                    "int"
                ]
            }
        }
    },
    "safe-maps-master/backend/tests/business_test_data.py": {
        "get_businesses": {
            "name": "get_businesses",
            "location": 281,
            "return": [
                "List[Dict[(str, Union[(str, Dict[(str, str)], List[Dict[(str, List[Dict[(str, Union[(int, str)])]])]])])]]"
            ],
            "arguments": {}
        }
    },
    "safe-maps-master/backend/tests/bus_test_data.py": {
        "get_buses": {
            "name": "get_buses",
            "location": 60,
            "return": [
                "List[Dict[(str, Union[(float, str, Dict[(str, str)])])]]"
            ],
            "arguments": {}
        }
    },
    "safe-maps-master/backend/tests/conftest.py": {
        "client": {
            "name": "client",
            "location": 8,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {}
        }
    },
    "safe-maps-master/backend/tests/crime_test_data.py": {
        "get_crimes": {
            "name": "get_crimes",
            "location": 50,
            "return": [
                "List[Dict[(str, Union[(float, int, str)])]]"
            ],
            "arguments": {}
        }
    },
    "safe-maps-master/backend/tests/phone_test_data.py": {
        "get_phones": {
            "name": "get_phones",
            "location": 8,
            "return": [
                "List[Dict[(str, Union[(float, int)])]]"
            ],
            "arguments": {}
        },
        "get_bad_data": {
            "name": "get_bad_data",
            "location": 19,
            "return": [
                "List[Dict[(str, Union[(float, int)])]]"
            ],
            "arguments": {}
        }
    },
    "safe-maps-master/backend/tests/police_test_data.py": {
        "get_stations": {
            "name": "get_stations",
            "location": 17,
            "return": [
                "List[Dict[(str, Union[(float, str)])]]"
            ],
            "arguments": {}
        }
    },
    "safe-maps-master/backend/tests/streetlight_test_data.py": {
        "get_streetlights": {
            "name": "get_streetlights",
            "location": 30,
            "return": [
                "List[Dict[(str, Union[(float, str)])]]"
            ],
            "arguments": {}
        }
    },
    "safe-maps-master/backend/tests/test_basic.py": {
        "test_basic": {
            "name": "test_basic",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "safe-maps-master/backend/tests/test_buses.py": {
        "test_delete": {
            "name": "test_delete",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_update": {
            "name": "test_update",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "bool",
                    "neuromation.api.Client"
                ]
            }
        },
        "insert_test_data": {
            "name": "insert_test_data",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "test_get_basic": {
            "name": "test_get_basic",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "Dict[str, str]"
                ]
            }
        }
    },
    "safe-maps-master/backend/tests/test_business.py": {
        "test_delete": {
            "name": "test_delete",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_update": {
            "name": "test_update",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "bool",
                    "neuromation.api.Client"
                ]
            }
        },
        "insert_test_data": {
            "name": "insert_test_data",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "test_get_basic": {
            "name": "test_get_basic",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "Dict[str, str]"
                ]
            }
        },
        "test_get_weekday_afternoon": {
            "name": "test_get_weekday_afternoon",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str",
                    "tests.clienMDMClient"
                ]
            }
        },
        "test_get_weekday_morning": {
            "name": "test_get_weekday_morning",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "Dict[str, str]"
                ]
            }
        },
        "test_get_weekend_earlymorning": {
            "name": "test_get_weekend_earlymorning",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "Dict[str, str]"
                ]
            }
        },
        "test_get_weekday_earlymorning": {
            "name": "test_get_weekday_earlymorning",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "Dict[str, str]"
                ]
            }
        }
    },
    "safe-maps-master/backend/tests/test_crimes.py": {
        "test_delete": {
            "name": "test_delete",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_update": {
            "name": "test_update",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "insert_test_data": {
            "name": "insert_test_data",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "test_get_basic": {
            "name": "test_get_basic",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "Dict[str, str]"
                ]
            }
        }
    },
    "safe-maps-master/backend/tests/test_lights.py": {
        "test_delete": {
            "name": "test_delete",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_update": {
            "name": "test_update",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "insert_test_data": {
            "name": "insert_test_data",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "test_get_basic": {
            "name": "test_get_basic",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "Dict[str, str]"
                ]
            }
        }
    },
    "safe-maps-master/backend/tests/test_phone.py": {
        "test_delete": {
            "name": "test_delete",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_update": {
            "name": "test_update",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "insert_test_data": {
            "name": "insert_test_data",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "test_get_basic": {
            "name": "test_get_basic",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "Dict[str, str]"
                ]
            }
        }
    },
    "safe-maps-master/backend/tests/test_police.py": {
        "test_delete": {
            "name": "test_delete",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_update": {
            "name": "test_update",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "insert_test_data": {
            "name": "insert_test_data",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "test_get_basic": {
            "name": "test_get_basic",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "Dict[str, str]"
                ]
            }
        }
    },
    "safe-maps-master/backend/tests/__init__.py": {}
}
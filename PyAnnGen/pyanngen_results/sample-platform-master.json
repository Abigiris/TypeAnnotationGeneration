{
    "sample-platform-master/bootstrap_gunicorn.py": {},
    "sample-platform-master/config_parser.py": {
        "parse_config": {
            "name": "parse_config",
            "location": 8,
            "return": [
                "dict"
            ],
            "arguments": {
                "obj": [
                    "str"
                ]
            }
        }
    },
    "sample-platform-master/config_sample.py": {},
    "sample-platform-master/database.py": {
        "create_session": {
            "name": "create_session",
            "location": 31,
            "return": [
                "sqlalchemy.orm.scoping.scoped_session"
            ],
            "arguments": {
                "db_string": [
                    "str"
                ],
                "drop_tables": [
                    "bool"
                ]
            }
        },
        "EnumSymbol.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cls_": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "name": [
                    "str"
                ],
                "value": [
                    "str"
                ],
                "description": [
                    "str"
                ]
            }
        },
        "EnumSymbol.__reduce__": {
            "name": "__reduce__",
            "location": 73,
            "return": [
                "Tuple[(Any, Tuple[(Any, str)])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnumSymbol.__iter__": {
            "name": "__iter__",
            "location": 82,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnumSymbol.__repr__": {
            "name": "__repr__",
            "location": 91,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnumMeta.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "classname": [
                    "str"
                ],
                "bases": [
                    "Tuple[Type[object]]"
                ],
                "dict_": [
                    "Dict[(str, Union[(classmethod, staticmethod, str, Tuple[(str, str)])])]"
                ]
            }
        },
        "EnumMeta.__iter__": {
            "name": "__iter__",
            "location": 115,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeclEnum.from_string": {
            "name": "from_string",
            "location": 131,
            "return": [
                "EnumSymbol"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Sequence[MutableMapping]",
                    "typing.Sequence[typing.MutableMapping]",
                    "Set[str]",
                    "set[str]"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "DeclEnum.values": {
            "name": "values",
            "location": 148,
            "return": [
                "dict_keys"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "type",
                    "typing.Type"
                ]
            }
        },
        "DeclEnum.db_type": {
            "name": "db_type",
            "location": 158,
            "return": [
                "DeclEnumType"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Type[T]",
                    "typing.Type"
                ]
            }
        },
        "DeclEnumType.__init__": {
            "name": "__init__",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "enum": [
                    "str"
                ]
            }
        },
        "DeclEnumType._set_table": {
            "name": "_set_table",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "sqlalchemy.sql.schema.Column"
                ],
                "column": [
                    "sqlalchemy.sql.schema.Table"
                ]
            }
        },
        "DeclEnumType.copy": {
            "name": "copy",
            "location": 176,
            "return": [
                "DeclEnumType"
            ],
            "arguments": {
                "self": [
                    "_TDeclEnumType"
                ]
            }
        },
        "DeclEnumType.process_bind_param": {
            "name": "process_bind_param",
            "location": 180,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "EnumSymbol"
                ],
                "dialect": [
                    "int",
                    "complex",
                    "Tuple[str, int]",
                    "tuple[typing.Union[str,int]]",
                    "list",
                    "list[]"
                ]
            }
        },
        "DeclEnumType.process_result_value": {
            "name": "process_result_value",
            "location": 186,
            "return": [
                "EnumSymbol"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ],
                "dialect": [
                    "str",
                    "tuple[typing.Union[typing.Any,typing.Any]]",
                    "sqlalchemy.engine.interfaces.Dialect",
                    "None",
                    "Optional[Tuple[Any, Any]]",
                    "typing.Callable[, ]",
                    "Callable",
                    "dict[, ]",
                    "dict",
                    "Iterable[Any]"
                ]
            }
        }
    },
    "sample-platform-master/decorators.py": {
        "get_menu_entries": {
            "name": "get_menu_entries",
            "location": 13,
            "return": [
                "dict"
            ],
            "arguments": {
                "user": [
                    "Optional[mod_auth.models.User]"
                ],
                "title": [
                    "str"
                ],
                "icon": [
                    "str"
                ],
                "access": [
                    "Optional[list]"
                ],
                "route": [
                    "str"
                ],
                "all_entries": [
                    "Optional[List[Dict[(str, Union[(str, List[database.EnumSymbol])])]]]"
                ]
            }
        },
        "template_renderer": {
            "name": "template_renderer",
            "location": 71,
            "return": [
                "Callable"
            ],
            "arguments": {
                "template": [
                    "Optional[str]"
                ],
                "status": [
                    "int"
                ]
            }
        },
        "template_renderer.decorator": {
            "name": "decorator",
            "location": 80,
            "return": [
                "Sequence['cirq.Qid']",
                "bool",
                "List[magic.models.Card]"
            ],
            "arguments": {
                "f": [
                    "Iterable[str]",
                    "Callable",
                    "T"
                ]
            }
        },
        "template_renderer.decorator.decorated_function": {
            "name": "decorated_function",
            "location": 82,
            "return": [
                "tuple[]",
                "Optional[str]",
                "str",
                "dict"
            ],
            "arguments": {}
        }
    },
    "sample-platform-master/exceptions.py": {
        "QueuedSampleNotFoundException.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        },
        "SampleNotFoundException.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        },
        "TestNotFoundException.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        },
        "SecretKeyInstallationException.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MissingPathToCCExtractor.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CCExtractorEndedWithNonZero.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sample-platform-master/log_configuration.py": {
        "LogConfiguration.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "folder": [
                    "str"
                ],
                "filename": [
                    "str"
                ],
                "debug": [
                    "bool"
                ]
            }
        },
        "LogConfiguration.file_logger": {
            "name": "file_logger",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogConfiguration.console_logger": {
            "name": "console_logger",
            "location": 41,
            "return": [
                "int",
                "bytearray",
                "IO"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogConfiguration.create_logger": {
            "name": "create_logger",
            "location": 50,
            "return": [
                "logging.Logger"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        }
    },
    "sample-platform-master/mailer.py": {
        "Mailer.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "domain": [
                    "str"
                ],
                "api_key": [
                    "str"
                ],
                "sender_name": [
                    "str"
                ]
            }
        },
        "Mailer.send_simple_message": {
            "name": "send_simple_message",
            "location": 34,
            "return": [
                "requests.models.Response"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict"
                ]
            }
        }
    },
    "sample-platform-master/manage.py": {
        "UpdateResults.run": {
            "name": "run",
            "location": 23,
            "return": [
                "int",
                "str",
                "bool",
                "list"
            ],
            "arguments": {
                "self": [],
                "remaining": [
                    "str",
                    "int",
                    "command.Command"
                ]
            }
        }
    },
    "sample-platform-master/run.py": {
        "load_secret_keys": {
            "name": "load_secret_keys",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "application": [
                    "str"
                ],
                "secret_session": [
                    "str"
                ],
                "secret_csrf": [
                    "str"
                ]
            }
        },
        "sub_menu_open": {
            "name": "sub_menu_open",
            "location": 103,
            "return": [
                "bool"
            ],
            "arguments": {
                "menu_entries": [
                    "List[Dict[(str, str)]]"
                ],
                "active_route": [
                    "str"
                ]
            }
        },
        "date_time_format": {
            "name": "date_time_format",
            "location": 124,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "_datetime.datetime"
                ],
                "fmt": [
                    "str"
                ]
            }
        },
        "get_github_issue_link": {
            "name": "get_github_issue_link",
            "location": 138,
            "return": [
                "str"
            ],
            "arguments": {
                "issue_id": [
                    "int"
                ]
            }
        },
        "filename": {
            "name": "filename",
            "location": 151,
            "return": [
                "str"
            ],
            "arguments": {
                "filepath": [
                    "str"
                ]
            }
        },
        "not_found": {
            "name": "not_found",
            "location": 182,
            "return": [
                "None",
                "bytes",
                "raiden.utils.Signature",
                "utils.Encoded",
                "raiden.utils.Optional[raiden.utils.Signature]",
                "int"
            ],
            "arguments": {
                "error": [
                    "Exception",
                    "str",
                    "werkzeug.exceptions.NotFound",
                    "list[str]",
                    "tuple[]",
                    "List[str]",
                    "tuple"
                ]
            }
        },
        "internal_error": {
            "name": "internal_error",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "error": [
                    "Exception",
                    "str",
                    "werkzeug.exceptions.InternalServerError",
                    "BaseException",
                    "T"
                ]
            }
        },
        "forbidden": {
            "name": "forbidden",
            "location": 199,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "error": [
                    "bool",
                    "werkzeug.exceptions.Forbidden",
                    "dict[, ]",
                    "list[]",
                    "None",
                    "werkzeug.exceptions.Unauthorized",
                    "dict",
                    "werkzeug.exceptions.InternalServerError",
                    "Optional[list]"
                ]
            }
        },
        "before_request": {
            "name": "before_request",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_github_config": {
            "name": "get_github_config",
            "location": 224,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "config": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "teardown": {
            "name": "teardown",
            "location": 244,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "exception": [
                    "typing.Type",
                    "type",
                    "Exception",
                    "bool",
                    "Optional[Exception]",
                    "None",
                    "Type[BaseException]"
                ]
            }
        },
        "RegexConverter.__init__": {
            "name": "__init__",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url_map": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        }
    },
    "sample-platform-master/utility.py": {
        "serve_file_download": {
            "name": "serve_file_download",
            "location": 11,
            "return": [
                "dict[str, str]",
                "dict",
                "List[Tuple[str, str, int]]",
                "Dict[str, str]",
                "int",
                "List[Dict[str, Any]]",
                "List[str]"
            ],
            "arguments": {
                "file_name": [
                    "str",
                    "Optional[path.Path]",
                    "None",
                    "Callable[[], str]",
                    "typing.Callable[[], str]"
                ],
                "file_folder": [
                    "str",
                    "int"
                ],
                "x_accel_folder": [
                    "str",
                    "bool",
                    "int"
                ],
                "file_sub_folder": [
                    "typing.Text",
                    "bool",
                    "str",
                    "Optional[str]",
                    "TextIO"
                ],
                "content_type": [
                    "typing.Text",
                    "str",
                    "bool",
                    "Callable[[str], Any]",
                    "Optional[str]"
                ]
            }
        }
    },
    "sample-platform-master/install/init_db.py": {
        "run": {
            "name": "run",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sample-platform-master/install/sample_db.py": {
        "run": {
            "name": "run",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sample-platform-master/install/__init__.py": {},
    "sample-platform-master/migrations/env.py": {
        "run_migrations_offline": {
            "name": "run_migrations_offline",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_migrations_online": {
            "name": "run_migrations_online",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_migrations_online.process_revision_directives": {
            "name": "process_revision_directives",
            "location": 68,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "context": [
                    "bool",
                    "List[str]",
                    "int"
                ],
                "revision": [
                    "bool",
                    "List[str]",
                    "int"
                ],
                "directives": [
                    "Callable[[Mapping], T]",
                    "list",
                    "List[List[str]]",
                    "int",
                    "str",
                    "tuple"
                ]
            }
        }
    },
    "sample-platform-master/migrations/versions/6b1274f61edd_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sample-platform-master/migrations/versions/6b335fbd58ab_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sample-platform-master/mod_auth/controllers.py": {
        "before_app_request": {
            "name": "before_app_request",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "login_required": {
            "name": "login_required",
            "location": 55,
            "return": [
                "Callable"
            ],
            "arguments": {
                "f": [
                    "Callable"
                ]
            }
        },
        "check_access_rights": {
            "name": "check_access_rights",
            "location": 69,
            "return": [
                "Callable"
            ],
            "arguments": {
                "roles": [
                    "List[Tuple[(str, str)]]"
                ],
                "parent_route": [
                    "None"
                ]
            }
        },
        "send_reset_email": {
            "name": "send_reset_email",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "usr": [
                    "str",
                    "django.db.models.Model",
                    "dict[, ]",
                    "typing.Type",
                    "cmk.base.config.HostConfig",
                    "dict",
                    "Union[object, type]",
                    "jumeaux.models.Res2DictAddOnPayload"
                ]
            }
        },
        "github_token_validity": {
            "name": "github_token_validity",
            "location": 126,
            "return": [
                "bool"
            ],
            "arguments": {
                "token": [
                    "str"
                ]
            }
        },
        "github_redirect": {
            "name": "github_redirect",
            "location": 147,
            "return": [
                "None",
                "Optional[int]",
                "typing.Text",
                "Optional[bool]",
                "int",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "fetch_username_from_token": {
            "name": "fetch_username_from_token",
            "location": 169,
            "return": [
                "None",
                "Optional[bool]",
                "Optional[float]",
                "Optional[int]",
                "bool",
                "dict",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "github_callback": {
            "name": "github_callback",
            "location": 194,
            "return": [
                "tuple[typing.Union[typing.Text,int]]",
                "str",
                "int",
                "Dict[str, str]",
                "jumeaux.models.Res2ResAddOnPayload"
            ],
            "arguments": {}
        },
        "login": {
            "name": "login",
            "location": 226,
            "return": [
                "dict[typing.Text, LoginForm]",
                "int",
                "str",
                "dict"
            ],
            "arguments": {}
        },
        "reset": {
            "name": "reset",
            "location": 255,
            "return": [
                "dict[typing.Text, ResetForm]",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        },
        "complete_reset": {
            "name": "complete_reset",
            "location": 277,
            "return": [
                "dict[typing.Text, typing.Union[CompleteResetForm,int,None,str,float]]",
                "str",
                "IO",
                "bool"
            ],
            "arguments": {
                "uid": [
                    "int",
                    "str",
                    "Optional[int]",
                    "None"
                ],
                "expires": [
                    "int",
                    "float",
                    "dict",
                    "Optional[float]",
                    "bytes"
                ],
                "mac": [
                    "bool",
                    "float"
                ]
            }
        },
        "signup": {
            "name": "signup",
            "location": 329,
            "return": [
                "dict[typing.Text, SignupForm]",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        },
        "complete_signup": {
            "name": "complete_signup",
            "location": 371,
            "return": [
                "dict[typing.Text, typing.Union[CompleteSignupForm,str,None,int,float]]",
                "Dict[str, Any]",
                "str",
                "Optional[bool]",
                "asgard.models.user.User",
                "int",
                "Response",
                "aiolambda.Maybe[auth.user.User]"
            ],
            "arguments": {
                "email": [
                    "str",
                    "recidiviz.persistence.database.database_entity.DatabaseEntity",
                    "None",
                    "Optional[str]",
                    "django.db.models.Model"
                ],
                "expires": [
                    "int",
                    "List[Dict[str, str]]"
                ],
                "mac": [
                    "float"
                ]
            }
        },
        "generate_hmac_hash": {
            "name": "generate_hmac_hash",
            "location": 430,
            "return": [
                "str"
            ],
            "arguments": {
                "key": [
                    "str"
                ],
                "data": [
                    "str"
                ]
            }
        },
        "logout": {
            "name": "logout",
            "location": 448,
            "return": [
                "str",
                "Dict[str, str]",
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "manage": {
            "name": "manage",
            "location": 463,
            "return": [
                "dict[typing.Text, typing.Union[AccountForm,list[str],str]]",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "users": {
            "name": "users",
            "location": 510,
            "return": [
                "dict[typing.Text, ]",
                "zerver.models.Realm",
                "str",
                "auth.user.User",
                "zerver.models.UserProfile"
            ],
            "arguments": {}
        },
        "user": {
            "name": "user",
            "location": 525,
            "return": [
                "dict[typing.Text, typing.Union[str,None,int,list[str],list[int],list[dict[str, typing.Any]],list[]]]",
                "int",
                "str",
                "Callable"
            ],
            "arguments": {
                "uid": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "reset_user": {
            "name": "reset_user",
            "location": 555,
            "return": [
                "dict[typing.Text, typing.Union[str,int,list[str],None,float]]",
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "uid": [
                    "str",
                    "None",
                    "dict[, ]",
                    "Optional[str]",
                    "recidiviz.persistence.database.database_entity.DatabaseEntity",
                    "dict",
                    "config.CreateOptions",
                    "zerver.models.Stream"
                ]
            }
        },
        "role": {
            "name": "role",
            "location": 584,
            "return": [
                "dict[typing.Text, typing.Union[RoleChangeForm,int,list[str],str]]",
                "Dict[str, Any]",
                "Dict[str, str]",
                "int",
                "jumeaux.models.Res2ResAddOnPayload",
                "asgard.models.user.User",
                "str"
            ],
            "arguments": {
                "uid": [
                    "str",
                    "bytes",
                    "list[str]",
                    "Optional[List[str]]",
                    "None",
                    "dict",
                    "dict[, ]",
                    "models.LetterRequest",
                    "homeassistancomponents.media_source.models.MediaSourceItem"
                ]
            }
        },
        "deactivate": {
            "name": "deactivate",
            "location": 613,
            "return": [
                "dict[typing.Text, typing.Union[DeactivationForm,int,None,str,dict[str, str],dict[, ],tuple[typing.Union[typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any]],list[]]]",
                "bool",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "uid": [
                    "str",
                    "float",
                    "Optional[int]",
                    "int",
                    "None",
                    "models.LetterRequest"
                ]
            }
        },
        "login_required.decorated_function": {
            "name": "decorated_function",
            "location": 59,
            "return": [],
            "arguments": {}
        },
        "check_access_rights.access_decorator": {
            "name": "access_decorator",
            "location": 82,
            "return": [
                "Sequence['cirq.Qid']",
                "bool",
                "List[magic.models.Card]",
                "zerver.models.Realm"
            ],
            "arguments": {
                "f": [
                    "Callable",
                    "Callable[[], Any]",
                    "List[str]",
                    "list",
                    "str"
                ]
            }
        },
        "check_access_rights.access_decorator.decorated_function": {
            "name": "decorated_function",
            "location": 84,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "sample-platform-master/mod_auth/forms.py": {
        "unique_username": {
            "name": "unique_username",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "form": [
                    "bool",
                    "str",
                    "int"
                ],
                "field": [
                    "str",
                    "app.models.farm.Farm",
                    "bob_emploi.frontend.api.user_pb2.User",
                    "models.UserAuth"
                ]
            }
        },
        "valid_password": {
            "name": "valid_password",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "form": [
                    "CompleteSignupForm"
                ],
                "field": [
                    "str",
                    "arxiv.users.domain.User"
                ]
            }
        },
        "email_not_in_use": {
            "name": "email_not_in_use",
            "location": 51,
            "return": [
                "Callable"
            ],
            "arguments": {
                "has_user_field": [
                    "bool"
                ]
            }
        },
        "email_not_in_use._email_not_in_use": {
            "name": "_email_not_in_use",
            "location": 59,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "form": [
                    "Callable"
                ],
                "field": [
                    "app.models.user.User",
                    "daylighdb.models.User",
                    "zerver.models.UserProfile",
                    "fal.models.Season",
                    "zerver.models.Stream"
                ]
            }
        },
        "CompleteSignupForm.validate_password_repeat": {
            "name": "validate_password_repeat",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "form": [
                    "CompleteSignupForm"
                ],
                "field": [
                    "str",
                    "None",
                    "Optional[str]",
                    "typing.Callable[, ]",
                    "Callable",
                    "typing.Type",
                    "type",
                    "excars.models.user.User"
                ]
            }
        },
        "AccountForm.__init__": {
            "name": "__init__",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "formdata": [
                    "str",
                    "bool",
                    "None",
                    "List[str]",
                    "list[str]"
                ],
                "obj": [
                    "None",
                    "str",
                    "Union[str, Dict[str, str]]",
                    "bool",
                    "dict[str, str]",
                    "jobs.models.Job",
                    "typing.Type",
                    "type",
                    "Optional[str]"
                ],
                "prefix": [
                    "typing.Text",
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "AccountForm.validate_current_password": {
            "name": "validate_current_password",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "form": [],
                "field": [
                    "str",
                    "Exception",
                    "type",
                    "typing.Type",
                    "Optional[Any]",
                    "typing.Any",
                    "audiopyle.lib.models.file_meta.CompressedAudioFileMeta",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "AccountForm.validate_new_password": {
            "name": "validate_new_password",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "form": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "OrderedDict",
                    "typing.OrderedDict",
                    "Type[object]",
                    "typing.Type",
                    "Match",
                    "typing.Match"
                ],
                "field": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "OrderedDict",
                    "typing.OrderedDict",
                    "Type[object]",
                    "typing.Type",
                    "Match",
                    "typing.Match"
                ]
            }
        },
        "AccountForm.validate_new_password_repeat": {
            "name": "validate_new_password_repeat",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "form": [
                    "str"
                ],
                "field": [
                    "str",
                    "list",
                    "list[]"
                ]
            }
        },
        "CompleteResetForm.validate_password_repeat": {
            "name": "validate_password_repeat",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "form": [
                    "str",
                    "None",
                    "Optional[str]",
                    "typing.Callable[, ]",
                    "Callable",
                    "typing.Type",
                    "type",
                    "excars.models.user.User"
                ],
                "field": [
                    "str",
                    "None",
                    "Optional[str]",
                    "typing.Callable[, ]",
                    "Callable",
                    "typing.Type",
                    "type",
                    "excars.models.user.User"
                ]
            }
        }
    },
    "sample-platform-master/mod_auth/models.py": {
        "User.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "role": [
                    "str",
                    "bool",
                    "Optional[int]",
                    "int",
                    "Optional[str]"
                ],
                "email": [
                    "str",
                    "None",
                    "bool",
                    "Optional[int]",
                    "int",
                    "Optional[str]"
                ],
                "password": [
                    "typing.Text",
                    "str",
                    "bool",
                    "Optional[int]",
                    "int",
                    "Optional[str]"
                ],
                "github_token": [
                    "str",
                    "None",
                    "bool",
                    "Optional[int]",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "User.__repr__": {
            "name": "__repr__",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.generate_hash": {
            "name": "generate_hash",
            "location": 70,
            "return": [
                "str"
            ],
            "arguments": {
                "password": [
                    "str"
                ]
            }
        },
        "User.create_random_password": {
            "name": "create_random_password",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "length": [
                    "int"
                ]
            }
        },
        "User.is_password_valid": {
            "name": "is_password_valid",
            "location": 97,
            "return": [
                "str",
                "dict",
                "int",
                "Callable",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str",
                    "medtagger.database.models.User"
                ]
            }
        },
        "User.update_password": {
            "name": "update_password",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_password": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "User.is_admin": {
            "name": "is_admin",
            "location": 118,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.has_role": {
            "name": "has_role",
            "location": 127,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[Iterable[str]]",
                    "typing.Iterable[str]",
                    "None"
                ]
            }
        }
    },
    "sample-platform-master/mod_auth/__init__.py": {},
    "sample-platform-master/mod_ci/controllers.py": {
        "before_app_request": {
            "name": "before_app_request",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "start_platforms": {
            "name": "start_platforms",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "db": [
                    "list[P]",
                    "List[recidiviz.persistence.database.schema.state.schema.StatePerson]",
                    "sqlalchemy.engine.Engine"
                ],
                "repository": [
                    "list[P]",
                    "List[recidiviz.persistence.database.schema.state.schema.StatePerson]",
                    "sqlalchemy.engine.Engine"
                ],
                "delay": [
                    "List[recidiviz.persistence.database.schema.state.schema.StatePerson]",
                    "None",
                    "sqlalchemy.engine.Engine",
                    "list[P]"
                ],
                "platform": [
                    "Optional[int]",
                    "None",
                    "List[recidiviz.persistence.database.database_entity.DatabaseEntity]",
                    "int",
                    "List[int]",
                    "list[D]",
                    "list[int]"
                ]
            }
        },
        "kvm_processor": {
            "name": "kvm_processor",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "str",
                    "Type"
                ],
                "db": [
                    "int",
                    "str",
                    "Union['KspNativeControl', int]",
                    "tuple[typing.Union[int,str]]",
                    "Tuple[int, str]"
                ],
                "kvm_name": [
                    "str",
                    "bool",
                    "django.db.models.Model"
                ],
                "platform": [
                    "str",
                    "int",
                    "dict",
                    "dict[, ]"
                ],
                "repository": [
                    "str",
                    "int",
                    "dict",
                    "dict[, ]"
                ],
                "delay": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[Dict[str, dict]]",
                    "dict[str, dict[, ]]"
                ]
            }
        },
        "save_xml_to_file": {
            "name": "save_xml_to_file",
            "location": 424,
            "return": [
                "None"
            ],
            "arguments": {
                "xml_node": [
                    "str"
                ],
                "folder_name": [
                    "str"
                ],
                "file_name": [
                    "str"
                ]
            }
        },
        "add_test_entry": {
            "name": "add_test_entry",
            "location": 442,
            "return": [
                "None"
            ],
            "arguments": {
                "db": [
                    "sqlalchemy.orm.Session",
                    "Tuple[int]",
                    "sqlalchemy.orm.session.Session",
                    "Optional[\"libkol.Item\"]",
                    "grouper.models.base.session.Session"
                ],
                "gh_commit": [
                    "bool",
                    "int"
                ],
                "commit": [
                    "str",
                    "alerta.database.base.Query",
                    "passzero.models.entries.Entry",
                    "app.models.lawn.Lawn",
                    "amundsen_application.models.data_issue.DataIssue"
                ],
                "test_type": [
                    "bool",
                    "str",
                    "server.models.User",
                    "models.User",
                    "config.Config"
                ],
                "branch": [
                    "typing.Text",
                    "str",
                    "alerta.database.base.Query",
                    "passzero.models.entries.Entry",
                    "app.models.lawn.Lawn",
                    "amundsen_application.models.data_issue.DataIssue"
                ],
                "pr_nr": [
                    "int",
                    "str",
                    "alerta.database.base.Query",
                    "passzero.models.entries.Entry",
                    "app.models.lawn.Lawn",
                    "amundsen_application.models.data_issue.DataIssue"
                ]
            }
        },
        "schedule_test": {
            "name": "schedule_test",
            "location": 477,
            "return": [
                "None"
            ],
            "arguments": {
                "gh_commit": [
                    "float",
                    "Optional[float]",
                    "int",
                    "None",
                    "raiden.utils.BlockIdentifier",
                    "typing.Sequence[typing.Any]",
                    "Optional[Sequence[Any]]",
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "commit": [
                    "bool",
                    "Literal"
                ],
                "test_type": [
                    "typing.Type",
                    "Type[object]",
                    "list[str]",
                    "Type",
                    "List[str]"
                ],
                "branch": [
                    "typing.Text",
                    "bool",
                    "Literal"
                ],
                "pr_nr": [
                    "int",
                    "bool",
                    "Literal"
                ]
            }
        },
        "deschedule_test": {
            "name": "deschedule_test",
            "location": 512,
            "return": [
                "None"
            ],
            "arguments": {
                "gh_commit": [
                    "dict[, ]",
                    "Optional[dict]",
                    "None",
                    "list[P]",
                    "raiden.storage.utils.TimestampedEvent",
                    "List[recidiviz.persistence.database.schema.state.schema.StatePerson]",
                    "app.models.user.User",
                    "sqlalchemy.orm.session.Session"
                ],
                "platform": [
                    "str",
                    "bool",
                    "bytes"
                ],
                "message": [
                    "typing.Text",
                    "str",
                    "bool",
                    "bytes"
                ],
                "state": [
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "queue_test": {
            "name": "queue_test",
            "location": 544,
            "return": [
                "None"
            ],
            "arguments": {
                "gh_commit": [
                    "int",
                    "Optional[float]",
                    "float",
                    "Dict[str, float]",
                    "None",
                    "Dict[str, List[str]]",
                    "dict[str, float]",
                    "Optional[Type[Exception]]",
                    "dict[str, list[str]]",
                    "Optional[str]",
                    "typing.Type",
                    "Optional[int]",
                    "str"
                ],
                "commit": [
                    "bool",
                    "zerver.models.Realm",
                    "dict[, ]",
                    "dict",
                    "recidiviz.persistence.database.database_entity.DatabaseEntity"
                ],
                "test_type": [
                    "str",
                    "bool",
                    "dict[, ]",
                    "recidiviz.persistence.database.database_entity.DatabaseEntity",
                    "dict"
                ],
                "platform": [
                    "bool",
                    "zerver.models.Realm",
                    "dict[, ]",
                    "dict",
                    "recidiviz.persistence.database.database_entity.DatabaseEntity"
                ],
                "branch": [
                    "typing.Text",
                    "zerver.models.Realm",
                    "bool",
                    "dict",
                    "recidiviz.persistence.database.database_entity.DatabaseEntity"
                ],
                "pr_nr": [
                    "int",
                    "zerver.models.Realm",
                    "bool",
                    "dict",
                    "recidiviz.persistence.database.database_entity.DatabaseEntity"
                ]
            }
        },
        "inform_mailing_list": {
            "name": "inform_mailing_list",
            "location": 595,
            "return": [
                "None"
            ],
            "arguments": {
                "mailer": [
                    "str",
                    "werkzeug.datastructures.MultiDict",
                    "models.Payment",
                    "django.db.models.QuerySet",
                    "int"
                ],
                "id": [
                    "str",
                    "int",
                    "Callable[[str], int]",
                    "typing.Callable[str, int]",
                    "Optional[int]",
                    "Optional[float]",
                    "None",
                    "float"
                ],
                "title": [
                    "str",
                    "int",
                    "werkzeug.datastructures.MultiDict",
                    "models.Payment",
                    "django.db.models.QuerySet"
                ],
                "author": [
                    "str",
                    "int",
                    "werkzeug.datastructures.MultiDict",
                    "models.Payment",
                    "django.db.models.QuerySet"
                ],
                "body": [
                    "str",
                    "int",
                    "werkzeug.datastructures.MultiDict",
                    "models.Payment",
                    "django.db.models.QuerySet"
                ]
            }
        },
        "get_html_issue_body": {
            "name": "get_html_issue_body",
            "location": 622,
            "return": [
                "int",
                "Iterable[models.Entry]",
                "str"
            ],
            "arguments": {
                "title": [
                    "str",
                    "None",
                    "Optional[str]",
                    "dict[str, dict[str, typing.Any]]",
                    "Dict[str, Dict[str, Any]]",
                    "dict[str, str]",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, str]"
                ],
                "author": [
                    "str",
                    "None",
                    "Optional[str]",
                    "dict[str, dict[str, typing.Any]]",
                    "Dict[str, Dict[str, Any]]",
                    "dict[str, str]",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, str]"
                ],
                "body": [
                    "str",
                    "None",
                    "int",
                    "Union[str, datetime.datetime, None]",
                    "pringles.models.Model",
                    "models.UserAuth",
                    "Optional[int]"
                ],
                "issue_number": [
                    "bool",
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "url": [
                    "str",
                    "None",
                    "Optional[str]",
                    "dict[str, dict[str, typing.Any]]",
                    "Dict[str, Dict[str, Any]]",
                    "dict[str, str]",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, str]"
                ]
            }
        },
        "start_ci": {
            "name": "start_ci",
            "location": 649,
            "return": [
                "typing.Text",
                "cmk.utils.type_defs.UserId",
                "models.Membership",
                "django.db.models.QuerySet",
                "raiden.utils.WithdrawAmount"
            ],
            "arguments": {}
        },
        "update_build_badge": {
            "name": "update_build_badge",
            "location": 907,
            "return": [
                "None"
            ],
            "arguments": {
                "status": [
                    "str",
                    "List[str]"
                ],
                "test": [
                    "str"
                ]
            }
        },
        "progress_reporter": {
            "name": "progress_reporter",
            "location": 927,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "test_id": [
                    "str",
                    "dict[str, str]",
                    "Optional[Dict[str, str]]",
                    "None",
                    "sqlalchemy.orm.session.Session",
                    "Dict[str, Any]"
                ],
                "token": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "list[C]",
                    "recidiviz.persistence.database.session.Session",
                    "Optional[bool]",
                    "List[\"InlineContent\"]"
                ]
            }
        },
        "progress_type_request": {
            "name": "progress_type_request",
            "location": 975,
            "return": [
                "bool"
            ],
            "arguments": {
                "log": [
                    "str",
                    "Optional[Exception]",
                    "int"
                ],
                "test": [
                    "str",
                    "bytes"
                ],
                "test_id": [
                    "int",
                    "sqlalchemy.orm.Session"
                ],
                "request": [
                    "dict",
                    "dict[, ]",
                    "Optional[str]",
                    "str",
                    "metaswitch_tinder.database.Request",
                    "None",
                    "Collection[Any]",
                    "typing.Collection",
                    "Union[str, bytes, Any]",
                    "bytes",
                    "typing.Any"
                ]
            }
        },
        "equality_type_request": {
            "name": "equality_type_request",
            "location": 1172,
            "return": [
                "None"
            ],
            "arguments": {
                "log": [
                    "str",
                    "int",
                    "Callable",
                    "Optional[int]",
                    "dict",
                    "Optional[Exception]"
                ],
                "test_id": [
                    "str",
                    "int",
                    "Callable",
                    "typing.Callable[, ]",
                    "Optional[int]",
                    "None",
                    "dict",
                    "dict[, ]",
                    "Optional[Exception]",
                    "Exception"
                ],
                "test": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Callable[[], datetime.datetime]",
                    "typing.Callable[[], datetime.datetime]",
                    "Optional[Dict[str, str]]",
                    "dict[str, str]",
                    "sqlalchemy.orm.session.Session",
                    "zerver.models.UserProfile"
                ],
                "request": [
                    "str",
                    "zerver.models.UserProfile",
                    "typing.Callable[, ]",
                    "dict[, ]",
                    "Callable",
                    "None",
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "upload_log_type_request": {
            "name": "upload_log_type_request",
            "location": 1197,
            "return": [
                "bool"
            ],
            "arguments": {
                "log": [
                    "str",
                    "int",
                    "float"
                ],
                "test_id": [
                    "int",
                    "str"
                ],
                "repo_folder": [
                    "str",
                    "Exception"
                ],
                "test": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "request": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "upload_type_request": {
            "name": "upload_type_request",
            "location": 1232,
            "return": [
                "bool"
            ],
            "arguments": {
                "log": [
                    "int",
                    "Callable",
                    "Optional[int]",
                    "Optional[Sequence[Any]]",
                    "bool"
                ],
                "test_id": [
                    "dict[, ]",
                    "int",
                    "dict",
                    "typing.Callable[, ]",
                    "Callable",
                    "None",
                    "Optional[int]",
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "repo_folder": [
                    "str",
                    "Exception",
                    "bool",
                    "Optional[List[int]]",
                    "list[int]",
                    "None"
                ],
                "test": [
                    "str",
                    "list[str]",
                    "List[str]",
                    "typing.Callable[, ]",
                    "int",
                    "set[int]",
                    "Callable",
                    "Set[int]",
                    "zerver.models.Realm",
                    "raiden.utils.ChainID"
                ],
                "request": [
                    "bool",
                    "typing.Callable[, ]",
                    "Callable",
                    "frozenset",
                    "FrozenSet[bytes]",
                    "flask.Request"
                ]
            }
        },
        "finish_type_request": {
            "name": "finish_type_request",
            "location": 1280,
            "return": [
                "None"
            ],
            "arguments": {
                "log": [
                    "str",
                    "Optional[Exception]",
                    "Callable",
                    "Optional[int]",
                    "int",
                    "List[dict]"
                ],
                "test_id": [
                    "str",
                    "int",
                    "typing.Callable[, ]",
                    "Callable",
                    "Optional[int]",
                    "None",
                    "dict[, ]",
                    "dict",
                    "Optional[str]"
                ],
                "test": [
                    "dict[str, typing.Any]",
                    "Optional[Dict[str, Any]]",
                    "None",
                    "dict[, ]",
                    "server.models.bike.Bike",
                    "dict",
                    "Dict[str, Any]",
                    "raiden.utils.BlockIdentifier"
                ],
                "request": [
                    "str",
                    "dict[str, typing.Any]",
                    "int",
                    "zerver.models.UserProfile",
                    "metaswitch_tinder.database.User",
                    "tildes.models.user.User",
                    "Dict[str, Any]"
                ]
            }
        },
        "set_avg_time": {
            "name": "set_avg_time",
            "location": 1306,
            "return": [
                "None"
            ],
            "arguments": {
                "platform": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "process_type": [
                    "str"
                ],
                "time_taken": [
                    "int"
                ]
            }
        },
        "get_info_for_pr_comment": {
            "name": "get_info_for_pr_comment",
            "location": 1340,
            "return": [
                "mod_ci.models.PrCommentInfo"
            ],
            "arguments": {
                "test_id": [
                    "int"
                ]
            }
        },
        "comment_pr": {
            "name": "comment_pr",
            "location": 1373,
            "return": [
                "None"
            ],
            "arguments": {
                "test_id": [
                    "bool",
                    "aw_core.models.Event"
                ],
                "state": [
                    "bool",
                    "str"
                ],
                "pr_nr": [
                    "str",
                    "int",
                    "cmk.utils.type_defs.UserId"
                ],
                "platform": [
                    "bool",
                    "str"
                ]
            }
        },
        "show_maintenance": {
            "name": "show_maintenance",
            "location": 1420,
            "return": [
                "dict[typing.Text, ]",
                "bool",
                "int",
                "List[str]"
            ],
            "arguments": {}
        },
        "blocked_users": {
            "name": "blocked_users",
            "location": 1436,
            "return": [
                "dict[typing.Text, typing.Union[AddUsersToBlacklist,dict[str, str],set[],str,dict[str, dict[str, typing.Any]],dict[list[], typing.Text]]]",
                "bool",
                "dict",
                "django.db.models.QuerySet"
            ],
            "arguments": {}
        },
        "blocked_users_remove": {
            "name": "blocked_users_remove",
            "location": 1512,
            "return": [
                "dict[typing.Text, typing.Union[int,list[int],None,DeleteUserForm]]",
                "bool",
                "dict",
                "django.db.models.QuerySet"
            ],
            "arguments": {
                "blocked_user_id": [
                    "int",
                    "List[int]",
                    "list[int]",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "toggle_maintenance": {
            "name": "toggle_maintenance",
            "location": 1539,
            "return": [
                "int",
                "salon.models.Stylist",
                "List[str]"
            ],
            "arguments": {
                "platform": [
                    "str",
                    "int",
                    "None",
                    "float",
                    "Optional[str]",
                    "bool",
                    "core.models.User"
                ],
                "status": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "in_maintenance_mode": {
            "name": "in_maintenance_mode",
            "location": 1571,
            "return": [
                "typing.Text",
                "dict",
                "str",
                "Dict[str, int]",
                "sqlalchemy.MetaData",
                "Dict[str, Tuple[Any, Any]]"
            ],
            "arguments": {
                "platform": [
                    "str",
                    "Union[server.models.User, int]",
                    "int"
                ]
            }
        },
        "is_main_repo": {
            "name": "is_main_repo",
            "location": 1595,
            "return": [
                "bool"
            ],
            "arguments": {
                "repo_url": [
                    "str",
                    "Callable",
                    "Optional[cmk.utils.type_defs.SectionName]",
                    "cmk.utils.type_defs.CheckPluginName.Str"
                ]
            }
        },
        "add_customized_regression_tests": {
            "name": "add_customized_regression_tests",
            "location": 1610,
            "return": [
                "None"
            ],
            "arguments": {
                "test_id": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "sample-platform-master/mod_ci/cron.py": {
        "cron": {
            "name": "cron",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "testing": [
                    "bool",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "sample-platform-master/mod_ci/forms.py": {},
    "sample-platform-master/mod_ci/models.py": {
        "BlockedUsers.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int",
                    "str",
                    "None",
                    "transfer.models.ListID",
                    "Optional[str]"
                ],
                "comment": [
                    "int",
                    "str",
                    "float",
                    "None",
                    "Optional[datetime.datetime]",
                    "esm.models.LastOperation"
                ]
            }
        },
        "BlockedUsers.__repr__": {
            "name": "__repr__",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Kvm.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bytes",
                    "Optional[object]",
                    "None"
                ],
                "test_id": [
                    "str",
                    "Optional[Dict]",
                    "dict[, ]",
                    "Optional[str]",
                    "None"
                ],
                "timestamp": [
                    "None",
                    "Optional[int]",
                    "int",
                    "datetime.datetime",
                    "datetime.date",
                    "datetime.time"
                ]
            }
        },
        "Kvm.__repr__": {
            "name": "__repr__",
            "location": 73,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MaintenanceMode.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "platform": [
                    "int",
                    "float",
                    "List[str]",
                    "list[str]",
                    "Union[int, Tuple[int, int]]",
                    "tuple[typing.Union[int,int]]"
                ],
                "mode": [
                    "int",
                    "float",
                    "List[str]",
                    "list[str]",
                    "Union[int, Tuple[int, int]]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "MaintenanceMode.__repr__": {
            "name": "__repr__",
            "location": 105,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sample-platform-master/mod_ci/__init__.py": {},
    "sample-platform-master/mod_customized/controllers.py": {
        "before_app_request": {
            "name": "before_app_request",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "index": {
            "name": "index",
            "location": 40,
            "return": [
                "dict[typing.Text, typing.Union[TestForkForm,bool,list[],dict[str, typing.Any],None,str,dict[str, None]]]",
                "int",
                "asgard.models.user.User",
                "Dict[str, Any]",
                "Dict[str, str]",
                "str"
            ],
            "arguments": {}
        },
        "add_test_to_kvm": {
            "name": "add_test_to_kvm",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "username": [
                    "str",
                    "bool",
                    "teams.models.Team"
                ],
                "commit_hash": [
                    "bool",
                    "str",
                    "None",
                    "models.User",
                    "abilian.core.models.subjects.User",
                    "Optional[str]",
                    "server.models.User"
                ],
                "platforms": [
                    "Callable[[], Any]",
                    "bool",
                    "app.db_models.user.User",
                    "app.models.user.User.InDB",
                    "core.models.Groups"
                ],
                "regression_tests": [
                    "Callable[[], Any]",
                    "bool",
                    "app.db_models.user.User",
                    "app.models.user.User.InDB",
                    "core.models.Groups"
                ]
            }
        }
    },
    "sample-platform-master/mod_customized/forms.py": {},
    "sample-platform-master/mod_customized/models.py": {
        "TestFork.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int",
                    "str"
                ],
                "test_id": [
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "CustomizedTest.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test_id": [
                    "str",
                    "int"
                ],
                "regression_id": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        }
    },
    "sample-platform-master/mod_customized/__init__.py": {},
    "sample-platform-master/mod_deploy/controllers.py": {
        "cache_has_expired": {
            "name": "cache_has_expired",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "get_cached_web_hook_blocks": {
            "name": "get_cached_web_hook_blocks",
            "location": 36,
            "return": [
                "List[str]"
            ],
            "arguments": {}
        },
        "is_github_web_hook_ip": {
            "name": "is_github_web_hook_ip",
            "location": 59,
            "return": [
                "bool"
            ],
            "arguments": {
                "request_ip": [
                    "Union[(ipaddress.IPv4Address, ipaddress.IPv6Address)]"
                ]
            }
        },
        "request_from_github": {
            "name": "request_from_github",
            "location": 74,
            "return": [
                "Callable"
            ],
            "arguments": {
                "abort_code": [
                    "int"
                ]
            }
        },
        "is_valid_signature": {
            "name": "is_valid_signature",
            "location": 107,
            "return": [
                "bool"
            ],
            "arguments": {
                "x_hub_signature": [
                    "str",
                    "dict",
                    "float"
                ],
                "data": [
                    "str",
                    "bytes",
                    "bool"
                ],
                "private_key": [
                    "str",
                    "int"
                ]
            }
        },
        "deploy": {
            "name": "deploy",
            "location": 127,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "request_from_github.decorator": {
            "name": "decorator",
            "location": 76,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "f": [
                    "Iterable[str]",
                    "Callable",
                    "T"
                ]
            }
        },
        "request_from_github.decorator.decorated_function": {
            "name": "decorated_function",
            "location": 79,
            "return": [
                "typing.Text",
                "bool",
                "Optional[Dict[str, str]]",
                "List[Dict[str, Any]]",
                "str"
            ],
            "arguments": {}
        }
    },
    "sample-platform-master/mod_deploy/__init__.py": {},
    "sample-platform-master/mod_home/controllers.py": {
        "before_app_request": {
            "name": "before_app_request",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "index": {
            "name": "index",
            "location": 23,
            "return": [
                "dict[typing.Text, typing.Union[int,list[tuple[typing.Union[int,...]]],typing.Type,list[tuple[typing.Union[str,bool,typing.Any]]],str]]",
                "int",
                "str",
                "List[dict]"
            ],
            "arguments": {}
        },
        "about": {
            "name": "about",
            "location": 39,
            "return": [
                "dict[, ]",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        }
    },
    "sample-platform-master/mod_home/models.py": {
        "CCExtractorVersion.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "version": [
                    "int",
                    "float",
                    "Sequence[int]",
                    "typing.Sequence[int]",
                    "Union[str, float]",
                    "str"
                ],
                "released": [
                    "int"
                ],
                "commit": [
                    "int",
                    "float",
                    "Sequence[int]",
                    "typing.Sequence[int]",
                    "Union[str, float]",
                    "str"
                ]
            }
        },
        "CCExtractorVersion.__repr__": {
            "name": "__repr__",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeneralData.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[Union[Any, str]]",
                    "typing.Any",
                    "Union[str, int]",
                    "int"
                ],
                "value": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "GeneralData.__repr__": {
            "name": "__repr__",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sample-platform-master/mod_home/__init__.py": {},
    "sample-platform-master/mod_regression/controllers.py": {
        "before_app_request": {
            "name": "before_app_request",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "index": {
            "name": "index",
            "location": 36,
            "return": [
                "dict[typing.Text, ]",
                "Tuple[float, float]",
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "by_sample": {
            "name": "by_sample",
            "location": 46,
            "return": [
                "dict[typing.Text, typing.Union[str,list[str],bool,None]]",
                "bool",
                "int",
                "Optional[int]",
                "Optional[bool]"
            ],
            "arguments": {
                "sample_id": [
                    "int",
                    "str",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "test_view": {
            "name": "test_view",
            "location": 69,
            "return": [
                "dict[typing.Text, typing.Union[str,int,None]]",
                "Mapping[str, Any]",
                "core.models.Recipe"
            ],
            "arguments": {
                "regression_id": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "test_delete": {
            "name": "test_delete",
            "location": 93,
            "return": [
                "dict[typing.Text, typing.Union[ConfirmationForm,int,str,None]]",
                "Dict[str, str]",
                "flask.testing.FlaskClient",
                "str"
            ],
            "arguments": {
                "regression_id": [
                    "int",
                    "str",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "test_edit": {
            "name": "test_edit",
            "location": 129,
            "return": [
                "dict[typing.Text, typing.Union[EditTestForm,str,int]]",
                "flask.testing.FlaskClient",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "regression_id": [
                    "str",
                    "int"
                ]
            }
        },
        "toggle_active_status": {
            "name": "toggle_active_status",
            "location": 182,
            "return": [
                "int",
                "Dict[str, int]",
                "dict"
            ],
            "arguments": {
                "regression_id": [
                    "int",
                    "str"
                ]
            }
        },
        "test_result_file": {
            "name": "test_result_file",
            "location": 204,
            "return": [
                "int"
            ],
            "arguments": {
                "regression_test_output_id": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None"
                ]
            }
        },
        "multiple_test_result_file": {
            "name": "multiple_test_result_file",
            "location": 214,
            "return": [
                "str",
                "IO",
                "tuple",
                "bool"
            ],
            "arguments": {
                "regression_test_output_id": [
                    "int",
                    "str"
                ]
            }
        },
        "test_add": {
            "name": "test_add",
            "location": 227,
            "return": [
                "dict[typing.Text, AddTestForm]",
                "flask.testing.FlaskClient",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {}
        },
        "category_delete": {
            "name": "category_delete",
            "location": 258,
            "return": [
                "dict[typing.Text, typing.Union[ConfirmationForm,int,dict[, ],str,None]]",
                "int",
                "str",
                "bool",
                "Dict[str, Any]",
                "django.contrib.auth.models.AbstractUser"
            ],
            "arguments": {
                "category_id": [
                    "int",
                    "str"
                ]
            }
        },
        "category_edit": {
            "name": "category_edit",
            "location": 290,
            "return": [
                "dict[typing.Text, typing.Union[AddCategoryForm,int,str,None]]",
                "str",
                "Dict[str, str]",
                "bool",
                "int"
            ],
            "arguments": {
                "category_id": [
                    "int",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "category_add": {
            "name": "category_add",
            "location": 320,
            "return": [
                "dict[typing.Text, AddCategoryForm]",
                "str",
                "int",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "output_add": {
            "name": "output_add",
            "location": 342,
            "return": [
                "dict[typing.Text, typing.Union[AddCorrectOutputForm,int]]",
                "dict",
                "models.Dashboard",
                "int",
                "Optional[Dict]",
                "str"
            ],
            "arguments": {
                "regression_id": [
                    "int"
                ]
            }
        },
        "output_remove": {
            "name": "output_remove",
            "location": 390,
            "return": [
                "dict[typing.Text, typing.Union[RemoveCorrectOutputForm,int,str,None]]",
                "str",
                "bool",
                "Dict[str, Any]",
                "Dict[str, str]",
                "int"
            ],
            "arguments": {
                "regression_id": [
                    "int",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "sample-platform-master/mod_regression/forms.py": {},
    "sample-platform-master/mod_regression/models.py": {
        "Category.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[Sequence[Any]]",
                    "typing.Sequence[typing.Any]"
                ],
                "description": [
                    "str",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]",
                    "list",
                    "list[]"
                ]
            }
        },
        "Category.__repr__": {
            "name": "__repr__",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegressionTest.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_id": [
                    "str",
                    "bytes"
                ],
                "command": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None"
                ],
                "input_type": [
                    "str",
                    "bool"
                ],
                "output_type": [
                    "str"
                ],
                "category_id": [
                    "str",
                    "bytes"
                ],
                "expected_rc": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]",
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "active": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "int"
                ]
            }
        },
        "RegressionTest.__repr__": {
            "name": "__repr__",
            "location": 126,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegressionTestOutput.__init__": {
            "name": "__init__",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "regression_id": [
                    "str",
                    "int"
                ],
                "correct": [
                    "int",
                    "str",
                    "dict[, ]",
                    "bool",
                    "dict"
                ],
                "correct_extension": [
                    "int",
                    "str",
                    "dict[, ]",
                    "bool",
                    "dict"
                ],
                "expected_filename": [
                    "str"
                ],
                "ignore": [
                    "bool",
                    "int",
                    "str",
                    "dict"
                ]
            }
        },
        "RegressionTestOutput.__repr__": {
            "name": "__repr__",
            "location": 171,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegressionTestOutput.filename_correct": {
            "name": "filename_correct",
            "location": 181,
            "return": [
                "int",
                "bool",
                "str",
                "dict",
                "Dict[str, Tuple[str, str, Any]]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegressionTestOutput.filename_expected": {
            "name": "filename_expected",
            "location": 190,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "sample_hash": [
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "RegressionTestOutput.create_correct_filename": {
            "name": "create_correct_filename",
            "location": 201,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "Tuple[str, int]",
                    "tuple[typing.Union[str,int]]"
                ]
            }
        },
        "RegressionTestOutputFiles.__init__": {
            "name": "__init__",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_hashes": [
                    "str",
                    "int"
                ],
                "regression_test_output_id": [
                    "str",
                    "int",
                    "list[]",
                    "bool",
                    "list"
                ]
            }
        },
        "RegressionTestOutputFiles.__repr__": {
            "name": "__repr__",
            "location": 238,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sample-platform-master/mod_regression/update_regression.py": {
        "update_expected_results": {
            "name": "update_expected_results",
            "location": 97,
            "return": [
                "bool"
            ],
            "arguments": {
                "path_to_ccex": [
                    "str"
                ]
            }
        },
        "Test.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_file": [
                    "str"
                ],
                "args": [
                    "str"
                ],
                "output": [
                    "str"
                ]
            }
        },
        "Test.get_inputfilepath": {
            "name": "get_inputfilepath",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "reg_test": [
                    "mod_regression.models.RegressionTest"
                ]
            }
        },
        "Test.get_outputfilepath": {
            "name": "get_outputfilepath",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "reg_test": [
                    "mod_regression.models.RegressionTest"
                ]
            }
        },
        "Test.run_ccex": {
            "name": "run_ccex",
            "location": 60,
            "return": [
                "bool"
            ],
            "arguments": {
                "path_to_ccex": [
                    "str"
                ],
                "log_file": [
                    "str"
                ],
                "input_file": [
                    "str"
                ],
                "args": [
                    "str"
                ],
                "output_file": [
                    "str"
                ]
            }
        }
    },
    "sample-platform-master/mod_regression/__init__.py": {},
    "sample-platform-master/mod_sample/controllers.py": {
        "before_app_request": {
            "name": "before_app_request",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "display_sample_info": {
            "name": "display_sample_info",
            "location": 39,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "sample": [
                    "dict[, ]",
                    "int",
                    "dict",
                    "str",
                    "models.User"
                ]
            }
        },
        "not_found": {
            "name": "not_found",
            "location": 123,
            "return": [
                "dict[typing.Text, ]",
                "List[str]",
                "str",
                "bool",
                "zerver.models.Realm",
                "Optional[Callable]"
            ],
            "arguments": {
                "error": [
                    "str",
                    "Optional[str]",
                    "Exception",
                    "None",
                    "Dict[str, Optional[str]]",
                    "dict[str, typing.Union[str,None]]",
                    "Callable[[str], bool]",
                    "typing.Callable[str, bool]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "index": {
            "name": "index",
            "location": 132,
            "return": [
                "dict[typing.Text, ]",
                "str",
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "sample_by_id": {
            "name": "sample_by_id",
            "location": 141,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "sample_id": [
                    "int",
                    "str"
                ]
            }
        },
        "sample_by_hash": {
            "name": "sample_by_hash",
            "location": 160,
            "return": [
                "str",
                "OrderedDict[str, Any]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "sample_hash": [
                    "str",
                    "Sequence[object]",
                    "typing.Sequence[object]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "download_sample": {
            "name": "download_sample",
            "location": 178,
            "return": [
                "str"
            ],
            "arguments": {
                "sample_id": [
                    "str",
                    "int",
                    "list",
                    "list[]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "download_sample_media_info": {
            "name": "download_sample_media_info",
            "location": 195,
            "return": [
                "str",
                "django.db.models.QuerySet",
                "int"
            ],
            "arguments": {
                "sample_id": [
                    "int"
                ]
            }
        },
        "download_sample_additional": {
            "name": "download_sample_additional",
            "location": 221,
            "return": [
                "str"
            ],
            "arguments": {
                "sample_id": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "additional_id": [
                    "int",
                    "typing.Iterable[int]",
                    "Iterable[int]",
                    "Dict[str, Any]"
                ]
            }
        },
        "edit_sample": {
            "name": "edit_sample",
            "location": 247,
            "return": [
                "dict[typing.Text, typing.Union[dict[, ],list[str],list[],str,int,EditSampleForm]]",
                "asgard.models.user.User",
                "Dict[str, Any]",
                "int",
                "Dict[str, str]",
                "Optional[int]"
            ],
            "arguments": {
                "sample_id": [
                    "int",
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[int]"
                ]
            }
        },
        "delete_sample": {
            "name": "delete_sample",
            "location": 295,
            "return": [
                "dict[typing.Text, typing.Union[int,str,tuple[typing.Union[str,str,str,str,str,str,str]],dict[int, str],DeleteSampleForm]]",
                "bool",
                "str",
                "Dict[str, Any]",
                "List[str]"
            ],
            "arguments": {
                "sample_id": [
                    "int",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "delete_sample_additional": {
            "name": "delete_sample_additional",
            "location": 334,
            "return": [
                "dict[typing.Text, typing.Union[list[str],int,dict[, ],str,dict[str, str],DeleteAdditionalSampleForm]]",
                "str",
                "zerver.models.UserProfile",
                "bool",
                "Dict[str, Any]",
                "django.contrib.auth.models.AbstractUser",
                "List[str]"
            ],
            "arguments": {
                "sample_id": [
                    "int"
                ],
                "additional_id": [
                    "int",
                    "typing.Iterable[int]",
                    "str",
                    "transfer.models.TicketID",
                    "Iterable[int]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "sample-platform-master/mod_sample/forms.py": {},
    "sample-platform-master/mod_sample/media_info_parser.py": {
        "InvalidMediaInfoError.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "MediaInfoFetcher.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sample": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "MediaInfoFetcher.get_media_info": {
            "name": "get_media_info",
            "location": 49,
            "return": [
                "Optional[List[Dict[(str, Any)]]]"
            ],
            "arguments": {
                "self": [],
                "force_parse": [
                    "bool",
                    "List[str]",
                    "str",
                    "Callable",
                    "int",
                    "dss.config.Replica"
                ]
            }
        },
        "MediaInfoFetcher._process_tracks": {
            "name": "_process_tracks",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MediaInfoFetcher._process_track": {
            "name": "_process_track",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "track": [
                    "int",
                    "float"
                ]
            }
        },
        "MediaInfoFetcher._process_generic": {
            "name": "_process_generic",
            "location": 119,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "track": [
                    "str",
                    "bytes",
                    "Dict[str, Any]",
                    "Iterable[str]",
                    "Optional[Callable[[str], Any]]",
                    "Sequence[str]",
                    "bool"
                ],
                "keys": [
                    "str",
                    "Callable"
                ]
            }
        },
        "MediaInfoFetcher._process_general": {
            "name": "_process_general",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "track": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "MediaInfoFetcher._process_video": {
            "name": "_process_video",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "track": [
                    "float"
                ]
            }
        },
        "MediaInfoFetcher._process_text": {
            "name": "_process_text",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "track": [
                    "str"
                ]
            }
        },
        "MediaInfoFetcher.generate_media_xml": {
            "name": "generate_media_xml",
            "location": 196,
            "return": [
                "MediaInfoFetcher"
            ],
            "arguments": {
                "sample": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        }
    },
    "sample-platform-master/mod_sample/models.py": {
        "get_extension": {
            "name": "get_extension",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "extension": [
                    "str"
                ]
            }
        },
        "Sample.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sha": [
                    "str",
                    "int",
                    "float",
                    "tuple[]",
                    "tuple",
                    "bool"
                ],
                "extension": [
                    "str",
                    "int",
                    "float",
                    "tuple[]",
                    "tuple",
                    "bool"
                ],
                "original_name": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "Sample.__repr__": {
            "name": "__repr__",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sample.filename": {
            "name": "filename",
            "location": 63,
            "return": [
                "typing.Text",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtraFile.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_id": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "extension": [
                    "str",
                    "int",
                    "None",
                    "list[int]",
                    "bool",
                    "Optional[bool]",
                    "Optional[str]",
                    "List[int]"
                ],
                "original_name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "ExtraFile.__repr__": {
            "name": "__repr__",
            "location": 95,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtraFile.short_name": {
            "name": "short_name",
            "location": 105,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "length": [
                    "int",
                    "str"
                ]
            }
        },
        "ExtraFile.filename": {
            "name": "filename",
            "location": 117,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ForbiddenExtension.__init__": {
            "name": "__init__",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "extension": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "ForbiddenExtension.__repr__": {
            "name": "__repr__",
            "location": 143,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ForbiddenMimeType.__init__": {
            "name": "__init__",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mime_type": [
                    "str",
                    "type",
                    "typing.Type",
                    "Union[str, List[str]]",
                    "list[str]"
                ]
            }
        },
        "ForbiddenMimeType.__repr__": {
            "name": "__repr__",
            "location": 169,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Issue.__init__": {
            "name": "__init__",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_id": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "issue_id": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "date": [
                    "int",
                    "datetime.datetime"
                ],
                "title": [
                    "int",
                    "str",
                    "None",
                    "Optional[bool]",
                    "list[int]",
                    "Optional[str]",
                    "List[int]",
                    "bool"
                ],
                "user": [
                    "int",
                    "str",
                    "None",
                    "Optional[bool]",
                    "list[int]",
                    "Optional[str]",
                    "List[int]",
                    "bool"
                ],
                "status": [
                    "int",
                    "str",
                    "None",
                    "Optional[bool]",
                    "list[int]",
                    "Optional[str]",
                    "List[int]",
                    "bool"
                ]
            }
        }
    },
    "sample-platform-master/mod_sample/__init__.py": {},
    "sample-platform-master/mod_test/controllers.py": {
        "before_app_request": {
            "name": "before_app_request",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "not_found": {
            "name": "not_found",
            "location": 41,
            "return": [
                "dict[typing.Text, ]",
                "List[str]",
                "str",
                "bool",
                "zerver.models.Realm",
                "Optional[Callable]"
            ],
            "arguments": {
                "error": [
                    "str",
                    "Optional[str]",
                    "Exception",
                    "None",
                    "Dict[str, Optional[str]]",
                    "dict[str, typing.Union[str,None]]",
                    "Callable[[str], bool]",
                    "typing.Callable[str, bool]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "index": {
            "name": "index",
            "location": 50,
            "return": [
                "dict[typing.Text, typing.Union[typing.Sequence[str],list[str],str]]",
                "str",
                "bool",
                "django.db.models.query.QuerySet",
                "float",
                "Tuple[bool, bool, bool]",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]"
            ],
            "arguments": {}
        },
        "get_data_for_test": {
            "name": "get_data_for_test",
            "location": 60,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "test": [
                    "str",
                    "int",
                    "bytes",
                    "List[\"libkol.Item\"]",
                    "bool",
                    "Mapping[str, str]"
                ],
                "title": [
                    "str",
                    "None",
                    "sqlalchemy.sql.schema.Table",
                    "dict",
                    "dict[, ]",
                    "Optional[List]",
                    "list[]"
                ]
            }
        },
        "get_json_data": {
            "name": "get_json_data",
            "location": 182,
            "return": [
                "str",
                "zerver.models.Realm",
                "Dict[str, Any]"
            ],
            "arguments": {
                "test_id": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "by_id": {
            "name": "by_id",
            "location": 215,
            "return": [
                "bool",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "test_id": [
                    "str",
                    "int"
                ]
            }
        },
        "ccextractor_version": {
            "name": "ccextractor_version",
            "location": 235,
            "return": [
                "bool",
                "Optional[Dict[str, str]]",
                "Dict[str, bool]",
                "Dict[str, str]"
            ],
            "arguments": {
                "ccx_version": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "by_commit": {
            "name": "by_commit",
            "location": 264,
            "return": [
                "bool",
                "Category",
                "str"
            ],
            "arguments": {
                "commit_hash": [
                    "dict[str, typing.Any]",
                    "str",
                    "Dict[str, Any]",
                    "typing.Sequence[object]",
                    "Sequence[object]",
                    "pringles.models.Model"
                ]
            }
        },
        "latest_commit_info": {
            "name": "latest_commit_info",
            "location": 287,
            "return": [
                "bool",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "platform": [
                    "List[Tuple[int, bytes]]",
                    "bool",
                    "list[tuple[typing.Union[int,bytes]]]"
                ]
            }
        },
        "generate_diff": {
            "name": "generate_diff",
            "location": 315,
            "return": [
                "Response",
                "IO[bytes]",
                "Optional[Dict[str, Any]]",
                "bytes",
                "Dict[str, Any]"
            ],
            "arguments": {
                "test_id": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Dict[str, Any]",
                    "int",
                    "dict[str, typing.Any]",
                    "Optional[List[str]]",
                    "list[str]",
                    "dict",
                    "dict[, ]"
                ],
                "regression_test_id": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Dict[str, Any]",
                    "int",
                    "dict[str, typing.Any]",
                    "Optional[List[str]]",
                    "list[str]",
                    "dict",
                    "dict[, ]"
                ],
                "output_id": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Dict[str, Any]",
                    "int",
                    "dict[str, typing.Any]",
                    "Optional[List[str]]",
                    "list[str]",
                    "dict",
                    "dict[, ]"
                ],
                "to_view": [
                    "int",
                    "str",
                    "dict",
                    "Callable"
                ]
            }
        },
        "download_build_log_file": {
            "name": "download_build_log_file",
            "location": 365,
            "return": [
                "str"
            ],
            "arguments": {
                "test_id": [
                    "str",
                    "int"
                ]
            }
        },
        "restart_test": {
            "name": "restart_test",
            "location": 395,
            "return": [
                "bool",
                "str",
                "models.Dashboard",
                "Optional[Dict]",
                "dict"
            ],
            "arguments": {
                "test_id": [
                    "int",
                    "str",
                    "Union[int, str]"
                ]
            }
        },
        "stop_test": {
            "name": "stop_test",
            "location": 419,
            "return": [
                "bool",
                "str",
                "models.Dashboard",
                "Optional[Dict]",
                "dict"
            ],
            "arguments": {
                "test_id": [
                    "int",
                    "str",
                    "Union[int, str]"
                ]
            }
        }
    },
    "sample-platform-master/mod_test/models.py": {
        "TestStatus.progress_step": {
            "name": "progress_step",
            "location": 54,
            "return": [
                "int",
                "str",
                "List[Dict[str, Any]]",
                "dict"
            ],
            "arguments": {
                "inst": [
                    "bytes",
                    "int",
                    "audiopyle.lib.models.compressed_feature.CompressedFeatureDTO"
                ]
            }
        },
        "TestStatus.stages": {
            "name": "stages",
            "location": 69,
            "return": [
                "List[Tuple[(str, str)]]"
            ],
            "arguments": {}
        },
        "Fork.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "github": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Fork.__repr__": {
            "name": "__repr__",
            "location": 92,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fork.github_url": {
            "name": "github_url",
            "location": 97,
            "return": [
                "str",
                "float",
                "Union[fonduer.candidates.models.Candidate, fonduer.candidates.models.Mention, fonduer.candidates.models.span_mention.TemporarySpanMention]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fork.github_name": {
            "name": "github_name",
            "location": 102,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.__init__": {
            "name": "__init__",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "platform": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "Optional[bool]",
                    "list",
                    "list[]",
                    "list[str]",
                    "zerver.models.UserProfile",
                    "List[str]"
                ],
                "test_type": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "None",
                    "Iterable[str]",
                    "Tuple[int, int]",
                    "typing.Iterable[str]"
                ],
                "fork_id": [
                    "str",
                    "int"
                ],
                "branch": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "Optional[bool]",
                    "list",
                    "list[]",
                    "list[str]",
                    "zerver.models.UserProfile",
                    "List[str]"
                ],
                "commit": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "Optional[bool]",
                    "list",
                    "list[]",
                    "list[str]",
                    "zerver.models.UserProfile",
                    "List[str]"
                ],
                "pr_nr": [
                    "int",
                    "Optional[str]",
                    "Optional[bool]",
                    "list",
                    "bool",
                    "zerver.models.UserProfile",
                    "List[str]"
                ],
                "token": [
                    "Optional[str]",
                    "None",
                    "str",
                    "Optional[List[str]]",
                    "List[\"Node\"]",
                    "list[str]",
                    "list[\"Node\"]",
                    "Optional[Dict[str, str]]",
                    "dict[str, str]",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "Test.__repr__": {
            "name": "__repr__",
            "location": 155,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.finished": {
            "name": "finished",
            "location": 165,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.failed": {
            "name": "failed",
            "location": 177,
            "return": [
                "bool",
                "int",
                "models.order_action.Parameters",
                "Union[models.scenes.scenes_base.EffectType, Sequence[models.scenes.scenes_base.EffectType]]",
                "List[recidiviz.persistence.database.schema.state.schema.StatePerson]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.github_link": {
            "name": "github_link",
            "location": 189,
            "return": [
                "typing.Text",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.progress_data": {
            "name": "progress_data",
            "location": 205,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.create_token": {
            "name": "create_token",
            "location": 240,
            "return": [
                "str"
            ],
            "arguments": {
                "length": [
                    "int"
                ]
            }
        },
        "Test.get_customized_regressiontests": {
            "name": "get_customized_regressiontests",
            "location": 253,
            "return": [
                "list[]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProgress.__init__": {
            "name": "__init__",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test_id": [
                    "str",
                    "bytes",
                    "int"
                ],
                "status": [
                    "int",
                    "str",
                    "float",
                    "esm.models.LastOperation"
                ],
                "message": [
                    "int",
                    "str",
                    "float",
                    "esm.models.LastOperation"
                ],
                "timestamp": [
                    "None",
                    "int",
                    "datetime.datetime",
                    "Optional[datetime.datetime]",
                    "Optional[int]",
                    "Optional[datetime.timedelta]",
                    "datetime.date"
                ]
            }
        },
        "TestProgress.__repr__": {
            "name": "__repr__",
            "location": 307,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProgress.may_the_timezone_be_with_it": {
            "name": "may_the_timezone_be_with_it",
            "location": 317,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResult.__init__": {
            "name": "__init__",
            "location": 337,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test_id": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "regression_test_id": [
                    "int",
                    "set[int]",
                    "str",
                    "Optional[Set[int]]",
                    "None",
                    "Set[int]",
                    "transfer.models.ListID",
                    "Optional[\"ReferenceTypeId\"]"
                ],
                "runtime": [
                    "int",
                    "list[str]",
                    "zerver.models.UserProfile",
                    "list[]",
                    "bool",
                    "None",
                    "str",
                    "List[str]",
                    "list[int]",
                    "list",
                    "Optional[bool]",
                    "Optional[str]",
                    "List[int]"
                ],
                "exit_code": [
                    "int"
                ],
                "expected_rc": [
                    "str",
                    "bytes",
                    "typing.Mapping",
                    "Mapping[str, str]",
                    "int",
                    "dict[str, typing.Any]",
                    "Optional[Dict[str, Any]]",
                    "None",
                    "Union[str, int]",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "dict[str, dict[str, typing.Any]]",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        },
        "TestResult.__repr__": {
            "name": "__repr__",
            "location": 358,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResultFile.__init__": {
            "name": "__init__",
            "location": 388,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test_id": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "Optional[List[str]]",
                    "list[str]"
                ],
                "regression_test_id": [
                    "int",
                    "str",
                    "set[int]",
                    "None",
                    "Optional[Set[int]]",
                    "Optional[int]",
                    "transfer.models.SiteID",
                    "Optional[\"ReferenceTypeId\"]"
                ],
                "regression_test_output_id": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None",
                    "List[dict]",
                    "list[dict[, ]]"
                ],
                "expected": [
                    "int",
                    "str",
                    "None",
                    "list[str]",
                    "zerver.models.UserProfile",
                    "Optional[str]",
                    "bool",
                    "List[str]",
                    "Optional[bool]"
                ],
                "got": [
                    "str",
                    "None",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "dict",
                    "dict[str, typing.Any]",
                    "List[annofabapi.models.SingleAnnotation]",
                    "dict[, ]",
                    "list[A]"
                ]
            }
        },
        "TestResultFile.__repr__": {
            "name": "__repr__",
            "location": 409,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResultFile.generate_html_diff": {
            "name": "generate_html_diff",
            "location": 423,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "base_path": [
                    "str"
                ],
                "to_view": [
                    "bool"
                ]
            }
        },
        "TestResultFile.read_lines": {
            "name": "read_lines",
            "location": 445,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "file_name": [
                    "str"
                ]
            }
        }
    },
    "sample-platform-master/mod_test/__init__.py": {},
    "sample-platform-master/mod_test/nicediff/diff.py": {
        "zip_": {
            "name": "zip_",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "ls": [
                    "List[str]"
                ]
            }
        },
        "compress": {
            "name": "compress",
            "location": 16,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "eq": {
            "name": "eq",
            "location": 21,
            "return": [
                "List[Union[(int, List[str])]]"
            ],
            "arguments": {
                "a": [
                    "List[str]"
                ],
                "b": [
                    "List[str]"
                ],
                "same_regions": [
                    "Optional[List[List[int]]]"
                ],
                "delta_a": [
                    "int"
                ],
                "delta_b": [
                    "int"
                ]
            }
        },
        "_process": {
            "name": "_process",
            "location": 78,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {
                "test_result": [
                    "str"
                ],
                "correct": [
                    "str"
                ],
                "suffix_id": [
                    "str"
                ]
            }
        },
        "create_diff_entries": {
            "name": "create_diff_entries",
            "location": 107,
            "return": [
                "str"
            ],
            "arguments": {
                "suffix_id": [
                    "str"
                ],
                "id_name": [
                    "str"
                ],
                "events": [
                    "List[List[object]]"
                ],
                "compressed_data": [
                    "List[str]"
                ]
            }
        },
        "get_html_diff": {
            "name": "get_html_diff",
            "location": 124,
            "return": [
                "str"
            ],
            "arguments": {
                "test_correct_lines": [
                    "List[str]"
                ],
                "test_res_lines": [
                    "List[str]"
                ],
                "to_view": [
                    "bool"
                ]
            }
        }
    },
    "sample-platform-master/mod_test/nicediff/__init__.py": {},
    "sample-platform-master/mod_upload/controllers.py": {
        "before_app_request": {
            "name": "before_app_request",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "not_found": {
            "name": "not_found",
            "location": 56,
            "return": [
                "dict[typing.Text, ]",
                "List[str]",
                "str",
                "bool",
                "zerver.models.Realm",
                "Optional[Callable]"
            ],
            "arguments": {
                "error": [
                    "str",
                    "Optional[str]",
                    "Exception",
                    "None",
                    "Dict[str, Optional[str]]",
                    "dict[str, typing.Union[str,None]]",
                    "Callable[[str], bool]",
                    "typing.Callable[str, bool]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "index": {
            "name": "index",
            "location": 66,
            "return": [
                "dict[typing.Text, ]",
                "str",
                "List[str]"
            ],
            "arguments": {}
        },
        "index_admin": {
            "name": "index_admin",
            "location": 78,
            "return": [
                "dict[typing.Text, ]",
                "Hashable",
                "float",
                "Dict[str, Any]",
                "bool",
                "bytes"
            ],
            "arguments": {}
        },
        "make_github_issue": {
            "name": "make_github_issue",
            "location": 86,
            "return": [
                "typing.Text",
                "str",
                "Sequence[Sequence[str]]",
                "Optional[List[str]]",
                "Mapping[str, Sequence[Any]]"
            ],
            "arguments": {
                "title": [
                    "str",
                    "bool",
                    "BaseException"
                ],
                "body": [
                    "str",
                    "bool",
                    "None",
                    "BaseException"
                ],
                "labels": [
                    "str",
                    "bool",
                    "None",
                    "BaseException"
                ]
            }
        },
        "ftp_index": {
            "name": "ftp_index",
            "location": 120,
            "return": [
                "dict[typing.Text, ]",
                "str",
                "werkzeug.datastructures.ImmutableMultiDict"
            ],
            "arguments": {}
        },
        "retrieve_ftp_credentials": {
            "name": "retrieve_ftp_credentials",
            "location": 134,
            "return": [
                "mod_upload.models.FTPCredentials"
            ],
            "arguments": {
                "user_id": [
                    "int"
                ]
            }
        },
        "ftp_filezilla": {
            "name": "ftp_filezilla",
            "location": 154,
            "return": [
                "dict[, ]",
                "bytes",
                "list[]",
                "dict",
                "flask.Response"
            ],
            "arguments": {}
        },
        "upload": {
            "name": "upload",
            "location": 180,
            "return": [
                "dict[typing.Text, typing.Union[UploadForm,int]]",
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {}
        },
        "process_id": {
            "name": "process_id",
            "location": 208,
            "return": [
                "dict[typing.Text, typing.Union[FinishQueuedSampleForm,list[str],str,int,list[int]]]",
                "int",
                "Dict[str, Any]",
                "str",
                "models.Dashboard"
            ],
            "arguments": {
                "upload_id": [
                    "int",
                    "transfer.models.BadgeID"
                ]
            }
        },
        "link_id": {
            "name": "link_id",
            "location": 318,
            "return": [
                "dict[typing.Text, typing.Union[list[],list[str],str,int,list[int]]]",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "upload_id": [
                    "int",
                    "list[int]",
                    "transfer.models.BadgeID",
                    "List[int]"
                ]
            }
        },
        "link_id_confirm": {
            "name": "link_id_confirm",
            "location": 348,
            "return": [
                "int",
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "upload_id": [
                    "int",
                    "str",
                    "transfer.models.SubjectID"
                ],
                "sample_id": [
                    "int",
                    "str",
                    "transfer.models.SubjectID"
                ]
            }
        },
        "delete_id": {
            "name": "delete_id",
            "location": 374,
            "return": [
                "dict[typing.Text, typing.Union[DeleteQueuedSampleForm,list[str],str,int,list[int]]]",
                "str",
                "int",
                "dict",
                "Union[str, dict]",
                "Optional[str]"
            ],
            "arguments": {
                "upload_id": [
                    "int",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "create_hash_for_sample": {
            "name": "create_hash_for_sample",
            "location": 413,
            "return": [
                "str"
            ],
            "arguments": {
                "file_path": [
                    "str"
                ]
            }
        },
        "sample_already_uploaded": {
            "name": "sample_already_uploaded",
            "location": 430,
            "return": [
                "bool"
            ],
            "arguments": {
                "file_hash": [
                    "str",
                    "list[str]",
                    "List[str]",
                    "dict[str, typing.Any]",
                    "cmk.utils.type_defs.LabelSources",
                    "Dict[str, Any]"
                ]
            }
        },
        "add_sample_to_queue": {
            "name": "add_sample_to_queue",
            "location": 445,
            "return": [
                "None"
            ],
            "arguments": {
                "file_hash": [
                    "Optional[str]",
                    "str",
                    "IO[Any]",
                    "None",
                    "Callable[[], str]",
                    "typing.IO",
                    "typing.Callable[[], str]"
                ],
                "temp_path": [
                    "str"
                ],
                "user_id": [
                    "Optional[str]",
                    "str",
                    "IO[Any]",
                    "None",
                    "Callable[[], str]",
                    "typing.IO",
                    "typing.Callable[[], str]"
                ],
                "db": [
                    "set[str]",
                    "set[int]",
                    "int",
                    "Sequence[str]",
                    "bool",
                    "Optional[Set[str]]",
                    "List[str]",
                    "grouper.models.base.session.Session",
                    "Optional[Set[int]]",
                    "zerver.models.Message"
                ]
            }
        },
        "upload_ftp": {
            "name": "upload_ftp",
            "location": 477,
            "return": [
                "None"
            ],
            "arguments": {
                "db": [
                    "bool",
                    "str",
                    "Tuple[str]",
                    "tuple[str]"
                ],
                "path": [
                    "bytes",
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "remove_forbidden_file": {
            "name": "remove_forbidden_file",
            "location": 532,
            "return": [
                "bool"
            ],
            "arguments": {
                "file_extension": [
                    "str"
                ],
                "file_path": [
                    "str"
                ],
                "user": [
                    "mod_auth.models.User"
                ]
            }
        }
    },
    "sample-platform-master/mod_upload/forms.py": {
        "UploadForm.validate_file": {
            "name": "validate_file",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "form": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]",
                    "list",
                    "list[]"
                ],
                "field": [
                    "str",
                    "typing.Mapping",
                    "Mapping[str, Any]",
                    "zerver.models.Realm"
                ]
            }
        },
        "CommonSampleForm.validate_version": {
            "name": "validate_version",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "form": [
                    "bool",
                    "typing.Iterable[str]",
                    "str",
                    "Optional[Iterable[str]]",
                    "None",
                    "Dict[str, List]",
                    "List[Dict[str, int]]"
                ],
                "field": [
                    "str",
                    "dict[str, typing.Any]",
                    "django.db.models.Model",
                    "transfer.models.Scope",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "sample-platform-master/mod_upload/models.py": {
        "Upload.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int",
                    "str"
                ],
                "sample_id": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "version_id": [
                    "str",
                    "int"
                ],
                "platform": [
                    "int",
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "parameters": [
                    "typing.Text",
                    "int",
                    "str",
                    "List[str]"
                ],
                "notes": [
                    "typing.Text",
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "Upload.__repr__": {
            "name": "__repr__",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueuedSample.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sha": [
                    "str",
                    "int",
                    "None",
                    "sqlalchemy.orm.state.InstanceState",
                    "bool",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "extension": [
                    "str",
                    "int",
                    "None",
                    "sqlalchemy.orm.state.InstanceState",
                    "bool",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "original_name": [
                    "str",
                    "bool",
                    "Callable",
                    "typing.Callable[, ]",
                    "Optional[str]",
                    "None"
                ],
                "user_id": [
                    "Optional[List[str]]",
                    "list[str]",
                    "str",
                    "int",
                    "None",
                    "Optional[Dict[str, Any]]",
                    "list",
                    "dict[str, typing.Any]",
                    "Optional[str]",
                    "list[]",
                    "Optional[Set[int]]",
                    "set[int]"
                ]
            }
        },
        "QueuedSample.filename": {
            "name": "filename",
            "location": 114,
            "return": [
                "typing.Text",
                "str",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UploadLog.__init__": {
            "name": "__init__",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "List[int]",
                    "list[int]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "user_id": [
                    "str",
                    "int"
                ]
            }
        },
        "FTPCredentials.__init__": {
            "name": "__init__",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None"
                ],
                "user_name": [
                    "str",
                    "None",
                    "Optional[str]"
                ],
                "status": [
                    "Optional[str]",
                    "str",
                    "int",
                    "bool"
                ],
                "password": [
                    "Optional[str]",
                    "None",
                    "str",
                    "Optional[List[str]]",
                    "list[str]",
                    "Optional[int]",
                    "int"
                ],
                "home_directory": [
                    "str",
                    "None",
                    "list",
                    "int",
                    "dict",
                    "list[]",
                    "dict[, ]"
                ],
                "ip_access": [
                    "typing.Text",
                    "Optional[str]",
                    "str",
                    "int",
                    "bool"
                ],
                "quota_files": [
                    "int",
                    "str",
                    "Optional[\"Address\"]",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "FTPCredentials._create_random_string": {
            "name": "_create_random_string",
            "location": 210,
            "return": [
                "str"
            ],
            "arguments": {
                "length": [
                    "int"
                ]
            }
        }
    },
    "sample-platform-master/mod_upload/progress_ftp_upload.py": {
        "process": {
            "name": "process",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "database": [
                    "str",
                    "typing.BinaryIO",
                    "BinaryIO",
                    "waterbutler.core.path.WaterButlerPath"
                ],
                "file_to_process": [
                    "str",
                    "typing.BinaryIO",
                    "BinaryIO",
                    "waterbutler.core.path.WaterButlerPath"
                ]
            }
        }
    },
    "sample-platform-master/mod_upload/__init__.py": {},
    "sample-platform-master/tests/base.py": {
        "provide_file_at_root": {
            "name": "provide_file_at_root",
            "location": 26,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "file_name": [
                    "str"
                ],
                "to_write": [
                    "None",
                    "str",
                    "Optional[str]",
                    "bytes",
                    "Optional[\"CustomerReference\"]"
                ]
            }
        },
        "load_file_lines": {
            "name": "load_file_lines",
            "location": 37,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "Callable"
                ]
            }
        },
        "mock_decorator": {
            "name": "mock_decorator",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "f": [
                    "Callable",
                    "typing.Callable[, ]",
                    "str",
                    "List[Dict]",
                    "bool",
                    "list[dict[, ]]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "generate_keys": {
            "name": "generate_keys",
            "location": 59,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {}
        },
        "load_config": {
            "name": "load_config",
            "location": 74,
            "return": [
                "Dict[(str, bytes)]"
            ],
            "arguments": {
                "file": [
                    "List[str]",
                    "list[str]",
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "IO[Any]",
                    "typing.IO",
                    "List[Callable]",
                    "list[typing.Callable[, ]]"
                ]
            }
        },
        "mock_api_request_github": {
            "name": "mock_api_request_github",
            "location": 104,
            "return": [
                "MockResponse"
            ],
            "arguments": {
                "url": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ],
                "data": [
                    "bool",
                    "None",
                    "str",
                    "bytes",
                    "Callable[[], Any]",
                    "List[str]",
                    "typing.Callable[[], typing.Any]",
                    "list[str]",
                    "dict",
                    "dict[, ]"
                ],
                "timeout": [
                    "bool",
                    "None",
                    "str",
                    "bytes",
                    "Callable[[], Any]",
                    "List[str]",
                    "typing.Callable[[], typing.Any]",
                    "list[str]",
                    "dict",
                    "dict[, ]"
                ],
                "auth": [
                    "bool",
                    "None",
                    "str",
                    "bytes",
                    "Callable[[], Any]",
                    "List[str]",
                    "typing.Callable[[], typing.Any]",
                    "list[str]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "generate_signature": {
            "name": "generate_signature",
            "location": 141,
            "return": [
                "str"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bytes",
                    "int"
                ],
                "private_key": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "generate_git_api_header": {
            "name": "generate_git_api_header",
            "location": 156,
            "return": [
                "Headers",
                "dict",
                "List[str]",
                "int"
            ],
            "arguments": {
                "event": [
                    "dict",
                    "dict[, ]"
                ],
                "sig": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "mock_decorator.decorated_function": {
            "name": "decorated_function",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "BaseTestCase.create_app": {
            "name": "create_app",
            "location": 178,
            "return": [
                "flask.Flask"
            ],
            "arguments": {
                "self": [],
                "mock_config": [
                    "Type[T]",
                    "typing.Type",
                    "str",
                    "List[dict]",
                    "bool",
                    "list[dict[, ]]"
                ]
            }
        },
        "BaseTestCase.setUp": {
            "name": "setUp",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseTestCase.create_login_form_data": {
            "name": "create_login_form_data",
            "location": 306,
            "return": [
                "dict"
            ],
            "arguments": {
                "email": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "password": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "BaseTestCase.create_customize_form": {
            "name": "create_customize_form",
            "location": 315,
            "return": [
                "Dict[(str, Union[(bool, List[Union[(int, str)]], _T0, _T1, _T2, _T3)])]"
            ],
            "arguments": {
                "commit_hash": [
                    "_T0"
                ],
                "platform": [
                    "_T1"
                ],
                "commit_select": [
                    "_T2"
                ],
                "regression_test": [
                    "_T3"
                ]
            }
        },
        "BaseTestCase.create_forktest": {
            "name": "create_forktest",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "commit_hash": [
                    "bool",
                    "str",
                    "list[int]",
                    "models.User",
                    "None",
                    "dict[str, typing.Union[str,None]]",
                    "Optional[List[int]]",
                    "typing.Callable[[], str]",
                    "Dict[str, Optional[str]]",
                    "int",
                    "Callable[[], str]",
                    "Optional[str]"
                ],
                "platform": [
                    "bool",
                    "str",
                    "list[int]",
                    "models.User",
                    "None",
                    "dict[str, typing.Union[str,None]]",
                    "Optional[List[int]]",
                    "typing.Callable[[], str]",
                    "Dict[str, Optional[str]]",
                    "int",
                    "Callable[[], str]",
                    "Optional[str]"
                ],
                "regression_tests": [
                    "str",
                    "Optional[str]",
                    "None",
                    "list[]",
                    "Optional[bool]",
                    "int",
                    "list"
                ]
            }
        },
        "BaseTestCase.create_user_with_role": {
            "name": "create_user_with_role",
            "location": 349,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "email": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "password": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "role": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "github_token": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "BaseTestCase.create_random_string": {
            "name": "create_random_string",
            "location": 358,
            "return": [
                "str"
            ],
            "arguments": {
                "length": [
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        },
        "MockResponse.__init__": {
            "name": "__init__",
            "location": 369,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "json_data": [
                    "Optional[\"TrackingData\"]",
                    "None",
                    "dict",
                    "str",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "status_code": [
                    "int",
                    "str",
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]",
                    "shop.transfer.models.ShopID"
                ]
            }
        },
        "MockResponse.json": {
            "name": "json",
            "location": 373,
            "return": [
                "str",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sample-platform-master/tests/TestConfigParser.py": {
        "TestConfigParser.test_parse_config": {
            "name": "test_parse_config",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sample-platform-master/tests/TestLogConfiguration.py": {
        "TestLogConfiguration._test_init_with_log_value": {
            "name": "_test_init_with_log_value",
            "location": 16,
            "return": [
                "log_configuration.LogConfiguration"
            ],
            "arguments": {
                "self": [],
                "debug": [
                    "str"
                ],
                "result_level": [
                    "str",
                    "int"
                ]
            }
        },
        "TestLogConfiguration.test_init_correctly_initializes_the_instance_when_debug": {
            "name": "test_init_correctly_initializes_the_instance_when_debug",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogConfiguration.test_init_correctly_initializes_the_instance_when_no_debug": {
            "name": "test_init_correctly_initializes_the_instance_when_no_debug",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogConfiguration.test_create_logger": {
            "name": "test_create_logger",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sample-platform-master/tests/TestMailer.py": {
        "TestMailer.test_that_init_works_correctly": {
            "name": "test_that_init_works_correctly",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMailer.test_that_send_simple_message_creates_the_appropriate_request": {
            "name": "test_that_send_simple_message_creates_the_appropriate_request",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sample-platform-master/tests/TestRun.py": {
        "mock_application.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRun.test_load_secret_keys_files_present": {
            "name": "test_load_secret_keys_files_present",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRun.test_load_secret_keys_secrets_not_present": {
            "name": "test_load_secret_keys_secrets_not_present",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRun.test_load_secret_keys_csrf_not_present": {
            "name": "test_load_secret_keys_csrf_not_present",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sample-platform-master/tests/TestUtility.py": {
        "TestUtility.test_serve_file_download": {
            "name": "test_serve_file_download",
            "location": 12,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_path": []
            }
        }
    },
    "sample-platform-master/tests/__init__.py": {},
    "sample-platform-master/tests/test_auth/TestControllers.py": {
        "MockUser.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "None"
                ],
                "name": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "email": [
                    "None",
                    "Optional[str]",
                    "int",
                    "str",
                    "bool"
                ],
                "password": [
                    "None",
                    "Optional[str]",
                    "int",
                    "str",
                    "bool"
                ],
                "github_token": [
                    "None",
                    "Optional[str]",
                    "int",
                    "str",
                    "bool"
                ],
                "role": [
                    "None",
                    "Optional[str]",
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "TestSignUp.test_if_email_signup_form_renders": {
            "name": "test_if_email_signup_form_renders",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSignUp.test_blank_email": {
            "name": "test_blank_email",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSignUp.test_invalid_email_address": {
            "name": "test_invalid_email_address",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSignUp.test_existing_email_signup": {
            "name": "test_existing_email_signup",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSignUp.test_valid_email_signup": {
            "name": "test_valid_email_signup",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSignUp.signup": {
            "name": "signup",
            "location": 72,
            "return": [
                "Optional[int]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "dict[str, str]",
                    "Optional[Dict[str, str]]",
                    "str",
                    "None",
                    "Optional[List[Any]]",
                    "list[typing.Any]",
                    "Optional[bool]",
                    "bool",
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        },
        "TestLogin.test_not_show_login_user_logged_in": {
            "name": "test_not_show_login_user_logged_in",
            "location": 81,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_flash": []
            }
        },
        "CompleteSignUp.setUp": {
            "name": "setUp",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompleteSignUp.test_if_link_expired": {
            "name": "test_if_link_expired",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompleteSignUp.test_if_wrong_link": {
            "name": "test_if_wrong_link",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompleteSignUp.test_if_valid_link": {
            "name": "test_if_valid_link",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompleteSignUp.test_if_password_is_blank": {
            "name": "test_if_password_is_blank",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompleteSignUp.test_if_password_length_is_invalid": {
            "name": "test_if_password_length_is_invalid",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompleteSignUp.test_if_passwords_dont_match": {
            "name": "test_if_passwords_dont_match",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompleteSignUp.complete_signup": {
            "name": "complete_signup",
            "location": 157,
            "return": [
                "Optional[int]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "str",
                    "bytes",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "expires": [
                    "str",
                    "bytes",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "mac": [
                    "str",
                    "bytes",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "name": [
                    "typing.Text",
                    "str",
                    "bytes",
                    "Dict[str, Any]"
                ],
                "password": [
                    "typing.Text",
                    "str",
                    "bytes",
                    "Dict[str, Any]"
                ],
                "password_repeat": [
                    "typing.Text",
                    "str",
                    "bytes",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestLogOut.test_if_logout_redirects_to_login": {
            "name": "test_if_logout_redirects_to_login",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGitHubFunctions.test_fetch_username_from_none_token": {
            "name": "test_fetch_username_from_none_token",
            "location": 181,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_user_model": [
                    "mock.Mock",
                    "tests.async_mock.Mock"
                ],
                "mock_g": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "core_lib.core.models.Venue",
                    "mock.Mock"
                ],
                "mock_session": []
            }
        },
        "TestGitHubFunctions.test_fetch_username_from_valid_token": {
            "name": "test_fetch_username_from_valid_token",
            "location": 195,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_user_model": [
                    "tests.async_mock.Mock",
                    "mock.Mock"
                ],
                "mock_g": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "core_lib.core.models.Venue",
                    "mock.Mock"
                ],
                "mock_session": []
            }
        },
        "TestGitHubFunctions.test_fetch_username_from_token_exception": {
            "name": "test_fetch_username_from_token_exception",
            "location": 210,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_user_model": [
                    "tests.async_mock.Mock",
                    "mock.Mock"
                ],
                "mock_g": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "core_lib.core.models.Venue",
                    "mock.Mock"
                ],
                "mock_session": []
            }
        },
        "TestGitHubFunctions.test_github_callback_empty_post": {
            "name": "test_github_callback_empty_post",
            "location": 223,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_post": []
            }
        },
        "TestGitHubFunctions.test_github_callback_empty_get": {
            "name": "test_github_callback_empty_get",
            "location": 232,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_post": []
            }
        },
        "TestGitHubFunctions.test_github_callback_incomplete_get": {
            "name": "test_github_callback_incomplete_get",
            "location": 243,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_post": [],
                "mock_g": [],
                "mock_user_model": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestGitHubFunctions.test_github_callback_valid_get": {
            "name": "test_github_callback_valid_get",
            "location": 259,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_post": [],
                "mock_g": [],
                "mock_user_model": [
                    "mock.MagicMock",
                    "mock.Mock"
                ]
            }
        },
        "TestGitHubFunctions.test_github_redirect": {
            "name": "test_github_redirect",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Miscellaneous.test_github_token_validity": {
            "name": "test_github_token_validity",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManageAccount.test_edit_username": {
            "name": "test_edit_username",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManageAccount.test_edit_email": {
            "name": "test_edit_email",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManageAccount.test_edit_invalid_email": {
            "name": "test_edit_invalid_email",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManageAccount.test_send_reset_email": {
            "name": "test_send_reset_email",
            "location": 359,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_app": [
                    "mock.Mock"
                ],
                "mock_mailer": [
                    "mock.Mock"
                ],
                "mock_flash": [
                    "mock.Mock"
                ],
                "mock_hash": [
                    "mock.Mock"
                ],
                "mock_url_for": [
                    "mock.Mock"
                ]
            }
        },
        "ManageAccount.test_send_reset_email_fail": {
            "name": "test_send_reset_email_fail",
            "location": 377,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_app": [
                    "mock.Mock"
                ],
                "mock_mailer": [],
                "mock_flash": [
                    "mock.Mock"
                ],
                "mock_hash": [
                    "mock.Mock"
                ],
                "mock_url_for": [
                    "mock.Mock"
                ]
            }
        },
        "ManageAccount.test_account_reset_get": {
            "name": "test_account_reset_get",
            "location": 390,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManageAccount.test_account_reset_post_user_none": {
            "name": "test_account_reset_post_user_none",
            "location": 401,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_user_model": [
                    "mock.Mock"
                ],
                "mock_mail": [
                    "mock.Mock"
                ],
                "mock_flash": [
                    "mock.Mock"
                ]
            }
        },
        "ManageAccount.test_account_reset_post_user": {
            "name": "test_account_reset_post_user",
            "location": 419,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_user_model": [],
                "mock_mail": [
                    "mock.Mock"
                ],
                "mock_flash": [
                    "mock.Mock"
                ]
            }
        },
        "ManageAccount.test_complete_reset_expired": {
            "name": "test_complete_reset_expired",
            "location": 436,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_time": [],
                "mock_flash": []
            }
        },
        "ManageAccount.test_complete_reset_get": {
            "name": "test_complete_reset_get",
            "location": 453,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_time": [],
                "mock_flash": [
                    "mock.Mock"
                ],
                "mock_hmac": [
                    "mock.Mock"
                ],
                "mock_user": [
                    "mock.Mock"
                ]
            }
        },
        "ManageAccount.test_complete_reset_post_valid": {
            "name": "test_complete_reset_post_valid",
            "location": 476,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_g": [
                    "mock.Mock"
                ],
                "mock_form": [
                    "mock.Mock"
                ],
                "mock_time": [],
                "mock_flash": [
                    "mock.Mock"
                ],
                "mock_hmac": [
                    "mock.Mock"
                ],
                "mock_user": [
                    "mock.Mock"
                ]
            }
        },
        "ManageAccount.test_complete_signup_expired": {
            "name": "test_complete_signup_expired",
            "location": 502,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_time": [],
                "mock_flash": []
            }
        },
        "ManageAccount.test_complete_signup_user_already_exists": {
            "name": "test_complete_signup_user_already_exists",
            "location": 519,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_time": [],
                "mock_hmac": [
                    "mock.Mock"
                ],
                "mock_flash": [],
                "mock_user": [
                    "mock.Mock"
                ]
            }
        },
        "ManageAccount.test_complete_signup": {
            "name": "test_complete_signup",
            "location": 542,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_g": [],
                "mock_form": [
                    "mock.Mock"
                ],
                "mock_time": [],
                "mock_hmac": [
                    "mock.Mock"
                ],
                "mock_flash": [
                    "mock.Mock"
                ],
                "mock_user": [
                    "mock.Mock",
                    "flask.Flask"
                ]
            }
        },
        "ManageUsers.test_user_view_not_loggen_in": {
            "name": "test_user_view_not_loggen_in",
            "location": 568,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_g": [
                    "mock.Mock"
                ]
            }
        },
        "ManageUsers.test_user_view_wrong_user": {
            "name": "test_user_view_wrong_user",
            "location": 581,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_g": [],
                "mock_login": [
                    "mock.Mock",
                    "mock.MagicMock"
                ]
            }
        },
        "ManageUsers.test_user_view_non_existent_user": {
            "name": "test_user_view_non_existent_user",
            "location": 593,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_user": [
                    "mock.MagicMock"
                ],
                "mock_g": [
                    "mock.MagicMock"
                ],
                "mock_login": [
                    "mock.Mock"
                ]
            }
        },
        "ManageUsers.test_user_reset_wrong_user": {
            "name": "test_user_reset_wrong_user",
            "location": 627,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_g": [],
                "mock_login": [
                    "mock.Mock",
                    "mock.MagicMock"
                ]
            }
        },
        "ManageUsers.test_user_role_wrong_user": {
            "name": "test_user_role_wrong_user",
            "location": 638,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_g": [],
                "mock_login": [
                    "mock.Mock",
                    "mock.MagicMock"
                ]
            }
        },
        "ManageUsers.test_user_deactivate_wrong_user": {
            "name": "test_user_deactivate_wrong_user",
            "location": 649,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_g": [],
                "mock_login": [
                    "mock.Mock",
                    "mock.MagicMock"
                ]
            }
        },
        "ManageUsers.test_user_deactivate_non_existent_user": {
            "name": "test_user_deactivate_non_existent_user",
            "location": 661,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_g": [
                    "mock.MagicMock"
                ],
                "mock_login": [
                    "mock.MagicMock",
                    "mock.Mock"
                ],
                "mock_user": [
                    "mock.MagicMock"
                ]
            }
        },
        "ManageUsers.test_user_deactivate_existent_user": {
            "name": "test_user_deactivate_existent_user",
            "location": 676,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_g": [
                    "mock.Mock"
                ],
                "mock_login": [
                    "mock.Mock"
                ],
                "mock_user": [
                    "mock.Mock",
                    "flask.Flask"
                ],
                "mock_form": [
                    "mock.Mock"
                ],
                "mock_url_for": [
                    "mock.Mock"
                ]
            }
        }
    },
    "sample-platform-master/tests/test_auth/TestForms.py": {
        "Field.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "bytes",
                    "dict[str, typing.Any]",
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "list",
                    "list[]",
                    "Optional[Dict[str, Any]]",
                    "None"
                ]
            }
        },
        "TestForm.test_unique_username": {
            "name": "test_unique_username",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestForm.test_empty_invalid_password": {
            "name": "test_empty_invalid_password",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestForm.test_less_than_min_length_invalid_password": {
            "name": "test_less_than_min_length_invalid_password",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestForm.test_more_than_max_length_invalid_password": {
            "name": "test_more_than_max_length_invalid_password",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestForm.test_valid_password": {
            "name": "test_valid_password",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sample-platform-master/tests/test_auth/__init__.py": {},
    "sample-platform-master/tests/test_ci/TestControllers.py": {
        "MockKVM.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "list[str]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "MockPlatform.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "platform": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "MockFork.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockTest.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_comment_info_handles_variant_files_correctly": {
            "name": "test_comment_info_handles_variant_files_correctly",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_comment_info_handles_invalid_variants_correctly": {
            "name": "test_comment_info_handles_invalid_variants_correctly",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_start_platform_none_specified": {
            "name": "test_start_platform_none_specified",
            "location": 116,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_log": [
                    "unittesmock.Mock",
                    "mock.Mock",
                    "unittesmock.MagicMock"
                ],
                "mock_process": [
                    "unittesmock.Mock",
                    "unittesmock.MagicMock",
                    "mock.MagicMock"
                ]
            }
        },
        "TestControllers.test_start_platform_linux_specified": {
            "name": "test_start_platform_linux_specified",
            "location": 125,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_log": [
                    "unittesmock.MagicMock",
                    "unittesmock.Mock",
                    "mock.Mock"
                ],
                "mock_process": [
                    "unittesmock.Mock",
                    "unittesmock.MagicMock",
                    "mock.MagicMock"
                ]
            }
        },
        "TestControllers.test_start_platform_windows_specified": {
            "name": "test_start_platform_windows_specified",
            "location": 135,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_log": [
                    "unittesmock.Mock",
                    "unittesmock.MagicMock",
                    "mock.Mock"
                ],
                "mock_process": [
                    "unittesmock.Mock",
                    "unittesmock.MagicMock",
                    "mock.MagicMock"
                ]
            }
        },
        "TestControllers.test_kvm_processor_empty_kvm_name": {
            "name": "test_kvm_processor_empty_kvm_name",
            "location": 144,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_log": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "TestControllers.test_kvm_processor_maintenance_mode": {
            "name": "test_kvm_processor_maintenance_mode",
            "location": 156,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_maintenance": [
                    "unittesmock.MagicMock",
                    "unittesmock.Mock"
                ],
                "mock_log": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "TestControllers.test_kvm_processor_conn_fail": {
            "name": "test_kvm_processor_conn_fail",
            "location": 176,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_maintenance": [
                    "unittesmock.MagicMock",
                    "unittesmock.Mock"
                ],
                "mock_log": [
                    "unittesmock.MagicMock",
                    "unittesmock.Mock"
                ],
                "mock_libvirt": [
                    "unittesmock.Mock",
                    "unittesmock.MagicMock",
                    "mock.MagicMock"
                ]
            }
        },
        "TestControllers.test_set_avg_time_first": {
            "name": "test_set_avg_time_first",
            "location": 192,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_g": [
                    "unittesmock.MagicMock",
                    "unittesmock.Mock"
                ],
                "mock_gd": [
                    "unittesmock.MagicMock",
                    "unittesmock.Mock",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "TestControllers.test_set_avg_time": {
            "name": "test_set_avg_time",
            "location": 208,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_g": [
                    "unittesmock.MagicMock",
                    "unittesmock.Mock"
                ],
                "mock_gd": [
                    "unittesmock.MagicMock",
                    "unittesmock.Mock"
                ],
                "mock_int": [
                    "unittesmock.Mock",
                    "unittesmock.MagicMock"
                ]
            }
        },
        "TestControllers.test_comments_successfully_in_passed_pr_test": {
            "name": "test_comments_successfully_in_passed_pr_test",
            "location": 222,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "git_mock": [
                    "unittesmock.Mock",
                    "unittesmock.MagicMock"
                ]
            }
        },
        "TestControllers.test_comments_successfuly_in_failed_pr_test": {
            "name": "test_comments_successfuly_in_failed_pr_test",
            "location": 246,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "git_mock": [
                    "unittesmock.Mock",
                    "unittesmock.MagicMock"
                ]
            }
        },
        "TestControllers.test_check_main_repo_returns_in_false_url": {
            "name": "test_check_main_repo_returns_in_false_url",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_customize_tests_run_on_fork_if_no_remote": {
            "name": "test_customize_tests_run_on_fork_if_no_remote",
            "location": 285,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_etree": [
                    "mock.Mock",
                    "unittesmock.MagicMock"
                ],
                "mock_open": [
                    "mock.Mock",
                    "unittesmock.MagicMock"
                ],
                "mock_rmtree": [
                    "mock.Mock",
                    "unittesmock.MagicMock"
                ],
                "mock_libvirt": [
                    "unittesmock.MagicMock",
                    "mock.Mock",
                    "unittesmock.Mock"
                ],
                "mock_repo": [
                    "unittesmock.MagicMock",
                    "mock.Mock",
                    "unittesmock.Mock"
                ],
                "mock_git": [
                    "mock.Mock",
                    "unittesmock.MagicMock"
                ]
            }
        },
        "TestControllers.test_customize_tests_run_on_fork_if_remote_exist": {
            "name": "test_customize_tests_run_on_fork_if_remote_exist",
            "location": 321,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_etree": [
                    "mock.Mock"
                ],
                "mock_open": [
                    "mock.Mock"
                ],
                "mock_rmtree": [
                    "mock.Mock"
                ],
                "mock_libvirt": [
                    "unittesmock.MagicMock",
                    "unittesmock.Mock"
                ],
                "mock_repo": [
                    "unittesmock.MagicMock",
                    "unittesmock.Mock"
                ],
                "mock_git": [
                    "mock.Mock"
                ]
            }
        },
        "TestControllers.test_customize_tests_run_on_selected_regression_tests": {
            "name": "test_customize_tests_run_on_selected_regression_tests",
            "location": 356,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_etree": [
                    "mock.Mock",
                    "unittesmock.Mock"
                ],
                "mock_open": [
                    "mock.Mock",
                    "unittesmock.MagicMock"
                ],
                "mock_rmtree": [
                    "mock.Mock",
                    "unittesmock.MagicMock"
                ],
                "mock_libvirt": [
                    "unittesmock.MagicMock",
                    "mock.Mock",
                    "unittesmock.Mock"
                ],
                "mock_repo": [
                    "unittesmock.MagicMock",
                    "mock.Mock",
                    "unittesmock.Mock"
                ],
                "mock_git": [
                    "mock.Mock",
                    "unittesmock.MagicMock"
                ]
            }
        },
        "TestControllers.test_customizedtest_added_to_queue": {
            "name": "test_customizedtest_added_to_queue",
            "location": 386,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_inform_mailing_list": {
            "name": "test_inform_mailing_list",
            "location": 405,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_html_issue_body": [
                    "unittesmock.Mock",
                    "unittesmock.MagicMock"
                ],
                "mock_email": [
                    "tuple[typing.Union[str,M]]",
                    "unittesmock.Mock",
                    "unittesmock.MagicMock",
                    "Tuple[str, mock.Mock]",
                    "mock.MagicMock"
                ]
            }
        },
        "TestControllers.test_get_html_issue_body": {
            "name": "test_get_html_issue_body",
            "location": 429,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mock_markdown": [
                    "unittesmock.MagicMock",
                    "unittesmock.Mock"
                ]
            }
        },
        "TestControllers.test_add_blocked_users": {
            "name": "test_add_blocked_users",
            "location": 444,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_request": [
                    "unittesmock.MagicMock",
                    "unittesmock.Mock",
                    "mock.MagicMock",
                    "mock.Mock"
                ]
            }
        },
        "TestControllers.test_add_blocked_users_wrong_id": {
            "name": "test_add_blocked_users_wrong_id",
            "location": 456,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_request": [
                    "unittesmock.MagicMock",
                    "unittesmock.Mock",
                    "mock.MagicMock",
                    "mock.Mock"
                ]
            }
        },
        "TestControllers.test_add_blocked_users_empty_id": {
            "name": "test_add_blocked_users_empty_id",
            "location": 466,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_request": [
                    "unittesmock.MagicMock",
                    "unittesmock.Mock",
                    "mock.MagicMock",
                    "mock.Mock"
                ]
            }
        },
        "TestControllers.test_add_blocked_users_already_exists": {
            "name": "test_add_blocked_users_already_exists",
            "location": 477,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_request": [
                    "unittesmock.MagicMock",
                    "unittesmock.Mock",
                    "mock.MagicMock",
                    "mock.Mock"
                ]
            }
        },
        "TestControllers.test_remove_blocked_users": {
            "name": "test_remove_blocked_users",
            "location": 492,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_request": [
                    "unittesmock.MagicMock",
                    "mock.Mock",
                    "unittesmock.Mock",
                    "mock.MagicMock"
                ]
            }
        },
        "TestControllers.test_remove_blocked_users_wrong_id": {
            "name": "test_remove_blocked_users_wrong_id",
            "location": 509,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_request": [
                    "unittesmock.MagicMock",
                    "mock.Mock",
                    "mock.MagicMock",
                    "unittesmock.Mock"
                ]
            }
        },
        "TestControllers.test_remove_blocked_users_invalid_id": {
            "name": "test_remove_blocked_users_invalid_id",
            "location": 521,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_request": [
                    "unittesmock.MagicMock",
                    "mock.Mock",
                    "mock.MagicMock",
                    "unittesmock.Mock"
                ]
            }
        },
        "TestControllers.test_webhook_wrong_url": {
            "name": "test_webhook_wrong_url",
            "location": 531,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_request": [
                    "unittesmock.MagicMock",
                    "unittesmock.Mock",
                    "mock.MagicMock"
                ]
            }
        },
        "TestControllers.test_webhook_ping": {
            "name": "test_webhook_ping",
            "location": 543,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_request": [
                    "unittesmock.MagicMock",
                    "mock.Mock",
                    "unittesmock.Mock",
                    "mock.MagicMock"
                ]
            }
        },
        "TestControllers.test_webhook_release": {
            "name": "test_webhook_release",
            "location": 555,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_request": [
                    "unittesmock.MagicMock",
                    "mock.Mock",
                    "unittesmock.Mock",
                    "mock.MagicMock"
                ]
            }
        },
        "TestControllers.test_webhook_release_edited": {
            "name": "test_webhook_release_edited",
            "location": 573,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_request": [
                    "unittesmock.MagicMock",
                    "mock.Mock",
                    "unittesmock.Mock",
                    "mock.MagicMock"
                ]
            }
        },
        "TestControllers.test_webhook_release_deleted": {
            "name": "test_webhook_release_deleted",
            "location": 595,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_request": [
                    "unittesmock.MagicMock",
                    "unittesmock.Mock",
                    "mock.MagicMock",
                    "mock.Mock"
                ]
            }
        },
        "TestControllers.test_webhook_prerelease": {
            "name": "test_webhook_prerelease",
            "location": 615,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_request": [
                    "unittesmock.MagicMock",
                    "mock.Mock",
                    "unittesmock.Mock",
                    "mock.MagicMock"
                ]
            }
        },
        "TestControllers.test_webhook_push_no_after": {
            "name": "test_webhook_push_no_after",
            "location": 634,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_request": [
                    "unittesmock.MagicMock",
                    "unittesmock.Mock",
                    "mock.MagicMock",
                    "mock.Mock"
                ]
            }
        },
        "TestControllers.test_webhook_push_valid": {
            "name": "test_webhook_push_valid",
            "location": 646,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_gd": [
                    "unittesmock.MagicMock"
                ],
                "mock_github": [
                    "unittesmock.Mock",
                    "unittesmock.MagicMock",
                    "mock.Mock"
                ],
                "mock_add_test_entry": [
                    "unittesmock.MagicMock",
                    "unittesmock.Mock",
                    "mock.Mock"
                ],
                "mock_request": [
                    "unittesmock.MagicMock",
                    "mock.Mock",
                    "unittesmock.Mock"
                ]
            }
        },
        "TestControllers.test_webhook_pr_closed": {
            "name": "test_webhook_pr_closed",
            "location": 660,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_request": [
                    "unittesmock.Mock",
                    "mock.Mock"
                ],
                "mock_test": [
                    "unittesmock.MagicMock",
                    "core_lib.core.models.Venue",
                    "unittesmock.Mock"
                ]
            }
        },
        "TestControllers.test_webhook_pr_opened_blocked": {
            "name": "test_webhook_pr_opened_blocked",
            "location": 681,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_request": [
                    "mock.Mock",
                    "unittesmock.Mock"
                ],
                "mock_github": [
                    "mock.Mock",
                    "unittesmock.Mock"
                ],
                "mock_blocked": []
            }
        },
        "TestControllers.test_webhook_pr_opened": {
            "name": "test_webhook_pr_opened",
            "location": 701,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_request": [
                    "mock.Mock",
                    "unittesmock.Mock",
                    "unittesmock.MagicMock"
                ],
                "mock_add_test_entry": [
                    "mock.Mock",
                    "unittesmock.Mock"
                ],
                "mock_github": [
                    "mock.Mock",
                    "unittesmock.Mock",
                    "unittesmock.MagicMock"
                ],
                "mock_blocked": [
                    "int",
                    "unittesmock.Mock",
                    "unittesmock.MagicMock"
                ]
            }
        },
        "TestControllers.test_webhook_workflow_run_requested_valid_workflow_name": {
            "name": "test_webhook_workflow_run_requested_valid_workflow_name",
            "location": 718,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_request": [
                    "unittesmock.Mock",
                    "mock.Mock",
                    "unittesmock.MagicMock"
                ],
                "mock_schedule_test": [
                    "unittesmock.MagicMock",
                    "unittesmock.Mock"
                ]
            }
        },
        "TestControllers.test_webhook_workflow_run_completed_successful_linux": {
            "name": "test_webhook_workflow_run_completed_successful_linux",
            "location": 731,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_request": [
                    "mock.Mock",
                    "unittesmock.Mock",
                    "unittesmock.MagicMock"
                ],
                "mock_queue_test": [
                    "unittesmock.MagicMock",
                    "unittesmock.Mock"
                ]
            }
        },
        "TestControllers.test_webhook_workflow_run_completed_successful_windows": {
            "name": "test_webhook_workflow_run_completed_successful_windows",
            "location": 766,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_request": [
                    "mock.Mock",
                    "unittesmock.Mock",
                    "unittesmock.MagicMock"
                ],
                "mock_queue_test": [
                    "unittesmock.MagicMock",
                    "unittesmock.Mock"
                ]
            }
        },
        "TestControllers.test_webhook_workflow_run_completed_failure": {
            "name": "test_webhook_workflow_run_completed_failure",
            "location": 801,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_request": [
                    "mock.Mock",
                    "unittesmock.Mock",
                    "unittesmock.MagicMock"
                ],
                "mock_deschedule_test": [
                    "unittesmock.MagicMock",
                    "unittesmock.Mock"
                ]
            }
        },
        "TestControllers.test_webhook_workflow_run_requested_invalid_workflow_name": {
            "name": "test_webhook_workflow_run_requested_invalid_workflow_name",
            "location": 836,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_request": [
                    "unittesmock.Mock",
                    "mock.Mock",
                    "mock.MagicMock",
                    "unittesmock.MagicMock"
                ],
                "mock_schedule_test": [
                    "unittesmock.MagicMock",
                    "unittesmock.Mock"
                ]
            }
        },
        "TestControllers.test_webhook_with_unrecognized_event": {
            "name": "test_webhook_with_unrecognized_event",
            "location": 851,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_github": [
                    "mock.Mock",
                    "unittesmock.MagicMock"
                ],
                "mock_schedule_test": [
                    "unittesmock.Mock",
                    "unittesmock.MagicMock",
                    "mock.Mock"
                ],
                "mock_deschedule_test": [
                    "unittesmock.Mock",
                    "unittesmock.MagicMock",
                    "mock.Mock"
                ],
                "mock_add_test_entry": [
                    "mock.Mock",
                    "unittesmock.Mock"
                ]
            }
        },
        "TestControllers.test_webhook_with_invalid_ci_signature": {
            "name": "test_webhook_with_invalid_ci_signature",
            "location": 865,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_github": [
                    "unittesmock.MagicMock",
                    "unittesmock.Mock",
                    "mock.Mock",
                    "mock.MagicMock"
                ],
                "mock_warning": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "TestControllers.test_webhook_workflow_run_completed_successful_pr_linux": {
            "name": "test_webhook_workflow_run_completed_successful_pr_linux",
            "location": 876,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_request": [
                    "mock.Mock",
                    "unittesmock.Mock",
                    "unittesmock.MagicMock"
                ],
                "mock_queue_test": [
                    "unittesmock.Mock",
                    "mock.Mock"
                ],
                "mock_blocked": [
                    "unittesmock.Mock",
                    "mock.Mock",
                    "unittesmock.MagicMock",
                    "flask.Flask",
                    "mock.MagicMock"
                ]
            }
        },
        "TestControllers.test_webhook_workflow_run_completed_successful_pr_windows": {
            "name": "test_webhook_workflow_run_completed_successful_pr_windows",
            "location": 927,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_request": [
                    "mock.Mock",
                    "unittesmock.MagicMock",
                    "unittesmock.Mock"
                ],
                "mock_queue_test": [
                    "unittesmock.Mock",
                    "mock.Mock"
                ],
                "mock_blocked": [
                    "unittesmock.MagicMock",
                    "mock.Mock",
                    "flask.Flask",
                    "mock.MagicMock"
                ]
            }
        },
        "TestControllers.test_webhook_workflow_run_completed_successful_pr_updated": {
            "name": "test_webhook_workflow_run_completed_successful_pr_updated",
            "location": 979,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_request": [
                    "mock.Mock",
                    "unittesmock.MagicMock",
                    "unittesmock.Mock"
                ],
                "mock_queue_test": [
                    "unittesmock.Mock",
                    "mock.Mock",
                    "unittesmock.MagicMock"
                ],
                "mock_blocked": [
                    "unittesmock.MagicMock",
                    "mock.MagicMock",
                    "unittesmock.Mock"
                ],
                "mock_deschedule_test": [
                    "unittesmock.Mock",
                    "mock.Mock",
                    "unittesmock.MagicMock"
                ]
            }
        },
        "TestControllers.test_start_ci_with_a_get_request": {
            "name": "test_start_ci_with_a_get_request",
            "location": 1021,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_queue_test_with_pull_request": {
            "name": "test_queue_test_with_pull_request",
            "location": 1029,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_debug": [
                    "unittesmock.MagicMock",
                    "unittesmock.Mock"
                ],
                "git_mock": [
                    "unittesmock.Mock",
                    "unittesmock.MagicMock"
                ]
            }
        },
        "TestControllers.test_schedule_test_function": {
            "name": "test_schedule_test_function",
            "location": 1042,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "git_mock": [
                    "unittesmock.Mock",
                    "unittesmock.MagicMock"
                ],
                "mock_debug": [
                    "unittesmock.MagicMock",
                    "unittesmock.Mock",
                    "mock.Mock"
                ],
                "mock_critical": [
                    "mock.Mock",
                    "unittesmock.MagicMock",
                    "unittesmock.Mock",
                    "mock.MagicMock"
                ]
            }
        },
        "TestControllers.test_deschedule_test_function_linux": {
            "name": "test_deschedule_test_function_linux",
            "location": 1057,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "git_mock": [
                    "unittesmock.Mock",
                    "unittesmock.MagicMock"
                ],
                "mock_debug": [
                    "unittesmock.MagicMock",
                    "unittesmock.Mock"
                ],
                "mock_critical": [
                    "mock.Mock",
                    "unittesmock.MagicMock",
                    "unittesmock.Mock",
                    "mock.MagicMock"
                ]
            }
        },
        "TestControllers.test_deschedule_test_function_windows": {
            "name": "test_deschedule_test_function_windows",
            "location": 1070,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "git_mock": [
                    "unittesmock.Mock",
                    "mock.Mock",
                    "unittesmock.MagicMock"
                ],
                "mock_debug": [
                    "unittesmock.MagicMock",
                    "unittesmock.Mock",
                    "mock.Mock"
                ],
                "mock_critical": [
                    "mock.Mock",
                    "unittesmock.MagicMock"
                ]
            }
        },
        "TestControllers.test_webhook_issue_opened": {
            "name": "test_webhook_issue_opened",
            "location": 1083,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_issue": [
                    "int",
                    "unittesmock.Mock"
                ],
                "mock_requests": [
                    "unittesmock.Mock",
                    "mock.Mock",
                    "unittesmock.MagicMock"
                ],
                "mock_mailing": [
                    "unittesmock.Mock",
                    "unittesmock.MagicMock"
                ]
            }
        },
        "TestControllers.test_github_api_error": {
            "name": "test_github_api_error",
            "location": 1098,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_critical": [
                    "unittesmock.MagicMock",
                    "unittesmock.Mock"
                ]
            }
        },
        "TestControllers.test_update_build_badge": {
            "name": "test_update_build_badge",
            "location": 1111,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_shutil": [
                    "unittesmock.MagicMock",
                    "unittesmock.Mock"
                ],
                "mock_check_repo": [
                    "unittesmock.MagicMock",
                    "unittesmock.Mock"
                ]
            }
        },
        "TestControllers.test_progress_reporter_no_test": {
            "name": "test_progress_reporter_no_test",
            "location": 1122,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_test": [
                    "unittesmock.MagicMock",
                    "unittesmock.Mock"
                ],
                "mock_request": [
                    "unittesmock.MagicMock",
                    "unittesmock.Mock",
                    "mock.Mock"
                ]
            }
        },
        "TestControllers.test_progress_reporter_progress_type_fail": {
            "name": "test_progress_reporter_progress_type_fail",
            "location": 1139,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_progress_type": [
                    "unittesmock.MagicMock",
                    "unittesmock.Mock"
                ],
                "mock_test": [
                    "unittesmock.MagicMock",
                    "mock.MagicMock"
                ],
                "mock_request": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "TestControllers.test_progress_reporter_progress_type": {
            "name": "test_progress_reporter_progress_type",
            "location": 1161,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_progress_type": [
                    "unittesmock.MagicMock",
                    "unittesmock.Mock"
                ],
                "mock_test": [
                    "unittesmock.MagicMock",
                    "mock.MagicMock"
                ],
                "mock_request": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "TestControllers.test_progress_reporter_equality_type": {
            "name": "test_progress_reporter_equality_type",
            "location": 1183,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_equality_type": [
                    "unittesmock.MagicMock",
                    "unittesmock.Mock"
                ],
                "mock_test": [
                    "unittesmock.MagicMock",
                    "mock.MagicMock"
                ],
                "mock_request": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "TestControllers.test_progress_reporter_logupload_type_empty": {
            "name": "test_progress_reporter_logupload_type_empty",
            "location": 1205,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_logupload_type": [
                    "unittesmock.Mock",
                    "unittesmock.MagicMock",
                    "mock.Mock"
                ],
                "mock_test": [
                    "unittesmock.MagicMock",
                    "mock.MagicMock"
                ],
                "mock_request": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "TestControllers.test_progress_reporter_logupload_type": {
            "name": "test_progress_reporter_logupload_type",
            "location": 1227,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_logupload_type": [
                    "unittesmock.MagicMock",
                    "unittesmock.Mock"
                ],
                "mock_test": [
                    "unittesmock.MagicMock",
                    "mock.MagicMock"
                ],
                "mock_request": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "TestControllers.test_progress_reporter_upload_type_empty": {
            "name": "test_progress_reporter_upload_type_empty",
            "location": 1249,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_upload_type": [
                    "unittesmock.Mock",
                    "mock.Mock",
                    "unittesmock.MagicMock"
                ],
                "mock_test": [
                    "unittesmock.MagicMock",
                    "mock.MagicMock"
                ],
                "mock_request": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "TestControllers.test_progress_reporter_upload_type": {
            "name": "test_progress_reporter_upload_type",
            "location": 1271,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_upload_type": [
                    "unittesmock.MagicMock",
                    "unittesmock.Mock",
                    "mock.Mock"
                ],
                "mock_test": [
                    "unittesmock.MagicMock",
                    "mock.MagicMock"
                ],
                "mock_request": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "TestControllers.test_progress_reporter_finish_type": {
            "name": "test_progress_reporter_finish_type",
            "location": 1293,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_finish_type": [
                    "unittesmock.MagicMock",
                    "unittesmock.Mock"
                ],
                "mock_test": [
                    "unittesmock.MagicMock",
                    "mock.MagicMock"
                ],
                "mock_request": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "TestControllers.test_equality_type_request_rto_none": {
            "name": "test_equality_type_request_rto_none",
            "location": 1313,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_rto": [
                    "unittesmock.MagicMock",
                    "unittesmock.Mock",
                    "core_lib.core.models.Venue",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "TestControllers.test_equality_type_request_rto_exists": {
            "name": "test_equality_type_request_rto_exists",
            "location": 1334,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_rto": [
                    "core_lib.core.models.Venue",
                    "unittesmock.Mock"
                ],
                "mock_result_file": [
                    "unittesmock.Mock",
                    "unittesmock.MagicMock"
                ],
                "mock_g": [
                    "unittesmock.MagicMock",
                    "unittesmock.Mock"
                ]
            }
        },
        "TestControllers.test_logupload_type_request_empty": {
            "name": "test_logupload_type_request_empty",
            "location": 1355,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_filename": [
                    "unittesmock.MagicMock",
                    "unittesmock.Mock"
                ]
            }
        },
        "TestControllers.test_logupload_type_request": {
            "name": "test_logupload_type_request",
            "location": 1371,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_filename": [
                    "unittesmock.Mock",
                    "mock.Mock"
                ],
                "mock_os": [
                    "tuple[typing.Union[str,M]]",
                    "unittesmock.MagicMock",
                    "unittesmock.Mock",
                    "Tuple[str, mock.Mock]"
                ]
            }
        },
        "TestControllers.test_upload_type_request_empty": {
            "name": "test_upload_type_request_empty",
            "location": 1389,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_filename": [
                    "unittesmock.MagicMock",
                    "unittesmock.Mock"
                ]
            }
        },
        "TestControllers.test_upload_type_request": {
            "name": "test_upload_type_request",
            "location": 1414,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_filename": [
                    "unittesmock.Mock",
                    "mock.Mock",
                    "unittesmock.MagicMock"
                ],
                "mock_os": [
                    "unittesmock.MagicMock",
                    "unittesmock.Mock"
                ],
                "mock_open": [
                    "unittesmock.Mock",
                    "mock.Mock",
                    "unittesmock.MagicMock"
                ],
                "mock_iter": [
                    "unittesmock.Mock",
                    "mock.Mock"
                ],
                "mock_g": [
                    "unittesmock.Mock",
                    "unittesmock.MagicMock"
                ],
                "mock_rto": [
                    "unittesmock.MagicMock",
                    "unittesmock.Mock",
                    "flask.Flask"
                ],
                "mock_result_file": [
                    "unittesmock.Mock"
                ],
                "mock_hashlib": [
                    "unittesmock.Mock",
                    "unittesmock.MagicMock",
                    "mock.Mock"
                ]
            }
        },
        "TestControllers.test_finish_type_request": {
            "name": "test_finish_type_request",
            "location": 1451,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_g": [
                    "unittesmock.Mock",
                    "unittesmock.MagicMock"
                ],
                "mock_result": [
                    "unittesmock.Mock"
                ],
                "mock_rt": [
                    "dict[, ]",
                    "unittesmock.MagicMock",
                    "core_lib.core.models.Venue",
                    "dict",
                    "unittesmock.Mock"
                ]
            }
        },
        "TestControllers.test_finish_type_request_with_error": {
            "name": "test_finish_type_request_with_error",
            "location": 1474,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_g": [
                    "unittesmock.Mock",
                    "unittesmock.MagicMock",
                    "mock.Mock"
                ],
                "mock_result": [
                    "unittesmock.Mock"
                ],
                "mock_rt": [
                    "unittesmock.MagicMock",
                    "core_lib.core.models.Venue"
                ]
            }
        },
        "TestControllers.test_in_maintenance_mode_ValueError": {
            "name": "test_in_maintenance_mode_ValueError",
            "location": 1498,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_in_maintenance_mode_linux": {
            "name": "test_in_maintenance_mode_linux",
            "location": 1506,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_in_maintenance_mode_windows": {
            "name": "test_in_maintenance_mode_windows",
            "location": 1514,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.generate_header": {
            "name": "generate_header",
            "location": 1523,
            "return": [
                "float",
                "Dict[str, Any]",
                "typing.Type",
                "tuple[int]",
                "Dict[str, Union[str, int]]",
                "list[int]",
                "dict",
                "list[]",
                "Dict[str, Dict[str, str]]",
                "List[dict]",
                "games.models.Game",
                "Dict[str, Type]",
                "str"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "Optional[bytes]",
                    "Union[None, int, str]",
                    "None",
                    "Optional[Union[str, int]]",
                    "int",
                    "str"
                ],
                "event": [
                    "int"
                ],
                "ci_key": [
                    "Optional[bytes]",
                    "None",
                    "bytes",
                    "Union[None, int, str]",
                    "Optional[Union[str, int]]",
                    "int",
                    "str"
                ]
            }
        },
        "TestControllers.test_kvm_processor_maintenance_mode.MockMaintence.__init__": {
            "name": "__init__",
            "location": 161,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_webhook_pr_closed.MockTest.__init__": {
            "name": "__init__",
            "location": 663,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_webhook_pr_opened_blocked.MockTest.__init__": {
            "name": "__init__",
            "location": 684,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_webhook_workflow_run_completed_successful_linux.MockedRepository.statuses": {
            "name": "statuses",
            "location": 743,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_webhook_workflow_run_completed_successful_linux.MockedGitHub.repos": {
            "name": "repos",
            "location": 752,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_webhook_workflow_run_completed_successful_windows.MockedRepository.statuses": {
            "name": "statuses",
            "location": 778,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_webhook_workflow_run_completed_successful_windows.MockedGitHub.repos": {
            "name": "repos",
            "location": 787,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_webhook_workflow_run_completed_failure.MockedRepository.statuses": {
            "name": "statuses",
            "location": 813,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_webhook_workflow_run_completed_failure.MockedGitHub.repos": {
            "name": "repos",
            "location": 822,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_webhook_workflow_run_completed_successful_pr_linux.MockedRepository.statuses": {
            "name": "statuses",
            "location": 889,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_webhook_workflow_run_completed_successful_pr_linux.MockedGitHub.repos": {
            "name": "repos",
            "location": 905,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_webhook_workflow_run_completed_successful_pr_windows.MockedRepository.statuses": {
            "name": "statuses",
            "location": 940,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_webhook_workflow_run_completed_successful_pr_windows.MockedGitHub.repos": {
            "name": "repos",
            "location": 956,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_webhook_workflow_run_completed_successful_pr_updated.MockedRepository.statuses": {
            "name": "statuses",
            "location": 993,
            "return": [
                "None",
                "str",
                "List[Dict[str, Any]]",
                "django.db.models.query.QuerySet",
                "Union[server.models.Bike, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_webhook_workflow_run_completed_successful_pr_updated.MockedGitHub.repos": {
            "name": "repos",
            "location": 1009,
            "return": [
                "tests.basilisp.helpers.CompileFn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_webhook_workflow_run_completed_successful_pr_linux.MockedRepository.pulls.get": {
            "name": "get",
            "location": 901,
            "return": [],
            "arguments": {}
        },
        "TestControllers.test_webhook_workflow_run_completed_successful_pr_windows.MockedRepository.pulls.get": {
            "name": "get",
            "location": 952,
            "return": [],
            "arguments": {}
        },
        "TestControllers.test_webhook_workflow_run_completed_successful_pr_updated.MockedRepository.pulls.get": {
            "name": "get",
            "location": 1005,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "OrderedDict",
                "str"
            ],
            "arguments": {}
        },
        "TestControllers.test_webhook_workflow_run_completed_successful_linux.MockedRepository.actions.runs.get": {
            "name": "get",
            "location": 748,
            "return": [],
            "arguments": {}
        },
        "TestControllers.test_webhook_workflow_run_completed_successful_windows.MockedRepository.actions.runs.get": {
            "name": "get",
            "location": 783,
            "return": [],
            "arguments": {}
        },
        "TestControllers.test_webhook_workflow_run_completed_failure.MockedRepository.actions.runs.get": {
            "name": "get",
            "location": 818,
            "return": [],
            "arguments": {}
        },
        "TestControllers.test_webhook_workflow_run_completed_successful_pr_linux.MockedRepository.statuses.gh_status.post": {
            "name": "post",
            "location": 891,
            "return": [],
            "arguments": {}
        },
        "TestControllers.test_webhook_workflow_run_completed_successful_pr_linux.MockedRepository.actions.runs.get": {
            "name": "get",
            "location": 897,
            "return": [],
            "arguments": {}
        },
        "TestControllers.test_webhook_workflow_run_completed_successful_pr_windows.MockedRepository.statuses.gh_status.post": {
            "name": "post",
            "location": 942,
            "return": [],
            "arguments": {}
        },
        "TestControllers.test_webhook_workflow_run_completed_successful_pr_windows.MockedRepository.actions.runs.get": {
            "name": "get",
            "location": 948,
            "return": [],
            "arguments": {}
        },
        "TestControllers.test_webhook_workflow_run_completed_successful_pr_updated.MockedRepository.statuses.gh_status.post": {
            "name": "post",
            "location": 995,
            "return": [
                "Optional[int]",
                "Optional[bool]",
                "Optional[dbadapters.base.relation.BaseRelation]",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "TestControllers.test_webhook_workflow_run_completed_successful_pr_updated.MockedRepository.actions.runs.get": {
            "name": "get",
            "location": 1001,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        }
    },
    "sample-platform-master/tests/test_ci/TestMarkdown.py": {
        "TestMarkdown.test_heading": {
            "name": "test_heading",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMarkdown.test_strong_text": {
            "name": "test_strong_text",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMarkdown.test_italics_text": {
            "name": "test_italics_text",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMarkdown.test_link_text": {
            "name": "test_link_text",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMarkdown.test_list_text": {
            "name": "test_list_text",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMarkdown.test_code_text": {
            "name": "test_code_text",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMarkdown.test_quote_text": {
            "name": "test_quote_text",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMarkdown.test_extra_link_new_tab": {
            "name": "test_extra_link_new_tab",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMarkdown.test_extra_task_list": {
            "name": "test_extra_task_list",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMarkdown.test_extra_code_friendliness": {
            "name": "test_extra_code_friendliness",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sample-platform-master/tests/test_ci/__init__.py": {},
    "sample-platform-master/tests/test_customized/TestControllers.py": {
        "return_git_user": {
            "name": "return_git_user",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "TestControllers.test_customize_test_page_fails_with_no_permission": {
            "name": "test_customize_test_page_fails_with_no_permission",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_user": [
                    "mock.Mock"
                ],
                "mock_git": [
                    "mock.Mock"
                ],
                "mock_requests": [
                    "mock.Mock"
                ]
            }
        },
        "TestControllers.test_customize_test_page_loads_with_permission": {
            "name": "test_customize_test_page_loads_with_permission",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_user": [
                    "mock.Mock"
                ],
                "mock_git": [
                    "mock.Mock"
                ],
                "mock_requests": [
                    "mock.Mock"
                ]
            }
        },
        "TestControllers.test_customize_test_fails_with_wrong_commit_hash": {
            "name": "test_customize_test_fails_with_wrong_commit_hash",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_user": [
                    "mock.Mock"
                ],
                "mock_git": [
                    "mock.Mock"
                ],
                "mock_requests": [
                    "mock.Mock"
                ]
            }
        },
        "TestControllers.test_customize_test_creates_with_right_test_commit": {
            "name": "test_customize_test_creates_with_right_test_commit",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_user": [
                    "mock.Mock"
                ],
                "mock_git": [
                    "mock.Mock"
                ],
                "mock_requests": []
            }
        },
        "TestControllers.test_customize_test_creates_fork_if_not_exists": {
            "name": "test_customize_test_creates_fork_if_not_exists",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_user": [
                    "mock.Mock"
                ],
                "mock_git": [
                    "mock.Mock"
                ],
                "mock_requests": [
                    "mock.Mock"
                ]
            }
        },
        "TestControllers.test_customize_test_creates_with_multiple_platforms": {
            "name": "test_customize_test_creates_with_multiple_platforms",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_user": [
                    "mock.Mock"
                ],
                "mock_git": [
                    "mock.Mock"
                ],
                "mock_requests": [
                    "mock.Mock"
                ]
            }
        },
        "TestControllers.test_customize_test_creates_with_select_arr": {
            "name": "test_customize_test_creates_with_select_arr",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_user": [
                    "mock.Mock"
                ],
                "mock_git": [],
                "mock_requests": [
                    "mock.Mock"
                ]
            }
        },
        "TestControllers.test_customize_regression_tests_load": {
            "name": "test_customize_regression_tests_load",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_user": [
                    "mock.Mock"
                ],
                "mock_git": [
                    "mock.Mock"
                ],
                "mock_requests": [
                    "mock.Mock"
                ]
            }
        },
        "TestControllers.test_error_on_no_regression_test": {
            "name": "test_error_on_no_regression_test",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_user": [
                    "mock.Mock"
                ],
                "mock_git": [
                    "mock.Mock"
                ],
                "mock_requests": [
                    "mock.Mock"
                ]
            }
        },
        "TestControllers.test_customize_test_creates_with_customize_regression_tests": {
            "name": "test_customize_test_creates_with_customize_regression_tests",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_user": [
                    "mock.Mock"
                ],
                "mock_git": [
                    "mock.Mock"
                ],
                "mock_requests": [
                    "mock.Mock"
                ]
            }
        },
        "TestControllers.test_customize_test_github_server_error": {
            "name": "test_customize_test_github_server_error",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_user": [],
                "mock_git": [],
                "mock_requests": []
            }
        },
        "TestControllers.test_customize_test_wrong_commit_hash": {
            "name": "test_customize_test_wrong_commit_hash",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_user": [
                    "mock.Mock"
                ],
                "mock_git": [
                    "mock.Mock"
                ],
                "mock_requests": [
                    "mock.Mock"
                ]
            }
        }
    },
    "sample-platform-master/tests/test_customized/__init__.py": {},
    "sample-platform-master/tests/test_deploy/TestControllers.py": {
        "TestControllers.test_root": {
            "name": "test_root",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_request_get": [
                    "mock.MagicMock"
                ]
            }
        },
        "TestControllers.test_headers_ping": {
            "name": "test_headers_ping",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_request_get": []
            }
        },
        "TestControllers.test_headers_missing_X_GitHub_Event": {
            "name": "test_headers_missing_X_GitHub_Event",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_request_get": []
            }
        },
        "TestControllers.test_headers_missing_X_GitHub_Delivery": {
            "name": "test_headers_missing_X_GitHub_Delivery",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_request_get": []
            }
        },
        "TestControllers.test_headers_missing_X_Hub_Signature": {
            "name": "test_headers_missing_X_Hub_Signature",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_request_get": []
            }
        },
        "TestControllers.test_headers_missing_User_Agent": {
            "name": "test_headers_missing_User_Agent",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_request_get": []
            }
        },
        "TestControllers.test_headers_invalid_User_Agent": {
            "name": "test_headers_invalid_User_Agent",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_request_get": []
            }
        },
        "TestControllers.test_headers_event_not_push": {
            "name": "test_headers_event_not_push",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_request_get": []
            }
        },
        "TestControllers.test_headers_invalid_signature_event": {
            "name": "test_headers_invalid_signature_event",
            "location": 104,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_g": [],
                "mock_valid_sign": [
                    "mock.Mock"
                ],
                "mock_request_get": []
            }
        },
        "TestControllers.test_headers_no_payload_event": {
            "name": "test_headers_no_payload_event",
            "location": 127,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_g": [],
                "mock_valid_sign": [
                    "mock.Mock"
                ],
                "mock_request_get": []
            }
        },
        "TestControllers.test_headers_not_master_event": {
            "name": "test_headers_not_master_event",
            "location": 148,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_g": [],
                "mock_valid_sign": [
                    "mock.Mock"
                ],
                "mock_request_get": []
            }
        },
        "TestControllers.test_headers_valid_event": {
            "name": "test_headers_valid_event",
            "location": 175,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_open": [
                    "mock.Mock"
                ],
                "mock_copy": [
                    "mock.Mock"
                ],
                "mock_subprocess": [
                    "mock.Mock"
                ],
                "mock_valid_sign": [
                    "mock.Mock"
                ],
                "mock_repo": [
                    "mock.MagicMock"
                ],
                "mock_request_get": []
            }
        }
    },
    "sample-platform-master/tests/test_deploy/__init__.py": {},
    "sample-platform-master/tests/test_home/TestControllers.py": {
        "TestControllers.test_root": {
            "name": "test_root",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_about": {
            "name": "test_about",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_if_user_has_test_access_rights": {
            "name": "test_if_user_has_test_access_rights",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sample-platform-master/tests/test_home/__init__.py": {},
    "sample-platform-master/tests/test_regression/TestControllers.py": {
        "TestControllers.test_root": {
            "name": "test_root",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_specific_regression_test_loads": {
            "name": "test_specific_regression_test_loads",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_regression_test_status_toggle": {
            "name": "test_regression_test_status_toggle",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_download_result_file_not_found": {
            "name": "test_download_result_file_not_found",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_regression_output": [
                    "core_lib.core.models.Venue"
                ]
            }
        },
        "TestControllers.test_download_result_file_not_found_variant": {
            "name": "test_download_result_file_not_found_variant",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_regression_output_file": [
                    "str",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "TestControllers.test_download_result_file": {
            "name": "test_download_result_file",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_regression_output": [
                    "core_lib.core.models.Venue"
                ],
                "mock_serve": []
            }
        },
        "TestControllers.test_download_result_file_variant": {
            "name": "test_download_result_file_variant",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_regression_output_file": [
                    "str"
                ],
                "mock_serve": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "TestControllers.test_regression_test_deletion_Without_login": {
            "name": "test_regression_test_deletion_Without_login",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_delete_if_will_throw_404": {
            "name": "test_delete_if_will_throw_404",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_delete": {
            "name": "test_delete",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_add_category": {
            "name": "test_add_category",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_add_category_empty": {
            "name": "test_add_category_empty",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_edit_category": {
            "name": "test_edit_category",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_edit_category_empty": {
            "name": "test_edit_category_empty",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_edit_wrong_category": {
            "name": "test_edit_wrong_category",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_add_test": {
            "name": "test_add_test",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_add_test_empty_erc": {
            "name": "test_add_test_empty_erc",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_category_deletion_without_login": {
            "name": "test_category_deletion_without_login",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_category_delete_if_will_throw_404": {
            "name": "test_category_delete_if_will_throw_404",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_category_delete": {
            "name": "test_category_delete",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_edit_test": {
            "name": "test_edit_test",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_edit_test_empty_erc": {
            "name": "test_edit_test_empty_erc",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_edit_wrong_test": {
            "name": "test_edit_wrong_test",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_edit_test_same_category": {
            "name": "test_edit_test_same_category",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_if_test_regression_view_throws_a_not_found_error": {
            "name": "test_if_test_regression_view_throws_a_not_found_error",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_if_test_toggle_view_throws_a_not_found_error": {
            "name": "test_if_test_toggle_view_throws_a_not_found_error",
            "location": 359,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_sample_view": {
            "name": "test_sample_view",
            "location": 369,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_sample_view_nonexistent": {
            "name": "test_sample_view_nonexistent",
            "location": 376,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_add_output": {
            "name": "test_add_output",
            "location": 381,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_add_output_wrong_regression_test": {
            "name": "test_add_output_wrong_regression_test",
            "location": 399,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_add_output_without_login": {
            "name": "test_add_output_without_login",
            "location": 411,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_remove_output": {
            "name": "test_remove_output",
            "location": 417,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_remove_output_wrong_regression_test": {
            "name": "test_remove_output_wrong_regression_test",
            "location": 442,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_remove_output_without_login": {
            "name": "test_remove_output_without_login",
            "location": 454,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_add_output_empty_got": {
            "name": "test_add_output_empty_got",
            "location": 460,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_add_output_empty_output_file": {
            "name": "test_add_output_empty_output_file",
            "location": 477,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_add_output_wrong_rto_id": {
            "name": "test_add_output_wrong_rto_id",
            "location": 494,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_add_test_output_and_check_double_hashes": {
            "name": "test_add_test_output_and_check_double_hashes",
            "location": 512,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sample-platform-master/tests/test_regression/TestUpdateRegression.py": {
        "TestUpdateRegression.test_update_expected_results_not_path": {
            "name": "test_update_expected_results_not_path",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpdateRegression.test_update_expected_results_zero_regressions": {
            "name": "test_update_expected_results_zero_regressions",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_session": [],
                "mock_os": [
                    "str"
                ]
            }
        },
        "TestUpdateRegression.test_update_expected_results_": {
            "name": "test_update_expected_results_",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_test": [
                    "mock.MagicMock",
                    "tests.async_mock.Mock"
                ],
                "mock_os": []
            }
        },
        "TestUpdateRegression.test_Test_initiation": {
            "name": "test_Test_initiation",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpdateRegression.test_Test_get_inputfilepath": {
            "name": "test_Test_get_inputfilepath",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpdateRegression.test_Test_get_outputfilepath": {
            "name": "test_Test_get_outputfilepath",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpdateRegression.test_Test_run_ccex": {
            "name": "test_Test_run_ccex",
            "location": 105,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_open": [
                    "mock.Mock",
                    "mock.MagicMock"
                ],
                "mock_subprocess": []
            }
        },
        "TestUpdateRegression.test_Test_run_ccex_with_error": {
            "name": "test_Test_run_ccex_with_error",
            "location": 128,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_open": [
                    "mock.Mock",
                    "mock.MagicMock"
                ],
                "mock_subprocess": []
            }
        },
        "TestUpdateRegression.test_Test_run_ccex_with_process_failure": {
            "name": "test_Test_run_ccex_with_process_failure",
            "location": 151,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_open": [
                    "mock.Mock",
                    "mock.MagicMock"
                ],
                "mock_subprocess": []
            }
        },
        "TestUpdateRegression.test_Test_get_outputfilepath.MockOutput.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        }
    },
    "sample-platform-master/tests/test_regression/__init__.py": {},
    "sample-platform-master/tests/test_sample/TestControllers.py": {
        "raise_media_exception": {
            "name": "raise_media_exception",
            "location": 13,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "TestControllers.test_root": {
            "name": "test_root",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_sample_pass": {
            "name": "test_sample_pass",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_media": []
            }
        },
        "TestControllers.test_sample_fail": {
            "name": "test_sample_fail",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_media": []
            }
        },
        "TestControllers.test_sample_create_xml": {
            "name": "test_sample_create_xml",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_media": []
            }
        },
        "TestControllers.test_sample_id": {
            "name": "test_sample_id",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_download_sample": {
            "name": "test_download_sample",
            "location": 78,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_sample": [
                    "core_lib.core.models.Venue"
                ],
                "mock_serve_download": [
                    "unittesmock.Mock",
                    "mock.MagicMock"
                ]
            }
        },
        "TestControllers.test_download_sample_raise_exception": {
            "name": "test_download_sample_raise_exception",
            "location": 89,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_sample": [
                    "unittesmock.Mock"
                ],
                "mock_serve_download": [
                    "unittesmock.Mock",
                    "mock.MagicMock"
                ]
            }
        },
        "TestControllers.test_download_sample_media_info": {
            "name": "test_download_sample_media_info",
            "location": 105,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_os": [
                    "str",
                    "unittesmock.Mock"
                ],
                "mock_sample": [
                    "core_lib.core.models.Venue"
                ],
                "mock_serve_download": [
                    "unittesmock.Mock",
                    "mock.MagicMock"
                ]
            }
        },
        "TestControllers.test_download_sample_media_info_path_wrong": {
            "name": "test_download_sample_media_info_path_wrong",
            "location": 118,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_os": [],
                "mock_sample": [
                    "core_lib.core.models.Venue"
                ],
                "mock_serve_download": [
                    "unittesmock.Mock",
                    "mock.Mock",
                    "mock.MagicMock"
                ]
            }
        },
        "TestControllers.test_download_sample_media_info_sample_not_found": {
            "name": "test_download_sample_media_info_sample_not_found",
            "location": 134,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_os": [
                    "str",
                    "unittesmock.Mock"
                ],
                "mock_sample": [
                    "unittesmock.Mock"
                ],
                "mock_serve_download": [
                    "mock.Mock",
                    "unittesmock.Mock"
                ]
            }
        },
        "TestControllers.test_download_sample_additional": {
            "name": "test_download_sample_additional",
            "location": 150,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_extra": [
                    "core_lib.core.models.Venue",
                    "unittesmock.Mock"
                ],
                "mock_sample": [
                    "core_lib.core.models.Venue",
                    "unittesmock.Mock"
                ],
                "mock_serve_download": [
                    "unittesmock.Mock",
                    "mock.MagicMock"
                ]
            }
        },
        "TestControllers.test_download_sample_additional_sample_not_found": {
            "name": "test_download_sample_additional_sample_not_found",
            "location": 163,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_extra": [],
                "mock_sample": [
                    "unittesmock.Mock"
                ],
                "mock_serve_download": [
                    "unittesmock.Mock",
                    "mock.Mock"
                ]
            }
        },
        "TestControllers.test_download_sample_additional_extrafile_not_found": {
            "name": "test_download_sample_additional_extrafile_not_found",
            "location": 179,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_extra": [
                    "unittesmock.Mock"
                ],
                "mock_sample": [
                    "core_lib.core.models.Venue"
                ],
                "mock_serve_download": [
                    "unittesmock.Mock",
                    "mock.Mock"
                ]
            }
        },
        "TestControllers.test_edit_sample": {
            "name": "test_edit_sample",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sample-platform-master/tests/test_sample/TestMediaInfoParser.py": {
        "MockSample.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMediaInfoFetcher.test_init": {
            "name": "test_init",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_xml": [],
                "mock_os": [],
                "mock_open": []
            }
        },
        "TestMediaInfoFetcher.test_init_invalid_media_xml": {
            "name": "test_init_invalid_media_xml",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_xml": [],
                "mock_os": [],
                "mock_open": []
            }
        },
        "TestMediaInfoFetcher.test_init_invalid_media_info_path": {
            "name": "test_init_invalid_media_info_path",
            "location": 53,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_xml": [],
                "mock_os": [],
                "mock_open": []
            }
        },
        "TestMediaInfoFetcher.test_get_media_info": {
            "name": "test_get_media_info",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMediaInfoFetcher.test_get_media_info_forced": {
            "name": "test_get_media_info_forced",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMediaInfoFetcher.test__process_tracks_file_key_error": {
            "name": "test__process_tracks_file_key_error",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMediaInfoFetcher.test__process_tracks_no_track": {
            "name": "test__process_tracks_no_track",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMediaInfoFetcher.test__process_tracks": {
            "name": "test__process_tracks",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMediaInfoFetcher.test__process_track_not_ordereddict": {
            "name": "test__process_track_not_ordereddict",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMediaInfoFetcher.test__process_track_missing_type": {
            "name": "test__process_track_missing_type",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMediaInfoFetcher.test__process_track_general": {
            "name": "test__process_track_general",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMediaInfoFetcher.test__process_track_video": {
            "name": "test__process_track_video",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMediaInfoFetcher.test__process_track_audio": {
            "name": "test__process_track_audio",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMediaInfoFetcher.test__process_track_text": {
            "name": "test__process_track_text",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMediaInfoFetcher.test__process_generic": {
            "name": "test__process_generic",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMediaInfoFetcher.test__process_general": {
            "name": "test__process_general",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMediaInfoFetcher.test__process_video": {
            "name": "test__process_video",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMediaInfoFetcher.test__process_text": {
            "name": "test__process_text",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMediaInfoFetcher.test_generate_media_xml_windows": {
            "name": "test_generate_media_xml_windows",
            "location": 220,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_sys": [
                    "mock.Mock",
                    "mock.MagicMock"
                ]
            }
        },
        "TestMediaInfoFetcher.test_generate_media_xml_not_file": {
            "name": "test_generate_media_xml_not_file",
            "location": 230,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_sys": [
                    "mock.Mock",
                    "mock.MagicMock"
                ],
                "mock_subprocess": [
                    "mock.MagicMock"
                ],
                "mock_open": []
            }
        },
        "TestMediaInfoFetcher.test_generate_media_xml": {
            "name": "test_generate_media_xml",
            "location": 246,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_sys": [
                    "mock.Mock",
                    "mock.MagicMock"
                ],
                "mock_subprocess": [
                    "mock.Mock",
                    "mock.MagicMock"
                ],
                "mock_open": [
                    "mock.Mock"
                ],
                "mock_os": [
                    "tests.e2e.Helper"
                ],
                "mock_etree": [
                    "mock.Mock"
                ],
                "mock_media_info_fetcher": []
            }
        }
    },
    "sample-platform-master/tests/test_sample/__init__.py": {},
    "sample-platform-master/tests/test_test/TestControllers.py": {
        "TestControllers.create_completed_regression_t_entries": {
            "name": "create_completed_regression_t_entries",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "test_id": [
                    "typing.Type",
                    "int",
                    "Type[Exception]",
                    "str",
                    "None",
                    "bool",
                    "Optional[bool]"
                ],
                "regression_tests": [
                    "str",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "TestControllers.test_root": {
            "name": "test_root",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_specific_test_loads": {
            "name": "test_specific_test_loads",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_customize_test_loads": {
            "name": "test_customize_test_loads",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_restart_with_permission": {
            "name": "test_restart_with_permission",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_restart_fails_on_no_permission": {
            "name": "test_restart_fails_on_no_permission",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_stop_with_permission": {
            "name": "test_stop_with_permission",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_stop_fails_on_no_permission": {
            "name": "test_stop_fails_on_no_permission",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_get_json_data_throw_not_found_error": {
            "name": "test_get_json_data_throw_not_found_error",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_get_nonexistent_test": {
            "name": "test_get_nonexistent_test",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_ccextractor_version_not_found": {
            "name": "test_ccextractor_version_not_found",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_data_for_test": {
            "name": "test_data_for_test",
            "location": 129,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_test_progress": [
                    "mock.Mock"
                ],
                "mock_category": [
                    "core.models.MyUser"
                ],
                "mock_gen_data": [
                    "str",
                    "mock.Mock",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "mock_g": [
                    "mock.Mock"
                ]
            }
        },
        "TestControllers.test_get_json_data_no_test": {
            "name": "test_get_json_data_no_test",
            "location": 143,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_test": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "TestControllers.test_get_json_data": {
            "name": "test_get_json_data",
            "location": 157,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_test": [
                    "dict[, ]",
                    "core_lib.core.models.Venue",
                    "dict"
                ],
                "mock_jsonify": []
            }
        },
        "TestControllers.test_generate_diff_abort_403": {
            "name": "test_generate_diff_abort_403",
            "location": 167,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_test_result_file": [
                    "mock.MagicMock"
                ]
            }
        },
        "TestControllers.test_generate_diff_abort_404": {
            "name": "test_generate_diff_abort_404",
            "location": 176,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_request": [],
                "mock_test_result_file": [
                    "mock.Mock"
                ]
            }
        },
        "TestControllers.test_generate_diff": {
            "name": "test_generate_diff",
            "location": 188,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_request": [],
                "mock_test_result_file": []
            }
        },
        "TestControllers.test_generate_diff_download": {
            "name": "test_generate_diff_download",
            "location": 202,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_response": [],
                "mock_request": [],
                "mock_test_result_file": [
                    "list[T]",
                    "mock.Mock",
                    "mock.MagicMock",
                    "List[T]"
                ]
            }
        },
        "TestControllers.test_download_build_log_file_test_not_found": {
            "name": "test_download_build_log_file_test_not_found",
            "location": 213,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_test": [
                    "core_lib.core.models.Venue"
                ]
            }
        },
        "TestControllers.test_download_build_log_file_log_not_file": {
            "name": "test_download_build_log_file_log_not_file",
            "location": 227,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_test": [],
                "mock_os": [
                    "tuple[typing.Union[str,mock.Mock]]",
                    "Tuple[str, mock.Mock]",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "TestControllers.test_download_build_log_file": {
            "name": "test_download_build_log_file",
            "location": 243,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_serve": [
                    "mock.MagicMock"
                ],
                "mock_test": [
                    "dict",
                    "dict[, ]"
                ],
                "mock_os": []
            }
        }
    },
    "sample-platform-master/tests/test_test/TestDiff.py": {
        "TestDiff.test_if_same_diff_generated": {
            "name": "test_if_same_diff_generated",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDiff.test_if_view_limit_respected": {
            "name": "test_if_view_limit_respected",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDiff.test_if_full_diff_download": {
            "name": "test_if_full_diff_download",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sample-platform-master/tests/test_test/__init__.py": {},
    "sample-platform-master/tests/test_upload/TestControllers.py": {
        "TestControllers.test_root": {
            "name": "test_root",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_upload": {
            "name": "test_upload",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "file_storage": [
                    "mock.MagicMock"
                ],
                "mock_open": [
                    "list[]",
                    "tests.async_mock.MagicMock",
                    "list"
                ],
                "mock_hash": [
                    "mock.MagicMock"
                ],
                "mock_rename": [
                    "list[]",
                    "tests.async_mock.MagicMock",
                    "list"
                ]
            }
        },
        "TestControllers.test_process": {
            "name": "test_process",
            "location": 63,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_repo": [
                    "mock.Mock"
                ],
                "mock_rename": [
                    "mock.Mock"
                ],
                "mock_post": [
                    "mock.Mock"
                ]
            }
        },
        "TestControllers.test_ftp_filezilla": {
            "name": "test_ftp_filezilla",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_ftp_index": {
            "name": "test_ftp_index",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestControllers.test_upload_ftp": {
            "name": "test_upload_ftp",
            "location": 124,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_shutil": [
                    "mock.Mock"
                ],
                "mock_hash": [],
                "mock_magic": [
                    "mock.Mock"
                ],
                "mock_rename": [
                    "mock.Mock"
                ],
                "mock_remove": [
                    "mock.Mock"
                ]
            }
        },
        "TestControllers.test_upload_ftp_forbidden_mimetype": {
            "name": "test_upload_ftp_forbidden_mimetype",
            "location": 142,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_shutil": [
                    "mock.Mock"
                ],
                "mock_hash": [],
                "mock_magic": [
                    "mock.Mock"
                ],
                "mock_rename": [
                    "mock.Mock"
                ],
                "mock_remove": [
                    "mock.Mock"
                ]
            }
        },
        "TestControllers.test_upload_ftp_forbidden_extension": {
            "name": "test_upload_ftp_forbidden_extension",
            "location": 158,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_shutil": [
                    "mock.Mock"
                ],
                "mock_hash": [],
                "mock_magic": [
                    "mock.Mock"
                ],
                "mock_rename": [
                    "mock.Mock"
                ],
                "mock_remove": [
                    "mock.Mock"
                ]
            }
        },
        "TestControllers.test_create_hash_for_sample": {
            "name": "test_create_hash_for_sample",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sample-platform-master/tests/test_upload/TestProgressFTPUpload.py": {
        "TestProgressFTPUpload.test_process": {
            "name": "test_process",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_upload": []
            }
        }
    },
    "sample-platform-master/tests/test_upload/__init__.py": {}
}
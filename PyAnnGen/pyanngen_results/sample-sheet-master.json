{
    "sample-sheet-master/setup.py": {},
    "sample-sheet-master/docs/conf.py": {},
    "sample-sheet-master/sample_sheet/util.py": {
        "is_ipython_interpreter": {
            "name": "is_ipython_interpreter",
            "location": 7,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "maybe_render_markdown": {
            "name": "maybe_render_markdown",
            "location": 14,
            "return": [
                "str",
                "Markdown",
                "float",
                "List[str]"
            ],
            "arguments": {
                "string": [
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "sample-sheet-master/sample_sheet/_version.py": {},
    "sample-sheet-master/sample_sheet/__init__.py": {
        "ReadStructure.__init__": {
            "name": "__init__",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "structure": [
                    "str"
                ]
            }
        },
        "ReadStructure._sum_cycles_from_tokens": {
            "name": "_sum_cycles_from_tokens",
            "location": 126,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "List[str]",
                    "List",
                    "bytes",
                    "str",
                    "List[list]",
                    "Hashable"
                ]
            }
        },
        "ReadStructure.is_indexed": {
            "name": "is_indexed",
            "location": 131,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReadStructure.is_single_indexed": {
            "name": "is_single_indexed",
            "location": 136,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReadStructure.is_dual_indexed": {
            "name": "is_dual_indexed",
            "location": 141,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReadStructure.is_single_end": {
            "name": "is_single_end",
            "location": 146,
            "return": [
                "bool",
                "str",
                "Type[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReadStructure.is_paired_end": {
            "name": "is_paired_end",
            "location": 151,
            "return": [
                "bool",
                "str",
                "Type[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReadStructure.has_indexes": {
            "name": "has_indexes",
            "location": 156,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReadStructure.has_skips": {
            "name": "has_skips",
            "location": 161,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReadStructure.has_umi": {
            "name": "has_umi",
            "location": 166,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReadStructure.index_cycles": {
            "name": "index_cycles",
            "location": 171,
            "return": [
                "bool",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReadStructure.template_cycles": {
            "name": "template_cycles",
            "location": 176,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReadStructure.skip_cycles": {
            "name": "skip_cycles",
            "location": 181,
            "return": [
                "int",
                "pathlib.Path",
                "List[int]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReadStructure.umi_cycles": {
            "name": "umi_cycles",
            "location": 186,
            "return": [
                "int",
                "pathlib.Path",
                "List[int]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReadStructure.total_cycles": {
            "name": "total_cycles",
            "location": 191,
            "return": [
                "int",
                "pathlib.Path",
                "List[int]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReadStructure.tokens": {
            "name": "tokens",
            "location": 196,
            "return": [
                "int",
                "bool",
                "str",
                "Iterable[str]",
                "List[str]",
                "List[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReadStructure.index_tokens": {
            "name": "index_tokens",
            "location": 201,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReadStructure.skip_tokens": {
            "name": "skip_tokens",
            "location": 206,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReadStructure.template_tokens": {
            "name": "template_tokens",
            "location": 211,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReadStructure.umi_tokens": {
            "name": "umi_tokens",
            "location": 216,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReadStructure.copy": {
            "name": "copy",
            "location": 220,
            "return": [
                "ReadStructure"
            ],
            "arguments": {
                "self": [
                    "_TReadStructure@@ReadStructure@@"
                ]
            }
        },
        "ReadStructure.__eq__": {
            "name": "__eq__",
            "location": 224,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "Union[str,bool,None]",
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "ReadStructure.__repr__": {
            "name": "__repr__",
            "location": 230,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReadStructure.__str__": {
            "name": "__str__",
            "location": 237,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sample.__init__": {
            "name": "__init__",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict",
                    "None",
                    "bytes",
                    "Callable",
                    "Optional[dict]",
                    "Union[None,int,str]",
                    "int",
                    "str"
                ]
            }
        },
        "Sample.to_json": {
            "name": "to_json",
            "location": 321,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sample.__eq__": {
            "name": "__eq__",
            "location": 327,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "bool"
                ]
            }
        },
        "Sample.__getattr__": {
            "name": "__getattr__",
            "location": 344,
            "return": [
                "int",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "str",
                    "Dict",
                    "Type",
                    "Mapping"
                ]
            }
        },
        "Sample.__repr__": {
            "name": "__repr__",
            "location": 348,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sample.__str__": {
            "name": "__str__",
            "location": 354,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Section.__init__": {
            "name": "__init__",
            "location": 364,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Mapping",
                    "None",
                    "Any",
                    "Optional[Mapping]",
                    "int",
                    "Dict"
                ]
            }
        },
        "Section.__getattr__": {
            "name": "__getattr__",
            "location": 370,
            "return": [
                "int",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "str",
                    "Dict",
                    "Type",
                    "Mapping"
                ]
            }
        },
        "SampleSheet.__init__": {
            "name": "__init__",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "None",
                    "Union[str,pathlib.Path]",
                    "str",
                    "pathlib.Path",
                    "Optional[pathlib.Path]",
                    "_compaUnion[_compapathlib.Path,str]"
                ]
            }
        },
        "SampleSheet.add_section": {
            "name": "add_section",
            "location": 426,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "section_name": [
                    "str",
                    "Set[str]"
                ]
            }
        },
        "SampleSheet.all_sample_keys": {
            "name": "all_sample_keys",
            "location": 433,
            "return": [
                "List",
                "Dict[pathlib.Path,types.Lines]",
                "T",
                "Dict",
                "Mapping[str,Any]",
                "Optional[Dict[str,Any]]",
                "Literal"
            ],
            "arguments": {
                "self": []
            }
        },
        "SampleSheet.experimental_design": {
            "name": "experimental_design",
            "location": 447,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SampleSheet.is_paired_end": {
            "name": "is_paired_end",
            "location": 470,
            "return": [
                "Optional[str]",
                "None",
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SampleSheet.is_single_end": {
            "name": "is_single_end",
            "location": 475,
            "return": [
                "Optional[str]",
                "None",
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SampleSheet.samples": {
            "name": "samples",
            "location": 480,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SampleSheet._parse": {
            "name": "_parse",
            "location": 484,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handle": [
                    "str",
                    "Callable",
                    "allennlp.common.util.JsonDict",
                    "Dict[str,list[Any]]",
                    "Dict[str,List[Any]]"
                ]
            }
        },
        "SampleSheet.add_sample": {
            "name": "add_sample",
            "location": 545,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sample": [
                    "Optional[bytes]",
                    "Union[float, int]",
                    "Optional[Union[int, Any]]",
                    "Optional[int]"
                ]
            }
        },
        "SampleSheet.add_samples": {
            "name": "add_samples",
            "location": 690,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "samples": [
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "SampleSheet.to_json": {
            "name": "to_json",
            "location": 695,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SampleSheet.to_picard_basecalling_params": {
            "name": "to_picard_basecalling_params",
            "location": 711,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "directory": [
                    "str",
                    "Sequence[str]",
                    "Union[str,pathlib.Path]"
                ],
                "bam_prefix": [
                    "str",
                    "int"
                ],
                "lanes": [
                    "int",
                    "float",
                    "list",
                    "Union[int, List[int]]"
                ]
            }
        },
        "SampleSheet.write": {
            "name": "write",
            "location": 877,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handle": [
                    "bool",
                    "TextIO",
                    "str",
                    "List[str]",
                    "int",
                    "pathlib.Path"
                ],
                "blank_lines": [
                    "int",
                    "bool",
                    "TextIO",
                    "str",
                    "List[str]",
                    "pathlib.Path"
                ]
            }
        },
        "SampleSheet.__len__": {
            "name": "__len__",
            "location": 922,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SampleSheet.__iter__": {
            "name": "__iter__",
            "location": 926,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SampleSheet.__repr__": {
            "name": "__repr__",
            "location": 930,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SampleSheet.__str__": {
            "name": "__str__",
            "location": 935,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "SampleSheet._repr_tty_": {
            "name": "_repr_tty_",
            "location": 953,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SampleSheet.write.pad_iterable": {
            "name": "pad_iterable",
            "location": 893,
            "return": [
                "List",
                "List[Dict]",
                "str",
                "List[int]",
                "float",
                "List[List[Any]]",
                "List[float]",
                "Tuple[int,int,int]"
            ],
            "arguments": {
                "iterable": [
                    "int",
                    "Iterable",
                    "str",
                    "Tuple[int, int]"
                ],
                "size": [
                    "int",
                    "Iterable",
                    "str",
                    "Tuple[int, int]"
                ],
                "padding": [
                    "Text",
                    "int",
                    "Iterable",
                    "str",
                    "Tuple[int,int]"
                ]
            }
        },
        "SampleSheet.write.write_blank_lines": {
            "name": "write_blank_lines",
            "location": 898,
            "return": [
                "None"
            ],
            "arguments": {
                "writer": [
                    "int",
                    "str",
                    "List[int]"
                ],
                "n": [
                    "int",
                    "str",
                    "List[int]"
                ],
                "width": [
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        }
    },
    "sample-sheet-master/tests/test_read_structure.py": {
        "TestReadStructure.test_regex_validation": {
            "name": "test_regex_validation",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReadStructure.test_single_end_tokens": {
            "name": "test_single_end_tokens",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReadStructure.test_single_end_cycles": {
            "name": "test_single_end_cycles",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReadStructure.test_single_end_single_index_umi": {
            "name": "test_single_end_single_index_umi",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReadStructure.test_paired_end_dual_index_umi_tokens": {
            "name": "test_paired_end_dual_index_umi_tokens",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReadStructure.test_paired_end_dual_index_umi_cycles": {
            "name": "test_paired_end_dual_index_umi_cycles",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReadStructure.test_paired_end_dual_index_umi_skips_cycles": {
            "name": "test_paired_end_dual_index_umi_skips_cycles",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReadStructure.test_all_tokens": {
            "name": "test_all_tokens",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReadStructure.test_copy": {
            "name": "test_copy",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReadStructure.test_equal": {
            "name": "test_equal",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReadStructure.test_repr": {
            "name": "test_repr",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReadStructure.test_str": {
            "name": "test_str",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sample-sheet-master/tests/test_sample.py": {
        "TestSample.test_blank_init": {
            "name": "test_blank_init",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSample.test_default_getattr": {
            "name": "test_default_getattr",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSample.test_promotion_of_read_structure": {
            "name": "test_promotion_of_read_structure",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSample.test_additional_key_is_added": {
            "name": "test_additional_key_is_added",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSample.test_read_structure_with_single_index": {
            "name": "test_read_structure_with_single_index",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSample.test_read_structure_with_dual_index": {
            "name": "test_read_structure_with_dual_index",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSample.test_valid_index": {
            "name": "test_valid_index",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSample.test_equal_to_dict": {
            "name": "test_equal_to_dict",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSample.test_eq": {
            "name": "test_eq",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSample.test_str": {
            "name": "test_str",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSample.test_repr": {
            "name": "test_repr",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sample-sheet-master/tests/test_sample_sheet.py": {
        "decode_vt_100": {
            "name": "decode_vt_100",
            "location": 44,
            "return": [
                "Generator[(str, Any, None)]"
            ],
            "arguments": {
                "iterable": [],
                "default_set": [],
                "alt_set": [],
                "escape": [
                    "typing.Text"
                ]
            }
        },
        "string_as_temporary_file": {
            "name": "string_as_temporary_file",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "content": []
            }
        },
        "TestSampleSheet.test_blank_init": {
            "name": "test_blank_init",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSampleSheet.test_blank_init_repr": {
            "name": "test_blank_init_repr",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSampleSheet.test_is_single_end": {
            "name": "test_is_single_end",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSampleSheet.test_is_paired_end": {
            "name": "test_is_paired_end",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSampleSheet.test_add_sample": {
            "name": "test_add_sample",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSampleSheet.test_add_samples": {
            "name": "test_add_samples",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSampleSheet.test_add_sample_without_sample_id": {
            "name": "test_add_sample_without_sample_id",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSampleSheet.test_add_sample_with_index": {
            "name": "test_add_sample_with_index",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSampleSheet.test_add_sample_with_index2": {
            "name": "test_add_sample_with_index2",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSampleSheet.test_add_samples_with_same_index_different_index2": {
            "name": "test_add_samples_with_same_index_different_index2",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSampleSheet.test_add_sample_same_twice": {
            "name": "test_add_sample_same_twice",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSampleSheet.test_add_sample_same_indexes_same_lane": {
            "name": "test_add_sample_same_indexes_same_lane",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSampleSheet.test_add_sample_same_sample_different_lane": {
            "name": "test_add_sample_same_sample_different_lane",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSampleSheet.test_add_sample_different_pairing": {
            "name": "test_add_sample_different_pairing",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSampleSheet.test_add_sample_different_read_structure": {
            "name": "test_add_sample_different_read_structure",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSampleSheet.test_add_sample_with_same_sample_index": {
            "name": "test_add_sample_with_same_sample_index",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSampleSheet.test_add_sample_with_same_sample_index2": {
            "name": "test_add_sample_with_same_sample_index2",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSampleSheet.test_add_sample_with_same_sample_index_pair": {
            "name": "test_add_sample_with_same_sample_index_pair",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSampleSheet.test_add_sample_with_missing_index": {
            "name": "test_add_sample_with_missing_index",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSampleSheet.test_add_sample_with_different_index_combination": {
            "name": "test_add_sample_with_different_index_combination",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSampleSheet.test_all_sample_keys": {
            "name": "test_all_sample_keys",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSampleSheet.test_parse_invalid_ascii": {
            "name": "test_parse_invalid_ascii",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSampleSheet.test_parse_different_length_header": {
            "name": "test_parse_different_length_header",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSampleSheet.test_parse_limited_commas": {
            "name": "test_parse_limited_commas",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSampleSheet.test_experiment_design_plain_text": {
            "name": "test_experiment_design_plain_text",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSampleSheet.test_to_picard_basecalling_params_no_samples": {
            "name": "test_to_picard_basecalling_params_no_samples",
            "location": 388,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSampleSheet.test_to_picard_basecalling_params_incorrect_lanes_types": {
            "name": "test_to_picard_basecalling_params_incorrect_lanes_types",
            "location": 400,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSampleSheet.test_to_picard_basecalling_params_insufficient_sample_attrs": {
            "name": "test_to_picard_basecalling_params_insufficient_sample_attrs",
            "location": 430,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSampleSheet.test_to_picard_basecalling_params_different_index_sizes": {
            "name": "test_to_picard_basecalling_params_different_index_sizes",
            "location": 443,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSampleSheet.test_to_picard_basecalling_params_different_index2_sizes": {
            "name": "test_to_picard_basecalling_params_different_index2_sizes",
            "location": 459,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSampleSheet.test_to_picard_basecalling_params_output_files": {
            "name": "test_to_picard_basecalling_params_output_files",
            "location": 475,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSampleSheet.test_add_section": {
            "name": "test_add_section",
            "location": 542,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSampleSheet.test_to_json": {
            "name": "test_to_json",
            "location": 559,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSampleSheet.test_write": {
            "name": "test_write",
            "location": 607,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSampleSheet.test_no_line_comma_pad_read_and_write_with_padding": {
            "name": "test_no_line_comma_pad_read_and_write_with_padding",
            "location": 620,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSampleSheet.test_read_with_additional_section": {
            "name": "test_read_with_additional_section",
            "location": 634,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSampleSheet.test_write_custom_section": {
            "name": "test_write_custom_section",
            "location": 640,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSampleSheet.test_write_custom_sections": {
            "name": "test_write_custom_sections",
            "location": 658,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSampleSheet.test_write_with_equal_samples_and_custom_ordered_header": {
            "name": "test_write_with_equal_samples_and_custom_ordered_header",
            "location": 683,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSampleSheet.test_write_invalid_num_blank_lines": {
            "name": "test_write_invalid_num_blank_lines",
            "location": 700,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSampleSheet.test_iter": {
            "name": "test_iter",
            "location": 715,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSampleSheet.test_len": {
            "name": "test_len",
            "location": 725,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSampleSheet.test_str": {
            "name": "test_str",
            "location": 735,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSampleSheet.test_repr": {
            "name": "test_repr",
            "location": 742,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSampleSheet.test_repr_tty": {
            "name": "test_repr_tty",
            "location": 750,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sample-sheet-master/tests/test_section.py": {
        "TestSection.test_default_getattr": {
            "name": "test_default_getattr",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSection.test_that_getattr_returns_getitem": {
            "name": "test_that_getattr_returns_getitem",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
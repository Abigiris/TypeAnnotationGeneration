{
    "satisfaction-of-mine-master/src/actions.py": {
        "get_redmine_info": {
            "name": "get_redmine_info",
            "location": 29,
            "return": [
                "Effect",
                "Dict[str,Any]",
                "int",
                "Counter",
                "str"
            ],
            "arguments": {
                "base_url": [
                    "str",
                    "datetime.date"
                ],
                "user": [
                    "str",
                    "datetime.date"
                ],
                "start_date": [
                    "str",
                    "datetime.date"
                ],
                "end_date": [
                    "str",
                    "datetime.date"
                ],
                "api_key": [
                    "str",
                    "datetime.date"
                ]
            }
        },
        "perform_http_request": {
            "name": "perform_http_request",
            "location": 51,
            "return": [
                "Dict[str, Any]",
                "Dict[str, str]",
                "bool",
                "str",
                "Dict[str, Union[str, Set]]"
            ],
            "arguments": {
                "dispatcher": [
                    "bytes"
                ],
                "req": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "get_config_json": {
            "name": "get_config_json",
            "location": 60,
            "return": [
                "Effect",
                "str",
                "Iterable[str]",
                "datetime.timedelta"
            ],
            "arguments": {
                "fname": [
                    "str"
                ]
            }
        },
        "perform_read_json": {
            "name": "perform_read_json",
            "location": 64,
            "return": [
                "int",
                "bool",
                "Optional[float]",
                "Dict[str, str]",
                "dict",
                "str"
            ],
            "arguments": {
                "dispatcher": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "read_json": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "get_current_date": {
            "name": "get_current_date",
            "location": 73,
            "return": [
                "Effect",
                "int",
                "bool",
                "datetime.datetime",
                "str"
            ],
            "arguments": {}
        },
        "perform_get_current_date": {
            "name": "perform_get_current_date",
            "location": 77,
            "return": [
                "Optional[str]",
                "datetime.datetime",
                "str",
                "Tuple[str, str]",
                "int",
                "Sequence[str]",
                "bool"
            ],
            "arguments": {
                "_dispatcher": [
                    "int",
                    "Type",
                    "Callable",
                    "IO[str]",
                    "IO"
                ],
                "_gcd": [
                    "int",
                    "Type",
                    "Callable",
                    "IO[str]",
                    "IO"
                ]
            }
        },
        "perform_print": {
            "name": "perform_print",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "dispatcher": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "p": [
                    "str",
                    "int"
                ]
            }
        },
        "do_print": {
            "name": "do_print",
            "location": 89,
            "return": [
                "Effect",
                "str",
                "int"
            ],
            "arguments": {
                "fmt": [
                    "str",
                    "Dict",
                    "bool",
                    "Callable"
                ]
            }
        }
    },
    "satisfaction-of-mine-master/src/entries.py": {
        "_convert_date": {
            "name": "_convert_date",
            "location": 10,
            "return": [
                "Union[(datetime.date, _T0)]"
            ],
            "arguments": {
                "x": [
                    "str",
                    "int",
                    "float",
                    "datetime.datetime",
                    "datetime.time",
                    "datetime.timedelta",
                    "datetime.date"
                ]
            }
        },
        "parse_from": {
            "name": "parse_from",
            "location": 40,
            "return": [
                "Generator[(TimeEntry, Any, None)]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes",
                    "Set[int]"
                ]
            }
        },
        "TimeEntry._validate_string_and_not_blank": {
            "name": "_validate_string_and_not_blank",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attribute": [
                    "str",
                    "bool"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "TimeEntry._validate_duration": {
            "name": "_validate_duration",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attribute": [
                    "int",
                    "Union[int,float,None]",
                    "float",
                    "bool",
                    "None"
                ],
                "value": [
                    "int",
                    "float",
                    "Union[int,float,None]",
                    "bool"
                ]
            }
        }
    },
    "satisfaction-of-mine-master/src/main.py": {
        "make_command_line_parser": {
            "name": "make_command_line_parser",
            "location": 122,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "get_runtime_info": {
            "name": "get_runtime_info",
            "location": 137,
            "return": [
                "RuntimeInfo"
            ],
            "arguments": {
                "d": [
                    "List[int]",
                    "int",
                    "bool"
                ],
                "api_key_xor": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "start": [
                    "int",
                    "datetime.date",
                    "str",
                    "None",
                    "Optional[int]",
                    "float",
                    "Optional[float]"
                ],
                "end": [
                    "int",
                    "datetime.date",
                    "str",
                    "None",
                    "Optional[int]",
                    "float",
                    "Optional[float]"
                ]
            }
        },
        "do_main": {
            "name": "do_main",
            "location": 155,
            "return": [
                "Any",
                "Generator"
            ],
            "arguments": {
                "args_list": [
                    "List[str]",
                    "argparse.Namespace",
                    "List",
                    "Tuple"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 190,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "args_list": [
                    "str",
                    "Dict[str,str]",
                    "int"
                ]
            }
        },
        "HoursAccumulator.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "good": [
                    "int",
                    "float",
                    "bool"
                ],
                "total": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "HoursAccumulator.neutral": {
            "name": "neutral",
            "location": 21,
            "return": [
                "HoursAccumulator"
            ],
            "arguments": {
                "cls": [
                    "Type[_THoursAccumulator]"
                ]
            }
        },
        "HoursAccumulator.update": {
            "name": "update",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "str",
                    "List[Dict[str,str]]",
                    "List[dict[str,str]]"
                ]
            }
        },
        "HoursAccumulator.from_rule_and_entry": {
            "name": "from_rule_and_entry",
            "location": 29,
            "return": [
                "HoursAccumulator"
            ],
            "arguments": {
                "cls": [
                    "Type[_THoursAccumulator]"
                ],
                "rule": [
                    "str",
                    "Callable"
                ],
                "entry": [
                    "str",
                    "Callable"
                ]
            }
        },
        "HoursAccumulator.satisfaction": {
            "name": "satisfaction",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StampedHoursAccumulator.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "when": [
                    "bool",
                    "str"
                ],
                "good": [
                    "Callable",
                    "float",
                    "int",
                    "str",
                    "bool"
                ],
                "total": [
                    "Callable",
                    "float",
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "StampedHoursAccumulator.neutral": {
            "name": "neutral",
            "location": 44,
            "return": [
                "StampedHoursAccumulator"
            ],
            "arguments": {
                "cls": [
                    "Type[_TStampedHoursAccumulator]"
                ]
            }
        },
        "StampedHoursAccumulator.update": {
            "name": "update",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "Optional[bool]",
                    "TextIO",
                    "None",
                    "int",
                    "Set[str]",
                    "Optional[Set[str]]"
                ]
            }
        },
        "StampedHoursAccumulator.from_rule_and_entry": {
            "name": "from_rule_and_entry",
            "location": 57,
            "return": [
                "StampedHoursAccumulator"
            ],
            "arguments": {
                "cls": [
                    "Type[_TStampedHoursAccumulator]"
                ],
                "rule": [
                    "Dict[str,Any]",
                    "int",
                    "str"
                ],
                "entry": [
                    "Dict[str,Any]",
                    "int",
                    "str"
                ]
            }
        },
        "StampedHoursAccumulator.period_start": {
            "name": "period_start",
            "location": 60,
            "return": [
                "None",
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "StampedHoursAccumulator.period_end": {
            "name": "period_end",
            "location": 67,
            "return": [
                "None",
                "bool",
                "Optional[Union[str,Any]]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "StampedHoursAccumulator.period_hours_accumulator": {
            "name": "period_hours_accumulator",
            "location": 74,
            "return": [
                "HoursAccumulator"
            ],
            "arguments": {
                "self": []
            }
        },
        "StampedHoursAccumulator.period_data": {
            "name": "period_data",
            "location": 80,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "RuntimeInfo.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api_key": [
                    "Dict[str,Any]",
                    "float",
                    "bool",
                    "bytes",
                    "str"
                ],
                "rules": [
                    "str",
                    "float",
                    "bool",
                    "List"
                ],
                "start": [
                    "str",
                    "float",
                    "bool",
                    "List"
                ],
                "end": [
                    "str",
                    "float",
                    "bool",
                    "List"
                ],
                "base_url": [
                    "str",
                    "Dict",
                    "Optional[str]",
                    "bool",
                    "None"
                ]
            }
        }
    },
    "satisfaction-of-mine-master/src/rules.py": {
        "_extract_keys_and_construct": {
            "name": "_extract_keys_and_construct",
            "location": 133,
            "return": [
                "None",
                "str",
                "Optional[str]",
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "d": [
                    "str",
                    "List[int]",
                    "int",
                    "List[bytes]"
                ],
                "ks": [
                    "Sequence[Dict[str, Any]]",
                    "int",
                    "Iterable[str]",
                    "bytes",
                    "List[int]",
                    "float",
                    "Dict[str, Any]",
                    "str"
                ],
                "ctor": [
                    "str",
                    "int",
                    "Type",
                    "T",
                    "bytes",
                    "float",
                    "Union[int,float,str]"
                ]
            }
        },
        "parse_rules": {
            "name": "parse_rules",
            "location": 147,
            "return": [
                "list"
            ],
            "arguments": {
                "d": [
                    "List[list[Any]]",
                    "str",
                    "Dict",
                    "int",
                    "Iterable",
                    "List[List[Any]]"
                ]
            }
        },
        "Rule.match": {
            "name": "match",
            "location": 15,
            "return": [
                "Optional[float]",
                "None"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "Callable",
                    "entries.TimeEntry"
                ]
            }
        },
        "Rule._validate_weight": {
            "name": "_validate_weight",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attribute": [
                    "str"
                ],
                "value": [
                    "int",
                    "Union[dict,None]"
                ]
            }
        },
        "MatchAny.match": {
            "name": "match",
            "location": 29,
            "return": [
                "IO[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "Callable",
                    "entries.TimeEntry"
                ]
            }
        },
        "MatchIssueID.match": {
            "name": "match",
            "location": 38,
            "return": [
                "None",
                "Optional[int]",
                "Type",
                "str"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "str",
                    "Type",
                    "Dict[str,Any]",
                    "bool",
                    "List[str]",
                    "Dict"
                ]
            }
        },
        "MatchCategory.match": {
            "name": "match",
            "location": 50,
            "return": [
                "None",
                "Optional[int]",
                "Type",
                "str"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "bytes",
                    "Iterable[bytes]",
                    "Exception",
                    "Dict[str,Any]",
                    "Callable[Callable,Callable[...,Any]]",
                    "Callable[[Callable],Callable[...,Any]]"
                ]
            }
        },
        "Selector.select": {
            "name": "select",
            "location": 64,
            "return": [
                "Rule",
                "None"
            ],
            "arguments": {
                "self": [],
                "rules": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "entry": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Accumulator.neutral": {
            "name": "neutral",
            "location": 76,
            "return": [
                "Accumulator._C",
                "None"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "Accumulator.update": {
            "name": "update",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "T"
                ]
            }
        },
        "Accumulator.from_rule_and_entry": {
            "name": "from_rule_and_entry",
            "location": 86,
            "return": [
                "Accumulator",
                "None"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Dict[str,Any]",
                    "bool"
                ],
                "rule": [
                    "int",
                    "Dict[str,Any]",
                    "bool"
                ],
                "entry": [
                    "int",
                    "Dict[str,Any]",
                    "bool"
                ]
            }
        },
        "Convertor.convert": {
            "name": "convert",
            "location": 97,
            "return": [
                "Any",
                "None"
            ],
            "arguments": {
                "self": [],
                "entry": [
                    "bytes",
                    "str",
                    "int",
                    "entries.TimeEntry"
                ]
            }
        },
        "SelectRuleUsingTheirMatchMethod.select": {
            "name": "select",
            "location": 102,
            "return": [
                "Dict[str,Any]",
                "int",
                "Optional[dict]",
                "Iterable",
                "str"
            ],
            "arguments": {
                "self": [],
                "rules": [
                    "List[dict[str,Any]]",
                    "int",
                    "T",
                    "Dict[str,List[str]]",
                    "Dict[str,List]",
                    "List[Dict[str,Any]]"
                ],
                "entry": [
                    "int",
                    "Dict[str,list[str]]",
                    "T",
                    "Dict[str,list]",
                    "Dict[str,List[str]]",
                    "List[dict[str,Any]]",
                    "Dict[str,List]",
                    "List[Dict[str,Any]]"
                ]
            }
        },
        "RuleEvaluator.__init__": {
            "name": "__init__",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "selector": [
                    "int",
                    "float",
                    "bool"
                ],
                "accumulator": [
                    "int",
                    "str"
                ]
            }
        },
        "RuleEvaluator.satisfaction": {
            "name": "satisfaction",
            "location": 121,
            "return": [
                "int",
                "Dict[str,int]",
                "Callable",
                "str",
                "float",
                "Pattern"
            ],
            "arguments": {
                "self": [],
                "rules": [
                    "float",
                    "int",
                    "List[float]"
                ],
                "entries": [
                    "str",
                    "int",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        }
    },
    "satisfaction-of-mine-master/src/sparkline.py": {
        "_valid": {
            "name": "_valid",
            "location": 23,
            "return": [
                "bool",
                "str",
                "int",
                "List[int]"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "format_data": {
            "name": "format_data",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "start": [
                    "int",
                    "Any",
                    "bool"
                ],
                "data": [
                    "Tuple",
                    "int",
                    "bytes",
                    "Union[bytes,str]"
                ],
                "stop": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        }
    },
    "satisfaction-of-mine-master/src/test_entries.py": {
        "TestTimeEntry.test_001_create_TimeEntry": {
            "name": "test_001_create_TimeEntry",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeEntry.test_002_create_TimeEntry": {
            "name": "test_002_create_TimeEntry",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeEntry.test_003_create_TimeEntry": {
            "name": "test_003_create_TimeEntry",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeEntry.test_004_create_TimeEntry": {
            "name": "test_004_create_TimeEntry",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeEntry.test_005_create_TimeEntry": {
            "name": "test_005_create_TimeEntry",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeEntry.test_006_create_TimeEntry": {
            "name": "test_006_create_TimeEntry",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeEntry.test_100_create_valid_TimeEntry": {
            "name": "test_100_create_valid_TimeEntry",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseFrom.assert_missing_column": {
            "name": "assert_missing_column",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "bool"
                ],
                "col": [
                    "int",
                    "str",
                    "Iterable[int]"
                ]
            }
        },
        "TestParseFrom.test_001_missing_issue_id": {
            "name": "test_001_missing_issue_id",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseFrom.test_002_missing_duration": {
            "name": "test_002_missing_duration",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseFrom.test_003_missing_category": {
            "name": "test_003_missing_category",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseFrom.test_004_missing_date": {
            "name": "test_004_missing_date",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseFrom.test_005_missing_comment": {
            "name": "test_005_missing_comment",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseFrom.test_006_empty_csv": {
            "name": "test_006_empty_csv",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseFrom.test_007_one_row": {
            "name": "test_007_one_row",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "satisfaction-of-mine-master/src/test_main.py": {
        "_assert_accumulator_equal": {
            "name": "_assert_accumulator_equal",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "testcase": [
                    "memoryview"
                ],
                "a": [
                    "memoryview"
                ],
                "b": [
                    "memoryview"
                ]
            }
        },
        "BaseAccumulatorTestMixin.make_data_1": {
            "name": "make_data_1",
            "location": 18,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseAccumulatorTestMixin.make_data_2": {
            "name": "make_data_2",
            "location": 21,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseAccumulatorTestMixin.make_data_3": {
            "name": "make_data_3",
            "location": 24,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseAccumulatorTestMixin.assert_accumulator_equal": {
            "name": "assert_accumulator_equal",
            "location": 27,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "Mapping",
                    "List[str]"
                ],
                "b": [
                    "int",
                    "Mapping",
                    "List[str]"
                ]
            }
        },
        "BaseAccumulatorTestMixin.make_all": {
            "name": "make_all",
            "location": 30,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseAccumulatorTestMixin.test_001_equality": {
            "name": "test_001_equality",
            "location": 35,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseAccumulatorTestMixin.test_002_neutral_plus_neutral": {
            "name": "test_002_neutral_plus_neutral",
            "location": 43,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseAccumulatorTestMixin.test_003_neutral_plus_any": {
            "name": "test_003_neutral_plus_any",
            "location": 51,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseAccumulatorTestMixin.test_004_associative": {
            "name": "test_004_associative",
            "location": 60,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHoursAccumulator.make_data_1": {
            "name": "make_data_1",
            "location": 79,
            "return": [
                "main.HoursAccumulator"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHoursAccumulator.make_data_2": {
            "name": "make_data_2",
            "location": 82,
            "return": [
                "main.HoursAccumulator"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHoursAccumulator.make_data_3": {
            "name": "make_data_3",
            "location": 85,
            "return": [
                "main.HoursAccumulator"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHoursAccumulator.assert_accumulator_equal": {
            "name": "assert_accumulator_equal",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "float",
                    "str"
                ],
                "b": [
                    "float",
                    "str"
                ]
            }
        },
        "TestHoursAccumulator.test_010_satisfaction": {
            "name": "test_010_satisfaction",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStampedHoursAccumulator.make_data_1": {
            "name": "make_data_1",
            "location": 100,
            "return": [
                "main.StampedHoursAccumulator"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStampedHoursAccumulator.make_data_2": {
            "name": "make_data_2",
            "location": 103,
            "return": [
                "main.StampedHoursAccumulator"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStampedHoursAccumulator.make_data_3": {
            "name": "make_data_3",
            "location": 110,
            "return": [
                "main.StampedHoursAccumulator"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStampedHoursAccumulator.assert_accumulator_equal": {
            "name": "assert_accumulator_equal",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "str",
                    "Sequence[int]",
                    "int",
                    "List[int]",
                    "bytes",
                    "bytearray"
                ],
                "b": [
                    "int",
                    "List",
                    "Sequence[int]",
                    "str"
                ]
            }
        },
        "TestStampedHoursAccumulator.test_010_period_start": {
            "name": "test_010_period_start",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStampedHoursAccumulator.test_011_period_end": {
            "name": "test_011_period_end",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStampedHoursAccumulator.test_012_period_hours_accumulator": {
            "name": "test_012_period_hours_accumulator",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStampedHoursAccumulator.test_013_period_data": {
            "name": "test_013_period_data",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SilenceStdoutStderrMixin.setUp": {
            "name": "setUp",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SilenceStdoutStderrMixin.tearDown": {
            "name": "tearDown",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArgParse.setUp": {
            "name": "setUp",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArgParse.test_001_help": {
            "name": "test_001_help",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArgParse.test_002_conf_file_and_api_key_mandatory": {
            "name": "test_002_conf_file_and_api_key_mandatory",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArgParse.test_003_months_worth": {
            "name": "test_003_months_worth",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArgParse.test_004_weeks_worth": {
            "name": "test_004_weeks_worth",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArgParse.test_005_too_many_args": {
            "name": "test_005_too_many_args",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMain.test_normal_run": {
            "name": "test_normal_run",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMain.MockIO.__init__": {
            "name": "__init__",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMain.MockIO.perform_get_current_date": {
            "name": "perform_get_current_date",
            "location": 276,
            "return": [
                "float",
                "int",
                "str",
                "Type",
                "datetime.datetime"
            ],
            "arguments": {
                "self": [],
                "_dispatcher": [
                    "datetime.datetime",
                    "Callable",
                    "bool",
                    "Type[Exception]",
                    "Callable[[Any], T]"
                ],
                "_d": [
                    "datetime.datetime",
                    "Callable",
                    "bool",
                    "Type[Exception]",
                    "Callable[[Any], T]"
                ]
            }
        },
        "TestMain.MockIO.perform_http_request": {
            "name": "perform_http_request",
            "location": 281,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "_dispatcher": [
                    "bytes"
                ],
                "req": [
                    "dict",
                    "bool",
                    "list",
                    "Callable[[], None]",
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "TestMain.MockIO.perform_get_config_json": {
            "name": "perform_get_config_json",
            "location": 286,
            "return": [
                "Dict[str, Any]",
                "Optional[dict]",
                "Optional[str]",
                "List[str]",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": [],
                "_dispatcher": [
                    "str",
                    "list",
                    "bool"
                ],
                "read_json": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestMain.MockIO.perform_print_line": {
            "name": "perform_print_line",
            "location": 291,
            "return": [
                "None",
                "str",
                "Optional[int]",
                "Optional[object]",
                "Optional[Any]",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "_dispatcher": [
                    "bool",
                    "Callable",
                    "int",
                    "str",
                    "Iterator[str]",
                    "List[str]",
                    "List[Dict[str, Any]]",
                    "List[bytes]"
                ],
                "p": [
                    "list",
                    "str",
                    "tuple",
                    "Callable[[], None]",
                    "float"
                ]
            }
        },
        "TestMain.MockIO.dispatcher": {
            "name": "dispatcher",
            "location": 296,
            "return": [
                "ComposedDispatcher",
                "Tuple",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "satisfaction-of-mine-master/src/test_rules.py": {
        "_make_TimeEntry": {
            "name": "_make_TimeEntry",
            "location": 9,
            "return": [
                "entries.TimeEntry"
            ],
            "arguments": {
                "issue_id": [
                    "Text",
                    "Sequence[int]",
                    "str",
                    "Optional[Dict]",
                    "bool",
                    "Optional[List[str]]",
                    "float"
                ],
                "duration": [
                    "float",
                    "Sequence[int]",
                    "str",
                    "Optional[Dict]",
                    "bool",
                    "Optional[List[str]]"
                ],
                "category": [
                    "Text",
                    "Sequence[int]",
                    "str",
                    "Optional[Dict]",
                    "bool",
                    "Optional[List[str]]",
                    "float"
                ],
                "comment": [
                    "Text",
                    "Sequence[int]",
                    "str",
                    "Optional[Dict]",
                    "bool",
                    "Optional[List[str]]",
                    "float"
                ],
                "date": [
                    "Text",
                    "Sequence[int]",
                    "str",
                    "Optional[Dict]",
                    "bool",
                    "Optional[List[str]]",
                    "float"
                ]
            }
        },
        "TestMatchIssueID.test_001_create_MatchIssueID": {
            "name": "test_001_create_MatchIssueID",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMatchIssueID.test_002_create_MatchIssueID": {
            "name": "test_002_create_MatchIssueID",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMatchIssueID.test_003_create_MatchIssueID": {
            "name": "test_003_create_MatchIssueID",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMatchIssueID.test_100_use_MatchIssueID": {
            "name": "test_100_use_MatchIssueID",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMatchIssueID.test_101_use_MatchIssueID": {
            "name": "test_101_use_MatchIssueID",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMatchCategory.test_001_create_MatchCategory": {
            "name": "test_001_create_MatchCategory",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMatchCategory.test_002_create_MatchCategory": {
            "name": "test_002_create_MatchCategory",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMatchCategory.test_003_create_MatchCategory": {
            "name": "test_003_create_MatchCategory",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMatchCategory.test_004_create_MatchCategory": {
            "name": "test_004_create_MatchCategory",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMatchCategory.test_100_use_MatchCategory": {
            "name": "test_100_use_MatchCategory",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMatchCategory.test_101_use_MatchCategory": {
            "name": "test_101_use_MatchCategory",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_DummyAccumulator.neutral": {
            "name": "neutral",
            "location": 90,
            "return": [
                "_DummyAccumulator"
            ],
            "arguments": {
                "cls": [
                    "Type[_T_DummyAccumulator]"
                ]
            }
        },
        "_DummyAccumulator.update": {
            "name": "update",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "_DummyAccumulator.from_rule_and_entry": {
            "name": "from_rule_and_entry",
            "location": 97,
            "return": [
                "_DummyAccumulator"
            ],
            "arguments": {
                "cls": [
                    "Type[_T_DummyAccumulator]"
                ],
                "rule": [
                    "str",
                    "Callable"
                ],
                "entry": [
                    "str",
                    "Callable"
                ]
            }
        },
        "TestRuleEvaluator.test_001_create_RuleEvaluator": {
            "name": "test_001_create_RuleEvaluator",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuleEvaluator.test_002_create_RuleEvaluator": {
            "name": "test_002_create_RuleEvaluator",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuleEvaluator.test_003_create_RuleEvaluator": {
            "name": "test_003_create_RuleEvaluator",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuleEvaluator.test_004_use_RuleEvaluator": {
            "name": "test_004_use_RuleEvaluator",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuleEvaluator.test_005_zero_weight": {
            "name": "test_005_zero_weight",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseRules.assert_parse_rules": {
            "name": "assert_parse_rules",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rules_list": [
                    "int",
                    "Callable",
                    "bool"
                ],
                "expected": [
                    "int",
                    "Callable",
                    "bool"
                ]
            }
        },
        "TestParseRules.test_001_empty_rules_list": {
            "name": "test_001_empty_rules_list",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseRules.test_002_no_rules_raises": {
            "name": "test_002_no_rules_raises",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseRules.test_003_1_rule_match_id": {
            "name": "test_003_1_rule_match_id",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseRules.test_004_2_rules_match_id": {
            "name": "test_004_2_rules_match_id",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseRules.test_005_1_rule_match_any": {
            "name": "test_005_1_rule_match_any",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseRules.test_006_1_rule_match_category": {
            "name": "test_006_1_rule_match_category",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseRules.test_007_mix_of_rules": {
            "name": "test_007_mix_of_rules",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseRules.test_008_extra_keys_raise": {
            "name": "test_008_extra_keys_raise",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParseRules.test_009_comment_allowed": {
            "name": "test_009_comment_allowed",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "satisfaction-of-mine-master/src/test_sparkline.py": {
        "TestSparkline.assert_one_bar_height": {
            "name": "assert_one_bar_height",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "List",
                    "List[str]",
                    "int",
                    "Sequence[str]",
                    "Tuple[float,int]",
                    "Tuple[Union[float,int]]"
                ],
                "bot": [
                    "str",
                    "List",
                    "List[str]",
                    "int",
                    "Sequence[str]",
                    "Tuple[float,int]",
                    "Tuple[Union[float,int]]"
                ]
            }
        },
        "TestSparkline.test_000000_sparkline": {
            "name": "test_000000_sparkline",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSparkline.test_006249_sparkline": {
            "name": "test_006249_sparkline",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSparkline.test_006251_sparkline": {
            "name": "test_006251_sparkline",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSparkline.test_018749_sparkline": {
            "name": "test_018749_sparkline",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSparkline.test_018751_sparkline": {
            "name": "test_018751_sparkline",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSparkline.test_031249_sparkline": {
            "name": "test_031249_sparkline",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSparkline.test_031251_sparkline": {
            "name": "test_031251_sparkline",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSparkline.test_043749_sparkline": {
            "name": "test_043749_sparkline",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSparkline.test_043751_sparkline": {
            "name": "test_043751_sparkline",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSparkline.test_056249_sparkline": {
            "name": "test_056249_sparkline",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSparkline.test_056251_sparkline": {
            "name": "test_056251_sparkline",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSparkline.test_068749_sparkline": {
            "name": "test_068749_sparkline",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSparkline.test_068751_sparkline": {
            "name": "test_068751_sparkline",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSparkline.test_081249_sparkline": {
            "name": "test_081249_sparkline",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSparkline.test_081251_sparkline": {
            "name": "test_081251_sparkline",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSparkline.test_093749_sparkline": {
            "name": "test_093749_sparkline",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSparkline.test_093751_sparkline": {
            "name": "test_093751_sparkline",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSparkline.test_100000_sparkline": {
            "name": "test_100000_sparkline",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSparkline.test_100001_sparkline": {
            "name": "test_100001_sparkline",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSparkline.test_m000001_sparkline": {
            "name": "test_m000001_sparkline",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSparkline.test_m100000_sparkline": {
            "name": "test_m100000_sparkline",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSparkline.test_sequence_sparkline": {
            "name": "test_sequence_sparkline",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
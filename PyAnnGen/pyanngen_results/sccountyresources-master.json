{
    "sccountyresources-master/sccresources/manage.py": {},
    "sccountyresources-master/sccresources/addressbook/admin.py": {},
    "sccountyresources-master/sccresources/addressbook/apps.py": {},
    "sccountyresources-master/sccresources/addressbook/models.py": {},
    "sccountyresources-master/sccresources/addressbook/tests.py": {},
    "sccountyresources-master/sccresources/addressbook/urls.py": {},
    "sccountyresources-master/sccresources/addressbook/views.py": {},
    "sccountyresources-master/sccresources/addressbook/__init__.py": {},
    "sccountyresources-master/sccresources/addressbook/migrations/__init__.py": {},
    "sccountyresources-master/sccresources/sccalendar/admin.py": {},
    "sccountyresources-master/sccresources/sccalendar/apps.py": {},
    "sccountyresources-master/sccresources/sccalendar/context_processor.py": {
        "get_google_captcha_public_credentials": {
            "name": "get_google_captcha_public_credentials",
            "location": 3,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "add_variables_to_context": {
            "name": "add_variables_to_context",
            "location": 10,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "request": []
            }
        }
    },
    "sccountyresources-master/sccresources/sccalendar/decorators.py": {
        "validate_twilio_request": {
            "name": "validate_twilio_request",
            "location": 6,
            "return": [
                "Callable"
            ],
            "arguments": {
                "f": [
                    "Callable",
                    "T",
                    "str",
                    "Dict"
                ]
            }
        },
        "validate_twilio_request.decorated_function": {
            "name": "decorated_function",
            "location": 9,
            "return": [
                "HttpResponseForbidden",
                "Callable[,None]",
                "bool",
                "int",
                "bytes"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "sccountyresources-master/sccresources/sccalendar/forms.py": {},
    "sccountyresources-master/sccresources/sccalendar/google_calendar.py": {
        "GoogleEvent.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str",
                    "Optional[Dict[int, int]]",
                    "bool"
                ],
                "default_summary": [
                    "Dict",
                    "int",
                    "None"
                ],
                "default_location": [
                    "Dict",
                    "int",
                    "None"
                ],
                "default_description": [
                    "int",
                    "None",
                    "List[str]",
                    "bool"
                ],
                "default_reccurence": [
                    "bool",
                    "None",
                    "Optional[Mapping]",
                    "Exception",
                    "Mapping",
                    "Optional[int]",
                    "Type",
                    "Type[T]",
                    "int"
                ]
            }
        },
        "GoogleEvent.__repr__": {
            "name": "__repr__",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleEvent.is_allday": {
            "name": "is_allday",
            "location": 76,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleEvent.to_ical_event": {
            "name": "to_ical_event",
            "location": 82,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleEvent.to_ical": {
            "name": "to_ical",
            "location": 102,
            "return": [
                "Calendar",
                "float",
                "Dict",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleCalendar.__init__": {
            "name": "__init__",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "int",
                    "str"
                ],
                "calendar_id": [
                    "str",
                    "int",
                    "Tuple[int,str]",
                    "Tuple[Union[int,str]]"
                ]
            }
        },
        "GoogleCalendar.__repr__": {
            "name": "__repr__",
            "location": 141,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleCalendar.get_event": {
            "name": "get_event",
            "location": 144,
            "return": [
                "GoogleEvent"
            ],
            "arguments": {
                "self": [],
                "event_id": [
                    "int",
                    "str"
                ],
                "api_params": [
                    "Dict",
                    "int",
                    "str"
                ],
                "google_event_params": [
                    "Dict",
                    "Optional[TrackingData]",
                    "Optional[List[str]]",
                    "Dict[str,int]",
                    "Dict[str,Any]",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "GoogleCalendar.get_raw_events": {
            "name": "get_raw_events",
            "location": 157,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "api_params": [
                    "Dict",
                    "List[str]",
                    "str",
                    "bytes",
                    "bool",
                    "IO"
                ]
            }
        },
        "GoogleCalendar.get_events": {
            "name": "get_events",
            "location": 176,
            "return": [
                "Generator[(GoogleEvent, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "api_params": [
                    "int",
                    "Dict"
                ],
                "google_event_params": [
                    "Dict",
                    "List[Event]",
                    "str"
                ]
            }
        },
        "GoogleCalendar.export_ical": {
            "name": "export_ical",
            "location": 185,
            "return": [
                "Calendar",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sccountyresources-master/sccresources/sccalendar/google_credentials_auth.py": {
        "get_google_service_credentials": {
            "name": "get_google_service_credentials",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_google_api_key": {
            "name": "get_google_api_key",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "dest": [
                    "str"
                ]
            }
        },
        "get_service": {
            "name": "get_service",
            "location": 45,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        }
    },
    "sccountyresources-master/sccresources/sccalendar/google_maps.py": {
        "GoogleDistanceEvent.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "int",
                    "None",
                    "Optional[Game]",
                    "Dict[str,Any]",
                    "bool",
                    "Optional[Dict[str,Any]]"
                ],
                "distance": [
                    "int",
                    "List[str]",
                    "Callable",
                    "bool"
                ],
                "distance_text": [
                    "int"
                ],
                "defaults": [
                    "Dict",
                    "int",
                    "Optional[Game]",
                    "bool",
                    "Optional[Dict[str,Any]]"
                ]
            }
        },
        "GoogleDistanceEvent.from_google_event": {
            "name": "from_google_event",
            "location": 22,
            "return": [
                "GoogleDistanceEvent"
            ],
            "arguments": {
                "cls": [
                    "Type[_TGoogleDistanceEvent]"
                ],
                "google_event": [
                    "bool",
                    "Optional[Callable]",
                    "Callable",
                    "None"
                ],
                "distance": [
                    "bool",
                    "Optional[Callable]",
                    "Callable",
                    "None"
                ],
                "distance_text": [
                    "bool",
                    "Optional[Callable]",
                    "Callable",
                    "None"
                ]
            }
        },
        "GoogleDistanceEvent.from_event_and_api": {
            "name": "from_event_and_api",
            "location": 30,
            "return": [
                "GoogleDistanceEvent"
            ],
            "arguments": {
                "cls": [
                    "Type[_TGoogleDistanceEvent]"
                ],
                "google_event": [
                    "int",
                    "Dict[int,dict]"
                ],
                "element": [
                    "int",
                    "Dict[int, dict]"
                ]
            }
        },
        "GoogleMaps.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "GoogleMaps.get_distance": {
            "name": "get_distance",
            "location": 56,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleMaps.convert_events": {
            "name": "convert_events",
            "location": 74,
            "return": [
                "Optional[Union[(list, _T1)]]"
            ],
            "arguments": {
                "self": [],
                "origin": [
                    "Dict",
                    "Dict[str,Any]",
                    "Dict[str,Union[str,Set]]",
                    "Dict[str,Union[str,set]]"
                ],
                "events_list": [
                    "Dict",
                    "Dict[str,Union[str,set]]",
                    "Dict[str,Union[str,Set]]",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "sccountyresources-master/sccresources/sccalendar/models.py": {
        "FAQ.__str__": {
            "name": "__str__",
            "location": 19,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "StaticEvent.__str__": {
            "name": "__str__",
            "location": 42,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Area.__str__": {
            "name": "__str__",
            "location": 49,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Category.__str__": {
            "name": "__str__",
            "location": 57,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sccountyresources-master/sccresources/sccalendar/tests.py": {
        "GoogleCalendarTestCase.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleCalendarTestCase.test_get_raw_events": {
            "name": "test_get_raw_events",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleCalendarTestCase.test_get_events": {
            "name": "test_get_events",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleCalendarTestCase.test_export_calendar": {
            "name": "test_export_calendar",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ViewsTestCase.setUp": {
            "name": "setUp",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ViewsTestCase.test_index_expecting_200": {
            "name": "test_index_expecting_200",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ViewsTestCase.test_calendars_expecting_200": {
            "name": "test_calendars_expecting_200",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ViewsTestCase.test_search_given_correct_params_expecting_200": {
            "name": "test_search_given_correct_params_expecting_200",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ViewsTestCase.test_search_given_incorrect_service_expecting_404": {
            "name": "test_search_given_incorrect_service_expecting_404",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ViewsTestCase.test_search_given_no_location_expecting_200": {
            "name": "test_search_given_no_location_expecting_200",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ViewsTestCase.test_search_given_empty_location_expecting_200": {
            "name": "test_search_given_empty_location_expecting_200",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ViewsTestCase.test_search_given_invalid_location_expecting_200": {
            "name": "test_search_given_invalid_location_expecting_200",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ViewsTestCase.test_details_expecting_200": {
            "name": "test_details_expecting_200",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ViewsTestCase.test_details_invalid_service_expecting_404": {
            "name": "test_details_invalid_service_expecting_404",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ViewsTestCase.test_details_invalid_id_expecting_404": {
            "name": "test_details_invalid_id_expecting_404",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ViewsTestCase.test_download_full_calendar_expecting_200": {
            "name": "test_download_full_calendar_expecting_200",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilsTestCase.test_to_sent": {
            "name": "test_to_sent",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sccountyresources-master/sccresources/sccalendar/urls.py": {},
    "sccountyresources-master/sccresources/sccalendar/utils.py": {
        "to_sent": {
            "name": "to_sent",
            "location": 6,
            "return": [
                "str"
            ],
            "arguments": {
                "abbrv_string": [
                    "str",
                    "bytes",
                    "List[str]",
                    "Dict"
                ]
            }
        },
        "parse_recurrence": {
            "name": "parse_recurrence",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "rec_list": [
                    "List[tuple[Union[str,str]]]",
                    "List",
                    "List[Tuple[str,str]]",
                    "List[str]",
                    "Sequence[dict]",
                    "Iterator[tuple]",
                    "bool"
                ]
            }
        },
        "to_standard": {
            "name": "to_standard",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "military_string": [
                    "str",
                    "bytes",
                    "List[str]",
                    "Dict"
                ]
            }
        },
        "get_tz": {
            "name": "get_tz",
            "location": 69,
            "return": [
                "Union[(pytz._UTCclass, pytz.tzinfo.DstTzInfo, pytz.tzinfo.StaticTzInfo)]"
            ],
            "arguments": {}
        },
        "format_event_data": {
            "name": "format_event_data",
            "location": 74,
            "return": [
                "int",
                "Dict[str, Any]",
                "dict",
                "Tuple[int, int]"
            ],
            "arguments": {
                "event": [
                    "_T0@@"
                ]
            }
        },
        "trim_event_time": {
            "name": "trim_event_time",
            "location": 80,
            "return": [
                "str"
            ],
            "arguments": {
                "time_str": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "shorten_location": {
            "name": "shorten_location",
            "location": 85,
            "return": [
                "bool",
                "float",
                "Optional[Any]",
                "int"
            ],
            "arguments": {
                "location": [
                    "Dict[str, bool]",
                    "bool",
                    "Match"
                ]
            }
        }
    },
    "sccountyresources-master/sccresources/sccalendar/views.py": {
        "index": {
            "name": "index",
            "location": 93,
            "return": [
                "int",
                "bool",
                "db.models.taxon.FillDataLevel",
                "dict"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "calendars": {
            "name": "calendars",
            "location": 103,
            "return": [
                "List[str]",
                "Optional[str]",
                "Dict[str, Any]",
                "Tuple[str, str]",
                "str",
                "Counter",
                "dict"
            ],
            "arguments": {
                "request": [
                    "Tuple[int]",
                    "Dict",
                    "django.http.HttpRequest",
                    "viewer.models.Archive"
                ]
            }
        },
        "remove_control_characters": {
            "name": "remove_control_characters",
            "location": 115,
            "return": [
                "str",
                "Sequence",
                "bool",
                "List[str]",
                "List[Tuple[str,Any]]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ]
            }
        },
        "search_day_noncomplete": {
            "name": "search_day_noncomplete",
            "location": 118,
            "return": [
                "Dict[str, Any]",
                "Mapping[int, str]",
                "List[int]",
                "Dict[int, str]",
                "Union[Dict, List]",
                "dict",
                "bool"
            ],
            "arguments": {
                "request": [
                    "Dict",
                    "str",
                    "Union[str,bytes,Any]",
                    "bytes",
                    "Type[Any]",
                    "Any",
                    "apistar.http.Headers",
                    "Type",
                    "http.MITMRequest",
                    "django.http.HttpRequest"
                ]
            }
        },
        "search_day": {
            "name": "search_day",
            "location": 123,
            "return": [
                "bool",
                "Optional[str]",
                "Iterable[Any]",
                "datetime.datetime"
            ],
            "arguments": {
                "request": [
                    "int",
                    "django.http.HttpRequest"
                ],
                "year": [
                    "django.http.HttpRequest",
                    "int",
                    "None"
                ],
                "month": [
                    "django.http.HttpRequest",
                    "int",
                    "None"
                ],
                "day": [
                    "django.http.HttpRequest",
                    "int",
                    "None"
                ]
            }
        },
        "search": {
            "name": "search",
            "location": 127,
            "return": [
                "int",
                "bytes",
                "djmoney.contrib.exchange.models.Rate",
                "zerver.models.Realm",
                "bool",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "request": [
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "zam_repondeur.models.Amendement"
                ],
                "year": [
                    "None",
                    "int",
                    "Optional[datetime.datetime]",
                    "Optional[int]",
                    "datetime.datetime",
                    "Union[datetime.date,datetime.datetime]",
                    "datetime.timedelta",
                    "zerver.models.Realm"
                ],
                "month": [
                    "None",
                    "int",
                    "Optional[datetime.datetime]",
                    "Optional[int]",
                    "datetime.datetime",
                    "Union[datetime.date,datetime.datetime]",
                    "datetime.timedelta",
                    "zerver.models.Realm"
                ],
                "day": [
                    "None",
                    "int",
                    "Optional[datetime.datetime]",
                    "Optional[int]",
                    "datetime.datetime",
                    "Union[datetime.date,datetime.datetime]",
                    "datetime.timedelta",
                    "zerver.models.Realm"
                ],
                "timespan": [
                    "int",
                    "None",
                    "Counter",
                    "str",
                    "bool",
                    "List[Tuple[str,int]]",
                    "List[tuple[Union[str,int]]]"
                ]
            }
        },
        "subscribe": {
            "name": "subscribe",
            "location": 228,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        },
        "confirm": {
            "name": "confirm",
            "location": 334,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "unsubscribe": {
            "name": "unsubscribe",
            "location": 366,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "unsub_all": {
            "name": "unsub_all",
            "location": 382,
            "return": [
                "int",
                "dict",
                "str"
            ],
            "arguments": {
                "request": [
                    "str",
                    "django.http.HttpRequest",
                    "Dict",
                    "Union[dict,list]",
                    "List"
                ]
            }
        },
        "get_google_captcha_private_credentials": {
            "name": "get_google_captcha_private_credentials",
            "location": 390,
            "return": [
                "str",
                "Dict[str, str]",
                "int",
                "zerver.models.Realm"
            ],
            "arguments": {}
        },
        "details": {
            "name": "details",
            "location": 398,
            "return": [
                "int",
                "bool",
                "db.models.taxon.FillDataLevel",
                "dict",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "zerver.models.UserProfile"
                ],
                "service": [
                    "str",
                    "None",
                    "zerver.models.UserProfile",
                    "clients.models.Client"
                ],
                "event_id": [
                    "str",
                    "None",
                    "zerver.models.UserProfile",
                    "clients.models.Client"
                ]
            }
        },
        "faq": {
            "name": "faq",
            "location": 437,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "contact_us": {
            "name": "contact_us",
            "location": 445,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "Callable",
                    "django.http.HttpRequest"
                ]
            }
        },
        "events": {
            "name": "events",
            "location": 452,
            "return": [
                "dict",
                "Optional[Exception]",
                "Dict[str, float]",
                "str"
            ],
            "arguments": {
                "request": [
                    "http.MITMRequest",
                    "django.http.HttpRequest"
                ]
            }
        },
        "event_ical_download": {
            "name": "event_ical_download",
            "location": 477,
            "return": [
                "HttpResponse",
                "Dict",
                "Dict[str,Union[int,str]]",
                "List[str]",
                "Optional[Dict[str,Any]]",
                "Dict[int,List[str]]",
                "Optional[Dict[str,str]]",
                "bytes"
            ],
            "arguments": {
                "request": [
                    "str",
                    "django.http.HttpRequest"
                ],
                "service": [
                    "str",
                    "None",
                    "zerver.models.UserProfile",
                    "accounts.models.Account"
                ],
                "event_id": [
                    "str",
                    "None",
                    "zerver.models.UserProfile",
                    "clients.models.Client"
                ]
            }
        },
        "calendar_ical_download": {
            "name": "calendar_ical_download",
            "location": 498,
            "return": [
                "HttpResponseRedirect",
                "Optional[str]",
                "HttpResponse",
                "Dict[str,Any]",
                "str",
                "Tuple[str,Optional[int]]"
            ],
            "arguments": {
                "request": [
                    "bool"
                ],
                "service": [
                    "django.db.models.QuerySet",
                    "int",
                    "None",
                    "Dict[str,Any]"
                ]
            }
        },
        "just_places": {
            "name": "just_places",
            "location": 516,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "Callable",
                    "django.http.HttpRequest"
                ]
            }
        },
        "search.sort_events": {
            "name": "sort_events",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "events": [
                    "set",
                    "services.shop.order.models.order_evenOrderEvent",
                    "dict",
                    "raiden.utils.Dict",
                    "Mapping[str, Any]"
                ]
            }
        },
        "search.api_call": {
            "name": "api_call",
            "location": 142,
            "return": [
                "bytes",
                "HttpResponseRedirect",
                "Dict[str,Any]",
                "None",
                "Optional[str]",
                "List"
            ],
            "arguments": {
                "services": [
                    "List[str]",
                    "int",
                    "tracim.models.data.Workspace",
                    "str"
                ],
                "locations": [
                    "Optional[Any]",
                    "str",
                    "Sequence[object]",
                    "Callable"
                ],
                "api_params": [
                    "Callable[[Any], bool]",
                    "raiden.utils.BlockSpecification",
                    "raiden.utils.Address.Hex",
                    "deeplearning.ml4pl.models.classifier_base.ClassifierBase",
                    "bool"
                ]
            }
        },
        "search.sort_events.event_key": {
            "name": "event_key",
            "location": 136,
            "return": [
                "Tuple[Optional[bool]]",
                "int",
                "purplship.core.utils.xml.Element",
                "bool"
            ],
            "arguments": {
                "event": [
                    "zerver.models.UserProfile",
                    "int",
                    "str"
                ]
            }
        }
    },
    "sccountyresources-master/sccresources/sccalendar/__init__.py": {},
    "sccountyresources-master/sccresources/sccalendar/migrations/0001_initial.py": {},
    "sccountyresources-master/sccresources/sccalendar/migrations/0002_auto_20190612_1727.py": {},
    "sccountyresources-master/sccresources/sccalendar/migrations/__init__.py": {},
    "sccountyresources-master/sccresources/sccalendar/modules/sms.py": {
        "add_reminder": {
            "name": "add_reminder",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "event_id": [
                    "str",
                    "Sequence[int]",
                    "int",
                    "Set[int]",
                    "zerver.models.Realm"
                ],
                "cal_id": [
                    "str",
                    "Sequence[int]",
                    "int",
                    "Set[int]",
                    "zerver.models.Realm"
                ],
                "date": [
                    "str",
                    "int",
                    "datetime.datetime",
                    "Dict[datetime.date,dict[str,Any]]",
                    "datetime.date",
                    "Dict[datetime.date,Dict[str,Any]]"
                ],
                "time": [
                    "int",
                    "datetime.date",
                    "Dict[datetime.date,dict[str,Any]]",
                    "str",
                    "List[Union[Any,Any]]",
                    "datetime.datetime",
                    "Dict[datetime.date,Dict[str,Any]]"
                ],
                "rrule": [
                    "str",
                    "None",
                    "int",
                    "Optional[str]",
                    "Optional[datetime.datetime]",
                    "datetime.datetime"
                ],
                "title": [
                    "int",
                    "datetime.datetime",
                    "None",
                    "Optional[int]",
                    "Optional[datetime.time]"
                ],
                "phone_number": [
                    "str",
                    "int"
                ]
            }
        },
        "call_remind": {
            "name": "call_remind",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "event_id": [
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "List[tuple[Union[int,int]]]",
                    "List[Tuple[int,int]]",
                    "datetime.datetime"
                ],
                "cal_id": [
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "List[tuple[Union[int,int]]]",
                    "List[Tuple[int,int]]",
                    "datetime.datetime"
                ],
                "iso_date_time": [
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "List[tuple[Union[int,int]]]",
                    "List[Tuple[int,int]]",
                    "datetime.datetime"
                ],
                "number": [
                    "str",
                    "int",
                    "Dict[str,str]",
                    "None",
                    "Optional[annofabapi.models.InspectionStatus]",
                    "esm.models.last_operation.LastOperation",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "send_sms": {
            "name": "send_sms",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "number": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "body": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "del_reminder": {
            "name": "del_reminder",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "str",
                    "tonga.models.records.command.command.BaseCommand"
                ],
                "phone_number": [
                    "str",
                    "tonga.models.records.command.command.BaseCommand"
                ]
            }
        },
        "unsubscribe": {
            "name": "unsubscribe",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "phone_number": [
                    "str",
                    "models.Station",
                    "allennlp.models.model.Model",
                    "esm.models.service_instance.ServiceInstance",
                    "zerver.models.Realm"
                ]
            }
        },
        "one_hour_before": {
            "name": "one_hour_before",
            "location": 174,
            "return": [
                "int"
            ],
            "arguments": {
                "datetime_obj": [
                    "float",
                    "int",
                    "str",
                    "bool",
                    "datetime.datetime"
                ]
            }
        },
        "__remind": {
            "name": "__remind",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "event_id": [
                    "int",
                    "str",
                    "List[tuple[Union[int,int]]]",
                    "datetime.datetime",
                    "None",
                    "List[Tuple[int,int]]",
                    "Optional[str]"
                ],
                "cal_id": [
                    "int",
                    "str",
                    "List[tuple[Union[int,int]]]",
                    "datetime.datetime",
                    "None",
                    "List[Tuple[int,int]]",
                    "Optional[str]"
                ],
                "iso_date_time": [
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "List[tuple[Union[int,int]]]",
                    "datetime.datetime",
                    "List[Tuple[int,int]]"
                ],
                "title": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "LessThanHour.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LessThanHour.__str__": {
            "name": "__str__",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlreadySubscribed.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlreadySubscribed.__str__": {
            "name": "__str__",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NullSubscriptionArgument.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NullSubscriptionArgument.__str__": {
            "name": "__str__",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sccountyresources-master/sccresources/sccresources/settings.py": {
        "get_db_creds": {
            "name": "get_db_creds",
            "location": 17,
            "return": [
                "Tuple[(str, str, str, Optional[str])]"
            ],
            "arguments": {}
        }
    },
    "sccountyresources-master/sccresources/sccresources/urls.py": {},
    "sccountyresources-master/sccresources/sccresources/wsgi.py": {},
    "sccountyresources-master/sccresources/sccresources/__init__.py": {},
    "sccountyresources-master/sccresources/scripts/build_app_yaml.py": {
        "main": {
            "name": "main",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "argv": [
                    "str",
                    "List[str]",
                    "bytes",
                    "bool",
                    "FrozenSet[str]",
                    "Deque[str]"
                ]
            }
        }
    }
}
{
    "scheduler-main/credentials.py": {},
    "scheduler-main/scheduling.py": {
        "schedules": {
            "name": "schedules",
            "location": 111,
            "return": [
                "Iterator[List[Meeting]]"
            ],
            "arguments": {
                "items": [
                    "List[Meeting]"
                ]
            }
        },
        "assign": {
            "name": "assign",
            "location": 125,
            "return": [
                "Optional[List[Meeting]]"
            ],
            "arguments": {
                "items": [
                    "List[Meeting]"
                ],
                "idx": [
                    "int"
                ],
                "s": [
                    "Slot"
                ]
            }
        },
        "eliminate": {
            "name": "eliminate",
            "location": 130,
            "return": [
                "Optional[List[Meeting]]"
            ],
            "arguments": {
                "items": [
                    "List[Meeting]"
                ],
                "idx": [
                    "int"
                ],
                "fn": [
                    "Callable[([Slot], bool)]"
                ]
            }
        },
        "Slot.overlaps": {
            "name": "overlaps",
            "location": 41,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Slot"
                ]
            }
        },
        "Slot.priority": {
            "name": "priority",
            "location": 45,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Participant.slot_ok": {
            "name": "slot_ok",
            "location": 59,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "Slot"
                ]
            }
        },
        "Meeting.copy": {
            "name": "copy",
            "location": 72,
            "return": [
                "Meeting"
            ],
            "arguments": {
                "self": [
                    "_TMeeting"
                ]
            }
        },
        "Meeting.remove_slots": {
            "name": "remove_slots",
            "location": 75,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "Callable[([Slot], bool)]"
                ]
            }
        },
        "Meeting.slot_ok_": {
            "name": "slot_ok_",
            "location": 84,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "Slot"
                ]
            }
        },
        "Meeting.impossible": {
            "name": "impossible",
            "location": 93,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Meeting.scheduled": {
            "name": "scheduled",
            "location": 96,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Meeting.unscheduled": {
            "name": "unscheduled",
            "location": 99,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Meeting.overlapping_participants": {
            "name": "overlapping_participants",
            "location": 102,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Meeting"
                ]
            }
        },
        "Meeting.__str__": {
            "name": "__str__",
            "location": 105,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "scheduler-main/tetris.py": {
        "weeks_desc": {
            "name": "weeks_desc",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {
                "weeks": [
                    "list[]",
                    "list",
                    "list[list[typing.Any]]",
                    "int",
                    "list[int]",
                    "List[List[Any]]",
                    "list[list[int]]",
                    "List[int]",
                    "List[List[int]]"
                ]
            }
        },
        "lcm": {
            "name": "lcm",
            "location": 216,
            "return": [
                "int"
            ],
            "arguments": {
                "a": [
                    "int"
                ],
                "b": [
                    "int"
                ]
            }
        },
        "TimeSlot.overlaps": {
            "name": "overlaps",
            "location": 51,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "scheduling.Slot"
                ]
            }
        },
        "TimeSlot.time_overlaps": {
            "name": "time_overlaps",
            "location": 57,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "TimeSlot"
                ]
            }
        },
        "TimeSlot.interval": {
            "name": "interval",
            "location": 62,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeSlot.__str__": {
            "name": "__str__",
            "location": 66,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeSlot.priority": {
            "name": "priority",
            "location": 73,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cadence.days_and_weeks": {
            "name": "days_and_weeks",
            "location": 92,
            "return": [
                "Iterator[Set[Tuple[(Day, int)]]]"
            ],
            "arguments": {
                "self": [],
                "weeks": [
                    "int"
                ]
            }
        },
        "DailyCadence.days_and_weeks": {
            "name": "days_and_weeks",
            "location": 100,
            "return": [
                "Iterator[Set[Tuple[(Day, int)]]]"
            ],
            "arguments": {
                "self": [],
                "weeks": [
                    "int"
                ]
            }
        },
        "WeeklyCadence.days_and_weeks": {
            "name": "days_and_weeks",
            "location": 110,
            "return": [
                "Iterator[Set[Tuple[(Day, int)]]]"
            ],
            "arguments": {
                "self": [],
                "weeks": [
                    "int",
                    "str",
                    "typing.Sequence['cirq.Qid']",
                    "bool",
                    "Sequence['cirq.Qid']",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "SpecificWeeklyCadence.days_and_weeks": {
            "name": "days_and_weeks",
            "location": 128,
            "return": [
                "Iterator[Set[Tuple[(Day, int)]]]"
            ],
            "arguments": {
                "self": [],
                "weeks": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "SprintCadence.days_and_weeks": {
            "name": "days_and_weeks",
            "location": 145,
            "return": [
                "Iterator[Set[Tuple[(Day, int)]]]"
            ],
            "arguments": {
                "self": [],
                "weeks": [
                    "int",
                    "str"
                ]
            }
        },
        "DailyMinusSprintDaysCadence.days_and_weeks": {
            "name": "days_and_weeks",
            "location": 157,
            "return": [
                "Iterator[Set[Tuple[(Day, int)]]]"
            ],
            "arguments": {
                "self": [],
                "weeks": [
                    "int",
                    "Optional[Union[int, float]]",
                    "str",
                    "dict",
                    "Tuple[int, int]",
                    "FrozenSet[int]",
                    "bool"
                ]
            }
        },
        "TimeConstraint.slot_ok": {
            "name": "slot_ok",
            "location": 174,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "TimeSlot"
                ]
            }
        },
        "AtOrBeforeTimeConstraint.slot_ok": {
            "name": "slot_ok",
            "location": 181,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "TimeSlot"
                ]
            }
        },
        "AtOrAfterTimeConstraint.slot_ok": {
            "name": "slot_ok",
            "location": 188,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "TimeSlot"
                ]
            }
        },
        "NullTimeConstraint.slot_ok": {
            "name": "slot_ok",
            "location": 193,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "TimeSlot"
                ]
            }
        },
        "MeetingSpec.possible_slots": {
            "name": "possible_slots",
            "location": 204,
            "return": [
                "Generator[(TimeSlot, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "start_hour": [
                    "int"
                ],
                "end_hour": [
                    "int",
                    "Optional[int]"
                ],
                "increment": [
                    "int",
                    "str",
                    "T"
                ],
                "total_weeks": [
                    "int",
                    "str",
                    "T"
                ]
            }
        }
    }
}
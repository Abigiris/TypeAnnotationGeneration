{
    "schema_salad-main/gittaggers.py": {
        "EggInfoFromGit.git_timestamp_tag": {
            "name": "git_timestamp_tag",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EggInfoFromGit.tags": {
            "name": "tags",
            "location": 28,
            "return": [
                "str",
                "List[str]",
                "Optional[bool]",
                "Callable[[str], str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "schema_salad-main/setup.py": {},
    "schema_salad-main/docs/conf.py": {},
    "schema_salad-main/schema_salad/codegen.py": {
        "codegen": {
            "name": "codegen",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "lang": [
                    "bool",
                    "str",
                    "int",
                    "List[int]",
                    "tuple"
                ],
                "i": [
                    "str",
                    "int",
                    "float",
                    "bool",
                    "Union[float, int]",
                    "List[str]",
                    "Callable",
                    "raiden.utils.PaymentAmount",
                    "raiden.utils.FeeAmount"
                ],
                "schema_metadata": [
                    "bool",
                    "Dict[str, int]",
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int",
                    "Optional[str]"
                ],
                "loader": [
                    "bool",
                    "int",
                    "float",
                    "raiden.utils.TokenAmount",
                    "raiden.utils.BlockHash",
                    "raiden.utils.BlockNumber"
                ],
                "target": [
                    "str",
                    "io.TextIOBase",
                    "List[str]",
                    "TextIO"
                ],
                "examples": [
                    "int",
                    "str",
                    "List[str]",
                    "bool",
                    "Optional[int]"
                ],
                "package": [
                    "bytes",
                    "bool",
                    "int",
                    "str"
                ],
                "copyright": [
                    "bool"
                ],
                "parser_info": [
                    "bool",
                    "Dict[str, Any]",
                    "Optional[dict]",
                    "List[bool]"
                ]
            }
        }
    },
    "schema_salad-main/schema_salad/codegen_base.py": {
        "TypeDef.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Sequence[Any]",
                    "bool",
                    "Optional[Sequence[Any]]",
                    "None",
                    "Dict",
                    "Optional[str]",
                    "List",
                    "Union[str,list]",
                    "Union[list,str]"
                ],
                "init": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "List[str]",
                    "Optional[bool]",
                    "List[Any]",
                    "Optional[List[Any]]",
                    "List"
                ],
                "is_uri": [
                    "bool",
                    "Optional[str]",
                    "Optional[bool]",
                    "Optional[List[Any]]",
                    "List",
                    "List[str]"
                ],
                "scoped_id": [
                    "bool",
                    "str",
                    "int"
                ],
                "ref_scope": [
                    "int",
                    "Optional[str]",
                    "bool",
                    "Optional[bool]",
                    "Optional[List[Any]]",
                    "List",
                    "List[str]"
                ],
                "loader_type": [
                    "int",
                    "None",
                    "bool",
                    "str",
                    "Optional[Sequence[str]]",
                    "Sequence[str]",
                    "Optional[float]",
                    "float"
                ],
                "instance_type": [
                    "int",
                    "None",
                    "bool",
                    "str",
                    "Optional[Sequence[str]]",
                    "Sequence[str]",
                    "Optional[float]",
                    "float"
                ],
                "abstract": [
                    "bool",
                    "Optional[str]",
                    "Optional[bool]",
                    "Optional[List[Any]]",
                    "List",
                    "List[str]"
                ]
            }
        },
        "CodeGenBase.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CodeGenBase.declare_type": {
            "name": "declare_type",
            "location": 51,
            "return": [
                "typing.Type",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "declared_type": [
                    "Type",
                    "str",
                    "bool"
                ]
            }
        },
        "CodeGenBase.add_vocab": {
            "name": "add_vocab",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "uri": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        },
        "CodeGenBase.prologue": {
            "name": "prologue",
            "location": 61,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "CodeGenBase.safe_name": {
            "name": "safe_name",
            "location": 66,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "CodeGenBase.begin_class": {
            "name": "begin_class",
            "location": 70,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "classname": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "extends": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "doc": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "abstract": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "field_names": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "idfield": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "optional_fields": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "CodeGenBase.end_class": {
            "name": "end_class",
            "location": 83,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "classname": [
                    "str",
                    "Type"
                ],
                "field_names": [
                    "str",
                    "Type"
                ]
            }
        },
        "CodeGenBase.type_loader": {
            "name": "type_loader",
            "location": 87,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "type_declaration": [
                    "str"
                ]
            }
        },
        "CodeGenBase.declare_field": {
            "name": "declare_field",
            "location": 93,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "fieldtype": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "doc": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "optional": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "CodeGenBase.declare_id_field": {
            "name": "declare_id_field",
            "location": 103,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "Set[str]",
                    "Dict"
                ],
                "fieldtype": [
                    "str",
                    "bool",
                    "Set[str]",
                    "Dict"
                ],
                "doc": [
                    "str",
                    "bool",
                    "Set[str]",
                    "Dict"
                ],
                "optional": [
                    "str",
                    "bool",
                    "Set[str]",
                    "Dict"
                ],
                "subscope": [
                    "str",
                    "bool",
                    "Set[str]",
                    "Dict"
                ]
            }
        },
        "CodeGenBase.uri_loader": {
            "name": "uri_loader",
            "location": 114,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "inner": [
                    "str",
                    "int",
                    "bool"
                ],
                "scoped_id": [
                    "str",
                    "int",
                    "bool"
                ],
                "vocab_term": [
                    "str",
                    "int",
                    "bool"
                ],
                "ref_scope": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "CodeGenBase.idmap_loader": {
            "name": "idmap_loader",
            "location": 124,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "bool",
                    "str",
                    "Iterable[tuple[Union[str,Any]]]",
                    "Iterable[Tuple[str,Any]]",
                    "List[str]"
                ],
                "inner": [
                    "bool",
                    "str",
                    "Iterable[tuple[Union[str,Any]]]",
                    "Iterable[Tuple[str,Any]]",
                    "List[str]"
                ],
                "map_subject": [
                    "bool",
                    "str",
                    "Iterable[tuple[Union[str,Any]]]",
                    "Iterable[Tuple[str,Any]]",
                    "List[str]"
                ],
                "map_predicate": [
                    "bool",
                    "str",
                    "Iterable[tuple[Union[str,Any]]]",
                    "Iterable[Tuple[str,Any]]",
                    "List[str]"
                ]
            }
        },
        "CodeGenBase.typedsl_loader": {
            "name": "typedsl_loader",
            "location": 130,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "inner": [
                    "str",
                    "List[Tuple[str,Any]]",
                    "List[tuple[Union[str,Any]]]",
                    "Optional[bool]",
                    "bool",
                    "None"
                ],
                "ref_scope": [
                    "str",
                    "List[Tuple[str,Any]]",
                    "List[tuple[Union[str,Any]]]",
                    "Optional[bool]",
                    "bool",
                    "None"
                ]
            }
        },
        "CodeGenBase.epilogue": {
            "name": "epilogue",
            "location": 134,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "root_loader": [
                    "Sequence[str]",
                    "Dict",
                    "int"
                ]
            }
        },
        "CodeGenBase.secondaryfilesdsl_loader": {
            "name": "secondaryfilesdsl_loader",
            "location": 138,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "inner": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        }
    },
    "schema_salad-main/schema_salad/dotnet_codegen.py": {
        "doc_to_doc_string": {
            "name": "doc_to_doc_string",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "doc": [
                    "str",
                    "int"
                ],
                "indent_level": [
                    "str",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "DotNetCodeGen.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base": [
                    "int",
                    "bool",
                    "str",
                    "Exception",
                    "List[str]"
                ],
                "examples": [
                    "bool",
                    "List['cirq.Circuit']",
                    "Optional[dict]",
                    "float",
                    "int",
                    "Optional[str]",
                    "str"
                ],
                "target": [
                    "str",
                    "int"
                ],
                "package": [
                    "bool",
                    "Union[bool, List, Tuple]",
                    "Path",
                    "Sequence[str]"
                ]
            }
        },
        "DotNetCodeGen.prologue": {
            "name": "prologue",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DotNetCodeGen.safe_name": {
            "name": "safe_name",
            "location": 132,
            "return": [
                "str",
                "Dict[str, Any]",
                "Type[Any]",
                "IO",
                "pathlib.Path",
                "bytes",
                "bool",
                "int"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Tuple[str, str]"
                ]
            }
        },
        "DotNetCodeGen.begin_class": {
            "name": "begin_class",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "classname": [
                    "str",
                    "Dict[str, Any]"
                ],
                "extends": [
                    "str",
                    "Optional[str]",
                    "Optional[Iterable[str]]",
                    "Callable[[Any], str]",
                    "Dict[str, str]",
                    "Sequence[Any]"
                ],
                "doc": [
                    "Tuple[float, float]",
                    "bool",
                    "Optional[dict]"
                ],
                "abstract": [
                    "str",
                    "Dict[str, Any]"
                ],
                "field_names": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "idfield": [
                    "bool",
                    "Optional[List[str]]",
                    "int"
                ],
                "optional_fields": [
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "DotNetCodeGen.end_class": {
            "name": "end_class",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "classname": [
                    "str",
                    "bool",
                    "pathlib.Path",
                    "Union[str, Pattern]"
                ],
                "field_names": [
                    "str",
                    "pathlib.Path",
                    "bytes"
                ]
            }
        },
        "DotNetCodeGen.type_loader": {
            "name": "type_loader",
            "location": 401,
            "return": [
                "schema.GraphQLType"
            ],
            "arguments": {
                "self": [],
                "type_declaration": [
                    "Optional[str]"
                ]
            }
        },
        "DotNetCodeGen.type_loader_enum": {
            "name": "type_loader_enum",
            "location": 469,
            "return": [
                "schema_salad.codegen_base.TypeDef"
            ],
            "arguments": {
                "self": [],
                "type_declaration": [
                    "str",
                    "Callable"
                ]
            }
        },
        "DotNetCodeGen.declare_field": {
            "name": "declare_field",
            "location": 566,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Type[T]",
                    "type"
                ],
                "fieldtype": [
                    "str",
                    "bool"
                ],
                "doc": [
                    "str",
                    "pathlib.Path"
                ],
                "optional": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "DotNetCodeGen.declare_id_field": {
            "name": "declare_id_field",
            "location": 750,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "fieldtype": [
                    "str",
                    "Type",
                    "bool",
                    "Optional[List[str]]"
                ],
                "doc": [
                    "str",
                    "Optional[str]",
                    "dict"
                ],
                "optional": [
                    "str",
                    "bool",
                    "Set[str]",
                    "dict"
                ],
                "subscope": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "DotNetCodeGen.to_dotnet": {
            "name": "to_dotnet",
            "location": 797,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "bool",
                    "str",
                    "float",
                    "Optional[bool]",
                    "Exception"
                ]
            }
        },
        "DotNetCodeGen.uri_loader": {
            "name": "uri_loader",
            "location": 807,
            "return": [
                "schema_salad.codegen_base.TypeDef"
            ],
            "arguments": {
                "self": [],
                "inner": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "scoped_id": [
                    "str",
                    "Optional[int]",
                    "int",
                    "Union[None, int, str]",
                    "Optional[str]",
                    "Union[str, int]"
                ],
                "vocab_term": [
                    "str",
                    "Optional[int]",
                    "int",
                    "Union[None, int, str]",
                    "Optional[str]",
                    "Union[str, int]"
                ],
                "ref_scope": [
                    "str",
                    "Optional[int]",
                    "int",
                    "Union[None, int, str]",
                    "Optional[str]",
                    "Union[str, int]"
                ]
            }
        },
        "DotNetCodeGen.idmap_loader": {
            "name": "idmap_loader",
            "location": 833,
            "return": [
                "schema_salad.codegen_base.TypeDef"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str",
                    "schema.Field"
                ],
                "inner": [
                    "schema.Field",
                    "Type"
                ],
                "map_subject": [
                    "str",
                    "schema.Field"
                ],
                "map_predicate": [
                    "str",
                    "schema.Field"
                ]
            }
        },
        "DotNetCodeGen.typedsl_loader": {
            "name": "typedsl_loader",
            "location": 849,
            "return": [
                "schema_salad.codegen_base.TypeDef"
            ],
            "arguments": {
                "self": [],
                "inner": [
                    "Optional[str]",
                    "schema.ScalarType",
                    "schema.EnumType",
                    "str"
                ],
                "ref_scope": [
                    "bool"
                ]
            }
        },
        "DotNetCodeGen.epilogue": {
            "name": "epilogue",
            "location": 863,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root_loader": [
                    "Sequence[str]",
                    "dict",
                    "List[List[xml.etree.ElementTree.Element]]",
                    "int"
                ]
            }
        },
        "DotNetCodeGen.secondaryfilesdsl_loader": {
            "name": "secondaryfilesdsl_loader",
            "location": 982,
            "return": [
                "schema_salad.codegen_base.TypeDef"
            ],
            "arguments": {
                "self": [],
                "inner": [
                    "recidiviz.persistence.database.schema.state.schema.StateSupervisionViolationResponse",
                    "bool"
                ]
            }
        },
        "DotNetCodeGen.epilogue.template_from_resource": {
            "name": "template_from_resource",
            "location": 878,
            "return": [
                "str"
            ],
            "arguments": {
                "resource": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "DotNetCodeGen.epilogue.expand_resource_template_to": {
            "name": "expand_resource_template_to",
            "location": 885,
            "return": [
                "None"
            ],
            "arguments": {
                "resource": [
                    "str",
                    "path.Path",
                    "IO[bytes]",
                    "Dict[str, cerulean.Path]",
                    "Union[pathlib.Path, str]",
                    "pathlib.Path"
                ],
                "path": [
                    "str",
                    "pathlib.Path",
                    "Union[pathlib.Path, str]"
                ]
            }
        },
        "DotNetCodeGen.epilogue.copy_utils_recursive": {
            "name": "copy_utils_recursive",
            "location": 966,
            "return": [
                "None"
            ],
            "arguments": {
                "util_src": [
                    "str",
                    "List[pypi2nix.path.Path]",
                    "pathlib.Path",
                    "bytes",
                    "int",
                    "bool"
                ],
                "util_target": [
                    "str",
                    "pathlib.Path",
                    "Union[pathlib.Path, str]",
                    "dict",
                    "Optional[pathlib.Path]"
                ]
            }
        }
    },
    "schema_salad-main/schema_salad/exceptions.py": {
        "to_one_line_messages": {
            "name": "to_one_line_messages",
            "location": 129,
            "return": [
                "str"
            ],
            "arguments": {
                "exc": [
                    "str"
                ]
            }
        },
        "SchemaSaladException.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "bool",
                    "Dict[str,int]",
                    "int"
                ],
                "sl": [
                    "int",
                    "None",
                    "List[int]",
                    "Mapping[str,Tuple[float,float,float]]",
                    "Mapping",
                    "Optional[int]"
                ],
                "children": [
                    "Optional[List[int]]",
                    "None",
                    "Optional[Sequence[Any]]",
                    "List[str]",
                    "List[int]",
                    "List[List[Callable]]",
                    "Sequence[Any]",
                    "List[list[Callable]]"
                ],
                "bullet_for_children": [
                    "Text",
                    "float",
                    "str"
                ]
            }
        },
        "SchemaSaladException.propagate_sourceline": {
            "name": "propagate_sourceline",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaSaladException.as_warning": {
            "name": "as_warning",
            "location": 59,
            "return": [
                "SchemaSaladException"
            ],
            "arguments": {
                "self": [
                    "_TSchemaSaladException@@SchemaSaladException@@"
                ]
            }
        },
        "SchemaSaladException.with_sourceline": {
            "name": "with_sourceline",
            "location": 65,
            "return": [
                "SchemaSaladException"
            ],
            "arguments": {
                "self": [
                    "_TSchemaSaladException@@SchemaSaladException@@"
                ],
                "sl": [
                    "str",
                    "int"
                ]
            }
        },
        "SchemaSaladException.leaves": {
            "name": "leaves",
            "location": 76,
            "return": [
                "bool",
                "int",
                "List[SchemaSaladException]",
                "List",
                "List[str]",
                "str",
                "List[Tuple[int,str,str]]",
                "Tuple[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaSaladException.prefix": {
            "name": "prefix",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaSaladException.summary": {
            "name": "summary",
            "location": 94,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "int",
                    "Optional[int]",
                    "float",
                    "str"
                ],
                "with_bullet": [
                    "bool",
                    "List[int]",
                    "List",
                    "List[float]",
                    "str",
                    "int"
                ]
            }
        },
        "SchemaSaladException.__str__": {
            "name": "__str__",
            "location": 100,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaSaladException.pretty_str": {
            "name": "pretty_str",
            "location": 103,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "SchemaSaladException.__init__.simplify": {
            "name": "simplify",
            "location": 27,
            "return": [
                "List",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "exc": [
                    "int",
                    "Sequence[T]",
                    "Callable[[], float]"
                ]
            }
        },
        "SchemaSaladException.__init__.with_bullet": {
            "name": "with_bullet",
            "location": 30,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "exc": [
                    "str",
                    "bool",
                    "int"
                ],
                "bullet": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "schema_salad-main/schema_salad/fetcher.py": {
        "Fetcher.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cache": [
                    "None",
                    "bool",
                    "Optional[requests.sessions.Session]",
                    "str",
                    "schema_salad.utils.CacheType",
                    "Optional[SparkSession]"
                ],
                "session": [
                    "None",
                    "bool",
                    "Optional[requests.sessions.Session]",
                    "str",
                    "schema_salad.utils.CacheType",
                    "Optional[SparkSession]"
                ]
            }
        },
        "Fetcher.fetch_text": {
            "name": "fetch_text",
            "location": 26,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "bool",
                    "str"
                ],
                "content_types": [
                    "bool",
                    "str",
                    "None"
                ]
            }
        },
        "Fetcher.check_exists": {
            "name": "check_exists",
            "location": 29,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "Dict[str,Union[str,int]]",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Fetcher.urljoin": {
            "name": "urljoin",
            "location": 32,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "base_url": [
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[float]",
                    "float",
                    "None"
                ],
                "url": [
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[float]",
                    "float",
                    "None"
                ]
            }
        },
        "Fetcher.supported_schemes": {
            "name": "supported_schemes",
            "location": 37,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefaultFetcher.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cache": [
                    "Sequence[str]",
                    "str",
                    "Dict[str,Any]"
                ],
                "session": [
                    "str",
                    "bool",
                    "bytes",
                    "int"
                ]
            }
        },
        "DefaultFetcher.fetch_text": {
            "name": "fetch_text",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Dict",
                    "Dict[str,Any]",
                    "requests.models.Response"
                ],
                "content_types": [
                    "str",
                    "Dict",
                    "BaseException"
                ]
            }
        },
        "DefaultFetcher.check_exists": {
            "name": "check_exists",
            "location": 97,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Callable[[str],str]",
                    "Callable[str,str]"
                ]
            }
        },
        "DefaultFetcher.urljoin": {
            "name": "urljoin",
            "location": 120,
            "return": [
                "Union[(_T0, _T1)]"
            ],
            "arguments": {
                "self": [],
                "base_url": [
                    "str"
                ],
                "url": [
                    "str"
                ]
            }
        }
    },
    "schema_salad-main/schema_salad/java_codegen.py": {
        "_ensure_directory_and_write": {
            "name": "_ensure_directory_and_write",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "contents": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "doc_to_doc_string": {
            "name": "doc_to_doc_string",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "doc": [
                    "str",
                    "int"
                ],
                "indent_level": [
                    "str",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "_safe_makedirs": {
            "name": "_safe_makedirs",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "JavaCodeGen.__init__": {
            "name": "__init__",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base": [
                    "int",
                    "bool",
                    "str",
                    "Exception",
                    "List[str]"
                ],
                "target": [
                    "str",
                    "int"
                ],
                "examples": [
                    "bool",
                    "List['cirq.Circuit']",
                    "Optional[dict]",
                    "float",
                    "int",
                    "Optional[str]",
                    "str"
                ],
                "package": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "copyright": [
                    "bool",
                    "List['cirq.Circuit']",
                    "Optional[dict]",
                    "float",
                    "int",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "JavaCodeGen.prologue": {
            "name": "prologue",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JavaCodeGen.property_name": {
            "name": "property_name",
            "location": 157,
            "return": [
                "str",
                "List[int]",
                "int",
                "IO"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[bool]",
                    "Callable"
                ]
            }
        },
        "JavaCodeGen.safe_name": {
            "name": "safe_name",
            "location": 162,
            "return": [
                "str",
                "Dict[str, Any]",
                "Type[Any]",
                "IO",
                "pathlib.Path",
                "bytes",
                "bool",
                "int"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[bool]"
                ]
            }
        },
        "JavaCodeGen.interface_name": {
            "name": "interface_name",
            "location": 171,
            "return": [
                "str",
                "Type[Any]",
                "pyutils.Path"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "bool",
                    "str",
                    "Container[str]",
                    "Iterable[str]",
                    "int"
                ]
            }
        },
        "JavaCodeGen.begin_class": {
            "name": "begin_class",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "classname": [
                    "str",
                    "Callable",
                    "bool",
                    "Optional[str]"
                ],
                "extends": [
                    "str",
                    "Optional[str]",
                    "MutableSequence[str]",
                    "Callable[[Any], bool]"
                ],
                "doc": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "int",
                    "bool",
                    "pathlib.Path"
                ],
                "abstract": [
                    "str",
                    "Dict[str, Any]"
                ],
                "field_names": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "idfield": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "optional_fields": [
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "JavaCodeGen.end_class": {
            "name": "end_class",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "classname": [
                    "str",
                    "type"
                ],
                "field_names": [
                    "str",
                    "type"
                ]
            }
        },
        "JavaCodeGen.type_loader": {
            "name": "type_loader",
            "location": 381,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "type_declaration": []
            }
        },
        "JavaCodeGen.type_loader_enum": {
            "name": "type_loader_enum",
            "location": 501,
            "return": [
                "schema_salad.codegen_base.TypeDef"
            ],
            "arguments": {
                "self": [],
                "type_declaration": [
                    "Type",
                    "str",
                    "dict",
                    "Union[str, 'Type']"
                ]
            }
        },
        "JavaCodeGen.declare_field": {
            "name": "declare_field",
            "location": 585,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Tuple[str, str]",
                    "int"
                ],
                "fieldtype": [
                    "str"
                ],
                "doc": [
                    "str",
                    "Iterable[str]",
                    "Callable[[pathlib.Path], str]"
                ],
                "optional": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "JavaCodeGen.declare_id_field": {
            "name": "declare_id_field",
            "location": 686,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict"
                ],
                "fieldtype": [
                    "str",
                    "Optional[str]",
                    "dict"
                ],
                "doc": [
                    "str",
                    "Optional[str]",
                    "dict"
                ],
                "optional": [
                    "str",
                    "bool",
                    "Set[str]",
                    "dict"
                ],
                "subscope": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "JavaCodeGen.uri_loader": {
            "name": "uri_loader",
            "location": 732,
            "return": [
                "schema_salad.codegen_base.TypeDef"
            ],
            "arguments": {
                "self": [],
                "inner": [
                    "str"
                ],
                "scoped_id": [
                    "str",
                    "int"
                ],
                "vocab_term": [
                    "str",
                    "int"
                ],
                "ref_scope": [
                    "str",
                    "int"
                ]
            }
        },
        "JavaCodeGen.idmap_loader": {
            "name": "idmap_loader",
            "location": 759,
            "return": [
                "schema_salad.codegen_base.TypeDef"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "schema.Field"
                ],
                "inner": [
                    "schema.InputField",
                    "Optional[str]",
                    "Tuple[Type]",
                    "Dict[str, Any]"
                ],
                "map_subject": [
                    "schema.Field"
                ],
                "map_predicate": [
                    "schema.Field"
                ]
            }
        },
        "JavaCodeGen.typedsl_loader": {
            "name": "typedsl_loader",
            "location": 774,
            "return": [
                "schema_salad.codegen_base.TypeDef"
            ],
            "arguments": {
                "self": [],
                "inner": [
                    "type",
                    "int",
                    "bool",
                    "str"
                ],
                "ref_scope": [
                    "bool"
                ]
            }
        },
        "JavaCodeGen.to_java": {
            "name": "to_java",
            "location": 785,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "bool",
                    "str",
                    "float",
                    "Optional[bool]",
                    "Exception"
                ]
            }
        },
        "JavaCodeGen.epilogue": {
            "name": "epilogue",
            "location": 794,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root_loader": [
                    "Mapping[str, Any]",
                    "Collection[str]",
                    "Callable",
                    "Optional[Iterable[str]]",
                    "Iterable[str]"
                ]
            }
        },
        "JavaCodeGen.secondaryfilesdsl_loader": {
            "name": "secondaryfilesdsl_loader",
            "location": 910,
            "return": [
                "schema_salad.codegen_base.TypeDef"
            ],
            "arguments": {
                "self": [],
                "inner": [
                    "str",
                    "recidiviz.persistence.database.schema.state.schema.StateSupervisionViolationResponse",
                    "int"
                ]
            }
        },
        "JavaCodeGen.epilogue.template_from_resource": {
            "name": "template_from_resource",
            "location": 813,
            "return": [
                "str"
            ],
            "arguments": {
                "resource": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "JavaCodeGen.epilogue.expand_resource_template_to": {
            "name": "expand_resource_template_to",
            "location": 820,
            "return": [
                "None"
            ],
            "arguments": {
                "resource": [
                    "str",
                    "path.Path",
                    "IO[bytes]",
                    "Dict[str, cerulean.Path]",
                    "Union[pathlib.Path, str]",
                    "pathlib.Path"
                ],
                "path": [
                    "str",
                    "pathlib.Path",
                    "Union[pathlib.Path, str]"
                ]
            }
        }
    },
    "schema_salad-main/schema_salad/jsonld_context.py": {
        "pred": {
            "name": "pred",
            "location": 29,
            "return": [
                "bool",
                "List[str]",
                "Set[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "datatype": [
                    "bool",
                    "List[str]",
                    "Optional[Mapping]",
                    "Type['AbstractIntegrationConversation']",
                    "float",
                    "str"
                ],
                "field": [
                    "Optional[Dict[str, Any]]",
                    "Optional[str]",
                    "bool",
                    "Set[str]",
                    "str",
                    "Union[str, int]",
                    "Type"
                ],
                "name": [
                    "str",
                    "float",
                    "Callable[[Any], bool]",
                    "Dict[str, str]"
                ],
                "context": [
                    "utils.ContextType",
                    "str"
                ],
                "defaultBase": [
                    "str",
                    "bool",
                    "Union[Callable, str]",
                    "int"
                ],
                "namespaces": [
                    "str",
                    "Union[int, str]",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "process_type": {
            "name": "process_type",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "t": [
                    "MutableMapping[str, Any]",
                    "str",
                    "dict",
                    "int"
                ],
                "g": [
                    "bool"
                ],
                "context": [
                    "utils.ContextType",
                    "bool",
                    "type",
                    "Type",
                    "Callable"
                ],
                "defaultBase": [
                    "str",
                    "Optional[List[Type]]",
                    "Type[object]"
                ],
                "namespaces": [
                    "List[str]",
                    "Union[Sequence[int], Sequence[dict]]",
                    "bool"
                ],
                "defaultPrefix": [
                    "bool"
                ]
            }
        },
        "salad_to_jsonld_context": {
            "name": "salad_to_jsonld_context",
            "location": 198,
            "return": [
                "Tuple[(dict, Any)]"
            ],
            "arguments": {
                "j": [
                    "str"
                ],
                "schema_ctx": [
                    "MutableMapping[str, Any]",
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Dict[str, List[Callable]]"
                ]
            }
        },
        "fix_jsonld_ids": {
            "name": "fix_jsonld_ids",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "str",
                    "FrozenSet[str]"
                ],
                "ids": [
                    "List[str]",
                    "dict",
                    "str",
                    "bool",
                    "Optional[str]",
                    "List[int]"
                ]
            }
        },
        "makerdf": {
            "name": "makerdf",
            "location": 239,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "workflow": [
                    "Optional[str]",
                    "str",
                    "int",
                    "float"
                ],
                "wf": [
                    "bytes"
                ],
                "ctx": [
                    "utils.ContextType",
                    "bool"
                ],
                "graph": [
                    "Optional[str]"
                ]
            }
        }
    },
    "schema_salad-main/schema_salad/main.py": {
        "printrdf": {
            "name": "printrdf",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "workflow": [
                    "utils.converters.BoolConverter",
                    "str",
                    "bool",
                    "int"
                ],
                "wf": [
                    "utils.converters.BoolConverter",
                    "str",
                    "bool",
                    "int"
                ],
                "ctx": [
                    "utils.converters.BoolConverter",
                    "str",
                    "bool",
                    "int"
                ],
                "sr": [
                    "str"
                ]
            }
        },
        "arg_parser": {
            "name": "arg_parser",
            "location": 38,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 219,
            "return": [
                "int"
            ],
            "arguments": {
                "argsl": [
                    "List[str]"
                ]
            }
        }
    },
    "schema_salad-main/schema_salad/makedoc.py": {
        "vocab_type_name": {
            "name": "vocab_type_name",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "url": [
                    "str",
                    "Sequence[MutableMapping]",
                    "Iterable[cmk.utils.type_defs.SectionName]",
                    "List[str]",
                    "bool",
                    "dict",
                    "int"
                ]
            }
        },
        "has_types": {
            "name": "has_types",
            "location": 37,
            "return": [
                "list"
            ],
            "arguments": {
                "items": [
                    "Callable",
                    "str",
                    "T"
                ]
            }
        },
        "linkto": {
            "name": "linkto",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "item": [
                    "Iterable[str]",
                    "raiden.utils.Dict",
                    "List[str]"
                ]
            }
        },
        "to_id": {
            "name": "to_id",
            "location": 79,
            "return": [
                "int",
                "bytes",
                "Callable[[str], bool]",
                "List[object]",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "number_headings": {
            "name": "number_headings",
            "location": 151,
            "return": [
                "str"
            ],
            "arguments": {
                "toc": [
                    "Deque",
                    "Callable[..., bool]",
                    "bytes",
                    "int"
                ],
                "maindoc": [
                    "str",
                    "bug_buddy.schema.Repository"
                ]
            }
        },
        "fix_doc": {
            "name": "fix_doc",
            "location": 179,
            "return": [
                "str"
            ],
            "arguments": {
                "doc": [
                    "str",
                    "Tuple[float]",
                    "bool",
                    "Optional[List[str]]",
                    "gobbli.io.PredictInput",
                    "List[str]"
                ]
            }
        },
        "avrold_doc": {
            "name": "avrold_doc",
            "location": 503,
            "return": [
                "None"
            ],
            "arguments": {
                "j": [
                    "T",
                    "str"
                ],
                "outdoc": [
                    "io.StringIO",
                    "float"
                ],
                "renderlist": [
                    "T",
                    "str"
                ],
                "redirects": [
                    "T",
                    "str"
                ],
                "brand": [
                    "io.StringIO",
                    "float"
                ],
                "brandlink": [
                    "io.StringIO",
                    "float"
                ],
                "primtype": [
                    "T",
                    "str"
                ],
                "brandstyle": [
                    "bool",
                    "str",
                    "Optional[bool]",
                    "Optional[int]"
                ],
                "brandinverse": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "arg_parser": {
            "name": "arg_parser",
            "location": 715,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 730,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "makedoc": {
            "name": "makedoc",
            "location": 748,
            "return": [
                "None"
            ],
            "arguments": {
                "stdout": [
                    "BinaryIO",
                    "TextIO",
                    "str"
                ],
                "schema": [
                    "bytes",
                    "str"
                ],
                "redirects": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "only": [
                    "str",
                    "Iterator",
                    "Callable",
                    "Iterator[T]",
                    "bool"
                ],
                "brand": [
                    "dict",
                    "str"
                ],
                "brandlink": [
                    "dict",
                    "str"
                ],
                "primtype": [
                    "dict",
                    "str"
                ],
                "brandstyle": [
                    "dict",
                    "str"
                ],
                "brandinverse": [
                    "dict",
                    "str"
                ]
            }
        },
        "MyRenderer.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyRenderer.header": {
            "name": "header",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "dict",
                    "Optional[str]"
                ],
                "level": [
                    "str",
                    "dict",
                    "Optional[str]"
                ],
                "raw": [
                    "str",
                    "List[Tuple[str, str]]"
                ]
            }
        },
        "MyRenderer.table": {
            "name": "table",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "header": [
                    "str",
                    "dict"
                ],
                "body": [
                    "str",
                    "dict"
                ]
            }
        },
        "ToC.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ToC.add_entry": {
            "name": "add_entry",
            "location": 96,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "thisdepth": [
                    "int",
                    "float"
                ],
                "title": [
                    "bool"
                ]
            }
        },
        "ToC.contents": {
            "name": "contents",
            "location": 125,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "idn": [
                    "Tuple['cirq.Qid']",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ]
            }
        },
        "RenderType.__init__": {
            "name": "__init__",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "toc": [
                    "Callable",
                    "int",
                    "Dict[str, Any]",
                    "bool",
                    "Optional[bool]"
                ],
                "j": [
                    "Callable",
                    "int",
                    "Dict[str, Any]",
                    "bool",
                    "Optional[bool]"
                ],
                "renderlist": [
                    "Callable",
                    "int",
                    "Dict[str, Any]",
                    "bool",
                    "Optional[bool]"
                ],
                "redirects": [
                    "Callable",
                    "int",
                    "Dict[str, Any]",
                    "bool",
                    "Optional[bool]"
                ],
                "primitiveType": [
                    "bool",
                    "str",
                    "int",
                    "AsyncContextManager[None]"
                ]
            }
        },
        "RenderType.typefmt": {
            "name": "typefmt",
            "location": 269,
            "return": [
                "str",
                "List[str]",
                "bytes",
                "float"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "str",
                    "TextIO",
                    "OrderedDict",
                    "schema.Directive",
                    "Callable",
                    "bytes"
                ],
                "redirects": [
                    "int",
                    "str"
                ],
                "nbsp": [
                    "int",
                    "str",
                    "Dict[str, str]",
                    "list",
                    "List[List[int]]",
                    "List[float]"
                ],
                "jsonldPredicate": [
                    "int",
                    "str"
                ]
            }
        },
        "RenderType.render_type": {
            "name": "render_type",
            "location": 353,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "\"Shape\"",
                    "type",
                    "Callable",
                    "T"
                ],
                "depth": [
                    "str",
                    "Callable"
                ]
            }
        },
        "RenderType.render_type.extendsfrom": {
            "name": "extendsfrom",
            "location": 371,
            "return": [
                "None"
            ],
            "arguments": {
                "item": [
                    "raiden.utils.Dict",
                    "List[str]",
                    "Mapping[str, utils.mssql_counters.Section]"
                ],
                "ex": [
                    "\"Pipeline\"",
                    "list",
                    "bool",
                    "Set[str]",
                    "T"
                ]
            }
        }
    },
    "schema_salad-main/schema_salad/metaschema.py": {
        "load_field": {
            "name": "load_field",
            "location": 114,
            "return": [
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "val": [
                    "str",
                    "list",
                    "dict"
                ],
                "fieldtype": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "dict"
                ],
                "baseuri": [
                    "str",
                    "List[str]"
                ],
                "loadingOptions": [
                    "str",
                    "Optional[List[str]]",
                    "kedro.io.core.Version",
                    "int"
                ]
            }
        },
        "save": {
            "name": "save",
            "location": 137,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "val": [
                    "str",
                    "dict"
                ],
                "top": [
                    "str"
                ],
                "base_url": [
                    "str"
                ],
                "relative_uris": [
                    "str"
                ]
            }
        },
        "expand_url": {
            "name": "expand_url",
            "location": 161,
            "return": [
                "str",
                "int",
                "dict",
                "Dict[str, Any]",
                "bool",
                "Mapping[str, Any]",
                "Optional[str]",
                "Optional[Dict]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "Dict[str, str]"
                ],
                "base_url": [
                    "str",
                    "List[str]",
                    "Set[str]",
                    "Callable[[str], str]",
                    "Dict[str, 'LabwareDefinition']"
                ],
                "loadingOptions": [
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ],
                "scoped_id": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Optional[int]",
                    "Iterable[str]",
                    "int",
                    "dict"
                ],
                "vocab_term": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "scoped_ref": [
                    "Optional[str]",
                    "str",
                    "List[\"Node\"]",
                    "Optional[List[str]]",
                    "Optional[List[Any]]",
                    "Union[int, str]"
                ]
            }
        },
        "_document_load": {
            "name": "_document_load",
            "location": 558,
            "return": [
                "str",
                "bytes",
                "bool"
            ],
            "arguments": {
                "loader": [
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "str",
                    "List[int]",
                    "ruamel.yaml.comments.CommentedMap"
                ],
                "doc": [
                    "str",
                    "Any"
                ],
                "baseuri": [
                    "List[Dict[str, Any]]",
                    "List[int]",
                    "Dict[str, Any]",
                    "str",
                    "bool"
                ],
                "loadingOptions": [
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "List[int]",
                    "str",
                    "ruamel.yaml.comments.CommentedMap"
                ]
            }
        },
        "_document_load_by_url": {
            "name": "_document_load_by_url",
            "location": 588,
            "return": [
                "Type",
                "bool",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "loader": [
                    "str",
                    "dict",
                    "int"
                ],
                "url": [
                    "str"
                ],
                "loadingOptions": [
                    "str"
                ]
            }
        },
        "file_uri": {
            "name": "file_uri",
            "location": 610,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Optional[str]"
                ],
                "split_frag": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "prefix_url": {
            "name": "prefix_url",
            "location": 626,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "List[str]"
                ],
                "namespaces": [
                    "Mapping[str, Dict[str, Any]]",
                    "dict",
                    "raiden.utils.Dict[str, raiden.utils.Any]",
                    "Mapping[str, Any]",
                    "Dict[str, Any]",
                    "Iterable[str]",
                    "Dict[str, int]",
                    "Dict[str, Dict[str, str]]"
                ]
            }
        },
        "save_relative_uri": {
            "name": "save_relative_uri",
            "location": 634,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "uri": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "Type['Declared']"
                ],
                "base_url": [
                    "str",
                    "Optional[str]"
                ],
                "scoped_id": [
                    "str",
                    "bool"
                ],
                "ref_scope": [
                    "str",
                    "Dict[str, Any]",
                    "cmk.utils.type_defs.UserId",
                    "int"
                ],
                "relative_uris": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "shortname": {
            "name": "shortname",
            "location": 677,
            "return": [
                "str",
                "Dict[str, Any]",
                "Callable",
                "bytes",
                "dict",
                "bool"
            ],
            "arguments": {
                "inputid": [
                    "List[List[str]]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "parser_info": {
            "name": "parser_info",
            "location": 689,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "load_document": {
            "name": "load_document",
            "location": 3255,
            "return": [
                "str",
                "List[bytes]",
                "int"
            ],
            "arguments": {
                "doc": [
                    "str",
                    "float",
                    "Optional[int]",
                    "Optional[Dict]",
                    "int"
                ],
                "baseuri": [
                    "Optional[str]",
                    "int",
                    "Optional[List[str]]",
                    "str"
                ],
                "loadingOptions": [
                    "str",
                    "Optional[List[str]]",
                    "Optional[str]"
                ]
            }
        },
        "load_document_by_string": {
            "name": "load_document_by_string",
            "location": 3272,
            "return": [
                "str",
                "int",
                "List[bytes]",
                "Optional[str]"
            ],
            "arguments": {
                "string": [
                    "str",
                    "Dict[str, Any]"
                ],
                "uri": [
                    "str"
                ],
                "loadingOptions": [
                    "str",
                    "Optional[str]",
                    "Optional[bool]"
                ]
            }
        },
        "load_document_by_yaml": {
            "name": "load_document_by_yaml",
            "location": 3293,
            "return": [
                "str",
                "List[bytes]",
                "int"
            ],
            "arguments": {
                "yaml": [
                    "str",
                    "pathlib.Path",
                    "List[str]",
                    "Dict[str, str]"
                ],
                "uri": [
                    "str",
                    "int"
                ],
                "loadingOptions": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "LoadingOptions.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetcher": [
                    "Optional[int]",
                    "Optional[float]",
                    "float",
                    "Optional[str]"
                ],
                "namespaces": [
                    "float",
                    "str",
                    "Optional[\"Environment\"]",
                    "Optional[int]"
                ],
                "schemas": [
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[str]"
                ],
                "fileuri": [
                    "Optional[str]",
                    "str",
                    "Optional[bytes]",
                    "bool",
                    "Optional[int]"
                ],
                "copyfrom": [
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[Callable]",
                    "Optional[Hashable]",
                    "int"
                ],
                "original_doc": [
                    "bytes",
                    "Dict[str, Any]",
                    "pymatgen.io.vasp.inputs.Poscar",
                    "str",
                    "IO"
                ]
            }
        },
        "Savable.fromDoc": {
            "name": "fromDoc",
            "location": 96,
            "return": [
                "\"Savable\""
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Iterable[str]"
                ],
                "_doc": [
                    "bool",
                    "Iterable[str]"
                ],
                "baseuri": [
                    "bool",
                    "Iterable[str]"
                ],
                "loadingOptions": [
                    "bool",
                    "Iterable[str]"
                ],
                "docRoot": [
                    "bool",
                    "Iterable[str]"
                ]
            }
        },
        "Savable.save": {
            "name": "save",
            "location": 107,
            "return": [
                "typing.Dict[builtins.str, typing.Any]"
            ],
            "arguments": {
                "self": [],
                "top": [
                    "str",
                    "bool",
                    "type",
                    "List[int]"
                ],
                "base_url": [
                    "str",
                    "bool",
                    "type",
                    "List[int]"
                ],
                "relative_uris": [
                    "str",
                    "bool",
                    "type",
                    "List[int]"
                ]
            }
        },
        "_Loader.load": {
            "name": "load",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "str",
                    "bool",
                    "Set[str]"
                ],
                "baseuri": [
                    "str",
                    "bool",
                    "Set[str]"
                ],
                "loadingOptions": [
                    "str",
                    "bool",
                    "Set[str]"
                ],
                "docRoot": [
                    "str",
                    "bool",
                    "Set[str]"
                ]
            }
        },
        "_AnyLoader.load": {
            "name": "load",
            "location": 236,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Any]",
                    "Sequence[int]",
                    "Optional[int]"
                ],
                "baseuri": [
                    "str",
                    "bool",
                    "Set[str]"
                ],
                "loadingOptions": [
                    "str",
                    "bool",
                    "Set[str]"
                ],
                "docRoot": [
                    "str",
                    "bool",
                    "Set[str]"
                ]
            }
        },
        "_PrimitiveLoader.__init__": {
            "name": "__init__",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "_PrimitiveLoader.load": {
            "name": "load",
            "location": 248,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "str",
                    "Callable",
                    "dict"
                ],
                "baseuri": [
                    "str",
                    "bool",
                    "Set[str]"
                ],
                "loadingOptions": [
                    "str",
                    "bool",
                    "Set[str]"
                ],
                "docRoot": [
                    "str",
                    "bool",
                    "Set[str]"
                ]
            }
        },
        "_PrimitiveLoader.__repr__": {
            "name": "__repr__",
            "location": 258,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ArrayLoader.__init__": {
            "name": "__init__",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Mapping[str, Dict[str, Any]]",
                    "Dict[str, Dict[str, str]]",
                    "Dict[str, int]"
                ]
            }
        },
        "_ArrayLoader.load": {
            "name": "load",
            "location": 267,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "bytes",
                    "pathlib.Path",
                    "bytearray",
                    "bool",
                    "float"
                ],
                "baseuri": [
                    "str",
                    "Optional[float]",
                    "Optional[str]"
                ],
                "loadingOptions": [
                    "str",
                    "Optional[float]",
                    "Optional[str]"
                ],
                "docRoot": [
                    "str",
                    "bool",
                    "Set[str]"
                ]
            }
        },
        "_ArrayLoader.__repr__": {
            "name": "__repr__",
            "location": 288,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_EnumLoader.__init__": {
            "name": "__init__",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "symbols": [
                    "Optional[str]",
                    "Optional[List[str]]",
                    "bool"
                ]
            }
        },
        "_EnumLoader.load": {
            "name": "load",
            "location": 297,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]"
                ],
                "baseuri": [
                    "str",
                    "bool",
                    "Set[str]"
                ],
                "loadingOptions": [
                    "str",
                    "bool",
                    "Set[str]"
                ],
                "docRoot": [
                    "str",
                    "bool",
                    "Set[str]"
                ]
            }
        },
        "_SecondaryDSLLoader.__init__": {
            "name": "__init__",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inner": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "_SecondaryDSLLoader.load": {
            "name": "load",
            "location": 310,
            "return": [
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "str",
                    "dict"
                ],
                "baseuri": [
                    "str",
                    "Optional[Dict[str, Any]]"
                ],
                "loadingOptions": [
                    "str",
                    "Optional[Dict[str, Any]]"
                ],
                "docRoot": [
                    "str",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "_RecordLoader.__init__": {
            "name": "__init__",
            "location": 377,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "classtype": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "_RecordLoader.load": {
            "name": "load",
            "location": 381,
            "return": [
                "bool",
                "eth.abc.BlockHeaderAPI",
                "Optional[Dict]",
                "Dict[str, str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "str",
                    "Optional[str]",
                    "raiden.utils.Address"
                ],
                "baseuri": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "int"
                ],
                "loadingOptions": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "int"
                ],
                "docRoot": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "_RecordLoader.__repr__": {
            "name": "__repr__",
            "location": 387,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ExpressionLoader.__init__": {
            "name": "__init__",
            "location": 392,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Mapping[str, Dict[str, Any]]",
                    "Dict[str, Dict[str, str]]",
                    "Dict[str, int]"
                ]
            }
        },
        "_ExpressionLoader.load": {
            "name": "load",
            "location": 395,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "str",
                    "BinaryIO"
                ],
                "baseuri": [
                    "str",
                    "bool",
                    "Set[str]"
                ],
                "loadingOptions": [
                    "str",
                    "bool",
                    "Set[str]"
                ],
                "docRoot": [
                    "str",
                    "bool",
                    "Set[str]"
                ]
            }
        },
        "_UnionLoader.__init__": {
            "name": "__init__",
            "location": 403,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "alternates": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "_UnionLoader.load": {
            "name": "load",
            "location": 407,
            "return": [
                "Tuple[float, float]",
                "bool",
                "cmk.utils.type_defs.UserId",
                "Callable",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "str",
                    "List[str]",
                    "dict",
                    "Optional[Dict]"
                ],
                "baseuri": [
                    "str",
                    "List[str]",
                    "dict",
                    "Optional[Dict]"
                ],
                "loadingOptions": [
                    "str",
                    "List[str]",
                    "dict",
                    "Optional[Dict]"
                ],
                "docRoot": [
                    "str",
                    "List[str]",
                    "dict",
                    "Optional[Dict]"
                ]
            }
        },
        "_UnionLoader.__repr__": {
            "name": "__repr__",
            "location": 419,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_URILoader.__init__": {
            "name": "__init__",
            "location": 424,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inner": [
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "dict",
                    "List[int]",
                    "Optional[str]"
                ],
                "scoped_id": [
                    "str",
                    "int"
                ],
                "vocab_term": [
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "dict",
                    "List[int]",
                    "Optional[str]"
                ],
                "scoped_ref": [
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "dict",
                    "List[int]",
                    "Optional[str]"
                ]
            }
        },
        "_URILoader.load": {
            "name": "load",
            "location": 431,
            "return": [
                "str",
                "int",
                "Dict[str, str]",
                "Optional[Exception]"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "List[float]",
                    "int",
                    "str"
                ],
                "baseuri": [
                    "str",
                    "dict",
                    "utils.RichStatus",
                    "Optional[str]"
                ],
                "loadingOptions": [
                    "str",
                    "dict",
                    "utils.RichStatus",
                    "Optional[str]"
                ],
                "docRoot": [
                    "str",
                    "bool",
                    "Set[str]"
                ]
            }
        },
        "_TypeDSLLoader.__init__": {
            "name": "__init__",
            "location": 465,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inner": [
                    "Optional[Collection[int]]",
                    "int",
                    "Optional[float]",
                    "bool",
                    "Dict[str, Any]"
                ],
                "refScope": [
                    "Optional[Collection[int]]",
                    "int",
                    "Optional[float]",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "_TypeDSLLoader.resolve": {
            "name": "resolve",
            "location": 470,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "str",
                    "List[str]"
                ],
                "baseuri": [
                    "str",
                    "Optional[str]"
                ],
                "loadingOptions": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "_TypeDSLLoader.load": {
            "name": "load",
            "location": 501,
            "return": [
                "str",
                "int",
                "Dict[str, str]",
                "Optional[Exception]"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "str",
                    "pathlib.Path",
                    "Optional[Sequence[str]]",
                    "Tuple[Any, Any]",
                    "int",
                    "Callable",
                    "Dict[str, int]"
                ],
                "baseuri": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "Callable[..., bool]",
                    "dict",
                    "Union[utils.CWLObjectType, List[utils.CWLObjectType]]"
                ],
                "loadingOptions": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "Callable[..., bool]",
                    "dict",
                    "Union[utils.CWLObjectType, List[utils.CWLObjectType]]"
                ],
                "docRoot": [
                    "str",
                    "bool",
                    "Set[str]"
                ]
            }
        },
        "_IdMapLoader.__init__": {
            "name": "__init__",
            "location": 525,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inner": [
                    "int",
                    "bool",
                    "float"
                ],
                "mapSubject": [
                    "int",
                    "bool",
                    "float"
                ],
                "mapPredicate": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "_IdMapLoader.load": {
            "name": "load",
            "location": 531,
            "return": [
                "str",
                "int",
                "Dict[str, str]",
                "Optional[Exception]"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "List[Dict]",
                    "raiden.utils.Any",
                    "str",
                    "list",
                    "List[int]",
                    "io.TextIOWrapper"
                ],
                "baseuri": [
                    "str",
                    "Dict[str, Any]"
                ],
                "loadingOptions": [
                    "str",
                    "Dict[str, Any]"
                ],
                "docRoot": [
                    "str",
                    "bool",
                    "Set[str]"
                ]
            }
        },
        "RecordField.__init__": {
            "name": "__init__",
            "location": 702,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, str]",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "Callable[[Any], str]"
                ],
                "type": [
                    "Optional[List[str]]",
                    "bool"
                ],
                "doc": [
                    "Optional[List[str]]",
                    "bool"
                ],
                "extension_fields": [
                    "Optional[List[str]]",
                    "bool"
                ],
                "loadingOptions": [
                    "str",
                    "type",
                    "List[str]",
                    "Optional[Sequence[Any]]",
                    "Optional[float]"
                ]
            }
        },
        "RecordField.fromDoc": {
            "name": "fromDoc",
            "location": 724,
            "return": [
                "RecordField"
            ],
            "arguments": {
                "cls": [
                    "builtins.type[_TRecordField]"
                ],
                "doc": [
                    "str",
                    "Optional[cmk.utils.type_defs.HostAddress]",
                    "raiden.utils.PrivateKey"
                ],
                "baseuri": [
                    "dict",
                    "bool",
                    "Dict[int, dict]"
                ],
                "loadingOptions": [
                    "dict",
                    "bool",
                    "Dict[int, dict]",
                    "cmk.utils.type_defs.UserId"
                ],
                "docRoot": [
                    "Optional[str]",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "str",
                    "Optional[List[str]]"
                ]
            }
        },
        "RecordField.save": {
            "name": "save",
            "location": 825,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "top": [
                    "str"
                ],
                "base_url": [
                    "str",
                    "Dict[str, object]",
                    "Tuple[Type]"
                ],
                "relative_uris": [
                    "str",
                    "Dict[str, object]",
                    "Tuple[Type]"
                ]
            }
        },
        "RecordSchema.__init__": {
            "name": "__init__",
            "location": 856,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "bool",
                    "int"
                ],
                "fields": [
                    "type",
                    "list",
                    "Type[T]",
                    "int",
                    "bool"
                ],
                "extension_fields": [
                    "bool",
                    "int"
                ],
                "loadingOptions": [
                    "str",
                    "Optional[List[str]]",
                    "Optional[str]"
                ]
            }
        },
        "RecordSchema.fromDoc": {
            "name": "fromDoc",
            "location": 876,
            "return": [
                "RecordSchema"
            ],
            "arguments": {
                "cls": [
                    "builtins.type[_TRecordSchema]"
                ],
                "doc": [
                    "str",
                    "Optional[cmk.utils.type_defs.HostAddress]",
                    "raiden.utils.FeeAmount",
                    "raiden.utils.PaymentAmount",
                    "raiden.utils.PrivateKey"
                ],
                "baseuri": [
                    "bool",
                    "Type[Any]",
                    "Type['BaseModel']",
                    "dict",
                    "int",
                    "str"
                ],
                "loadingOptions": [
                    "bool",
                    "Type[Any]",
                    "Type['BaseModel']",
                    "dict",
                    "int",
                    "str"
                ],
                "docRoot": [
                    "bool",
                    "Iterable[str]"
                ]
            }
        },
        "RecordSchema.save": {
            "name": "save",
            "location": 949,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "top": [
                    "str",
                    "Optional[str]"
                ],
                "base_url": [
                    "str",
                    "Optional[str]"
                ],
                "relative_uris": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "EnumSchema.__init__": {
            "name": "__init__",
            "location": 981,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "symbols": [
                    "Iterable[object]",
                    "Callable",
                    "Optional[str]"
                ],
                "type": [
                    "Optional[List[str]]",
                    "int",
                    "Optional[str]",
                    "Union[None, int, str]"
                ],
                "extension_fields": [
                    "Optional[List[str]]",
                    "int",
                    "Optional[str]",
                    "Union[None, int, str]"
                ],
                "loadingOptions": [
                    "str",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "EnumSchema.fromDoc": {
            "name": "fromDoc",
            "location": 1001,
            "return": [
                "EnumSchema"
            ],
            "arguments": {
                "cls": [
                    "builtins.type[_TEnumSchema]"
                ],
                "doc": [
                    "str",
                    "Optional[cmk.utils.type_defs.HostAddress]",
                    "raiden.utils.FeeAmount",
                    "raiden.utils.PaymentAmount",
                    "raiden.utils.PrivateKey"
                ],
                "baseuri": [
                    "bool",
                    "dict",
                    "List[str]"
                ],
                "loadingOptions": [
                    "bool",
                    "dict",
                    "List[str]"
                ],
                "docRoot": [
                    "bool",
                    "Iterable[str]"
                ]
            }
        },
        "EnumSchema.save": {
            "name": "save",
            "location": 1071,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "top": [
                    "str"
                ],
                "base_url": [
                    "str",
                    "Type[Any]",
                    "Optional[str]"
                ],
                "relative_uris": [
                    "str",
                    "Type[Any]",
                    "Optional[str]"
                ]
            }
        },
        "ArraySchema.__init__": {
            "name": "__init__",
            "location": 1098,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "Optional[dict]",
                    "bool"
                ],
                "type": [
                    "bool",
                    "int",
                    "Callable",
                    "str"
                ],
                "extension_fields": [
                    "bool",
                    "int",
                    "Callable",
                    "str"
                ],
                "loadingOptions": [
                    "str",
                    "bool",
                    "Exception",
                    "Optional[str]"
                ]
            }
        },
        "ArraySchema.fromDoc": {
            "name": "fromDoc",
            "location": 1118,
            "return": [
                "ArraySchema"
            ],
            "arguments": {
                "cls": [
                    "builtins.type[_TArraySchema]"
                ],
                "doc": [
                    "str",
                    "Optional[cmk.utils.type_defs.HostAddress]",
                    "raiden.utils.FeeAmount",
                    "raiden.utils.PaymentAmount",
                    "raiden.utils.PrivateKey"
                ],
                "baseuri": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Dict[str, Any]"
                ],
                "loadingOptions": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Dict[str, Any]"
                ],
                "docRoot": [
                    "bool",
                    "Iterable[str]"
                ]
            }
        },
        "ArraySchema.save": {
            "name": "save",
            "location": 1188,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "top": [
                    "str"
                ],
                "base_url": [
                    "str",
                    "raiden.utils.Any",
                    "Dict[str, Tuple[Any, Any]]"
                ],
                "relative_uris": [
                    "str",
                    "raiden.utils.Any",
                    "Dict[str, Tuple[Any, Any]]"
                ]
            }
        },
        "JsonldPredicate.__init__": {
            "name": "__init__",
            "location": 1221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_id": [
                    "Optional[str]",
                    "Union[str, bytes]",
                    "str"
                ],
                "_type": [
                    "bool",
                    "Optional[str]",
                    "Optional[int]",
                    "List[str]"
                ],
                "_container": [
                    "bool",
                    "Optional[str]",
                    "Optional[int]",
                    "List[str]"
                ],
                "identity": [
                    "bool",
                    "Optional[str]",
                    "Optional[int]",
                    "List[str]"
                ],
                "noLinkCheck": [
                    "bool",
                    "Optional[str]",
                    "Optional[int]",
                    "List[str]"
                ],
                "mapSubject": [
                    "bool",
                    "Optional[str]",
                    "Optional[int]",
                    "List[str]"
                ],
                "mapPredicate": [
                    "bool",
                    "Optional[str]",
                    "Optional[int]",
                    "List[str]"
                ],
                "refScope": [
                    "bool",
                    "Optional[str]",
                    "Optional[int]",
                    "List[str]"
                ],
                "typeDSL": [
                    "Callable",
                    "bool",
                    "Optional[int]",
                    "str",
                    "Sequence[str]",
                    "int",
                    "bytes"
                ],
                "secondaryFilesDSL": [
                    "Tuple[str, str]",
                    "IO",
                    "Optional[str]",
                    "str",
                    "Union[str, pathlib.Path]"
                ],
                "subscope": [
                    "bool",
                    "Optional[str]",
                    "Optional[int]",
                    "List[str]"
                ],
                "extension_fields": [
                    "bool",
                    "Optional[str]",
                    "Optional[int]",
                    "List[str]"
                ],
                "loadingOptions": [
                    "Optional[str]",
                    "bool",
                    "str"
                ]
            }
        },
        "JsonldPredicate.fromDoc": {
            "name": "fromDoc",
            "location": 1259,
            "return": [
                "JsonldPredicate"
            ],
            "arguments": {
                "cls": [
                    "Type[_TJsonldPredicate]"
                ],
                "doc": [
                    "str",
                    "Optional[cmk.utils.type_defs.HostAddress]",
                    "raiden.utils.FeeAmount",
                    "raiden.utils.PaymentAmount",
                    "raiden.utils.PrivateKey"
                ],
                "baseuri": [
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]"
                ],
                "loadingOptions": [
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]"
                ],
                "docRoot": [
                    "bool",
                    "Iterable[str]"
                ]
            }
        },
        "JsonldPredicate.save": {
            "name": "save",
            "location": 1506,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "top": [
                    "str",
                    "Type[T]"
                ],
                "base_url": [
                    "str",
                    "Optional[str]"
                ],
                "relative_uris": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "SpecializeDef.__init__": {
            "name": "__init__",
            "location": 1598,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "specializeFrom": [
                    "raiden.utils.Callable",
                    "Exception",
                    "Optional[int]",
                    "Type[T]",
                    "bool"
                ],
                "specializeTo": [
                    "raiden.utils.Callable",
                    "Exception",
                    "Optional[int]",
                    "Type[T]",
                    "bool"
                ],
                "extension_fields": [
                    "raiden.utils.Callable",
                    "Exception",
                    "Optional[int]",
                    "Type[T]",
                    "bool"
                ],
                "loadingOptions": [
                    "bool",
                    "Optional[cmk.utils.type_defs.SectionName]",
                    "str"
                ]
            }
        },
        "SpecializeDef.fromDoc": {
            "name": "fromDoc",
            "location": 1618,
            "return": [
                "SpecializeDef"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSpecializeDef]"
                ],
                "doc": [
                    "str",
                    "Optional[cmk.utils.type_defs.HostAddress]",
                    "raiden.utils.FeeAmount",
                    "raiden.utils.PaymentAmount",
                    "raiden.utils.PrivateKey"
                ],
                "baseuri": [
                    "Dict[str, Any]",
                    "str",
                    "Dict[str, str]",
                    "cmk.utils.type_defs.UserId"
                ],
                "loadingOptions": [
                    "Dict[str, Any]",
                    "str",
                    "Dict[str, str]",
                    "cmk.utils.type_defs.UserId"
                ],
                "docRoot": [
                    "bool",
                    "Iterable[str]"
                ]
            }
        },
        "SpecializeDef.save": {
            "name": "save",
            "location": 1688,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "top": [
                    "str",
                    "bool",
                    "type",
                    "List[int]"
                ],
                "base_url": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "relative_uris": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "SaladRecordField.__init__": {
            "name": "__init__",
            "location": 1738,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "OrderedDict",
                    "Optional[str]",
                    "Optional[Dict[str, str]]"
                ],
                "type": [
                    "Optional[List[str]]",
                    "bool",
                    "int"
                ],
                "doc": [
                    "Optional[List[str]]",
                    "bool",
                    "int"
                ],
                "jsonldPredicate": [
                    "Optional[List[str]]",
                    "bool",
                    "int"
                ],
                "default": [
                    "Optional[List[str]]",
                    "bool",
                    "int"
                ],
                "extension_fields": [
                    "Optional[List[str]]",
                    "bool",
                    "int"
                ],
                "loadingOptions": [
                    "str",
                    "Optional[List[str]]",
                    "Optional[str]"
                ]
            }
        },
        "SaladRecordField.fromDoc": {
            "name": "fromDoc",
            "location": 1764,
            "return": [
                "SaladRecordField"
            ],
            "arguments": {
                "cls": [
                    "builtins.type[_TSaladRecordField]"
                ],
                "doc": [
                    "str",
                    "Optional[cmk.utils.type_defs.HostAddress]",
                    "raiden.utils.PrivateKey"
                ],
                "baseuri": [
                    "dict",
                    "bool",
                    "Dict[int, dict]"
                ],
                "loadingOptions": [
                    "dict",
                    "bool",
                    "Dict[int, dict]",
                    "cmk.utils.type_defs.UserId"
                ],
                "docRoot": [
                    "Optional[str]",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "str",
                    "Optional[List[str]]"
                ]
            }
        },
        "SaladRecordField.save": {
            "name": "save",
            "location": 1903,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "top": [
                    "str"
                ],
                "base_url": [
                    "str",
                    "Dict[str, object]",
                    "Tuple[Type]"
                ],
                "relative_uris": [
                    "str",
                    "Dict[str, object]",
                    "Tuple[Type]"
                ]
            }
        },
        "SaladRecordSchema.__init__": {
            "name": "__init__",
            "location": 1945,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[List[str]]",
                    "Optional[str]"
                ],
                "type": [
                    "Optional[List[str]]",
                    "Union[None, int, str]",
                    "Optional[str]"
                ],
                "inVocab": [
                    "Optional[List[str]]",
                    "Union[None, int, str]",
                    "Optional[str]"
                ],
                "fields": [
                    "Optional[List[str]]",
                    "Optional[Sequence[str]]",
                    "cmk.utils.type_defs.Item",
                    "bool",
                    "type",
                    "str"
                ],
                "doc": [
                    "Optional[List[str]]",
                    "Union[None, int, str]",
                    "Optional[str]"
                ],
                "docParent": [
                    "Optional[List[str]]",
                    "Union[None, int, str]",
                    "Optional[str]"
                ],
                "docChild": [
                    "Optional[List[str]]",
                    "Union[None, int, str]",
                    "Optional[str]"
                ],
                "docAfter": [
                    "Optional[List[str]]",
                    "Union[None, int, str]",
                    "Optional[str]"
                ],
                "jsonldPredicate": [
                    "Optional[List[str]]",
                    "Union[None, int, str]",
                    "Optional[str]"
                ],
                "documentRoot": [
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "abstract": [
                    "Optional[List[str]]",
                    "Union[None, int, str]",
                    "Optional[str]"
                ],
                "extends": [
                    "Optional[List[str]]",
                    "Union[None, int, str]",
                    "Optional[str]"
                ],
                "specialize": [
                    "Optional[List[str]]",
                    "Union[None, int, str]",
                    "Optional[str]"
                ],
                "extension_fields": [
                    "Optional[List[str]]",
                    "Union[None, int, str]",
                    "Optional[str]"
                ],
                "loadingOptions": [
                    "Optional[str]",
                    "bool",
                    "str",
                    "Optional[List[str]]"
                ]
            }
        },
        "SaladRecordSchema.fromDoc": {
            "name": "fromDoc",
            "location": 1987,
            "return": [
                "SaladRecordSchema"
            ],
            "arguments": {
                "cls": [
                    "builtins.type[_TSaladRecordSchema]"
                ],
                "doc": [
                    "str",
                    "Optional[cmk.utils.type_defs.HostAddress]",
                    "raiden.utils.PrivateKey"
                ],
                "baseuri": [
                    "dict",
                    "bool",
                    "Dict[int, dict]"
                ],
                "loadingOptions": [
                    "dict",
                    "bool",
                    "Dict[int, dict]",
                    "cmk.utils.type_defs.UserId"
                ],
                "docRoot": [
                    "Optional[str]",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "str",
                    "Optional[List[str]]"
                ]
            }
        },
        "SaladRecordSchema.save": {
            "name": "save",
            "location": 2278,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "top": [
                    "str",
                    "int",
                    "pathlib.Path"
                ],
                "base_url": [
                    "str",
                    "Dict[str, object]",
                    "Tuple[Type]"
                ],
                "relative_uris": [
                    "str",
                    "Dict[str, object]",
                    "Tuple[Type]"
                ]
            }
        },
        "SaladEnumSchema.__init__": {
            "name": "__init__",
            "location": 2382,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]"
                ],
                "symbols": [
                    "Iterable[object]",
                    "bool",
                    "Callable",
                    "Optional[str]"
                ],
                "type": [
                    "Optional[List[str]]",
                    "Union[None, int, str]",
                    "Optional[str]"
                ],
                "inVocab": [
                    "Optional[List[str]]",
                    "Union[None, int, str]",
                    "Optional[str]"
                ],
                "doc": [
                    "Optional[List[str]]",
                    "Union[None, int, str]",
                    "Optional[str]"
                ],
                "docParent": [
                    "Optional[List[str]]",
                    "Union[None, int, str]",
                    "Optional[str]"
                ],
                "docChild": [
                    "Optional[List[str]]",
                    "Union[None, int, str]",
                    "Optional[str]"
                ],
                "docAfter": [
                    "Optional[List[str]]",
                    "Union[None, int, str]",
                    "Optional[str]"
                ],
                "jsonldPredicate": [
                    "Optional[List[str]]",
                    "Union[None, int, str]",
                    "Optional[str]"
                ],
                "documentRoot": [
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "extends": [
                    "Optional[List[str]]",
                    "Union[None, int, str]",
                    "Optional[str]"
                ],
                "extension_fields": [
                    "Optional[List[str]]",
                    "Union[None, int, str]",
                    "Optional[str]"
                ],
                "loadingOptions": [
                    "Optional[str]",
                    "str",
                    "Optional[List[str]]",
                    "bool"
                ]
            }
        },
        "SaladEnumSchema.fromDoc": {
            "name": "fromDoc",
            "location": 2420,
            "return": [
                "SaladEnumSchema"
            ],
            "arguments": {
                "cls": [
                    "builtins.type[_TSaladEnumSchema]"
                ],
                "doc": [
                    "str",
                    "Optional[cmk.utils.type_defs.HostAddress]",
                    "raiden.utils.PrivateKey"
                ],
                "baseuri": [
                    "dict",
                    "bool",
                    "Dict[int, dict]"
                ],
                "loadingOptions": [
                    "dict",
                    "bool",
                    "Dict[int, dict]",
                    "cmk.utils.type_defs.UserId"
                ],
                "docRoot": [
                    "Optional[str]",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "str",
                    "Optional[List[str]]"
                ]
            }
        },
        "SaladEnumSchema.save": {
            "name": "save",
            "location": 2670,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "top": [
                    "str"
                ],
                "base_url": [
                    "str",
                    "Dict[str, object]",
                    "Tuple[Type]"
                ],
                "relative_uris": [
                    "str",
                    "Dict[str, object]",
                    "Tuple[Type]"
                ]
            }
        },
        "Documentation.__init__": {
            "name": "__init__",
            "location": 2759,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[List[str]]",
                    "Optional[str]"
                ],
                "type": [
                    "Optional[List[str]]",
                    "Union[None, int, str]",
                    "Optional[str]"
                ],
                "inVocab": [
                    "Optional[List[str]]",
                    "Union[None, int, str]",
                    "Optional[str]"
                ],
                "doc": [
                    "Optional[List[str]]",
                    "Union[None, int, str]",
                    "Optional[str]"
                ],
                "docParent": [
                    "Optional[List[str]]",
                    "Union[None, int, str]",
                    "Optional[str]"
                ],
                "docChild": [
                    "Optional[List[str]]",
                    "Union[None, int, str]",
                    "Optional[str]"
                ],
                "docAfter": [
                    "Optional[List[str]]",
                    "Union[None, int, str]",
                    "Optional[str]"
                ],
                "extension_fields": [
                    "Optional[List[str]]",
                    "Union[None, int, str]",
                    "Optional[str]"
                ],
                "loadingOptions": [
                    "Optional[str]",
                    "str",
                    "Optional[List[str]]",
                    "bool"
                ]
            }
        },
        "Documentation.fromDoc": {
            "name": "fromDoc",
            "location": 2789,
            "return": [
                "Documentation"
            ],
            "arguments": {
                "cls": [
                    "builtins.type[_TDocumentation]"
                ],
                "doc": [
                    "str",
                    "Optional[cmk.utils.type_defs.HostAddress]",
                    "raiden.utils.PrivateKey"
                ],
                "baseuri": [
                    "dict",
                    "bool",
                    "Dict[int, dict]"
                ],
                "loadingOptions": [
                    "dict",
                    "bool",
                    "Dict[int, dict]",
                    "cmk.utils.type_defs.UserId"
                ],
                "docRoot": [
                    "Optional[str]",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "str",
                    "Optional[List[str]]"
                ]
            }
        },
        "Documentation.save": {
            "name": "save",
            "location": 2966,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "top": [
                    "str",
                    "pathlib.Path"
                ],
                "base_url": [
                    "str",
                    "Dict[str, object]",
                    "Tuple[Type]"
                ],
                "relative_uris": [
                    "str",
                    "Dict[str, object]",
                    "Tuple[Type]"
                ]
            }
        }
    },
    "schema_salad-main/schema_salad/python_codegen.py": {
        "fmt": {
            "name": "fmt",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Optional[str]"
                ],
                "indent": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "PythonCodeGen.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "out": [
                    "float",
                    "int",
                    "List[str]",
                    "bool",
                    "dict"
                ],
                "copyright": [
                    "str",
                    "bool",
                    "Mapping[str, str]",
                    "Callable",
                    "int",
                    "List[str]"
                ],
                "parser_info": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "PythonCodeGen.safe_name": {
            "name": "safe_name",
            "location": 95,
            "return": [
                "str",
                "Dict[str, Any]",
                "Type[Any]",
                "IO",
                "bytes",
                "bool",
                "int"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Tuple[str, str]"
                ]
            }
        },
        "PythonCodeGen.prologue": {
            "name": "prologue",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PythonCodeGen.begin_class": {
            "name": "begin_class",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "classname": [
                    "str",
                    "Optional[str]"
                ],
                "extends": [
                    "str",
                    "Optional[str]",
                    "Optional[Iterable[str]]",
                    "Callable[[Any], str]",
                    "Dict[str, str]",
                    "Sequence[Any]"
                ],
                "doc": [
                    "str"
                ],
                "abstract": [
                    "str",
                    "Dict[str, Any]"
                ],
                "field_names": [
                    "Iterable[str]",
                    "str",
                    "Optional[str]",
                    "bool",
                    "List[str]",
                    "dict",
                    "int"
                ],
                "idfield": [
                    "bool",
                    "Optional[List[str]]",
                    "int"
                ],
                "optional_fields": [
                    "Iterable[str]",
                    "str",
                    "Optional[str]",
                    "bool",
                    "List[str]",
                    "dict",
                    "int"
                ]
            }
        },
        "PythonCodeGen.end_class": {
            "name": "end_class",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "classname": [
                    "str",
                    "bool",
                    "dict"
                ],
                "field_names": [
                    "str",
                    "bool"
                ]
            }
        },
        "PythonCodeGen.type_loader": {
            "name": "type_loader",
            "location": 343,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "type_declaration": [
                    "Mapping",
                    "Type"
                ]
            }
        },
        "PythonCodeGen.declare_id_field": {
            "name": "declare_id_field",
            "location": 409,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "fieldtype": [
                    "str",
                    "Optional[str]",
                    "dict"
                ],
                "doc": [
                    "str",
                    "Optional[str]",
                    "dict"
                ],
                "optional": [
                    "str",
                    "bool",
                    "Set[str]",
                    "dict"
                ],
                "subscope": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "PythonCodeGen.declare_field": {
            "name": "declare_field",
            "location": 449,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "fieldtype": [
                    "str"
                ],
                "doc": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "optional": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "PythonCodeGen.uri_loader": {
            "name": "uri_loader",
            "location": 536,
            "return": [
                "schema_salad.codegen_base.TypeDef"
            ],
            "arguments": {
                "self": [],
                "inner": [
                    "str",
                    "int"
                ],
                "scoped_id": [
                    "str",
                    "int"
                ],
                "vocab_term": [
                    "str",
                    "int"
                ],
                "ref_scope": [
                    "str",
                    "int"
                ]
            }
        },
        "PythonCodeGen.idmap_loader": {
            "name": "idmap_loader",
            "location": 556,
            "return": [
                "schema_salad.codegen_base.TypeDef"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str",
                    "schema.InputField",
                    "Type[Exception]"
                ],
                "inner": [
                    "str",
                    "schema.InputField",
                    "Type[Exception]"
                ],
                "map_subject": [
                    "str",
                    "schema.InputField",
                    "Type[Exception]"
                ],
                "map_predicate": [
                    "str",
                    "schema.InputField",
                    "Type[Exception]"
                ]
            }
        },
        "PythonCodeGen.typedsl_loader": {
            "name": "typedsl_loader",
            "location": 569,
            "return": [
                "schema_salad.codegen_base.TypeDef"
            ],
            "arguments": {
                "self": [],
                "inner": [
                    "dict"
                ],
                "ref_scope": [
                    "dict"
                ]
            }
        },
        "PythonCodeGen.secondaryfilesdsl_loader": {
            "name": "secondaryfilesdsl_loader",
            "location": 578,
            "return": [
                "schema_salad.codegen_base.TypeDef"
            ],
            "arguments": {
                "self": [],
                "inner": []
            }
        },
        "PythonCodeGen.epilogue": {
            "name": "epilogue",
            "location": 587,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root_loader": [
                    "Optional[List]",
                    "Optional[Mapping[str, Any]]",
                    "str"
                ]
            }
        }
    },
    "schema_salad-main/schema_salad/python_codegen_support.py": {
        "load_field": {
            "name": "load_field",
            "location": 111,
            "return": [
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "val": [
                    "str",
                    "list",
                    "dict"
                ],
                "fieldtype": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "dict"
                ],
                "baseuri": [
                    "str",
                    "List[str]"
                ],
                "loadingOptions": [
                    "str",
                    "Optional[List[str]]",
                    "kedro.io.core.Version",
                    "int"
                ]
            }
        },
        "save": {
            "name": "save",
            "location": 134,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "val": [
                    "str",
                    "dict"
                ],
                "top": [
                    "str"
                ],
                "base_url": [
                    "str"
                ],
                "relative_uris": [
                    "str"
                ]
            }
        },
        "expand_url": {
            "name": "expand_url",
            "location": 158,
            "return": [
                "str",
                "int",
                "dict",
                "Dict[str, Any]",
                "bool",
                "Mapping[str, Any]",
                "Optional[str]",
                "Optional[Dict]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "Dict[str, str]"
                ],
                "base_url": [
                    "str",
                    "List[str]",
                    "Set[str]",
                    "Callable[[str], str]",
                    "Dict[str, 'LabwareDefinition']"
                ],
                "loadingOptions": [
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ],
                "scoped_id": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Optional[int]",
                    "Iterable[str]",
                    "int",
                    "dict"
                ],
                "vocab_term": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "scoped_ref": [
                    "Optional[str]",
                    "str",
                    "List[\"Node\"]",
                    "Optional[List[str]]",
                    "Optional[List[Any]]",
                    "Union[int, str]"
                ]
            }
        },
        "_document_load": {
            "name": "_document_load",
            "location": 555,
            "return": [
                "str",
                "bytes",
                "bool"
            ],
            "arguments": {
                "loader": [
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "str",
                    "List[int]",
                    "ruamel.yaml.comments.CommentedMap"
                ],
                "doc": [
                    "str",
                    "Any"
                ],
                "baseuri": [
                    "List[Dict[str, Any]]",
                    "List[int]",
                    "Dict[str, Any]",
                    "str",
                    "bool"
                ],
                "loadingOptions": [
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "List[int]",
                    "str",
                    "ruamel.yaml.comments.CommentedMap"
                ]
            }
        },
        "_document_load_by_url": {
            "name": "_document_load_by_url",
            "location": 585,
            "return": [
                "Type",
                "bool",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "loader": [
                    "str",
                    "dict",
                    "int"
                ],
                "url": [
                    "str"
                ],
                "loadingOptions": [
                    "str"
                ]
            }
        },
        "file_uri": {
            "name": "file_uri",
            "location": 607,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Optional[str]"
                ],
                "split_frag": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "prefix_url": {
            "name": "prefix_url",
            "location": 623,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "List[str]"
                ],
                "namespaces": [
                    "Mapping[str, Dict[str, Any]]",
                    "dict",
                    "raiden.utils.Dict[str, raiden.utils.Any]",
                    "Mapping[str, Any]",
                    "Dict[str, Any]",
                    "Iterable[str]",
                    "Dict[str, int]",
                    "Dict[str, Dict[str, str]]"
                ]
            }
        },
        "save_relative_uri": {
            "name": "save_relative_uri",
            "location": 631,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "uri": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "Type['Declared']"
                ],
                "base_url": [
                    "str",
                    "Optional[str]"
                ],
                "scoped_id": [
                    "str",
                    "bool"
                ],
                "ref_scope": [
                    "str",
                    "Dict[str, Any]",
                    "cmk.utils.type_defs.UserId",
                    "int"
                ],
                "relative_uris": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "shortname": {
            "name": "shortname",
            "location": 674,
            "return": [
                "str",
                "Dict[str, Any]",
                "Callable",
                "bytes",
                "dict",
                "bool"
            ],
            "arguments": {
                "inputid": [
                    "List[List[str]]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "LoadingOptions.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetcher": [
                    "Optional[int]",
                    "Optional[float]",
                    "float",
                    "Optional[str]"
                ],
                "namespaces": [
                    "float",
                    "str",
                    "Optional[\"Environment\"]",
                    "Optional[int]"
                ],
                "schemas": [
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[str]"
                ],
                "fileuri": [
                    "Optional[str]",
                    "str",
                    "Optional[bytes]",
                    "bool",
                    "Optional[int]"
                ],
                "copyfrom": [
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[Callable]",
                    "Optional[Hashable]",
                    "int"
                ],
                "original_doc": [
                    "bytes",
                    "Dict[str, Any]",
                    "pymatgen.io.vasp.inputs.Poscar",
                    "str",
                    "IO"
                ]
            }
        },
        "Savable.fromDoc": {
            "name": "fromDoc",
            "location": 93,
            "return": [
                "\"Savable\""
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Iterable[str]"
                ],
                "_doc": [
                    "bool",
                    "Iterable[str]"
                ],
                "baseuri": [
                    "bool",
                    "Iterable[str]"
                ],
                "loadingOptions": [
                    "bool",
                    "Iterable[str]"
                ],
                "docRoot": [
                    "bool",
                    "Iterable[str]"
                ]
            }
        },
        "Savable.save": {
            "name": "save",
            "location": 104,
            "return": [
                "typing.Dict[builtins.str, typing.Any]"
            ],
            "arguments": {
                "self": [],
                "top": [
                    "str",
                    "bool",
                    "type",
                    "List[int]"
                ],
                "base_url": [
                    "str",
                    "bool",
                    "type",
                    "List[int]"
                ],
                "relative_uris": [
                    "str",
                    "bool",
                    "type",
                    "List[int]"
                ]
            }
        },
        "_Loader.load": {
            "name": "load",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "str",
                    "bool",
                    "Set[str]"
                ],
                "baseuri": [
                    "str",
                    "bool",
                    "Set[str]"
                ],
                "loadingOptions": [
                    "str",
                    "bool",
                    "Set[str]"
                ],
                "docRoot": [
                    "str",
                    "bool",
                    "Set[str]"
                ]
            }
        },
        "_AnyLoader.load": {
            "name": "load",
            "location": 233,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Any]",
                    "Sequence[int]",
                    "Optional[int]"
                ],
                "baseuri": [
                    "str",
                    "bool",
                    "Set[str]"
                ],
                "loadingOptions": [
                    "str",
                    "bool",
                    "Set[str]"
                ],
                "docRoot": [
                    "str",
                    "bool",
                    "Set[str]"
                ]
            }
        },
        "_PrimitiveLoader.__init__": {
            "name": "__init__",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tp": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "_PrimitiveLoader.load": {
            "name": "load",
            "location": 245,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "str",
                    "Callable",
                    "dict"
                ],
                "baseuri": [
                    "str",
                    "bool",
                    "Set[str]"
                ],
                "loadingOptions": [
                    "str",
                    "bool",
                    "Set[str]"
                ],
                "docRoot": [
                    "str",
                    "bool",
                    "Set[str]"
                ]
            }
        },
        "_PrimitiveLoader.__repr__": {
            "name": "__repr__",
            "location": 255,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ArrayLoader.__init__": {
            "name": "__init__",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Mapping[str, Dict[str, Any]]",
                    "Dict[str, Dict[str, str]]",
                    "Dict[str, int]"
                ]
            }
        },
        "_ArrayLoader.load": {
            "name": "load",
            "location": 264,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "bytes",
                    "pathlib.Path",
                    "bytearray",
                    "bool",
                    "float"
                ],
                "baseuri": [
                    "str",
                    "Optional[float]",
                    "Optional[str]"
                ],
                "loadingOptions": [
                    "str",
                    "Optional[float]",
                    "Optional[str]"
                ],
                "docRoot": [
                    "str",
                    "bool",
                    "Set[str]"
                ]
            }
        },
        "_ArrayLoader.__repr__": {
            "name": "__repr__",
            "location": 285,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_EnumLoader.__init__": {
            "name": "__init__",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "symbols": [
                    "Optional[str]",
                    "Optional[List[str]]",
                    "bool"
                ]
            }
        },
        "_EnumLoader.load": {
            "name": "load",
            "location": 294,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]"
                ],
                "baseuri": [
                    "str",
                    "bool",
                    "Set[str]"
                ],
                "loadingOptions": [
                    "str",
                    "bool",
                    "Set[str]"
                ],
                "docRoot": [
                    "str",
                    "bool",
                    "Set[str]"
                ]
            }
        },
        "_SecondaryDSLLoader.__init__": {
            "name": "__init__",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inner": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "_SecondaryDSLLoader.load": {
            "name": "load",
            "location": 307,
            "return": [
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "str",
                    "dict"
                ],
                "baseuri": [
                    "str",
                    "Optional[Dict[str, Any]]"
                ],
                "loadingOptions": [
                    "str",
                    "Optional[Dict[str, Any]]"
                ],
                "docRoot": [
                    "str",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "_RecordLoader.__init__": {
            "name": "__init__",
            "location": 374,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "classtype": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "_RecordLoader.load": {
            "name": "load",
            "location": 378,
            "return": [
                "bool",
                "eth.abc.BlockHeaderAPI",
                "Optional[Dict]",
                "Dict[str, str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "str",
                    "Optional[str]",
                    "raiden.utils.Address"
                ],
                "baseuri": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "int"
                ],
                "loadingOptions": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "int"
                ],
                "docRoot": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "_RecordLoader.__repr__": {
            "name": "__repr__",
            "location": 384,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ExpressionLoader.__init__": {
            "name": "__init__",
            "location": 389,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Mapping[str, Dict[str, Any]]",
                    "Dict[str, Dict[str, str]]",
                    "Dict[str, int]"
                ]
            }
        },
        "_ExpressionLoader.load": {
            "name": "load",
            "location": 392,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "str",
                    "BinaryIO"
                ],
                "baseuri": [
                    "str",
                    "bool",
                    "Set[str]"
                ],
                "loadingOptions": [
                    "str",
                    "bool",
                    "Set[str]"
                ],
                "docRoot": [
                    "str",
                    "bool",
                    "Set[str]"
                ]
            }
        },
        "_UnionLoader.__init__": {
            "name": "__init__",
            "location": 400,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "alternates": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "_UnionLoader.load": {
            "name": "load",
            "location": 404,
            "return": [
                "Tuple[float, float]",
                "bool",
                "cmk.utils.type_defs.UserId",
                "Callable",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "str",
                    "List[str]",
                    "dict",
                    "Optional[Dict]"
                ],
                "baseuri": [
                    "str",
                    "List[str]",
                    "dict",
                    "Optional[Dict]"
                ],
                "loadingOptions": [
                    "str",
                    "List[str]",
                    "dict",
                    "Optional[Dict]"
                ],
                "docRoot": [
                    "str",
                    "List[str]",
                    "dict",
                    "Optional[Dict]"
                ]
            }
        },
        "_UnionLoader.__repr__": {
            "name": "__repr__",
            "location": 416,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_URILoader.__init__": {
            "name": "__init__",
            "location": 421,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inner": [
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "dict",
                    "List[int]",
                    "Optional[str]"
                ],
                "scoped_id": [
                    "str",
                    "int"
                ],
                "vocab_term": [
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "dict",
                    "List[int]",
                    "Optional[str]"
                ],
                "scoped_ref": [
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "dict",
                    "List[int]",
                    "Optional[str]"
                ]
            }
        },
        "_URILoader.load": {
            "name": "load",
            "location": 428,
            "return": [
                "str",
                "int",
                "Dict[str, str]",
                "Optional[Exception]"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "List[float]",
                    "int",
                    "str"
                ],
                "baseuri": [
                    "str",
                    "dict",
                    "utils.RichStatus",
                    "Optional[str]"
                ],
                "loadingOptions": [
                    "str",
                    "dict",
                    "utils.RichStatus",
                    "Optional[str]"
                ],
                "docRoot": [
                    "str",
                    "bool",
                    "Set[str]"
                ]
            }
        },
        "_TypeDSLLoader.__init__": {
            "name": "__init__",
            "location": 462,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inner": [
                    "Optional[Collection[int]]",
                    "int",
                    "Optional[float]",
                    "bool",
                    "Dict[str, Any]"
                ],
                "refScope": [
                    "Optional[Collection[int]]",
                    "int",
                    "Optional[float]",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "_TypeDSLLoader.resolve": {
            "name": "resolve",
            "location": 467,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "str",
                    "List[str]"
                ],
                "baseuri": [
                    "str",
                    "Optional[str]"
                ],
                "loadingOptions": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "_TypeDSLLoader.load": {
            "name": "load",
            "location": 498,
            "return": [
                "str",
                "int",
                "Dict[str, str]",
                "Optional[Exception]"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "str",
                    "pathlib.Path",
                    "Optional[Sequence[str]]",
                    "Tuple[Any, Any]",
                    "int",
                    "Callable",
                    "Dict[str, int]"
                ],
                "baseuri": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "Callable[..., bool]",
                    "dict",
                    "Union[utils.CWLObjectType, List[utils.CWLObjectType]]"
                ],
                "loadingOptions": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "Callable[..., bool]",
                    "dict",
                    "Union[utils.CWLObjectType, List[utils.CWLObjectType]]"
                ],
                "docRoot": [
                    "str",
                    "bool",
                    "Set[str]"
                ]
            }
        },
        "_IdMapLoader.__init__": {
            "name": "__init__",
            "location": 522,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inner": [
                    "int",
                    "bool",
                    "float"
                ],
                "mapSubject": [
                    "int",
                    "bool",
                    "float"
                ],
                "mapPredicate": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "_IdMapLoader.load": {
            "name": "load",
            "location": 528,
            "return": [
                "str",
                "int",
                "Dict[str, str]",
                "Optional[Exception]"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "List[Dict]",
                    "raiden.utils.Any",
                    "str",
                    "list",
                    "List[int]",
                    "io.TextIOWrapper"
                ],
                "baseuri": [
                    "str",
                    "Dict[str, Any]"
                ],
                "loadingOptions": [
                    "str",
                    "Dict[str, Any]"
                ],
                "docRoot": [
                    "str",
                    "bool",
                    "Set[str]"
                ]
            }
        }
    },
    "schema_salad-main/schema_salad/ref_resolver.py": {
        "file_uri": {
            "name": "file_uri",
            "location": 53,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Optional[pathlib.Path]",
                    "pathlib.Path"
                ],
                "split_frag": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "uri_file_path": {
            "name": "uri_file_path",
            "location": 71,
            "return": [
                "str"
            ],
            "arguments": {
                "url": [
                    "str",
                    "bool"
                ]
            }
        },
        "to_validation_exception": {
            "name": "to_validation_exception",
            "location": 82,
            "return": [
                "schema_salad.exceptions.ValidationException"
            ],
            "arguments": {
                "e": [
                    "bool"
                ]
            }
        },
        "SubLoader": {
            "name": "SubLoader",
            "location": 127,
            "return": [
                "Loader"
            ],
            "arguments": {
                "loader": [
                    "int"
                ]
            }
        },
        "_copy_dict_without_key": {
            "name": "_copy_dict_without_key",
            "location": 1199,
            "return": [
                "str",
                "dict",
                "cmk.utils.type_defs.EventRule"
            ],
            "arguments": {
                "from_dict": [
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ],
                "filtered_key": [
                    "str",
                    "dict",
                    "Optional[str]",
                    "requests.Session"
                ]
            }
        },
        "NormDict.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "normalize": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "NormDict.__eq__": {
            "name": "__eq__",
            "location": 111,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Collection"
                ]
            }
        },
        "NormDict.__getitem__": {
            "name": "__getitem__",
            "location": 114,
            "return": [
                "float",
                "int",
                "outcome.Outcome[str, utils.typeshed.pathlike]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "KT",
                    "bool"
                ]
            }
        },
        "NormDict.__setitem__": {
            "name": "__setitem__",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "T"
                ],
                "value": [
                    "str",
                    "T"
                ]
            }
        },
        "NormDict.__delitem__": {
            "name": "__delitem__",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "KT",
                    "bool"
                ]
            }
        },
        "NormDict.__contains__": {
            "name": "__contains__",
            "location": 123,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "KT",
                    "bool"
                ]
            }
        },
        "Loader.__init__": {
            "name": "__init__",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "schemagraph": [
                    "Optional[str]",
                    "Optional[int]",
                    "bool",
                    "Optional[Any]"
                ],
                "foreign_properties": [
                    "Optional[Set[str]]",
                    "AbstractSet[\"OntologyNode\"]",
                    "int",
                    "bool",
                    "List[int]"
                ],
                "idx": [
                    "Dict[str, Any]",
                    "str",
                    "dict",
                    "bool"
                ],
                "cache": [
                    "Optional[requests.sessions.Session]",
                    "str",
                    "Dict[str, Any]",
                    "kedro.io.DataCatalog"
                ],
                "session": [
                    "str",
                    "Optional[requests.sessions.Session]",
                    "Dict[str, Any]",
                    "kedro.io.DataCatalog"
                ],
                "fetcher_constructor": [
                    "Callable[[float], float]",
                    "bool",
                    "Optional[str]",
                    "Optional[int]",
                    "float",
                    "int"
                ],
                "skip_schemas": [
                    "str",
                    "Optional[bool]",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]"
                ],
                "url_fields": [
                    "bool",
                    "Optional[Set[str]]",
                    "str",
                    "Optional[str]"
                ],
                "allow_attachments": [
                    "str",
                    "bool"
                ],
                "doc_cache": [
                    "str",
                    "Union[str, bool]",
                    "int"
                ]
            }
        },
        "Loader.expand_url": {
            "name": "expand_url",
            "location": 214,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "List[str]"
                ],
                "base_url": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "scoped_id": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Union[int, str]",
                    "Optional[int]"
                ],
                "vocab_term": [
                    "int",
                    "str",
                    "bool"
                ],
                "scoped_ref": [
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[float]"
                ]
            }
        },
        "Loader._add_properties": {
            "name": "_add_properties",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "Optional[AnyStr]",
                    "Optional[str]",
                    "Set[Tuple[int, Any, Any]]"
                ]
            }
        },
        "Loader.add_namespaces": {
            "name": "add_namespaces",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ns": [
                    "dict",
                    "Dict[str, str]",
                    "int",
                    "requests.Response"
                ]
            }
        },
        "Loader.add_schemas": {
            "name": "add_schemas",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ns": [
                    "Union[List[str], str]",
                    "int",
                    "bool",
                    "bytes",
                    "str"
                ],
                "base_url": [
                    "int",
                    "str",
                    "bool",
                    "utils.ResolveType"
                ]
            }
        },
        "Loader.add_context": {
            "name": "add_context",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "newcontext": [
                    "dict",
                    "List[str]",
                    "cmk.utils.type_defs.UserId",
                    "Exception",
                    "Dict[str, Any]"
                ]
            }
        },
        "Loader.resolve_ref": {
            "name": "resolve_ref",
            "location": 396,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "float",
                    "bool",
                    "int",
                    "utils.ResolveType",
                    "Optional[List[str]]",
                    "Callable[[str], Any]"
                ],
                "base_url": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[List[str]]"
                ],
                "checklinks": [
                    "Optional[pathlib.Path]",
                    "str",
                    "Type[T]",
                    "int",
                    "bool"
                ],
                "strict_foreign_properties": [
                    "Optional[pathlib.Path]",
                    "str",
                    "Type[T]",
                    "int",
                    "bool"
                ],
                "content_types": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "Loader._resolve_idmap": {
            "name": "_resolve_idmap",
            "location": 565,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "document": [
                    "trezor.utils.Writer",
                    "list",
                    "int"
                ],
                "loader": [
                    "bool"
                ]
            }
        },
        "Loader._type_dsl": {
            "name": "_type_dsl",
            "location": 615,
            "return": [
                "str",
                "T"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "str",
                    "Optional[str]",
                    "Pattern"
                ],
                "lc": [
                    "ruamel.yaml.comments.LineCol",
                    "bool"
                ],
                "filename": [
                    "str",
                    "pathlib.Path",
                    "bytes"
                ]
            }
        },
        "Loader._secondaryFile_dsl": {
            "name": "_secondaryFile_dsl",
            "location": 643,
            "return": [
                "int",
                "str",
                "IO",
                "BaseException"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "raiden.utils.BlockNumber"
                ],
                "lc": [
                    "ruamel.yaml.comments.LineCol",
                    "str",
                    "bool",
                    "int"
                ],
                "filename": [
                    "str",
                    "float",
                    "bool",
                    "bytes"
                ]
            }
        },
        "Loader._apply_dsl": {
            "name": "_apply_dsl",
            "location": 661,
            "return": [
                "asyncworker.http.wrapper.RequestWrapper",
                "bool",
                "str",
                "Type[Any]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "datum": [
                    "int",
                    "float",
                    "Optional[float]",
                    "bytes",
                    "bool",
                    "str"
                ],
                "d": [
                    "str",
                    "bool",
                    "Optional[int]"
                ],
                "loader": [
                    "str",
                    "bool",
                    "Optional[int]"
                ],
                "lc": [
                    "int",
                    "float",
                    "Optional[float]",
                    "bytes",
                    "bool",
                    "str"
                ],
                "filename": [
                    "int",
                    "float",
                    "Optional[float]",
                    "bytes",
                    "bool",
                    "str"
                ]
            }
        },
        "Loader._resolve_dsl": {
            "name": "_resolve_dsl",
            "location": 676,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "document": [
                    "float",
                    "int",
                    "ruamel.yaml.comments.CommentedMap"
                ],
                "loader": [
                    "str",
                    "list"
                ]
            }
        },
        "Loader._resolve_identifier": {
            "name": "_resolve_identifier",
            "location": 731,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "document": [
                    "ruamel.yaml.comments.CommentedMap",
                    "str",
                    "bool",
                    "float"
                ],
                "loader": [
                    "bytes",
                    "Type[T]",
                    "str"
                ],
                "base_url": [
                    "str",
                    "pathlib.Path",
                    "cmk.utils.type_defs.UserId"
                ]
            }
        },
        "Loader._resolve_identity": {
            "name": "_resolve_identity",
            "location": 754,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "document": [
                    "Dict[str, Union[str, Any]]",
                    "str",
                    "float",
                    "raiden.utils.Secret",
                    "bool"
                ],
                "loader": [
                    "bytes",
                    "Callable[[bytes], bytes]",
                    "str",
                    "dict"
                ],
                "base_url": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Loader._normalize_fields": {
            "name": "_normalize_fields",
            "location": 774,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "document": [
                    "ruamel.yaml.comments.CommentedMap",
                    "type",
                    "bool"
                ],
                "loader": [
                    "str",
                    "int",
                    "dict",
                    "dbcontracts.graph.manifesManifest"
                ]
            }
        },
        "Loader._resolve_uris": {
            "name": "_resolve_uris",
            "location": 784,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "document": [
                    "str"
                ],
                "loader": [
                    "str",
                    "bool",
                    "int"
                ],
                "base_url": [
                    "str"
                ]
            }
        },
        "Loader.resolve_all": {
            "name": "resolve_all",
            "location": 813,
            "return": [
                "str",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "document": [
                    "int",
                    "List[str]"
                ],
                "base_url": [
                    "bytes",
                    "cmk.utils.type_defs.ConfigSerial"
                ],
                "file_base": [
                    "Dict[str, Any]",
                    "str",
                    "Callable[[int], float]",
                    "List[int]",
                    "IO[str]"
                ],
                "checklinks": [
                    "bool",
                    "str",
                    "bytes",
                    "utils.ResolveType"
                ],
                "strict_foreign_properties": [
                    "bool",
                    "str",
                    "bytes",
                    "utils.ResolveType"
                ]
            }
        },
        "Loader.fetch": {
            "name": "fetch",
            "location": 972,
            "return": [
                "str",
                "IO",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "inject_ids": [
                    "bool",
                    "Optional[str]",
                    "str"
                ],
                "content_types": [
                    "str"
                ]
            }
        },
        "Loader.validate_scoped": {
            "name": "validate_scoped",
            "location": 1013,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str",
                    "Set[str]"
                ],
                "link": [
                    "str"
                ],
                "docid": [
                    "str",
                    "bytes",
                    "pathlib.Path"
                ]
            }
        },
        "Loader.validate_link": {
            "name": "validate_link",
            "location": 1041,
            "return": [
                "int",
                "raiden.utils.List[raiden.utils.Tuple[str, raiden.utils.Any]]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str",
                    "bool"
                ],
                "link": [
                    "Optional[str]",
                    "Mapping[Any, str]",
                    "str",
                    "int"
                ],
                "docid": [
                    "str",
                    "Type[Any]",
                    "Optional[str]",
                    "Optional[int]",
                    "Dict[str, float]",
                    "Dict[str, str]"
                ],
                "all_doc_ids": [
                    "str",
                    "List[str]",
                    "Tuple[int, int]",
                    "Optional[str]"
                ]
            }
        },
        "Loader.getid": {
            "name": "getid",
            "location": 1095,
            "return": [
                "Optional[str]",
                "list",
                "str"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "dict",
                    "List['cirq.Circuit']",
                    "bytes",
                    "Union[int, List[int]]",
                    "List[float]"
                ]
            }
        },
        "Loader.validate_links": {
            "name": "validate_links",
            "location": 1104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "document": [
                    "Optional[str]",
                    "str",
                    "Mapping[str, Any]",
                    "Dict[str, Any]"
                ],
                "base_url": [
                    "str",
                    "dict"
                ],
                "all_doc_ids": [
                    "str",
                    "int",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "strict_foreign_properties": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "schema_salad-main/schema_salad/schema.py": {
        "get_metaschema": {
            "name": "get_metaschema",
            "location": 85,
            "return": [
                "Tuple[(schema_salad.avro.schema.Names, Any, ref_resolver.Loader)]"
            ],
            "arguments": {}
        },
        "add_namespaces": {
            "name": "add_namespaces",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "metadata": [
                    "Dict[str, float]",
                    "Mapping[str, Any]",
                    "Dict[str, str]",
                    "Dict[str, int]"
                ],
                "namespaces": [
                    "MutableMapping[str, str]",
                    "str",
                    "dict",
                    "bool",
                    "int"
                ]
            }
        },
        "collect_namespaces": {
            "name": "collect_namespaces",
            "location": 219,
            "return": [
                "dict"
            ],
            "arguments": {
                "metadata": [
                    "Mapping[str, Any]",
                    "float",
                    "Dict[str, float]",
                    "str"
                ]
            }
        },
        "load_schema": {
            "name": "load_schema",
            "location": 233,
            "return": [
                "Tuple[(ref_resolver.Loader, schema_salad.avro.schema.Names, Any, ref_resolver.Loader)]"
            ],
            "arguments": {
                "schema_ref": [
                    "bytes",
                    "Dict[str, raiden.utils.Any]",
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ],
                "cache": [
                    "Optional[bool]",
                    "Optional[Sequence[str]]",
                    "Mapping[str, Any]",
                    "Optional[str]",
                    "Optional[Dict]"
                ]
            }
        },
        "load_and_validate": {
            "name": "load_and_validate",
            "location": 266,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "document_loader": [
                    "bool",
                    "ref_resolver.Loader",
                    "str",
                    "float"
                ],
                "avsc_names": [
                    "bool",
                    "avro.schema.Names",
                    "str",
                    "List[str]",
                    "int",
                    "dict"
                ],
                "document": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]"
                ],
                "strict": [
                    "bool",
                    "avro.schema.Names",
                    "str",
                    "List[str]",
                    "int",
                    "dict"
                ],
                "strict_foreign_properties": [
                    "bool",
                    "ref_resolver.Loader",
                    "str",
                    "float"
                ]
            }
        },
        "validate_doc": {
            "name": "validate_doc",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "schema_names": [
                    "avro.schema.Names",
                    "str",
                    "Optional[str]",
                    "float"
                ],
                "doc": [
                    "Optional[float]",
                    "bool",
                    "utils.CWLObjectType",
                    "float",
                    "str"
                ],
                "loader": [
                    "str",
                    "Optional[str]",
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.Item",
                    "cmk.utils.type_defs.CheckPluginNameStr",
                    "bool"
                ],
                "strict": [
                    "str",
                    "Optional[str]",
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.Item",
                    "cmk.utils.type_defs.CheckPluginNameStr",
                    "bool"
                ],
                "strict_foreign_properties": [
                    "str",
                    "Optional[str]",
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.Item",
                    "cmk.utils.type_defs.CheckPluginNameStr",
                    "bool"
                ]
            }
        },
        "get_anon_name": {
            "name": "get_anon_name",
            "location": 404,
            "return": [
                "str",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "rec": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "replace_type": {
            "name": "replace_type",
            "location": 436,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "items": [
                    "bool",
                    "list",
                    "List[Dict]",
                    "List[List[str]]",
                    "dict"
                ],
                "spec": [
                    "bool",
                    "Dict[str, Any]",
                    "ref_resolver.Loader",
                    "type"
                ],
                "loader": [
                    "bool",
                    "Dict[str, Any]",
                    "ref_resolver.Loader",
                    "type"
                ],
                "found": [
                    "Set[str]",
                    "Iterable[Tuple[Any, Any]]",
                    "Optional[Hashable]"
                ],
                "find_embeds": [
                    "bool",
                    "Dict[str, Any]",
                    "ref_resolver.Loader",
                    "type"
                ],
                "deepen": [
                    "bool",
                    "Dict[str, Any]",
                    "ref_resolver.Loader",
                    "type"
                ]
            }
        },
        "avro_field_name": {
            "name": "avro_field_name",
            "location": 498,
            "return": [
                "str"
            ],
            "arguments": {
                "url": [
                    "str",
                    "bool",
                    "Optional[Union[str, Any]]"
                ]
            }
        },
        "make_valid_avro": {
            "name": "make_valid_avro",
            "location": 516,
            "return": [
                "str",
                "bool",
                "Iterable[str]",
                "bytes"
            ],
            "arguments": {
                "items": [
                    "dict",
                    "Iterable[T]",
                    "raiden.utils.Any"
                ],
                "alltypes": [
                    "bool",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, Any]",
                    "Set[str]",
                    "Callable[..., T]",
                    "ref_resolver.Loader"
                ],
                "found": [
                    "Set[str]",
                    "Exception",
                    "dict"
                ],
                "union": [
                    "bool",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, Any]",
                    "Set[str]",
                    "Callable[..., T]",
                    "ref_resolver.Loader"
                ],
                "fielddef": [
                    "bool",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, Any]",
                    "Set[str]",
                    "Callable[..., T]",
                    "ref_resolver.Loader"
                ],
                "vocab": [
                    "Dict[str, Any]"
                ]
            }
        },
        "deepcopy_strip": {
            "name": "deepcopy_strip",
            "location": 587,
            "return": [
                "Union[(dict, list, _T0)]"
            ],
            "arguments": {
                "item": [
                    "dict",
                    "raiden.utils.Any",
                    "str",
                    "ref_resolver.Loader",
                    "Union[int, slice]",
                    "Iterable[T]"
                ]
            }
        },
        "extend_and_specialize": {
            "name": "extend_and_specialize",
            "location": 602,
            "return": [
                "list"
            ],
            "arguments": {
                "items": [
                    "int",
                    "str"
                ],
                "loader": [
                    "ref_resolver.Loader",
                    "Union[int, slice]",
                    "raiden.utils.Any",
                    "dict",
                    "str"
                ]
            }
        },
        "make_avro": {
            "name": "make_avro",
            "location": 735,
            "return": [
                "list"
            ],
            "arguments": {
                "i": [
                    "int",
                    "ref_resolver.Loader",
                    "list",
                    "List[Dict[str, Any]]"
                ],
                "loader": [
                    "int",
                    "ref_resolver.Loader",
                    "list",
                    "List[Dict[str, Any]]"
                ],
                "metaschema_vocab": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "make_avro_schema": {
            "name": "make_avro_schema",
            "location": 758,
            "return": [
                "schema_salad.avro.schema.Names"
            ],
            "arguments": {
                "i": [
                    "int",
                    "ref_resolver.Loader",
                    "list",
                    "List[Dict[str, Any]]"
                ],
                "loader": [
                    "int",
                    "ref_resolver.Loader",
                    "list",
                    "List[Dict[str, Any]]"
                ],
                "metaschema_vocab": [
                    "int",
                    "ref_resolver.Loader",
                    "list",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "make_avro_schema_from_avro": {
            "name": "make_avro_schema_from_avro",
            "location": 773,
            "return": [
                "schema_salad.avro.schema.Names"
            ],
            "arguments": {
                "avro": [
                    "Dict[str, float]",
                    "List[Dict]",
                    "int",
                    "dict",
                    "str"
                ]
            }
        },
        "shortname": {
            "name": "shortname",
            "location": 779,
            "return": [
                "str",
                "Dict[str, Any]",
                "Callable",
                "bytes",
                "dict",
                "bool"
            ],
            "arguments": {
                "inputid": [
                    "List[List[str]]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "print_inheritance": {
            "name": "print_inheritance",
            "location": 787,
            "return": [
                "None"
            ],
            "arguments": {
                "doc": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "stream": [
                    "float"
                ]
            }
        },
        "print_fieldrefs": {
            "name": "print_fieldrefs",
            "location": 806,
            "return": [
                "None"
            ],
            "arguments": {
                "doc": [
                    "int",
                    "Callable",
                    "str"
                ],
                "loader": [
                    "ref_resolver.Loader",
                    "int"
                ],
                "stream": [
                    "IO[Any]",
                    "str",
                    "int",
                    "bytes"
                ]
            }
        }
    },
    "schema_salad-main/schema_salad/sourceline.py": {
        "_add_lc_filename": {
            "name": "_add_lc_filename",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "r": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Tuple[str, str]",
                    "List[str]"
                ],
                "source": [
                    "AnyStr",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "relname": {
            "name": "relname",
            "location": 33,
            "return": [
                "str",
                "List[str]",
                "os.PathLike"
            ],
            "arguments": {
                "source": [
                    "str",
                    "bytes"
                ]
            }
        },
        "add_lc_filename": {
            "name": "add_lc_filename",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "r": [
                    "str"
                ],
                "source": [
                    "str"
                ]
            }
        },
        "reflow_all": {
            "name": "reflow_all",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "maxline": [
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "reflow": {
            "name": "reflow",
            "location": 71,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "maxline": [
                    "str",
                    "bytes"
                ],
                "shift": [
                    "Optional[str]",
                    "Optional[int]",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "indent": {
            "name": "indent",
            "location": 87,
            "return": [
                "bool"
            ],
            "arguments": {
                "v": [
                    "str",
                    "int",
                    "list"
                ],
                "nolead": [
                    "int",
                    "bytes",
                    "str",
                    "bool"
                ],
                "shift": [
                    "int",
                    "bytes",
                    "str",
                    "bool"
                ],
                "bullet": [
                    "int",
                    "bytes",
                    "str",
                    "bool"
                ]
            }
        },
        "bullets": {
            "name": "bullets",
            "location": 108,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "textlist": [
                    "List[str]",
                    "str"
                ],
                "bul": [
                    "str",
                    "List[int]",
                    "float"
                ]
            }
        },
        "strip_duplicated_lineno": {
            "name": "strip_duplicated_lineno",
            "location": 115,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "strip_dup_lineno": {
            "name": "strip_dup_lineno",
            "location": 136,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "maxline": [
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "cmap": {
            "name": "cmap",
            "location": 175,
            "return": [
                "int",
                "dict",
                "str"
            ],
            "arguments": {
                "d": [
                    "str",
                    "Callable",
                    "Optional[str]"
                ],
                "lc": [
                    "str",
                    "Optional[str]",
                    "Union[str, int]"
                ],
                "fn": [
                    "Optional[str]",
                    "str",
                    "BinaryIO",
                    "bytes",
                    "bool"
                ]
            }
        },
        "SourceLine.__init__": {
            "name": "__init__",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "dict",
                    "Dict[str, Dict[str, str]]",
                    "Dict[str, Any]",
                    "Dict[str, int]"
                ],
                "key": [
                    "str"
                ],
                "raise_type": [
                    "str",
                    "Optional[str]",
                    "int",
                    "bool",
                    "Optional[List[str]]"
                ],
                "include_traceback": [
                    "type",
                    "str"
                ]
            }
        },
        "SourceLine.__enter__": {
            "name": "__enter__",
            "location": 245,
            "return": [
                "SourceLine"
            ],
            "arguments": {
                "self": [
                    "_TSourceLine@@SourceLine@@"
                ]
            }
        },
        "SourceLine.__exit__": {
            "name": "__exit__",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_value": [
                    "Optional[BaseException]"
                ],
                "tb": [
                    "Optional[Type[BaseException]]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ]
            }
        },
        "SourceLine.file": {
            "name": "file",
            "location": 258,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SourceLine.start": {
            "name": "start",
            "location": 264,
            "return": [
                "Optional[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SourceLine.end": {
            "name": "end",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SourceLine.makeLead": {
            "name": "makeLead",
            "location": 282,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SourceLine.makeError": {
            "name": "makeError",
            "location": 290,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "Type",
                    "type"
                ]
            }
        },
        "indent.lineno": {
            "name": "lineno",
            "location": 94,
            "return": [
                "List[dict]",
                "str",
                "bytearray",
                "int",
                "bytes"
            ],
            "arguments": {
                "i": [
                    "int",
                    "str"
                ],
                "line": [
                    "str"
                ]
            }
        }
    },
    "schema_salad-main/schema_salad/typescript_codegen.py": {
        "doc_to_doc_string": {
            "name": "doc_to_doc_string",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "doc": [
                    "str",
                    "int"
                ],
                "indent_level": [
                    "str",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "TypeScriptCodeGen.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base": [
                    "int",
                    "bool",
                    "str",
                    "Exception",
                    "List[str]"
                ],
                "examples": [
                    "bool",
                    "List['cirq.Circuit']",
                    "Optional[dict]",
                    "float",
                    "int",
                    "Optional[str]",
                    "str"
                ],
                "target": [
                    "str",
                    "int"
                ],
                "package": [
                    "bool",
                    "List['cirq.Circuit']",
                    "Optional[dict]",
                    "float",
                    "int",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "TypeScriptCodeGen.prologue": {
            "name": "prologue",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeScriptCodeGen.safe_name": {
            "name": "safe_name",
            "location": 113,
            "return": [
                "str",
                "Dict[str, Any]",
                "Type[Any]",
                "IO",
                "pathlib.Path",
                "bytes",
                "bool",
                "int"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Tuple[str, str]"
                ]
            }
        },
        "TypeScriptCodeGen.begin_class": {
            "name": "begin_class",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "classname": [
                    "str",
                    "Dict[str, Any]"
                ],
                "extends": [
                    "str",
                    "Optional[str]",
                    "Optional[Iterable[str]]",
                    "Callable[[Any], str]",
                    "Dict[str, str]",
                    "Sequence[Any]"
                ],
                "doc": [
                    "Tuple[float, float]",
                    "bool",
                    "Optional[dict]"
                ],
                "abstract": [
                    "str",
                    "Dict[str, Any]"
                ],
                "field_names": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "idfield": [
                    "bool",
                    "Optional[List[str]]",
                    "int"
                ],
                "optional_fields": [
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TypeScriptCodeGen.end_class": {
            "name": "end_class",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "classname": [
                    "str",
                    "bool",
                    "pathlib.Path",
                    "Union[str, Pattern]"
                ],
                "field_names": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "TypeScriptCodeGen.type_loader": {
            "name": "type_loader",
            "location": 369,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "type_declaration": [
                    "Optional[str]"
                ]
            }
        },
        "TypeScriptCodeGen.type_loader_enum": {
            "name": "type_loader_enum",
            "location": 434,
            "return": [
                "schema_salad.codegen_base.TypeDef"
            ],
            "arguments": {
                "self": [],
                "type_declaration": [
                    "str",
                    "Callable"
                ]
            }
        },
        "TypeScriptCodeGen.declare_field": {
            "name": "declare_field",
            "location": 468,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Type[T]",
                    "type"
                ],
                "fieldtype": [
                    "str",
                    "bool",
                    "Optional[Any]"
                ],
                "doc": [
                    "str",
                    "bytes",
                    "pathlib.Path",
                    "Dict[str, Sequence[str]]"
                ],
                "optional": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "TypeScriptCodeGen.declare_id_field": {
            "name": "declare_id_field",
            "location": 639,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "fieldtype": [
                    "str",
                    "Optional[str]",
                    "dict"
                ],
                "doc": [
                    "str",
                    "Optional[str]",
                    "dict"
                ],
                "optional": [
                    "str",
                    "bool",
                    "Set[str]",
                    "dict"
                ],
                "subscope": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "TypeScriptCodeGen.to_typescript": {
            "name": "to_typescript",
            "location": 678,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "bool",
                    "str",
                    "float",
                    "Optional[bool]",
                    "Exception"
                ]
            }
        },
        "TypeScriptCodeGen.uri_loader": {
            "name": "uri_loader",
            "location": 688,
            "return": [
                "schema_salad.codegen_base.TypeDef"
            ],
            "arguments": {
                "self": [],
                "inner": [
                    "str"
                ],
                "scoped_id": [
                    "str",
                    "int",
                    "Optional[int]"
                ],
                "vocab_term": [
                    "str",
                    "int",
                    "Optional[int]"
                ],
                "ref_scope": [
                    "str",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "TypeScriptCodeGen.idmap_loader": {
            "name": "idmap_loader",
            "location": 713,
            "return": [
                "schema_salad.codegen_base.TypeDef"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "schema.InputField",
                    "Type[Exception]"
                ],
                "inner": [
                    "str",
                    "schema.InputField",
                    "Type",
                    "Sequence[str]"
                ],
                "map_subject": [
                    "schema.InputField",
                    "Type[Exception]"
                ],
                "map_predicate": [
                    "schema.InputField",
                    "Type[Exception]"
                ]
            }
        },
        "TypeScriptCodeGen.typedsl_loader": {
            "name": "typedsl_loader",
            "location": 728,
            "return": [
                "schema_salad.codegen_base.TypeDef"
            ],
            "arguments": {
                "self": [],
                "inner": [
                    "int",
                    "bool"
                ],
                "ref_scope": []
            }
        },
        "TypeScriptCodeGen.epilogue": {
            "name": "epilogue",
            "location": 739,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root_loader": [
                    "Sequence[str]",
                    "dict",
                    "int"
                ]
            }
        },
        "TypeScriptCodeGen.secondaryfilesdsl_loader": {
            "name": "secondaryfilesdsl_loader",
            "location": 854,
            "return": [
                "schema_salad.codegen_base.TypeDef"
            ],
            "arguments": {
                "self": [],
                "inner": [
                    "str",
                    "recidiviz.persistence.database.schema.state.schema.StateSupervisionViolationResponse"
                ]
            }
        },
        "TypeScriptCodeGen.epilogue.template_from_resource": {
            "name": "template_from_resource",
            "location": 758,
            "return": [
                "str"
            ],
            "arguments": {
                "resource": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "TypeScriptCodeGen.epilogue.expand_resource_template_to": {
            "name": "expand_resource_template_to",
            "location": 765,
            "return": [
                "None"
            ],
            "arguments": {
                "resource": [
                    "str",
                    "path.Path",
                    "IO[bytes]",
                    "Dict[str, cerulean.Path]",
                    "Union[pathlib.Path, str]",
                    "pathlib.Path"
                ],
                "path": [
                    "str",
                    "pathlib.Path",
                    "Union[pathlib.Path, str]"
                ]
            }
        },
        "TypeScriptCodeGen.epilogue.copy_utils_recursive": {
            "name": "copy_utils_recursive",
            "location": 834,
            "return": [
                "None"
            ],
            "arguments": {
                "util_src": [
                    "str",
                    "List[pypi2nix.path.Path]",
                    "pathlib.Path",
                    "bytes",
                    "int",
                    "bool"
                ],
                "util_target": [
                    "str",
                    "pathlib.Path",
                    "Union[pathlib.Path, str]",
                    "dict",
                    "Optional[pathlib.Path]"
                ]
            }
        }
    },
    "schema_salad-main/schema_salad/utils.py": {
        "add_dictlist": {
            "name": "add_dictlist",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "di": [
                    "list",
                    "bytes",
                    "str",
                    "MutableMapping[Any, Any]",
                    "Iterable[str]",
                    "Optional[Callable[[str], Any]]"
                ],
                "key": [
                    "list",
                    "bytes",
                    "str",
                    "MutableMapping[Any, Any]",
                    "Iterable[str]",
                    "Optional[Callable[[str], Any]]"
                ],
                "val": [
                    "bool",
                    "Sequence[str]",
                    "MutableMapping[Any, Any]",
                    "str"
                ]
            }
        },
        "aslist": {
            "name": "aslist",
            "location": 47,
            "return": [
                "Union[(List[_T0], _T0)]"
            ],
            "arguments": {
                "thing": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "flatten": {
            "name": "flatten",
            "location": 63,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "thing": [
                    "Optional[int]",
                    "Optional[\"Outcome\"]",
                    "int"
                ],
                "ltypes": [
                    "float",
                    "List[str]",
                    "Dict[str, Callable[[], None]]",
                    "str"
                ]
            }
        },
        "onWindows": {
            "name": "onWindows",
            "location": 86,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "convert_to_dict": {
            "name": "convert_to_dict",
            "location": 91,
            "return": [
                "Union[(dict, list, _T0)]"
            ],
            "arguments": {
                "j4": [
                    "int",
                    "OrderedDict",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "json_dump": {
            "name": "json_dump",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "int",
                    "dict",
                    "list"
                ],
                "fp": [
                    "str",
                    "int",
                    "dict",
                    "list"
                ]
            }
        },
        "json_dumps": {
            "name": "json_dumps",
            "location": 109,
            "return": [
                "str"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "int",
                    "dict",
                    "list"
                ]
            }
        },
        "stdout": {
            "name": "stdout",
            "location": 117,
            "return": [
                "io.BufferedWriter"
            ],
            "arguments": {}
        },
        "yaml_no_ts": {
            "name": "yaml_no_ts",
            "location": 133,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {}
        },
        "_RoundTripNoTimeStampConstructor.construct_yaml_timestamp": {
            "name": "construct_yaml_timestamp",
            "location": 123,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "T",
                    "str",
                    "bytes",
                    "float",
                    "type",
                    "Callable[[object], Any]"
                ],
                "values": [
                    "dict",
                    "T",
                    "int",
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        }
    },
    "schema_salad-main/schema_salad/validate.py": {
        "validate": {
            "name": "validate",
            "location": 18,
            "return": [
                "bool"
            ],
            "arguments": {
                "expected_schema": [
                    "bool",
                    "int"
                ],
                "datum": [
                    "bool",
                    "int"
                ],
                "identifiers": [
                    "bool",
                    "int"
                ],
                "strict": [
                    "bool",
                    "int"
                ],
                "foreign_properties": [
                    "Optional[str]",
                    "Optional[\"AbstractPurpose\"]",
                    "Optional[int]",
                    "Dict[str, int]",
                    "int"
                ],
                "vocab": [
                    "bool",
                    "int"
                ]
            }
        },
        "avro_shortname": {
            "name": "avro_shortname",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "avro_type_name": {
            "name": "avro_type_name",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "url": [
                    "str",
                    "dict"
                ]
            }
        },
        "friendly": {
            "name": "friendly",
            "location": 89,
            "return": [
                "AsyncGenerator"
            ],
            "arguments": {
                "v": [
                    "float",
                    "int"
                ]
            }
        },
        "vpformat": {
            "name": "vpformat",
            "location": 102,
            "return": [
                "str"
            ],
            "arguments": {
                "datum": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "validate_ex": {
            "name": "validate_ex",
            "location": 109,
            "return": [
                "bool"
            ],
            "arguments": {
                "expected_schema": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "Dict[str, float]",
                    "float"
                ],
                "datum": [
                    "Optional[str]",
                    "Optional[int]",
                    "bool",
                    "Union[float, None, int]"
                ],
                "identifiers": [
                    "Dict[str, flambe.compile.Schema]",
                    "Optional[List[str]]",
                    "bool",
                    "Iterable[str]"
                ],
                "strict": [
                    "Dict[str, flambe.compile.Schema]",
                    "Optional[List[str]]",
                    "bool",
                    "Iterable[str]"
                ],
                "foreign_properties": [
                    "Iterable[str]",
                    "type",
                    "List[str]",
                    "dict",
                    "Optional[dict]",
                    "str",
                    "Type[\"SerializationDialect\"]"
                ],
                "raise_ex": [
                    "Dict[str, flambe.compile.Schema]",
                    "Optional[List[str]]",
                    "bool",
                    "Iterable[str]"
                ],
                "strict_foreign_properties": [
                    "Dict[str, flambe.compile.Schema]",
                    "Optional[List[str]]",
                    "bool",
                    "Iterable[str]"
                ],
                "logger": [
                    "Dict[str, flambe.compile.Schema]",
                    "Optional[List[str]]",
                    "bool",
                    "Iterable[str]"
                ],
                "skip_foreign_properties": [
                    "Dict[str, flambe.compile.Schema]",
                    "Optional[List[str]]",
                    "bool",
                    "Iterable[str]"
                ],
                "vocab": [
                    "Optional[str]",
                    "Optional[bool]",
                    "list",
                    "bool"
                ]
            }
        }
    },
    "schema_salad-main/schema_salad/__init__.py": {},
    "schema_salad-main/schema_salad/__main__.py": {},
    "schema_salad-main/schema_salad/avro/schema.py": {
        "get_other_props": {
            "name": "get_other_props",
            "location": 554,
            "return": [
                "Optional[dict]"
            ],
            "arguments": {
                "all_props": [
                    "int"
                ],
                "reserved_props": [
                    "Dict[str,Any]",
                    "Dict",
                    "bool",
                    "List[str]",
                    "Dict[str,object]"
                ]
            }
        },
        "make_avsc_object": {
            "name": "make_avsc_object",
            "location": 566,
            "return": [
                "Union[(ArraySchema, EnumSchema, PrimitiveSchema, RecordSchema, UnionSchema)]"
            ],
            "arguments": {
                "json_data": [
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "Dict",
                    "str",
                    "Mapping[str,Any]"
                ],
                "names": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "is_subtype": {
            "name": "is_subtype",
            "location": 653,
            "return": [
                "bool"
            ],
            "arguments": {
                "existing": [
                    "Tuple[str]",
                    "Dict[str,Tuple[int,int]]",
                    "Iterable[Any]"
                ],
                "new": [
                    "List[str]",
                    "List",
                    "Callable",
                    "int"
                ]
            }
        },
        "Schema.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "atype": [
                    "str",
                    "bytes"
                ],
                "other_props": [
                    "Dict[str,Any]",
                    "None",
                    "int",
                    "Dict[str,Dict[str,str]]",
                    "Dict",
                    "bytes",
                    "Dict[str,Union[str,int]]",
                    "Dict[str,dict[str,str]]"
                ]
            }
        },
        "Schema.props": {
            "name": "props",
            "location": 114,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema.get_prop": {
            "name": "get_prop",
            "location": 118,
            "return": [
                "str",
                "int",
                "Optional[float]",
                "Optional[str]",
                "Tuple[int]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        },
        "Schema.set_prop": {
            "name": "set_prop",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "VT",
                    "KT"
                ],
                "value": [
                    "str",
                    "VT",
                    "KT"
                ]
            }
        },
        "Name.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name_attr": [
                    "str",
                    "Optional[str]",
                    "Dict[str,Optional[str]]",
                    "bool"
                ],
                "space_attr": [
                    "str",
                    "None",
                    "Dict",
                    "Optional[Sequence[str]]",
                    "List[str]",
                    "Sequence[str]",
                    "Union[bool,None]",
                    "bool"
                ],
                "default_space": [
                    "bool",
                    "None"
                ]
            }
        },
        "Name.fullname": {
            "name": "fullname",
            "location": 167,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Name.get_space": {
            "name": "get_space",
            "location": 170,
            "return": [
                "None",
                "Optional[int]",
                "Optional[str]",
                "bool",
                "Dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Names.__init__": {
            "name": "__init__",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "default_namespace": [
                    "int",
                    "None",
                    "Tuple",
                    "float",
                    "bool"
                ]
            }
        },
        "Names.has_name": {
            "name": "has_name",
            "location": 188,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name_attr": [
                    "str",
                    "List[str]",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "space_attr": [
                    "str",
                    "List[str]",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Names.get_name": {
            "name": "get_name",
            "location": 192,
            "return": [
                "None",
                "Optional[str]",
                "Optional[Dict[str,Any]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "name_attr": [
                    "str",
                    "List[str]",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "space_attr": [
                    "str",
                    "List[str]",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Names.add_name": {
            "name": "add_name",
            "location": 200,
            "return": [
                "Name"
            ],
            "arguments": {
                "self": [],
                "name_attr": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "None",
                    "List[Dict[str,str]]",
                    "List[dict[str,str]]"
                ],
                "space_attr": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "None",
                    "List[Dict[str,str]]",
                    "List[dict[str,str]]"
                ],
                "new_schema": [
                    "Iterable[str]",
                    "List[str]"
                ]
            }
        },
        "NamedSchema.__init__": {
            "name": "__init__",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "atype": [
                    "Sequence[int]",
                    "bool",
                    "float"
                ],
                "name": [
                    "str",
                    "List[str]",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "None"
                ],
                "namespace": [
                    "None",
                    "str",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "Optional[InstrumentBase]",
                    "Optional[Dict[str,Any]]"
                ],
                "names": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Dict[str,Any]",
                    "Optional[int]",
                    "Optional[Dict[str,Any]]"
                ],
                "other_props": [
                    "Sequence[int]",
                    "bool",
                    "None",
                    "float"
                ]
            }
        },
        "NamedSchema.name": {
            "name": "name",
            "location": 267,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.__init__": {
            "name": "__init__",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "atype": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "bool",
                    "None"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Sequence[Sequence[Any]]",
                    "Optional[List[str]]",
                    "bool",
                    "List[str]",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]"
                ],
                "has_default": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Iterable[str]",
                    "None"
                ],
                "default": [
                    "Optional[str]",
                    "None",
                    "bool",
                    "str",
                    "Iterable[str]"
                ],
                "order": [
                    "None",
                    "Optional[bool]",
                    "bool",
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "Optional[Union[Date,str]]"
                ],
                "names": [
                    "Optional[str]",
                    "List[str]",
                    "bool",
                    "str"
                ],
                "doc": [
                    "Optional[int]",
                    "None",
                    "Callable",
                    "Optional[str]",
                    "int",
                    "str",
                    "bool"
                ],
                "other_props": [
                    "Optional[int]",
                    "None",
                    "Dict",
                    "Dict[str,Any]",
                    "int",
                    "bytes",
                    "str",
                    "Optional[List[str]]",
                    "List[str]"
                ]
            }
        },
        "Field.default": {
            "name": "default",
            "location": 322,
            "return": [
                "Optional[str]",
                "bool",
                "str",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.get_prop": {
            "name": "get_prop",
            "location": 326,
            "return": [
                "str",
                "int",
                "Optional[float]",
                "Optional[str]",
                "Tuple[int]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        },
        "Field.set_prop": {
            "name": "set_prop",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "VT",
                    "KT"
                ],
                "value": [
                    "str",
                    "VT",
                    "KT"
                ]
            }
        },
        "PrimitiveSchema.__init__": {
            "name": "__init__",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "atype": [
                    "Optional[List[Any]]",
                    "List[Any]",
                    "Sequence[str]",
                    "List[str]",
                    "str",
                    "None",
                    "int"
                ],
                "other_props": [
                    "int",
                    "None",
                    "bool",
                    "Union[Sequence[Any],Tuple[float,float]]",
                    "Sequence[Any]",
                    "Tuple[Union[float,float]]"
                ]
            }
        },
        "EnumSchema.__init__": {
            "name": "__init__",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Union[list,dict]",
                    "List",
                    "Dict"
                ],
                "namespace": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Union[list,dict]",
                    "List",
                    "Dict"
                ],
                "symbols": [
                    "List[str]",
                    "str",
                    "List[List[str]]",
                    "dict",
                    "list"
                ],
                "names": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Union[list,dict]",
                    "List",
                    "Dict"
                ],
                "doc": [
                    "None",
                    "Optional[int]",
                    "int",
                    "bool",
                    "Callable",
                    "str",
                    "Optional[str]",
                    "List[Any]",
                    "Optional[bool]",
                    "Optional[List[Any]]"
                ],
                "other_props": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Union[list,dict]",
                    "List",
                    "Dict"
                ]
            }
        },
        "EnumSchema.symbols": {
            "name": "symbols",
            "location": 386,
            "return": [
                "str",
                "Callable",
                "bool",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArraySchema.__init__": {
            "name": "__init__",
            "location": 396,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "Dict",
                    "Tuple[List[str],Optional[Any],Optional[Any]]",
                    "bool",
                    "None",
                    "Tuple[Union[list[str],Any,None,Any,None]]",
                    "Optional[str]"
                ],
                "names": [
                    "Optional[str]",
                    "str",
                    "Optional[Sequence[Any]]",
                    "Sequence[Any]",
                    "Optional[Mapping[str,Any]]",
                    "List",
                    "Mapping",
                    "Optional[List[str]]",
                    "List[str]",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]"
                ],
                "other_props": [
                    "bool",
                    "str",
                    "None"
                ]
            }
        },
        "ArraySchema.items": {
            "name": "items",
            "location": 420,
            "return": [
                "Tuple[float, float]",
                "bool",
                "Tuple[bool, bool, bool]",
                "Optional[Any]",
                "T",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnionSchema.__init__": {
            "name": "__init__",
            "location": 429,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schemas": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "names": [
                    "List[str]",
                    "Optional[List[str]]",
                    "str",
                    "Dict",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "List"
                ]
            }
        },
        "UnionSchema.schemas": {
            "name": "schemas",
            "location": 471,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecordSchema.make_field_objects": {
            "name": "make_field_objects",
            "location": 477,
            "return": [
                "List[Field]"
            ],
            "arguments": {
                "field_data": [
                    "Dict[str,Any]",
                    "bool",
                    "str",
                    "float",
                    "Optional[Dict[str,Any]]",
                    "Iterable[Tuple[Hashable,Any]]",
                    "int"
                ],
                "names": [
                    "str",
                    "bool"
                ]
            }
        },
        "RecordSchema.__init__": {
            "name": "__init__",
            "location": 512,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "Optional[Sequence[Any]]",
                    "Sequence[Any]",
                    "Optional[Mapping[str,Any]]",
                    "None",
                    "Mapping"
                ],
                "namespace": [
                    "str",
                    "bool",
                    "Optional[Sequence[Any]]",
                    "Sequence[Any]",
                    "Optional[Mapping[str,Any]]",
                    "None",
                    "Mapping"
                ],
                "fields": [
                    "str",
                    "List[str]",
                    "Sequence[Any]",
                    "Sequence[str]",
                    "Mapping[str,Any]",
                    "Mapping"
                ],
                "names": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "schema_type": [
                    "Text",
                    "str",
                    "bool"
                ],
                "doc": [
                    "None",
                    "Optional[int]",
                    "int",
                    "bool",
                    "Callable",
                    "Any",
                    "Optional[Any]",
                    "List[Any]",
                    "Optional[List[Any]]",
                    "Optional[bool]"
                ],
                "other_props": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "RecordSchema.fields": {
            "name": "fields",
            "location": 547,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Name.__init__.validate": {
            "name": "validate",
            "location": 143,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "val": [
                    "str",
                    "Union[int, str]"
                ],
                "name": [
                    "str"
                ]
            }
        }
    },
    "schema_salad-main/schema_salad/avro/__init__.py": {},
    "schema_salad-main/schema_salad/tests/matcher.py": {
        "StripYAMLComments": {
            "name": "StripYAMLComments",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "yml": [
                    "bool",
                    "str",
                    "float",
                    "Sequence[int]",
                    "int"
                ]
            }
        },
        "JsonDiffMatcher.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected": [
                    "str",
                    "bool",
                    "None",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "JsonDiffMatcher.__eq__": {
            "name": "__eq__",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "actual": [
                    "str",
                    "float",
                    "bytes",
                    "Callable"
                ]
            }
        }
    },
    "schema_salad-main/schema_salad/tests/test_avro_names.py": {
        "test_avro_loading": {
            "name": "test_avro_loading",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "schema_salad-main/schema_salad/tests/test_cg.py": {
        "test_load": {
            "name": "test_load",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_err": {
            "name": "test_err",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_include": {
            "name": "test_include",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import": {
            "name": "test_import",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import2": {
            "name": "test_import2",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_err2": {
            "name": "test_err2",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_idmap": {
            "name": "test_idmap",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_idmap2": {
            "name": "test_idmap2",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load_pt": {
            "name": "test_load_pt",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_shortname": {
            "name": "test_shortname",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "metaschema_pre": {
            "name": "metaschema_pre",
            "location": 191,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_load_metaschema": {
            "name": "test_load_metaschema",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "metaschema_pre": [
                    "int",
                    "float",
                    "Tuple[float,float,float,float,float]",
                    "Tuple[Union[float,float,float,float,float]]"
                ]
            }
        },
        "test_load_by_yaml_metaschema": {
            "name": "test_load_by_yaml_metaschema",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "metaschema_pre": [
                    "int",
                    "float",
                    "Tuple[float,float,float,float,float]",
                    "Tuple[Union[float,float,float,float,float]]"
                ]
            }
        },
        "test_load_cwlschema": {
            "name": "test_load_cwlschema",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "schema_salad-main/schema_salad/tests/test_cli_args.py": {
        "captured_output": {
            "name": "captured_output",
            "location": 12,
            "return": [
                "Iterator[Tuple[io.StringIO,io.StringIO]]",
                "Generator[tuple[Union[StringIO,StringIO]]]"
            ],
            "arguments": {}
        },
        "test_version": {
            "name": "test_version",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_empty_input": {
            "name": "test_empty_input",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "schema_salad-main/schema_salad/tests/test_cwl11.py": {
        "cwl_v1_2_schema": {
            "name": "cwl_v1_2_schema",
            "location": 29,
            "return": [
                "Generator[SchemaType,None,None]",
                "Generator"
            ],
            "arguments": {
                "tmp_path_factory": [
                    "str"
                ]
            }
        },
        "load_cwl": {
            "name": "load_cwl",
            "location": 44,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "cwl_v1_2_schema": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "src": [
                    "str",
                    "int"
                ]
            }
        },
        "test_secondaryFiles": {
            "name": "test_secondaryFiles",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "cwl_v1_2_schema": [
                    "Callable",
                    "str",
                    "Optional[Callable]",
                    "None"
                ]
            }
        },
        "test_outputBinding": {
            "name": "test_outputBinding",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "cwl_v1_2_schema": [
                    "Callable"
                ]
            }
        },
        "test_yaml_tab_error": {
            "name": "test_yaml_tab_error",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "cwl_v1_2_schema": [
                    "Callable"
                ]
            }
        }
    },
    "schema_salad-main/schema_salad/tests/test_dotnet_codegen.py": {
        "test_cwl_gen": {
            "name": "test_cwl_gen",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "bool",
                    "pathlib.Path",
                    "pathlib.PosixPath"
                ]
            }
        },
        "test_meta_schema_gen": {
            "name": "test_meta_schema_gen",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "pathlib.Path"
                ]
            }
        },
        "test_class_field": {
            "name": "test_class_field",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "pathlib.Path"
                ]
            }
        },
        "get_data_uri": {
            "name": "get_data_uri",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "resource_path": [
                    "str",
                    "deque[str]",
                    "Deque"
                ]
            }
        },
        "dotnet_codegen": {
            "name": "dotnet_codegen",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "file_uri": [
                    "str",
                    "pathlib2.Path",
                    "lib.Path",
                    "Path"
                ],
                "target": [
                    "str",
                    "Dict[str,Any]"
                ],
                "examples": [
                    "str",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        }
    },
    "schema_salad-main/schema_salad/tests/test_errors.py": {
        "test_errors": {
            "name": "test_errors",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_error_message1": {
            "name": "test_error_message1",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_error_message2": {
            "name": "test_error_message2",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_error_message3": {
            "name": "test_error_message3",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_error_message4": {
            "name": "test_error_message4",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_error_message5": {
            "name": "test_error_message5",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_error_message7": {
            "name": "test_error_message7",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_error_message8": {
            "name": "test_error_message8",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_error_message9": {
            "name": "test_error_message9",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_error_message10": {
            "name": "test_error_message10",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_error_message11": {
            "name": "test_error_message11",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_error_message15": {
            "name": "test_error_message15",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_errors_previously_defined_dict_key": {
            "name": "test_errors_previously_defined_dict_key",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bad_schema": {
            "name": "test_bad_schema",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bad_schema2": {
            "name": "test_bad_schema2",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "schema_salad-main/schema_salad/tests/test_examples.py": {
        "test_schemas": {
            "name": "test_schemas",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_self_validate": {
            "name": "test_self_validate",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_print_rdf": {
            "name": "test_print_rdf",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "capfdbinary": [
                    "str",
                    "float"
                ]
            }
        },
        "test_print_pre_schema": {
            "name": "test_print_pre_schema",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "capfdbinary": [
                    "str",
                    "float"
                ]
            }
        },
        "test_print_pre": {
            "name": "test_print_pre",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "capfdbinary": [
                    "str",
                    "float"
                ]
            }
        },
        "test_print_schema_index": {
            "name": "test_print_schema_index",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "capfdbinary": [
                    "str",
                    "float"
                ]
            }
        },
        "test_print_index": {
            "name": "test_print_index",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "capfdbinary": [
                    "str",
                    "float"
                ]
            }
        },
        "test_print_schema_metadata": {
            "name": "test_print_schema_metadata",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "capfdbinary": [
                    "str",
                    "float"
                ]
            }
        },
        "test_print_metadata": {
            "name": "test_print_metadata",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "capfdbinary": [
                    "str",
                    "float"
                ]
            }
        },
        "test_schema_salad_doc_oneline_doc": {
            "name": "test_schema_salad_doc_oneline_doc",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_avro_regression": {
            "name": "test_avro_regression",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_jsonld_ctx": {
            "name": "test_jsonld_ctx",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_idmap": {
            "name": "test_idmap",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_scoped_ref": {
            "name": "test_scoped_ref",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_examples": {
            "name": "test_examples",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_yaml_float_test": {
            "name": "test_yaml_float_test",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_typedsl_ref": {
            "name": "test_typedsl_ref",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_secondaryFile_dsl_ref": {
            "name": "test_secondaryFile_dsl_ref",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_scoped_id": {
            "name": "test_scoped_id",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_rdf_datetime": {
            "name": "test_rdf_datetime",
            "location": 406,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_yaml_datetime": {
            "name": "test_yaml_datetime",
            "location": 437,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_subscoped_id": {
            "name": "test_subscoped_id",
            "location": 452,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_mixin": {
            "name": "test_mixin",
            "location": 469,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fragment": {
            "name": "test_fragment",
            "location": 488,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_file_uri": {
            "name": "test_file_uri",
            "location": 497,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sourceline": {
            "name": "test_sourceline",
            "location": 515,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cmap": {
            "name": "test_cmap",
            "location": 533,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_blank_node_id": {
            "name": "test_blank_node_id",
            "location": 539,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_use_Any": {
            "name": "test_can_use_Any",
            "location": 554,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_nullable_links": {
            "name": "test_nullable_links",
            "location": 566,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "schema_salad-main/schema_salad/tests/test_fetch.py": {
        "test_fetcher": {
            "name": "test_fetcher",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cache": {
            "name": "test_cache",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "testFetcher.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cache": [
                    "None",
                    "bool",
                    "Optional[requests.sessions.Session]",
                    "str",
                    "schema_salad.utils.CacheType",
                    "Optional[SparkSession]"
                ],
                "session": [
                    "None",
                    "bool",
                    "Optional[requests.sessions.Session]",
                    "str",
                    "schema_salad.utils.CacheType",
                    "Optional[SparkSession]"
                ]
            }
        },
        "testFetcher.fetch_text": {
            "name": "fetch_text",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "List[Tuple[int,int]]",
                    "Set[str]"
                ],
                "content_types": [
                    "bool",
                    "str",
                    "None"
                ]
            }
        },
        "testFetcher.check_exists": {
            "name": "check_exists",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "float",
                    "List[Tuple[int,int]]"
                ]
            }
        },
        "testFetcher.urljoin": {
            "name": "urljoin",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "base": [
                    "str",
                    "List",
                    "List[str]",
                    "bool",
                    "int"
                ],
                "url": [
                    "str",
                    "Callable",
                    "bool",
                    "List[Dict[str,Any]]",
                    "List[str]",
                    "Union[str,List[str]]"
                ]
            }
        },
        "CWLTestFetcher.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cache": [
                    "None",
                    "bool",
                    "Optional[requests.sessions.Session]",
                    "str",
                    "schema_salad.utils.CacheType",
                    "Optional[SparkSession]"
                ],
                "session": [
                    "None",
                    "bool",
                    "Optional[requests.sessions.Session]",
                    "str",
                    "schema_salad.utils.CacheType",
                    "Optional[SparkSession]"
                ]
            }
        },
        "CWLTestFetcher.fetch_text": {
            "name": "fetch_text",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "content_types": [
                    "bool",
                    "str",
                    "None"
                ]
            }
        },
        "CWLTestFetcher.check_exists": {
            "name": "check_exists",
            "location": 65,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "Dict[str,Union[str,int]]",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "CWLTestFetcher.urljoin": {
            "name": "urljoin",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "base": [
                    "str",
                    "List",
                    "List[str]",
                    "bool",
                    "int"
                ],
                "url": [
                    "str",
                    "Callable",
                    "bool",
                    "List[Dict[str,Any]]",
                    "List[str]",
                    "Union[str,List[str]]"
                ]
            }
        }
    },
    "schema_salad-main/schema_salad/tests/test_fp.py": {
        "test_fp": {
            "name": "test_fp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "schema_salad-main/schema_salad/tests/test_java_codegen.py": {
        "test_cwl_gen": {
            "name": "test_cwl_gen",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "bool",
                    "pathlib.Path",
                    "pathlib.PosixPath"
                ]
            }
        },
        "test_meta_schema_gen": {
            "name": "test_meta_schema_gen",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "pathlib.Path"
                ]
            }
        },
        "java_codegen": {
            "name": "java_codegen",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "file_uri": [
                    "str",
                    "pathlib2.Path",
                    "lib.Path",
                    "Path"
                ],
                "target": [
                    "str",
                    "pathlib.Path"
                ],
                "examples": [
                    "str",
                    "None",
                    "pathlib.Path"
                ]
            }
        }
    },
    "schema_salad-main/schema_salad/tests/test_makedoc.py": {
        "test_schema_salad_inherit_docs": {
            "name": "test_schema_salad_inherit_docs",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "schema_salad-main/schema_salad/tests/test_misc.py": {
        "test_misc": {
            "name": "test_misc",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "schema_salad-main/schema_salad/tests/test_print_oneline.py": {
        "test_print_oneline": {
            "name": "test_print_oneline",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_print_oneline_for_invalid_yaml": {
            "name": "test_print_oneline_for_invalid_yaml",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_print_oneline_for_errors_in_the_same_line": {
            "name": "test_print_oneline_for_errors_in_the_same_line",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_print_oneline_for_errors_in_resolve_ref": {
            "name": "test_print_oneline_for_errors_in_resolve_ref",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_for_invalid_yaml1": {
            "name": "test_for_invalid_yaml1",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_for_invalid_yaml2": {
            "name": "test_for_invalid_yaml2",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "schema_salad-main/schema_salad/tests/test_python_codegen.py": {
        "test_cwl_gen": {
            "name": "test_cwl_gen",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "test_meta_schema_gen": {
            "name": "test_meta_schema_gen",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "test_meta_schema_gen_up_to_date": {
            "name": "test_meta_schema_gen_up_to_date",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "pathlib.Path",
                    "str",
                    "pathlib.PosixPath"
                ]
            }
        },
        "test_meta_schema_gen_no_base": {
            "name": "test_meta_schema_gen_no_base",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "python_codegen": {
            "name": "python_codegen",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "file_uri": [
                    "str",
                    "List[str]"
                ],
                "target": [
                    "str",
                    "Dict",
                    "Dict[str,Any]",
                    "List[str]",
                    "int"
                ],
                "parser_info": [
                    "str",
                    "None",
                    "Dict",
                    "Dict[str,Any]",
                    "List[str]",
                    "int"
                ],
                "package": [
                    "str",
                    "None",
                    "Dict",
                    "Dict[str,Any]",
                    "List[str]",
                    "int"
                ]
            }
        },
        "test_default_parser_info": {
            "name": "test_default_parser_info",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "test_parser_info": {
            "name": "test_parser_info",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "test_use_of_package_for_parser_info": {
            "name": "test_use_of_package_for_parser_info",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "pathlib.Path",
                    "str"
                ]
            }
        }
    },
    "schema_salad-main/schema_salad/tests/test_real_cwl.py": {
        "TestRealWorldCWL.setup_class": {
            "name": "setup_class",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Mapping[str,Any]",
                    "Type",
                    "Mapping"
                ]
            }
        },
        "TestRealWorldCWL.load_cwl": {
            "name": "load_cwl",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "str"
                ]
            }
        },
        "TestRealWorldCWL.test_topmed_single_doc": {
            "name": "test_topmed_single_doc",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRealWorldCWL.test_h3agatk_WES": {
            "name": "test_h3agatk_WES",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRealWorldCWL.test_h3agatk_SNP": {
            "name": "test_h3agatk_SNP",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRealWorldCWL.test_icgc_pancan": {
            "name": "test_icgc_pancan",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "schema_salad-main/schema_salad/tests/test_ref_resolver.py": {
        "is_fs_case_sensitive": {
            "name": "is_fs_case_sensitive",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "tmp_dir_fixture": {
            "name": "tmp_dir_fixture",
            "location": 29,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "request": [
                    "Dict",
                    "_pytesfixtures.FixtureRequest"
                ]
            }
        },
        "test_Loader_initialisation_for_HOME_env_var": {
            "name": "test_Loader_initialisation_for_HOME_env_var",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_dir_fixture": [
                    "str"
                ]
            }
        },
        "test_Loader_initialisation_for_TMP_env_var": {
            "name": "test_Loader_initialisation_for_TMP_env_var",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_dir_fixture": [
                    "str"
                ]
            }
        },
        "test_Loader_initialisation_with_neither_TMP_HOME_set": {
            "name": "test_Loader_initialisation_with_neither_TMP_HOME_set",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_dir_fixture": [
                    "str",
                    "Optional[Callable[[Any],None]]",
                    "Callable[Any,None]",
                    "tests.basilisp.helpers.CompileFn",
                    "None"
                ]
            }
        },
        "test_Loader_initialisation_disable_doc_cache": {
            "name": "test_Loader_initialisation_disable_doc_cache",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_dir_fixture": [
                    "str",
                    "List[str]",
                    "Optional[Callable[[Any],None]]",
                    "Callable[Any,None]",
                    "None"
                ]
            }
        },
        "test_DefaultFetcher_urljoin_win32": {
            "name": "test_DefaultFetcher_urljoin_win32",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_dir_fixture": [
                    "str"
                ]
            }
        },
        "test_DefaultFetcher_urljoin_linux": {
            "name": "test_DefaultFetcher_urljoin_linux",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_dir_fixture": [
                    "str"
                ]
            }
        },
        "test_import_list": {
            "name": "test_import_list",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fetch_inject_id": {
            "name": "test_fetch_inject_id",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_attachments": {
            "name": "test_attachments",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_check_exists_follows_redirects": {
            "name": "test_check_exists_follows_redirects",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "tmp_dir_fixture.teardown": {
            "name": "teardown",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_attachments.aa1": {
            "name": "aa1",
            "location": 233,
            "return": [
                "bool",
                "str",
                "Sequence",
                "int",
                "Hashable",
                "Callable[...,None]"
            ],
            "arguments": {
                "item": [
                    "List[str]"
                ]
            }
        },
        "test_attachments.aa2": {
            "name": "aa2",
            "location": 244,
            "return": [
                "bool",
                "str",
                "Sequence",
                "int",
                "Hashable",
                "Callable[...,None]"
            ],
            "arguments": {
                "item": [
                    "List[str]"
                ]
            }
        },
        "test_fetch_inject_id.lower": {
            "name": "lower",
            "location": 192,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "item": [
                    "str",
                    "List[float]",
                    "os.DirEntry",
                    "bool"
                ]
            }
        }
    },
    "schema_salad-main/schema_salad/tests/test_schema.py": {
        "test_extend_and_specialize_enums": {
            "name": "test_extend_and_specialize_enums",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "Dict[str,P]",
                    "List[str]",
                    "Dict[str,cerulean.Path]",
                    "pathlib.Path"
                ]
            }
        }
    },
    "schema_salad-main/schema_salad/tests/test_schemas_directive.py": {
        "TestSchemasDirective.setup_class": {
            "name": "setup_class",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Mapping[str,Any]",
                    "Type",
                    "Mapping"
                ]
            }
        },
        "TestSchemasDirective.load_cwl": {
            "name": "load_cwl",
            "location": 38,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "str"
                ]
            }
        },
        "TestSchemasDirective.test_dollarsign_schema": {
            "name": "test_dollarsign_schema",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "schema_salad-main/schema_salad/tests/test_subtypes.py": {
        "test_subtypes": {
            "name": "test_subtypes",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "old": [
                    "str"
                ],
                "new": [
                    "str"
                ],
                "result": [
                    "str"
                ]
            }
        },
        "test_avro_loading_subtype": {
            "name": "test_avro_loading_subtype",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_avro_loading_subtype_bad": {
            "name": "test_avro_loading_subtype_bad",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "schema_salad-main/schema_salad/tests/test_typescript_codegen.py": {
        "test_cwl_gen": {
            "name": "test_cwl_gen",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "bool",
                    "pathlib.Path",
                    "pathlib.PosixPath"
                ]
            }
        },
        "test_meta_schema_gen": {
            "name": "test_meta_schema_gen",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "pathlib.Path"
                ]
            }
        },
        "test_class_field": {
            "name": "test_class_field",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "pathlib.Path"
                ]
            }
        },
        "get_data_uri": {
            "name": "get_data_uri",
            "location": 78,
            "return": [
                "str"
            ],
            "arguments": {
                "resource_path": [
                    "str",
                    "deque[str]",
                    "Deque"
                ]
            }
        },
        "typescript_codegen": {
            "name": "typescript_codegen",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "file_uri": [
                    "str",
                    "pathlib2.Path",
                    "lib.Path",
                    "Path"
                ],
                "target": [
                    "str",
                    "pathlib.Path"
                ],
                "examples": [
                    "str",
                    "None",
                    "pathlib.Path"
                ]
            }
        }
    },
    "schema_salad-main/schema_salad/tests/util.py": {
        "get_data": {
            "name": "get_data",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "get_data_uri": {
            "name": "get_data_uri",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "resource_path": [
                    "str",
                    "deque[str]",
                    "Deque"
                ]
            }
        }
    },
    "schema_salad-main/schema_salad/tests/__init__.py": {},
    "schema_salad-main/typeshed/urllib/__init__.py": {}
}
{
    "scheme-jit-develop/bytecode.py": {
        "get_value": {
            "name": "get_value",
            "location": 19,
            "return": [
                "str",
                "bool",
                "List",
                "Dict",
                "Dict[str,Any]",
                "Var"
            ],
            "arguments": {
                "values": [
                    "str",
                    "float",
                    "bool",
                    "Optional[Any]"
                ],
                "param": [
                    "str",
                    "List",
                    "Dict",
                    "Dict[str,Any]",
                    "bool"
                ]
            }
        },
        "TypeMap.__getitem__": {
            "name": "__getitem__",
            "location": 29,
            "return": [
                "Set[str]",
                "Dict[str, str]",
                "Dict[str, Any]",
                "Dict[str, List[Callable]]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bool",
                    "Iterator",
                    "Iterator[str]",
                    "int"
                ]
            }
        },
        "TypeMap.__setitem__": {
            "name": "__setitem__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "VT",
                    "KT"
                ],
                "value": [
                    "str",
                    "VT",
                    "KT"
                ]
            }
        },
        "TypeMap.__repr__": {
            "name": "__repr__",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeMap.join": {
            "name": "join",
            "location": 42,
            "return": [
                "TypeMap"
            ],
            "arguments": {
                "self": [
                    "_TTypeMap@@TypeMap@@"
                ],
                "other": [
                    "Type",
                    "Sequence[Tuple[str,str]]",
                    "str",
                    "Sequence[tuple[Union[str,str]]]",
                    "float",
                    "MutableMapping[str,Any]",
                    "MutableMapping"
                ]
            }
        },
        "TypeMap.__copy__": {
            "name": "__copy__",
            "location": 49,
            "return": [
                "TypeMap"
            ],
            "arguments": {
                "self": [
                    "_TTypeMap@@TypeMap@@"
                ]
            }
        },
        "ValueMap.__getitem__": {
            "name": "__getitem__",
            "location": 57,
            "return": [
                "None",
                "int",
                "str",
                "List[str]",
                "Optional[int]",
                "Dict[str,str]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "List[Optional[Any]]",
                    "Optional[List[str]]",
                    "List[str]",
                    "KT",
                    "None"
                ]
            }
        },
        "ValueMap.__setitem__": {
            "name": "__setitem__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "None",
                    "Optional[sexp.Value]",
                    "str",
                    "int",
                    "Optional[int]",
                    "Callable",
                    "Optional[str]",
                    "Dict",
                    "Optional[dict]"
                ]
            }
        },
        "ValueMap.__repr__": {
            "name": "__repr__",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValueMap.join": {
            "name": "join",
            "location": 73,
            "return": [
                "ValueMap"
            ],
            "arguments": {
                "self": [
                    "_TValueMap@@ValueMap@@"
                ],
                "other": [
                    "Dict",
                    "AbstractSet",
                    "Callable"
                ]
            }
        },
        "ValueMap.get_param": {
            "name": "get_param",
            "location": 81,
            "return": [
                "str",
                "Optional[int]",
                "int",
                "Dict[str,int]",
                "Exception",
                "Set[str]",
                "Final",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int"
                ]
            }
        },
        "ValueMap.__copy__": {
            "name": "__copy__",
            "location": 90,
            "return": [
                "ValueMap"
            ],
            "arguments": {
                "self": [
                    "_TValueMap@@ValueMap@@"
                ]
            }
        },
        "Parameter.lookup_self": {
            "name": "lookup_self",
            "location": 96,
            "return": [
                "sexp.Value",
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "Dict[Var,sexp.Value]",
                    "bool"
                ]
            }
        },
        "Parameter.lookup_self_type": {
            "name": "lookup_self_type",
            "location": 100,
            "return": [
                "scheme_types.SchemeObjectType",
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "Dict[Var,scheme_types.SchemeObjectType]"
                ]
            }
        },
        "Parameter.freshen": {
            "name": "freshen",
            "location": 105,
            "return": [
                "Parameter",
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Inst.run": {
            "name": "run",
            "location": 111,
            "return": [
                "Optional[BB]",
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "Dict[Var,scheme_types.SchemeObjectType]"
                ]
            }
        },
        "Inst.run_abstract": {
            "name": "run_abstract",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [],
                "types": [],
                "values": []
            }
        },
        "Inst.successors": {
            "name": "successors",
            "location": 120,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Inst.freshen": {
            "name": "freshen",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Inst.constant_fold": {
            "name": "constant_fold",
            "location": 128,
            "return": [
                "Inst",
                "None"
            ],
            "arguments": {
                "self": [],
                "types": [
                    "Optional[BaseException]",
                    "BaseException",
                    "None"
                ],
                "values": [
                    "Optional[BaseException]",
                    "BaseException",
                    "None"
                ]
            }
        },
        "Inst.copy_prop": {
            "name": "copy_prop",
            "location": 132,
            "return": [
                "Inst",
                "None"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "int",
                    "complex",
                    "Tuple[str,int]",
                    "List",
                    "Tuple[Union[str,int]]"
                ]
            }
        },
        "Inst.dests": {
            "name": "dests",
            "location": 136,
            "return": [
                "List[Var]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Inst.params": {
            "name": "params",
            "location": 140,
            "return": [
                "List[Parameter]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Inst.pure": {
            "name": "pure",
            "location": 144,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BB.successors": {
            "name": "successors",
            "location": 151,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BB.format_stats": {
            "name": "format_stats",
            "location": 154,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "stats": [
                    "bool",
                    "float",
                    "List[tuple[Union[int,str]]]",
                    "str",
                    "List[Tuple[int,str]]",
                    "int"
                ]
            }
        },
        "Var.lookup_self": {
            "name": "lookup_self",
            "location": 162,
            "return": [
                "str",
                "int",
                "bool",
                "List[str]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "str",
                    "Type"
                ]
            }
        },
        "Var.lookup_self_type": {
            "name": "lookup_self_type",
            "location": 165,
            "return": [
                "scheme_types.SchemeObjectType",
                "sexp.Value",
                "str",
                "Dict[str, str]",
                "list",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "T",
                    "bool"
                ]
            }
        },
        "Var.__str__": {
            "name": "__str__",
            "location": 169,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Var.freshen": {
            "name": "freshen",
            "location": 172,
            "return": [
                "Var"
            ],
            "arguments": {
                "self": [
                    "_TVar@@Var@@"
                ],
                "prefix": [
                    "str",
                    "Callable[[T],None]",
                    "Callable[T,None]"
                ]
            }
        },
        "NumLit.lookup_self": {
            "name": "lookup_self",
            "location": 180,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "Dict[Var,sexp.Value]",
                    "bool"
                ]
            }
        },
        "NumLit.lookup_self_type": {
            "name": "lookup_self_type",
            "location": 183,
            "return": [
                "scheme_types.SchemeNumType"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "Dict[Var,scheme_types.SchemeObjectType]"
                ]
            }
        },
        "NumLit.__str__": {
            "name": "__str__",
            "location": 187,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NumLit.freshen": {
            "name": "freshen",
            "location": 190,
            "return": [
                "NumLit"
            ],
            "arguments": {
                "self": [
                    "_TNumLit@@NumLit@@"
                ],
                "prefix": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "SymLit.lookup_self": {
            "name": "lookup_self",
            "location": 198,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "Dict[Var,sexp.Value]",
                    "bool"
                ]
            }
        },
        "SymLit.lookup_self_type": {
            "name": "lookup_self_type",
            "location": 201,
            "return": [
                "scheme_types.SchemeSymType"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "Dict[Var,scheme_types.SchemeObjectType]"
                ]
            }
        },
        "SymLit.__str__": {
            "name": "__str__",
            "location": 205,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SymLit.freshen": {
            "name": "freshen",
            "location": 208,
            "return": [
                "SymLit"
            ],
            "arguments": {
                "self": [
                    "_TSymLit@@SymLit@@"
                ],
                "prefix": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "BoolLit.lookup_self": {
            "name": "lookup_self",
            "location": 216,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "Dict[Var,sexp.Value]",
                    "bool"
                ]
            }
        },
        "BoolLit.lookup_self_type": {
            "name": "lookup_self_type",
            "location": 219,
            "return": [
                "scheme_types.SchemeBoolType"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "Dict[Var,scheme_types.SchemeObjectType]"
                ]
            }
        },
        "BoolLit.__str__": {
            "name": "__str__",
            "location": 223,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoolLit.freshen": {
            "name": "freshen",
            "location": 226,
            "return": [
                "BoolLit"
            ],
            "arguments": {
                "self": [
                    "_TBoolLit@@BoolLit@@"
                ],
                "prefix": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "EvalEnv.__init__": {
            "name": "__init__",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "local_env": [
                    "Optional[Tuple[Any]]",
                    "None",
                    "Dict",
                    "Optional[Union[AbstractSetIntStr,MappingIntStrAny]]",
                    "bool",
                    "Tuple[Any]",
                    "Optional[Any]",
                    "Any",
                    "Optional[str]",
                    "str"
                ],
                "global_env": [
                    "Optional[Tuple[Any]]",
                    "None",
                    "Dict",
                    "Optional[Union[AbstractSetIntStr,MappingIntStrAny]]",
                    "bool",
                    "Tuple[Any]",
                    "Optional[Any]",
                    "Any",
                    "Optional[str]",
                    "str"
                ],
                "optimize_tail_calls": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "int",
                    "Dict"
                ],
                "jit": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "int",
                    "Dict"
                ],
                "bytecode_jit": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "int",
                    "Dict"
                ],
                "print_specializations": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "int",
                    "Dict"
                ],
                "print_optimizations": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "int",
                    "Dict"
                ],
                "inline_threshold": [
                    "int",
                    "str",
                    "bool",
                    "Optional[str]",
                    "Dict"
                ],
                "specialization_threshold": [
                    "int",
                    "str",
                    "bool",
                    "Optional[str]",
                    "Dict"
                ]
            }
        },
        "EvalEnv.new_local": {
            "name": "new_local",
            "location": 275,
            "return": [
                "EvalEnv"
            ],
            "arguments": {
                "self": [
                    "_TEvalEnv@@EvalEnv@@"
                ]
            }
        },
        "EvalEnv.__getitem__": {
            "name": "__getitem__",
            "location": 288,
            "return": [
                "str",
                "bytes",
                "Tuple[bytes, bytes, bytes]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int"
                ]
            }
        },
        "EvalEnv.__setitem__": {
            "name": "__setitem__",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "T"
                ],
                "value": [
                    "str",
                    "T"
                ]
            }
        },
        "EvalEnv.__contains__": {
            "name": "__contains__",
            "location": 306,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "EvalEnv.__repr__": {
            "name": "__repr__",
            "location": 325,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinopInst.run": {
            "name": "run",
            "location": 348,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "dict"
                ]
            }
        },
        "BinopInst.run_abstract": {
            "name": "run_abstract",
            "location": 377,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [],
                "types": [],
                "values": []
            }
        },
        "BinopInst.__str__": {
            "name": "__str__",
            "location": 436,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinopInst.freshen": {
            "name": "freshen",
            "location": 439,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "Dict",
                    "str",
                    "Type[Any]",
                    "Type"
                ]
            }
        },
        "BinopInst.constant_fold": {
            "name": "constant_fold",
            "location": 444,
            "return": [
                "BinopInst"
            ],
            "arguments": {
                "self": [
                    "_TBinopInst@@BinopInst@@"
                ],
                "types": [
                    "Optional[BaseException]",
                    "BaseException",
                    "None"
                ],
                "values": [
                    "Type",
                    "Optional[Type[BaseException]]",
                    "Optional[BaseException]",
                    "str",
                    "None",
                    "BaseException"
                ]
            }
        },
        "BinopInst.copy_prop": {
            "name": "copy_prop",
            "location": 449,
            "return": [
                "BinopInst"
            ],
            "arguments": {
                "self": [
                    "_TBinopInst@@BinopInst@@"
                ],
                "values": [
                    "Union[int,float,str]",
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "BinopInst.dests": {
            "name": "dests",
            "location": 454,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinopInst.params": {
            "name": "params",
            "location": 457,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinopInst.pure": {
            "name": "pure",
            "location": 460,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeofInst.run": {
            "name": "run",
            "location": 469,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "str"
                ]
            }
        },
        "TypeofInst.run_abstract": {
            "name": "run_abstract",
            "location": 472,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [],
                "types": [],
                "values": [
                    "Type"
                ]
            }
        },
        "TypeofInst.__str__": {
            "name": "__str__",
            "location": 483,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeofInst.freshen": {
            "name": "freshen",
            "location": 486,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str",
                    "List[str]",
                    "int",
                    "Optional[Union[str,Any]]",
                    "Any",
                    "None"
                ]
            }
        },
        "TypeofInst.constant_fold": {
            "name": "constant_fold",
            "location": 490,
            "return": [
                "TypeofInst"
            ],
            "arguments": {
                "self": [
                    "_TTypeofInst@@TypeofInst@@"
                ],
                "types": [
                    "Optional[BaseException]",
                    "BaseException",
                    "None"
                ],
                "values": [
                    "BaseException",
                    "Type[BaseException]",
                    "Type"
                ]
            }
        },
        "TypeofInst.copy_prop": {
            "name": "copy_prop",
            "location": 493,
            "return": [
                "TypeofInst"
            ],
            "arguments": {
                "self": [
                    "_TTypeofInst@@TypeofInst@@"
                ],
                "values": []
            }
        },
        "TypeofInst.dests": {
            "name": "dests",
            "location": 496,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeofInst.params": {
            "name": "params",
            "location": 499,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeofInst.pure": {
            "name": "pure",
            "location": 502,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CopyInst.run": {
            "name": "run",
            "location": 511,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": []
            }
        },
        "CopyInst.run_abstract": {
            "name": "run_abstract",
            "location": 514,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [],
                "types": [],
                "values": [
                    "Type",
                    "BaseException",
                    "Type[BaseException]"
                ]
            }
        },
        "CopyInst.__str__": {
            "name": "__str__",
            "location": 520,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CopyInst.freshen": {
            "name": "freshen",
            "location": 523,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str",
                    "List[str]",
                    "int",
                    "Optional[Union[str,Any]]",
                    "Any",
                    "None"
                ]
            }
        },
        "CopyInst.constant_fold": {
            "name": "constant_fold",
            "location": 527,
            "return": [
                "CopyInst"
            ],
            "arguments": {
                "self": [
                    "_TCopyInst@@CopyInst@@"
                ],
                "types": [
                    "Optional[BaseException]",
                    "BaseException",
                    "None"
                ],
                "values": [
                    "BaseException",
                    "Type[BaseException]",
                    "Type"
                ]
            }
        },
        "CopyInst.copy_prop": {
            "name": "copy_prop",
            "location": 530,
            "return": [
                "CopyInst"
            ],
            "arguments": {
                "self": [
                    "_TCopyInst@@CopyInst@@"
                ],
                "values": []
            }
        },
        "CopyInst.dests": {
            "name": "dests",
            "location": 533,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "CopyInst.params": {
            "name": "params",
            "location": 536,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "CopyInst.pure": {
            "name": "pure",
            "location": 539,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LookupInst.run": {
            "name": "run",
            "location": 548,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": []
            }
        },
        "LookupInst.run_abstract": {
            "name": "run_abstract",
            "location": 555,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "sexp.SFunction"
                ],
                "types": [],
                "values": []
            }
        },
        "LookupInst.__str__": {
            "name": "__str__",
            "location": 570,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LookupInst.freshen": {
            "name": "freshen",
            "location": 573,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str",
                    "Callable"
                ]
            }
        },
        "LookupInst.constant_fold": {
            "name": "constant_fold",
            "location": 577,
            "return": [
                "LookupInst"
            ],
            "arguments": {
                "self": [
                    "_TLookupInst@@LookupInst@@"
                ],
                "types": [
                    "Optional[BaseException]",
                    "BaseException",
                    "None"
                ],
                "values": [
                    "Optional[BaseException]",
                    "BaseException",
                    "int",
                    "Type",
                    "None",
                    "Optional[Type[BaseException]]"
                ]
            }
        },
        "LookupInst.copy_prop": {
            "name": "copy_prop",
            "location": 580,
            "return": [
                "LookupInst"
            ],
            "arguments": {
                "self": [
                    "_TLookupInst@@LookupInst@@"
                ],
                "values": [
                    "float",
                    "Callable[,None]",
                    "Optional[Dict]",
                    "Dict",
                    "None"
                ]
            }
        },
        "LookupInst.dests": {
            "name": "dests",
            "location": 583,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "LookupInst.params": {
            "name": "params",
            "location": 586,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "LookupInst.pure": {
            "name": "pure",
            "location": 589,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllocInst.run": {
            "name": "run",
            "location": 598,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "Optional[\"TreeNode\"]"
                ]
            }
        },
        "AllocInst.run_abstract": {
            "name": "run_abstract",
            "location": 603,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [],
                "types": [],
                "values": []
            }
        },
        "AllocInst.__str__": {
            "name": "__str__",
            "location": 617,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllocInst.freshen": {
            "name": "freshen",
            "location": 620,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str",
                    "float"
                ]
            }
        },
        "AllocInst.constant_fold": {
            "name": "constant_fold",
            "location": 624,
            "return": [
                "AllocInst"
            ],
            "arguments": {
                "self": [
                    "_TAllocInst@@AllocInst@@"
                ],
                "types": [
                    "Optional[BaseException]",
                    "BaseException",
                    "None"
                ],
                "values": [
                    "Type[BaseException]",
                    "BaseException",
                    "Type"
                ]
            }
        },
        "AllocInst.copy_prop": {
            "name": "copy_prop",
            "location": 627,
            "return": [
                "AllocInst"
            ],
            "arguments": {
                "self": [
                    "_TAllocInst@@AllocInst@@"
                ],
                "values": [
                    "float",
                    "bool",
                    "Callable[,None]",
                    "str",
                    "int"
                ]
            }
        },
        "AllocInst.dests": {
            "name": "dests",
            "location": 630,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllocInst.params": {
            "name": "params",
            "location": 633,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllocInst.pure": {
            "name": "pure",
            "location": 636,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoadInst.run": {
            "name": "run",
            "location": 646,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "Dict"
                ]
            }
        },
        "LoadInst.run_abstract": {
            "name": "run_abstract",
            "location": 655,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [],
                "types": [],
                "values": []
            }
        },
        "LoadInst.__str__": {
            "name": "__str__",
            "location": 674,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoadInst.freshen": {
            "name": "freshen",
            "location": 677,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "Dict",
                    "str",
                    "Type[Any]",
                    "Type"
                ]
            }
        },
        "LoadInst.constant_fold": {
            "name": "constant_fold",
            "location": 682,
            "return": [
                "LoadInst"
            ],
            "arguments": {
                "self": [
                    "_TLoadInst@@LoadInst@@"
                ],
                "types": [
                    "Optional[BaseException]",
                    "BaseException",
                    "None"
                ],
                "values": [
                    "BaseException",
                    "Type[BaseException]",
                    "Type"
                ]
            }
        },
        "LoadInst.copy_prop": {
            "name": "copy_prop",
            "location": 687,
            "return": [
                "LoadInst"
            ],
            "arguments": {
                "self": [
                    "_TLoadInst@@LoadInst@@"
                ],
                "values": [
                    "int",
                    "Union[int,float,str]",
                    "float",
                    "bool",
                    "str"
                ]
            }
        },
        "LoadInst.dests": {
            "name": "dests",
            "location": 692,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoadInst.params": {
            "name": "params",
            "location": 695,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoadInst.pure": {
            "name": "pure",
            "location": 698,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoreInst.run": {
            "name": "run",
            "location": 708,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "Dict"
                ]
            }
        },
        "StoreInst.run_abstract": {
            "name": "run_abstract",
            "location": 715,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [],
                "types": [],
                "values": []
            }
        },
        "StoreInst.__str__": {
            "name": "__str__",
            "location": 734,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoreInst.freshen": {
            "name": "freshen",
            "location": 737,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str",
                    "List[str]",
                    "Optional[preacher.core.value.Value.Context]",
                    "None"
                ]
            }
        },
        "StoreInst.constant_fold": {
            "name": "constant_fold",
            "location": 742,
            "return": [
                "StoreInst"
            ],
            "arguments": {
                "self": [
                    "_TStoreInst@@StoreInst@@"
                ],
                "types": [
                    "Optional[BaseException]",
                    "BaseException",
                    "None"
                ],
                "values": [
                    "Type[BaseException]",
                    "BaseException",
                    "Type"
                ]
            }
        },
        "StoreInst.copy_prop": {
            "name": "copy_prop",
            "location": 747,
            "return": [
                "StoreInst"
            ],
            "arguments": {
                "self": [
                    "_TStoreInst@@StoreInst@@"
                ],
                "values": [
                    "float",
                    "List[int]",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "StoreInst.dests": {
            "name": "dests",
            "location": 752,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoreInst.params": {
            "name": "params",
            "location": 755,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoreInst.pure": {
            "name": "pure",
            "location": 758,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LengthInst.run": {
            "name": "run",
            "location": 767,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "Dict"
                ]
            }
        },
        "LengthInst.run_abstract": {
            "name": "run_abstract",
            "location": 772,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [],
                "types": [
                    "Callable[...,None]"
                ],
                "values": []
            }
        },
        "LengthInst.__str__": {
            "name": "__str__",
            "location": 787,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LengthInst.freshen": {
            "name": "freshen",
            "location": 790,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str",
                    "List[str]",
                    "Type"
                ]
            }
        },
        "LengthInst.constant_fold": {
            "name": "constant_fold",
            "location": 794,
            "return": [
                "LengthInst"
            ],
            "arguments": {
                "self": [
                    "_TLengthInst@@LengthInst@@"
                ],
                "types": [
                    "Optional[BaseException]",
                    "BaseException",
                    "None"
                ],
                "values": [
                    "Type[BaseException]",
                    "BaseException",
                    "Type"
                ]
            }
        },
        "LengthInst.copy_prop": {
            "name": "copy_prop",
            "location": 797,
            "return": [
                "LengthInst"
            ],
            "arguments": {
                "self": [
                    "_TLengthInst@@LengthInst@@"
                ],
                "values": [
                    "float",
                    "bool",
                    "Callable[,None]",
                    "str",
                    "int"
                ]
            }
        },
        "LengthInst.dests": {
            "name": "dests",
            "location": 800,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "LengthInst.params": {
            "name": "params",
            "location": 803,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "LengthInst.pure": {
            "name": "pure",
            "location": 806,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArityInst.run": {
            "name": "run",
            "location": 815,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "bool"
                ]
            }
        },
        "ArityInst.run_abstract": {
            "name": "run_abstract",
            "location": 820,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [],
                "types": [],
                "values": [
                    "Type[T]",
                    "Type"
                ]
            }
        },
        "ArityInst.__str__": {
            "name": "__str__",
            "location": 833,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArityInst.freshen": {
            "name": "freshen",
            "location": 836,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "ArityInst.constant_fold": {
            "name": "constant_fold",
            "location": 840,
            "return": [
                "ArityInst"
            ],
            "arguments": {
                "self": [
                    "_TArityInst@@ArityInst@@"
                ],
                "types": [
                    "Optional[BaseException]",
                    "BaseException",
                    "None"
                ],
                "values": [
                    "Type[BaseException]",
                    "BaseException",
                    "Type"
                ]
            }
        },
        "ArityInst.copy_prop": {
            "name": "copy_prop",
            "location": 843,
            "return": [
                "ArityInst"
            ],
            "arguments": {
                "self": [
                    "_TArityInst@@ArityInst@@"
                ],
                "values": [
                    "float",
                    "bool",
                    "Callable[,None]",
                    "str",
                    "int"
                ]
            }
        },
        "ArityInst.dests": {
            "name": "dests",
            "location": 846,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArityInst.params": {
            "name": "params",
            "location": 849,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArityInst.pure": {
            "name": "pure",
            "location": 852,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallInst.run": {
            "name": "run",
            "location": 863,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "T"
                ]
            }
        },
        "CallInst.run_call": {
            "name": "run_call",
            "location": 867,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "str"
                ]
            }
        },
        "CallInst.run_abstract": {
            "name": "run_abstract",
            "location": 897,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [],
                "types": [],
                "values": []
            }
        },
        "CallInst._generate_specialization": {
            "name": "_generate_specialization",
            "location": 903,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [],
                "func": [
                    "bool"
                ],
                "func_code": [],
                "type_tuple": [
                    "Optional[List[mypy.types.TypeVarDef]]",
                    "List[T]",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "CallInst._optimize": {
            "name": "_optimize",
            "location": 937,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "Type[T]",
                    "Type"
                ],
                "func": [
                    "sexp.SFunction"
                ],
                "type_tuple": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "CallInst.__str__": {
            "name": "__str__",
            "location": 947,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallInst.freshen": {
            "name": "freshen",
            "location": 955,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str",
                    "bool"
                ]
            }
        },
        "CallInst.constant_fold": {
            "name": "constant_fold",
            "location": 961,
            "return": [
                "CallInst"
            ],
            "arguments": {
                "self": [
                    "_TCallInst@@CallInst@@"
                ],
                "types": [
                    "Optional[BaseException]",
                    "BaseException",
                    "None"
                ],
                "values": [
                    "Type"
                ]
            }
        },
        "CallInst.copy_prop": {
            "name": "copy_prop",
            "location": 977,
            "return": [
                "CallInst"
            ],
            "arguments": {
                "self": [
                    "_TCallInst@@CallInst@@"
                ],
                "values": [
                    "Callable",
                    "bool"
                ]
            }
        },
        "CallInst.dests": {
            "name": "dests",
            "location": 983,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallInst.params": {
            "name": "params",
            "location": 986,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallInst.pure": {
            "name": "pure",
            "location": 989,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "JmpInst.__repr__": {
            "name": "__repr__",
            "location": 997,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "JmpInst.run": {
            "name": "run",
            "location": 1000,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "Dict[Var,scheme_types.SchemeObjectType]"
                ]
            }
        },
        "JmpInst.run_abstract": {
            "name": "run_abstract",
            "location": 1003,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [],
                "types": [],
                "values": []
            }
        },
        "JmpInst.successors": {
            "name": "successors",
            "location": 1008,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "JmpInst.__str__": {
            "name": "__str__",
            "location": 1011,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "JmpInst.freshen": {
            "name": "freshen",
            "location": 1014,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "JmpInst.constant_fold": {
            "name": "constant_fold",
            "location": 1017,
            "return": [
                "JmpInst"
            ],
            "arguments": {
                "self": [
                    "_TJmpInst@@JmpInst@@"
                ],
                "types": [
                    "Optional[BaseException]",
                    "BaseException",
                    "None"
                ],
                "values": [
                    "Optional[BaseException]",
                    "BaseException",
                    "None"
                ]
            }
        },
        "JmpInst.copy_prop": {
            "name": "copy_prop",
            "location": 1020,
            "return": [
                "JmpInst"
            ],
            "arguments": {
                "self": [
                    "_TJmpInst@@JmpInst@@"
                ],
                "values": [
                    "int",
                    "complex",
                    "Tuple[str,int]",
                    "List",
                    "Tuple[Union[str,int]]"
                ]
            }
        },
        "JmpInst.dests": {
            "name": "dests",
            "location": 1023,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JmpInst.params": {
            "name": "params",
            "location": 1026,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JmpInst.pure": {
            "name": "pure",
            "location": 1029,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BrInst.__repr__": {
            "name": "__repr__",
            "location": 1038,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BrInst.run": {
            "name": "run",
            "location": 1041,
            "return": [
                "None",
                "str",
                "Optional[str]",
                "Optional[BaseException]",
                "List"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "bool",
                    "Optional[TreeNode]",
                    "None"
                ]
            }
        },
        "BrInst.run_abstract": {
            "name": "run_abstract",
            "location": 1048,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [],
                "types": [],
                "values": []
            }
        },
        "BrInst.successors": {
            "name": "successors",
            "location": 1053,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "BrInst.__str__": {
            "name": "__str__",
            "location": 1056,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BrInst.freshen": {
            "name": "freshen",
            "location": 1059,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "BrInst.constant_fold": {
            "name": "constant_fold",
            "location": 1062,
            "return": [
                "BrInst"
            ],
            "arguments": {
                "self": [
                    "_TBrInst@@BrInst@@"
                ],
                "types": [
                    "Optional[BaseException]",
                    "BaseException",
                    "None"
                ],
                "values": [
                    "str",
                    "Callable"
                ]
            }
        },
        "BrInst.copy_prop": {
            "name": "copy_prop",
            "location": 1065,
            "return": [
                "BrInst"
            ],
            "arguments": {
                "self": [
                    "_TBrInst@@BrInst@@"
                ],
                "values": [
                    "bool",
                    "float",
                    "int"
                ]
            }
        },
        "BrInst.dests": {
            "name": "dests",
            "location": 1068,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BrInst.params": {
            "name": "params",
            "location": 1071,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "BrInst.pure": {
            "name": "pure",
            "location": 1074,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BrnInst.__repr__": {
            "name": "__repr__",
            "location": 1083,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BrnInst.run": {
            "name": "run",
            "location": 1086,
            "return": [
                "None",
                "str",
                "Optional[str]",
                "Optional[BaseException]",
                "List"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "bool",
                    "Optional[TreeNode]",
                    "None"
                ]
            }
        },
        "BrnInst.run_abstract": {
            "name": "run_abstract",
            "location": 1093,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [],
                "types": [],
                "values": []
            }
        },
        "BrnInst.successors": {
            "name": "successors",
            "location": 1098,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "BrnInst.__str__": {
            "name": "__str__",
            "location": 1101,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BrnInst.freshen": {
            "name": "freshen",
            "location": 1104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "BrnInst.constant_fold": {
            "name": "constant_fold",
            "location": 1107,
            "return": [
                "BrnInst"
            ],
            "arguments": {
                "self": [
                    "_TBrnInst@@BrnInst@@"
                ],
                "types": [
                    "Optional[BaseException]",
                    "BaseException",
                    "None"
                ],
                "values": [
                    "str",
                    "Callable"
                ]
            }
        },
        "BrnInst.copy_prop": {
            "name": "copy_prop",
            "location": 1110,
            "return": [
                "BrnInst"
            ],
            "arguments": {
                "self": [
                    "_TBrnInst@@BrnInst@@"
                ],
                "values": [
                    "bool",
                    "float",
                    "int"
                ]
            }
        },
        "BrnInst.dests": {
            "name": "dests",
            "location": 1113,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BrnInst.params": {
            "name": "params",
            "location": 1116,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "BrnInst.pure": {
            "name": "pure",
            "location": 1119,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReturnInst.run": {
            "name": "run",
            "location": 1127,
            "return": [
                "ReturnBlock"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "Dict[Var,scheme_types.SchemeObjectType]"
                ]
            }
        },
        "ReturnInst.run_abstract": {
            "name": "run_abstract",
            "location": 1130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [],
                "types": [],
                "values": []
            }
        },
        "ReturnInst.__str__": {
            "name": "__str__",
            "location": 1135,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReturnInst.freshen": {
            "name": "freshen",
            "location": 1138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str",
                    "int"
                ]
            }
        },
        "ReturnInst.constant_fold": {
            "name": "constant_fold",
            "location": 1141,
            "return": [
                "ReturnInst"
            ],
            "arguments": {
                "self": [
                    "_TReturnInst@@ReturnInst@@"
                ],
                "types": [
                    "Optional[BaseException]",
                    "BaseException",
                    "None"
                ],
                "values": [
                    "str",
                    "Callable"
                ]
            }
        },
        "ReturnInst.copy_prop": {
            "name": "copy_prop",
            "location": 1144,
            "return": [
                "ReturnInst"
            ],
            "arguments": {
                "self": [
                    "_TReturnInst@@ReturnInst@@"
                ],
                "values": [
                    "bool",
                    "float",
                    "int"
                ]
            }
        },
        "ReturnInst.dests": {
            "name": "dests",
            "location": 1147,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReturnInst.params": {
            "name": "params",
            "location": 1150,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReturnInst.pure": {
            "name": "pure",
            "location": 1153,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrapInst.run": {
            "name": "run",
            "location": 1161,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "Dict[Var,scheme_types.SchemeObjectType]"
                ]
            }
        },
        "TrapInst.run_abstract": {
            "name": "run_abstract",
            "location": 1164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [],
                "types": [],
                "values": []
            }
        },
        "TrapInst.__str__": {
            "name": "__str__",
            "location": 1169,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrapInst.freshen": {
            "name": "freshen",
            "location": 1172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "TrapInst.constant_fold": {
            "name": "constant_fold",
            "location": 1175,
            "return": [
                "TrapInst"
            ],
            "arguments": {
                "self": [
                    "_TTrapInst@@TrapInst@@"
                ],
                "types": [
                    "Optional[BaseException]",
                    "BaseException",
                    "None"
                ],
                "values": [
                    "Optional[BaseException]",
                    "BaseException",
                    "None"
                ]
            }
        },
        "TrapInst.copy_prop": {
            "name": "copy_prop",
            "location": 1178,
            "return": [
                "TrapInst"
            ],
            "arguments": {
                "self": [
                    "_TTrapInst@@TrapInst@@"
                ],
                "values": [
                    "int",
                    "complex",
                    "Tuple[str,int]",
                    "List",
                    "Tuple[Union[str,int]]"
                ]
            }
        },
        "TrapInst.dests": {
            "name": "dests",
            "location": 1181,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrapInst.params": {
            "name": "params",
            "location": 1184,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrapInst.pure": {
            "name": "pure",
            "location": 1187,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TraceInst.run": {
            "name": "run",
            "location": 1195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": []
            }
        },
        "TraceInst.run_abstract": {
            "name": "run_abstract",
            "location": 1198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [],
                "types": [],
                "values": []
            }
        },
        "TraceInst.__str__": {
            "name": "__str__",
            "location": 1203,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TraceInst.freshen": {
            "name": "freshen",
            "location": 1206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "int",
                    "List",
                    "str"
                ]
            }
        },
        "TraceInst.constant_fold": {
            "name": "constant_fold",
            "location": 1209,
            "return": [
                "TraceInst"
            ],
            "arguments": {
                "self": [
                    "_TTraceInst@@TraceInst@@"
                ],
                "types": [
                    "Optional[BaseException]",
                    "BaseException",
                    "None"
                ],
                "values": [
                    "str"
                ]
            }
        },
        "TraceInst.copy_prop": {
            "name": "copy_prop",
            "location": 1212,
            "return": [
                "TraceInst"
            ],
            "arguments": {
                "self": [
                    "_TTraceInst@@TraceInst@@"
                ],
                "values": []
            }
        },
        "TraceInst.dests": {
            "name": "dests",
            "location": 1215,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TraceInst.params": {
            "name": "params",
            "location": 1218,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "TraceInst.pure": {
            "name": "pure",
            "location": 1221,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DisplayInst.run": {
            "name": "run",
            "location": 1229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "bool"
                ]
            }
        },
        "DisplayInst.run_abstract": {
            "name": "run_abstract",
            "location": 1232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [],
                "types": [],
                "values": []
            }
        },
        "DisplayInst.__str__": {
            "name": "__str__",
            "location": 1237,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DisplayInst.freshen": {
            "name": "freshen",
            "location": 1240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "int",
                    "List",
                    "str"
                ]
            }
        },
        "DisplayInst.constant_fold": {
            "name": "constant_fold",
            "location": 1243,
            "return": [
                "DisplayInst"
            ],
            "arguments": {
                "self": [
                    "_TDisplayInst@@DisplayInst@@"
                ],
                "types": [
                    "Optional[BaseException]",
                    "BaseException",
                    "None"
                ],
                "values": [
                    "str"
                ]
            }
        },
        "DisplayInst.copy_prop": {
            "name": "copy_prop",
            "location": 1246,
            "return": [
                "DisplayInst"
            ],
            "arguments": {
                "self": [
                    "_TDisplayInst@@DisplayInst@@"
                ],
                "values": []
            }
        },
        "DisplayInst.dests": {
            "name": "dests",
            "location": 1249,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DisplayInst.params": {
            "name": "params",
            "location": 1252,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "DisplayInst.pure": {
            "name": "pure",
            "location": 1255,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "NewlineInst.run": {
            "name": "run",
            "location": 1261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "Dict[Var,scheme_types.SchemeObjectType]"
                ]
            }
        },
        "NewlineInst.run_abstract": {
            "name": "run_abstract",
            "location": 1264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [],
                "types": [],
                "values": []
            }
        },
        "NewlineInst.__str__": {
            "name": "__str__",
            "location": 1269,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NewlineInst.freshen": {
            "name": "freshen",
            "location": 1272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "NewlineInst.constant_fold": {
            "name": "constant_fold",
            "location": 1275,
            "return": [
                "NewlineInst"
            ],
            "arguments": {
                "self": [
                    "_TNewlineInst@@NewlineInst@@"
                ],
                "types": [
                    "Optional[BaseException]",
                    "BaseException",
                    "None"
                ],
                "values": [
                    "Optional[BaseException]",
                    "BaseException",
                    "None"
                ]
            }
        },
        "NewlineInst.copy_prop": {
            "name": "copy_prop",
            "location": 1278,
            "return": [
                "NewlineInst"
            ],
            "arguments": {
                "self": [
                    "_TNewlineInst@@NewlineInst@@"
                ],
                "values": [
                    "int",
                    "complex",
                    "Tuple[str,int]",
                    "List",
                    "Tuple[Union[str,int]]"
                ]
            }
        },
        "NewlineInst.dests": {
            "name": "dests",
            "location": 1281,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NewlineInst.params": {
            "name": "params",
            "location": 1284,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NewlineInst.pure": {
            "name": "pure",
            "location": 1287,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BreakpointInst.run": {
            "name": "run",
            "location": 1293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "Dict[Var,scheme_types.SchemeObjectType]"
                ]
            }
        },
        "BreakpointInst.run_abstract": {
            "name": "run_abstract",
            "location": 1296,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [],
                "types": [],
                "values": []
            }
        },
        "BreakpointInst.__str__": {
            "name": "__str__",
            "location": 1301,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BreakpointInst.freshen": {
            "name": "freshen",
            "location": 1304,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "BreakpointInst.constant_fold": {
            "name": "constant_fold",
            "location": 1307,
            "return": [
                "BreakpointInst"
            ],
            "arguments": {
                "self": [
                    "_TBreakpointInst@@BreakpointInst@@"
                ],
                "types": [
                    "Optional[BaseException]",
                    "BaseException",
                    "None"
                ],
                "values": [
                    "Optional[BaseException]",
                    "BaseException",
                    "None"
                ]
            }
        },
        "BreakpointInst.copy_prop": {
            "name": "copy_prop",
            "location": 1311,
            "return": [
                "BreakpointInst"
            ],
            "arguments": {
                "self": [
                    "_TBreakpointInst@@BreakpointInst@@"
                ],
                "values": [
                    "int",
                    "complex",
                    "Tuple[str,int]",
                    "List",
                    "Tuple[Union[str,int]]"
                ]
            }
        },
        "BreakpointInst.dests": {
            "name": "dests",
            "location": 1314,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BreakpointInst.params": {
            "name": "params",
            "location": 1317,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BreakpointInst.pure": {
            "name": "pure",
            "location": 1320,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasicBlock.__str__": {
            "name": "__str__",
            "location": 1330,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasicBlock.format_stats": {
            "name": "format_stats",
            "location": 1335,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "stats": [
                    "str"
                ]
            }
        },
        "BasicBlock.add_inst": {
            "name": "add_inst",
            "location": 1344,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inst": [
                    "float",
                    "int"
                ]
            }
        },
        "BasicBlock.run": {
            "name": "run",
            "location": 1347,
            "return": [
                "Generator[(nothing, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "env": []
            }
        },
        "BasicBlock.successors": {
            "name": "successors",
            "location": 1363,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasicBlock.split_after": {
            "name": "split_after",
            "location": 1367,
            "return": [
                "BasicBlock"
            ],
            "arguments": {
                "self": [
                    "_TBasicBlock@@BasicBlock@@"
                ],
                "idx": [
                    "List[str]",
                    "bool",
                    "str",
                    "Dict",
                    "Optional[List[str]]",
                    "Callable"
                ]
            }
        },
        "Function.run": {
            "name": "run",
            "location": 1387,
            "return": [
                "Generator[(nothing, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "Dict",
                    "Optional[TreeNode]",
                    "None"
                ]
            }
        },
        "Function.blocks": {
            "name": "blocks",
            "location": 1399,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Function.__str__": {
            "name": "__str__",
            "location": 1415,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Function.format_stats": {
            "name": "format_stats",
            "location": 1420,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "types": [
                    "None",
                    "str",
                    "Optional[scheme_types.TypeTuple]",
                    "List[str]",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "Callable[[Any],bool]",
                    "int"
                ],
                "stats": [
                    "str",
                    "Dict",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "ResultGenerator.__init__": {
            "name": "__init__",
            "location": 1440,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gen": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "ResultGenerator.__iter__": {
            "name": "__iter__",
            "location": 1444,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResultGenerator.run": {
            "name": "run",
            "location": 1447,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallInst.constant_fold.get_type": {
            "name": "get_type",
            "location": 964,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "List[str]",
                    "str",
                    "dict"
                ]
            }
        }
    },
    "scheme-jit-develop/emit_IR.py": {
        "name_generator": {
            "name": "name_generator",
            "location": 527,
            "return": [
                "Generator[(str, Any, Any)]"
            ],
            "arguments": {
                "prefix": [
                    "Dict[str,Any]",
                    "str",
                    "int",
                    "Iterator",
                    "Container[str]",
                    "Container"
                ]
            }
        },
        "FunctionEmitter.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "global_env": [
                    "int",
                    "Dict",
                    "Dict[int,int]",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "tail_calls": [
                    "int",
                    "None",
                    "Dict",
                    "Dict[int,int]",
                    "str",
                    "Optional[str]"
                ],
                "expr_types": [
                    "Set[str]",
                    "str",
                    "None",
                    "bool"
                ]
            }
        },
        "FunctionEmitter.get_emitted_func": {
            "name": "get_emitted_func",
            "location": 31,
            "return": [
                "List[Tuple[str, str]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionEmitter.visit_SFunction": {
            "name": "visit_SFunction",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "ExpressionEmitter.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent_block": [
                    "bool",
                    "Hashable"
                ],
                "bb_names": [
                    "str",
                    "bool",
                    "Sequence[str]",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ],
                "var_names": [
                    "str",
                    "None",
                    "int",
                    "Optional[str]",
                    "Iterable[str]",
                    "Optional[Iterable[str]]",
                    "List[str]"
                ],
                "local_env": [
                    "Optional[List[str]]",
                    "List[str]",
                    "Union[None,int,str]",
                    "None",
                    "Optional[str]",
                    "int",
                    "str"
                ],
                "global_env": [
                    "Optional[List[str]]",
                    "List[str]",
                    "Union[None,int,str]",
                    "None",
                    "Optional[str]",
                    "int",
                    "str"
                ]
            }
        },
        "ExpressionEmitter.result": {
            "name": "result",
            "location": 107,
            "return": [
                "None",
                "Dict",
                "Dict[str,str]"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "Callable[..., Awaitable]"
                ]
            }
        },
        "ExpressionEmitter.visit_SFunction": {
            "name": "visit_SFunction",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "str",
                    "sexp.SFunction"
                ]
            }
        },
        "ExpressionEmitter.visit_SConditional": {
            "name": "visit_SConditional",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conditional": [
                    "bool"
                ]
            }
        },
        "ExpressionEmitter.visit_SNum": {
            "name": "visit_SNum",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num": [
                    "Type[T]",
                    "Type"
                ]
            }
        },
        "ExpressionEmitter.visit_SBool": {
            "name": "visit_SBool",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sbool": []
            }
        },
        "ExpressionEmitter.visit_SSym": {
            "name": "visit_SSym",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sym": [
                    "Dict[str,Any]",
                    "bytecode.TypeMap",
                    "bytecode.ValueMap"
                ]
            }
        },
        "ExpressionEmitter.visit_SVect": {
            "name": "visit_SVect",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vect": [
                    "sexp.SVect",
                    "sexp.SSym"
                ]
            }
        },
        "ExpressionEmitter.visit_Quote": {
            "name": "visit_Quote",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "quote": [
                    "sexp.Quote"
                ]
            }
        },
        "ExpressionEmitter.visit_SCall": {
            "name": "visit_SCall",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "call": [
                    "bool",
                    "str"
                ]
            }
        },
        "ExpressionEmitter._is_true_assertion": {
            "name": "_is_true_assertion",
            "location": 332,
            "return": [
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "call": [
                    "Callable",
                    "BaseException",
                    "sexp.SCall"
                ]
            }
        },
        "ExpressionEmitter._get_tail_call_data": {
            "name": "_get_tail_call_data",
            "location": 345,
            "return": [
                "None",
                "Sequence[str]",
                "Optional[Period]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "call": [
                    "Optional[Any]",
                    "Any",
                    "Optional[dict]",
                    "None",
                    "Tuple[str,str]",
                    "Dict",
                    "Optional[int]",
                    "Tuple[Union[str,str]]",
                    "int"
                ]
            }
        },
        "ExpressionEmitter._is_known_function": {
            "name": "_is_known_function",
            "location": 352,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "call": [
                    "str",
                    "sexp.SCall"
                ]
            }
        },
        "ExpressionEmitter._arity_known_correct": {
            "name": "_arity_known_correct",
            "location": 358,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "call": [
                    "Dict[str,str]",
                    "bool",
                    "Optional[Dict[str,str]]",
                    "None",
                    "Optional[str]",
                    "str",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]"
                ],
                "is_known_function": [
                    "bool",
                    "List[str]",
                    "Optional[Any]",
                    "Any",
                    "Optional[Sequence[Any]]",
                    "None",
                    "Sequence[Any]"
                ],
                "tail_call_data": [
                    "Optional[find_tail_calls.TailCallData]",
                    "None",
                    "Optional[str]",
                    "str",
                    "Optional[Any]",
                    "Any",
                    "Optional[Sequence[Any]]",
                    "Sequence[Any]",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "Optional[Callable]",
                    "Callable"
                ]
            }
        },
        "ExpressionEmitter._tail_call_args_compatible": {
            "name": "_tail_call_args_compatible",
            "location": 378,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "call": [
                    "bool",
                    "sexp.SCall",
                    "str",
                    "List[str]",
                    "Optional[List[str]]",
                    "None",
                    "Optional[Sequence[str]]",
                    "Sequence[str]"
                ],
                "tail_call_data": [
                    "Optional[find_tail_calls.TailCallData]",
                    "None",
                    "str",
                    "Optional[Sequence[str]]",
                    "Sequence[str]",
                    "bool",
                    "Mapping",
                    "Optional[Callable]",
                    "Callable"
                ]
            }
        },
        "ExpressionEmitter._get_arg_types": {
            "name": "_get_arg_types",
            "location": 395,
            "return": [
                "Optional[tuple]"
            ],
            "arguments": {
                "self": [],
                "call": [
                    "sexp.SCall"
                ]
            }
        },
        "ExpressionEmitter._get_func_to_call": {
            "name": "_get_func_to_call",
            "location": 403,
            "return": [
                "None",
                "Sequence[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "call": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "is_known_function": [
                    "bool",
                    "str",
                    "List[Tuple]",
                    "Callable",
                    "List[tuple]",
                    "Dict"
                ],
                "arity_known_correct": [
                    "bool",
                    "None",
                    "str",
                    "Optional[find_tail_calls.TailCallData]",
                    "Sequence[Any]",
                    "Optional[Sequence[Any]]",
                    "Optional[str]"
                ],
                "tail_call_data": [
                    "bool",
                    "None",
                    "str",
                    "Optional[find_tail_calls.TailCallData]",
                    "Sequence[Any]",
                    "Optional[Sequence[Any]]",
                    "Optional[str]"
                ],
                "call_args_compatible": [
                    "bool",
                    "None",
                    "str",
                    "Optional[find_tail_calls.TailCallData]",
                    "Sequence[Any]",
                    "Optional[Sequence[Any]]",
                    "Optional[str]"
                ]
            }
        },
        "ExpressionEmitter._get_replacement_vector_index_func": {
            "name": "_get_replacement_vector_index_func",
            "location": 440,
            "return": [
                "Optional[sexp.SSym]"
            ],
            "arguments": {
                "self": [],
                "call": [
                    "Callable",
                    "sexp.SCall"
                ]
            }
        },
        "ExpressionEmitter._emit_args": {
            "name": "_emit_args",
            "location": 481,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "call": [
                    "Callable",
                    "sexp.SCall"
                ]
            }
        },
        "ExpressionEmitter._add_is_function_check": {
            "name": "_add_is_function_check",
            "location": 498,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "function_expr": [
                    "str",
                    "bool",
                    "bytecode.Parameter",
                    "bytecode.BasicBlock"
                ],
                "add_to_block": [
                    "int",
                    "float",
                    "bytecode.BasicBlock",
                    "bytecode.Parameter"
                ]
            }
        },
        "ExpressionEmitter._add_arity_check": {
            "name": "_add_arity_check",
            "location": 514,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "function_expr": [
                    "str",
                    "bytecode.Parameter",
                    "Callable[...,collections.abc.Awaitable[Any]]",
                    "bytecode.BasicBlock",
                    "None",
                    "List[str]",
                    "Callable[...,Awaitable[Any]]",
                    "Optional[str]",
                    "Optional[List[str]]"
                ],
                "add_to_block": [
                    "bool",
                    "bytecode.BasicBlock",
                    "bytecode.Parameter"
                ],
                "arity": [
                    "int",
                    "Optional[int]",
                    "str",
                    "None",
                    "Callable[[int],None]",
                    "Callable[int,None]"
                ]
            }
        }
    },
    "scheme-jit-develop/errors.py": {},
    "scheme-jit-develop/find_tail_calls.py": {
        "TailCallData.get_func": {
            "name": "get_func",
            "location": 14,
            "return": [
                "str",
                "Dict[str, Any]",
                "Tuple[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "TailCallData.__hash__": {
            "name": "__hash__",
            "location": 18,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TailCallData.__eq__": {
            "name": "__eq__",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "TailCallFinder.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TailCallFinder.tail_calls": {
            "name": "tail_calls",
            "location": 34,
            "return": [
                "List",
                "List[Dict]",
                "List[int]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TailCallFinder.visit_SFunction": {
            "name": "visit_SFunction",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "TailCallFinder.visit_SCall": {
            "name": "visit_SCall",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "call": [
                    "Dict",
                    "sexp.SCall"
                ]
            }
        },
        "TailCallFinder.visit_SBegin": {
            "name": "visit_SBegin",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "begin": [
                    "str",
                    "Dict",
                    "sexp.SBegin"
                ]
            }
        }
    },
    "scheme-jit-develop/optimization.py": {
        "FunctionOptimizer.compute_preds": {
            "name": "compute_preds",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionOptimizer.compute_succs": {
            "name": "compute_succs",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionOptimizer.block_transfer": {
            "name": "block_transfer",
            "location": 54,
            "return": [
                "List[Tuple[(_T2, _T3)]]"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "bytecode.EvalEnv",
                    "EvalEnv"
                ],
                "block": [
                    "bytecode.BasicBlock"
                ],
                "types": [
                    "bytecode.TypeMap",
                    "bytecode.ValueMap",
                    "EvalEnv"
                ],
                "values": [
                    "List[T]",
                    "bytecode.TypeMap",
                    "bytecode.ValueMap",
                    "EvalEnv"
                ]
            }
        },
        "FunctionOptimizer.block_input_maps": {
            "name": "block_input_maps",
            "location": 98,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "block": [
                    "Dict[str,Any]",
                    "bytecode.BasicBlock"
                ]
            }
        },
        "FunctionOptimizer.dataflow": {
            "name": "dataflow",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "int"
                ]
            }
        },
        "FunctionOptimizer.remove_dead_code": {
            "name": "remove_dead_code",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionOptimizer.is_used": {
            "name": "is_used",
            "location": 167,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "var": [
                    "Callable",
                    "bytecode.Var",
                    "Dict[str,Any]",
                    "Match",
                    "Type",
                    "str"
                ],
                "block": [
                    "int",
                    "None",
                    "str",
                    "Callable",
                    "Type"
                ]
            }
        },
        "FunctionOptimizer.mark_vars": {
            "name": "mark_vars",
            "location": 179,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable",
                    "Dict[str,Any]",
                    "bytecode.Function",
                    "List",
                    "Iterable[bytes]"
                ]
            }
        },
        "FunctionOptimizer.apply_inlining": {
            "name": "apply_inlining",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "Dict[Var,sexp.Value]",
                    "bool",
                    "bytecode.EvalEnv"
                ]
            }
        },
        "FunctionOptimizer.copy_propagate_block": {
            "name": "copy_propagate_block",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "block": [
                    "str",
                    "Exception",
                    "bytecode.BasicBlock"
                ]
            }
        },
        "FunctionOptimizer.copy_propagate": {
            "name": "copy_propagate",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionOptimizer.merge_blocks": {
            "name": "merge_blocks",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionOptimizer.fmt_inst": {
            "name": "fmt_inst",
            "location": 275,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "inst": [
                    "bytecode.Inst",
                    "str",
                    "int",
                    "bool",
                    "dict",
                    "Union[str, bytes, IO[bytes]]"
                ],
                "types": [
                    "str",
                    "bytecode.TypeMap",
                    "nevergrad.parametrization.parameter.Parameter"
                ],
                "values": [
                    "str",
                    "int",
                    "float",
                    "Optional[float]"
                ]
            }
        },
        "FunctionOptimizer.print_func": {
            "name": "print_func",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionOptimizer.optimize": {
            "name": "optimize",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "str",
                    "Type",
                    "bytecode.EvalEnv"
                ]
            }
        },
        "FunctionOptimizer.should_inline": {
            "name": "should_inline",
            "location": 310,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "Type",
                    "EvalEnv",
                    "bytecode.EvalEnv",
                    "Type[T]"
                ],
                "func": [],
                "types": []
            }
        },
        "FunctionOptimizer.merge_blocks.mergable": {
            "name": "mergable",
            "location": 242,
            "return": [
                "bool"
            ],
            "arguments": {
                "block": [
                    "bytecode.BasicBlock"
                ]
            }
        }
    },
    "scheme-jit-develop/runner.py": {
        "add_intrinsics": {
            "name": "add_intrinsics",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "eval_env": [
                    "bytecode.EvalEnv"
                ]
            }
        },
        "add_builtins": {
            "name": "add_builtins",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "env": [
                    "str",
                    "bytecode.EvalEnv"
                ]
            }
        },
        "add_prelude": {
            "name": "add_prelude",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "env": [
                    "str",
                    "bytecode.EvalEnv"
                ]
            }
        },
        "run_code": {
            "name": "run_code",
            "location": 250,
            "return": [
                "bool",
                "str",
                "Optional[Callable[[str], bool]]",
                "Optional[int]"
            ],
            "arguments": {
                "env": [
                    "str",
                    "int",
                    "bytecode.EvalEnv"
                ],
                "code": [
                    "str"
                ],
                "context": [
                    "Text",
                    "str",
                    "List[Tuple[str,str]]",
                    "Dict[str,Dict[str,str]]",
                    "Dict[str,Dict[str,Any]]",
                    "OrderedDict[str,Any]"
                ]
            }
        },
        "_add_func_to_env": {
            "name": "_add_func_to_env",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "func": [
                    "sexp.SFunction"
                ],
                "func_emitter": [
                    "bool",
                    "dict",
                    "str",
                    "int",
                    "Awaitable",
                    "Dict[str, int]"
                ],
                "env": [
                    "Callable[,None]",
                    "bytecode.EvalEnv"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 297,
            "return": [
                "str",
                "int",
                "Set[str]",
                "Mapping[str, int]",
                "bool",
                "\"Parameter\""
            ],
            "arguments": {
                "env": [
                    "Dict[str,Any]",
                    "EvalEnv",
                    "Dict[str,Type]",
                    "Dict[str,type]"
                ],
                "text": [
                    "Exception"
                ],
                "context": [
                    "Text",
                    "EvalEnv",
                    "Dict[str,Any]",
                    "Dict[str,type]"
                ]
            }
        },
        "add_intrinsics.inst_function": {
            "name": "inst_function",
            "location": 16,
            "return": [
                "SFunction",
                "str",
                "Type",
                "BaseException",
                "Exception",
                "Type[BaseException]"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "params": [
                    "str",
                    "bool"
                ],
                "return_val": [
                    "Optional[str]",
                    "Union[None, int, str]"
                ]
            }
        },
        "add_intrinsics.binop": {
            "name": "binop",
            "location": 30,
            "return": [
                "float",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "name": [
                    "sexp.SSym",
                    "str",
                    "Dict[str, Any]"
                ],
                "op": [
                    "sexp.SSym",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "scheme-jit-develop/scheme.py": {
        "main": {
            "name": "main",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "report_stats_json": {
            "name": "report_stats_json",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [],
                "env": [
                    "Mapping",
                    "bytecode.EvalEnv",
                    "Dict[str,Any]",
                    "Mapping[str,Any]",
                    "List[dict[str,Any]]",
                    "List[Dict[str,Any]]"
                ]
            }
        },
        "report_stats": {
            "name": "report_stats",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [],
                "env": [
                    "bytecode.EvalEnv"
                ]
            }
        },
        "parse_args": {
            "name": "parse_args",
            "location": 170,
            "return": [
                "argparse.Namespace"
            ],
            "arguments": {}
        },
        "Output.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "Output.__enter__": {
            "name": "__enter__",
            "location": 55,
            "return": [
                "Output"
            ],
            "arguments": {
                "self": [
                    "_TOutput@@Output@@"
                ]
            }
        },
        "Output.__exit__": {
            "name": "__exit__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "scheme-jit-develop/scheme_types.py": {
        "get_type": {
            "name": "get_type",
            "location": 204,
            "return": [
                "str",
                "Type"
            ],
            "arguments": {
                "value": [
                    "str",
                    "sexp.Value"
                ]
            }
        },
        "_register_const_call_expr": {
            "name": "_register_const_call_expr",
            "location": 462,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "func_name": [
                    "str"
                ]
            }
        },
        "SchemeObjectType.symbol": {
            "name": "symbol",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemeObjectType.__str__": {
            "name": "__str__",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemeObjectType.join": {
            "name": "join",
            "location": 22,
            "return": [
                "SchemeObjectType"
            ],
            "arguments": {
                "self": [
                    "_TSchemeObjectType@@SchemeObjectType@@"
                ],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "SchemeObjectType.__lt__": {
            "name": "__lt__",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "bool",
                    "Type"
                ]
            }
        },
        "SchemeObjectType.join_with": {
            "name": "join_with",
            "location": 30,
            "return": [
                "Union[(SchemeObjectType, _T0)]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Type",
                    "str"
                ]
            }
        },
        "SchemeValueType.type_name": {
            "name": "type_name",
            "location": 52,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemeNumType.symbol": {
            "name": "symbol",
            "location": 58,
            "return": [
                "sexp.SSym"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemeNumType.__str__": {
            "name": "__str__",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemeNumType.type_name": {
            "name": "type_name",
            "location": 64,
            "return": [
                "sexp.SSym"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemeBoolType.symbol": {
            "name": "symbol",
            "location": 73,
            "return": [
                "sexp.SSym"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemeBoolType.__str__": {
            "name": "__str__",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemeBoolType.type_name": {
            "name": "type_name",
            "location": 79,
            "return": [
                "sexp.SSym"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemeSymType.symbol": {
            "name": "symbol",
            "location": 88,
            "return": [
                "sexp.SSym"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemeSymType.__str__": {
            "name": "__str__",
            "location": 91,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemeSymType.type_name": {
            "name": "type_name",
            "location": 94,
            "return": [
                "sexp.SSym"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemeVectType.symbol": {
            "name": "symbol",
            "location": 105,
            "return": [
                "sexp.SSym"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemeVectType.__str__": {
            "name": "__str__",
            "location": 108,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemeVectType.join": {
            "name": "join",
            "location": 113,
            "return": [
                "SchemeObjectType"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "SchemeVectType.__init__": {
            "name": "__init__",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "length": [
                    "int",
                    "Optional[int]",
                    "Iterable[str]"
                ]
            }
        },
        "SchemeVectType.type_name": {
            "name": "type_name",
            "location": 127,
            "return": [
                "sexp.SSym"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemeVectType.__lt__": {
            "name": "__lt__",
            "location": 130,
            "return": [
                "bool",
                "Tuple[float,float]",
                "Optional[str]",
                "Optional[Sequence[str]]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "SchemeVectType.join_with": {
            "name": "join_with",
            "location": 136,
            "return": [
                "Union[(SchemeObjectType, _T0)]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Optional[Cell]",
                    "None"
                ]
            }
        },
        "SchemeFunctionType.__lt__": {
            "name": "__lt__",
            "location": 149,
            "return": [
                "bool",
                "Tuple[float,float]",
                "Optional[str]",
                "Optional[Sequence[str]]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Type"
                ]
            }
        },
        "SchemeFunctionType.join_with": {
            "name": "join_with",
            "location": 158,
            "return": [
                "Union[(SchemeObjectType, _T0)]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Type"
                ]
            }
        },
        "SchemeFunctionType.type_name": {
            "name": "type_name",
            "location": 166,
            "return": [
                "sexp.SSym"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemeFunctionType.symbol": {
            "name": "symbol",
            "location": 169,
            "return": [
                "sexp.SSym"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemeFunctionType.__str__": {
            "name": "__str__",
            "location": 172,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemeFunctionType.join": {
            "name": "join",
            "location": 177,
            "return": [
                "SchemeObjectType"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Type"
                ]
            }
        },
        "SExpWrapper.__eq__": {
            "name": "__eq__",
            "location": 197,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Collection"
                ]
            }
        },
        "SExpWrapper.__hash__": {
            "name": "__hash__",
            "location": 200,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallArgsTypeAnalyzer.__init__": {
            "name": "__init__",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallArgsTypeAnalyzer.visit_SFunction": {
            "name": "visit_SFunction",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "sexp.SFunction",
                    "sexp.SVect"
                ]
            }
        },
        "CallArgsTypeAnalyzer.visit_SNum": {
            "name": "visit_SNum",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num": [
                    "bool",
                    "sexp.SNum"
                ]
            }
        },
        "CallArgsTypeAnalyzer.visit_SBool": {
            "name": "visit_SBool",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sbool": [
                    "Dict",
                    "List[None]",
                    "sexp.SBool",
                    "sexp.SSym"
                ]
            }
        },
        "CallArgsTypeAnalyzer.visit_SSym": {
            "name": "visit_SSym",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sym": [
                    "Dict",
                    "sexp.SSym",
                    "sexp.SBool"
                ]
            }
        },
        "CallArgsTypeAnalyzer.visit_SVect": {
            "name": "visit_SVect",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vect": [
                    "sexp.SVect"
                ]
            }
        },
        "FunctionTypeAnalyzer.__init__": {
            "name": "__init__",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "param_types": [
                    "str",
                    "bool",
                    "Type[BaseException]",
                    "Type"
                ],
                "global_env": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "FunctionTypeAnalyzer.get_function_type": {
            "name": "get_function_type",
            "location": 244,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionTypeAnalyzer.get_expr_types": {
            "name": "get_expr_types",
            "location": 248,
            "return": [
                "Dict[(SExpWrapper, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionTypeAnalyzer.get_expr_type": {
            "name": "get_expr_type",
            "location": 251,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "bool"
                ]
            }
        },
        "FunctionTypeAnalyzer.set_expr_type": {
            "name": "set_expr_type",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "str",
                    "slice",
                    "sexp.SExp"
                ],
                "type_": [
                    "str",
                    "slice",
                    "sexp.SExp"
                ]
            }
        },
        "FunctionTypeAnalyzer.expr_type_known": {
            "name": "expr_type_known",
            "location": 257,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "sexp.SExp"
                ]
            }
        },
        "FunctionTypeAnalyzer.get_expr_values": {
            "name": "get_expr_values",
            "location": 260,
            "return": [
                "Dict[(SExpWrapper, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionTypeAnalyzer.get_expr_value": {
            "name": "get_expr_value",
            "location": 263,
            "return": [
                "Type",
                "Optional[BaseException]",
                "sexp.Value",
                "bool",
                "Callable",
                "Optional[Dict]",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "FunctionTypeAnalyzer.expr_value_known": {
            "name": "expr_value_known",
            "location": 266,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "str",
                    "Type[T]",
                    "Type"
                ]
            }
        },
        "FunctionTypeAnalyzer.set_expr_value": {
            "name": "set_expr_value",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "str",
                    "int",
                    "sexp.SExp",
                    "sexp.Value",
                    "bool"
                ],
                "value": [
                    "str",
                    "int",
                    "sexp.SExp",
                    "sexp.Value",
                    "bool"
                ]
            }
        },
        "FunctionTypeAnalyzer.visit_SBegin": {
            "name": "visit_SBegin",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "begin": [
                    "sexp.SBegin"
                ]
            }
        },
        "FunctionTypeAnalyzer.visit_SFunction": {
            "name": "visit_SFunction",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "sexp.SFunction"
                ]
            }
        },
        "FunctionTypeAnalyzer.visit_SNum": {
            "name": "visit_SNum",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num": [
                    "sexp.SNum",
                    "sexp.SBool"
                ]
            }
        },
        "FunctionTypeAnalyzer.visit_SBool": {
            "name": "visit_SBool",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sbool": [
                    "Type",
                    "sexp.SBool",
                    "sexp.SConditional",
                    "sexp.SNum",
                    "sexp.SVect"
                ]
            }
        },
        "FunctionTypeAnalyzer.visit_SSym": {
            "name": "visit_SSym",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sym": [
                    "bool",
                    "sexp.SSym"
                ]
            }
        },
        "FunctionTypeAnalyzer.visit_SVect": {
            "name": "visit_SVect",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vect": [
                    "sexp.SVect"
                ]
            }
        },
        "FunctionTypeAnalyzer.visit_Quote": {
            "name": "visit_Quote",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "quote": [
                    "sexp.Quote"
                ]
            }
        },
        "FunctionTypeAnalyzer.visit_SCall": {
            "name": "visit_SCall",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "call": [
                    "sexp.SCall",
                    "sexp.SFunction"
                ]
            }
        },
        "FunctionTypeAnalyzer.visit_SConditional": {
            "name": "visit_SConditional",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cond": [
                    "sexp.SConditional"
                ]
            }
        },
        "BuiltinCallTypeEvaler.__init__": {
            "name": "__init__",
            "location": 426,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expr_types": []
            }
        },
        "BuiltinCallTypeEvaler.eval_expr": {
            "name": "eval_expr",
            "location": 429,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "call": [
                    "Callable[...,None]",
                    "sexp.SCall"
                ]
            }
        },
        "BuiltinCallTypeEvaler._eval_expr_impl": {
            "name": "_eval_expr_impl",
            "location": 448,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "call": [
                    "Callable"
                ]
            }
        },
        "_register_const_call_expr.decorator": {
            "name": "decorator",
            "location": 463,
            "return": [
                "Dict[str, Any]",
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "Typeof._eval_expr_impl": {
            "name": "_eval_expr_impl",
            "location": 479,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "call": [
                    "Type[Any]",
                    "bool",
                    "Type"
                ]
            }
        },
        "Not._eval_expr_impl": {
            "name": "_eval_expr_impl",
            "location": 490,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "call": [
                    "sexp.SCall"
                ]
            }
        },
        "TypeQuery._eval_expr_impl": {
            "name": "_eval_expr_impl",
            "location": 503,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "call": [
                    "sexp.SCall"
                ]
            }
        },
        "SymbolEq._eval_expr_impl": {
            "name": "_eval_expr_impl",
            "location": 547,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "call": [
                    "sexp.SCall"
                ]
            }
        },
        "VectorMake._eval_expr_impl": {
            "name": "_eval_expr_impl",
            "location": 561,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "call": [
                    "int",
                    "Type",
                    "bool"
                ]
            }
        }
    },
    "scheme-jit-develop/sexp.py": {
        "to_slist": {
            "name": "to_slist",
            "location": 219,
            "return": [
                "Union[(NilType, SPair)]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "make_bool": {
            "name": "make_bool",
            "location": 227,
            "return": [
                "SSym"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "str",
                    "Sequence",
                    "T",
                    "Iterable[str]",
                    "int",
                    "Union[str,Iterable[str]]"
                ]
            }
        },
        "parse": {
            "name": "parse",
            "location": 292,
            "return": [
                "list"
            ],
            "arguments": {
                "x": [
                    "str",
                    "bytes",
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "List",
                    "T"
                ]
            }
        },
        "lambda_name_generator": {
            "name": "lambda_name_generator",
            "location": 430,
            "return": [
                "Generator[(str, Any, Any)]"
            ],
            "arguments": {}
        },
        "Value.type_name": {
            "name": "type_name",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Value.address": {
            "name": "address",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Value.to_param": {
            "name": "to_param",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SNum.type_name": {
            "name": "type_name",
            "location": 40,
            "return": [
                "SSym"
            ],
            "arguments": {
                "self": []
            }
        },
        "SNum.__str__": {
            "name": "__str__",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SNum.__hash__": {
            "name": "__hash__",
            "location": 46,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SNum.address": {
            "name": "address",
            "location": 49,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SNum.to_param": {
            "name": "to_param",
            "location": 52,
            "return": [
                "bytecode.NumLit"
            ],
            "arguments": {
                "self": []
            }
        },
        "SBool.type_name": {
            "name": "type_name",
            "location": 61,
            "return": [
                "SSym"
            ],
            "arguments": {
                "self": []
            }
        },
        "SBool.__str__": {
            "name": "__str__",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SBool.address": {
            "name": "address",
            "location": 67,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SBool.to_param": {
            "name": "to_param",
            "location": 70,
            "return": [
                "bytecode.BoolLit"
            ],
            "arguments": {
                "self": []
            }
        },
        "SSym.type_name": {
            "name": "type_name",
            "location": 79,
            "return": [
                "SSym"
            ],
            "arguments": {
                "self": [
                    "_TSSym@@SSym@@"
                ]
            }
        },
        "SSym.__str__": {
            "name": "__str__",
            "location": 82,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SSym.__hash__": {
            "name": "__hash__",
            "location": 85,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SSym.address": {
            "name": "address",
            "location": 88,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SSym.to_param": {
            "name": "to_param",
            "location": 91,
            "return": [
                "bytecode.SymLit"
            ],
            "arguments": {
                "self": []
            }
        },
        "SVect.type_name": {
            "name": "type_name",
            "location": 111,
            "return": [
                "SSym"
            ],
            "arguments": {
                "self": []
            }
        },
        "SVect.__str__": {
            "name": "__str__",
            "location": 114,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SVect.address": {
            "name": "address",
            "location": 117,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SVect.to_param": {
            "name": "to_param",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SPair.is_list": {
            "name": "is_list",
            "location": 149,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SPair.__iter__": {
            "name": "__iter__",
            "location": 158,
            "return": [
                "PairIterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "SPair.__str__": {
            "name": "__str__",
            "location": 161,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Quote.__str__": {
            "name": "__str__",
            "location": 173,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PairIterator.__init__": {
            "name": "__init__",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "PairIterator.__next__": {
            "name": "__next__",
            "location": 181,
            "return": [
                "Nil",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PairIterator.__iter__": {
            "name": "__iter__",
            "location": 195,
            "return": [
                "PairIterator"
            ],
            "arguments": {
                "self": [
                    "_TPairIterator@@PairIterator@@"
                ]
            }
        },
        "NilType.__iter__": {
            "name": "__iter__",
            "location": 200,
            "return": [
                "NilType.NilIterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "NilType.__str__": {
            "name": "__str__",
            "location": 210,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SFunction.type_name": {
            "name": "type_name",
            "location": 254,
            "return": [
                "SSym"
            ],
            "arguments": {
                "self": []
            }
        },
        "SFunction.address": {
            "name": "address",
            "location": 257,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SFunction.__str__": {
            "name": "__str__",
            "location": 260,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SFunction.get_specialized": {
            "name": "get_specialized",
            "location": 264,
            "return": [
                "str",
                "Container[\"Taxon\"]"
            ],
            "arguments": {
                "self": [],
                "types": [
                    "Union[str,int]",
                    "str",
                    "Optional[str]",
                    "int",
                    "Optional[Iterable[str]]",
                    "None",
                    "Iterable[str]"
                ]
            }
        },
        "SFunction.to_param": {
            "name": "to_param",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "parse.is_number": {
            "name": "is_number",
            "location": 308,
            "return": [
                "str",
                "int",
                "List[int]",
                "tuple"
            ],
            "arguments": {
                "x": [
                    "str",
                    "type",
                    "bool"
                ]
            }
        },
        "parse.parse": {
            "name": "parse",
            "location": 311,
            "return": [
                "list"
            ],
            "arguments": {
                "tokens": [],
                "quoted": []
            }
        },
        "parse.parse_conditional": {
            "name": "parse_conditional",
            "location": 360,
            "return": [
                "Tuple[SConditional]",
                "str",
                "float"
            ],
            "arguments": {
                "tokens": [
                    "List[str]",
                    "Optional[\"PNBuffer\"]",
                    "dict",
                    "list",
                    "bytes",
                    "Optional[\"PNSqlCursor\"]"
                ]
            }
        },
        "parse.parse_define": {
            "name": "parse_define",
            "location": 369,
            "return": [
                "Tuple[SFunction]",
                "str",
                "Dict[str,str]",
                "bool"
            ],
            "arguments": {
                "tokens": [
                    "List[str]",
                    "Dict[\"core.Edge\", \"state.State\"]",
                    "str"
                ]
            }
        },
        "parse.parse_lambda": {
            "name": "parse_lambda",
            "location": 380,
            "return": [
                "Tuple[SFunction]",
                "str",
                "Tuple[str]",
                "Optional[str]"
            ],
            "arguments": {
                "tokens": [
                    "List[str]",
                    "int",
                    "str",
                    "dict"
                ]
            }
        },
        "parse.parse_function_params": {
            "name": "parse_function_params",
            "location": 391,
            "return": [
                "Tuple[list]",
                "str",
                "int",
                "Dict",
                "Iterable[str]"
            ],
            "arguments": {
                "tokens": [
                    "List[str]",
                    "int",
                    "Sequence[T]",
                    "List[int]",
                    "Set[str]",
                    "list"
                ]
            }
        },
        "parse.parse_call": {
            "name": "parse_call",
            "location": 405,
            "return": [
                "Tuple[SCall]",
                "IO[str]",
                "str",
                "int",
                "Callable",
                "bool"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "list",
                    "Callable[..., None]"
                ],
                "tokens": [
                    "List[str]",
                    "Callable[..., T]",
                    "str",
                    "dict"
                ]
            }
        },
        "parse.parse_quote": {
            "name": "parse_quote",
            "location": 410,
            "return": [
                "Tuple[Quote]",
                "int",
                "str",
                "List[str]",
                "Dict"
            ],
            "arguments": {
                "tokens": [
                    "List[str]",
                    "str",
                    "bytes",
                    "Dict[str, str]"
                ]
            }
        },
        "parse.read_list_tail": {
            "name": "read_list_tail",
            "location": 414,
            "return": [
                "Tuple[list]",
                "bool",
                "str",
                "Dict[str,Any]",
                "Dict"
            ],
            "arguments": {
                "tokens": [
                    "List[str]",
                    "str"
                ]
            }
        },
        "NilType.NilIterator.__next__": {
            "name": "__next__",
            "location": 204,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "NilType.NilIterator.__iter__": {
            "name": "__iter__",
            "location": 207,
            "return": [
                "NilType.NilIterator"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "scheme-jit-develop/test_builtins.py": {
        "BuiltinsTestCase.test_intrinsics": {
            "name": "test_intrinsics",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuiltinsTestCase.test_builtins": {
            "name": "test_builtins",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuiltinsTestCase.test_prelude": {
            "name": "test_prelude",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "scheme-jit-develop/test_bytecode.py": {
        "BytecodeTestCase.test_example_recursive": {
            "name": "test_example_recursive",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BytecodeTestCase.test_example_tail_call": {
            "name": "test_example_tail_call",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BytecodeTestCase.test_example_inlined": {
            "name": "test_example_inlined",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BytecodeTestCase.test_call_specialized": {
            "name": "test_call_specialized",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "scheme-jit-develop/test_bytecode_opt.py": {
        "make_func": {
            "name": "make_func",
            "location": 15,
            "return": [
                "bytecode.Function"
            ],
            "arguments": {}
        },
        "make_branch_func_int": {
            "name": "make_branch_func_int",
            "location": 26,
            "return": [
                "Tuple[(bytecode.Function, Tuple[(bytecode.BasicBlock, bytecode.BasicBlock, bytecode.BasicBlock, bytecode.BasicBlock)])]"
            ],
            "arguments": {}
        },
        "make_branch_func_object": {
            "name": "make_branch_func_object",
            "location": 44,
            "return": [
                "Tuple[(bytecode.Function, Tuple[(bytecode.BasicBlock, bytecode.BasicBlock, bytecode.BasicBlock, bytecode.BasicBlock)])]"
            ],
            "arguments": {}
        },
        "get_builtins": {
            "name": "get_builtins",
            "location": 61,
            "return": [
                "bytecode.EvalEnv"
            ],
            "arguments": {}
        },
        "OptTestCase.test_baseline": {
            "name": "test_baseline",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OptTestCase.test_split_block": {
            "name": "test_split_block",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OptTestCase.test_mark_vars": {
            "name": "test_mark_vars",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OptTestCase.test_mark_functions": {
            "name": "test_mark_functions",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OptTestCase.test_block_transfer": {
            "name": "test_block_transfer",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OptTestCase.test_dataflow_stable_type": {
            "name": "test_dataflow_stable_type",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OptTestCase.test_dataflow_unstable_type": {
            "name": "test_dataflow_unstable_type",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OptTestCase.test_optimize": {
            "name": "test_optimize",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OptTestCase.test_specialize_value": {
            "name": "test_specialize_value",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "scheme-jit-develop/test_emit_IR.py": {
        "EmitExpressionTestCase.setUp": {
            "name": "setUp",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmitExpressionTestCase.test_emit_int_literal": {
            "name": "test_emit_int_literal",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmitExpressionTestCase.test_emit_quoted_symbol_literal": {
            "name": "test_emit_quoted_symbol_literal",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmitExpressionTestCase.test_emit_bool_literal": {
            "name": "test_emit_bool_literal",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmitExpressionTestCase.test_emit_empty_vector_literal": {
            "name": "test_emit_empty_vector_literal",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmitExpressionTestCase.test_emit_non_empty_vector_literal": {
            "name": "test_emit_non_empty_vector_literal",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmitExpressionTestCase.test_emit_empty_quoted_list": {
            "name": "test_emit_empty_quoted_list",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmitExpressionTestCase.test_emit_non_empty_quoted_list": {
            "name": "test_emit_non_empty_quoted_list",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmitExpressionTestCase.test_emit_global_function_call": {
            "name": "test_emit_global_function_call",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmitExpressionTestCase.test_emit_local_var_function_call": {
            "name": "test_emit_local_var_function_call",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmitExpressionTestCase.test_lambda_function_called_immediately": {
            "name": "test_lambda_function_called_immediately",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmitExpressionTestCase.test_emit_conditional": {
            "name": "test_emit_conditional",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmitExpressionTestCase.test_nested_conditionals": {
            "name": "test_nested_conditionals",
            "location": 332,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmitExpressionTestCase.test_conditional_in_conditional_test_expr": {
            "name": "test_conditional_in_conditional_test_expr",
            "location": 428,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmitExpressionTestCase.test_conditional_in_function_call_args": {
            "name": "test_conditional_in_function_call_args",
            "location": 500,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmitExpressionTestCase.test_conditional_in_function_call_func": {
            "name": "test_conditional_in_function_call_func",
            "location": 579,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmitFunctionDefTestCase.setUp": {
            "name": "setUp",
            "location": 666,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmitFunctionDefTestCase.test_emit_function_def": {
            "name": "test_emit_function_def",
            "location": 669,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmitFunctionDefTestCase.test_emit_multiple_function_defs": {
            "name": "test_emit_multiple_function_defs",
            "location": 683,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmitFunctionDefTestCase.test_emit_lambda_def": {
            "name": "test_emit_lambda_def",
            "location": 709,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmitFunctionDefTestCase.test_emit_begin_in_func": {
            "name": "test_emit_begin_in_func",
            "location": 742,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmitOptimizedFuncTestCase.setUp": {
            "name": "setUp",
            "location": 783,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmitOptimizedFuncTestCase.get_optimized_func_bytecode": {
            "name": "get_optimized_func_bytecode",
            "location": 789,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "code_str": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "param_types": [
                    "Optional[List[int]]",
                    "None",
                    "List[str]",
                    "Optional[Tuple[str]]",
                    "List[int]",
                    "str",
                    "Tuple[str]",
                    "List[Tuple]",
                    "List[tuple]"
                ],
                "optimize_tail_calls": [
                    "bool",
                    "str",
                    "int",
                    "List"
                ]
            }
        },
        "EmitOptimizedFuncTestCase.test_partially_specialized_plus": {
            "name": "test_partially_specialized_plus",
            "location": 826,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmitOptimizedFuncTestCase.test_fully_specialized_plus": {
            "name": "test_fully_specialized_plus",
            "location": 857,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmitOptimizedFuncTestCase.test_fully_specialized_plus_args_are_exprs": {
            "name": "test_fully_specialized_plus_args_are_exprs",
            "location": 883,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmitOptimizedFuncTestCase.test_specialize_in_bounds_vector_access": {
            "name": "test_specialize_in_bounds_vector_access",
            "location": 913,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmitOptimizedFuncTestCase.test_out_of_bounds_vector_access_checks_not_removed": {
            "name": "test_out_of_bounds_vector_access_checks_not_removed",
            "location": 937,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmitOptimizedFuncTestCase.test_non_constant_index_checks_not_removed": {
            "name": "test_non_constant_index_checks_not_removed",
            "location": 968,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmitOptimizedFuncTestCase.test_vector_access_unknown_vector_size": {
            "name": "test_vector_access_unknown_vector_size",
            "location": 994,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmitOptimizedFuncTestCase.test_vector_access_non_vector": {
            "name": "test_vector_access_non_vector",
            "location": 1018,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmitOptimizedFuncTestCase.test_vector_access_non_number_index": {
            "name": "test_vector_access_non_number_index",
            "location": 1042,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmitOptimizedFuncTestCase.test_removed_is_func_and_arity_check_param_is_func": {
            "name": "test_removed_is_func_and_arity_check_param_is_func",
            "location": 1068,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmitOptimizedFuncTestCase.test_removed_is_func_check_param_is_func_wrong_num_args": {
            "name": "test_removed_is_func_check_param_is_func_wrong_num_args",
            "location": 1090,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmitOptimizedFuncTestCase.test_removed_is_func_check_param_is_func_arity_unknown": {
            "name": "test_removed_is_func_check_param_is_func_arity_unknown",
            "location": 1118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmitOptimizedFuncTestCase.test_removed_is_func_and_arity_check_lambda_call": {
            "name": "test_removed_is_func_and_arity_check_lambda_call",
            "location": 1146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmitOptimizedFuncTestCase.test_removed_is_func_check_lambda_call": {
            "name": "test_removed_is_func_check_lambda_call",
            "location": 1164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmitOptimizedFuncTestCase.test_removed_is_func_and_arity_check_user_func_call": {
            "name": "test_removed_is_func_and_arity_check_user_func_call",
            "location": 1188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmitOptimizedFuncTestCase.test_removed_is_func_check_user_func_call": {
            "name": "test_removed_is_func_check_user_func_call",
            "location": 1203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmitOptimizedFuncTestCase.test_removed_is_func_and_arity_check_builtin_func_call": {
            "name": "test_removed_is_func_and_arity_check_builtin_func_call",
            "location": 1224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmitOptimizedFuncTestCase.test_removed_is_func_check_builtin_call_with_type_info": {
            "name": "test_removed_is_func_check_builtin_call_with_type_info",
            "location": 1239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmitOptimizedFuncTestCase.test_would_be_tail_call_wrong_arity_with_type_info": {
            "name": "test_would_be_tail_call_wrong_arity_with_type_info",
            "location": 1260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmitOptimizedFuncTestCase.test_would_be_tail_call_wrong_arity_no_type_info": {
            "name": "test_would_be_tail_call_wrong_arity_no_type_info",
            "location": 1280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmitOptimizedFuncTestCase.test_tail_call_right_arity_no_type_info": {
            "name": "test_tail_call_right_arity_no_type_info",
            "location": 1308,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmitOptimizedFuncTestCase.test_tail_call_vector_make_recur_no_type_info": {
            "name": "test_tail_call_vector_make_recur_no_type_info",
            "location": 1322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmitOptimizedFuncTestCase.test_tail_call_in_specialized": {
            "name": "test_tail_call_in_specialized",
            "location": 1396,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmitOptimizedFuncTestCase.test_tail_call_in_specialized_vector_make_recur": {
            "name": "test_tail_call_in_specialized_vector_make_recur",
            "location": 1420,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmitOptimizedFuncTestCase.test_tail_call_in_specialized_code_mismatching_arg_types": {
            "name": "test_tail_call_in_specialized_code_mismatching_arg_types",
            "location": 1470,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmitOptimizedFuncTestCase.test_remove_is_function_assertion_arity_known": {
            "name": "test_remove_is_function_assertion_arity_known",
            "location": 1494,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmitOptimizedFuncTestCase.test_remove_is_function_assertion_arity_unknown": {
            "name": "test_remove_is_function_assertion_arity_unknown",
            "location": 1510,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmitOptimizedFuncTestCase.test_non_func_assertion_not_removed": {
            "name": "test_non_func_assertion_not_removed",
            "location": 1526,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmitOptimizedFuncTestCase.test_remove_is_vector_assertion_size_known": {
            "name": "test_remove_is_vector_assertion_size_known",
            "location": 1548,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmitOptimizedFuncTestCase.test_remove_is_vector_assertion_size_unknown": {
            "name": "test_remove_is_vector_assertion_size_unknown",
            "location": 1564,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmitOptimizedFuncTestCase.test_no_remove_pair_assertion": {
            "name": "test_no_remove_pair_assertion",
            "location": 1580,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmitOptimizedFuncTestCase.test_no_remove_nil_assertion": {
            "name": "test_no_remove_nil_assertion",
            "location": 1600,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmitOptimizedFuncTestCase.test_non_vec_assert_not_removed": {
            "name": "test_non_vec_assert_not_removed",
            "location": 1620,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmitOptimizedFuncTestCase.test_eq_specialization_both_num": {
            "name": "test_eq_specialization_both_num",
            "location": 1642,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmitOptimizedFuncTestCase.test_eq_specialization_both_sym_lit": {
            "name": "test_eq_specialization_both_sym_lit",
            "location": 1672,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmitOptimizedFuncTestCase.test_eq_specialization_both_vector": {
            "name": "test_eq_specialization_both_vector",
            "location": 1690,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmitOptimizedFuncTestCase.test_eq_specialization_both_bool": {
            "name": "test_eq_specialization_both_bool",
            "location": 1709,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmitOptimizedFuncTestCase.test_eq_specialization_both_func": {
            "name": "test_eq_specialization_both_func",
            "location": 1727,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmitOptimizedFuncTestCase.test_eq_specialization_different_types": {
            "name": "test_eq_specialization_different_types",
            "location": 1746,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmitOptimizedFuncTestCase.test_remove_branch": {
            "name": "test_remove_branch",
            "location": 1762,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "scheme-jit-develop/test_find_tail_calls.py": {
        "TailCallFinderTestCase.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TailCallFinderTestCase.test_basic_tail_call": {
            "name": "test_basic_tail_call",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TailCallFinderTestCase.test_tail_call_in_conditional_then": {
            "name": "test_tail_call_in_conditional_then",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TailCallFinderTestCase.test_tail_call_in_begin": {
            "name": "test_tail_call_in_begin",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TailCallFinderTestCase.test_tail_call_in_conditional_else": {
            "name": "test_tail_call_in_conditional_else",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TailCallFinderTestCase.test_tail_call_in_conditional_both_branches": {
            "name": "test_tail_call_in_conditional_both_branches",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TailCallFinderTestCase.test_tail_call_in_one_branch_linear_call_in_other": {
            "name": "test_tail_call_in_one_branch_linear_call_in_other",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TailCallFinderTestCase.test_recursive_call_not_last_expr": {
            "name": "test_recursive_call_not_last_expr",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TailCallFinderTestCase.test_tail_call_has_recusive_call_as_args": {
            "name": "test_tail_call_has_recusive_call_as_args",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TailCallFinderTestCase.test_fib_tail": {
            "name": "test_fib_tail",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TailCallFinderTestCase.test_no_tail_calls_in_lambdas_dlist_code": {
            "name": "test_no_tail_calls_in_lambdas_dlist_code",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TailCallFinderTestCase.assert_symbol_in_tail_calls": {
            "name": "assert_symbol_in_tail_calls",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sym": [
                    "int",
                    "str"
                ],
                "tail_calls": [
                    "str",
                    "Dict[str,set[str]]",
                    "Dict[str,Set[str]]",
                    "Callable[[str],bool]",
                    "Callable"
                ]
            }
        }
    },
    "scheme-jit-develop/test_parser.py": {
        "ParserTestCase.test_to_slist": {
            "name": "test_to_slist",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTestCase.test_parse_atoms": {
            "name": "test_parse_atoms",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTestCase.test_parse_list": {
            "name": "test_parse_list",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTestCase.test_vector": {
            "name": "test_vector",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTestCase.test_quote": {
            "name": "test_quote",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTestCase.test_conditional": {
            "name": "test_conditional",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTestCase.test_function_def": {
            "name": "test_function_def",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTestCase.test_lambda": {
            "name": "test_lambda",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTestCase.test_lambda_called_inline": {
            "name": "test_lambda_called_inline",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTestCase.test_comments": {
            "name": "test_comments",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "scheme-jit-develop/test_scheme_types.py": {
        "FunctionTypeAnalyzerTestCase.test_quoted_symbol": {
            "name": "test_quoted_symbol",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionTypeAnalyzerTestCase.test_quoted_list": {
            "name": "test_quoted_list",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionTypeAnalyzerTestCase.test_vector_literal": {
            "name": "test_vector_literal",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionTypeAnalyzerTestCase.test_vector_literal_size_above_specialization_threshold": {
            "name": "test_vector_literal_size_above_specialization_threshold",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionTypeAnalyzerTestCase.test_num_literal": {
            "name": "test_num_literal",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionTypeAnalyzerTestCase.test_bool_literal": {
            "name": "test_bool_literal",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionTypeAnalyzerTestCase.test_sym_literal_not_function": {
            "name": "test_sym_literal_not_function",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionTypeAnalyzerTestCase.test_sym_literal_is_local_function": {
            "name": "test_sym_literal_is_local_function",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionTypeAnalyzerTestCase.test_sym_literal_is_builtin_function": {
            "name": "test_sym_literal_is_builtin_function",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionTypeAnalyzerTestCase.test_sym_literal_is_global_user_function": {
            "name": "test_sym_literal_is_global_user_function",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionTypeAnalyzerTestCase.test_function_def": {
            "name": "test_function_def",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionTypeAnalyzerTestCase.test_function_call_type_unknown": {
            "name": "test_function_call_type_unknown",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionTypeAnalyzerTestCase.test_builtin_function_call_type": {
            "name": "test_builtin_function_call_type",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionTypeAnalyzerTestCase.test_user_function_return_type_deduced": {
            "name": "test_user_function_return_type_deduced",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionTypeAnalyzerTestCase.test_conditional_same_type_branches": {
            "name": "test_conditional_same_type_branches",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionTypeAnalyzerTestCase.test_conditional_different_type_branches": {
            "name": "test_conditional_different_type_branches",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionTypeAnalyzerTestCase.test_conditional_exact_num_type_branches": {
            "name": "test_conditional_exact_num_type_branches",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionTypeAnalyzerTestCase.test_conditional_inexact_num_type_branches": {
            "name": "test_conditional_inexact_num_type_branches",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionTypeAnalyzerTestCase.test_conditional_exact_func_type_branches": {
            "name": "test_conditional_exact_func_type_branches",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionTypeAnalyzerTestCase.test_conditional_inexact_func_type_branches": {
            "name": "test_conditional_inexact_func_type_branches",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionTypeAnalyzerTestCase.test_conditional_inexact_func_return_type_branches": {
            "name": "test_conditional_inexact_func_return_type_branches",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionTypeAnalyzerTestCase.test_conditional_exact_vect_type_branches": {
            "name": "test_conditional_exact_vect_type_branches",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionTypeAnalyzerTestCase.test_conditional_inexact_vect_type_branches": {
            "name": "test_conditional_inexact_vect_type_branches",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionTypeAnalyzerTestCase.test_conditional_test_value_known_then_type_used": {
            "name": "test_conditional_test_value_known_then_type_used",
            "location": 334,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionTypeAnalyzerTestCase.test_conditional_test_value_known_else_type_used": {
            "name": "test_conditional_test_value_known_else_type_used",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionTypeAnalyzerTestCase.test_conditional_test_value_unknown_type_query_given_obj": {
            "name": "test_conditional_test_value_unknown_type_query_given_obj",
            "location": 374,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionTypeAnalyzerTestCase.test_vector_make_literal_size_val": {
            "name": "test_vector_make_literal_size_val",
            "location": 392,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionTypeAnalyzerTestCase.test_vector_make_unknown_size_val": {
            "name": "test_vector_make_unknown_size_val",
            "location": 407,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionTypeAnalyzerTestCase.test_vector_make_size_above_specialization_threshold": {
            "name": "test_vector_make_size_above_specialization_threshold",
            "location": 435,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionTypeAnalyzerTestCase.test_analyze_lambda_body": {
            "name": "test_analyze_lambda_body",
            "location": 450,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionTypeAnalyzerTestCase.test_analyze_begin": {
            "name": "test_analyze_begin",
            "location": 466,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConstExprTestCase.test_typeof_object": {
            "name": "test_typeof_object",
            "location": 482,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConstExprTestCase.test_typeof_value": {
            "name": "test_typeof_value",
            "location": 490,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConstExprTestCase.test_not_bool": {
            "name": "test_not_bool",
            "location": 517,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConstExprTestCase.test_not_object": {
            "name": "test_not_object",
            "location": 529,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "scheme-jit-develop/test_visitor.py": {
        "VisitorTestCase.test_visit_vect": {
            "name": "test_visit_vect",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VisitorTestCase.test_visit_quote": {
            "name": "test_visit_quote",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VisitorTestCase.test_visit_function": {
            "name": "test_visit_function",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VisitorTestCase.test_visit_lambda": {
            "name": "test_visit_lambda",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VisitorTestCase.test_visit_conditional": {
            "name": "test_visit_conditional",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VisitorTestCase.test_visit_call": {
            "name": "test_visit_call",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VisitorTestCase.test_visit_inline_called_lambda": {
            "name": "test_visit_inline_called_lambda",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VisitorTestCase.test_visit_begin": {
            "name": "test_visit_begin",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TraversalRecorder.__init__": {
            "name": "__init__",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TraversalRecorder.visit_SNum": {
            "name": "visit_SNum",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num": [
                    "sexp.SNum",
                    "sexp.SBool",
                    "sexp.SSym",
                    "sexp.SConditional",
                    "sexp.SVect",
                    "sexp.SBegin"
                ]
            }
        },
        "TraversalRecorder.visit_SBool": {
            "name": "visit_SBool",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sbool": [
                    "sexp.SBool",
                    "sexp.SSym",
                    "sexp.SConditional",
                    "sexp.SVect",
                    "sexp.SBegin",
                    "sexp.Quote"
                ]
            }
        },
        "TraversalRecorder.visit_SSym": {
            "name": "visit_SSym",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sym": [
                    "sexp.SSym",
                    "sexp.SConditional",
                    "sexp.SVect",
                    "sexp.SBegin",
                    "sexp.SBool",
                    "sexp.Quote"
                ]
            }
        },
        "TraversalRecorder.visit_SVect": {
            "name": "visit_SVect",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vect": [
                    "sexp.SSym",
                    "sexp.SConditional",
                    "sexp.SVect",
                    "sexp.SBegin",
                    "sexp.SBool",
                    "sexp.Quote"
                ]
            }
        },
        "TraversalRecorder.visit_SPair": {
            "name": "visit_SPair",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "sexp.SSym",
                    "sexp.SConditional",
                    "sexp.SVect",
                    "sexp.SBegin",
                    "sexp.SBool",
                    "sexp.Quote"
                ]
            }
        },
        "TraversalRecorder.visit_Quote": {
            "name": "visit_Quote",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "quote": [
                    "sexp.Quote",
                    "sexp.SSym",
                    "sexp.SConditional",
                    "sexp.SVect",
                    "sexp.SBegin",
                    "sexp.SBool"
                ]
            }
        },
        "TraversalRecorder.visit_SBegin": {
            "name": "visit_SBegin",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "begin": [
                    "sexp.SSym",
                    "sexp.SConditional",
                    "sexp.SVect",
                    "sexp.SBegin",
                    "sexp.SBool",
                    "sexp.Quote"
                ]
            }
        },
        "TraversalRecorder.visit_SFunction": {
            "name": "visit_SFunction",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "sexp.SFunction",
                    "sexp.SCall",
                    "sexp.SBool"
                ]
            }
        },
        "TraversalRecorder.visit_SCall": {
            "name": "visit_SCall",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "call": [
                    "sexp.SCall",
                    "sexp.SFunction",
                    "sexp.SBool"
                ]
            }
        },
        "TraversalRecorder.visit_SConditional": {
            "name": "visit_SConditional",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cond": [
                    "sexp.SSym",
                    "sexp.SConditional",
                    "sexp.SVect",
                    "sexp.SBegin",
                    "sexp.SBool",
                    "sexp.Quote"
                ]
            }
        },
        "ExpressionCounter.__init__": {
            "name": "__init__",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExpressionCounter.visit_SExp": {
            "name": "visit_SExp",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "sexp.SExp"
                ]
            }
        }
    },
    "scheme-jit-develop/visitor.py": {
        "Visitor.visit": {
            "name": "visit",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expr": []
            }
        },
        "Visitor.visit_SExp": {
            "name": "visit_SExp",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "bool",
                    "sexp.SExp"
                ]
            }
        },
        "Visitor.visit_SNum": {
            "name": "visit_SNum",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num": [
                    "bool",
                    "sexp.SNum"
                ]
            }
        },
        "Visitor.visit_SBool": {
            "name": "visit_SBool",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sbool": [
                    "Dict",
                    "List[None]",
                    "sexp.SBool",
                    "sexp.SSym"
                ]
            }
        },
        "Visitor.visit_SSym": {
            "name": "visit_SSym",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sym": [
                    "Dict",
                    "sexp.SSym",
                    "sexp.SBool"
                ]
            }
        },
        "Visitor.visit_SVect": {
            "name": "visit_SVect",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vect": [
                    "Dict[str,str]",
                    "int",
                    "sexp.SVect"
                ]
            }
        },
        "Visitor.visit_SPair": {
            "name": "visit_SPair",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "str",
                    "Dict",
                    "sexp.SBegin"
                ]
            }
        },
        "Visitor.visit_Quote": {
            "name": "visit_Quote",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "quote": [
                    "Dict",
                    "sexp.SBegin"
                ]
            }
        },
        "Visitor.visit_SBegin": {
            "name": "visit_SBegin",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "begin": [
                    "str",
                    "Dict",
                    "sexp.SBegin"
                ]
            }
        },
        "Visitor.visit_SFunction": {
            "name": "visit_SFunction",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "Visitor.visit_SCall": {
            "name": "visit_SCall",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "call": [
                    "sexp.SCall",
                    "sexp.SFunction"
                ]
            }
        },
        "Visitor.visit_SConditional": {
            "name": "visit_SConditional",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cond": [
                    "Exception"
                ]
            }
        }
    }
}
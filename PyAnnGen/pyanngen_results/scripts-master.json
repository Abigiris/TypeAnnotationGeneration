{
    "scripts-master/nvm_install.py": {
        "download": {
            "name": "download",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "url": [
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "filename": [
                    "str"
                ]
            }
        }
    },
    "scripts-master/archive/android_sdk_install.py": {
        "download": {
            "name": "download",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "url": [
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "filename": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "install": {
            "name": "install",
            "location": 52,
            "return": [
                "None",
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "base_url": [
                    "str",
                    "Union[None, str, List[str]]",
                    "None",
                    "Optional[str]",
                    "list[str]"
                ],
                "version": [
                    "int",
                    "float"
                ],
                "download_directory": [
                    "str",
                    "Union[None, str, List[str]]",
                    "None",
                    "Optional[str]",
                    "list[str]"
                ],
                "install_directory": [
                    "str",
                    "int"
                ],
                "shell_rcfile": [
                    "int",
                    "str",
                    "bytes",
                    "bool",
                    "None",
                    "Union[str, bytes]",
                    "Optional[str]"
                ],
                "os_name": [
                    "bool",
                    "str",
                    "int",
                    "list[str]",
                    "List[str]"
                ],
                "force": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "scripts-master/archive/commands.py": {
        "main": {
            "name": "main",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "run_interactive": {
            "name": "run_interactive",
            "location": 55,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "list_by_tag": {
            "name": "list_by_tag",
            "location": 60,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "tags": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "None",
                    "list[str]"
                ]
            }
        },
        "add_new_command": {
            "name": "add_new_command",
            "location": 69,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "command": [
                    "str"
                ],
                "tags": [
                    "str",
                    "Optional[str]",
                    "Optional[Hashable]",
                    "None",
                    "Optional[Set[str]]",
                    "typing.Hashable",
                    "set[str]"
                ]
            }
        }
    },
    "scripts-master/archive/download_control_notes.py": {},
    "scripts-master/archive/download_ELEN4017_slides.py": {},
    "scripts-master/archive/download_lab_mfiles.py": {},
    "scripts-master/archive/line_count.py": {
        "main": {
            "name": "main",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "scripts-master/archive/newFile.py": {
        "newFile": {
            "name": "newFile",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[Sequence[str]]"
                ],
                "ext": [
                    "str"
                ]
            }
        },
        "touchFile": {
            "name": "touchFile",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "replace_all": {
            "name": "replace_all",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "dic": [
                    "str"
                ]
            }
        },
        "newCppHeader": {
            "name": "newCppHeader",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "bool",
                    "IO",
                    "typing.IO",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "controller": {
            "name": "controller",
            "location": 64,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 97,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "scripts-master/archive/volume_notify.py": {
        "dbus_notify": {
            "name": "dbus_notify",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "volume": [
                    "str"
                ],
                "bar": [
                    "str"
                ]
            }
        },
        "bar": {
            "name": "bar",
            "location": 31,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "volume": [
                    "int",
                    "str",
                    "Tuple[int, int]",
                    "Iterator[Any]",
                    "Iterable[Any]"
                ]
            }
        },
        "getvolume": {
            "name": "getvolume",
            "location": 41,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "scripts-master/archive/witsproxy.py": {},
    "scripts-master/archive/ceaser/ceaser.py": {
        "parse_args": {
            "name": "parse_args",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "ceaser": {
            "name": "ceaser",
            "location": 41,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "text": [
                    "set[str]",
                    "str",
                    "list[str]",
                    "Set[str]",
                    "List[str]",
                    "bool"
                ],
                "shift": [
                    "int",
                    "str",
                    "Container[str]"
                ],
                "alphabet": [
                    "str",
                    "None",
                    "Optional[str]"
                ]
            }
        }
    },
    "scripts-master/archive/ceaser/with_click/ceaser.py": {
        "ceaser": {
            "name": "ceaser",
            "location": 13,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "text": [
                    "set[str]",
                    "str",
                    "list[str]",
                    "Set[str]",
                    "List[str]",
                    "bool"
                ],
                "shift": [
                    "int",
                    "str",
                    "Container[str]"
                ],
                "alphabet": [
                    "str",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "get_content": {
            "name": "get_content",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "shift": [
                    "str"
                ]
            }
        }
    },
    "scripts-master/archive/ceaser/with_click/setup.py": {
        "Roger.initialize_options": {
            "name": "initialize_options",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Roger.finalize_options": {
            "name": "finalize_options",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Roger.run": {
            "name": "run",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "scripts-master/archive/cima/main.py": {
        "Game.main": {
            "name": "main",
            "location": 9,
            "return": [
                "None",
                "Set[str]",
                "Iterable[str]",
                "Set[VT]",
                "Set[Tuple[int, int]]",
                "list"
            ],
            "arguments": {
                "self": [],
                "display": [
                    "str",
                    "Dict[str, int]",
                    "float",
                    "List[str]",
                    "int"
                ]
            }
        },
        "Walls.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "screen_size": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "Walls.create_walls": {
            "name": "create_walls",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "screen_size": [
                    "int",
                    "float",
                    "typing.Iterable[int]",
                    "bool",
                    "Iterable[int]"
                ]
            }
        },
        "Walls.update": {
            "name": "update",
            "location": 61,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "dt": [
                    "List[str]",
                    "list[str]",
                    "dict",
                    "dict[, ]"
                ],
                "game": [
                    "int",
                    "str"
                ]
            }
        },
        "Player.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Player.update": {
            "name": "update",
            "location": 76,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "dt": [
                    "List[str]",
                    "list[str]",
                    "dict",
                    "dict[, ]"
                ],
                "game": [
                    "List[str]",
                    "list[str]",
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "scripts-master/archive/lyconfig/main.py": {
        "EditableLabel.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EditableLabel.edit": {
            "name": "edit",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "Collection[int]",
                    "typing.Collection",
                    "Optional[Set[str]]",
                    "set[str]",
                    "Optional[str]",
                    "None",
                    "Mapping[str, T]",
                    "str",
                    "T",
                    "typing.Mapping"
                ]
            }
        },
        "EditableLabel.on_focus": {
            "name": "on_focus",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Tuple[int, int]",
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "float"
                ],
                "value": [
                    "Optional[BaseException]",
                    "BaseException",
                    "Callable[[str, object], None]",
                    "bool",
                    "None",
                    "Iterable[float]",
                    "typing.Callable[str,object, None]",
                    "typing.Iterable[float]"
                ]
            }
        },
        "EditableLabel.show": {
            "name": "show",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "textinput": [
                    "bool",
                    "None",
                    "int",
                    "BaseException",
                    "Optional[\"Outcome\"]",
                    "Optional[BaseException]"
                ]
            }
        },
        "FileList.filename_converter": {
            "name": "filename_converter",
            "location": 67,
            "return": [
                "dict[typing.Text, str]",
                "List[str]",
                "Iterator[str]",
                "Dict[str, Union[Any, Any, Any, Any, str]]",
                "list",
                "str"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "List[Tuple[str, str, str]]",
                    "list[tuple[typing.Union[str,str,str]]]"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "FileList.update": {
            "name": "update",
            "location": 74,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lyconfig.build": {
            "name": "build",
            "location": 84,
            "return": [
                "MainView",
                "str",
                "List[str]",
                "int",
                "List[Dict[str, str]]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lyconfig.build_config": {
            "name": "build_config",
            "location": 89,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[str, Any]",
                    "str",
                    "bool"
                ]
            }
        },
        "Lyconfig.build_settings": {
            "name": "build_settings",
            "location": 94,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "Callable",
                    "bool",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Lyconfig.set_wallpaper": {
            "name": "set_wallpaper",
            "location": 99,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "int",
                    "float",
                    "Union[float, int]"
                ]
            }
        },
        "Lyconfig.change_in_file": {
            "name": "change_in_file",
            "location": 109,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "bool",
                    "dict",
                    "dict[, ]"
                ],
                "new_wallpaper": [
                    "str",
                    "List[str]",
                    "list",
                    "bool",
                    "List[Tuple[Any, ...]]"
                ]
            }
        },
        "Lyconfig.rename": {
            "name": "rename",
            "location": 119,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "directory": [
                    "str",
                    "bool"
                ],
                "filename": [
                    "str",
                    "bool"
                ],
                "new_filename": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]"
                ]
            }
        }
    },
    "scripts-master/archive/lyconfig/settingsjson.py": {},
    "scripts-master/archive/searchreplace/searchreplace.py": {
        "main": {
            "name": "main",
            "location": 22,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "find_filenames": {
            "name": "find_filenames",
            "location": 60,
            "return": [
                "str",
                "list[]"
            ],
            "arguments": {
                "directory": [
                    "str"
                ],
                "extension": [
                    "typing.Text",
                    "str",
                    "Optional[str]"
                ],
                "is_recursive": [
                    "bool",
                    "str",
                    "List[str]",
                    "Iterable[Tuple[str, str, str]]"
                ],
                "ignore_str": [
                    "Optional[str]",
                    "None",
                    "Sequence[Optional[str]]",
                    "str",
                    "typing.Sequence[typing.Optional[str]]"
                ]
            }
        },
        "should_replace": {
            "name": "should_replace",
            "location": 88,
            "return": [
                "bool",
                "int",
                "List[Type]",
                "List[str]",
                "str"
            ],
            "arguments": {
                "searchterm": [
                    "str",
                    "re.Match[str]",
                    "typing.Callable[Any,Any, None]",
                    "Optional[Callable[[Any, Any], None]]",
                    "None"
                ],
                "line_info": [
                    "str",
                    "int"
                ]
            }
        },
        "search_replace": {
            "name": "search_replace",
            "location": 98,
            "return": [
                "None",
                "Union[tuple, list]",
                "Set[str]",
                "Iterator[object]"
            ],
            "arguments": {
                "searchterm": [
                    "str"
                ],
                "replaceterm": [
                    "str"
                ],
                "filename": [
                    "str"
                ],
                "confirm": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "scripts-master/archive/searchreplace/setup.py": {},
    "scripts-master/archive/searchreplace/tests.py": {
        "SearchReplace.setUp": {
            "name": "setUp",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchReplace.test_find_filenames_non_recursive": {
            "name": "test_find_filenames_non_recursive",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchReplace.test_find_filenames_non_recursive_with_ignored": {
            "name": "test_find_filenames_non_recursive_with_ignored",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchReplace.test_find_filenames_recursively_in_directories": {
            "name": "test_find_filenames_recursively_in_directories",
            "location": 53,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchReplace.test_find_filenames_recursively_in_directories_without_ignored": {
            "name": "test_find_filenames_recursively_in_directories_without_ignored",
            "location": 60,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchReplace.test_find_only_files_with_extension": {
            "name": "test_find_only_files_with_extension",
            "location": 69,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchReplace.test_find_only_files_with_extension_non_recursive": {
            "name": "test_find_only_files_with_extension_non_recursive",
            "location": 76,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchReplace.tearDown": {
            "name": "tearDown",
            "location": 81,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "scripts-master/extract_todos/extract_todos.py": {
        "parse_args": {
            "name": "parse_args",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "find_filenames": {
            "name": "find_filenames",
            "location": 51,
            "return": [
                "str",
                "list[]"
            ],
            "arguments": {
                "directory": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "extension": [
                    "str",
                    "bytes",
                    "bool",
                    "int"
                ],
                "is_recursive": [
                    "str",
                    "bool"
                ]
            }
        },
        "search_replace": {
            "name": "search_replace",
            "location": 73,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "bool"
                ],
                "outputfile": [
                    "str",
                    "typing.Text"
                ]
            }
        }
    },
    "scripts-master/ftpdown/ftpdown.py": {
        "file_links": {
            "name": "file_links",
            "location": 39,
            "return": [
                "list[]",
                "str",
                "set",
                "bool"
            ],
            "arguments": {
                "inputs": [
                    "str",
                    "float",
                    "int",
                    "Optional[int]",
                    "None",
                    "bool"
                ],
                "ns": [
                    "dict[typing.Text, typing.Text]",
                    "str",
                    "float",
                    "Optional[int]",
                    "int",
                    "bool"
                ]
            }
        },
        "file_links.get_link": {
            "name": "get_link",
            "location": 55,
            "return": [
                "Link",
                "str",
                "dict",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {
                "node": [
                    "list",
                    "bytes"
                ]
            }
        }
    },
    "scripts-master/odisplay/odisplay.py": {
        "parse_args": {
            "name": "parse_args",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "switch_on": {
            "name": "switch_on",
            "location": 64,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "position": [
                    "str",
                    "int"
                ],
                "size": [
                    "str",
                    "int",
                    "float",
                    "Callable[[str], int]"
                ]
            }
        },
        "switch_off": {
            "name": "switch_off",
            "location": 81,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "notify": {
            "name": "notify",
            "location": 89,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "message": [
                    "str",
                    "bool"
                ]
            }
        },
        "run_command": {
            "name": "run_command",
            "location": 97,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "command": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "auto_run": {
            "name": "auto_run",
            "location": 105,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "scripts-master/tmux_sel/sel.py": {
        "running": {
            "name": "running",
            "location": 7,
            "return": [
                "list[]",
                "list[str]",
                "list",
                "int",
                "List[str]",
                "Iterable",
                "Optional[dict]"
            ],
            "arguments": {}
        },
        "static": {
            "name": "static",
            "location": 21,
            "return": [
                "list[]",
                "str",
                "Dict[str, Dict[str, int]]",
                "List[str]",
                "bool",
                "set",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "tmuxp_path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "make_cmd": {
            "name": "make_cmd",
            "location": 27,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "choice": [
                    "str"
                ]
            }
        },
        "combine": {
            "name": "combine",
            "location": 39,
            "return": [
                "bool",
                "int",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "running": [
                    "bytes",
                    "Iterable"
                ],
                "static": [
                    "dict[str, typing.Any]",
                    "bool",
                    "Iterator[Tuple[str, str]]",
                    "Dict[str, Any]"
                ]
            }
        }
    }
}
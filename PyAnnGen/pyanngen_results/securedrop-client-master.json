{
    "securedrop-client-master/create_dev_data.py": {},
    "securedrop-client-master/setup.py": {},
    "securedrop-client-master/alembic/env.py": {
        "run_migrations_offline": {
            "name": "run_migrations_offline",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_migrations_online": {
            "name": "run_migrations_online",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "securedrop-client-master/alembic/versions/2f363b3d680e_init.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "securedrop-client-master/alembic/versions/36a79ffcfbfb_add_first_name_last_name_fullname_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "securedrop-client-master/alembic/versions/7f682532afa2_add_download_error.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "securedrop-client-master/alembic/versions/86b01b6290da_add_reply_draft.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "securedrop-client-master/alembic/versions/bafdcae12f97_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "securedrop-client-master/alembic/versions/fb657f2ee8a7_drop_file_original_filename.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "securedrop-client-master/alembic/versions/fecf1191b6f0_remove_decryption_vs_content_contraint.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "securedrop-client-master/securedrop_client/app.py": {
        "init": {
            "name": "init",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "sdc_home": [
                    "str"
                ]
            }
        },
        "excepthook": {
            "name": "excepthook",
            "location": 49,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "configure_locale_and_language": {
            "name": "configure_locale_and_language",
            "location": 60,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "configure_logging": {
            "name": "configure_logging",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "sdc_home": [
                    "str"
                ]
            }
        },
        "configure_signal_handlers": {
            "name": "configure_signal_handlers",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "expand_to_absolute": {
            "name": "expand_to_absolute",
            "location": 128,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        },
        "arg_parser": {
            "name": "arg_parser",
            "location": 136,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "prevent_second_instance": {
            "name": "prevent_second_instance",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "str",
                    "Mapping[str, List[str]]",
                    "Optional[str]"
                ],
                "unique_name": [
                    "str"
                ]
            }
        },
        "start_app": {
            "name": "start_app",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [],
                "qt_args": [
                    "List[str]",
                    "bool",
                    "list[str]",
                    "str",
                    "dict",
                    "dict[, ]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "configure_signal_handlers.signal_handler": {
            "name": "signal_handler",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "securedrop-client-master/securedrop_client/config.py": {
        "Config.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "journalist_key_fingerprint": [
                    "str"
                ]
            }
        },
        "Config.from_home_dir": {
            "name": "from_home_dir",
            "location": 20,
            "return": [
                "T"
            ],
            "arguments": {
                "cls": [
                    "Type[T]"
                ],
                "sdc_home": [
                    "str"
                ]
            }
        },
        "Config.is_valid": {
            "name": "is_valid",
            "location": 33,
            "return": [
                "bool",
                "List[str]",
                "Sequence",
                "Tuple[str, List[str]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "securedrop-client-master/securedrop_client/crypto.py": {
        "read_gzip_header_filename": {
            "name": "read_gzip_header_filename",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "GpgHelper.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sdc_home": [
                    "str"
                ],
                "session_maker": [
                    "sqlalchemy.orm.scoping.scoped_session"
                ],
                "is_qubes": [
                    "bool"
                ]
            }
        },
        "GpgHelper.decrypt_submission_or_reply": {
            "name": "decrypt_submission_or_reply",
            "location": 91,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str"
                ],
                "plaintext_filepath": [
                    "str"
                ],
                "is_doc": [
                    "bool"
                ]
            }
        },
        "GpgHelper._gpg_cmd_base": {
            "name": "_gpg_cmd_base",
            "location": 135,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "GpgHelper.import_key": {
            "name": "import_key",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "securedrop_client.db.Source"
                ]
            }
        },
        "GpgHelper._import": {
            "name": "_import",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key_data": [
                    "str"
                ]
            }
        },
        "GpgHelper.encrypt_to_source": {
            "name": "encrypt_to_source",
            "location": 175,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "source_uuid": [
                    "str"
                ],
                "data": [
                    "str"
                ]
            }
        }
    },
    "securedrop-client-master/securedrop_client/db.py": {
        "make_session_maker": {
            "name": "make_session_maker",
            "location": 36,
            "return": [
                "sqlalchemy.orm.scoping.scoped_session"
            ],
            "arguments": {
                "home": [
                    "str"
                ]
            }
        },
        "Source.__repr__": {
            "name": "__repr__",
            "location": 58,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Source.collection": {
            "name": "collection",
            "location": 62,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Source.server_collection": {
            "name": "server_collection",
            "location": 80,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Source.journalist_filename": {
            "name": "journalist_filename",
            "location": 92,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.__init__": {
            "name": "__init__",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.__str__": {
            "name": "__str__",
            "location": 160,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.__repr__": {
            "name": "__repr__",
            "location": 171,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.location": {
            "name": "location",
            "location": 174,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "data_dir": [
                    "str"
                ]
            }
        },
        "File.__init__": {
            "name": "__init__",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "File.__str__": {
            "name": "__str__",
            "location": 240,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "File.__repr__": {
            "name": "__repr__",
            "location": 251,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "File.location": {
            "name": "location",
            "location": 254,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "data_dir": [
                    "str"
                ]
            }
        },
        "Reply.__init__": {
            "name": "__init__",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reply.__str__": {
            "name": "__str__",
            "location": 327,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reply.__repr__": {
            "name": "__repr__",
            "location": 338,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reply.location": {
            "name": "location",
            "location": 341,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "data_dir": [
                    "str"
                ]
            }
        },
        "DownloadError.__init__": {
            "name": "__init__",
            "location": 376,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "DownloadError.__repr__": {
            "name": "__repr__",
            "location": 380,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DownloadError.explain": {
            "name": "explain",
            "location": 383,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "classname": [
                    "str"
                ]
            }
        },
        "DraftReply.__init__": {
            "name": "__init__",
            "location": 413,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DraftReply.__str__": {
            "name": "__str__",
            "location": 416,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DraftReply.__repr__": {
            "name": "__repr__",
            "location": 425,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReplySendStatus.__init__": {
            "name": "__init__",
            "location": 436,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "ReplySendStatus.__repr__": {
            "name": "__repr__",
            "location": 440,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.__repr__": {
            "name": "__repr__",
            "location": 461,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.fullname": {
            "name": "fullname",
            "location": 465,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.initials": {
            "name": "initials",
            "location": 476,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "securedrop-client-master/securedrop_client/export.py": {
        "ExportError.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "str"
                ]
            }
        },
        "Export.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Export._export_archive": {
            "name": "_export_archive",
            "location": 93,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "Export"
                ],
                "archive_path": [
                    "str"
                ]
            }
        },
        "Export._create_archive": {
            "name": "_create_archive",
            "location": 124,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "Export"
                ],
                "archive_dir": [
                    "str"
                ],
                "archive_fn": [
                    "str"
                ],
                "metadata": [
                    "dict"
                ],
                "filepaths": [
                    "List[str]"
                ]
            }
        },
        "Export._add_virtual_file_to_archive": {
            "name": "_add_virtual_file_to_archive",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Export"
                ],
                "archive": [
                    "tarfile.TarFile"
                ],
                "filename": [
                    "str"
                ],
                "filedata": [
                    "dict"
                ]
            }
        },
        "Export._add_file_to_archive": {
            "name": "_add_file_to_archive",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Export"
                ],
                "archive": [
                    "tarfile.TarFile"
                ],
                "filepath": [
                    "str"
                ]
            }
        },
        "Export._run_printer_preflight": {
            "name": "_run_printer_preflight",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "archive_dir": [
                    "str"
                ]
            }
        },
        "Export._run_usb_test": {
            "name": "_run_usb_test",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "archive_dir": [
                    "str"
                ]
            }
        },
        "Export._run_disk_test": {
            "name": "_run_disk_test",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "archive_dir": [
                    "str"
                ]
            }
        },
        "Export._run_disk_export": {
            "name": "_run_disk_export",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "archive_dir": [
                    "str"
                ],
                "filepaths": [
                    "List[str]"
                ],
                "passphrase": [
                    "str"
                ]
            }
        },
        "Export._run_print": {
            "name": "_run_print",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "archive_dir": [
                    "str"
                ],
                "filepaths": [
                    "List[str]"
                ]
            }
        },
        "Export.run_preflight_checks": {
            "name": "run_preflight_checks",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Export.run_printer_preflight": {
            "name": "run_printer_preflight",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Export.send_file_to_usb_device": {
            "name": "send_file_to_usb_device",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepaths": [
                    "str",
                    "list[str]",
                    "tuple[str]",
                    "int"
                ],
                "passphrase": [
                    "str",
                    "list[str]",
                    "tuple[str]",
                    "int"
                ]
            }
        },
        "Export.print": {
            "name": "print",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepaths": [
                    "bytes",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "securedrop-client-master/securedrop_client/logic.py": {
        "login_required": {
            "name": "login_required",
            "location": 67,
            "return": [
                "Callable"
            ],
            "arguments": {
                "f": []
            }
        },
        "login_required.decorated_function": {
            "name": "decorated_function",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "APICallRunner.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api_call": [],
                "current_object": []
            }
        },
        "APICallRunner.call_api": {
            "name": "call_api",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Controller.__init__": {
            "name": "__init__",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hostname": [
                    "str"
                ],
                "gui": [],
                "session_maker": [
                    "sqlalchemy.orm.session.sessionmaker"
                ],
                "home": [
                    "str"
                ],
                "proxy": [
                    "bool"
                ],
                "qubes": [
                    "bool"
                ]
            }
        },
        "Controller.is_authenticated": {
            "name": "is_authenticated",
            "location": 339,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Controller.setup": {
            "name": "setup",
            "location": 342,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Controller.call_api": {
            "name": "call_api",
            "location": 365,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api_call_func": [],
                "success_callback": [],
                "failure_callback": []
            }
        },
        "Controller.on_queue_paused": {
            "name": "on_queue_paused",
            "location": 405,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Controller.resume_queues": {
            "name": "resume_queues",
            "location": 411,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Controller.completed_api_call": {
            "name": "completed_api_call",
            "location": 418,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "thread_id": [],
                "user_callback": []
            }
        },
        "Controller.login": {
            "name": "login",
            "location": 435,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [],
                "password": [],
                "totp": []
            }
        },
        "Controller.on_authenticate_success": {
            "name": "on_authenticate_success",
            "location": 454,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result": []
            }
        },
        "Controller.on_authenticate_failure": {
            "name": "on_authenticate_failure",
            "location": 475,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "Exception"
                ]
            }
        },
        "Controller.login_offline_mode": {
            "name": "login_offline_mode",
            "location": 485,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Controller.on_action_requiring_login": {
            "name": "on_action_requiring_login",
            "location": 500,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Controller.authenticated": {
            "name": "authenticated",
            "location": 507,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Controller.get_last_sync": {
            "name": "get_last_sync",
            "location": 514,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Controller.on_sync_started": {
            "name": "on_sync_started",
            "location": 524,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Controller.on_sync_success": {
            "name": "on_sync_success",
            "location": 527,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Controller.on_sync_failure": {
            "name": "on_sync_failure",
            "location": 549,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "Exception"
                ]
            }
        },
        "Controller.show_last_sync": {
            "name": "show_last_sync",
            "location": 570,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Controller.update_sources": {
            "name": "update_sources",
            "location": 576,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Controller.on_update_star_success": {
            "name": "on_update_star_success",
            "location": 583,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_uuid": [
                    "str"
                ]
            }
        },
        "Controller.on_update_star_failure": {
            "name": "on_update_star_failure",
            "location": 586,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error": [
                    "Union[(securedrop_client.api_jobs.updatestar.UpdateStarJobError, securedrop_client.api_jobs.updatestar.UpdateStarJobTimeoutError)]"
                ]
            }
        },
        "Controller.update_star": {
            "name": "update_star",
            "location": 595,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_uuid": [],
                "is_starred": []
            }
        },
        "Controller.logout": {
            "name": "logout",
            "location": 604,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Controller.invalidate_token": {
            "name": "invalidate_token",
            "location": 630,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Controller.set_status": {
            "name": "set_status",
            "location": 633,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [],
                "duration": []
            }
        },
        "Controller._submit_download_job": {
            "name": "_submit_download_job",
            "location": 641,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "object_type": [],
                "uuid": []
            }
        },
        "Controller.download_new_messages": {
            "name": "download_new_messages",
            "location": 662,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Controller.on_message_download_success": {
            "name": "on_message_download_success",
            "location": 676,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "str"
                ]
            }
        },
        "Controller.on_message_download_failure": {
            "name": "on_message_download_failure",
            "location": 684,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exception": [
                    "securedrop_client.api_jobs.downloads.DownloadException"
                ]
            }
        },
        "Controller.download_new_replies": {
            "name": "download_new_replies",
            "location": 700,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Controller.on_reply_download_success": {
            "name": "on_reply_download_success",
            "location": 710,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "str"
                ]
            }
        },
        "Controller.on_reply_download_failure": {
            "name": "on_reply_download_failure",
            "location": 718,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exception": [
                    "securedrop_client.api_jobs.downloads.DownloadException"
                ]
            }
        },
        "Controller.downloaded_file_exists": {
            "name": "downloaded_file_exists",
            "location": 734,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "db.File"
                ]
            }
        },
        "Controller.on_file_open": {
            "name": "on_file_open",
            "location": 754,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "db.File"
                ]
            }
        },
        "Controller.run_printer_preflight_checks": {
            "name": "run_printer_preflight_checks",
            "location": 772,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Controller.run_export_preflight_checks": {
            "name": "run_export_preflight_checks",
            "location": 784,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Controller.export_file_to_usb_drive": {
            "name": "export_file_to_usb_drive",
            "location": 796,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_uuid": [
                    "str"
                ],
                "passphrase": [
                    "str"
                ]
            }
        },
        "Controller.print_file": {
            "name": "print_file",
            "location": 815,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_uuid": [
                    "str"
                ]
            }
        },
        "Controller.on_submission_download": {
            "name": "on_submission_download",
            "location": 833,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "submission_type": [],
                "submission_uuid": []
            }
        },
        "Controller.on_file_download_success": {
            "name": "on_file_download_success",
            "location": 841,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uuid": []
            }
        },
        "Controller.on_file_download_failure": {
            "name": "on_file_download_failure",
            "location": 852,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exception": [
                    "Exception"
                ]
            }
        },
        "Controller.on_delete_source_success": {
            "name": "on_delete_source_success",
            "location": 867,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_uuid": [
                    "str"
                ]
            }
        },
        "Controller.on_delete_source_failure": {
            "name": "on_delete_source_failure",
            "location": 873,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "Exception"
                ]
            }
        },
        "Controller.delete_source": {
            "name": "delete_source",
            "location": 880,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": []
            }
        },
        "Controller.send_reply": {
            "name": "send_reply",
            "location": 897,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_uuid": [],
                "reply_uuid": [],
                "message": []
            }
        },
        "Controller.on_reply_success": {
            "name": "on_reply_success",
            "location": 927,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reply_uuid": [
                    "str"
                ]
            }
        },
        "Controller.on_reply_failure": {
            "name": "on_reply_failure",
            "location": 933,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exception": [
                    "Union[(securedrop_client.api_jobs.uploads.SendReplyJobError, securedrop_client.api_jobs.uploads.SendReplyJobTimeoutError)]"
                ]
            }
        },
        "Controller.get_file": {
            "name": "get_file",
            "location": 942,
            "return": [
                "db.File"
            ],
            "arguments": {
                "self": [],
                "file_uuid": [
                    "str"
                ]
            }
        },
        "Controller.on_logout_success": {
            "name": "on_logout_success",
            "location": 947,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result": []
            }
        },
        "Controller.on_logout_failure": {
            "name": "on_logout_failure",
            "location": 950,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "Exception"
                ]
            }
        }
    },
    "securedrop-client-master/securedrop_client/queue.py": {
        "RunnableQueue.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api_client": [
                    "typing.Callable[, ]"
                ],
                "session_maker": [
                    "sqlalchemy.orm.scoping.scoped_session"
                ]
            }
        },
        "RunnableQueue._check_for_duplicate_jobs": {
            "name": "_check_for_duplicate_jobs",
            "location": 85,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "job": [
                    "securedrop_client.api_jobs.base.ApiJob"
                ]
            }
        },
        "RunnableQueue.add_job": {
            "name": "add_job",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job": [
                    "securedrop_client.api_jobs.base.ApiJob"
                ]
            }
        },
        "RunnableQueue._re_add_job": {
            "name": "_re_add_job",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job": [
                    "securedrop_client.api_jobs.base.ApiJob"
                ]
            }
        },
        "RunnableQueue.process": {
            "name": "process",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiJobQueue.__init__": {
            "name": "__init__",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api_client": [],
                "session_maker": [
                    "sqlalchemy.orm.scoping.scoped_session"
                ]
            }
        },
        "ApiJobQueue.start": {
            "name": "start",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api_client": [
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "ApiJobQueue.stop": {
            "name": "stop",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiJobQueue.on_main_queue_paused": {
            "name": "on_main_queue_paused",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiJobQueue.on_file_download_queue_paused": {
            "name": "on_file_download_queue_paused",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiJobQueue.resume_queues": {
            "name": "resume_queues",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiJobQueue.enqueue": {
            "name": "enqueue",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job": [
                    "typing.Mapping"
                ]
            }
        }
    },
    "securedrop-client-master/securedrop_client/storage.py": {
        "get_local_sources": {
            "name": "get_local_sources",
            "location": 53,
            "return": [
                "List[securedrop_client.db.Source]"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "delete_local_source_by_uuid": {
            "name": "delete_local_source_by_uuid",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.session.Session"
                ],
                "uuid": [
                    "str"
                ],
                "data_dir": [
                    "str"
                ]
            }
        },
        "get_local_messages": {
            "name": "get_local_messages",
            "location": 72,
            "return": [
                "List[securedrop_client.db.Message]"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "get_local_files": {
            "name": "get_local_files",
            "location": 79,
            "return": [
                "List[securedrop_client.db.File]"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "get_local_replies": {
            "name": "get_local_replies",
            "location": 86,
            "return": [
                "List[securedrop_client.db.Reply]"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "get_remote_data": {
            "name": "get_remote_data",
            "location": 93,
            "return": [
                "Tuple[(list, list, list)]"
            ],
            "arguments": {
                "api": []
            }
        },
        "update_local_storage": {
            "name": "update_local_storage",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.session.Session"
                ],
                "remote_sources": [
                    "list"
                ],
                "remote_submissions": [
                    "list"
                ],
                "remote_replies": [
                    "list"
                ],
                "data_dir": [
                    "str"
                ]
            }
        },
        "lazy_setattr": {
            "name": "lazy_setattr",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "o": [
                    "str",
                    "int"
                ],
                "a": [
                    "str"
                ],
                "v": [
                    "str",
                    "int"
                ]
            }
        },
        "update_sources": {
            "name": "update_sources",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "remote_sources": [
                    "list"
                ],
                "local_sources": [
                    "List[securedrop_client.db.Source]"
                ],
                "session": [
                    "sqlalchemy.orm.session.Session"
                ],
                "data_dir": [
                    "str"
                ]
            }
        },
        "update_files": {
            "name": "update_files",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "remote_submissions": [
                    "list"
                ],
                "local_submissions": [
                    "List[securedrop_client.db.File]"
                ],
                "session": [
                    "sqlalchemy.orm.session.Session"
                ],
                "data_dir": [
                    "str"
                ]
            }
        },
        "update_messages": {
            "name": "update_messages",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "remote_submissions": [
                    "list"
                ],
                "local_submissions": [
                    "List[securedrop_client.db.Message]"
                ],
                "session": [
                    "sqlalchemy.orm.session.Session"
                ],
                "data_dir": [
                    "str"
                ]
            }
        },
        "__update_submissions": {
            "name": "__update_submissions",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "Type[Union[(securedrop_client.db.File, securedrop_client.db.Message)]]"
                ],
                "remote_submissions": [
                    "list"
                ],
                "local_submissions": [
                    "List[Union[(securedrop_client.db.File, securedrop_client.db.Message)]]"
                ],
                "session": [
                    "sqlalchemy.orm.session.Session"
                ],
                "data_dir": [
                    "str"
                ]
            }
        },
        "update_replies": {
            "name": "update_replies",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "remote_replies": [
                    "list"
                ],
                "local_replies": [
                    "List[securedrop_client.db.Reply]"
                ],
                "session": [
                    "sqlalchemy.orm.session.Session"
                ],
                "data_dir": [
                    "str"
                ]
            }
        },
        "find_or_create_user": {
            "name": "find_or_create_user",
            "location": 360,
            "return": [
                "securedrop_client.db.User"
            ],
            "arguments": {
                "uuid": [
                    "str"
                ],
                "username": [
                    "str"
                ],
                "session": [
                    "sqlalchemy.orm.session.Session"
                ],
                "commit": [
                    "bool"
                ]
            }
        },
        "update_and_get_user": {
            "name": "update_and_get_user",
            "location": 384,
            "return": [
                "securedrop_client.db.User"
            ],
            "arguments": {
                "uuid": [
                    "str"
                ],
                "username": [
                    "str"
                ],
                "firstname": [
                    "str"
                ],
                "lastname": [
                    "str"
                ],
                "session": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "update_missing_files": {
            "name": "update_missing_files",
            "location": 403,
            "return": [
                "List[securedrop_client.db.File]"
            ],
            "arguments": {
                "data_dir": [
                    "str"
                ],
                "session": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "update_draft_replies": {
            "name": "update_draft_replies",
            "location": 416,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.session.Session"
                ],
                "source_id": [
                    "int"
                ],
                "timestamp": [
                    "_datetime.datetime"
                ],
                "old_file_counter": [
                    "int"
                ],
                "new_file_counter": [
                    "int"
                ],
                "commit": [
                    "bool"
                ]
            }
        },
        "find_new_files": {
            "name": "find_new_files",
            "location": 467,
            "return": [
                "List[securedrop_client.db.File]"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "find_new_messages": {
            "name": "find_new_messages",
            "location": 473,
            "return": [
                "List[securedrop_client.db.Message]"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "find_new_replies": {
            "name": "find_new_replies",
            "location": 497,
            "return": [
                "List[securedrop_client.db.Reply]"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "mark_as_not_downloaded": {
            "name": "mark_as_not_downloaded",
            "location": 521,
            "return": [
                "None"
            ],
            "arguments": {
                "uuid": [
                    "str"
                ],
                "session": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "mark_as_downloaded": {
            "name": "mark_as_downloaded",
            "location": 532,
            "return": [
                "None"
            ],
            "arguments": {
                "model_type": [
                    "Type[Union[(securedrop_client.db.File, securedrop_client.db.Message, securedrop_client.db.Reply)]]"
                ],
                "uuid": [
                    "str"
                ],
                "session": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "update_file_size": {
            "name": "update_file_size",
            "location": 544,
            "return": [
                "None"
            ],
            "arguments": {
                "uuid": [
                    "str"
                ],
                "path": [
                    "str"
                ],
                "session": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "mark_as_decrypted": {
            "name": "mark_as_decrypted",
            "location": 555,
            "return": [
                "None"
            ],
            "arguments": {
                "model_type": [
                    "Type[Union[(securedrop_client.db.File, securedrop_client.db.Message, securedrop_client.db.Reply)]]"
                ],
                "uuid": [
                    "str"
                ],
                "session": [
                    "sqlalchemy.orm.session.Session"
                ],
                "is_decrypted": [
                    "bool"
                ],
                "original_filename": [
                    "str"
                ]
            }
        },
        "set_message_or_reply_content": {
            "name": "set_message_or_reply_content",
            "location": 575,
            "return": [
                "None"
            ],
            "arguments": {
                "model_type": [
                    "Type[Union[(securedrop_client.db.Message, securedrop_client.db.Reply)]]"
                ],
                "uuid": [
                    "str"
                ],
                "content": [
                    "str"
                ],
                "session": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "delete_source_collection": {
            "name": "delete_source_collection",
            "location": 588,
            "return": [
                "None"
            ],
            "arguments": {
                "journalist_filename": [
                    "str"
                ],
                "data_dir": [
                    "str"
                ]
            }
        },
        "delete_single_submission_or_reply_on_disk": {
            "name": "delete_single_submission_or_reply_on_disk",
            "location": 597,
            "return": [
                "None"
            ],
            "arguments": {
                "obj_db": [
                    "Union[(securedrop_client.db.File, securedrop_client.db.Message, securedrop_client.db.Reply)]"
                ],
                "data_dir": [
                    "str"
                ]
            }
        },
        "source_exists": {
            "name": "source_exists",
            "location": 617,
            "return": [
                "bool"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.session.Session"
                ],
                "source_uuid": [
                    "str"
                ]
            }
        },
        "get_file": {
            "name": "get_file",
            "location": 625,
            "return": [
                "securedrop_client.db.File"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.session.Session"
                ],
                "uuid": [
                    "str"
                ]
            }
        },
        "get_message": {
            "name": "get_message",
            "location": 629,
            "return": [
                "securedrop_client.db.Message"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.session.Session"
                ],
                "uuid": [
                    "str"
                ]
            }
        },
        "get_reply": {
            "name": "get_reply",
            "location": 633,
            "return": [
                "securedrop_client.db.Reply"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.session.Session"
                ],
                "uuid": [
                    "str"
                ]
            }
        },
        "mark_all_pending_drafts_as_failed": {
            "name": "mark_all_pending_drafts_as_failed",
            "location": 637,
            "return": [
                "List[securedrop_client.db.DraftReply]"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "clear_download_errors": {
            "name": "clear_download_errors",
            "location": 657,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        }
    },
    "securedrop-client-master/securedrop_client/sync.py": {
        "ApiSync.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api_client": [
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "session_maker": [
                    "sqlalchemy.orm.scoping.scoped_session"
                ],
                "gpg": [
                    "securedrop_client.crypto.GpgHelper"
                ],
                "data_dir": [
                    "str"
                ]
            }
        },
        "ApiSync.start": {
            "name": "start",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api_client": [
                    "str"
                ]
            }
        },
        "ApiSync.stop": {
            "name": "stop",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiSync.on_sync_success": {
            "name": "on_sync_success",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiSync.on_sync_failure": {
            "name": "on_sync_failure",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "Exception"
                ]
            }
        },
        "ApiSyncBackgroundTask.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api_client": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "session_maker": [
                    "sqlalchemy.orm.scoping.scoped_session"
                ],
                "gpg": [
                    "securedrop_client.crypto.GpgHelper"
                ],
                "data_dir": [
                    "str"
                ],
                "sync_started": [
                    "list",
                    "str",
                    "list[]",
                    "int"
                ],
                "on_sync_success": [
                    "dict",
                    "dict[, ]"
                ],
                "on_sync_failure": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "ApiSyncBackgroundTask.sync": {
            "name": "sync",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "securedrop-client-master/securedrop_client/utils.py": {
        "safe_mkdir": {
            "name": "safe_mkdir",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "sdc_home": [
                    "str"
                ],
                "relative_path": [
                    "str"
                ]
            }
        },
        "check_dir_permissions": {
            "name": "check_dir_permissions",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "dir_path": [
                    "str"
                ]
            }
        },
        "split_path": {
            "name": "split_path",
            "location": 55,
            "return": [
                "list"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "humanize_filesize": {
            "name": "humanize_filesize",
            "location": 66,
            "return": [
                "str"
            ],
            "arguments": {
                "filesize": [
                    "int"
                ]
            }
        },
        "chronometer": {
            "name": "chronometer",
            "location": 80,
            "return": [
                "typing.Generator",
                "typing.Generator[]"
            ],
            "arguments": {
                "logger": [
                    "str",
                    "logging.Logger",
                    "List[str]"
                ],
                "description": [
                    "str",
                    "list[str]",
                    "logging.Logger",
                    "List[str]"
                ]
            }
        },
        "SourceCache.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "SourceCache.get": {
            "name": "get",
            "location": 102,
            "return": [
                "Optional[db.Source]"
            ],
            "arguments": {
                "self": [],
                "source_uuid": [
                    "str"
                ]
            }
        }
    },
    "securedrop-client-master/securedrop_client/__init__.py": {},
    "securedrop-client-master/securedrop_client/__main__.py": {},
    "securedrop-client-master/securedrop_client/api_jobs/base.py": {
        "ApiInaccessibleError.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Optional[str]"
                ]
            }
        },
        "QueueJob.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueueJob.__lt__": {
            "name": "__lt__",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "QueueJobType"
                ]
            }
        },
        "PauseQueueJob.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiJob.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "remaining_attempts": [
                    "int"
                ]
            }
        },
        "ApiJob._do_call_api": {
            "name": "_do_call_api",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api_client": [
                    "str"
                ],
                "session": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "ApiJob.call_api": {
            "name": "call_api",
            "location": 87,
            "return": [
                "typing.Any",
                "None"
            ],
            "arguments": {
                "self": [],
                "api_client": [
                    "str",
                    "sqlalchemy.orm.session.Session",
                    "typing.Callable[p, None]",
                    "bool",
                    "Callable[[str, List], None]",
                    "int"
                ],
                "session": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "SingleObjectApiJob.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "str"
                ],
                "remaining_attempts": [
                    "int"
                ]
            }
        },
        "SingleObjectApiJob.__repr__": {
            "name": "__repr__",
            "location": 107,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SingleObjectApiJob.__eq__": {
            "name": "__eq__",
            "location": 110,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "str",
                    "Optional[\"Scope\"]",
                    "None"
                ]
            }
        }
    },
    "securedrop-client-master/securedrop_client/api_jobs/downloads.py": {
        "DownloadException.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ],
                "object_type": [
                    "Type[Union[(securedrop_client.db.File, securedrop_client.db.Message, securedrop_client.db.Reply)]]"
                ],
                "uuid": [
                    "str"
                ]
            }
        },
        "DownloadJob.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_dir": [
                    "str"
                ],
                "uuid": [
                    "str"
                ]
            }
        },
        "DownloadJob._get_realistic_timeout": {
            "name": "_get_realistic_timeout",
            "location": 59,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "size_in_bytes": [
                    "int"
                ]
            }
        },
        "DownloadJob.call_download_api": {
            "name": "call_download_api",
            "location": 92,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {
                "self": [],
                "api": [
                    "bool"
                ],
                "db_object": [
                    "Union[(securedrop_client.db.File, securedrop_client.db.Message, securedrop_client.db.Reply)]"
                ]
            }
        },
        "DownloadJob.call_decrypt": {
            "name": "call_decrypt",
            "location": 103,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str"
                ],
                "session": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "DownloadJob.get_db_object": {
            "name": "get_db_object",
            "location": 113,
            "return": [
                "Union[(securedrop_client.db.File, securedrop_client.db.Message)]"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "DownloadJob.call_api": {
            "name": "call_api",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "api_client": [
                    "str"
                ],
                "session": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "DownloadJob._download": {
            "name": "_download",
            "location": 140,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "api": [
                    "str"
                ],
                "db_object": [
                    "Union[(securedrop_client.db.File, securedrop_client.db.Message, securedrop_client.db.Reply)]"
                ],
                "session": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "DownloadJob._decrypt": {
            "name": "_decrypt",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str"
                ],
                "db_object": [
                    "Union[(securedrop_client.db.File, securedrop_client.db.Message, securedrop_client.db.Reply)]"
                ],
                "session": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "DownloadJob._check_file_integrity": {
            "name": "_check_file_integrity",
            "location": 202,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "typing.BinaryIO",
                    "dict[, ]"
                ],
                "etag": [
                    "str"
                ],
                "file_path": [
                    "str"
                ]
            }
        },
        "ReplyDownloadJob.__init__": {
            "name": "__init__",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "str"
                ],
                "data_dir": [
                    "str"
                ],
                "gpg": [
                    "securedrop_client.crypto.GpgHelper"
                ]
            }
        },
        "ReplyDownloadJob.get_db_object": {
            "name": "get_db_object",
            "location": 242,
            "return": [
                "securedrop_client.db.Reply"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "ReplyDownloadJob.call_download_api": {
            "name": "call_download_api",
            "location": 248,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {
                "self": [],
                "api": [
                    "str"
                ],
                "db_object": [
                    "securedrop_client.db.Reply"
                ]
            }
        },
        "ReplyDownloadJob.call_decrypt": {
            "name": "call_decrypt",
            "location": 261,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str"
                ],
                "session": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "MessageDownloadJob.__init__": {
            "name": "__init__",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "str"
                ],
                "data_dir": [
                    "str"
                ],
                "gpg": [
                    "securedrop_client.crypto.GpgHelper"
                ]
            }
        },
        "MessageDownloadJob.get_db_object": {
            "name": "get_db_object",
            "location": 298,
            "return": [
                "securedrop_client.db.Message"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "MessageDownloadJob.call_download_api": {
            "name": "call_download_api",
            "location": 304,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {
                "self": [],
                "api": [],
                "db_object": [
                    "securedrop_client.db.Message"
                ]
            }
        },
        "MessageDownloadJob.call_decrypt": {
            "name": "call_decrypt",
            "location": 315,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str"
                ],
                "session": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "FileDownloadJob.__init__": {
            "name": "__init__",
            "location": 350,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "str"
                ],
                "data_dir": [
                    "str"
                ],
                "gpg": [
                    "securedrop_client.crypto.GpgHelper"
                ]
            }
        },
        "FileDownloadJob.get_db_object": {
            "name": "get_db_object",
            "location": 354,
            "return": [
                "securedrop_client.db.File"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "FileDownloadJob.call_download_api": {
            "name": "call_download_api",
            "location": 360,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {
                "self": [],
                "api": [],
                "db_object": [
                    "securedrop_client.db.File"
                ]
            }
        },
        "FileDownloadJob.call_decrypt": {
            "name": "call_decrypt",
            "location": 371,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str"
                ],
                "session": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        }
    },
    "securedrop-client-master/securedrop_client/api_jobs/sources.py": {
        "DeleteSourceJob.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "str"
                ]
            }
        },
        "DeleteSourceJob.call_api": {
            "name": "call_api",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "api_client": [
                    "str",
                    "sdclientapi.API",
                    "None",
                    "Optional[str]"
                ],
                "session": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "DeleteSourceJobException.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ],
                "source_uuid": [
                    "str"
                ]
            }
        }
    },
    "securedrop-client-master/securedrop_client/api_jobs/sync.py": {
        "MetadataSyncJob.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_dir": [
                    "str"
                ]
            }
        },
        "MetadataSyncJob.call_api": {
            "name": "call_api",
            "location": 24,
            "return": [
                "typing.Any",
                "None"
            ],
            "arguments": {
                "self": [],
                "api_client": [
                    "sdclientapi.API"
                ],
                "session": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        }
    },
    "securedrop-client-master/securedrop_client/api_jobs/updatestar.py": {
        "UpdateStarJob.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "str"
                ],
                "is_starred": [
                    "bool"
                ]
            }
        },
        "UpdateStarJob.call_api": {
            "name": "call_api",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "api_client": [
                    "Optional[str]",
                    "int",
                    "str",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "session": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "UpdateStarJobError.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ],
                "source_uuid": [
                    "str"
                ]
            }
        },
        "UpdateStarJobTimeoutError.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ],
                "source_uuid": [
                    "str"
                ]
            }
        },
        "UpdateStarJobTimeoutError.__str__": {
            "name": "__str__",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "securedrop-client-master/securedrop_client/api_jobs/uploads.py": {
        "SendReplyJob.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_uuid": [
                    "str"
                ],
                "reply_uuid": [
                    "str"
                ],
                "message": [
                    "str"
                ],
                "gpg": [
                    "securedrop_client.crypto.GpgHelper"
                ]
            }
        },
        "SendReplyJob.call_api": {
            "name": "call_api",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "api_client": [
                    "str",
                    "sdclientapi.API"
                ],
                "session": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "SendReplyJob._set_status_to_failed": {
            "name": "_set_status_to_failed",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "SendReplyJob._make_call": {
            "name": "_make_call",
            "location": 136,
            "return": [
                "Callable[[Mapping], Awaitable]",
                "Callable[[], Awaitable[Mapping]]",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "encrypted_reply": [
                    "str"
                ],
                "api_client": [
                    "str",
                    "typing.Iterable[str]",
                    "int",
                    "API",
                    "Iterable[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "SendReplyJobError.__init__": {
            "name": "__init__",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ],
                "reply_uuid": [
                    "str"
                ]
            }
        },
        "SendReplyJobTimeoutError.__init__": {
            "name": "__init__",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ],
                "reply_uuid": [
                    "str"
                ]
            }
        },
        "SendReplyJobTimeoutError.__str__": {
            "name": "__str__",
            "location": 153,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "securedrop-client-master/securedrop_client/api_jobs/__init__.py": {},
    "securedrop-client-master/securedrop_client/gui/main.py": {
        "Window.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.setup": {
            "name": "setup",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "controller": [
                    "int",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "Window.show_main_window": {
            "name": "show_main_window",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db_user": [
                    "securedrop_client.db.User"
                ]
            }
        },
        "Window.autosize_window": {
            "name": "autosize_window",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.show_login": {
            "name": "show_login",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error": [
                    "str"
                ]
            }
        },
        "Window.show_login_error": {
            "name": "show_login_error",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error": [
                    "str",
                    "Exception",
                    "bool"
                ]
            }
        },
        "Window.hide_login": {
            "name": "hide_login",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.refresh_current_source_conversation": {
            "name": "refresh_current_source_conversation",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.show_sources": {
            "name": "show_sources",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sources": [
                    "List[securedrop_client.db.Source]"
                ]
            }
        },
        "Window.show_last_sync": {
            "name": "show_last_sync",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "updated_on": [
                    "BaseException",
                    "Callable",
                    "Dict[str, Optional[str]]",
                    "dict"
                ]
            }
        },
        "Window.set_logged_in_as": {
            "name": "set_logged_in_as",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db_user": [
                    "securedrop_client.db.User"
                ]
            }
        },
        "Window.logout": {
            "name": "logout",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.update_activity_status": {
            "name": "update_activity_status",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ],
                "duration": [
                    "int",
                    "str",
                    "bytes",
                    "dict"
                ]
            }
        },
        "Window.update_error_status": {
            "name": "update_error_status",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ],
                "duration": [
                    "int",
                    "bool",
                    "str",
                    "bytes"
                ]
            }
        },
        "Window.clear_error_status": {
            "name": "clear_error_status",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.clear_clipboard": {
            "name": "clear_clipboard",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "securedrop-client-master/securedrop_client/gui/widgets.py": {
        "TopPane.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TopPane.setup": {
            "name": "setup",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "controller": []
            }
        },
        "TopPane.set_logged_in": {
            "name": "set_logged_in",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TopPane.set_logged_out": {
            "name": "set_logged_out",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TopPane.update_activity_status": {
            "name": "update_activity_status",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ],
                "duration": [
                    "int"
                ]
            }
        },
        "TopPane.update_error_status": {
            "name": "update_error_status",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ],
                "duration": [
                    "int"
                ]
            }
        },
        "TopPane.clear_error_status": {
            "name": "clear_error_status",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LeftPane.__init__": {
            "name": "__init__",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LeftPane.setup": {
            "name": "setup",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "window": [],
                "controller": []
            }
        },
        "LeftPane.set_logged_in_as": {
            "name": "set_logged_in_as",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db_user": [
                    "securedrop_client.db.User"
                ]
            }
        },
        "LeftPane.set_logged_out": {
            "name": "set_logged_out",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyncIcon.__init__": {
            "name": "__init__",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyncIcon.setup": {
            "name": "setup",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "controller": []
            }
        },
        "SyncIcon._on_sync": {
            "name": "_on_sync",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "SyncIcon.enable": {
            "name": "enable",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyncIcon.disable": {
            "name": "disable",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActivityStatusBar.__init__": {
            "name": "__init__",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActivityStatusBar.update_message": {
            "name": "update_message",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ],
                "duration": [
                    "int"
                ]
            }
        },
        "ErrorStatusBar.__init__": {
            "name": "__init__",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ErrorStatusBar._hide": {
            "name": "_hide",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ErrorStatusBar._show": {
            "name": "_show",
            "location": 344,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ErrorStatusBar._on_status_timeout": {
            "name": "_on_status_timeout",
            "location": 349,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ErrorStatusBar.setup": {
            "name": "setup",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "controller": []
            }
        },
        "ErrorStatusBar.update_message": {
            "name": "update_message",
            "location": 355,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ],
                "duration": [
                    "int"
                ]
            }
        },
        "ErrorStatusBar.clear_message": {
            "name": "clear_message",
            "location": 370,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserProfile.__init__": {
            "name": "__init__",
            "location": 386,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserProfile.setup": {
            "name": "setup",
            "location": 429,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "window": [],
                "controller": []
            }
        },
        "UserProfile.set_user": {
            "name": "set_user",
            "location": 433,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db_user": [
                    "securedrop_client.db.User"
                ]
            }
        },
        "UserProfile.show": {
            "name": "show",
            "location": 437,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserProfile.hide": {
            "name": "hide",
            "location": 442,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserIconLabel.mousePressEvent": {
            "name": "mousePressEvent",
            "location": 455,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e": []
            }
        },
        "UserButton.__init__": {
            "name": "__init__",
            "location": 465,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserButton.setup": {
            "name": "setup",
            "location": 481,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "controller": []
            }
        },
        "UserButton.set_username": {
            "name": "set_username",
            "location": 484,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": []
            }
        },
        "UserMenu.__init__": {
            "name": "__init__",
            "location": 499,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserMenu.setup": {
            "name": "setup",
            "location": 506,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "controller": []
            }
        },
        "UserMenu._on_logout_triggered": {
            "name": "_on_logout_triggered",
            "location": 512,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoginButton.__init__": {
            "name": "__init__",
            "location": 524,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoginButton.setup": {
            "name": "setup",
            "location": 535,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "window": []
            }
        },
        "LoginButton._on_clicked": {
            "name": "_on_clicked",
            "location": 541,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainView.__init__": {
            "name": "__init__",
            "location": 554,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": []
            }
        },
        "MainView.setup": {
            "name": "setup",
            "location": 590,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "controller": []
            }
        },
        "MainView.show_sources": {
            "name": "show_sources",
            "location": 597,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sources": [
                    "List[securedrop_client.db.Source]"
                ]
            }
        },
        "MainView.on_source_changed": {
            "name": "on_source_changed",
            "location": 619,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainView.delete_conversation": {
            "name": "delete_conversation",
            "location": 644,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_uuid": [
                    "str"
                ]
            }
        },
        "MainView.set_conversation": {
            "name": "set_conversation",
            "location": 657,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "widget": []
            }
        },
        "EmptyConversationView.__init__": {
            "name": "__init__",
            "location": 676,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmptyConversationView.show_no_sources_message": {
            "name": "show_no_sources_message",
            "location": 753,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmptyConversationView.show_no_source_selected_message": {
            "name": "show_no_source_selected_message",
            "location": 757,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SourceListWidgetItem.__lt__": {
            "name": "__lt__",
            "location": 763,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "SourceList.__init__": {
            "name": "__init__",
            "location": 784,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SourceList.setup": {
            "name": "setup",
            "location": 800,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "controller": []
            }
        },
        "SourceList.update": {
            "name": "update",
            "location": 810,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "sources": [
                    "List[securedrop_client.db.Source]"
                ]
            }
        },
        "SourceList.initial_update": {
            "name": "initial_update",
            "location": 868,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sources": [
                    "List[securedrop_client.db.Source]"
                ]
            }
        },
        "SourceList.add_source": {
            "name": "add_source",
            "location": 874,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sources": [],
                "slice_size": []
            }
        },
        "SourceList.get_selected_source": {
            "name": "get_selected_source",
            "location": 912,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SourceList.get_source_widget": {
            "name": "get_source_widget",
            "location": 921,
            "return": [],
            "arguments": {
                "self": [],
                "source_uuid": [
                    "str"
                ]
            }
        },
        "SourceList.set_snippet": {
            "name": "set_snippet",
            "location": 940,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_uuid": [
                    "str"
                ],
                "collection_item_uuid": [],
                "content": [
                    "str"
                ]
            }
        },
        "SourceWidget.__init__": {
            "name": "__init__",
            "location": 983,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "controller": [
                    "securedrop_client.logic.Controller"
                ],
                "source": [
                    "securedrop_client.db.Source"
                ]
            }
        },
        "SourceWidget.update": {
            "name": "update",
            "location": 1074,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SourceWidget.set_snippet": {
            "name": "set_snippet",
            "location": 1096,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_uuid": [
                    "str"
                ],
                "content": [
                    "str"
                ]
            }
        },
        "SourceWidget.delete_source": {
            "name": "delete_source",
            "location": 1105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "SourceWidget._on_source_deleted": {
            "name": "_on_source_deleted",
            "location": 1114,
            "return": [],
            "arguments": {
                "self": [],
                "source_uuid": []
            }
        },
        "SourceWidget._on_source_deletion_failed": {
            "name": "_on_source_deletion_failed",
            "location": 1122,
            "return": [],
            "arguments": {
                "self": [],
                "source_uuid": []
            }
        },
        "StarToggleButton.__init__": {
            "name": "__init__",
            "location": 1135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "controller": [
                    "securedrop_client.logic.Controller"
                ],
                "source_uuid": [
                    "str"
                ],
                "is_starred": [
                    "bool"
                ]
            }
        },
        "StarToggleButton.disable_toggle": {
            "name": "disable_toggle",
            "location": 1159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StarToggleButton.enable_toggle": {
            "name": "enable_toggle",
            "location": 1175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StarToggleButton.eventFilter": {
            "name": "eventFilter",
            "location": 1189,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [],
                "event": []
            }
        },
        "StarToggleButton.on_authentication_changed": {
            "name": "on_authentication_changed",
            "location": 1205,
            "return": [],
            "arguments": {
                "self": [],
                "authenticated": []
            }
        },
        "StarToggleButton.on_pressed": {
            "name": "on_pressed",
            "location": 1218,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StarToggleButton.on_pressed_offline": {
            "name": "on_pressed_offline",
            "location": 1228,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StarToggleButton.update": {
            "name": "update",
            "location": 1235,
            "return": [],
            "arguments": {
                "self": [],
                "is_starred": []
            }
        },
        "StarToggleButton.on_star_update_failed": {
            "name": "on_star_update_failed",
            "location": 1258,
            "return": [],
            "arguments": {
                "self": [],
                "source_uuid": [],
                "is_starred": []
            }
        },
        "StarToggleButton.on_star_update_successful": {
            "name": "on_star_update_successful",
            "location": 1268,
            "return": [],
            "arguments": {
                "self": [],
                "source_uuid": []
            }
        },
        "DeleteSourceMessageBox.__init__": {
            "name": "__init__",
            "location": 1279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [],
                "controller": []
            }
        },
        "DeleteSourceMessageBox.launch": {
            "name": "launch",
            "location": 1284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeleteSourceMessageBox._construct_message": {
            "name": "_construct_message",
            "location": 1301,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "securedrop_client.db.Source"
                ]
            }
        },
        "LoginOfflineLink.__init__": {
            "name": "__init__",
            "location": 1332,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoginOfflineLink.mouseReleaseEvent": {
            "name": "mouseReleaseEvent",
            "location": 1343,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "SignInButton.__init__": {
            "name": "__init__",
            "location": 1352,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoginErrorBar.__init__": {
            "name": "__init__",
            "location": 1378,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoginErrorBar.set_message": {
            "name": "set_message",
            "location": 1416,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "LoginErrorBar.clear_message": {
            "name": "clear_message",
            "location": 1420,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PasswordEdit.__init__": {
            "name": "__init__",
            "location": 1430,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": []
            }
        },
        "PasswordEdit.on_toggle_password_Action": {
            "name": "on_toggle_password_Action",
            "location": 1442,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoginDialog.__init__": {
            "name": "__init__",
            "location": 1462,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": []
            }
        },
        "LoginDialog.closeEvent": {
            "name": "closeEvent",
            "location": 1545,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "LoginDialog.keyPressEvent": {
            "name": "keyPressEvent",
            "location": 1552,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "LoginDialog.setup": {
            "name": "setup",
            "location": 1565,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "controller": []
            }
        },
        "LoginDialog.reset": {
            "name": "reset",
            "location": 1569,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoginDialog.error": {
            "name": "error",
            "location": 1580,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "LoginDialog.validate": {
            "name": "validate",
            "location": 1588,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpeechBubble.__init__": {
            "name": "__init__",
            "location": 1648,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message_uuid": [
                    "str"
                ],
                "text": [
                    "str"
                ],
                "update_signal": [],
                "download_error_signal": [],
                "index": [
                    "int"
                ],
                "error": [
                    "bool"
                ]
            }
        },
        "SpeechBubble._update_text": {
            "name": "_update_text",
            "location": 1714,
            "return": [],
            "arguments": {
                "self": [],
                "source_id": [],
                "message_uuid": [],
                "text": []
            }
        },
        "SpeechBubble.set_error": {
            "name": "set_error",
            "location": 1724,
            "return": [],
            "arguments": {
                "self": [],
                "source_uuid": [],
                "uuid": [],
                "text": []
            }
        },
        "SpeechBubble.set_normal_styles": {
            "name": "set_normal_styles",
            "location": 1732,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpeechBubble.set_error_styles": {
            "name": "set_error_styles",
            "location": 1740,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageWidget.__init__": {
            "name": "__init__",
            "location": 1754,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message_uuid": [
                    "str"
                ],
                "message": [
                    "str"
                ],
                "update_signal": [],
                "download_error_signal": [],
                "index": [
                    "int"
                ],
                "error": [
                    "bool"
                ]
            }
        },
        "ReplyWidget.__init__": {
            "name": "__init__",
            "location": 1774,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message_uuid": [
                    "str"
                ],
                "message": [
                    "str"
                ],
                "reply_status": [
                    "str"
                ],
                "update_signal": [],
                "download_error_signal": [],
                "message_succeeded_signal": [],
                "message_failed_signal": [],
                "index": [
                    "int"
                ],
                "error": [
                    "bool"
                ]
            }
        },
        "ReplyWidget._set_reply_state": {
            "name": "_set_reply_state",
            "location": 1809,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "str"
                ]
            }
        },
        "ReplyWidget._on_reply_success": {
            "name": "_on_reply_success",
            "location": 1822,
            "return": [],
            "arguments": {
                "self": [],
                "source_id": [],
                "message_uuid": [],
                "content": []
            }
        },
        "ReplyWidget._on_reply_failure": {
            "name": "_on_reply_failure",
            "location": 1831,
            "return": [],
            "arguments": {
                "self": [],
                "message_uuid": []
            }
        },
        "ReplyWidget.set_normal_styles": {
            "name": "set_normal_styles",
            "location": 1839,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReplyWidget.set_failed_styles": {
            "name": "set_failed_styles",
            "location": 1847,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReplyWidget.set_pending_styles": {
            "name": "set_pending_styles",
            "location": 1855,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileWidget.__init__": {
            "name": "__init__",
            "location": 1878,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_uuid": [
                    "str"
                ],
                "controller": [
                    "securedrop_client.logic.Controller"
                ],
                "file_ready_signal": [],
                "file_missing": [],
                "index": [
                    "int"
                ]
            }
        },
        "FileWidget.update_file_size": {
            "name": "update_file_size",
            "location": 1987,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileWidget.eventFilter": {
            "name": "eventFilter",
            "location": 1994,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [],
                "event": []
            }
        },
        "FileWidget._set_file_state": {
            "name": "_set_file_state",
            "location": 2007,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileWidget._set_file_name": {
            "name": "_set_file_name",
            "location": 2043,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileWidget._on_file_downloaded": {
            "name": "_on_file_downloaded",
            "location": 2050,
            "return": [],
            "arguments": {
                "self": [],
                "source_uuid": [],
                "file_uuid": [],
                "filename": []
            }
        },
        "FileWidget._on_file_missing": {
            "name": "_on_file_missing",
            "location": 2056,
            "return": [],
            "arguments": {
                "self": [],
                "source_uuid": [],
                "file_uuid": [],
                "filename": []
            }
        },
        "FileWidget._on_export_clicked": {
            "name": "_on_export_clicked",
            "location": 2062,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileWidget._on_print_clicked": {
            "name": "_on_print_clicked",
            "location": 2073,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileWidget._on_left_click": {
            "name": "_on_left_click",
            "location": 2083,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileWidget.start_button_animation": {
            "name": "start_button_animation",
            "location": 2100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileWidget.set_button_animation_frame": {
            "name": "set_button_animation_frame",
            "location": 2114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frame_number": []
            }
        },
        "FileWidget.stop_button_animation": {
            "name": "stop_button_animation",
            "location": 2121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModalDialog.__init__": {
            "name": "__init__",
            "location": 2138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModalDialog.keyPressEvent": {
            "name": "keyPressEvent",
            "location": 2224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "ModalDialog.animate_activestate": {
            "name": "animate_activestate",
            "location": 2234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModalDialog.animate_header": {
            "name": "animate_header",
            "location": 2237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModalDialog.start_animate_activestate": {
            "name": "start_animate_activestate",
            "location": 2240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModalDialog.start_animate_header": {
            "name": "start_animate_header",
            "location": 2252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModalDialog.stop_animate_activestate": {
            "name": "stop_animate_activestate",
            "location": 2257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModalDialog.stop_animate_header": {
            "name": "stop_animate_header",
            "location": 2269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrintDialog.__init__": {
            "name": "__init__",
            "location": 2279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "controller": [
                    "securedrop_client.logic.Controller"
                ],
                "file_uuid": [
                    "str"
                ],
                "file_name": [
                    "str"
                ]
            }
        },
        "PrintDialog._show_starting_instructions": {
            "name": "_show_starting_instructions",
            "location": 2331,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrintDialog._show_insert_usb_message": {
            "name": "_show_insert_usb_message",
            "location": 2337,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrintDialog._show_generic_error_message": {
            "name": "_show_generic_error_message",
            "location": 2345,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrintDialog._run_preflight": {
            "name": "_run_preflight",
            "location": 2355,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PrintDialog._print_file": {
            "name": "_print_file",
            "location": 2359,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PrintDialog._on_preflight_success": {
            "name": "_on_preflight_success",
            "location": 2364,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PrintDialog._on_preflight_failure": {
            "name": "_on_preflight_failure",
            "location": 2379,
            "return": [],
            "arguments": {
                "self": [],
                "error": []
            }
        },
        "ExportDialog.__init__": {
            "name": "__init__",
            "location": 2406,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "controller": [
                    "securedrop_client.logic.Controller"
                ],
                "file_uuid": [
                    "str"
                ],
                "file_name": [
                    "str"
                ]
            }
        },
        "ExportDialog._show_starting_instructions": {
            "name": "_show_starting_instructions",
            "location": 2501,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExportDialog._show_passphrase_request_message": {
            "name": "_show_passphrase_request_message",
            "location": 2506,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExportDialog._show_passphrase_request_message_again": {
            "name": "_show_passphrase_request_message_again",
            "location": 2518,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExportDialog._show_success_message": {
            "name": "_show_success_message",
            "location": 2531,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExportDialog._show_insert_usb_message": {
            "name": "_show_insert_usb_message",
            "location": 2544,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExportDialog._show_insert_encrypted_usb_message": {
            "name": "_show_insert_encrypted_usb_message",
            "location": 2556,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExportDialog._show_generic_error_message": {
            "name": "_show_generic_error_message",
            "location": 2569,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExportDialog._run_preflight": {
            "name": "_run_preflight",
            "location": 2582,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExportDialog._export_file": {
            "name": "_export_file",
            "location": 2586,
            "return": [],
            "arguments": {
                "self": [],
                "checked": []
            }
        },
        "ExportDialog._on_preflight_success": {
            "name": "_on_preflight_success",
            "location": 2593,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExportDialog._on_preflight_failure": {
            "name": "_on_preflight_failure",
            "location": 2608,
            "return": [],
            "arguments": {
                "self": [],
                "error": []
            }
        },
        "ExportDialog._on_export_success": {
            "name": "_on_export_success",
            "location": 2614,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExportDialog._on_export_failure": {
            "name": "_on_export_failure",
            "location": 2619,
            "return": [],
            "arguments": {
                "self": [],
                "error": []
            }
        },
        "ExportDialog._update_dialog": {
            "name": "_update_dialog",
            "location": 2625,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error_status": [
                    "str"
                ]
            }
        },
        "ConversationScrollArea.__init__": {
            "name": "__init__",
            "location": 2657,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConversationScrollArea.add_widget_to_conversation": {
            "name": "add_widget_to_conversation",
            "location": 2677,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int"
                ],
                "widget": [],
                "alignment_flag": []
            }
        },
        "ConversationScrollArea.remove_widget_from_conversation": {
            "name": "remove_widget_from_conversation",
            "location": 2685,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "widget": []
            }
        },
        "ConversationView.__init__": {
            "name": "__init__",
            "location": 2699,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_db_object": [
                    "securedrop_client.db.Source"
                ],
                "controller": [
                    "securedrop_client.logic.Controller"
                ]
            }
        },
        "ConversationView.update_conversation": {
            "name": "update_conversation",
            "location": 2730,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "list"
                ]
            }
        },
        "ConversationView.add_file": {
            "name": "add_file",
            "location": 2795,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "securedrop_client.db.File"
                ],
                "index": []
            }
        },
        "ConversationView.update_conversation_position": {
            "name": "update_conversation_position",
            "location": 2811,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "min_val": [],
                "max_val": []
            }
        },
        "ConversationView.add_message": {
            "name": "add_message",
            "location": 2820,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "securedrop_client.db.Message"
                ],
                "index": []
            }
        },
        "ConversationView.add_reply": {
            "name": "add_reply",
            "location": 2836,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reply": [
                    "Union[(securedrop_client.db.DraftReply, securedrop_client.db.Reply)]"
                ],
                "index": []
            }
        },
        "ConversationView.add_reply_from_reply_box": {
            "name": "add_reply_from_reply_box",
            "location": 2860,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "str"
                ],
                "content": [
                    "str"
                ]
            }
        },
        "ConversationView.on_reply_sent": {
            "name": "on_reply_sent",
            "location": 2878,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_uuid": [
                    "str"
                ],
                "reply_uuid": [
                    "str"
                ],
                "reply_text": [
                    "str"
                ]
            }
        },
        "SourceConversationWrapper.__init__": {
            "name": "__init__",
            "location": 2893,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "securedrop_client.db.Source"
                ],
                "controller": [
                    "securedrop_client.logic.Controller"
                ]
            }
        },
        "SourceConversationWrapper._on_source_deleted": {
            "name": "_on_source_deleted",
            "location": 2929,
            "return": [],
            "arguments": {
                "self": [],
                "source_uuid": []
            }
        },
        "SourceConversationWrapper._on_source_deletion_failed": {
            "name": "_on_source_deletion_failed",
            "location": 2937,
            "return": [],
            "arguments": {
                "self": [],
                "source_uuid": []
            }
        },
        "ReplyBoxWidget.__init__": {
            "name": "__init__",
            "location": 2952,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "securedrop_client.db.Source"
                ],
                "controller": [
                    "securedrop_client.logic.Controller"
                ]
            }
        },
        "ReplyBoxWidget.set_logged_in": {
            "name": "set_logged_in",
            "location": 3017,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReplyBoxWidget.set_logged_out": {
            "name": "set_logged_out",
            "location": 3028,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReplyBoxWidget.send_reply": {
            "name": "send_reply",
            "location": 3033,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReplyBoxWidget._on_authentication_changed": {
            "name": "_on_authentication_changed",
            "location": 3046,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "authenticated": [
                    "bool"
                ]
            }
        },
        "ReplyBoxWidget.update_authentication_state": {
            "name": "update_authentication_state",
            "location": 3055,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "authenticated": [
                    "bool"
                ]
            }
        },
        "ReplyBoxWidget._on_synced": {
            "name": "_on_synced",
            "location": 3061,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str"
                ]
            }
        },
        "ReplyTextEdit.__init__": {
            "name": "__init__",
            "location": 3082,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [],
                "controller": []
            }
        },
        "ReplyTextEdit.focusInEvent": {
            "name": "focusInEvent",
            "location": 3099,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e": []
            }
        },
        "ReplyTextEdit.focusOutEvent": {
            "name": "focusOutEvent",
            "location": 3106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e": []
            }
        },
        "ReplyTextEdit.set_logged_in": {
            "name": "set_logged_in",
            "location": 3111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReplyTextEdit.set_logged_out": {
            "name": "set_logged_out",
            "location": 3119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReplyTextEdit.setText": {
            "name": "setText",
            "location": 3123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "ReplyTextEditPlaceholder.__init__": {
            "name": "__init__",
            "location": 3132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_name": []
            }
        },
        "ReplyTextEditPlaceholder.show_signed_in": {
            "name": "show_signed_in",
            "location": 3185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReplyTextEditPlaceholder.show_signed_in_no_key": {
            "name": "show_signed_in_no_key",
            "location": 3190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReplyTextEditPlaceholder.show_signed_out": {
            "name": "show_signed_out",
            "location": 3195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeleteSourceAction.__init__": {
            "name": "__init__",
            "location": 3204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [],
                "parent": [],
                "controller": []
            }
        },
        "DeleteSourceAction.trigger": {
            "name": "trigger",
            "location": 3214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SourceMenu.__init__": {
            "name": "__init__",
            "location": 3231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [],
                "controller": []
            }
        },
        "SourceMenuButton.__init__": {
            "name": "__init__",
            "location": 3247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [],
                "controller": []
            }
        },
        "TitleLabel.__init__": {
            "name": "__init__",
            "location": 3268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "LastUpdatedLabel.__init__": {
            "name": "__init__",
            "location": 3278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "last_updated": []
            }
        },
        "SourceProfileShortWidget.__init__": {
            "name": "__init__",
            "location": 3297,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [],
                "controller": []
            }
        },
        "SourceProfileShortWidget.update_timestamp": {
            "name": "update_timestamp",
            "location": 3330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SourceList.add_source.schedule_source_management": {
            "name": "schedule_source_management",
            "location": 880,
            "return": [],
            "arguments": {
                "slice_size": []
            }
        }
    },
    "securedrop-client-master/securedrop_client/gui/__init__.py": {
        "SvgToggleButton.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "on": [
                    "str"
                ],
                "off": [
                    "str"
                ],
                "svg_size": [
                    "str"
                ]
            }
        },
        "SvgToggleButton.set_icon": {
            "name": "set_icon",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "on": [
                    "str"
                ],
                "off": [
                    "str"
                ]
            }
        },
        "SvgPushButton.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "normal": [
                    "str"
                ],
                "disabled": [
                    "str"
                ],
                "active": [
                    "str"
                ],
                "selected": [
                    "str"
                ],
                "svg_size": [
                    "str"
                ]
            }
        },
        "SvgLabel.__init__": {
            "name": "__init__",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "svg_size": [
                    "str"
                ]
            }
        },
        "SvgLabel.update_image": {
            "name": "update_image",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "svg_size": [
                    "str"
                ]
            }
        },
        "SecureQLabel.__init__": {
            "name": "__init__",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "parent": [
                    "None",
                    "int",
                    "PyQt5.QtWidgets.QWidget",
                    "bool"
                ],
                "flags": [
                    "PyQt5.QtWidgets.QWidget",
                    "int",
                    "bool"
                ],
                "wordwrap": [
                    "bool"
                ],
                "max_length": [
                    "int"
                ],
                "with_tooltip": [
                    "bool"
                ]
            }
        },
        "SecureQLabel.setText": {
            "name": "setText",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "SecureQLabel.get_elided_text": {
            "name": "get_elided_text",
            "location": 178,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "full_text": [
                    "str"
                ]
            }
        },
        "SecureQLabel.is_elided": {
            "name": "is_elided",
            "location": 198,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "securedrop-client-master/securedrop_client/resources/__init__.py": {
        "path": {
            "name": "path",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "resource_dir": [
                    "str"
                ]
            }
        },
        "load_font": {
            "name": "load_font",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "font_folder_name": [
                    "str"
                ]
            }
        },
        "load_icon": {
            "name": "load_icon",
            "location": 48,
            "return": [
                "QIcon",
                "str",
                "bool"
            ],
            "arguments": {
                "normal": [
                    "str"
                ],
                "disabled": [
                    "str"
                ],
                "active": [
                    "str"
                ],
                "selected": [
                    "str"
                ],
                "normal_off": [
                    "str"
                ],
                "disabled_off": [
                    "str"
                ],
                "active_off": [
                    "str"
                ],
                "selected_off": [
                    "str"
                ]
            }
        },
        "load_svg": {
            "name": "load_svg",
            "location": 117,
            "return": [
                "QSvgWidget",
                "str",
                "bool"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "load_image": {
            "name": "load_image",
            "location": 124,
            "return": [
                "QPixmap",
                "str",
                "dict"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "load_css": {
            "name": "load_css",
            "location": 131,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "load_movie": {
            "name": "load_movie",
            "location": 138,
            "return": [
                "str",
                "QMovie"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        }
    },
    "securedrop-client-master/tests/conftest.py": {
        "i18n": {
            "name": "i18n",
            "location": 49,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "homedir": {
            "name": "homedir",
            "location": 57,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "i18n": [
                    "int",
                    "list",
                    "list[]",
                    "Type[Exception]",
                    "typing.Type"
                ]
            }
        },
        "functional_test_logged_out_context": {
            "name": "functional_test_logged_out_context",
            "location": 81,
            "return": [
                "tuple[typing.Union[Window,Controller,bool]]",
                "int",
                "str",
                "Dict[str, int]",
                "dict"
            ],
            "arguments": {
                "homedir": [
                    "bool",
                    "nucypher.config.characters.UrsulaConfiguration"
                ],
                "reply_status_codes": [
                    "int",
                    "typing.Callable[..., None]",
                    "str",
                    "Callable[..., None]",
                    "Callable[[int, int], None]",
                    "bool"
                ],
                "session": [
                    "int",
                    "typing.Callable[..., None]",
                    "str",
                    "Callable[..., None]",
                    "Callable[[int, int], None]",
                    "bool"
                ],
                "config": [
                    "int",
                    "typing.Callable[..., None]",
                    "str",
                    "Callable[..., None]",
                    "Callable[[int, int], None]",
                    "bool"
                ]
            }
        },
        "functional_test_logged_in_context": {
            "name": "functional_test_logged_in_context",
            "location": 104,
            "return": [
                "tuple[typing.Union[str,set[str],int,dict[str, str]]]",
                "Dict[str, int]",
                "dict",
                "float",
                "datetime.date",
                "str"
            ],
            "arguments": {
                "functional_test_logged_out_context": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "Optional[int]"
                ],
                "qtbot": [
                    "int",
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "config": {
            "name": "config",
            "location": 125,
            "return": [
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "homedir": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Callable[[str], str]",
                    "typing.Callable[str, str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "alembic_config": {
            "name": "alembic_config",
            "location": 135,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Config",
                "app.config.MQConfig",
                "Dict[str, str]"
            ],
            "arguments": {
                "homedir": [
                    "str",
                    "bool",
                    "dict[, ]",
                    "int",
                    "list[str]",
                    "dict",
                    "List[str]"
                ]
            }
        },
        "_alembic_config": {
            "name": "_alembic_config",
            "location": 139,
            "return": [
                "str"
            ],
            "arguments": {
                "homedir": [
                    "Dict[str, Any]",
                    "str",
                    "dict[str, typing.Any]",
                    "List[int]",
                    "list[int]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "session_maker": {
            "name": "session_maker",
            "location": 157,
            "return": [
                "dict",
                "Exception",
                "str",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "homedir": [
                    "dict",
                    "Exception",
                    "dict[, ]",
                    "str",
                    "Optional[Dict[str, str]]",
                    "dict[str, str]",
                    "None"
                ]
            }
        },
        "session": {
            "name": "session",
            "location": 162,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "session_maker": [
                    "bool",
                    "str",
                    "Dict[str, str]",
                    "Tuple[float, float]"
                ]
            }
        },
        "reply_status_codes": {
            "name": "reply_status_codes",
            "location": 170,
            "return": [
                "None",
                "str",
                "dict",
                "Iterable[Hashable]",
                "models.Base",
                "int"
            ],
            "arguments": {
                "session": []
            }
        },
        "download_error_codes": {
            "name": "download_error_codes",
            "location": 179,
            "return": [
                "None",
                "str",
                "Iterator[Tuple[str, str]]",
                "\"DGEList\"",
                "int"
            ],
            "arguments": {
                "session": [
                    "str",
                    "List[str]",
                    "bytes",
                    "Optional[str]"
                ]
            }
        },
        "source": {
            "name": "source",
            "location": 188,
            "return": [
                "dict[typing.Text, typing.Union[str,Source]]",
                "List[str]",
                "str"
            ],
            "arguments": {
                "session": []
            }
        },
        "create_gpg_test_context": {
            "name": "create_gpg_test_context",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "sdc_home": [
                    "str"
                ]
            }
        },
        "functional_test_logged_in_context.wait_for_login": {
            "name": "wait_for_login",
            "location": 117,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "securedrop-client-master/tests/factory.py": {
        "User": {
            "name": "User",
            "location": 25,
            "return": [
                "db.User"
            ],
            "arguments": {}
        },
        "Source": {
            "name": "Source",
            "location": 40,
            "return": [
                "db.Source"
            ],
            "arguments": {}
        },
        "Message": {
            "name": "Message",
            "location": 64,
            "return": [
                "db.Message"
            ],
            "arguments": {}
        },
        "Reply": {
            "name": "Reply",
            "location": 82,
            "return": [
                "db.Reply"
            ],
            "arguments": {}
        },
        "DraftReply": {
            "name": "DraftReply",
            "location": 99,
            "return": [
                "db.DraftReply"
            ],
            "arguments": {}
        },
        "ReplySendStatus": {
            "name": "ReplySendStatus",
            "location": 117,
            "return": [
                "db.ReplySendStatus"
            ],
            "arguments": {}
        },
        "File": {
            "name": "File",
            "location": 127,
            "return": [
                "db.File"
            ],
            "arguments": {}
        },
        "dummy_job_factory": {
            "name": "dummy_job_factory",
            "location": 144,
            "return": [
                "type"
            ],
            "arguments": {
                "mocker": [
                    "bool",
                    "list",
                    "Callable[[], bool]"
                ],
                "return_value": [
                    "bool",
                    "list",
                    "Callable[[], bool]"
                ]
            }
        },
        "RemoteSource": {
            "name": "RemoteSource",
            "location": 170,
            "return": [
                "Optional[str]",
                "str",
                "db.models.Taxon",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {}
        },
        "RemoteReply": {
            "name": "RemoteReply",
            "location": 197,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "dummy_job_factory.DummyApiJob.__init__": {
            "name": "__init__",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "dummy_job_factory.DummyApiJob.call_api": {
            "name": "call_api",
            "location": 160,
            "return": [
                "set",
                "float"
            ],
            "arguments": {
                "self": [],
                "api_client": [
                    "str",
                    "Callable[[str, List], None]",
                    "bool",
                    "int"
                ],
                "session": [
                    "str",
                    "Callable[[str, List], None]",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "securedrop-client-master/tests/test_alembic.py": {
        "list_migrations": {
            "name": "list_migrations",
            "location": 26,
            "return": [
                "list"
            ],
            "arguments": {
                "cfg_path": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "Optional[List[str]]",
                    "list[str]"
                ],
                "head": [
                    "str",
                    "int",
                    "bytearray",
                    "Dict[str, int]",
                    "dict[str, int]",
                    "List[str]",
                    "list[str]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "upgrade": {
            "name": "upgrade",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "alembic_config": [
                    "str",
                    "dict[str, str]",
                    "lightbus.config.Config",
                    "Dict[str, str]",
                    "pyramid.config.Configurator",
                    "cerise.config.Config"
                ],
                "migration": [
                    "str",
                    "dict[str, str]",
                    "lightbus.config.Config",
                    "Dict[str, str]",
                    "pyramid.config.Configurator",
                    "cerise.config.Config"
                ]
            }
        },
        "downgrade": {
            "name": "downgrade",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "alembic_config": [
                    "str",
                    "dict[str, str]",
                    "lightbus.config.Config",
                    "Dict[str, str]",
                    "pyramid.config.Configurator",
                    "cerise.config.Config"
                ],
                "migration": [
                    "str",
                    "dict[str, str]",
                    "lightbus.config.Config",
                    "Dict[str, str]",
                    "pyramid.config.Configurator",
                    "cerise.config.Config"
                ]
            }
        },
        "get_schema": {
            "name": "get_schema",
            "location": 42,
            "return": [
                "Dict[(Tuple[(Any, Any, Any)], Any)]"
            ],
            "arguments": {
                "session": [
                    "bool",
                    "sqlalchemy.orm.session.Session",
                    "dict[, ]",
                    "str",
                    "dict",
                    "id3c.db.session.DatabaseSession"
                ]
            }
        },
        "assert_schemas_equal": {
            "name": "assert_schemas_equal",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "left": [
                    "dict[str, object]",
                    "Dict[str, object]",
                    "dict[str, dict[str, int]]",
                    "dict[str, str]",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, int]]",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, str]"
                ],
                "right": [
                    "bool",
                    "str"
                ]
            }
        },
        "ddl_equal": {
            "name": "ddl_equal",
            "location": 72,
            "return": [
                "bool"
            ],
            "arguments": {
                "left": [
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]",
                    "Optional[int]",
                    "float",
                    "int",
                    "dict",
                    "None",
                    "dict[, ]"
                ],
                "right": [
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]",
                    "Optional[int]",
                    "float",
                    "int",
                    "dict",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "test_alembic_head_matches_db_models": {
            "name": "test_alembic_head_matches_db_models",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "bytes"
                ]
            }
        },
        "test_alembic_migration_upgrade": {
            "name": "test_alembic_migration_upgrade",
            "location": 132,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "alembic_config": [
                    "backup.config.Config"
                ],
                "config": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "backup.config.Config"
                ],
                "migration": [
                    "IO[str]",
                    "typing.IO"
                ]
            }
        },
        "test_alembic_migration_downgrade": {
            "name": "test_alembic_migration_downgrade",
            "location": 139,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "alembic_config": [
                    "backup.config.Config"
                ],
                "config": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "backup.config.Config"
                ],
                "migration": []
            }
        },
        "test_schema_unchanged_after_up_then_downgrade": {
            "name": "test_schema_unchanged_after_up_then_downgrade",
            "location": 152,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "alembic_config": [
                    "pyshgp.push.config.PushConfig"
                ],
                "tmpdir": [
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "migration": []
            }
        }
    },
    "securedrop-client-master/tests/test_app.py": {
        "test_application_sets_en_as_default_language_code": {
            "name": "test_application_sets_en_as_default_language_code",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_excepthook": {
            "name": "test_excepthook",
            "location": 33,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "mocker": [
                    "str"
                ]
            }
        },
        "test_configure_logging": {
            "name": "test_configure_logging",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "homedir": [
                    "str"
                ],
                "mocker": []
            }
        },
        "test_start_app": {
            "name": "test_start_app",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [],
                "mocker": []
            }
        },
        "test_create_app_dir_permissions": {
            "name": "test_create_app_dir_permissions",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ],
                "mocker": []
            }
        },
        "test_argparse": {
            "name": "test_argparse",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_main": {
            "name": "test_main",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "int"
                ]
            }
        },
        "test_run": {
            "name": "test_run",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "test_signal_interception": {
            "name": "test_signal_interception",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "Iterable[str]"
                ],
                "homedir": [
                    "PyQt5.QtWidgets.QApplication"
                ]
            }
        },
        "TestSecondInstancePrevention.mock_app": {
            "name": "mock_app",
            "location": 71,
            "return": [
                "Dict[str, Sequence[str]]",
                "str",
                "int",
                "app.GrpyApp"
            ],
            "arguments": {
                "mocker": [
                    "app.services.ChatService"
                ]
            }
        },
        "TestSecondInstancePrevention.socket_mock_generator": {
            "name": "socket_mock_generator",
            "location": 77,
            "return": [
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {
                "mocker": [],
                "already_bound_errno": [
                    "int",
                    "bool",
                    "str",
                    "Dict[str, BinaryIO]",
                    "float"
                ]
            }
        },
        "TestSecondInstancePrevention.test_diff_name": {
            "name": "test_diff_name",
            "location": 92,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "int"
                ]
            }
        },
        "TestSecondInstancePrevention.test_same_name": {
            "name": "test_same_name",
            "location": 102,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "int"
                ]
            }
        },
        "TestSecondInstancePrevention.test_unknown_kernel_error": {
            "name": "test_unknown_kernel_error",
            "location": 112,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "app.services.ChatService"
                ]
            }
        },
        "test_run.fake_known_args": {
            "name": "fake_known_args",
            "location": 226,
            "return": [
                "tuple[]",
                "bool",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "TestSecondInstancePrevention.socket_mock_generator.kernel_bind": {
            "name": "kernel_bind",
            "location": 80,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "addr": [
                    "bool",
                    "BaseException",
                    "str"
                ]
            }
        },
        "test_create_app_dir_permissions.func": {
            "name": "func",
            "location": 189,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "securedrop-client-master/tests/test_config.py": {
        "test_missing_file": {
            "name": "test_missing_file",
            "location": 6,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "homedir": [
                    "str"
                ]
            }
        },
        "test_missing_journalist_key_fpr": {
            "name": "test_missing_journalist_key_fpr",
            "location": 19,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "homedir": [
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "securedrop-client-master/tests/test_crypto.py": {
        "test_message_logic": {
            "name": "test_message_logic",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [],
                "config": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "mocker": [
                    "tests.async_mock.Mock"
                ],
                "session_maker": [
                    "dict[str, typing.Any]",
                    "antidote.providers.factory.FactoryProvider",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_gunzip_logic": {
            "name": "test_gunzip_logic",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "dict[str, typing.Any]",
                    "antidote.providers.factory.FactoryProvider",
                    "Dict[str, Any]"
                ],
                "config": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "mocker": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "str",
                    "int"
                ],
                "session_maker": [
                    "dict[str, typing.Any]",
                    "antidote.providers.factory.FactoryProvider",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_gzip_header_without_filename": {
            "name": "test_gzip_header_without_filename",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "dict[str, typing.Any]",
                    "antidote.providers.factory.FactoryProvider",
                    "Dict[str, Any]"
                ],
                "config": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "mocker": [],
                "session_maker": [
                    "dict[str, typing.Any]",
                    "antidote.providers.factory.FactoryProvider",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_read_gzip_header_filename_with_bad_file": {
            "name": "test_read_gzip_header_filename_with_bad_file",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "Generator",
                    "typing.Generator[]"
                ]
            }
        },
        "test_read_gzip_header_filename_with_bad_compression_method": {
            "name": "test_read_gzip_header_filename_with_bad_compression_method",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "str",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_read_gzip_header_filename": {
            "name": "test_read_gzip_header_filename",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "str",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_subprocess_raises_exception": {
            "name": "test_subprocess_raises_exception",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "dict[str, typing.Any]",
                    "antidote.providers.factory.FactoryProvider",
                    "Dict[str, Any]"
                ],
                "config": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "mocker": [
                    "tests.async_mock.Mock"
                ],
                "session_maker": [
                    "dict[str, typing.Any]",
                    "antidote.providers.factory.FactoryProvider",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_import_key": {
            "name": "test_import_key",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "typing.Callable[list[], None]",
                    "Callable[[list], None]",
                    "antidote.providers.factory.FactoryProvider"
                ],
                "config": [
                    "Callable[[List, bool], None]",
                    "typing.Callable[List,bool, None]"
                ],
                "session_maker": [
                    "typing.Callable[list[], None]",
                    "Callable[[list], None]",
                    "antidote.providers.factory.FactoryProvider"
                ]
            }
        },
        "test_import_nonexistent_key": {
            "name": "test_import_nonexistent_key",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "antidote.providers.factory.FactoryProvider"
                ],
                "config": [],
                "session_maker": [
                    "antidote.providers.factory.FactoryProvider"
                ]
            }
        },
        "test_import_key_gpg_call_fail": {
            "name": "test_import_key_gpg_call_fail",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "antidote.providers.factory.FactoryProvider"
                ],
                "config": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "mocker": [
                    "str",
                    "int",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "session_maker": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "antidote.providers.factory.FactoryProvider"
                ]
            }
        },
        "test_encrypt": {
            "name": "test_encrypt",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [],
                "source": [
                    "dict"
                ],
                "config": [
                    "Callable",
                    "Exception",
                    "typing.Callable[, ]"
                ],
                "mocker": [
                    "Callable",
                    "Exception",
                    "typing.Callable[, ]"
                ],
                "session_maker": [
                    "antidote.providers.factory.FactoryProvider"
                ]
            }
        },
        "test_encrypt_fail": {
            "name": "test_encrypt_fail",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "antidote.providers.factory.FactoryProvider"
                ],
                "config": [],
                "mocker": [],
                "session_maker": [
                    "antidote.providers.factory.FactoryProvider"
                ],
                "session": [
                    "Dict[str, Sequence[str]]",
                    "dict[str, typing.Sequence[str]]",
                    "List[Dict]",
                    "list[dict[, ]]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "test_encrypt_fail_if_source_key_missing": {
            "name": "test_encrypt_fail_if_source_key_missing",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "antidote.providers.factory.FactoryProvider"
                ],
                "config": [],
                "mocker": [
                    "str"
                ],
                "session_maker": [
                    "antidote.providers.factory.FactoryProvider"
                ],
                "session": [
                    "Callable[[List, bool], None]",
                    "typing.Callable[List,bool, None]"
                ]
            }
        },
        "test_encrypt_fail_if_journo_fingerprint_missing": {
            "name": "test_encrypt_fail_if_journo_fingerprint_missing",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "antidote.providers.factory.FactoryProvider"
                ],
                "source": [
                    "bool"
                ],
                "config": [
                    "Callable",
                    "Exception",
                    "typing.Callable[, ]"
                ],
                "mocker": [
                    "str",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "session_maker": [
                    "antidote.providers.factory.FactoryProvider"
                ]
            }
        },
        "test_import_key_failure_in_encrypt_to_source": {
            "name": "test_import_key_failure_in_encrypt_to_source",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "antidote.providers.factory.FactoryProvider"
                ],
                "config": [],
                "mocker": [],
                "session_maker": [
                    "antidote.providers.factory.FactoryProvider"
                ],
                "session": [
                    "Dict[str, Sequence[str]]",
                    "dict[str, typing.Sequence[str]]",
                    "List[Dict]",
                    "list[dict[, ]]",
                    "List[str]",
                    "list[str]"
                ]
            }
        }
    },
    "securedrop-client-master/tests/test_export.py": {
        "test_run_printer_preflight": {
            "name": "test_run_printer_preflight",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_run_printer_preflight_error": {
            "name": "test_run_printer_preflight_error",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test__run_printer_preflight": {
            "name": "test__run_printer_preflight",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test__run_printer_preflight_raises_ExportError_if_not_empty_string": {
            "name": "test__run_printer_preflight_raises_ExportError_if_not_empty_string",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_print": {
            "name": "test_print",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_print_error": {
            "name": "test_print_error",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test__run_print": {
            "name": "test__run_print",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test__run_print_raises_ExportError_if_not_empty_string": {
            "name": "test__run_print_raises_ExportError_if_not_empty_string",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_send_file_to_usb_device": {
            "name": "test_send_file_to_usb_device",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_send_file_to_usb_device_error": {
            "name": "test_send_file_to_usb_device_error",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_run_preflight_checks": {
            "name": "test_run_preflight_checks",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_run_preflight_checks_error": {
            "name": "test_run_preflight_checks_error",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test__run_disk_export": {
            "name": "test__run_disk_export",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test__run_disk_export_raises_ExportError_if_not_empty_string": {
            "name": "test__run_disk_export_raises_ExportError_if_not_empty_string",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test__run_disk_test": {
            "name": "test__run_disk_test",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test__run_disk_test_raises_ExportError_if_not_USB_ENCRYPTED": {
            "name": "test__run_disk_test_raises_ExportError_if_not_USB_ENCRYPTED",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test__run_usb_test": {
            "name": "test__run_usb_test",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test__run_usb_test_raises_ExportError_if_not_USB_CONNECTED": {
            "name": "test__run_usb_test_raises_ExportError_if_not_USB_CONNECTED",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test__create_archive": {
            "name": "test__create_archive",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test__create_archive_with_an_export_file": {
            "name": "test__create_archive_with_an_export_file",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "typing.Generator[]"
                ]
            }
        },
        "test__create_archive_with_multiple_export_files": {
            "name": "test__create_archive_with_multiple_export_files",
            "location": 363,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "typing.Generator[]"
                ]
            }
        },
        "test__export_archive": {
            "name": "test__export_archive",
            "location": 379,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test__export_archive_does_not_raise_ExportError_when_CalledProcessError": {
            "name": "test__export_archive_does_not_raise_ExportError_when_CalledProcessError",
            "location": 390,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test__export_archive_with_evil_command": {
            "name": "test__export_archive_with_evil_command",
            "location": 403,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        }
    },
    "securedrop-client-master/tests/test_logic.py": {
        "test_APICallRunner_init": {
            "name": "test_APICallRunner_init",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_APICallRunner_call_api": {
            "name": "test_APICallRunner_call_api",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_APICallRunner_with_exception": {
            "name": "test_APICallRunner_with_exception",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_Controller_init": {
            "name": "test_Controller_init",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "str"
                ],
                "config": [
                    "dict[str, typing.Any]"
                ],
                "mocker": [],
                "session_maker": [
                    "str"
                ]
            }
        },
        "test_Controller_setup": {
            "name": "test_Controller_setup",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [],
                "config": [],
                "mocker": [],
                "session_maker": [],
                "session": []
            }
        },
        "test_Controller_call_api": {
            "name": "test_Controller_call_api",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "str"
                ],
                "config": [
                    "dict[str, typing.Any]"
                ],
                "mocker": [],
                "session_maker": [
                    "str"
                ]
            }
        },
        "test_Controller_login": {
            "name": "test_Controller_login",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "str"
                ],
                "config": [
                    "dict[str, typing.Any]"
                ],
                "mocker": [],
                "session_maker": [
                    "str"
                ]
            }
        },
        "test_Controller_login_offline_mode": {
            "name": "test_Controller_login_offline_mode",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "dict[str, typing.Any]"
                ],
                "config": [
                    "str",
                    "int"
                ],
                "mocker": []
            }
        },
        "test_Controller_on_authenticate_failure": {
            "name": "test_Controller_on_authenticate_failure",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "str"
                ],
                "config": [
                    "dict[str, typing.Any]"
                ],
                "mocker": [],
                "session_maker": [
                    "str"
                ]
            }
        },
        "test_Controller_on_authenticate_success": {
            "name": "test_Controller_on_authenticate_success",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [],
                "config": [],
                "mocker": [],
                "session_maker": [],
                "session": []
            }
        },
        "test_Controller_completed_api_call_without_current_object": {
            "name": "test_Controller_completed_api_call_without_current_object",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "str"
                ],
                "config": [
                    "dict[str, typing.Any]"
                ],
                "mocker": [],
                "session_maker": [
                    "str"
                ]
            }
        },
        "test_Controller_completed_api_call_with_current_object": {
            "name": "test_Controller_completed_api_call_with_current_object",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "str"
                ],
                "config": [
                    "dict[str, typing.Any]"
                ],
                "mocker": [],
                "session_maker": [
                    "str"
                ]
            }
        },
        "test_Controller_on_action_requiring_login": {
            "name": "test_Controller_on_action_requiring_login",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "str"
                ],
                "config": [
                    "dict[str, typing.Any]"
                ],
                "mocker": [],
                "session_maker": [
                    "str"
                ]
            }
        },
        "test_Controller_authenticated_yes": {
            "name": "test_Controller_authenticated_yes",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "str"
                ],
                "config": [
                    "dict[str, typing.Any]"
                ],
                "mocker": [],
                "session_maker": [
                    "str"
                ]
            }
        },
        "test_Controller_authenticated_no": {
            "name": "test_Controller_authenticated_no",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "str"
                ],
                "config": [
                    "dict[str, typing.Any]"
                ],
                "mocker": [],
                "session_maker": [
                    "str"
                ]
            }
        },
        "test_Controller_authenticated_no_api": {
            "name": "test_Controller_authenticated_no_api",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "str"
                ],
                "config": [
                    "dict[str, typing.Any]"
                ],
                "mocker": [],
                "session_maker": [
                    "str"
                ]
            }
        },
        "test_Controller_last_sync_with_file": {
            "name": "test_Controller_last_sync_with_file",
            "location": 343,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "str"
                ],
                "config": [],
                "mocker": [],
                "session_maker": [
                    "str"
                ]
            }
        },
        "test_Controller_last_sync_no_file": {
            "name": "test_Controller_last_sync_no_file",
            "location": 363,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "str"
                ],
                "config": [],
                "mocker": [],
                "session_maker": [
                    "str"
                ]
            }
        },
        "test_Controller_on_sync_started": {
            "name": "test_Controller_on_sync_started",
            "location": 376,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "homedir": []
            }
        },
        "test_Controller_on_sync_failure": {
            "name": "test_Controller_on_sync_failure",
            "location": 388,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [],
                "config": [
                    "dict[str, typing.Any]"
                ],
                "mocker": [],
                "session_maker": []
            }
        },
        "test_Controller_on_sync_failure_due_to_invalid_token": {
            "name": "test_Controller_on_sync_failure_due_to_invalid_token",
            "location": 405,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "typing.Callable[, ]"
                ],
                "config": [
                    "dict[str, typing.Any]"
                ],
                "mocker": [],
                "session_maker": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_Controller_on_sync_failure_due_to_invalid_token_after_user_logs_out": {
            "name": "test_Controller_on_sync_failure_due_to_invalid_token_after_user_logs_out",
            "location": 426,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "typing.Callable[, ]"
                ],
                "config": [
                    "dict[str, typing.Any]"
                ],
                "mocker": [],
                "session_maker": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_Controller_on_sync_failure_due_to_timeout": {
            "name": "test_Controller_on_sync_failure_due_to_timeout",
            "location": 456,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [],
                "mocker": [],
                "exception": [
                    "int",
                    "str"
                ]
            }
        },
        "test_Controller_on_sync_success": {
            "name": "test_Controller_on_sync_success",
            "location": 473,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [],
                "config": [],
                "mocker": []
            }
        },
        "test_Controller_show_last_sync": {
            "name": "test_Controller_show_last_sync",
            "location": 504,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [],
                "config": [
                    "dict[str, typing.Any]"
                ],
                "mocker": [],
                "session_maker": []
            }
        },
        "test_Controller_update_sources": {
            "name": "test_Controller_update_sources",
            "location": 521,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [],
                "config": [
                    "str",
                    "int"
                ],
                "mocker": []
            }
        },
        "test_Controller_update_star_not_logged_in": {
            "name": "test_Controller_update_star_not_logged_in",
            "location": 543,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "str"
                ],
                "config": [
                    "dict[str, typing.Any]"
                ],
                "mocker": [],
                "session_maker": [
                    "str"
                ]
            }
        },
        "test_Controller_on_update_star_success": {
            "name": "test_Controller_on_update_star_success",
            "location": 559,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "str"
                ],
                "config": [
                    "dict[str, typing.Any]"
                ],
                "mocker": [],
                "session_maker": [
                    "str"
                ]
            }
        },
        "test_Controller_on_update_star_failed": {
            "name": "test_Controller_on_update_star_failed",
            "location": 572,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [],
                "config": [
                    "int",
                    "str"
                ],
                "mocker": []
            }
        },
        "test_Controller_on_update_star_failed_due_to_timeout": {
            "name": "test_Controller_on_update_star_failed_due_to_timeout",
            "location": 590,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [],
                "config": [
                    "str",
                    "int"
                ],
                "mocker": []
            }
        },
        "test_Controller_invalidate_token": {
            "name": "test_Controller_invalidate_token",
            "location": 606,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "homedir": [],
                "session_maker": []
            }
        },
        "test_Controller_logout_with_pending_replies": {
            "name": "test_Controller_logout_with_pending_replies",
            "location": 618,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session_maker": [],
                "homedir": [],
                "reply_status_codes": [
                    "int",
                    "str",
                    "list[int]"
                ]
            }
        },
        "test_Controller_logout_with_no_api": {
            "name": "test_Controller_logout_with_no_api",
            "location": 651,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "str"
                ],
                "config": [
                    "dict[str, typing.Any]"
                ],
                "mocker": [],
                "session_maker": [
                    "str"
                ]
            }
        },
        "test_Controller_logout_success": {
            "name": "test_Controller_logout_success",
            "location": 672,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "str"
                ],
                "config": [
                    "dict[str, typing.Any]"
                ],
                "mocker": [],
                "session_maker": [
                    "str"
                ]
            }
        },
        "test_Controller_logout_failure": {
            "name": "test_Controller_logout_failure",
            "location": 701,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "str"
                ],
                "config": [
                    "dict[str, typing.Any]"
                ],
                "mocker": [],
                "session_maker": [
                    "str"
                ]
            }
        },
        "test_Controller_set_activity_status": {
            "name": "test_Controller_set_activity_status",
            "location": 730,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "str"
                ],
                "config": [
                    "dict[str, typing.Any]"
                ],
                "mocker": [],
                "session_maker": [
                    "str"
                ]
            }
        },
        "test_create_client_dir_permissions": {
            "name": "test_create_client_dir_permissions",
            "location": 749,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "bool",
                    "str"
                ],
                "mocker": [],
                "session_maker": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_Controller_on_file_download_Submission": {
            "name": "test_Controller_on_file_download_Submission",
            "location": 783,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [],
                "config": [],
                "session": [],
                "mocker": [],
                "session_maker": []
            }
        },
        "test_Controller_on_file_download_Submission_no_auth": {
            "name": "test_Controller_on_file_download_Submission_no_auth",
            "location": 820,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [],
                "config": [],
                "session": [],
                "mocker": [],
                "session_maker": []
            }
        },
        "test_Controller_on_file_downloaded_success": {
            "name": "test_Controller_on_file_downloaded_success",
            "location": 853,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "str"
                ],
                "config": [],
                "mocker": [],
                "session_maker": [
                    "str"
                ]
            }
        },
        "test_Controller_on_file_downloaded_api_failure": {
            "name": "test_Controller_on_file_downloaded_api_failure",
            "location": 877,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "str"
                ],
                "config": [],
                "mocker": [],
                "session_maker": [
                    "str"
                ]
            }
        },
        "test_Controller_on_file_downloaded_checksum_failure": {
            "name": "test_Controller_on_file_downloaded_checksum_failure",
            "location": 895,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [],
                "config": [
                    "dict[str, typing.Any]"
                ],
                "mocker": [],
                "session_maker": []
            }
        },
        "test_Controller_on_file_decryption_failure": {
            "name": "test_Controller_on_file_decryption_failure",
            "location": 925,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [],
                "config": [
                    "bool"
                ],
                "mocker": [],
                "session": [],
                "session_maker": []
            }
        },
        "test_Controller_on_file_open": {
            "name": "test_Controller_on_file_open",
            "location": 955,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [],
                "config": [],
                "mocker": [],
                "session": [],
                "session_maker": [],
                "source": []
            }
        },
        "test_Controller_on_file_open_not_qubes": {
            "name": "test_Controller_on_file_open_not_qubes",
            "location": 982,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [],
                "config": [],
                "mocker": [],
                "session": [],
                "session_maker": [],
                "source": []
            }
        },
        "test_Controller_on_file_open_when_orig_file_already_exists": {
            "name": "test_Controller_on_file_open_when_orig_file_already_exists",
            "location": 1000,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [],
                "config": [],
                "mocker": [],
                "session": [],
                "session_maker": [],
                "source": []
            }
        },
        "test_Controller_on_file_open_when_orig_file_already_exists_not_qubes": {
            "name": "test_Controller_on_file_open_when_orig_file_already_exists_not_qubes",
            "location": 1030,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [],
                "config": [],
                "mocker": [],
                "session": [],
                "session_maker": [],
                "source": []
            }
        },
        "test_Controller_on_file_open_file_missing": {
            "name": "test_Controller_on_file_open_file_missing",
            "location": 1051,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "homedir": [],
                "session_maker": [],
                "session": [],
                "source": []
            }
        },
        "test_Controller_on_file_open_file_missing_not_qubes": {
            "name": "test_Controller_on_file_open_file_missing_not_qubes",
            "location": 1068,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "homedir": [],
                "session_maker": [],
                "session": [],
                "source": []
            }
        },
        "test_Controller_download_new_replies_with_new_reply": {
            "name": "test_Controller_download_new_replies_with_new_reply",
            "location": 1088,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session": [
                    "int"
                ],
                "session_maker": [],
                "homedir": []
            }
        },
        "test_Controller_download_new_replies_without_replies": {
            "name": "test_Controller_download_new_replies_without_replies",
            "location": 1115,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session": [
                    "bool"
                ],
                "session_maker": [],
                "homedir": []
            }
        },
        "test_Controller_on_reply_downloaded_success": {
            "name": "test_Controller_on_reply_downloaded_success",
            "location": 1138,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "homedir": [],
                "session_maker": []
            }
        },
        "test_Controller_on_reply_downloaded_failure": {
            "name": "test_Controller_on_reply_downloaded_failure",
            "location": 1152,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "homedir": [],
                "session_maker": []
            }
        },
        "test_Controller_on_reply_downloaded_checksum_failure": {
            "name": "test_Controller_on_reply_downloaded_checksum_failure",
            "location": 1170,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "homedir": [],
                "session_maker": []
            }
        },
        "test_Controller_on_reply_downloaded_decryption_failure": {
            "name": "test_Controller_on_reply_downloaded_decryption_failure",
            "location": 1194,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "homedir": [],
                "session_maker": []
            }
        },
        "test_Controller_download_new_messages_with_new_message": {
            "name": "test_Controller_download_new_messages_with_new_message",
            "location": 1211,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session": [
                    "int"
                ],
                "session_maker": [],
                "homedir": []
            }
        },
        "test_Controller_download_new_messages_without_messages": {
            "name": "test_Controller_download_new_messages_without_messages",
            "location": 1240,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session": [
                    "bool"
                ],
                "session_maker": [],
                "homedir": []
            }
        },
        "test_Controller_download_new_messages_skips_recent_failures": {
            "name": "test_Controller_download_new_messages_skips_recent_failures",
            "location": 1263,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session": [],
                "session_maker": [],
                "homedir": [],
                "download_error_codes": [
                    "bool",
                    "None",
                    "typing.Callable[, ]",
                    "list[]"
                ]
            }
        },
        "test_Controller_download_new_replies_skips_recent_failures": {
            "name": "test_Controller_download_new_replies_skips_recent_failures",
            "location": 1297,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session": [],
                "session_maker": [],
                "homedir": [],
                "download_error_codes": [
                    "bool",
                    "None",
                    "typing.Callable[, ]",
                    "list[]"
                ]
            }
        },
        "test_Controller_on_message_downloaded_success": {
            "name": "test_Controller_on_message_downloaded_success",
            "location": 1332,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "homedir": [],
                "session_maker": []
            }
        },
        "test_Controller_on_message_downloaded_failure": {
            "name": "test_Controller_on_message_downloaded_failure",
            "location": 1346,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "homedir": [],
                "session_maker": []
            }
        },
        "test_Controller_on_message_downloaded_checksum_failure": {
            "name": "test_Controller_on_message_downloaded_checksum_failure",
            "location": 1364,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "homedir": [],
                "session_maker": []
            }
        },
        "test_Controller_on_message_downloaded_decryption_failure": {
            "name": "test_Controller_on_message_downloaded_decryption_failure",
            "location": 1384,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "homedir": [],
                "session_maker": []
            }
        },
        "test_Controller_on_delete_source_success": {
            "name": "test_Controller_on_delete_source_success",
            "location": 1401,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "homedir": []
            }
        },
        "test_Controller_on_delete_source_failure": {
            "name": "test_Controller_on_delete_source_failure",
            "location": 1414,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "str"
                ],
                "config": [
                    "dict[str, typing.Any]"
                ],
                "mocker": [],
                "session_maker": [
                    "str"
                ]
            }
        },
        "test_Controller_delete_source_not_logged_in": {
            "name": "test_Controller_delete_source_not_logged_in",
            "location": 1424,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "str"
                ],
                "config": [
                    "dict[str, typing.Any]"
                ],
                "mocker": [],
                "session_maker": [
                    "str"
                ]
            }
        },
        "test_Controller_delete_source": {
            "name": "test_Controller_delete_source",
            "location": 1440,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [],
                "config": [],
                "mocker": [],
                "session_maker": [],
                "session": [
                    "typing.Callable[List,bool, None]"
                ]
            }
        },
        "test_Controller_send_reply_success": {
            "name": "test_Controller_send_reply_success",
            "location": 1476,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "str"
                ],
                "config": [
                    "str",
                    "typing.Type",
                    "Exception"
                ],
                "mocker": [],
                "session_maker": [
                    "str"
                ],
                "session": [
                    "typing.Callable[List,bool, None]",
                    "list[dict[, ]]",
                    "list[str]"
                ],
                "reply_status_codes": [
                    "str",
                    "typing.Type",
                    "Exception"
                ]
            }
        },
        "test_Controller_on_reply_success": {
            "name": "test_Controller_on_reply_success",
            "location": 1514,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [],
                "mocker": [],
                "session_maker": [],
                "session": [
                    "int",
                    "list[list[int]]"
                ]
            }
        },
        "test_Controller_on_reply_failure": {
            "name": "test_Controller_on_reply_failure",
            "location": 1538,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [],
                "mocker": [],
                "session_maker": []
            }
        },
        "test_Controller_on_reply_failure_for_timeout": {
            "name": "test_Controller_on_reply_failure_for_timeout",
            "location": 1555,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [],
                "mocker": [],
                "session_maker": []
            }
        },
        "test_Controller_is_authenticated_property": {
            "name": "test_Controller_is_authenticated_property",
            "location": 1572,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "str",
                    "list[str]"
                ],
                "mocker": [],
                "session_maker": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "test_Controller_resume_queues": {
            "name": "test_Controller_resume_queues",
            "location": 1608,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [],
                "mocker": [],
                "session_maker": []
            }
        },
        "test_APICallRunner_api_call_timeout": {
            "name": "test_APICallRunner_api_call_timeout",
            "location": 1618,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "exception": []
            }
        },
        "test_Controller_on_queue_paused": {
            "name": "test_Controller_on_queue_paused",
            "location": 1638,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "str"
                ],
                "config": [
                    "dict[str, typing.Any]"
                ],
                "mocker": [],
                "session_maker": [
                    "str"
                ]
            }
        },
        "test_Controller_call_update_star_success": {
            "name": "test_Controller_call_update_star_success",
            "location": 1654,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [],
                "config": [],
                "mocker": [],
                "session_maker": [],
                "session": [
                    "typing.Callable[List,bool, None]"
                ]
            }
        },
        "test_Controller_run_printer_preflight_checks": {
            "name": "test_Controller_run_printer_preflight_checks",
            "location": 1689,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "dict[str, typing.Any]"
                ],
                "mocker": [],
                "session": [
                    "int",
                    "str"
                ],
                "source": [
                    "int",
                    "str"
                ]
            }
        },
        "test_Controller_run_printer_preflight_checks_not_qubes": {
            "name": "test_Controller_run_printer_preflight_checks_not_qubes",
            "location": 1700,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "dict[str, typing.Any]"
                ],
                "mocker": [],
                "session": [
                    "int",
                    "str"
                ],
                "source": [
                    "int",
                    "str"
                ]
            }
        },
        "test_Controller_run_print_file": {
            "name": "test_Controller_run_print_file",
            "location": 1715,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session": [
                    "str",
                    "bytes",
                    "dict[str, str]"
                ],
                "homedir": []
            }
        },
        "test_Controller_run_print_file_not_qubes": {
            "name": "test_Controller_run_print_file_not_qubes",
            "location": 1734,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session": [
                    "str",
                    "bytes",
                    "dict[str, str]"
                ],
                "homedir": []
            }
        },
        "test_Controller_print_file_file_missing": {
            "name": "test_Controller_print_file_file_missing",
            "location": 1755,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [],
                "mocker": [],
                "session": [],
                "session_maker": []
            }
        },
        "test_Controller_print_file_file_missing_not_qubes": {
            "name": "test_Controller_print_file_file_missing_not_qubes",
            "location": 1773,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [],
                "mocker": [],
                "session": [],
                "session_maker": []
            }
        },
        "test_Controller_print_file_when_orig_file_already_exists": {
            "name": "test_Controller_print_file_when_orig_file_already_exists",
            "location": 1792,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "dict[str, typing.Any]"
                ],
                "config": [],
                "mocker": [],
                "session": [],
                "session_maker": [],
                "source": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_Controller_print_file_when_orig_file_already_exists_not_qubes": {
            "name": "test_Controller_print_file_when_orig_file_already_exists_not_qubes",
            "location": 1814,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "dict[str, typing.Any]"
                ],
                "config": [],
                "mocker": [],
                "session": [],
                "session_maker": [],
                "source": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_Controller_run_export_preflight_checks": {
            "name": "test_Controller_run_export_preflight_checks",
            "location": 1841,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "dict[str, typing.Any]"
                ],
                "mocker": [],
                "session": [],
                "source": []
            }
        },
        "test_Controller_run_export_preflight_checks_not_qubes": {
            "name": "test_Controller_run_export_preflight_checks_not_qubes",
            "location": 1856,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "dict[str, typing.Any]"
                ],
                "mocker": [],
                "session": [],
                "source": []
            }
        },
        "test_Controller_export_file_to_usb_drive": {
            "name": "test_Controller_export_file_to_usb_drive",
            "location": 1872,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [],
                "mocker": [],
                "session": []
            }
        },
        "test_Controller_export_file_to_usb_drive_not_qubes": {
            "name": "test_Controller_export_file_to_usb_drive_not_qubes",
            "location": 1895,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [],
                "mocker": [],
                "session": []
            }
        },
        "test_Controller_export_file_to_usb_drive_file_missing": {
            "name": "test_Controller_export_file_to_usb_drive_file_missing",
            "location": 1920,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [],
                "mocker": [],
                "session": [],
                "session_maker": []
            }
        },
        "test_Controller_export_file_to_usb_drive_file_missing_not_qubes": {
            "name": "test_Controller_export_file_to_usb_drive_file_missing_not_qubes",
            "location": 1938,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [],
                "mocker": [],
                "session": [],
                "session_maker": []
            }
        },
        "test_Controller_export_file_to_usb_drive_when_orig_file_already_exists": {
            "name": "test_Controller_export_file_to_usb_drive_when_orig_file_already_exists",
            "location": 1959,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "dict[str, typing.Any]"
                ],
                "config": [],
                "mocker": [],
                "session": [
                    "typing.Sequence[A]"
                ],
                "session_maker": [],
                "source": [
                    "None"
                ]
            }
        },
        "test_Controller_export_file_to_usb_drive_when_orig_file_already_exists_not_qubes": {
            "name": "test_Controller_export_file_to_usb_drive_when_orig_file_already_exists_not_qubes",
            "location": 1981,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "dict[str, typing.Any]"
                ],
                "config": [],
                "mocker": [],
                "session": [
                    "typing.Sequence[A]"
                ],
                "session_maker": [],
                "source": [
                    "None"
                ]
            }
        },
        "test_get_file": {
            "name": "test_get_file",
            "location": 2008,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session": [
                    "dict[str, typing.Any]",
                    "str"
                ],
                "homedir": []
            }
        },
        "test_create_client_dir_permissions.func": {
            "name": "func",
            "location": 769,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "securedrop-client-master/tests/test_models.py": {
        "test_user_fullname": {
            "name": "test_user_fullname",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_user_initials": {
            "name": "test_user_initials",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_string_representation_of_source": {
            "name": "test_string_representation_of_source",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_repr_representation_of_message": {
            "name": "test_repr_representation_of_message",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_repr_representation_of_file": {
            "name": "test_repr_representation_of_file",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_repr_representation_of_reply": {
            "name": "test_repr_representation_of_reply",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_repr_representation_of_draft_reply": {
            "name": "test_repr_representation_of_draft_reply",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_string_representation_of_message": {
            "name": "test_string_representation_of_message",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_string_representation_of_file": {
            "name": "test_string_representation_of_file",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_string_representation_of_reply": {
            "name": "test_string_representation_of_reply",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_string_representation_of_draft_reply": {
            "name": "test_string_representation_of_draft_reply",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_string_representation_of_send_reply_status": {
            "name": "test_string_representation_of_send_reply_status",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_string_representation_of_download_error": {
            "name": "test_string_representation_of_download_error",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_source_collection": {
            "name": "test_source_collection",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_source_server_collection": {
            "name": "test_source_server_collection",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_source_collection_ordering_with_multiple_draft_replies": {
            "name": "test_source_collection_ordering_with_multiple_draft_replies",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_file_init": {
            "name": "test_file_init",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_message_init": {
            "name": "test_message_init",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_reply_init": {
            "name": "test_reply_init",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_file_with_download_error": {
            "name": "test_file_with_download_error",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [],
                "download_error_codes": [
                    "bool",
                    "list[str]",
                    "str"
                ]
            }
        },
        "test_message_with_download_error": {
            "name": "test_message_with_download_error",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [],
                "download_error_codes": [
                    "int",
                    "None",
                    "typing.Callable[, ]",
                    "list[]",
                    "str",
                    "list[str]"
                ]
            }
        },
        "test_reply_with_download_error": {
            "name": "test_reply_with_download_error",
            "location": 342,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [],
                "download_error_codes": [
                    "int",
                    "None",
                    "typing.Callable[, ]",
                    "list[]",
                    "str",
                    "list[str]"
                ]
            }
        }
    },
    "securedrop-client-master/tests/test_queue.py": {
        "test_RunnableQueue_init": {
            "name": "test_RunnableQueue_init",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_RunnableQueue_happy_path": {
            "name": "test_RunnableQueue_happy_path",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_RunnableQueue_job_timeout": {
            "name": "test_RunnableQueue_job_timeout",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "exception": [
                    "str"
                ]
            }
        },
        "test_RunnableQueue_process_PauseQueueJob": {
            "name": "test_RunnableQueue_process_PauseQueueJob",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_RunnableQueue_high_priority_jobs_run_first_and_in_fifo_order": {
            "name": "test_RunnableQueue_high_priority_jobs_run_first_and_in_fifo_order",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_RunnableQueue_resubmitted_jobs": {
            "name": "test_RunnableQueue_resubmitted_jobs",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_RunnableQueue_duplicate_jobs": {
            "name": "test_RunnableQueue_duplicate_jobs",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_RunnableQueue_job_generic_exception": {
            "name": "test_RunnableQueue_job_generic_exception",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_RunnableQueue_does_not_run_jobs_when_not_authed": {
            "name": "test_RunnableQueue_does_not_run_jobs_when_not_authed",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ApiJobQueue_enqueue_when_queues_are_running": {
            "name": "test_ApiJobQueue_enqueue_when_queues_are_running",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ApiJobQueue_enqueue_when_queues_are_not_running": {
            "name": "test_ApiJobQueue_enqueue_when_queues_are_not_running",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ApiJobQueue_on_main_queue_paused": {
            "name": "test_ApiJobQueue_on_main_queue_paused",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ApiJobQueue_on_file_download_queue_paused": {
            "name": "test_ApiJobQueue_on_file_download_queue_paused",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ApiJobQueue_resume_queues_emits_resume_signal_if_queues_are_running": {
            "name": "test_ApiJobQueue_resume_queues_emits_resume_signal_if_queues_are_running",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ApiJobQueue_resume_queues_does_not_emit_resume_signal_if_queues_are_not_running": {
            "name": "test_ApiJobQueue_resume_queues_does_not_emit_resume_signal_if_queues_are_not_running",
            "location": 349,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ApiJobQueue_enqueue_no_auth": {
            "name": "test_ApiJobQueue_enqueue_no_auth",
            "location": 365,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ApiJobQueue_start_if_queues_not_running": {
            "name": "test_ApiJobQueue_start_if_queues_not_running",
            "location": 385,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ApiJobQueue_start_if_queues_running": {
            "name": "test_ApiJobQueue_start_if_queues_running",
            "location": 411,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ApiJobQueue_stop_stops_queue_threads": {
            "name": "test_ApiJobQueue_stop_stops_queue_threads",
            "location": 437,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ApiJobQueue_stop_results_in_queue_threads_not_running": {
            "name": "test_ApiJobQueue_stop_results_in_queue_threads_not_running",
            "location": 446,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_RunnableQueue_job_timeout.fake_pause": {
            "name": "fake_pause",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "securedrop-client-master/tests/test_resources.py": {
        "test_path": {
            "name": "test_path",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "bool",
                    "Tuple[float, float, float, float]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_load_icon": {
            "name": "test_load_icon",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load_svg": {
            "name": "test_load_svg",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load_image": {
            "name": "test_load_image",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load_css": {
            "name": "test_load_css",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_load_movie": {
            "name": "test_load_movie",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "securedrop-client-master/tests/test_storage.py": {
        "make_remote_message": {
            "name": "make_remote_message",
            "location": 51,
            "return": [
                "Submission"
            ],
            "arguments": {
                "source_uuid": [
                    "str",
                    "None"
                ],
                "file_counter": [
                    "int"
                ]
            }
        },
        "make_remote_submission": {
            "name": "make_remote_submission",
            "location": 69,
            "return": [
                "Submission"
            ],
            "arguments": {
                "source_uuid": [
                    "str"
                ]
            }
        },
        "make_remote_reply": {
            "name": "make_remote_reply",
            "location": 87,
            "return": [
                "Reply"
            ],
            "arguments": {
                "source_uuid": [
                    "str"
                ],
                "journalist_uuid": [
                    "typing.Text"
                ]
            }
        },
        "test_get_local_sources": {
            "name": "test_get_local_sources",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_delete_local_source_by_uuid": {
            "name": "test_delete_local_source_by_uuid",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "str"
                ],
                "mocker": []
            }
        },
        "test_delete_local_source_by_uuid_no_files": {
            "name": "test_delete_local_source_by_uuid_no_files",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [],
                "mocker": []
            }
        },
        "test_get_local_messages": {
            "name": "test_get_local_messages",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_get_local_files": {
            "name": "test_get_local_files",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_get_local_replies": {
            "name": "test_get_local_replies",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_get_remote_data_handles_api_error": {
            "name": "test_get_remote_data_handles_api_error",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_get_remote_data": {
            "name": "test_get_remote_data",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_update_local_storage": {
            "name": "test_update_local_storage",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [],
                "mocker": [],
                "session_maker": [
                    "bool",
                    "list[list[int]]"
                ]
            }
        },
        "test_sync_delete_race": {
            "name": "test_sync_delete_race",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "mocker": [
                    "bool",
                    "typing.Callable[, ]",
                    "bytes"
                ],
                "session_maker": [
                    "int",
                    "list[list[int]]"
                ],
                "session": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "test_update_sources": {
            "name": "test_update_sources",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [],
                "mocker": [],
                "session_maker": [
                    "int",
                    "list[list[int]]"
                ],
                "session": []
            }
        },
        "add_test_file_to_temp_dir": {
            "name": "add_test_file_to_temp_dir",
            "location": 400,
            "return": [
                "str"
            ],
            "arguments": {
                "home_dir": [
                    "str"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "test_update_submissions_deletes_files_associated_with_the_submission": {
            "name": "test_update_submissions_deletes_files_associated_with_the_submission",
            "location": 413,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "str"
                ],
                "mocker": []
            }
        },
        "test_update_replies_deletes_files_associated_with_the_reply": {
            "name": "test_update_replies_deletes_files_associated_with_the_reply",
            "location": 457,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "str"
                ],
                "mocker": []
            }
        },
        "test_update_sources_deletes_files_associated_with_the_source": {
            "name": "test_update_sources_deletes_files_associated_with_the_source",
            "location": 501,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "str"
                ],
                "mocker": [],
                "session_maker": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_update_files": {
            "name": "test_update_files",
            "location": 580,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "str"
                ],
                "mocker": []
            }
        },
        "test_update_messages": {
            "name": "test_update_messages",
            "location": 645,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "str"
                ],
                "mocker": []
            }
        },
        "test_update_replies": {
            "name": "test_update_replies",
            "location": 714,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "list[str]",
                    "str",
                    "int"
                ],
                "mocker": [
                    "bool",
                    "list[list[int]]"
                ],
                "session": []
            }
        },
        "test_update_replies_cleanup_drafts": {
            "name": "test_update_replies_cleanup_drafts",
            "location": 788,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "list[str]",
                    "str",
                    "int"
                ],
                "mocker": [
                    "bool",
                    "list[list[int]]"
                ],
                "session": []
            }
        },
        "test_update_replies_missing_source": {
            "name": "test_update_replies_missing_source",
            "location": 844,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "str",
                    "list[str]"
                ],
                "mocker": [],
                "session": []
            }
        },
        "test_find_or_create_user_existing_uuid": {
            "name": "test_find_or_create_user_existing_uuid",
            "location": 870,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_find_or_create_user_update_username": {
            "name": "test_find_or_create_user_update_username",
            "location": 881,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "typing.BinaryIO",
                    "None",
                    "typing.Sequence[typing.Sequence[str]]",
                    "typing.Sequence[str]",
                    "typing.Sequence[typing.Hashable]",
                    "list[tuple[typing.Union[int,int]]]",
                    "str"
                ],
                "session": []
            }
        },
        "test_find_or_create_user_new": {
            "name": "test_find_or_create_user_new",
            "location": 894,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_update_and_get_user": {
            "name": "test_update_and_get_user",
            "location": 906,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session": []
            }
        },
        "test_find_new_messages": {
            "name": "test_find_new_messages",
            "location": 936,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "typing.BinaryIO",
                    "None",
                    "str",
                    "typing.Sequence[typing.Hashable]",
                    "list[tuple[typing.Union[int,int]]]",
                    "typing.Sequence[typing.Sequence[str]]",
                    "typing.Sequence[str]"
                ],
                "session": []
            }
        },
        "test_update_missing_files": {
            "name": "test_update_missing_files",
            "location": 964,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "homedir": [
                    "str"
                ]
            }
        },
        "test_find_new_files": {
            "name": "test_find_new_files",
            "location": 980,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "mocker": [],
                "session": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_find_new_replies": {
            "name": "test_find_new_replies",
            "location": 990,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "typing.BinaryIO",
                    "None",
                    "str",
                    "typing.Sequence[typing.Hashable]",
                    "list[tuple[typing.Union[int,int]]]",
                    "typing.Sequence[typing.Sequence[str]]",
                    "typing.Sequence[str]"
                ],
                "session": []
            }
        },
        "test_set_file_decryption_status_with_content_null_to_false": {
            "name": "test_set_file_decryption_status_with_content_null_to_false",
            "location": 1018,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "list[str]"
                ],
                "session": []
            }
        },
        "test_set_file_decryption_status_with_content_false_to_true": {
            "name": "test_set_file_decryption_status_with_content_false_to_true",
            "location": 1028,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "mocker": [
                    "bool",
                    "str"
                ],
                "session": []
            }
        },
        "test_set_message_decryption_status_with_content_with_content": {
            "name": "test_set_message_decryption_status_with_content_with_content",
            "location": 1038,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [],
                "source": []
            }
        },
        "test_mark_file_as_not_downloaded": {
            "name": "test_mark_file_as_not_downloaded",
            "location": 1060,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_mark_file_as_downloaded": {
            "name": "test_mark_file_as_downloaded",
            "location": 1071,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_mark_message_as_downloaded": {
            "name": "test_mark_message_as_downloaded",
            "location": 1081,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_mark_reply_as_downloaded": {
            "name": "test_mark_reply_as_downloaded",
            "location": 1091,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_delete_single_submission_or_reply_race_guard": {
            "name": "test_delete_single_submission_or_reply_race_guard",
            "location": 1101,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [],
                "mocker": []
            }
        },
        "test_delete_single_submission_or_reply_single_file": {
            "name": "test_delete_single_submission_or_reply_single_file",
            "location": 1118,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "str"
                ],
                "mocker": [
                    "typing.Generator[]"
                ]
            }
        },
        "test_delete_single_submission_or_reply_single_file_no_folder": {
            "name": "test_delete_single_submission_or_reply_single_file_no_folder",
            "location": 1146,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [],
                "mocker": []
            }
        },
        "test_source_exists_true": {
            "name": "test_source_exists_true",
            "location": 1173,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "str",
                    "int"
                ],
                "mocker": []
            }
        },
        "test_source_exists_false": {
            "name": "test_source_exists_false",
            "location": 1184,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "str",
                    "int"
                ],
                "mocker": []
            }
        },
        "test_get_file": {
            "name": "test_get_file",
            "location": 1196,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "bool",
                    "typing.Sequence[str]",
                    "list[str]",
                    "dict[, ]",
                    "str",
                    "None"
                ],
                "session": []
            }
        },
        "test_get_message": {
            "name": "test_get_message",
            "location": 1207,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str"
                ],
                "session": []
            }
        },
        "test_get_reply": {
            "name": "test_get_reply",
            "location": 1218,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str"
                ],
                "session": []
            }
        },
        "test_pending_replies_are_marked_as_failed_on_logout_login": {
            "name": "test_pending_replies_are_marked_as_failed_on_logout_login",
            "location": 1229,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "typing.Callable[, ]",
                    "int"
                ],
                "session": [],
                "reply_status_codes": [
                    "typing.Callable[, ]",
                    "int"
                ]
            }
        },
        "test_update_file_size": {
            "name": "test_update_file_size",
            "location": 1249,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "str",
                    "int"
                ],
                "session": []
            }
        },
        "test_update_draft_replies_commit": {
            "name": "test_update_draft_replies_commit",
            "location": 1267,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session": []
            }
        },
        "test_sync_delete_race.delayed_update_messages": {
            "name": "delayed_update_messages",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "remote_submissions": [],
                "local_submissions": [],
                "session": [],
                "data_dir": []
            }
        },
        "test_sync_delete_race.Deleter.__init__": {
            "name": "__init__",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_uuid": []
            }
        },
        "test_sync_delete_race.Deleter.run": {
            "name": "run",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "securedrop-client-master/tests/test_sync.py": {
        "test_ApiSync_init": {
            "name": "test_ApiSync_init",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session_maker": [],
                "homedir": []
            }
        },
        "test_ApiSync_start": {
            "name": "test_ApiSync_start",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session_maker": [],
                "homedir": []
            }
        },
        "test_ApiSync_start_not_called_when_already_started": {
            "name": "test_ApiSync_start_not_called_when_already_started",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session_maker": [],
                "homedir": []
            }
        },
        "test_ApiSync_stop": {
            "name": "test_ApiSync_stop",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session_maker": [],
                "homedir": []
            }
        },
        "test_ApiSync_stop_calls_quit": {
            "name": "test_ApiSync_stop_calls_quit",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session_maker": [],
                "homedir": []
            }
        },
        "test_ApiSyncBackgroundTask_sync": {
            "name": "test_ApiSyncBackgroundTask_sync",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session_maker": [],
                "homedir": []
            }
        },
        "test_ApiSyncBackgroundTask_sync_resets_retries": {
            "name": "test_ApiSyncBackgroundTask_sync_resets_retries",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session_maker": [],
                "homedir": []
            }
        },
        "test_ApiSyncBackgroundTask_sync_catches_ApiInaccessibleError": {
            "name": "test_ApiSyncBackgroundTask_sync_catches_ApiInaccessibleError",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session_maker": [
                    "str"
                ],
                "homedir": [
                    "str"
                ]
            }
        },
        "test_ApiSyncBackgroundTask_sync_catches_all_other_exceptions": {
            "name": "test_ApiSyncBackgroundTask_sync_catches_all_other_exceptions",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session_maker": [],
                "homedir": []
            }
        },
        "test_ApiSync_on_sync_success": {
            "name": "test_ApiSync_on_sync_success",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session_maker": [],
                "homedir": []
            }
        },
        "test_ApiSync_on_sync_failure": {
            "name": "test_ApiSync_on_sync_failure",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session_maker": [],
                "homedir": []
            }
        },
        "test_ApiSync_on_sync_failure_because_of_timeout": {
            "name": "test_ApiSync_on_sync_failure_because_of_timeout",
            "location": 172,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session_maker": [],
                "homedir": [],
                "exception": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ]
            }
        }
    },
    "securedrop-client-master/tests/test_utils.py": {
        "test_safe_makedirs_non_absolute": {
            "name": "test_safe_makedirs_non_absolute",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "test_humanize_file_size_bytes": {
            "name": "test_humanize_file_size_bytes",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_humanize_file_size_kilobytes": {
            "name": "test_humanize_file_size_kilobytes",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_humanize_file_size_megabytes": {
            "name": "test_humanize_file_size_megabytes",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "securedrop-client-master/tests/__init__.py": {},
    "securedrop-client-master/tests/api_jobs/test_base.py": {
        "test_ApiInaccessibleError_init": {
            "name": "test_ApiInaccessibleError_init",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ApiJob_raises_NotImplemetedError": {
            "name": "test_ApiJob_raises_NotImplemetedError",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ApiJob_no_api": {
            "name": "test_ApiJob_no_api",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ApiJob_success": {
            "name": "test_ApiJob_success",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ApiJob_auth_error": {
            "name": "test_ApiJob_auth_error",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ApiJob_timeout_error": {
            "name": "test_ApiJob_timeout_error",
            "location": 71,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mocker": [],
                "exception": [
                    "Iterable[Iterable[Any]]",
                    "typing.Iterable[typing.Iterable[typing.Any]]"
                ]
            }
        },
        "test_ApiJob_other_error": {
            "name": "test_ApiJob_other_error",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ApiJob_retry_suceeds_after_failed_attempt": {
            "name": "test_ApiJob_retry_suceeds_after_failed_attempt",
            "location": 104,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mocker": [],
                "exception": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "None",
                    "int",
                    "Optional[dict]",
                    "dict[, ]"
                ]
            }
        },
        "test_ApiJob_retry_exactly_n_attempts_times": {
            "name": "test_ApiJob_retry_exactly_n_attempts_times",
            "location": 125,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mocker": [
                    "tests.async_mock.MagicMock"
                ],
                "exception": [
                    "Iterable[Iterable[Any]]",
                    "typing.Iterable[typing.Iterable[typing.Any]]"
                ]
            }
        },
        "test_ApiJob_retry_timeout": {
            "name": "test_ApiJob_retry_timeout",
            "location": 146,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mocker": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "exception": [
                    "typing.Iterable[typing.Iterable[typing.Any]]",
                    "Iterable[Iterable[Any]]",
                    "Dict[str, Sequence[Any]]"
                ]
            }
        },
        "test_ApiJob_comparison": {
            "name": "test_ApiJob_comparison",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "bool",
                    "antidote.providers.factory.FactoryProvider",
                    "int"
                ]
            }
        },
        "test_ApiJob_order_number_unset": {
            "name": "test_ApiJob_order_number_unset",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "bool",
                    "antidote.providers.factory.FactoryProvider",
                    "int"
                ]
            }
        },
        "test_SingleObjectApiJob_comparison_obj_without_uuid_attr": {
            "name": "test_SingleObjectApiJob_comparison_obj_without_uuid_attr",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "typing.Callable[..., None]",
                    "str",
                    "tests.basilisp.helpers.CompileFn",
                    "Callable[..., None]"
                ]
            }
        },
        "test_SingleObjectApiJob_comparison_obj_with_uuid_attr": {
            "name": "test_SingleObjectApiJob_comparison_obj_with_uuid_attr",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "typing.Callable[..., None]",
                    "str",
                    "tests.basilisp.helpers.CompileFn",
                    "Callable[..., None]"
                ]
            }
        }
    },
    "securedrop-client-master/tests/api_jobs/test_downloads.py": {
        "patch_decrypt": {
            "name": "patch_decrypt",
            "location": 23,
            "return": [
                "dict[str, typing.Union[typing.Any,typing.Any,typing.Any]]",
                "list[str]",
                "bytes",
                "None",
                "list[]"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "dict[str, typing.Any]",
                    "None",
                    "bool",
                    "float"
                ],
                "homedir": [
                    "bool",
                    "str"
                ],
                "gpghelper": [
                    "str",
                    "dict[str, typing.Any]",
                    "None",
                    "bool",
                    "float"
                ],
                "filename": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_MessageDownloadJob_raises_NotImplementedError": {
            "name": "test_MessageDownloadJob_raises_NotImplementedError",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "typing.Callable[..., None]",
                    "str"
                ]
            }
        },
        "test_ReplyDownloadJob_no_download_or_decrypt": {
            "name": "test_ReplyDownloadJob_no_download_or_decrypt",
            "location": 43,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "mocker": [],
                "homedir": [
                    "bool"
                ],
                "session": [],
                "session_maker": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_ReplyDownloadJob_message_already_decrypted": {
            "name": "test_ReplyDownloadJob_message_already_decrypted",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "homedir": [],
                "session": [],
                "session_maker": [
                    "int",
                    "str"
                ]
            }
        },
        "test_ReplyDownloadJob_message_already_downloaded": {
            "name": "test_ReplyDownloadJob_message_already_downloaded",
            "location": 97,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "mocker": [],
                "homedir": [],
                "session": [],
                "session_maker": [
                    "int",
                    "str"
                ]
            }
        },
        "test_ReplyDownloadJob_happiest_path": {
            "name": "test_ReplyDownloadJob_happiest_path",
            "location": 118,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "mocker": [],
                "homedir": [
                    "bool"
                ],
                "session": [
                    "list[dict[, ]]",
                    "list[str]"
                ],
                "session_maker": [
                    "int",
                    "str"
                ]
            }
        },
        "test_MessageDownloadJob_no_download_or_decrypt": {
            "name": "test_MessageDownloadJob_no_download_or_decrypt",
            "location": 143,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "mocker": [],
                "homedir": [
                    "bool"
                ],
                "session": [],
                "session_maker": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_MessageDownloadJob_message_already_decrypted": {
            "name": "test_MessageDownloadJob_message_already_decrypted",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "homedir": [
                    "int",
                    "str",
                    "typing.Callable[..., typing.Any]",
                    "None"
                ],
                "session": [
                    "dict[, ]",
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, typing.Any]"
                ],
                "session_maker": [
                    "int",
                    "str"
                ],
                "download_error_codes": [
                    "list[str]",
                    "typing.Literal",
                    "typing.Sequence[str]"
                ]
            }
        },
        "test_MessageDownloadJob_message_already_downloaded": {
            "name": "test_MessageDownloadJob_message_already_downloaded",
            "location": 201,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "mocker": [],
                "homedir": [
                    "int",
                    "str",
                    "typing.Callable[..., typing.Any]",
                    "None"
                ],
                "session": [
                    "dict[, ]",
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, typing.Any]"
                ],
                "session_maker": [
                    "int",
                    "str"
                ],
                "download_error_codes": [
                    "list[str]",
                    "typing.Literal",
                    "typing.Sequence[str]"
                ]
            }
        },
        "test_MessageDownloadJob_happiest_path": {
            "name": "test_MessageDownloadJob_happiest_path",
            "location": 224,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "mocker": [],
                "homedir": [
                    "bool"
                ],
                "session": [],
                "session_maker": [
                    "int",
                    "str"
                ]
            }
        },
        "test_MessageDownloadJob_with_base_error": {
            "name": "test_MessageDownloadJob_with_base_error",
            "location": 249,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "mocker": [],
                "homedir": [
                    "str"
                ],
                "session": [
                    "typing.Callable[, ]"
                ],
                "session_maker": [
                    "bool",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_MessageDownloadJob_with_crypto_error": {
            "name": "test_MessageDownloadJob_with_crypto_error",
            "location": 274,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "mocker": [],
                "homedir": [
                    "str"
                ],
                "session": [
                    "typing.Callable[, ]",
                    "bool"
                ],
                "session_maker": [
                    "int",
                    "str"
                ],
                "download_error_codes": [
                    "typing.Callable[, ]",
                    "typing.Literal",
                    "typing.Sequence[str]",
                    "list[]"
                ]
            }
        },
        "test_FileDownloadJob_message_already_decrypted": {
            "name": "test_FileDownloadJob_message_already_decrypted",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "homedir": [],
                "session": [],
                "session_maker": [
                    "int",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_FileDownloadJob_message_already_downloaded": {
            "name": "test_FileDownloadJob_message_already_downloaded",
            "location": 323,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "mocker": [],
                "homedir": [],
                "session": [],
                "session_maker": [
                    "int",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_FileDownloadJob_happy_path_no_etag": {
            "name": "test_FileDownloadJob_happy_path_no_etag",
            "location": 344,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "homedir": [
                    "str"
                ],
                "session": [],
                "session_maker": [
                    "bool"
                ]
            }
        },
        "test_FileDownloadJob_happy_path_sha256_etag": {
            "name": "test_FileDownloadJob_happy_path_sha256_etag",
            "location": 380,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "homedir": [
                    "str",
                    "None"
                ],
                "session": [
                    "str",
                    "None"
                ],
                "session_maker": [
                    "bool",
                    "list[str]"
                ],
                "download_error_codes": [
                    "bool",
                    "list[str]"
                ]
            }
        },
        "test_FileDownloadJob_bad_sha256_etag": {
            "name": "test_FileDownloadJob_bad_sha256_etag",
            "location": 418,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "homedir": [
                    "str",
                    "None"
                ],
                "session": [
                    "str",
                    "None"
                ],
                "session_maker": [
                    "str"
                ],
                "download_error_codes": [
                    "str"
                ]
            }
        },
        "test_FileDownloadJob_happy_path_unknown_etag": {
            "name": "test_FileDownloadJob_happy_path_unknown_etag",
            "location": 449,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "homedir": [
                    "str",
                    "None"
                ],
                "session": [],
                "session_maker": [
                    "bool"
                ]
            }
        },
        "test_FileDownloadJob_decryption_error": {
            "name": "test_FileDownloadJob_decryption_error",
            "location": 485,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "homedir": [
                    "str",
                    "None",
                    "bool"
                ],
                "session": [
                    "str",
                    "None"
                ],
                "session_maker": [
                    "bool"
                ],
                "download_error_codes": [
                    "bool"
                ]
            }
        },
        "test_timeout_length_of_file_downloads": {
            "name": "test_timeout_length_of_file_downloads",
            "location": 524,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "bool"
                ],
                "homedir": [],
                "session": [],
                "session_maker": [
                    "dict[str, typing.Any]",
                    "int",
                    "str"
                ]
            }
        },
        "test_FileDownloadJob_happy_path_no_etag.fake_download": {
            "name": "fake_download",
            "location": 354,
            "return": [
                "tuple[typing.Text]"
            ],
            "arguments": {
                "sdk_obj": [],
                "timeout": []
            }
        },
        "test_FileDownloadJob_happy_path_sha256_etag.fake_download": {
            "name": "fake_download",
            "location": 392,
            "return": [
                "tuple[typing.Text]"
            ],
            "arguments": {
                "sdk_obj": [],
                "timeout": []
            }
        },
        "test_FileDownloadJob_bad_sha256_etag.fake_download": {
            "name": "fake_download",
            "location": 429,
            "return": [
                "tuple[typing.Text]"
            ],
            "arguments": {
                "sdk_obj": [],
                "timeout": []
            }
        },
        "test_FileDownloadJob_happy_path_unknown_etag.fake_download": {
            "name": "fake_download",
            "location": 458,
            "return": [
                "tuple[typing.Text]"
            ],
            "arguments": {
                "sdk_obj": [],
                "timeout": []
            }
        },
        "test_FileDownloadJob_decryption_error.fake_download": {
            "name": "fake_download",
            "location": 497,
            "return": [
                "tuple[typing.Text]"
            ],
            "arguments": {
                "sdk_obj": [],
                "timeout": []
            }
        }
    },
    "securedrop-client-master/tests/api_jobs/test_sources.py": {
        "test_delete_source_job": {
            "name": "test_delete_source_job",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [],
                "mocker": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "session": [
                    "str",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "session_maker": []
            }
        },
        "test_failure_to_delete": {
            "name": "test_failure_to_delete",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "bool",
                    "tests.testmodels.Signals"
                ],
                "mocker": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "session": [],
                "session_maker": [
                    "bool",
                    "tests.testmodels.Signals"
                ]
            }
        },
        "test_failure_to_delete_timeout": {
            "name": "test_failure_to_delete_timeout",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "homedir": [
                    "int",
                    "list[list[int]]",
                    "bool",
                    "List[List[int]]"
                ],
                "mocker": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "session": [],
                "session_maker": [
                    "int",
                    "list[list[int]]",
                    "bool",
                    "List[List[int]]"
                ],
                "exception": []
            }
        }
    },
    "securedrop-client-master/tests/api_jobs/test_sync.py": {
        "test_MetadataSyncJob_success": {
            "name": "test_MetadataSyncJob_success",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "homedir": [
                    "tests.conftesWorker"
                ],
                "session": [],
                "session_maker": [
                    "int"
                ]
            }
        },
        "test_MetadataSyncJob_success_with_missing_key": {
            "name": "test_MetadataSyncJob_success_with_missing_key",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "homedir": [
                    "tests.conftesWorker"
                ],
                "session": [],
                "session_maker": [
                    "antidote.providers.factory.FactoryProvider"
                ]
            }
        }
    },
    "securedrop-client-master/tests/api_jobs/test_updatestar.py": {
        "test_star_if_unstar": {
            "name": "test_star_if_unstar",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "int"
                ],
                "mocker": [
                    "bool"
                ],
                "session": [
                    "Callable[[List, bool], None]",
                    "typing.Callable[List,bool, None]"
                ],
                "session_maker": [
                    "int"
                ]
            }
        },
        "test_unstar_if_star": {
            "name": "test_unstar_if_star",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "int"
                ],
                "mocker": [],
                "session": [
                    "Callable[[List, bool], None]",
                    "typing.Callable[List,bool, None]"
                ],
                "session_maker": [
                    "int"
                ]
            }
        },
        "test_call_api_raises_UpdateStarJobError": {
            "name": "test_call_api_raises_UpdateStarJobError",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [],
                "mocker": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "session": [],
                "session_maker": []
            }
        },
        "test_call_api_raises_UpdateStarJobTimeoutError": {
            "name": "test_call_api_raises_UpdateStarJobTimeoutError",
            "location": 86,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mocker": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "session": [],
                "exception": [
                    "str",
                    "bool",
                    "typing.IO",
                    "IO",
                    "tests.e2e.Helper"
                ]
            }
        }
    },
    "securedrop-client-master/tests/api_jobs/test_uploads.py": {
        "test_SendReplyJobTimeoutError": {
            "name": "test_SendReplyJobTimeoutError",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_send_reply_success": {
            "name": "test_send_reply_success",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "dict[str, typing.Any]",
                    "int",
                    "str",
                    "dict[, ]"
                ],
                "mocker": [],
                "session": [],
                "session_maker": [
                    "dict[str, typing.Any]",
                    "int",
                    "str",
                    "dict[, ]"
                ],
                "reply_status_codes": [
                    "int",
                    "list[str]"
                ]
            }
        },
        "test_drafts_ordering": {
            "name": "test_drafts_ordering",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "dict[str, typing.Any]",
                    "int",
                    "str",
                    "dict[, ]"
                ],
                "mocker": [],
                "session": [],
                "session_maker": [
                    "dict[str, typing.Any]",
                    "int",
                    "str",
                    "dict[, ]"
                ],
                "reply_status_codes": [
                    "int",
                    "list[str]"
                ]
            }
        },
        "test_send_reply_failure_gpg_error": {
            "name": "test_send_reply_failure_gpg_error",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "str",
                    "bool"
                ],
                "mocker": [],
                "session": [],
                "session_maker": [
                    "str",
                    "bool"
                ],
                "reply_status_codes": [
                    "int",
                    "str",
                    "list[str]"
                ]
            }
        },
        "test_send_reply_sql_exception_during_failure": {
            "name": "test_send_reply_sql_exception_during_failure",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "dict[str, typing.Any]",
                    "int",
                    "str",
                    "dict[, ]"
                ],
                "mocker": [
                    "int",
                    "list[str]"
                ],
                "session": [
                    "dict[str, typing.Sequence[str]]",
                    "typing.Callable[, ]",
                    "str"
                ],
                "session_maker": [
                    "dict[str, typing.Any]",
                    "int",
                    "str",
                    "dict[, ]"
                ],
                "reply_status_codes": [
                    "int",
                    "list[str]"
                ]
            }
        },
        "test_send_reply_unexpected_exception_during_failure": {
            "name": "test_send_reply_unexpected_exception_during_failure",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "dict[str, typing.Any]",
                    "int",
                    "str",
                    "dict[, ]"
                ],
                "mocker": [
                    "typing.Iterable[]",
                    "int"
                ],
                "session": [],
                "session_maker": [
                    "dict[str, typing.Any]",
                    "int",
                    "str",
                    "dict[, ]"
                ],
                "reply_status_codes": [
                    "int",
                    "list[str]"
                ]
            }
        },
        "test_send_reply_failure_unknown_error": {
            "name": "test_send_reply_failure_unknown_error",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "str",
                    "bool"
                ],
                "mocker": [],
                "session": [],
                "session_maker": [
                    "str",
                    "bool"
                ],
                "reply_status_codes": [
                    "int",
                    "str",
                    "list[str]"
                ]
            }
        },
        "test_send_reply_failure_timeout_error": {
            "name": "test_send_reply_failure_timeout_error",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "dict[str, typing.Any]",
                    "int",
                    "str"
                ],
                "mocker": [],
                "session": [],
                "session_maker": [
                    "dict[str, typing.Any]",
                    "int",
                    "str"
                ],
                "reply_status_codes": [
                    "int",
                    "list[str]"
                ],
                "exception": [
                    "bool"
                ]
            }
        },
        "test_send_reply_failure_when_repr_is_none": {
            "name": "test_send_reply_failure_when_repr_is_none",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "str",
                    "bool"
                ],
                "mocker": [],
                "session": [],
                "session_maker": [
                    "str",
                    "bool"
                ],
                "reply_status_codes": [
                    "int",
                    "str",
                    "list[str]"
                ]
            }
        },
        "test_reply_already_sent": {
            "name": "test_reply_already_sent",
            "location": 342,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "int",
                    "list[str]"
                ],
                "mocker": [],
                "session": [
                    "str"
                ],
                "session_maker": [
                    "int",
                    "list[str]"
                ],
                "reply_status_codes": [
                    "int",
                    "list[str]"
                ]
            }
        },
        "test_reply_deleted_locally": {
            "name": "test_reply_deleted_locally",
            "location": 358,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "int",
                    "str",
                    "list[str]"
                ],
                "mocker": [],
                "session": [
                    "typing.Iterable[]"
                ],
                "session_maker": [
                    "int",
                    "str",
                    "list[str]"
                ],
                "reply_status_codes": [
                    "int",
                    "str",
                    "list[str]"
                ]
            }
        },
        "test_source_deleted_locally": {
            "name": "test_source_deleted_locally",
            "location": 369,
            "return": [
                "None"
            ],
            "arguments": {
                "homedir": [
                    "bool",
                    "str",
                    "list[int]"
                ],
                "mocker": [],
                "session": [
                    "str",
                    "bool",
                    "float"
                ],
                "session_maker": [
                    "bool",
                    "str",
                    "list[int]"
                ],
                "reply_status_codes": [
                    "bool",
                    "str",
                    "list[int]"
                ]
            }
        },
        "test_send_reply_failure_when_repr_is_none.MockException.__repr__": {
            "name": "__repr__",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "securedrop-client-master/tests/api_jobs/__init__.py": {},
    "securedrop-client-master/tests/functional/test_delete_source.py": {
        "test_delete_source_and_their_docs": {
            "name": "test_delete_source_and_their_docs",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "functional_test_logged_in_context": [
                    "int",
                    "list[list[int]]",
                    "bool",
                    "List[List[int]]"
                ],
                "qtbot": [
                    "str",
                    "int"
                ],
                "mocker": [
                    "int",
                    "list[list[int]]",
                    "bool",
                    "List[List[int]]"
                ]
            }
        },
        "test_delete_source_and_their_docs.check_for_sources": {
            "name": "check_for_sources",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_delete_source_and_their_docs.check_source_list": {
            "name": "check_source_list",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "securedrop-client-master/tests/functional/test_download_file.py": {
        "test_download_file": {
            "name": "test_download_file",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "functional_test_logged_in_context": [
                    "bool",
                    "int"
                ],
                "qtbot": [
                    "dict",
                    "dict[, ]"
                ],
                "mocker": [
                    "bool",
                    "int"
                ]
            }
        },
        "test_download_file.check_for_sources": {
            "name": "check_for_sources",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "securedrop-client-master/tests/functional/test_export_dialog.py": {
        "test_export_dialog": {
            "name": "test_export_dialog",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "functional_test_logged_in_context": [
                    "list[str]",
                    "bool",
                    "List[str]",
                    "typing.Callable[[], None]",
                    "Literal",
                    "Callable[[], None]",
                    "int"
                ],
                "qtbot": [
                    "str"
                ],
                "mocker": [
                    "list[str]",
                    "bool",
                    "List[str]",
                    "typing.Callable[[], None]",
                    "Literal",
                    "Callable[[], None]",
                    "int"
                ]
            }
        },
        "test_export_dialog.check_for_sources": {
            "name": "check_for_sources",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_export_dialog.check_for_export_dialog": {
            "name": "check_for_export_dialog",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_export_dialog.check_password_form": {
            "name": "check_password_form",
            "location": 73,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "securedrop-client-master/tests/functional/test_login.py": {
        "test_login_ensure_errors_displayed": {
            "name": "test_login_ensure_errors_displayed",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "qtbot": [
                    "int"
                ],
                "mocker": [
                    "dict[str, typing.Sequence[str]]",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.MagicMock",
                    "Dict[str, Sequence[str]]"
                ]
            }
        },
        "test_login_as_journalist": {
            "name": "test_login_as_journalist",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "functional_test_logged_out_context": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "qtbot": [
                    "bool",
                    "typing.Type",
                    "tests.basilisp.helpers.CompileFn",
                    "Type"
                ],
                "mocker": [
                    "bool",
                    "tests.testmodels.Signals"
                ]
            }
        }
    },
    "securedrop-client-master/tests/functional/test_login_from_offline.py": {
        "test_login_from_offline": {
            "name": "test_login_from_offline",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "functional_test_logged_in_context": [
                    "bool",
                    "str",
                    "list[str]",
                    "List[str]",
                    "Literal",
                    "int"
                ],
                "qtbot": [
                    "int",
                    "float",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "mocker": [
                    "bool",
                    "str",
                    "list[str]",
                    "List[str]",
                    "Literal",
                    "int"
                ]
            }
        },
        "test_login_from_offline.check_login_button": {
            "name": "check_login_button",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_login_from_offline.check_login_dialog": {
            "name": "check_login_dialog",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_login_from_offline.wait_for_login": {
            "name": "wait_for_login",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "securedrop-client-master/tests/functional/test_logout.py": {
        "test_logout_as_journalist": {
            "name": "test_logout_as_journalist",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "functional_test_logged_in_context": [
                    "list[str]",
                    "bool",
                    "List[str]",
                    "int"
                ],
                "qtbot": [
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "tuple",
                    "tuple[]",
                    "dict",
                    "dict[, ]"
                ],
                "mocker": [
                    "list[str]",
                    "bool",
                    "List[str]",
                    "int"
                ]
            }
        },
        "test_logout_as_journalist.check_login_button": {
            "name": "check_login_button",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "securedrop-client-master/tests/functional/test_offline_delete_source.py": {
        "test_offline_delete_source_and_their_docs": {
            "name": "test_offline_delete_source_and_their_docs",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "functional_test_logged_in_context": [
                    "list[str]",
                    "bool",
                    "List[str]",
                    "list[list[int]]",
                    "List[List[int]]",
                    "int"
                ],
                "qtbot": [
                    "bool",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ],
                "mocker": [
                    "list[str]",
                    "bool",
                    "List[str]",
                    "list[list[int]]",
                    "List[List[int]]",
                    "int"
                ]
            }
        },
        "test_offline_delete_source_and_their_docs.check_for_sources": {
            "name": "check_for_sources",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_offline_delete_source_and_their_docs.check_login_button": {
            "name": "check_login_button",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_offline_delete_source_and_their_docs.check_for_error": {
            "name": "check_for_error",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "securedrop-client-master/tests/functional/test_offline_read_conversations.py": {
        "test_offline_read_conversations": {
            "name": "test_offline_read_conversations",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "functional_test_logged_in_context": [
                    "list[str]",
                    "bool",
                    "List[str]",
                    "typing.Callable[[], None]",
                    "Literal",
                    "Callable[[], None]",
                    "int"
                ],
                "qtbot": [
                    "int",
                    "bool"
                ],
                "mocker": [
                    "list[str]",
                    "bool",
                    "List[str]",
                    "typing.Callable[[], None]",
                    "Literal",
                    "Callable[[], None]",
                    "int"
                ]
            }
        },
        "test_offline_read_conversations.check_for_sources": {
            "name": "check_for_sources",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_offline_read_conversations.check_login_button": {
            "name": "check_login_button",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "securedrop-client-master/tests/functional/test_offline_send_reply.py": {
        "test_offline_send_reply_to_source": {
            "name": "test_offline_send_reply_to_source",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "functional_test_logged_in_context": [
                    "list[str]",
                    "bool",
                    "List[str]",
                    "list[list[int]]",
                    "List[List[int]]",
                    "int"
                ],
                "qtbot": [
                    "bool",
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "tuple",
                    "tuple[]"
                ],
                "mocker": [
                    "list[str]",
                    "bool",
                    "List[str]",
                    "list[list[int]]",
                    "List[List[int]]",
                    "int"
                ]
            }
        },
        "test_offline_send_reply_to_source.check_for_sources": {
            "name": "check_for_sources",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_offline_send_reply_to_source.check_login_button": {
            "name": "check_login_button",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "securedrop-client-master/tests/functional/test_offline_star_source.py": {
        "test_offline_star_source": {
            "name": "test_offline_star_source",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "functional_test_logged_in_context": [
                    "list[str]",
                    "bool",
                    "List[str]",
                    "typing.Callable[[], None]",
                    "Callable[[], None]",
                    "int"
                ],
                "qtbot": [
                    "str",
                    "int"
                ]
            }
        },
        "test_offline_star_source.check_for_sources": {
            "name": "check_for_sources",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_offline_star_source.check_login_button": {
            "name": "check_login_button",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_offline_star_source.check_for_error": {
            "name": "check_for_error",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "securedrop-client-master/tests/functional/test_receive_message.py": {
        "test_receive_message_from_source": {
            "name": "test_receive_message_from_source",
            "location": 17,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "functional_test_logged_in_context": [
                    "list[str]",
                    "bool",
                    "List[str]",
                    "list[list[int]]",
                    "int",
                    "List[List[int]]"
                ],
                "qtbot": [
                    "dict",
                    "dict[, ]"
                ],
                "mocker": [
                    "list[str]",
                    "bool",
                    "List[str]",
                    "list[list[int]]",
                    "int",
                    "List[List[int]]"
                ]
            }
        },
        "test_receive_message_from_source.check_for_sources": {
            "name": "check_for_sources",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "securedrop-client-master/tests/functional/test_send_reply.py": {
        "test_send_reply_to_source": {
            "name": "test_send_reply_to_source",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "functional_test_logged_in_context": [
                    "list[str]",
                    "bool",
                    "List[str]",
                    "int"
                ],
                "qtbot": [
                    "dict",
                    "dict[, ]"
                ],
                "mocker": [
                    "list[str]",
                    "bool",
                    "List[str]",
                    "int"
                ]
            }
        },
        "test_send_reply_to_source.check_for_sources": {
            "name": "check_for_sources",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "securedrop-client-master/tests/functional/test_star_source.py": {
        "test_star_source": {
            "name": "test_star_source",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "functional_test_logged_in_context": [
                    "list[str]",
                    "int",
                    "List[str]",
                    "list[list[int]]",
                    "bool",
                    "List[List[int]]"
                ],
                "qtbot": [
                    "dict",
                    "dict[, ]"
                ],
                "mocker": [
                    "list[str]",
                    "int",
                    "List[str]",
                    "list[list[int]]",
                    "bool",
                    "List[List[int]]"
                ]
            }
        },
        "test_star_source.check_for_sources": {
            "name": "check_for_sources",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "securedrop-client-master/tests/functional/test_unstar_source.py": {
        "test_unstar_source": {
            "name": "test_unstar_source",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "functional_test_logged_in_context": [
                    "list[str]",
                    "int",
                    "List[str]",
                    "list[list[int]]",
                    "bool",
                    "List[List[int]]"
                ],
                "qtbot": [
                    "dict",
                    "dict[, ]"
                ],
                "mocker": [
                    "list[str]",
                    "int",
                    "List[str]",
                    "list[list[int]]",
                    "bool",
                    "List[List[int]]"
                ]
            }
        },
        "test_unstar_source.check_for_sources": {
            "name": "check_for_sources",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "securedrop-client-master/tests/functional/test_user_icon_click.py": {
        "test_user_icon_click": {
            "name": "test_user_icon_click",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "qtbot": [
                    "bool",
                    "Optional[bool]",
                    "None"
                ],
                "mocker": [
                    "str",
                    "bool",
                    "list[str]",
                    "List[str]",
                    "list[tuple[typing.Union[str,typing.Any]]]",
                    "List[Tuple[str, Any]]",
                    "int"
                ],
                "functional_test_logged_in_context": [
                    "str",
                    "bool",
                    "list[str]",
                    "List[str]",
                    "list[tuple[typing.Union[str,typing.Any]]]",
                    "List[Tuple[str, Any]]",
                    "int"
                ]
            }
        },
        "test_user_icon_click.check_menu_appears": {
            "name": "check_menu_appears",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_user_icon_click.check_login_button": {
            "name": "check_login_button",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "securedrop-client-master/tests/functional/__init__.py": {},
    "securedrop-client-master/tests/gui/test_init.py": {
        "test_SvgToggleButton_init": {
            "name": "test_SvgToggleButton_init",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_SvgToggleButton_toggle": {
            "name": "test_SvgToggleButton_toggle",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_SvgToggleButton_set_icon": {
            "name": "test_SvgToggleButton_set_icon",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_SvgPushButton_init": {
            "name": "test_SvgPushButton_init",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_SvgLabel_init": {
            "name": "test_SvgLabel_init",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_SvgLabel_update": {
            "name": "test_SvgLabel_update",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_SecureQLabel_init": {
            "name": "test_SecureQLabel_init",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_SecureQLabel_init_wordwrap": {
            "name": "test_SecureQLabel_init_wordwrap",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str"
                ]
            }
        },
        "test_SecureQLabel_init_no_wordwrap": {
            "name": "test_SecureQLabel_init_no_wordwrap",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_SecureQLabel_setText": {
            "name": "test_SecureQLabel_setText",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_SecureQLabel_get_elided_text": {
            "name": "test_SecureQLabel_get_elided_text",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_SecureQLabel_get_elided_text_short_string": {
            "name": "test_SecureQLabel_get_elided_text_short_string",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str"
                ]
            }
        },
        "test_SecureQLabel_get_elided_text_only_returns_oneline": {
            "name": "test_SecureQLabel_get_elided_text_only_returns_oneline",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str"
                ]
            }
        },
        "test_SecureQLabel_get_elided_text_only_returns_oneline_elided": {
            "name": "test_SecureQLabel_get_elided_text_only_returns_oneline_elided",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str"
                ]
            }
        },
        "test_SecureQLabel_quotes_not_escaped_for_readability": {
            "name": "test_SecureQLabel_quotes_not_escaped_for_readability",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_SecureQLabel_trims_leading_and_trailing_whitespace": {
            "name": "test_SecureQLabel_trims_leading_and_trailing_whitespace",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "securedrop-client-master/tests/gui/test_main.py": {
        "test_init": {
            "name": "test_init",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_setup": {
            "name": "test_setup",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_show_main_window": {
            "name": "test_show_main_window",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_show_main_window_without_username": {
            "name": "test_show_main_window_without_username",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_autosize_window": {
            "name": "test_autosize_window",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str"
                ]
            }
        },
        "test_show_login": {
            "name": "test_show_login",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str"
                ]
            }
        },
        "test_show_login_with_error_message": {
            "name": "test_show_login_with_error_message",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str"
                ]
            }
        },
        "test_show_login_error": {
            "name": "test_show_login_error",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_hide_login": {
            "name": "test_hide_login",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Iterable"
                ]
            }
        },
        "test_refresh_current_source_conversation": {
            "name": "test_refresh_current_source_conversation",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_show_sources": {
            "name": "test_show_sources",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Dict[str, Sequence[str]]"
                ]
            }
        },
        "test_update_error_status_default": {
            "name": "test_update_error_status_default",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_update_error_status": {
            "name": "test_update_error_status",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_update_activity_status_default": {
            "name": "test_update_activity_status_default",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_update_activity_status": {
            "name": "test_update_activity_status",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_clear_error_status": {
            "name": "test_clear_error_status",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_show_last_sync": {
            "name": "test_show_last_sync",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str"
                ]
            }
        },
        "test_show_last_sync_no_sync": {
            "name": "test_show_last_sync_no_sync",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_set_logged_in_as": {
            "name": "test_set_logged_in_as",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_logout": {
            "name": "test_logout",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_clear_clipboard": {
            "name": "test_clear_clipboard",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        }
    },
    "securedrop-client-master/tests/gui/test_widgets.py": {
        "test_TopPane_init": {
            "name": "test_TopPane_init",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_TopPane_setup": {
            "name": "test_TopPane_setup",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_TopPane_set_logged_in": {
            "name": "test_TopPane_set_logged_in",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_TopPane_set_logged_out": {
            "name": "test_TopPane_set_logged_out",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_TopPane_update_activity_status": {
            "name": "test_TopPane_update_activity_status",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_TopPane_update_error_status": {
            "name": "test_TopPane_update_error_status",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_TopPane_clear_error_status": {
            "name": "test_TopPane_clear_error_status",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_LeftPane_init": {
            "name": "test_LeftPane_init",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_LeftPane_setup": {
            "name": "test_LeftPane_setup",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_LeftPane_set_logged_in_as": {
            "name": "test_LeftPane_set_logged_in_as",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_LeftPane_set_logged_out": {
            "name": "test_LeftPane_set_logged_out",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_SyncIcon_init": {
            "name": "test_SyncIcon_init",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_SyncIcon_init_starts_animiation": {
            "name": "test_SyncIcon_init_starts_animiation",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_SyncIcon_setup": {
            "name": "test_SyncIcon_setup",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_SyncIcon_enable": {
            "name": "test_SyncIcon_enable",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_SyncIcon_enable_starts_animiation": {
            "name": "test_SyncIcon_enable_starts_animiation",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_SyncIcon_disable": {
            "name": "test_SyncIcon_disable",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_SyncIcon_disable_starts_animiation": {
            "name": "test_SyncIcon_disable_starts_animiation",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_SyncIcon__on_sync_syncing": {
            "name": "test_SyncIcon__on_sync_syncing",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_SyncIcon__on_sync_synced": {
            "name": "test_SyncIcon__on_sync_synced",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_SyncIcon___on_sync_with_data_not_equal_to_syncing": {
            "name": "test_SyncIcon___on_sync_with_data_not_equal_to_syncing",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ErrorStatusBar_clear_error_status": {
            "name": "test_ErrorStatusBar_clear_error_status",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ErrorStatusBar_update_message": {
            "name": "test_ErrorStatusBar_update_message",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ErrorStatusBar_hide": {
            "name": "test_ErrorStatusBar_hide",
            "location": 337,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ErrorStatusBar_show": {
            "name": "test_ErrorStatusBar_show",
            "location": 350,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ErrorStatusBar_on_status_timeout": {
            "name": "test_ErrorStatusBar_on_status_timeout",
            "location": 363,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ActivityStatusBar_update_message": {
            "name": "test_ActivityStatusBar_update_message",
            "location": 369,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_UserProfile_setup": {
            "name": "test_UserProfile_setup",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_UserProfile_set_user": {
            "name": "test_UserProfile_set_user",
            "location": 391,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_UserProfile_show": {
            "name": "test_UserProfile_show",
            "location": 403,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_UserProfile_hide": {
            "name": "test_UserProfile_hide",
            "location": 416,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_UserIconLabel_clicks": {
            "name": "test_UserIconLabel_clicks",
            "location": 429,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_UserButton_setup": {
            "name": "test_UserButton_setup",
            "location": 436,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_UserButton_set_username": {
            "name": "test_UserButton_set_username",
            "location": 446,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_UserButton_set_long_username": {
            "name": "test_UserButton_set_long_username",
            "location": 452,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_UserMenu_setup": {
            "name": "test_UserMenu_setup",
            "location": 459,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_UserMenu_on_logout_triggered": {
            "name": "test_UserMenu_on_logout_triggered",
            "location": 468,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_UserMenu_on_item_selected": {
            "name": "test_UserMenu_on_item_selected",
            "location": 477,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_LoginButton_init": {
            "name": "test_LoginButton_init",
            "location": 486,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_LoginButton_setup": {
            "name": "test_LoginButton_setup",
            "location": 491,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_Loginbutton_on_clicked": {
            "name": "test_Loginbutton_on_clicked",
            "location": 498,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_MainView_init": {
            "name": "test_MainView_init",
            "location": 505,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_MainView_setup": {
            "name": "test_MainView_setup",
            "location": 514,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_MainView_show_sources_with_none_selected": {
            "name": "test_MainView_show_sources_with_none_selected",
            "location": 525,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_MainView_show_sources_from_cold_start": {
            "name": "test_MainView_show_sources_from_cold_start",
            "location": 540,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_MainView_show_sources_with_no_sources_at_all": {
            "name": "test_MainView_show_sources_with_no_sources_at_all",
            "location": 554,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_MainView_show_sources_when_sources_are_deleted": {
            "name": "test_MainView_show_sources_when_sources_are_deleted",
            "location": 569,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_MainView_delete_conversation_when_conv_wrapper_exists": {
            "name": "test_MainView_delete_conversation_when_conv_wrapper_exists",
            "location": 588,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_MainView_delete_conversation_when_conv_wrapper_does_not_exist": {
            "name": "test_MainView_delete_conversation_when_conv_wrapper_does_not_exist",
            "location": 607,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_MainView_on_source_changed": {
            "name": "test_MainView_on_source_changed",
            "location": 621,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_MainView_on_source_changed_when_source_no_longer_exists": {
            "name": "test_MainView_on_source_changed_when_source_no_longer_exists",
            "location": 640,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_MainView_on_source_changed_updates_conversation_view": {
            "name": "test_MainView_on_source_changed_updates_conversation_view",
            "location": 655,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session": []
            }
        },
        "test_MainView_on_source_changed_SourceConversationWrapper_is_preserved": {
            "name": "test_MainView_on_source_changed_SourceConversationWrapper_is_preserved",
            "location": 689,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session": []
            }
        },
        "test_MainView_set_conversation": {
            "name": "test_MainView_set_conversation",
            "location": 747,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_EmptyConversationView_show_no_sources_message": {
            "name": "test_EmptyConversationView_show_no_sources_message",
            "location": 762,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_EmptyConversationView_show_no_source_selected_message": {
            "name": "test_EmptyConversationView_show_no_source_selected_message",
            "location": 771,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_SourceList_get_selected_source": {
            "name": "test_SourceList_get_selected_source",
            "location": 780,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_SourceList_update_adds_new_sources": {
            "name": "test_SourceList_update_adds_new_sources",
            "location": 798,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_SourceList_initial_update_adds_new_sources": {
            "name": "test_SourceList_initial_update_adds_new_sources",
            "location": 831,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_SourceList_update_when_source_deleted": {
            "name": "test_SourceList_update_when_source_deleted",
            "location": 849,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session": [],
                "session_maker": [],
                "homedir": []
            }
        },
        "test_SourceList_add_source_starts_timer": {
            "name": "test_SourceList_add_source_starts_timer",
            "location": 894,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session_maker": [],
                "homedir": []
            }
        },
        "test_SourceList_initial_update_does_not_raise_exc_and_no_widget_created": {
            "name": "test_SourceList_initial_update_does_not_raise_exc_and_no_widget_created",
            "location": 913,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "qtbot": []
            }
        },
        "test_SourceList_update_does_not_raise_exc": {
            "name": "test_SourceList_update_does_not_raise_exc",
            "location": 933,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_SourceList_update_does_not_raise_exc_when_itemWidget_is_none": {
            "name": "test_SourceList_update_does_not_raise_exc_when_itemWidget_is_none",
            "location": 940,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_SourceList_update_maintains_selection": {
            "name": "test_SourceList_update_maintains_selection",
            "location": 950,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_SourceList_update_with_pre_selected_source_maintains_selection": {
            "name": "test_SourceList_update_with_pre_selected_source_maintains_selection",
            "location": 972,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_SourceList_update_removes_selected_item_results_in_no_current_selection": {
            "name": "test_SourceList_update_removes_selected_item_results_in_no_current_selection",
            "location": 988,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_SourceList_update_removes_item_from_end_of_list": {
            "name": "test_SourceList_update_removes_item_from_end_of_list",
            "location": 1002,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_SourceList_update_removes_item_from_middle_of_list": {
            "name": "test_SourceList_update_removes_item_from_middle_of_list",
            "location": 1019,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_SourceList_update_removes_item_from_beginning_of_list": {
            "name": "test_SourceList_update_removes_item_from_beginning_of_list",
            "location": 1036,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_SourceList_add_source_closure_adds_sources": {
            "name": "test_SourceList_add_source_closure_adds_sources",
            "location": 1053,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_SourceList_add_source_closure_exits_on_no_more_sources": {
            "name": "test_SourceList_add_source_closure_exits_on_no_more_sources",
            "location": 1088,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_SourceList_set_snippet": {
            "name": "test_SourceList_set_snippet",
            "location": 1123,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_SourceList_get_source_widget": {
            "name": "test_SourceList_get_source_widget",
            "location": 1139,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_SourceList_get_source_widget_does_not_exist": {
            "name": "test_SourceList_get_source_widget_does_not_exist",
            "location": 1151,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_SourceList_get_source_widget_if_one_exists_in_cache": {
            "name": "test_SourceList_get_source_widget_if_one_exists_in_cache",
            "location": 1163,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_SourceWidget_init": {
            "name": "test_SourceWidget_init",
            "location": 1173,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_SourceWidget_html_init": {
            "name": "test_SourceWidget_html_init",
            "location": 1184,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_SourceWidget_update_attachment_icon": {
            "name": "test_SourceWidget_update_attachment_icon",
            "location": 1203,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_SourceWidget_update_does_not_raise_exception": {
            "name": "test_SourceWidget_update_does_not_raise_exception",
            "location": 1220,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_SourceWidget_set_snippet_draft_only": {
            "name": "test_SourceWidget_set_snippet_draft_only",
            "location": 1236,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session_maker": [],
                "session": [],
                "homedir": []
            }
        },
        "test_SourceWidget_set_snippet": {
            "name": "test_SourceWidget_set_snippet",
            "location": 1255,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session_maker": [],
                "session": [],
                "homedir": []
            }
        },
        "test_SourceWidget_update_truncate_latest_msg": {
            "name": "test_SourceWidget_update_truncate_latest_msg",
            "location": 1283,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_SourceWidget_delete_source": {
            "name": "test_SourceWidget_delete_source",
            "location": 1298,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session": [],
                "source": []
            }
        },
        "test_SourceWidget_delete_source_when_user_chooses_cancel": {
            "name": "test_SourceWidget_delete_source_when_user_chooses_cancel",
            "location": 1313,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session": [],
                "source": []
            }
        },
        "test_SourceWidget__on_source_deleted": {
            "name": "test_SourceWidget__on_source_deleted",
            "location": 1332,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session": [],
                "source": []
            }
        },
        "test_SourceWidget__on_source_deleted_wrong_uuid": {
            "name": "test_SourceWidget__on_source_deleted_wrong_uuid",
            "location": 1342,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session": [],
                "source": []
            }
        },
        "test_SourceWidget__on_source_deletion_failed": {
            "name": "test_SourceWidget__on_source_deletion_failed",
            "location": 1352,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session": [],
                "source": []
            }
        },
        "test_SourceWidget__on_source_deletion_failed_wrong_uuid": {
            "name": "test_SourceWidget__on_source_deletion_failed_wrong_uuid",
            "location": 1365,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session": [],
                "source": []
            }
        },
        "test_SourceWidget_uses_SecureQLabel": {
            "name": "test_SourceWidget_uses_SecureQLabel",
            "location": 1378,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_StarToggleButton_init_source_starred": {
            "name": "test_StarToggleButton_init_source_starred",
            "location": 1397,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_StarToggleButton_init_source_unstarred": {
            "name": "test_StarToggleButton_init_source_unstarred",
            "location": 1407,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_StarToggleButton_eventFilter_when_checked": {
            "name": "test_StarToggleButton_eventFilter_when_checked",
            "location": 1417,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_StarToggleButton_eventFilter_when_not_checked": {
            "name": "test_StarToggleButton_eventFilter_when_not_checked",
            "location": 1447,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_StarToggleButton_eventFilter_when_checked_and_offline": {
            "name": "test_StarToggleButton_eventFilter_when_checked_and_offline",
            "location": 1477,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_StarToggleButton_eventFilter_when_not_checked_and_offline": {
            "name": "test_StarToggleButton_eventFilter_when_not_checked_and_offline",
            "location": 1508,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_StarToggleButton_on_authentication_changed_while_authenticated_and_checked": {
            "name": "test_StarToggleButton_on_authentication_changed_while_authenticated_and_checked",
            "location": 1538,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_StarToggleButton_on_authentication_changed_while_authenticated_and_not_checked": {
            "name": "test_StarToggleButton_on_authentication_changed_while_authenticated_and_not_checked",
            "location": 1554,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_StarToggleButton_on_authentication_changed_while_offline_mode_and_not_checked": {
            "name": "test_StarToggleButton_on_authentication_changed_while_offline_mode_and_not_checked",
            "location": 1570,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_StarToggleButton_on_authentication_changed_while_offline_mode_and_checked": {
            "name": "test_StarToggleButton_on_authentication_changed_while_offline_mode_and_checked",
            "location": 1587,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_StarToggleButton_on_pressed_toggles_to_starred": {
            "name": "test_StarToggleButton_on_pressed_toggles_to_starred",
            "location": 1605,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_StarToggleButton_on_pressed_toggles_to_unstarred": {
            "name": "test_StarToggleButton_on_pressed_toggles_to_unstarred",
            "location": 1618,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_StarToggleButton_on_pressed_offline": {
            "name": "test_StarToggleButton_on_pressed_offline",
            "location": 1631,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_StarToggleButton_on_pressed_offline_when_checked": {
            "name": "test_StarToggleButton_on_pressed_offline_when_checked",
            "location": 1644,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_StarToggleButton_update": {
            "name": "test_StarToggleButton_update",
            "location": 1662,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_StarToggleButton_update_when_not_authenticated": {
            "name": "test_StarToggleButton_update_when_not_authenticated",
            "location": 1706,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_StarToggleButton_on_star_update_failed": {
            "name": "test_StarToggleButton_on_star_update_failed",
            "location": 1725,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_StarToggleButton_on_star_update_failed_for_non_matching_source_uuid": {
            "name": "test_StarToggleButton_on_star_update_failed_for_non_matching_source_uuid",
            "location": 1742,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_StarToggleButton_on_star_update_successful": {
            "name": "test_StarToggleButton_on_star_update_successful",
            "location": 1759,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_StarToggleButton_on_star_update_successful_for_non_matching_source_uuid": {
            "name": "test_StarToggleButton_on_star_update_successful_for_non_matching_source_uuid",
            "location": 1773,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_LoginDialog_setup": {
            "name": "test_LoginDialog_setup",
            "location": 1787,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "i18n": []
            }
        },
        "test_LoginDialog_reset": {
            "name": "test_LoginDialog_reset",
            "location": 1801,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_LoginDialog_error": {
            "name": "test_LoginDialog_error",
            "location": 1824,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "i18n": []
            }
        },
        "test_LoginDialog_validate_no_input": {
            "name": "test_LoginDialog_validate_no_input",
            "location": 1836,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_LoginDialog_validate_input_non_numeric_2fa": {
            "name": "test_LoginDialog_validate_input_non_numeric_2fa",
            "location": 1856,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_LoginDialog_validate_too_short_username": {
            "name": "test_LoginDialog_validate_too_short_username",
            "location": 1878,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_LoginDialog_validate_too_short_password": {
            "name": "test_LoginDialog_validate_too_short_password",
            "location": 1899,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_LoginDialog_validate_too_long_password": {
            "name": "test_LoginDialog_validate_too_long_password",
            "location": 1920,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_LoginDialog_validate_input_ok": {
            "name": "test_LoginDialog_validate_input_ok",
            "location": 1944,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_LoginDialog_escapeKeyPressEvent": {
            "name": "test_LoginDialog_escapeKeyPressEvent",
            "location": 1965,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_LoginDialog_submitKeyPressEvent": {
            "name": "test_LoginDialog_submitKeyPressEvent",
            "location": 1979,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "qt_key": []
            }
        },
        "test_LoginDialog_closeEvent_exits": {
            "name": "test_LoginDialog_closeEvent_exits",
            "location": 1995,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_LoginErrorBar_set_message": {
            "name": "test_LoginErrorBar_set_message",
            "location": 2010,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_LoginErrorBar_clear_message": {
            "name": "test_LoginErrorBar_clear_message",
            "location": 2021,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_LoginOfflineLink": {
            "name": "test_LoginOfflineLink",
            "location": 2032,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_LoginDialog_closeEvent_does_not_exit_when_main_window_is_visible": {
            "name": "test_LoginDialog_closeEvent_does_not_exit_when_main_window_is_visible",
            "location": 2044,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_SpeechBubble_init": {
            "name": "test_SpeechBubble_init",
            "location": 2059,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_SpeechBubble_init_with_error": {
            "name": "test_SpeechBubble_init_with_error",
            "location": 2079,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_SpeechBubble_update_text": {
            "name": "test_SpeechBubble_update_text",
            "location": 2100,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_SpeechBubble_html_init": {
            "name": "test_SpeechBubble_html_init",
            "location": 2118,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_SpeechBubble_with_apostrophe_in_text": {
            "name": "test_SpeechBubble_with_apostrophe_in_text",
            "location": 2129,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_SpeechBubble_set_error": {
            "name": "test_SpeechBubble_set_error",
            "location": 2138,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_MessageWidget_init": {
            "name": "test_MessageWidget_init",
            "location": 2151,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ReplyWidget_init": {
            "name": "test_ReplyWidget_init",
            "location": 2164,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ReplyWidget_init_with_error": {
            "name": "test_ReplyWidget_init_with_error",
            "location": 2200,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_FileWidget_init_file_not_downloaded": {
            "name": "test_FileWidget_init_file_not_downloaded",
            "location": 2237,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "source": [],
                "session": []
            }
        },
        "test_FileWidget_init_file_downloaded": {
            "name": "test_FileWidget_init_file_downloaded",
            "location": 2260,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "source": [],
                "session": []
            }
        },
        "test_FileWidget__set_file_state_under_mouse": {
            "name": "test_FileWidget__set_file_state_under_mouse",
            "location": 2283,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "source": [],
                "session": []
            }
        },
        "test_FileWidget_event_handler_left_click": {
            "name": "test_FileWidget_event_handler_left_click",
            "location": 2304,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session": [],
                "source": []
            }
        },
        "test_FileWidget_event_handler_hover": {
            "name": "test_FileWidget_event_handler_hover",
            "location": 2324,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session": [],
                "source": []
            }
        },
        "test_FileWidget_on_left_click_download": {
            "name": "test_FileWidget_on_left_click_download",
            "location": 2351,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session": [],
                "source": []
            }
        },
        "test_FileWidget_on_left_click_downloading_in_progress": {
            "name": "test_FileWidget_on_left_click_downloading_in_progress",
            "location": 2373,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session": [],
                "source": []
            }
        },
        "test_FileWidget_start_button_animation": {
            "name": "test_FileWidget_start_button_animation",
            "location": 2396,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session": [],
                "source": []
            }
        },
        "test_FileWidget_on_left_click_open": {
            "name": "test_FileWidget_on_left_click_open",
            "location": 2412,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session": [],
                "source": []
            }
        },
        "test_FileWidget_set_button_animation_frame": {
            "name": "test_FileWidget_set_button_animation_frame",
            "location": 2428,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session": [],
                "source": []
            }
        },
        "test_FileWidget_update": {
            "name": "test_FileWidget_update",
            "location": 2446,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session": [],
                "source": []
            }
        },
        "test_FileWidget_on_file_download_updates_items_when_uuid_matches": {
            "name": "test_FileWidget_on_file_download_updates_items_when_uuid_matches",
            "location": 2464,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "source": [],
                "session": []
            }
        },
        "test_FileWidget_filename_truncation": {
            "name": "test_FileWidget_filename_truncation",
            "location": 2488,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "source": [],
                "session": []
            }
        },
        "test_FileWidget_on_file_download_updates_items_when_uuid_does_not_match": {
            "name": "test_FileWidget_on_file_download_updates_items_when_uuid_does_not_match",
            "location": 2511,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "homedir": [],
                "session": [],
                "source": []
            }
        },
        "test_FileWidget_on_file_missing_show_download_button_when_uuid_matches": {
            "name": "test_FileWidget_on_file_missing_show_download_button_when_uuid_matches",
            "location": 2539,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "source": [],
                "session": [],
                "session_maker": [],
                "homedir": []
            }
        },
        "test_FileWidget_on_file_missing_does_not_show_download_button_when_uuid_does_not_match": {
            "name": "test_FileWidget_on_file_missing_does_not_show_download_button_when_uuid_does_not_match",
            "location": 2568,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "homedir": [],
                "session": [],
                "source": []
            }
        },
        "test_FileWidget__on_export_clicked": {
            "name": "test_FileWidget__on_export_clicked",
            "location": 2589,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session": [],
                "source": []
            }
        },
        "test_FileWidget__on_export_clicked_missing_file": {
            "name": "test_FileWidget__on_export_clicked_missing_file",
            "location": 2612,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session": [],
                "source": []
            }
        },
        "test_FileWidget__on_print_clicked": {
            "name": "test_FileWidget__on_print_clicked",
            "location": 2636,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session": [],
                "source": []
            }
        },
        "test_FileWidget__on_print_clicked_missing_file": {
            "name": "test_FileWidget__on_print_clicked_missing_file",
            "location": 2660,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session": [],
                "source": []
            }
        },
        "test_FileWidget_update_file_size_with_deleted_file": {
            "name": "test_FileWidget_update_file_size_with_deleted_file",
            "location": 2684,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "homedir": [],
                "config": [],
                "session_maker": [],
                "source": []
            }
        },
        "test_ModalDialog_keyPressEvent_does_not_close_on_enter_or_return": {
            "name": "test_ModalDialog_keyPressEvent_does_not_close_on_enter_or_return",
            "location": 2704,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "key": []
            }
        },
        "test_ModalDialog_keyPressEvent_cancel_on_enter_when_focused": {
            "name": "test_ModalDialog_keyPressEvent_cancel_on_enter_when_focused",
            "location": 2715,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "key": []
            }
        },
        "test_ModalDialog_keyPressEvent_continue_on_enter": {
            "name": "test_ModalDialog_keyPressEvent_continue_on_enter",
            "location": 2727,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "key": []
            }
        },
        "test_ModalDialog_keyPressEvent_does_not_close_for_other_keys": {
            "name": "test_ModalDialog_keyPressEvent_does_not_close_for_other_keys",
            "location": 2738,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "key": []
            }
        },
        "test_ModalDialog_animation_of_activestate": {
            "name": "test_ModalDialog_animation_of_activestate",
            "location": 2748,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ModalDialog_animation_of_header": {
            "name": "test_ModalDialog_animation_of_header",
            "location": 2777,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ExportDialog_init": {
            "name": "test_ExportDialog_init",
            "location": 2806,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ExportDialog_init_sanitizes_filename": {
            "name": "test_ExportDialog_init_sanitizes_filename",
            "location": 2817,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ExportDialog__show_starting_instructions": {
            "name": "test_ExportDialog__show_starting_instructions",
            "location": 2827,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ExportDialog___show_passphrase_request_message": {
            "name": "test_ExportDialog___show_passphrase_request_message",
            "location": 2861,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ExportDialog__show_passphrase_request_message_again": {
            "name": "test_ExportDialog__show_passphrase_request_message_again",
            "location": 2876,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ExportDialog__show_success_message": {
            "name": "test_ExportDialog__show_success_message",
            "location": 2893,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ExportDialog__show_insert_usb_message": {
            "name": "test_ExportDialog__show_insert_usb_message",
            "location": 2912,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ExportDialog__show_insert_encrypted_usb_message": {
            "name": "test_ExportDialog__show_insert_encrypted_usb_message",
            "location": 2931,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ExportDialog__show_generic_error_message": {
            "name": "test_ExportDialog__show_generic_error_message",
            "location": 2955,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ExportDialog__export_file": {
            "name": "test_ExportDialog__export_file",
            "location": 2972,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ExportDialog__on_preflight_success": {
            "name": "test_ExportDialog__on_preflight_success",
            "location": 2983,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ExportDialog__on_preflight_success_when_continue_enabled": {
            "name": "test_ExportDialog__on_preflight_success_when_continue_enabled",
            "location": 2998,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ExportDialog__on_preflight_success_enabled_after_preflight_success": {
            "name": "test_ExportDialog__on_preflight_success_enabled_after_preflight_success",
            "location": 3008,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ExportDialog__on_preflight_success_enabled_after_preflight_failure": {
            "name": "test_ExportDialog__on_preflight_success_enabled_after_preflight_failure",
            "location": 3015,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ExportDialog__on_preflight_failure": {
            "name": "test_ExportDialog__on_preflight_failure",
            "location": 3022,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ExportDialog__on_export_success": {
            "name": "test_ExportDialog__on_export_success",
            "location": 3032,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ExportDialog__on_export_failure": {
            "name": "test_ExportDialog__on_export_failure",
            "location": 3041,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ExportDialog__update_dialog_when_status_is_USB_NOT_CONNECTED": {
            "name": "test_ExportDialog__update_dialog_when_status_is_USB_NOT_CONNECTED",
            "location": 3051,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ExportDialog__update_dialog_when_status_is_BAD_PASSPHRASE": {
            "name": "test_ExportDialog__update_dialog_when_status_is_BAD_PASSPHRASE",
            "location": 3068,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ExportDialog__update_dialog_when_status_DISK_ENCRYPTION_NOT_SUPPORTED_ERROR": {
            "name": "test_ExportDialog__update_dialog_when_status_DISK_ENCRYPTION_NOT_SUPPORTED_ERROR",
            "location": 3087,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ExportDialog__update_dialog_when_status_is_CALLED_PROCESS_ERROR": {
            "name": "test_ExportDialog__update_dialog_when_status_is_CALLED_PROCESS_ERROR",
            "location": 3106,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ExportDialog__update_dialog_when_status_is_unknown": {
            "name": "test_ExportDialog__update_dialog_when_status_is_unknown",
            "location": 3127,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_PrintDialog_init": {
            "name": "test_PrintDialog_init",
            "location": 3148,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_PrintDialog_init_sanitizes_filename": {
            "name": "test_PrintDialog_init_sanitizes_filename",
            "location": 3158,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_PrintDialog__show_starting_instructions": {
            "name": "test_PrintDialog__show_starting_instructions",
            "location": 3167,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_PrintDialog__show_insert_usb_message": {
            "name": "test_PrintDialog__show_insert_usb_message",
            "location": 3199,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_PrintDialog__show_generic_error_message": {
            "name": "test_PrintDialog__show_generic_error_message",
            "location": 3214,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_PrintDialog__print_file": {
            "name": "test_PrintDialog__print_file",
            "location": 3230,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_PrintDialog__on_preflight_success": {
            "name": "test_PrintDialog__on_preflight_success",
            "location": 3239,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_PrintDialog__on_preflight_success_when_continue_enabled": {
            "name": "test_PrintDialog__on_preflight_success_when_continue_enabled",
            "location": 3252,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_PrintDialog__on_preflight_success_enabled_after_preflight_success": {
            "name": "test_PrintDialog__on_preflight_success_enabled_after_preflight_success",
            "location": 3262,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_PrintDialog__on_preflight_success_enabled_after_preflight_failure": {
            "name": "test_PrintDialog__on_preflight_success_enabled_after_preflight_failure",
            "location": 3269,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_PrintDialog__on_preflight_failure_when_status_is_PRINTER_NOT_FOUND": {
            "name": "test_PrintDialog__on_preflight_failure_when_status_is_PRINTER_NOT_FOUND",
            "location": 3276,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_PrintDialog__on_preflight_failure_when_status_is_MISSING_PRINTER_URI": {
            "name": "test_PrintDialog__on_preflight_failure_when_status_is_MISSING_PRINTER_URI",
            "location": 3293,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_PrintDialog__on_preflight_failure_when_status_is_CALLED_PROCESS_ERROR": {
            "name": "test_PrintDialog__on_preflight_failure_when_status_is_CALLED_PROCESS_ERROR",
            "location": 3314,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_PrintDialog__on_preflight_failure_when_status_is_unknown": {
            "name": "test_PrintDialog__on_preflight_failure_when_status_is_unknown",
            "location": 3335,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_SourceConversationWrapper__on_source_deleted": {
            "name": "test_SourceConversationWrapper__on_source_deleted",
            "location": 3356,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_SourceConversationWrapper__on_source_deleted_wrong_uuid": {
            "name": "test_SourceConversationWrapper__on_source_deleted_wrong_uuid",
            "location": 3365,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_SourceConversationWrapper__on_source_deletion_failed": {
            "name": "test_SourceConversationWrapper__on_source_deletion_failed",
            "location": 3374,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_SourceConversationWrapper__on_source_deletion_failed_wrong_uuid": {
            "name": "test_SourceConversationWrapper__on_source_deletion_failed_wrong_uuid",
            "location": 3386,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ConversationView_init": {
            "name": "test_ConversationView_init",
            "location": 3398,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "homedir": []
            }
        },
        "test_ConversationView_update_conversation_position_follow": {
            "name": "test_ConversationView_update_conversation_position_follow",
            "location": 3408,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "homedir": []
            }
        },
        "test_ConversationView_update_conversation_position_stay_fixed": {
            "name": "test_ConversationView_update_conversation_position_stay_fixed",
            "location": 3432,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "homedir": []
            }
        },
        "test_ConversationView_add_message": {
            "name": "test_ConversationView_add_message",
            "location": 3451,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session": [],
                "source": []
            }
        },
        "test_ConversationView_add_message_no_content": {
            "name": "test_ConversationView_add_message_no_content",
            "location": 3502,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session": [],
                "source": []
            }
        },
        "test_ConversationView_on_reply_sent": {
            "name": "test_ConversationView_on_reply_sent",
            "location": 3549,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ConversationView_on_reply_sent_does_not_add_message_intended_for_different_source": {
            "name": "test_ConversationView_on_reply_sent_does_not_add_message_intended_for_different_source",
            "location": 3565,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ConversationView_add_reply_from_reply_box": {
            "name": "test_ConversationView_add_reply_from_reply_box",
            "location": 3580,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ConversationView_add_reply": {
            "name": "test_ConversationView_add_reply",
            "location": 3619,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session": [],
                "source": []
            }
        },
        "test_ConversationView_add_reply_no_content": {
            "name": "test_ConversationView_add_reply_no_content",
            "location": 3672,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session": [],
                "source": []
            }
        },
        "test_ConversationView_add_downloaded_file": {
            "name": "test_ConversationView_add_downloaded_file",
            "location": 3726,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "homedir": [],
                "source": [],
                "session": []
            }
        },
        "test_ConversationView_add_not_downloaded_file": {
            "name": "test_ConversationView_add_not_downloaded_file",
            "location": 3757,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "homedir": [],
                "source": [],
                "session": []
            }
        },
        "test_DeleteSourceMessageBox_init": {
            "name": "test_DeleteSourceMessageBox_init",
            "location": 3782,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "source": []
            }
        },
        "test_DeleteSourceMessage_launch_when_user_chooses_cancel": {
            "name": "test_DeleteSourceMessage_launch_when_user_chooses_cancel",
            "location": 3787,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "source": []
            }
        },
        "test_DeleteSourceMssageBox_launch_when_user_chooses_yes": {
            "name": "test_DeleteSourceMssageBox_launch_when_user_chooses_yes",
            "location": 3802,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "source": [],
                "session": []
            }
        },
        "test_DeleteSourceMessageBox_construct_message": {
            "name": "test_DeleteSourceMessageBox_construct_message",
            "location": 3838,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "source": [],
                "session": []
            }
        },
        "test_DeleteSourceAction_init": {
            "name": "test_DeleteSourceAction_init",
            "location": 3867,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_PasswordEdit": {
            "name": "test_PasswordEdit",
            "location": 3873,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_DeleteSourceAction_trigger": {
            "name": "test_DeleteSourceAction_trigger",
            "location": 3882,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_DeleteSource_from_source_menu_when_user_is_loggedout": {
            "name": "test_DeleteSource_from_source_menu_when_user_is_loggedout",
            "location": 3897,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_DeleteSource_from_source_widget_when_user_is_loggedout": {
            "name": "test_DeleteSource_from_source_widget_when_user_is_loggedout",
            "location": 3913,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ReplyBoxWidget_init": {
            "name": "test_ReplyBoxWidget_init",
            "location": 3930,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ReplyBoxWidget_init_no_auth": {
            "name": "test_ReplyBoxWidget_init_no_auth",
            "location": 3941,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ReplyBoxWidget_placeholder_show_currently_selected_source": {
            "name": "test_ReplyBoxWidget_placeholder_show_currently_selected_source",
            "location": 3952,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ReplyBoxWidget_send_reply": {
            "name": "test_ReplyBoxWidget_send_reply",
            "location": 3967,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ReplyBoxWidget_send_reply_calls_setText_after_send": {
            "name": "test_ReplyBoxWidget_send_reply_calls_setText_after_send",
            "location": 3993,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ReplyBoxWidget_send_reply_does_not_send_empty_string": {
            "name": "test_ReplyBoxWidget_send_reply_does_not_send_empty_string",
            "location": 4010,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ReplyBoxWidget_on_synced": {
            "name": "test_ReplyBoxWidget_on_synced",
            "location": 4032,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ReplyBoxWidget_on_sync_source_deleted": {
            "name": "test_ReplyBoxWidget_on_sync_source_deleted",
            "location": 4050,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "source": []
            }
        },
        "test_ReplyWidget_success_failure_slots": {
            "name": "test_ReplyWidget_success_failure_slots",
            "location": 4068,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ReplyBoxWidget__on_authentication_changed": {
            "name": "test_ReplyBoxWidget__on_authentication_changed",
            "location": 4106,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "homedir": []
            }
        },
        "test_ReplyBoxWidget_on_authentication_changed_source_deleted": {
            "name": "test_ReplyBoxWidget_on_authentication_changed_source_deleted",
            "location": 4120,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "source": []
            }
        },
        "test_ReplyBoxWidget__on_authentication_changed_offline": {
            "name": "test_ReplyBoxWidget__on_authentication_changed_offline",
            "location": 4138,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "homedir": []
            }
        },
        "test_ReplyBoxWidget_auth_signals": {
            "name": "test_ReplyBoxWidget_auth_signals",
            "location": 4152,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "homedir": []
            }
        },
        "test_ReplyBoxWidget_enable": {
            "name": "test_ReplyBoxWidget_enable",
            "location": 4170,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ReplyBoxWidget_disable": {
            "name": "test_ReplyBoxWidget_disable",
            "location": 4185,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ReplyBoxWidget_enable_after_source_gets_key": {
            "name": "test_ReplyBoxWidget_enable_after_source_gets_key",
            "location": 4200,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "mocker": [],
                "session": [],
                "session_maker": [],
                "homedir": []
            }
        },
        "test_ReplyTextEdit_focus_change_no_text": {
            "name": "test_ReplyTextEdit_focus_change_no_text",
            "location": 4237,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ReplyTextEdit_focus_change_with_text_typed": {
            "name": "test_ReplyTextEdit_focus_change_with_text_typed",
            "location": 4258,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ReplyTextEdit_setText": {
            "name": "test_ReplyTextEdit_setText",
            "location": 4280,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ReplyTextEdit_setText_empty_string": {
            "name": "test_ReplyTextEdit_setText_empty_string",
            "location": 4294,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ReplyTextEdit_set_logged_out": {
            "name": "test_ReplyTextEdit_set_logged_out",
            "location": 4308,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ReplyTextEdit_set_logged_in": {
            "name": "test_ReplyTextEdit_set_logged_in",
            "location": 4325,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ReplyBox_set_logged_in_no_public_key": {
            "name": "test_ReplyBox_set_logged_in_no_public_key",
            "location": 4341,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_update_conversation_maintains_old_items": {
            "name": "test_update_conversation_maintains_old_items",
            "location": 4365,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session": []
            }
        },
        "test_update_conversation_does_not_remove_pending_draft_items": {
            "name": "test_update_conversation_does_not_remove_pending_draft_items",
            "location": 4393,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session": []
            }
        },
        "test_update_conversation_does_remove_successful_draft_items": {
            "name": "test_update_conversation_does_remove_successful_draft_items",
            "location": 4428,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session": []
            }
        },
        "test_update_conversation_keeps_failed_draft_items": {
            "name": "test_update_conversation_keeps_failed_draft_items",
            "location": 4467,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session": []
            }
        },
        "test_update_conversation_adds_new_items": {
            "name": "test_update_conversation_adds_new_items",
            "location": 4502,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session": []
            }
        },
        "test_update_conversation_position_updates": {
            "name": "test_update_conversation_position_updates",
            "location": 4533,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session": []
            }
        },
        "test_update_conversation_content_updates": {
            "name": "test_update_conversation_content_updates",
            "location": 4569,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session": []
            }
        },
        "test_SourceProfileShortWidget_update_timestamp": {
            "name": "test_SourceProfileShortWidget_update_timestamp",
            "location": 4621,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "DeletedSource.uuid": {
            "name": "uuid",
            "location": 909,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_SourceList_initial_update_does_not_raise_exc_and_no_widget_created.assert_no_source_widget_exists": {
            "name": "assert_no_source_widget_exists",
            "location": 926,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ReplyBoxWidget_on_sync_source_deleted.pretend_source_was_deleted": {
            "name": "pretend_source_was_deleted",
            "location": 4057,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_ReplyBoxWidget_on_authentication_changed_source_deleted.pretend_source_was_deleted": {
            "name": "pretend_source_was_deleted",
            "location": 4127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "securedrop-client-master/tests/gui/__init__.py": {},
    "securedrop-client-master/tests/integration/conftest.py": {
        "main_window": {
            "name": "main_window",
            "location": 11,
            "return": [
                "",
                "typing.Generator[Window]"
            ],
            "arguments": {
                "mocker": [
                    "Mapping[str, Any]"
                ],
                "homedir": [
                    "list[str]",
                    "List[str]",
                    "bool",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "list[W]",
                    "List[src.main.core.models.window.Window]",
                    "int"
                ]
            }
        },
        "main_window_no_key": {
            "name": "main_window_no_key",
            "location": 49,
            "return": [
                "",
                "typing.Generator[Window]"
            ],
            "arguments": {
                "mocker": [
                    "Dict[str, str]",
                    "int"
                ],
                "homedir": [
                    "dict[str, str]",
                    "int",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "modal_dialog": {
            "name": "modal_dialog",
            "location": 87,
            "return": [
                "",
                "typing.Generator[ModalDialog]"
            ],
            "arguments": {
                "mocker": [
                    "Mapping[str, Any]",
                    "List[str]"
                ],
                "homedir": [
                    "Mapping[str, Any]",
                    "typing.Mapping",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "print_dialog": {
            "name": "print_dialog",
            "location": 105,
            "return": [
                "",
                "typing.Generator[PrintDialog]"
            ],
            "arguments": {
                "mocker": [
                    "Mapping[str, Any]",
                    "List[str]"
                ],
                "homedir": [
                    "Mapping[str, Any]",
                    "typing.Mapping",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "export_dialog": {
            "name": "export_dialog",
            "location": 123,
            "return": [
                "",
                "typing.Generator[ExportDialog]"
            ],
            "arguments": {
                "mocker": [
                    "Mapping[str, Any]",
                    "List[str]"
                ],
                "homedir": [
                    "Mapping[str, Any]",
                    "typing.Mapping",
                    "List[str]",
                    "list[str]"
                ]
            }
        }
    },
    "securedrop-client-master/tests/integration/test_placeholder.py": {
        "test_styles_for_placeholder": {
            "name": "test_styles_for_placeholder",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "main_window": [
                    "str"
                ]
            }
        },
        "test_styles_for_placeholder_no_key": {
            "name": "test_styles_for_placeholder_no_key",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "main_window_no_key": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        }
    },
    "securedrop-client-master/tests/integration/test_styles_file_download_button.py": {
        "test_styles": {
            "name": "test_styles",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "List[str]",
                    "list[str]",
                    "dict",
                    "dict[, ]"
                ],
                "main_window": [
                    "str"
                ]
            }
        },
        "test_styles_animated": {
            "name": "test_styles_animated",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "List[str]",
                    "list[str]",
                    "dict",
                    "dict[, ]"
                ],
                "main_window": [
                    "str"
                ]
            }
        }
    },
    "securedrop-client-master/tests/integration/test_styles_modal_dialog_button.py": {
        "test_styles": {
            "name": "test_styles",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "modal_dialog": [
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "securedrop-client-master/tests/integration/test_styles_modal_dialog_error_details.py": {
        "test_styles": {
            "name": "test_styles",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "modal_dialog": [
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "securedrop-client-master/tests/integration/test_styles_reply_message.py": {
        "test_styles": {
            "name": "test_styles",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "List[str]",
                    "list[str]",
                    "dict",
                    "dict[, ]"
                ],
                "main_window": [
                    "str"
                ]
            }
        }
    },
    "securedrop-client-master/tests/integration/test_styles_reply_status_bar.py": {
        "test_styles": {
            "name": "test_styles",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "List[str]",
                    "list[str]",
                    "dict",
                    "dict[, ]"
                ],
                "main_window": [
                    "str"
                ]
            }
        }
    },
    "securedrop-client-master/tests/integration/test_styles_sdclient.py": {
        "test_css": {
            "name": "test_css",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "main_window": [
                    "dict[, ]"
                ]
            }
        },
        "test_class_name_matches_css_object_name": {
            "name": "test_class_name_matches_css_object_name",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "list[str]",
                    "bool",
                    "list[tuple[typing.Union[str,typing.Any]]]"
                ],
                "main_window": [
                    "bool"
                ]
            }
        },
        "test_class_name_matches_css_object_name_for_print_dialog": {
            "name": "test_class_name_matches_css_object_name_for_print_dialog",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "print_dialog": [
                    "int"
                ]
            }
        },
        "test_class_name_matches_css_object_name_for_export_dialog": {
            "name": "test_class_name_matches_css_object_name_for_export_dialog",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "export_dialog": [
                    "str"
                ]
            }
        },
        "test_class_name_matches_css_object_name_for_modal_dialog": {
            "name": "test_class_name_matches_css_object_name_for_modal_dialog",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "modal_dialog": [
                    "dict[, ]"
                ]
            }
        },
        "test_styles_for_login_dialog": {
            "name": "test_styles_for_login_dialog",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "list[str]",
                    "dict[, ]",
                    "bool",
                    "list[tuple[typing.Union[str,typing.Any]]]"
                ],
                "main_window": [
                    "bool"
                ]
            }
        },
        "test_styles_for_top_pane": {
            "name": "test_styles_for_top_pane",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "list[str]",
                    "dict[, ]",
                    "bool",
                    "list[tuple[typing.Union[str,typing.Any]]]"
                ],
                "main_window": [
                    "int"
                ]
            }
        },
        "test_styles_for_left_pane": {
            "name": "test_styles_for_left_pane",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "list[str]",
                    "dict[, ]",
                    "bool",
                    "list[tuple[typing.Union[str,typing.Any]]]"
                ],
                "main_window": []
            }
        },
        "test_styles_for_main_view": {
            "name": "test_styles_for_main_view",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "list[str]",
                    "dict[, ]"
                ],
                "main_window": [
                    "int",
                    "None"
                ]
            }
        },
        "test_styles_source_list": {
            "name": "test_styles_source_list",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "dict[, ]"
                ],
                "main_window": [
                    "str"
                ]
            }
        },
        "test_styles_for_conversation_view": {
            "name": "test_styles_for_conversation_view",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "list[str]",
                    "dict[, ]",
                    "bool",
                    "list[tuple[typing.Union[str,typing.Any]]]"
                ],
                "main_window": [
                    "str"
                ]
            }
        },
        "test_styles_for_modal_dialog": {
            "name": "test_styles_for_modal_dialog",
            "location": 480,
            "return": [
                "None"
            ],
            "arguments": {
                "modal_dialog": [
                    "int"
                ]
            }
        },
        "test_styles_for_print_dialog": {
            "name": "test_styles_for_print_dialog",
            "location": 536,
            "return": [
                "None"
            ],
            "arguments": {
                "print_dialog": [
                    "int"
                ]
            }
        },
        "test_styles_for_export_dialog": {
            "name": "test_styles_for_export_dialog",
            "location": 592,
            "return": [
                "None"
            ],
            "arguments": {
                "export_dialog": [
                    "int"
                ]
            }
        }
    },
    "securedrop-client-master/tests/integration/test_styles_speech_bubble_message.py": {
        "test_styles": {
            "name": "test_styles",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "List[str]",
                    "list[str]",
                    "dict",
                    "dict[, ]"
                ],
                "main_window": [
                    "str"
                ]
            }
        }
    },
    "securedrop-client-master/tests/integration/test_styles_speech_bubble_status_bar.py": {
        "test_styles": {
            "name": "test_styles",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "List[str]",
                    "list[str]",
                    "dict",
                    "dict[, ]"
                ],
                "main_window": [
                    "str"
                ]
            }
        }
    }
}
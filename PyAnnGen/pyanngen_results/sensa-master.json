{
    "sensa-master/app.py": {
        "sensa_app_init": {
            "name": "sensa_app_init",
            "location": 118,
            "return": [
                "'ImGui[None]'",
                "None"
            ],
            "arguments": {}
        },
        "app_state_init": {
            "name": "app_state_init",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "draw_and_log_actions": {
            "name": "draw_and_log_actions",
            "location": 199,
            "return": [
                "util.types.IO_[None]"
            ],
            "arguments": {}
        },
        "sensa_post_frame": {
            "name": "sensa_post_frame",
            "location": 211,
            "return": [
                "util.types.IO_[Optional[str]]"
            ],
            "arguments": {}
        },
        "update_state_with_actions_and_run_effects": {
            "name": "update_state_with_actions_and_run_effects",
            "location": 259,
            "return": [
                "util.types.IO_[AppControl]"
            ],
            "arguments": {
                "user_actions": [
                    "Optional[int]",
                    "str",
                    "bool"
                ]
            }
        },
        "handle_app_state_effect": {
            "name": "handle_app_state_effect",
            "location": 579,
            "return": [
                "util.types.IO_[None]"
            ],
            "arguments": {
                "command": [
                    "str",
                    "Dict[str, List[str]]",
                    "int"
                ]
            }
        },
        "update_link_selection": {
            "name": "update_link_selection",
            "location": 635,
            "return": [
                "LinkSelection"
            ],
            "arguments": {
                "state": [
                    "LinkSelection"
                ],
                "graph": [
                    "dict[str, str]",
                    "int",
                    "Dict[str, str]",
                    "raiden.utils.List[str]"
                ],
                "action": [
                    "LinkSelectionAction"
                ]
            }
        },
        "AppRunnerAction.Reload": {
            "name": "Reload",
            "location": 563,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "AppRunnerAction.Exit": {
            "name": "Exit",
            "location": 564,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "AppRunnerEffect.Reload": {
            "name": "Reload",
            "location": 567,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "AppRunnerEffect.Exit": {
            "name": "Exit",
            "location": 568,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "AppControl.Success": {
            "name": "Success",
            "location": 572,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "AppControl.Crash": {
            "name": "Crash",
            "location": 573,
            "return": [
                "None"
            ],
            "arguments": {
                "cause": [
                    "Exception",
                    "str",
                    "int",
                    "list[str]",
                    "List[str]",
                    "bool"
                ],
                "origin": [
                    "str"
                ],
                "exception": [
                    "Exception"
                ]
            }
        },
        "AppControl.DoApp": {
            "name": "DoApp",
            "location": 574,
            "return": [
                "None"
            ],
            "arguments": {
                "command": [
                    "AppStateEffect"
                ]
            }
        },
        "AppControl.DoAppRunner": {
            "name": "DoAppRunner",
            "location": 575,
            "return": [
                "None"
            ],
            "arguments": {
                "command": [
                    "AppRunnerEffect"
                ]
            }
        },
        "LinkSelectionAction.ClickOutput": {
            "name": "ClickOutput",
            "location": 629,
            "return": [
                "None"
            ],
            "arguments": {
                "slot": [
                    "ng.OutputSlotId"
                ]
            }
        },
        "LinkSelectionAction.ClickInput": {
            "name": "ClickInput",
            "location": 630,
            "return": [
                "None"
            ],
            "arguments": {
                "slot": [
                    "ng.InputSlotId"
                ]
            }
        },
        "LinkSelectionAction.Clear": {
            "name": "Clear",
            "location": 631,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "draw.right_pad": {
            "name": "right_pad",
            "location": 739,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes"
                ],
                "limit": [
                    "int",
                    "str",
                    "Union[int, Sequence[Any]]",
                    "Union[str, bytes]"
                ]
            }
        }
    },
    "sensa-master/debug_util.py": {
        "debug_initialize": {
            "name": "debug_initialize",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "debug_log_time": {
            "name": "debug_log_time",
            "location": 76,
            "return": [
                "utils.types.IO_[None]"
            ],
            "arguments": {
                "point_id": [
                    "PointId"
                ],
                "time_s": [
                    "int",
                    "Optional[Union[\"Cite\", str]]",
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[Dict[str, str]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "debug_log": {
            "name": "debug_log",
            "location": 97,
            "return": [
                "utils.types.IO_[None]"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "val": [
                    "A"
                ]
            }
        },
        "debug_log_dict": {
            "name": "debug_log_dict",
            "location": 104,
            "return": [
                "utils.types.IO_[None]"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "dictionary": [
                    "Dict[(A, Any)]"
                ]
            }
        },
        "debug_log_seq": {
            "name": "debug_log_seq",
            "location": 110,
            "return": [
                "utils.types.IO_[None]"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "seq": [
                    "Sequence[A]"
                ]
            }
        },
        "debug_log_crash": {
            "name": "debug_log_crash",
            "location": 115,
            "return": [
                "utils.types.IO_[None]"
            ],
            "arguments": {
                "origin": [
                    "str"
                ],
                "cause": [
                    "str",
                    "Exception",
                    "Dict[str, Any]",
                    "Iterator[Tuple[Any, Any]]",
                    "List[str]"
                ],
                "exception": [
                    "Exception"
                ]
            }
        },
        "debug_window": {
            "name": "debug_window",
            "location": 121,
            "return": [
                "utils.types.IO_[None]"
            ],
            "arguments": {}
        },
        "debug_post_frame": {
            "name": "debug_post_frame",
            "location": 185,
            "return": [
                "utils.types.IO_[None]"
            ],
            "arguments": {}
        },
        "_debug_clear_times": {
            "name": "_debug_clear_times",
            "location": 203,
            "return": [
                "utils.types.IO_[None]"
            ],
            "arguments": {}
        },
        "show_avg_durations_of_recorded_ranges": {
            "name": "show_avg_durations_of_recorded_ranges",
            "location": 208,
            "return": [
                "utils.types.IO_[None]"
            ],
            "arguments": {}
        },
        "show_durations": {
            "name": "show_durations",
            "location": 215,
            "return": [
                "utils.types.IO_[None]"
            ],
            "arguments": {
                "durations_ms": [
                    "utils.types.OrderedDict_[(str, float)]"
                ]
            }
        },
        "default_key_format_string_for_len": {
            "name": "default_key_format_string_for_len",
            "location": 224,
            "return": [
                "str"
            ],
            "arguments": {
                "len": [
                    "int"
                ]
            }
        },
        "debug_set_type_format_string": {
            "name": "debug_set_type_format_string",
            "location": 235,
            "return": [
                "utils.types.IO_[None]"
            ],
            "arguments": {
                "t": [
                    "type"
                ],
                "fmt_string": [
                    "str"
                ]
            }
        },
        "show_varied_dict": {
            "name": "show_varied_dict",
            "location": 245,
            "return": [
                "utils.types.IO_[None]"
            ],
            "arguments": {
                "dictionary": [
                    "Dict[(str, Any)]"
                ],
                "key_format_string_for_len": [
                    "str",
                    "Dict[str, str]"
                ],
                "value_format_string_for_type": [
                    "str",
                    "Dict[str, str]"
                ],
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "varied_dict_to_str": {
            "name": "varied_dict_to_str",
            "location": 261,
            "return": [
                "str"
            ],
            "arguments": {
                "dictionary": [
                    "Dict[(A, Any)]"
                ],
                "key_format_string_for_len": [
                    "str",
                    "Dict[str, Any]",
                    "Union[dict, str]",
                    "Type",
                    "type"
                ],
                "value_format_string_for_type": [
                    "str",
                    "Dict[str, Any]",
                    "Union[dict, str]",
                    "Type",
                    "type"
                ]
            }
        },
        "show_uniform_dict": {
            "name": "show_uniform_dict",
            "location": 303,
            "return": [
                "utils.types.IO_[None]"
            ],
            "arguments": {
                "dictionary": [
                    "Dict[(str, A)]"
                ],
                "key_format_string_for_len": [
                    "str",
                    "Dict[str, utils.types.A]",
                    "Optional[str]"
                ],
                "value_format_string": [
                    "str"
                ]
            }
        },
        "uniform_dict_to_str": {
            "name": "uniform_dict_to_str",
            "location": 316,
            "return": [
                "str"
            ],
            "arguments": {
                "dictionary": [
                    "Dict[(str, A)]"
                ],
                "key_format_string_for_len": [
                    "str",
                    "Optional[str]"
                ],
                "value_format_string": [
                    "str"
                ]
            }
        },
        "show_sequence": {
            "name": "show_sequence",
            "location": 342,
            "return": [
                "utils.types.IO_[None]"
            ],
            "arguments": {
                "seq": [
                    "Sequence[A]"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "sequence_to_str": {
            "name": "sequence_to_str",
            "location": 353,
            "return": [
                "str"
            ],
            "arguments": {
                "seq": [
                    "Sequence[A]"
                ],
                "value_format_string": [
                    "str"
                ]
            }
        },
        "name_and_multiline_str": {
            "name": "name_and_multiline_str",
            "location": 369,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "multiline_str": [
                    "str"
                ]
            }
        },
        "indent_str": {
            "name": "indent_str",
            "location": 373,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str"
                ],
                "indent": [
                    "int"
                ]
            }
        },
        "indent_multiline_str": {
            "name": "indent_multiline_str",
            "location": 379,
            "return": [
                "str"
            ],
            "arguments": {
                "multiline_str": [
                    "str"
                ],
                "indent": [
                    "int"
                ]
            }
        },
        "logged_times_to_durations": {
            "name": "logged_times_to_durations",
            "location": 388,
            "return": [
                "utils.types.OrderedDict_[(str, Tuple[(float, float)])]"
            ],
            "arguments": {
                "fresh_logged_times": [
                    "utils.types.OrderedDict_[(Tuple[(str, str)], float)]"
                ]
            }
        },
        "update_stored_durations": {
            "name": "update_stored_durations",
            "location": 403,
            "return": [
                "utils.types.IO_[List[str]]"
            ],
            "arguments": {
                "durations_ms": [
                    "utils.types.IO_[Dict[(str, Optional[Deque[float]])]]"
                ],
                "fresh_logged_durations": [
                    "utils.types.OrderedDict_[(str, Tuple[(float, float)])]"
                ]
            }
        },
        "average_durations": {
            "name": "average_durations",
            "location": 438,
            "return": [
                "Dict[(str, float)]"
            ],
            "arguments": {
                "range_duration_histories_ms": [
                    "Dict[(str, Sequence[float])]"
                ]
            }
        },
        "is_namedtuple": {
            "name": "is_namedtuple",
            "location": 452,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "Dict[str, Any]",
                    "int",
                    "Sequence",
                    "T",
                    "Optional[bool]"
                ]
            }
        },
        "is_union": {
            "name": "is_union",
            "location": 454,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "Dict[str, Any]",
                    "int",
                    "Sequence",
                    "T",
                    "Optional[bool]"
                ]
            }
        },
        "is_dictlike": {
            "name": "is_dictlike",
            "location": 456,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "Dict[str, Any]",
                    "int",
                    "Sequence",
                    "T",
                    "Optional[bool]"
                ]
            }
        },
        "is_not_dictlike": {
            "name": "is_not_dictlike",
            "location": 457,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "Dict[str, Any]",
                    "int",
                    "Sequence",
                    "T",
                    "Optional[bool]"
                ]
            }
        },
        "is_mapping": {
            "name": "is_mapping",
            "location": 459,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "Dict[str, Any]",
                    "int",
                    "Sequence",
                    "T",
                    "Optional[bool]"
                ]
            }
        },
        "is_not_mapping": {
            "name": "is_not_mapping",
            "location": 460,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "Dict[str, Any]",
                    "int",
                    "Sequence",
                    "T",
                    "Optional[bool]"
                ]
            }
        },
        "to_dictlike": {
            "name": "to_dictlike",
            "location": 462,
            "return": [
                "Union[(collections.OrderedDict, _T0)]"
            ],
            "arguments": {
                "x": [
                    "_T0"
                ]
            }
        },
        "order_and_stringify_keys": {
            "name": "order_and_stringify_keys",
            "location": 484,
            "return": [
                "Union[(collections.OrderedDict, _T0)]"
            ],
            "arguments": {
                "d": [
                    "_T0"
                ]
            }
        },
        "stringify_ordered_dict_keys": {
            "name": "stringify_ordered_dict_keys",
            "location": 497,
            "return": [
                "collections.OrderedDict[(str, Any)]"
            ],
            "arguments": {
                "d": [
                    "Dict[str, Any]",
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "order_dict_by_key": {
            "name": "order_dict_by_key",
            "location": 500,
            "return": [
                "collections.OrderedDict[(str, nothing)]"
            ],
            "arguments": {
                "d": [
                    "Dict[(str, A)]"
                ]
            }
        }
    },
    "sensa-master/eeg_signal.py": {
        "Signal.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "sig": [
                    "Signal"
                ],
                "signal_info": [
                    "Dict[(str, Any)]"
                ],
                "data": [
                    "bytes",
                    "str",
                    "tuple",
                    "tuple[]",
                    "Optional[List[Any]]",
                    "list[typing.Any]",
                    "None"
                ]
            }
        },
        "Signal.samples_per_second": {
            "name": "samples_per_second",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "sig": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Signal.sampling_interval": {
            "name": "sampling_interval",
            "location": 37,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "sig": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Signal.time_between_samples": {
            "name": "time_between_samples",
            "location": 41,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "sig": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "Signal.__repr__": {
            "name": "__repr__",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "sig": [
                    "Signal"
                ]
            }
        }
    },
    "sensa-master/eff.py": {
        "run_eff": {
            "name": "run_eff",
            "location": 75,
            "return": [
                "Tuple[(A, dict)]"
            ],
            "arguments": {
                "comp": [
                    "Eff"
                ]
            }
        },
        "effectful": {
            "name": "effectful",
            "location": 98,
            "return": [
                "_T0"
            ],
            "arguments": {
                "f": [
                    "_T0"
                ]
            }
        },
        "is_decorated_generator_coroutine": {
            "name": "is_decorated_generator_coroutine",
            "location": 121,
            "return": [
                "bool"
            ],
            "arguments": {
                "f": [
                    "int",
                    "str",
                    "float",
                    "tuple",
                    "tuple[]"
                ]
            }
        },
        "get_id": {
            "name": "get_id",
            "location": 135,
            "return": [
                "coroutine"
            ],
            "arguments": {}
        },
        "get_signal_id": {
            "name": "get_signal_id",
            "location": 144,
            "return": [
                "coroutine"
            ],
            "arguments": {}
        },
        "emit": {
            "name": "emit",
            "location": 153,
            "return": [
                "coroutine"
            ],
            "arguments": {
                "action": [
                    "dict[, ]",
                    "dict",
                    "T"
                ]
            }
        },
        "emit_effect": {
            "name": "emit_effect",
            "location": 160,
            "return": [
                "coroutine"
            ],
            "arguments": {
                "cmd": [
                    "str",
                    "list",
                    "list[]",
                    "tuple",
                    "tuple[]",
                    "Callable[[], None]",
                    "typing.Callable[[], None]"
                ]
            }
        },
        "Eff.__class_getitem__": {
            "name": "__class_getitem__",
            "location": 36,
            "return": [
                "_Eff"
            ],
            "arguments": {
                "cls": [
                    "Eff"
                ],
                "items": [
                    "Tuple[(List[str], type)]"
                ]
            }
        },
        "enable_class_getitem.__getitem__": {
            "name": "__getitem__",
            "location": 29,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[int]",
                    "bool",
                    "complex",
                    "bytes"
                ],
                "item": [
                    "str",
                    "Optional[int]",
                    "complex",
                    "int",
                    "bytes",
                    "bool",
                    "None"
                ]
            }
        }
    },
    "sensa-master/eff_old.py": {
        "mk_get_id": {
            "name": "mk_get_id",
            "location": 39,
            "return": [
                "Callable[([], EffVal[int])]"
            ],
            "arguments": {
                "state_dict": [
                    "dict[str, typing.Any]",
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "list[T]",
                    "List[T]",
                    "raiden.utils.List[raiden.transfer.state.NettingChannelState]"
                ]
            }
        },
        "mk_emit_effect": {
            "name": "mk_emit_effect",
            "location": 46,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "state_dict": [
                    "Dict[str, object]",
                    "dict[str, object]",
                    "bool",
                    "Optional[IO[bytes]]",
                    "typing.IO",
                    "None"
                ]
            }
        },
        "mk_get_signal_id": {
            "name": "mk_get_signal_id",
            "location": 53,
            "return": [
                "Callable[([], EffVal[int])]"
            ],
            "arguments": {
                "state_dict": [
                    "Dict[str, Any]",
                    "bool",
                    "dict[str, typing.Any]",
                    "str",
                    "Optional[Any]",
                    "typing.Any",
                    "int",
                    "None"
                ]
            }
        },
        "mk_emit": {
            "name": "mk_emit",
            "location": 60,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "state_dict": [
                    "Dict[str, object]",
                    "dict[str, object]",
                    "bool",
                    "Optional[IO[bytes]]",
                    "typing.IO",
                    "None"
                ]
            }
        },
        "builtins_flag_for_effect_type": {
            "name": "builtins_flag_for_effect_type",
            "location": 97,
            "return": [
                "str"
            ],
            "arguments": {
                "eff_t": [
                    "float",
                    "list",
                    "bool"
                ]
            }
        },
        "run_eff": {
            "name": "run_eff",
            "location": 102,
            "return": [
                "str",
                "int",
                "Set[str]",
                "Mapping[str, int]",
                "bool",
                "\"Parameter\""
            ],
            "arguments": {
                "f": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable",
                    "typing.Callable[, ]",
                    "list",
                    "list[]"
                ]
            }
        },
        "is_in_eff": {
            "name": "is_in_eff",
            "location": 166,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "all_eff_operations_present": {
            "name": "all_eff_operations_present",
            "location": 169,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "eff_operation": {
            "name": "eff_operation",
            "location": 177,
            "return": [
                "bool",
                "bytes",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "get_signal_ids": {
            "name": "get_signal_ids",
            "location": 192,
            "return": [
                "EffVal[List[int]]"
            ],
            "arguments": {
                "n": [
                    "int",
                    "str",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "get_ids": {
            "name": "get_ids",
            "location": 203,
            "return": [
                "EffVal[List[int]]"
            ],
            "arguments": {
                "n": [
                    "int",
                    "float"
                ]
            }
        },
        "f": {
            "name": "f",
            "location": 215,
            "return": [
                "EffVal[Dict[(str, int)]]"
            ],
            "arguments": {}
        },
        "f2": {
            "name": "f2",
            "location": 222,
            "return": [
                "EffVal[Dict[(str, int)]]"
            ],
            "arguments": {}
        },
        "g": {
            "name": "g",
            "location": 229,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Union[Dict, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "key": [
                    "str",
                    "int"
                ]
            }
        },
        "mk_get_id._get_id": {
            "name": "_get_id",
            "location": 40,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "mk_emit_effect._emit_effect": {
            "name": "_emit_effect",
            "location": 47,
            "return": [
                "Eff[None]",
                "None"
            ],
            "arguments": {
                "effect": [
                    "dict"
                ]
            }
        },
        "mk_get_signal_id._get_signal_id": {
            "name": "_get_signal_id",
            "location": 54,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "mk_emit._emit": {
            "name": "_emit",
            "location": 61,
            "return": [
                "Eff[None]",
                "None"
            ],
            "arguments": {
                "action": [
                    "bool",
                    "Callable",
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]",
                    "dict"
                ]
            }
        },
        "run_eff.result_fn": {
            "name": "result_fn",
            "location": 113,
            "return": [
                "tuple[]",
                "bool",
                "str",
                "int",
                "Hashable",
                "IO[str]"
            ],
            "arguments": {}
        },
        "effectful": {
            "name": "effectful",
            "location": 143,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {}
        },
        "effectful.effectful_decorator": {
            "name": "effectful_decorator",
            "location": 145,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "f": [
                    "Callable[[A], B]",
                    "Iterable[str]",
                    "Callable[..., A]",
                    "Callable",
                    "Iterable[A]",
                    "T"
                ]
            }
        },
        "effectful.effectful_decorator.wrapped": {
            "name": "wrapped",
            "location": 148,
            "return": [
                "str",
                "Iterable[str]"
            ],
            "arguments": {}
        }
    },
    "sensa-master/epoched_signal.py": {},
    "sensa-master/files.py": {
        "load_edf": {
            "name": "load_edf",
            "location": 67,
            "return": [
                "utils.types.IO_[Dict[(str, eeg_signal.Signal)]]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "FileAction.Load": {
            "name": "Load",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "FileEffect.Load": {
            "name": "Load",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        }
    },
    "sensa-master/filters.py": {
        "butter_lowpass_coeffs": {
            "name": "butter_lowpass_coeffs",
            "location": 20,
            "return": [
                "Tuple[(Sequence[float], Sequence[float])]"
            ],
            "arguments": {
                "cutoff_freq": [
                    "float"
                ],
                "sampling_freq": [
                    "float"
                ],
                "type": [
                    "str"
                ],
                "order": [
                    "int",
                    "str",
                    "float",
                    "Callable[[int], Any]"
                ]
            }
        },
        "simple_filter_raw": {
            "name": "simple_filter_raw",
            "location": 27,
            "return": [
                "Sequence[float]"
            ],
            "arguments": {
                "data": [
                    "Sequence[float]"
                ],
                "cutoff_freq": [
                    "float"
                ],
                "sampling_freq": [
                    "float"
                ],
                "type": [
                    "str"
                ],
                "order": [
                    "int",
                    "float",
                    "str",
                    "Union[int, float]"
                ]
            }
        },
        "simple_filter": {
            "name": "simple_filter",
            "location": 32,
            "return": [
                "eeg_signal.Signal"
            ],
            "arguments": {
                "signal": [
                    "eeg_signal.Signal"
                ],
                "cutoff_freq": [
                    "float"
                ],
                "type": [
                    "str"
                ]
            }
        }
    },
    "sensa-master/filter_box.py": {
        "eval_node": {
            "name": "eval_node",
            "location": 64,
            "return": [
                "int",
                "trezor.utils.Writer",
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "filter_box": [
                    "FilterBoxState"
                ]
            }
        },
        "transformation": {
            "name": "transformation",
            "location": 70,
            "return": [
                "eeg_signal.Signal"
            ],
            "arguments": {
                "filter_state": [
                    "FilterState"
                ]
            }
        },
        "to_node": {
            "name": "to_node",
            "location": 80,
            "return": [
                "ng.Node"
            ],
            "arguments": {
                "filter_box": [
                    "FilterBoxState"
                ]
            }
        },
        "is_filter_box_full": {
            "name": "is_filter_box_full",
            "location": 95,
            "return": [
                "bool"
            ],
            "arguments": {
                "state": [
                    "FilterBoxState"
                ]
            }
        },
        "update_filter_box": {
            "name": "update_filter_box",
            "location": 112,
            "return": [
                "FilterBoxState"
            ],
            "arguments": {
                "filter_box_state": [
                    "FilterBoxState"
                ],
                "action": [
                    "FilterAction"
                ]
            }
        },
        "FilterState.Filter": {
            "name": "Filter",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "filter_id": [
                    "str"
                ],
                "params": [
                    "str",
                    "int",
                    "list",
                    "list[]",
                    "Optional[cmk.utils.type_defs.UserId]",
                    "None"
                ]
            }
        },
        "FilterAction.SetParam": {
            "name": "SetParam",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "id_": [
                    "int"
                ],
                "name": [
                    "str"
                ],
                "value": [
                    "float"
                ]
            }
        }
    },
    "sensa-master/flags.py": {},
    "sensa-master/glplot.py": {
        "generate_pleple": {
            "name": "generate_pleple",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sensa-master/imgui_glfw.py": {
        "DEFAULT_DRAW": {
            "name": "DEFAULT_DRAW",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_reloadable_imgui_app": {
            "name": "run_reloadable_imgui_app",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "app_module": [
                    "bool",
                    "str",
                    "List[str]"
                ],
                "no_reload": [
                    "dict",
                    "tuple[]"
                ]
            }
        },
        "run_imgui_glfw_app": {
            "name": "run_imgui_glfw_app",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "app_init": [
                    "str",
                    "None",
                    "float",
                    "int",
                    "Callable",
                    "typing.Callable[, ]",
                    "bool"
                ],
                "pre_frame": [
                    "str",
                    "None",
                    "float",
                    "int",
                    "Callable",
                    "typing.Callable[, ]",
                    "bool"
                ],
                "draw": [
                    "str",
                    "float",
                    "Callable",
                    "int",
                    "bool"
                ],
                "post_frame": [
                    "str",
                    "None",
                    "float",
                    "int",
                    "Callable",
                    "typing.Callable[, ]",
                    "bool"
                ],
                "app_shutdown": [
                    "str",
                    "None",
                    "float",
                    "int",
                    "Callable",
                    "typing.Callable[, ]",
                    "bool"
                ],
                "window_title": [
                    "str"
                ],
                "window_size": [
                    "tuple[int]",
                    "str",
                    "float",
                    "Callable",
                    "int",
                    "bool"
                ],
                "target_framerate": [
                    "float"
                ]
            }
        },
        "impl_glfw_init": {
            "name": "impl_glfw_init",
            "location": 291,
            "return": [
                "str",
                "bytes",
                "int",
                "bool"
            ],
            "arguments": {
                "window_title": [
                    "int",
                    "Optional[int]",
                    "float",
                    "None",
                    "Optional[Union[int, float]]"
                ],
                "window_size": [
                    "tuple[typing.Union[int,int]]",
                    "str",
                    "int",
                    "Tuple[int, int]"
                ]
            }
        },
        "run_reloadable_imgui_app.got_input": {
            "name": "got_input",
            "location": 60,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "run_imgui_glfw_app.got_input": {
            "name": "got_input",
            "location": 209,
            "return": [
                "bool",
                "str",
                "dict",
                "set",
                "List[str]"
            ],
            "arguments": {}
        }
    },
    "sensa-master/multisignal.py": {
        "MultiSignal.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "msig": [
                    "MultiSignal"
                ],
                "signals": [
                    "Sequence[eeg_signal.Signal]"
                ]
            }
        },
        "MultiSignal.num_channels": {
            "name": "num_channels",
            "location": 14,
            "return": [
                "int",
                "Dict[str, int]",
                "str",
                "float"
            ],
            "arguments": {
                "msig": [
                    "str",
                    "bytes",
                    "Tuple[bytes]",
                    "tuple[bytes]"
                ]
            }
        },
        "MultiSignal.as_column_matrix": {
            "name": "as_column_matrix",
            "location": 17,
            "return": [
                "bool"
            ],
            "arguments": {
                "msig": [
                    "MultiSignal"
                ]
            }
        },
        "MultiSignal.__repr__": {
            "name": "__repr__",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "msig": [
                    "MultiSignal"
                ]
            }
        }
    },
    "sensa-master/node_graph.py": {
        "output_slots": {
            "name": "output_slots",
            "location": 125,
            "return": [
                "Set[OutputSlotId]"
            ],
            "arguments": {
                "graph": [
                    "Graph"
                ]
            }
        },
        "used_output_slots": {
            "name": "used_output_slots",
            "location": 129,
            "return": [
                "Set[OutputSlotId]"
            ],
            "arguments": {
                "graph": [
                    "Graph"
                ]
            }
        },
        "input_slots": {
            "name": "input_slots",
            "location": 134,
            "return": [
                "Set[OutputSlotId]"
            ],
            "arguments": {
                "graph": [
                    "Graph"
                ]
            }
        },
        "filled_input_slots": {
            "name": "filled_input_slots",
            "location": 138,
            "return": [
                "Set[InputSlotId]"
            ],
            "arguments": {
                "graph": [
                    "Graph"
                ]
            }
        },
        "free_input_slots": {
            "name": "free_input_slots",
            "location": 142,
            "return": [
                "Set[InputSlotId]"
            ],
            "arguments": {
                "graph": [
                    "Graph"
                ]
            }
        },
        "is_input_slot_free": {
            "name": "is_input_slot_free",
            "location": 145,
            "return": [
                "bool"
            ],
            "arguments": {
                "graph": [
                    "Graph"
                ],
                "input_slot": [
                    "InputSlotId"
                ]
            }
        },
        "is_input_slot_filled": {
            "name": "is_input_slot_filled",
            "location": 148,
            "return": [
                "bool"
            ],
            "arguments": {
                "graph": [
                    "Graph"
                ],
                "input_slot": [
                    "InputSlotId"
                ]
            }
        },
        "parent_nodes": {
            "name": "parent_nodes",
            "location": 151,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "graph": [
                    "Graph"
                ],
                "node_id": [
                    "int"
                ]
            }
        },
        "slot_sources": {
            "name": "slot_sources",
            "location": 158,
            "return": [
                "List[utils.maybe.Maybe[OutputSlotId]]"
            ],
            "arguments": {
                "graph": [
                    "Graph"
                ],
                "node_id": [
                    "int"
                ]
            }
        },
        "graph_repr": {
            "name": "graph_repr",
            "location": 169,
            "return": [
                "str"
            ],
            "arguments": {
                "graph": [
                    "Graph"
                ]
            }
        },
        "apply_maybe_fn": {
            "name": "apply_maybe_fn",
            "location": 188,
            "return": [
                "Union[(utils.maybe.Just, utils.maybe.Nothing)]"
            ],
            "arguments": {
                "m_fn": [
                    "Union[int, float]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "eval_outputs": {
            "name": "eval_outputs",
            "location": 198,
            "return": [
                "Dict[(int, List[utils.maybe.Maybe[eeg_signal.Signal]])]"
            ],
            "arguments": {
                "graph": [
                    "Graph"
                ],
                "source_signals": [
                    "Dict[(int, eeg_signal.Signal)]"
                ],
                "boxes": [
                    "Dict[(int, Any)]"
                ]
            }
        },
        "get_inputs": {
            "name": "get_inputs",
            "location": 275,
            "return": [
                "Dict[(int, List[utils.maybe.Maybe[eeg_signal.Signal]])]"
            ],
            "arguments": {
                "graph": [
                    "Graph"
                ],
                "output_values": [
                    "Dict[(int, List[utils.maybe.Maybe[eeg_signal.Signal]])]"
                ]
            }
        },
        "handle_graph_effect": {
            "name": "handle_graph_effect",
            "location": 412,
            "return": [
                "Optional[Dict[(int, List[utils.maybe.Maybe[eeg_signal.Signal]])]]"
            ],
            "arguments": {
                "graph": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "source_signals": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "boxes": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "command": [
                    "GraphEffect"
                ]
            }
        },
        "GraphAction.AddNode": {
            "name": "AddNode",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "id_": [
                    "int"
                ],
                "node": [
                    "Node"
                ]
            }
        },
        "GraphAction.RemoveNode": {
            "name": "RemoveNode",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "id_": [
                    "int"
                ]
            }
        },
        "GraphAction.Connect": {
            "name": "Connect",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "source_slot": [
                    "OutputSlotId"
                ],
                "dest_slot": [
                    "InputSlotId"
                ]
            }
        },
        "GraphAction.Disconnect": {
            "name": "Disconnect",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "source_slot": [
                    "OutputSlotId"
                ],
                "dest_slot": [
                    "InputSlotId"
                ]
            }
        },
        "GraphEffect.EvalGraph": {
            "name": "EvalGraph",
            "location": 409,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sensa-master/persist.py": {
        "dump_all": {
            "name": "dump_all",
            "location": 12,
            "return": [
                "utils.types.IO_[None]"
            ],
            "arguments": {
                "objs": [
                    "Iterable"
                ],
                "file": [
                    "str",
                    "TextIO",
                    "typing.TextIO",
                    "BinaryIO",
                    "typing.BinaryIO",
                    "IO[bytes]",
                    "typing.IO",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "dump_append": {
            "name": "dump_append",
            "location": 23,
            "return": [
                "utils.types.IO_[None]"
            ],
            "arguments": {
                "obj": [
                    "Dict[str, int]",
                    "int",
                    "dict[str, int]"
                ],
                "file": [
                    "BinaryIO",
                    "typing.BinaryIO",
                    "bytes",
                    "List[str]",
                    "list[str]",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "load_all": {
            "name": "load_all",
            "location": 31,
            "return": [
                "Iterable[utils.types.IO_]"
            ],
            "arguments": {
                "file": [
                    "BinaryIO",
                    "str",
                    "typing.BinaryIO",
                    "List[str]",
                    "list[str]",
                    "List[int]",
                    "list[int]",
                    "TextIO",
                    "typing.TextIO"
                ]
            }
        }
    },
    "sensa-master/plot.py": {
        "eval_node": {
            "name": "eval_node",
            "location": 109,
            "return": [
                "raiden.utils.Dict",
                "typing.Callable[, ]"
            ],
            "arguments": {
                "plot_box_state": [
                    "PlotBoxState"
                ]
            }
        },
        "to_node": {
            "name": "to_node",
            "location": 117,
            "return": [
                "ng.Node"
            ],
            "arguments": {
                "plot_box_state": [
                    "PlotBoxState"
                ]
            }
        },
        "update_plot_box": {
            "name": "update_plot_box",
            "location": 154,
            "return": [
                "PlotBoxState"
            ],
            "arguments": {
                "plot_box_state": [
                    "PlotBoxState"
                ],
                "action": [
                    "Union[(DragAction, PlotAction)]"
                ]
            }
        },
        "time_range_after_drag": {
            "name": "time_range_after_drag",
            "location": 330,
            "return": [
                "time_range.TimeRange"
            ],
            "arguments": {
                "time_range_before_drag": [
                    "time_range.TimeRange"
                ],
                "signal": [
                    "eeg_signal.Signal"
                ],
                "plot_draw_area": [
                    "utils.rect.Rect"
                ],
                "drag_origin": [
                    "float",
                    "numpy.ndarray"
                ],
                "drag_delta": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "numpy.array"
                ]
            }
        },
        "show_full_plot": {
            "name": "show_full_plot",
            "location": 412,
            "return": [
                "utils.types.IO_[None]"
            ],
            "arguments": {
                "plot_box_state": [
                    "PlotState"
                ],
                "signal": [
                    "eeg_signal.Signal"
                ],
                "plot_draw_area": [
                    "utils.rect.Rect"
                ],
                "draw_list": [
                    "int",
                    "str",
                    "types.transports.ProducerT",
                    "None",
                    "dict[, ]",
                    "raiden.utils.PrivateKey",
                    "raiden.utils.Optional[raiden.utils.Address]",
                    "dict"
                ],
                "ui_settings": [
                    "str",
                    "numpy.ndarray",
                    "list[typing.Any]",
                    "list[numpy.ndarray]",
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "List[numpy.ndarray]",
                    "float",
                    "int"
                ]
            }
        },
        "show_empty_plot": {
            "name": "show_empty_plot",
            "location": 594,
            "return": [
                "utils.types.IO_[None]"
            ],
            "arguments": {
                "plot_state": [
                    "PlotState"
                ],
                "text": [
                    "str"
                ],
                "plot_draw_area": [
                    "utils.rect.Rect"
                ],
                "draw_list": [
                    "bool",
                    "utils.Rect",
                    "typing.Callable[T, bool]",
                    "list[E]",
                    "str",
                    "list[int]",
                    "int",
                    "Callable[[Type, str], bool]",
                    "List['Entity']",
                    "List[int]"
                ]
            }
        },
        "show_imgui_plot": {
            "name": "show_imgui_plot",
            "location": 603,
            "return": [
                "utils.types.IO_[None]"
            ],
            "arguments": {
                "plot_box_state": [
                    "PlotState"
                ],
                "signal": [
                    "eeg_signal.Signal"
                ],
                "width": [
                    "int"
                ],
                "height": [
                    "int"
                ],
                "ui_settings": [
                    "str",
                    "float",
                    "list[int]",
                    "List[int]",
                    "int"
                ]
            }
        },
        "slice_signal": {
            "name": "slice_signal",
            "location": 644,
            "return": [
                "utils.types.NDArray[float]"
            ],
            "arguments": {
                "signal": [
                    "eeg_signal.Signal"
                ],
                "time_range": [
                    "time_range.TimeRange"
                ],
                "n_points_needed": [
                    "int"
                ],
                "variant": [
                    "typing.Text",
                    "int",
                    "Type[Exception]",
                    "bool",
                    "Callable",
                    "Sequence"
                ]
            }
        },
        "amplitude": {
            "name": "amplitude",
            "location": 692,
            "return": [
                "float"
            ],
            "arguments": {
                "data": [
                    "utils.types.NDArray[float]"
                ]
            }
        },
        "downsample": {
            "name": "downsample",
            "location": 700,
            "return": [
                "utils.types.NDArray[float]"
            ],
            "arguments": {
                "data": [
                    "utils.types.NDArray[float]"
                ],
                "n_samples": [
                    "int"
                ]
            }
        },
        "crude_downsample": {
            "name": "crude_downsample",
            "location": 710,
            "return": [
                "utils.types.NDArray[float]"
            ],
            "arguments": {
                "data": [
                    "utils.types.NDArray[float]"
                ],
                "n_samples": [
                    "int"
                ]
            }
        },
        "n_indexes_from_range": {
            "name": "n_indexes_from_range",
            "location": 731,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "first_ix": [
                    "int"
                ],
                "last_ix": [
                    "int"
                ],
                "n": [
                    "int"
                ]
            }
        },
        "time_range_to_ix_range_incl": {
            "name": "time_range_to_ix_range_incl",
            "location": 761,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "time_range": [
                    "time_range.TimeRange"
                ],
                "signal": [
                    "eeg_signal.Signal"
                ]
            }
        },
        "DragState.NotDragging": {
            "name": "NotDragging",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DragState.Dragging": {
            "name": "Dragging",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "time_range_before_drag": [
                    "time_range.TimeRange"
                ]
            }
        },
        "DragAction.StartDrag": {
            "name": "StartDrag",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "id_": [
                    "int"
                ]
            }
        },
        "DragAction.EndDrag": {
            "name": "EndDrag",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "id_": [
                    "int"
                ]
            }
        },
        "PlotState.NoTimeRange": {
            "name": "NoTimeRange",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "PlotState.WithTimeRange": {
            "name": "WithTimeRange",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "time_range": [
                    "time_range.TimeRange"
                ]
            }
        },
        "PlotAction.SetTimeRange": {
            "name": "SetTimeRange",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "id_": [
                    "int"
                ],
                "time_range": [
                    "time_range.TimeRange"
                ]
            }
        },
        "PlotAction.SetNoTimeRange": {
            "name": "SetNoTimeRange",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "id_": [
                    "int"
                ]
            }
        }
    },
    "sensa-master/read_edf.py": {
        "read_edf": {
            "name": "read_edf",
            "location": 15,
            "return": [
                "Tuple[(Dict[(str, Any)], Dict[(str, Sequence[float])])]"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "immutable": [
                    "str",
                    "bool"
                ]
            }
        },
        "scale": {
            "name": "scale",
            "location": 91,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "physical_max": [
                    "float"
                ],
                "digital_max": [
                    "float"
                ],
                "signal": [
                    "Sequence[float]"
                ]
            }
        },
        "read_header": {
            "name": "read_header",
            "location": 102,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "data_file": [
                    "BinaryIO"
                ]
            }
        },
        "read_signals": {
            "name": "read_signals",
            "location": 161,
            "return": [
                "Dict[(str, Sequence[float])]"
            ],
            "arguments": {
                "data_file": [
                    "BinaryIO"
                ],
                "hdr": [
                    "list[]",
                    "str",
                    "int",
                    "Optional[int]",
                    "list",
                    "bool"
                ],
                "immutable": [
                    "bool",
                    "str",
                    "list"
                ]
            }
        },
        "read_header.read_n_bytes": {
            "name": "read_n_bytes",
            "location": 105,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "df": [
                    "BinaryIO",
                    "int",
                    "Tuple[bool]"
                ],
                "n": [
                    "BinaryIO",
                    "int",
                    "Tuple[bool]"
                ],
                "method": [
                    "BinaryIO",
                    "int",
                    "Tuple[bool]"
                ]
            }
        },
        "read_header.static_header": {
            "name": "static_header",
            "location": 108,
            "return": [
                "str",
                "dict",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "df": [
                    "BinaryIO",
                    "str",
                    "T",
                    "numpy.ndarray",
                    "int",
                    "bytes",
                    "Optional[Dict]"
                ],
                "hdr": [
                    "BinaryIO",
                    "str",
                    "T",
                    "numpy.ndarray",
                    "int",
                    "bytes",
                    "Optional[Dict]"
                ]
            }
        },
        "read_header.dynamic_header": {
            "name": "dynamic_header",
            "location": 121,
            "return": [
                "str",
                "dict",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "df": [
                    "bytes",
                    "int",
                    "numpy.ndarray",
                    "Dict[str, Union[int, bool]]"
                ],
                "hdr": [
                    "List[Dict]"
                ]
            }
        }
    },
    "sensa-master/reload_util.py": {
        "recursive_reload": {
            "name": "recursive_reload",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "module": [
                    "module"
                ],
                "dir": [
                    "pathlib.Path"
                ],
                "excluded": [
                    "Sequence[str]"
                ],
                "verbose": [
                    "bool",
                    "List[str]",
                    "float",
                    "Optional[list]",
                    "str",
                    "Optional[List[Any]]",
                    "slice"
                ],
                "inject_versions": [
                    "bool",
                    "List[str]",
                    "float",
                    "Optional[list]",
                    "str",
                    "Optional[List[Any]]",
                    "slice"
                ]
            }
        },
        "direct_deps": {
            "name": "direct_deps",
            "location": 109,
            "return": [
                "Set[module]"
            ],
            "arguments": {
                "module": [
                    "module"
                ],
                "dir": [
                    "pathlib.Path"
                ]
            }
        },
        "all_deps": {
            "name": "all_deps",
            "location": 137,
            "return": [
                "Set[module]"
            ],
            "arguments": {
                "module": [
                    "module"
                ],
                "dir": [
                    "Iterable[Any]",
                    "None",
                    "float",
                    "typing.Iterable[typing.Any]",
                    "Dict[str, Any]"
                ]
            }
        },
        "is_module_in_dir": {
            "name": "is_module_in_dir",
            "location": 148,
            "return": [
                "bool"
            ],
            "arguments": {
                "module": [
                    "module"
                ],
                "directory": [
                    "pathlib.Path"
                ]
            }
        },
        "module_dirpath": {
            "name": "module_dirpath",
            "location": 160,
            "return": [
                "Optional[pathlib.Path]"
            ],
            "arguments": {
                "module": [
                    "module"
                ]
            }
        },
        "module_abspath": {
            "name": "module_abspath",
            "location": 163,
            "return": [
                "Optional[pathlib.Path]"
            ],
            "arguments": {
                "module": [
                    "module"
                ]
            }
        },
        "current_module_dirpath": {
            "name": "current_module_dirpath",
            "location": 171,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {}
        },
        "current_module_abspath": {
            "name": "current_module_abspath",
            "location": 178,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {}
        },
        "union_all": {
            "name": "union_all",
            "location": 189,
            "return": [
                "Set[A]"
            ],
            "arguments": {
                "sets": [
                    "Iterable[Set[A]]"
                ]
            }
        },
        "cat": {
            "name": "cat",
            "location": 193,
            "return": [
                "None",
                "Optional[T]",
                "type",
                "str",
                "List[str]"
            ],
            "arguments": {
                "expr": [
                    "bool",
                    "None",
                    "str",
                    "Optional[bool]",
                    "list[]",
                    "int",
                    "list"
                ]
            }
        },
        "catf": {
            "name": "catf",
            "location": 201,
            "return": [
                "Callable"
            ],
            "arguments": {
                "f": [
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "typing.Callable[, ]",
                    "Callable",
                    "T"
                ]
            }
        },
        "all_modules": {
            "name": "all_modules",
            "location": 214,
            "return": [
                "set"
            ],
            "arguments": {
                "dir": [
                    "Optional[str]",
                    "None",
                    "str",
                    "Optional[List[str]]",
                    "list[str]",
                    "Optional[Union[Any, Any]]",
                    "typing.Any",
                    "Optional[IO[bytes]]",
                    "typing.IO",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "recursive_reload.rec_rel": {
            "name": "rec_rel",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "mod": [
                    "str",
                    "Union[str, pathlib.Path]",
                    "dict",
                    "bool"
                ],
                "current_depth": [
                    "int",
                    "str"
                ]
            }
        },
        "catf.safe_f": {
            "name": "safe_f",
            "location": 205,
            "return": [
                "None",
                "str",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {}
        }
    },
    "sensa-master/repl.py": {
        "init_state": {
            "name": "init_state",
            "location": 9,
            "return": [
                "str",
                "bool",
                "None",
                "set[int]",
                "tuple[typing.Union[str,str]]",
                "raiden.utils.PaymentNetworkID",
                "raiden.utils.TokenAddress",
                "int",
                "app.models.Tweet"
            ],
            "arguments": {}
        },
        "group_by": {
            "name": "group_by",
            "location": 84,
            "return": [
                "collections.OrderedDict[(Any, list)]"
            ],
            "arguments": {
                "xs": [
                    "list[T]",
                    "str",
                    "Hashable",
                    "List[T]",
                    "Optional[int]",
                    "bool"
                ],
                "key": [
                    "bytes",
                    "str",
                    "int"
                ]
            }
        }
    },
    "sensa-master/signal_source.py": {
        "update_source": {
            "name": "update_source",
            "location": 62,
            "return": [
                "SourceState"
            ],
            "arguments": {
                "source_state": [
                    "SourceState"
                ],
                "action": [
                    "SourceAction"
                ]
            }
        },
        "SourceState.Empty": {
            "name": "Empty",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "id_": [
                    "int"
                ]
            }
        },
        "SourceState.Full": {
            "name": "Full",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "id_": [
                    "int"
                ],
                "signal_id": [
                    "int"
                ]
            }
        },
        "SourceState.eval_node": {
            "name": "eval_node",
            "location": 38,
            "return": [
                "typing.Callable[, ]",
                "str",
                "Optional[cmk.utils.type_defs.HostAddress]",
                "bool"
            ],
            "arguments": {
                "src": [
                    "SourceState"
                ]
            }
        },
        "SourceState.to_node": {
            "name": "to_node",
            "location": 41,
            "return": [
                "ng.Node"
            ],
            "arguments": {
                "src": [
                    "SourceState"
                ]
            }
        },
        "SourceAction.SetEmpty": {
            "name": "SetEmpty",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "id_": [
                    "int"
                ]
            }
        },
        "SourceAction.SelectSignal": {
            "name": "SelectSignal",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "id_": [
                    "int"
                ],
                "signal_id": [
                    "int"
                ]
            }
        }
    },
    "sensa-master/test_async_eff.py": {
        "test_async_get_id": {
            "name": "test_async_get_id",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "n": [
                    "int",
                    "Optional[str]",
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "test_sync_get_id": {
            "name": "test_sync_get_id",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "n": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "get_n_ids_sync": {
            "name": "get_n_ids_sync",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "n": [
                    "int",
                    "str",
                    "List[List[int]]",
                    "list[list[int]]"
                ]
            }
        },
        "yield_": {
            "name": "yield_",
            "location": 84,
            "return": [
                "Generator[(GetId, Any, Any)]"
            ],
            "arguments": {
                "x": [
                    "GetId"
                ]
            }
        },
        "run_id_async": {
            "name": "run_id_async",
            "location": 99,
            "return": [
                "tuple"
            ],
            "arguments": {
                "comp": [
                    "str",
                    "Optional[str]",
                    "list",
                    "List[int]",
                    "bool"
                ],
                "id_": [
                    "_T1"
                ]
            }
        }
    },
    "sensa-master/time_range.py": {
        "clamp_time_range": {
            "name": "clamp_time_range",
            "location": 8,
            "return": [
                "TimeRange"
            ],
            "arguments": {
                "min_t": [
                    "float"
                ],
                "time_range": [
                    "TimeRange"
                ],
                "max_t": [
                    "float"
                ]
            }
        },
        "scale_at_point_limited": {
            "name": "scale_at_point_limited",
            "location": 30,
            "return": [
                "TimeRange"
            ],
            "arguments": {
                "time_range": [
                    "TimeRange"
                ],
                "scaling_factor": [
                    "float"
                ],
                "point": [
                    "float"
                ],
                "min_len": [
                    "float"
                ],
                "min_t": [
                    "float"
                ],
                "max_t": [
                    "float"
                ]
            }
        },
        "scale_by_limited": {
            "name": "scale_by_limited",
            "location": 82,
            "return": [
                "TimeRange"
            ],
            "arguments": {
                "scaling_factor": [
                    "float"
                ],
                "time_range": [
                    "TimeRange"
                ],
                "min_len": [
                    "float"
                ],
                "max_len": [
                    "float"
                ]
            }
        },
        "scale_by": {
            "name": "scale_by",
            "location": 95,
            "return": [
                "TimeRange"
            ],
            "arguments": {
                "scaling_factor": [
                    "float"
                ],
                "time_range": [
                    "TimeRange"
                ]
            }
        },
        "is_time_range_length_between": {
            "name": "is_time_range_length_between",
            "location": 108,
            "return": [
                "bool"
            ],
            "arguments": {
                "min_len": [
                    "float"
                ],
                "max_len": [
                    "float"
                ],
                "time_range": [
                    "TimeRange"
                ]
            }
        },
        "time_range_middle": {
            "name": "time_range_middle",
            "location": 120,
            "return": [
                "float"
            ],
            "arguments": {
                "time_range": [
                    "TimeRange"
                ]
            }
        },
        "time_range_add_offset": {
            "name": "time_range_add_offset",
            "location": 129,
            "return": [
                "TimeRange"
            ],
            "arguments": {
                "time_range": [
                    "TimeRange"
                ],
                "offset": [
                    "float"
                ]
            }
        },
        "time_range_subtract_offset": {
            "name": "time_range_subtract_offset",
            "location": 137,
            "return": [
                "TimeRange"
            ],
            "arguments": {
                "time_range": [
                    "TimeRange"
                ],
                "offset": [
                    "float"
                ]
            }
        },
        "time_range_length": {
            "name": "time_range_length",
            "location": 144,
            "return": [
                "float"
            ],
            "arguments": {
                "time_range": [
                    "TimeRange"
                ]
            }
        }
    },
    "sensa-master/trans.py": {
        "Trans.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "func": [
                    "Optional[List[str]]",
                    "list[str]",
                    "int",
                    "None",
                    "Optional[str]",
                    "Callable",
                    "str",
                    "bool",
                    "typing.Callable[, ]"
                ],
                "func_sig": [
                    "Sequence[str]"
                ]
            }
        },
        "Trans.__call__": {
            "name": "__call__",
            "location": 32,
            "return": [
                "eeg_signal.Signal"
            ],
            "arguments": {
                "self": [],
                "signal": [
                    "eeg_signal.Signal"
                ],
                "params": [
                    "utils.types.PMap_[(str, Any)]"
                ]
            }
        },
        "Trans.are_complete_parameters": {
            "name": "are_complete_parameters",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "utils.types.PMap_[(str, Any)]"
                ]
            }
        },
        "Trans.__repr__": {
            "name": "__repr__",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sensa-master/__main__.py": {},
    "sensa-master/components/double_click_listbox.py": {
        "double_click_listbox": {
            "name": "double_click_listbox",
            "location": 8,
            "return": [
                "Tuple[(bool, bool, tuple)]"
            ],
            "arguments": {
                "state": [
                    "tuple"
                ],
                "options": [
                    "Sequence[str]"
                ]
            }
        }
    },
    "sensa-master/components/draggable.py": {
        "draggable": {
            "name": "draggable",
            "location": 13,
            "return": [
                "bool",
                "typing.Generator[tuple[typing.Union[int,str,list[],tuple[typing.Union[float,float]],dict[str, int]]]]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "was_down": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Optional[float]",
                    "None",
                    "Optional[Type]",
                    "float",
                    "typing.Type"
                ],
                "width": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "height": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "sensa-master/components/grouped.py": {
        "only_draw_if": {
            "name": "only_draw_if",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "cond": [
                    "bool"
                ]
            }
        },
        "_IMGuiCtx.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "begin": [
                    "Callable[(..., A)]"
                ],
                "end": [
                    "Callable[([], Any)]"
                ]
            }
        },
        "_IMGuiCtx.__enter__": {
            "name": "__enter__",
            "location": 29,
            "return": [
                "utils.types.IO_[A]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_IMGuiCtx.__exit__": {
            "name": "__exit__",
            "location": 32,
            "return": [
                "utils.types.IO_[Optional[bool]]"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "str",
                    "Optional[BaseException]",
                    "int",
                    "BaseException",
                    "Union[int, str]",
                    "float",
                    "None",
                    "Type",
                    "typing.Type"
                ],
                "exc": [
                    "None",
                    "Optional[types.TracebackType]",
                    "str",
                    "typing.Type",
                    "BaseException",
                    "Optional[Type[BaseException]]",
                    "Exception",
                    "types.TracebackType",
                    "Optional[BaseException]"
                ],
                "traceback": [
                    "None",
                    "Optional[types.TracebackType]",
                    "str",
                    "typing.Type",
                    "BaseException",
                    "Optional[Type[BaseException]]",
                    "Exception",
                    "types.TracebackType",
                    "Optional[BaseException]"
                ]
            }
        }
    },
    "sensa-master/components/str_combo.py": {
        "str_combo": {
            "name": "str_combo",
            "location": 14,
            "return": [
                "utils.types.IO_[Tuple[(bool, str)]]"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "current_option": [
                    "str"
                ],
                "options": [
                    "Sequence[str]"
                ],
                "label_left": [
                    "bool"
                ]
            }
        },
        "str_combo_with_none": {
            "name": "str_combo_with_none",
            "location": 42,
            "return": [
                "utils.types.IO_[Tuple[(bool, Optional[str])]]"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "o_current_option": [
                    "Optional[str]"
                ],
                "options": [
                    "Sequence[str]"
                ],
                "nothing_text": [
                    "typing.Text",
                    "str",
                    "Optional[str]",
                    "types.ModuleType",
                    "Optional[List[str]]"
                ],
                "label_left": [
                    "bool"
                ]
            }
        },
        "ordered_dict_to_list": {
            "name": "ordered_dict_to_list",
            "location": 87,
            "return": [
                "Sequence[Tuple[(K, A)]]"
            ],
            "arguments": {
                "odict": [
                    "utils.types.OrderedDict_[(K, A)]"
                ]
            }
        },
        "ordered_dict_keys": {
            "name": "ordered_dict_keys",
            "location": 90,
            "return": [
                "Sequence[K]"
            ],
            "arguments": {
                "odict": [
                    "utils.types.OrderedDict_[(K, A)]"
                ]
            }
        },
        "ordered_dict_values": {
            "name": "ordered_dict_values",
            "location": 93,
            "return": [
                "Sequence[K]"
            ],
            "arguments": {
                "odict": [
                    "utils.types.OrderedDict_[(K, A)]"
                ]
            }
        }
    },
    "sensa-master/components/str_listbox.py": {
        "str_listbox": {
            "name": "str_listbox",
            "location": 12,
            "return": [
                "utils.types.IO_[Tuple[(bool, str)]]"
            ],
            "arguments": {
                "label": [
                    "str"
                ],
                "current_option": [
                    "str"
                ],
                "options": [
                    "Sequence[str]"
                ]
            }
        }
    },
    "sensa-master/components/styled.py": {
        "_IMColorCtx.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "imc": [
                    "_IMColorCtx"
                ],
                "colors": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "_IMColorCtx.__enter__": {
            "name": "__enter__",
            "location": 14,
            "return": [
                "utils.types.IO_[None]"
            ],
            "arguments": {
                "imc": [
                    "_IMColorCtx"
                ]
            }
        },
        "_IMColorCtx.__exit__": {
            "name": "__exit__",
            "location": 18,
            "return": [
                "utils.types.IO_[None]"
            ],
            "arguments": {
                "imc": [
                    "_IMColorCtx"
                ]
            }
        },
        "_IMStyleCtx.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "ims": [
                    "_IMStyleCtx"
                ],
                "styles": [
                    "int",
                    "float",
                    "bool",
                    "apistar.types.RouteConfig"
                ]
            }
        },
        "_IMStyleCtx.__enter__": {
            "name": "__enter__",
            "location": 29,
            "return": [
                "utils.types.IO_[None]"
            ],
            "arguments": {
                "ims": [
                    "_IMStyleCtx"
                ]
            }
        },
        "_IMStyleCtx.__exit__": {
            "name": "__exit__",
            "location": 33,
            "return": [
                "utils.types.IO_[None]"
            ],
            "arguments": {
                "ims": [
                    "_IMStyleCtx"
                ]
            }
        }
    },
    "sensa-master/components/__init__.py": {},
    "sensa-master/mypy_stubs/mypy-data/numpy-mypy/numpy/__init__.py": {
        "array": {
            "name": "array",
            "location": 441,
            "return": [],
            "arguments": {
                "object": [],
                "dtype": [],
                "copy": [],
                "order": [],
                "subok": [],
                "ndmin": []
            }
        },
        "asarray": {
            "name": "asarray",
            "location": 444,
            "return": [],
            "arguments": {
                "a": [],
                "dtype": [],
                "order": []
            }
        },
        "asanyarray": {
            "name": "asanyarray",
            "location": 445,
            "return": [],
            "arguments": {
                "a": [],
                "dtype": [],
                "order": []
            }
        },
        "asmatrix": {
            "name": "asmatrix",
            "location": 446,
            "return": [],
            "arguments": {
                "data": [],
                "dtype": []
            }
        },
        "ascontiguousarray": {
            "name": "ascontiguousarray",
            "location": 447,
            "return": [],
            "arguments": {
                "a": [],
                "dtype": []
            }
        },
        "copy": {
            "name": "copy",
            "location": 448,
            "return": [],
            "arguments": {
                "a": [],
                "order": []
            }
        },
        "empty": {
            "name": "empty",
            "location": 449,
            "return": [],
            "arguments": {
                "shape": [],
                "dtype": [],
                "order": []
            }
        },
        "empty_like": {
            "name": "empty_like",
            "location": 450,
            "return": [],
            "arguments": {
                "a": [],
                "dtype": [],
                "order": [],
                "subok": []
            }
        },
        "eye": {
            "name": "eye",
            "location": 451,
            "return": [],
            "arguments": {
                "N": [],
                "M": [],
                "k": [],
                "dtype": []
            }
        },
        "frombuffer": {
            "name": "frombuffer",
            "location": 452,
            "return": [],
            "arguments": {
                "buffer": [],
                "dtype": [],
                "count": [],
                "offset": []
            }
        },
        "fromfile": {
            "name": "fromfile",
            "location": 454,
            "return": [],
            "arguments": {
                "file": [],
                "dtype": [],
                "count": [],
                "sep": []
            }
        },
        "full": {
            "name": "full",
            "location": 455,
            "return": [],
            "arguments": {
                "shape": [],
                "fill_value": [],
                "dtype": [],
                "order": []
            }
        },
        "full_like": {
            "name": "full_like",
            "location": 457,
            "return": [],
            "arguments": {
                "a": [],
                "fill_value": [],
                "dtype": [],
                "order": [],
                "subok": []
            }
        },
        "fromfunction": {
            "name": "fromfunction",
            "location": 459,
            "return": [],
            "arguments": {
                "function": [],
                "shape": [],
                "dtype": []
            }
        },
        "fromiter": {
            "name": "fromiter",
            "location": 460,
            "return": [],
            "arguments": {
                "iterable": [],
                "dytpe": [],
                "count": []
            }
        },
        "fromstring": {
            "name": "fromstring",
            "location": 461,
            "return": [],
            "arguments": {
                "string": [],
                "dtype": [],
                "count": [],
                "sep": []
            }
        },
        "identity": {
            "name": "identity",
            "location": 462,
            "return": [],
            "arguments": {
                "n": [],
                "dtype": []
            }
        },
        "loadtxt": {
            "name": "loadtxt",
            "location": 463,
            "return": [],
            "arguments": {
                "fname": [],
                "dtype": [],
                "comments": [],
                "delimiter": [],
                "converters": [],
                "skiprows": [],
                "usecols": [],
                "unpack": [],
                "ndmin": []
            }
        },
        "ones": {
            "name": "ones",
            "location": 467,
            "return": [],
            "arguments": {
                "shape": [],
                "dtype": [],
                "order": []
            }
        },
        "ones_like": {
            "name": "ones_like",
            "location": 468,
            "return": [],
            "arguments": {
                "a": [],
                "dtype": [],
                "order": [],
                "subok": []
            }
        },
        "zeros": {
            "name": "zeros",
            "location": 469,
            "return": [],
            "arguments": {
                "shape": [],
                "dtype": [],
                "order": []
            }
        },
        "zeros_like": {
            "name": "zeros_like",
            "location": 470,
            "return": [],
            "arguments": {
                "a": [],
                "dtype": [],
                "order": [],
                "subok": []
            }
        },
        "flagsobj.__getitem__": {
            "name": "__getitem__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "flagsobj.__setitem__": {
            "name": "__setitem__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "item": [],
                "value": []
            }
        },
        "flatiter.copy": {
            "name": "copy",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayLike.all": {
            "name": "all",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "out": [],
                "keepdims": []
            }
        },
        "_ArrayLike.any": {
            "name": "any",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "out": [],
                "keepdims": []
            }
        },
        "_ArrayLike.argmax": {
            "name": "argmax",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "out": []
            }
        },
        "_ArrayLike.argmin": {
            "name": "argmin",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "out": []
            }
        },
        "_ArrayLike.argpartition": {
            "name": "argpartition",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "kth": [],
                "axis": [],
                "kind": [],
                "order": []
            }
        },
        "_ArrayLike.argsort": {
            "name": "argsort",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "kind": [],
                "order": []
            }
        },
        "_ArrayLike.astype": {
            "name": "astype",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "dtype": [],
                "order": [],
                "casting": [],
                "subok": [],
                "copy": []
            }
        },
        "_ArrayLike.byteswap": {
            "name": "byteswap",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "inplace": []
            }
        },
        "_ArrayLike.choose": {
            "name": "choose",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "choices": [],
                "out": [],
                "mode": []
            }
        },
        "_ArrayLike.clip": {
            "name": "clip",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "a_min": [],
                "a_max": [],
                "out": []
            }
        },
        "_ArrayLike.compress": {
            "name": "compress",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "condition": [],
                "axis": [],
                "out": []
            }
        },
        "_ArrayLike.conj": {
            "name": "conj",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayLike.conjugate": {
            "name": "conjugate",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayLike.copy": {
            "name": "copy",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "order": []
            }
        },
        "_ArrayLike.cumprod": {
            "name": "cumprod",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "dtype": [],
                "out": []
            }
        },
        "_ArrayLike.cumsum": {
            "name": "cumsum",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "dtype": [],
                "out": []
            }
        },
        "_ArrayLike.diagonal": {
            "name": "diagonal",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "offset": [],
                "axis1": [],
                "axis2": []
            }
        },
        "_ArrayLike.dot": {
            "name": "dot",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "b": [],
                "out": []
            }
        },
        "_ArrayLike.dump": {
            "name": "dump",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "file": []
            }
        },
        "_ArrayLike.dumps": {
            "name": "dumps",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayLike.fill": {
            "name": "fill",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.flatten": {
            "name": "flatten",
            "location": 137,
            "return": [],
            "arguments": {
                "self": [],
                "order": []
            }
        },
        "_ArrayLike.getfield": {
            "name": "getfield",
            "location": 139,
            "return": [],
            "arguments": {
                "self": [],
                "dtype": [],
                "offset": []
            }
        },
        "_ArrayLike.item": {
            "name": "item",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "_ArrayLike.itemset": {
            "name": "itemset",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "arg0": [],
                "arg1": []
            }
        },
        "_ArrayLike.max": {
            "name": "max",
            "location": 145,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "out": []
            }
        },
        "_ArrayLike.mean": {
            "name": "mean",
            "location": 148,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "dtype": [],
                "out": [],
                "keepdims": []
            }
        },
        "_ArrayLike.min": {
            "name": "min",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "out": []
            }
        },
        "_ArrayLike.newbyteorder": {
            "name": "newbyteorder",
            "location": 154,
            "return": [],
            "arguments": {
                "self": [],
                "new_order": []
            }
        },
        "_ArrayLike.nonzero": {
            "name": "nonzero",
            "location": 156,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayLike.partition": {
            "name": "partition",
            "location": 158,
            "return": [],
            "arguments": {
                "self": [],
                "kth": [],
                "axis": [],
                "kind": [],
                "order": []
            }
        },
        "_ArrayLike.prod": {
            "name": "prod",
            "location": 161,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "dtype": [],
                "out": [],
                "keepdims": []
            }
        },
        "_ArrayLike.ptp": {
            "name": "ptp",
            "location": 164,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "out": []
            }
        },
        "_ArrayLike.put": {
            "name": "put",
            "location": 167,
            "return": [],
            "arguments": {
                "self": [],
                "ind": [],
                "v": [],
                "mode": []
            }
        },
        "_ArrayLike.ravel": {
            "name": "ravel",
            "location": 169,
            "return": [],
            "arguments": {
                "self": [],
                "order": []
            }
        },
        "_ArrayLike.repeat": {
            "name": "repeat",
            "location": 171,
            "return": [],
            "arguments": {
                "self": [],
                "repeats": [],
                "axis": []
            }
        },
        "_ArrayLike.reshape": {
            "name": "reshape",
            "location": 174,
            "return": [],
            "arguments": {
                "self": [],
                "newshape": [],
                "order": []
            }
        },
        "_ArrayLike.resize": {
            "name": "resize",
            "location": 177,
            "return": [],
            "arguments": {
                "self": [],
                "new_shape": [],
                "refcheck": []
            }
        },
        "_ArrayLike.round": {
            "name": "round",
            "location": 179,
            "return": [],
            "arguments": {
                "self": [],
                "decimals": [],
                "out": []
            }
        },
        "_ArrayLike.searchsorted": {
            "name": "searchsorted",
            "location": 182,
            "return": [],
            "arguments": {
                "self": [],
                "v": [],
                "side": [],
                "sorter": []
            }
        },
        "_ArrayLike.setfield": {
            "name": "setfield",
            "location": 185,
            "return": [],
            "arguments": {
                "self": [],
                "val": [],
                "dtype": [],
                "offset": []
            }
        },
        "_ArrayLike.setflags": {
            "name": "setflags",
            "location": 187,
            "return": [],
            "arguments": {
                "self": [],
                "write": [],
                "align": [],
                "uic": []
            }
        },
        "_ArrayLike.sort": {
            "name": "sort",
            "location": 190,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "kind": [],
                "order": []
            }
        },
        "_ArrayLike.squeeze": {
            "name": "squeeze",
            "location": 192,
            "return": [],
            "arguments": {
                "self": [],
                "axis": []
            }
        },
        "_ArrayLike.std": {
            "name": "std",
            "location": 194,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "dtype": [],
                "out": [],
                "ddof": [],
                "keepdims": []
            }
        },
        "_ArrayLike.sum": {
            "name": "sum",
            "location": 197,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "dtype": [],
                "out": [],
                "keepdims": []
            }
        },
        "_ArrayLike.swapaxes": {
            "name": "swapaxes",
            "location": 201,
            "return": [],
            "arguments": {
                "self": [],
                "axis1": [],
                "axis2": []
            }
        },
        "_ArrayLike.take": {
            "name": "take",
            "location": 203,
            "return": [],
            "arguments": {
                "self": [],
                "indices": [],
                "axis": [],
                "out": [],
                "mode": []
            }
        },
        "_ArrayLike.tobytes": {
            "name": "tobytes",
            "location": 207,
            "return": [],
            "arguments": {
                "self": [],
                "order": []
            }
        },
        "_ArrayLike.tofile": {
            "name": "tofile",
            "location": 209,
            "return": [],
            "arguments": {
                "self": [],
                "fid": [],
                "sep": [],
                "format": []
            }
        },
        "_ArrayLike.tolist": {
            "name": "tolist",
            "location": 212,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayLike.tostring": {
            "name": "tostring",
            "location": 214,
            "return": [],
            "arguments": {
                "self": [],
                "order": []
            }
        },
        "_ArrayLike.trace": {
            "name": "trace",
            "location": 216,
            "return": [],
            "arguments": {
                "self": [],
                "offset": [],
                "axis1": [],
                "axis2": [],
                "dtype": [],
                "out": []
            }
        },
        "_ArrayLike.transpose": {
            "name": "transpose",
            "location": 219,
            "return": [],
            "arguments": {
                "self": [],
                "axes": []
            }
        },
        "_ArrayLike.var": {
            "name": "var",
            "location": 221,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "dtype": [],
                "out": [],
                "ddof": [],
                "keepdims": []
            }
        },
        "_ArrayLike.view": {
            "name": "view",
            "location": 224,
            "return": [],
            "arguments": {
                "self": [],
                "dtype": [],
                "type": []
            }
        },
        "_ArrayLike.__abs__": {
            "name": "__abs__",
            "location": 231,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayLike.__add__": {
            "name": "__add__",
            "location": 233,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__and__": {
            "name": "__and__",
            "location": 235,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__array__": {
            "name": "__array__",
            "location": 237,
            "return": [],
            "arguments": {
                "self": [],
                "dtype": []
            }
        },
        "_ArrayLike.__array_prepare__": {
            "name": "__array_prepare__",
            "location": 239,
            "return": [],
            "arguments": {
                "self": [],
                "context": []
            }
        },
        "_ArrayLike.__array_wrap__": {
            "name": "__array_wrap__",
            "location": 241,
            "return": [],
            "arguments": {
                "self": [],
                "context": []
            }
        },
        "_ArrayLike.__bool__": {
            "name": "__bool__",
            "location": 243,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayLike.__complex__": {
            "name": "__complex__",
            "location": 245,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayLike.__contains__": {
            "name": "__contains__",
            "location": 247,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "_ArrayLike.__copy__": {
            "name": "__copy__",
            "location": 249,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayLike.__deepcopy__": {
            "name": "__deepcopy__",
            "location": 251,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayLike.__delattr__": {
            "name": "__delattr__",
            "location": 253,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "_ArrayLike.__delitem__": {
            "name": "__delitem__",
            "location": 255,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "_ArrayLike.__dir__": {
            "name": "__dir__",
            "location": 257,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayLike.__divmod__": {
            "name": "__divmod__",
            "location": 259,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__eq__": {
            "name": "__eq__",
            "location": 261,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__float__": {
            "name": "__float__",
            "location": 263,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayLike.__floordiv__": {
            "name": "__floordiv__",
            "location": 265,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__ge__": {
            "name": "__ge__",
            "location": 267,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__getattribute__": {
            "name": "__getattribute__",
            "location": 269,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "_ArrayLike.__getitem__": {
            "name": "__getitem__",
            "location": 271,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "_ArrayLike.__gt__": {
            "name": "__gt__",
            "location": 273,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__iadd__": {
            "name": "__iadd__",
            "location": 275,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__iand__": {
            "name": "__iand__",
            "location": 277,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__ifloordiv__": {
            "name": "__ifloordiv__",
            "location": 279,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__ilshift__": {
            "name": "__ilshift__",
            "location": 281,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__imatmul__": {
            "name": "__imatmul__",
            "location": 283,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__imod__": {
            "name": "__imod__",
            "location": 285,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__imul__": {
            "name": "__imul__",
            "location": 287,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__index__": {
            "name": "__index__",
            "location": 289,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayLike.__int__": {
            "name": "__int__",
            "location": 291,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayLike.__invert__": {
            "name": "__invert__",
            "location": 293,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayLike.__ior__": {
            "name": "__ior__",
            "location": 295,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__ipow__": {
            "name": "__ipow__",
            "location": 297,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__irshift__": {
            "name": "__irshift__",
            "location": 299,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__isub__": {
            "name": "__isub__",
            "location": 301,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__iter__": {
            "name": "__iter__",
            "location": 303,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayLike.__itruediv__": {
            "name": "__itruediv__",
            "location": 305,
            "return": [],
            "arguments": {
                "sel": [],
                "value": []
            }
        },
        "_ArrayLike.__ixor__": {
            "name": "__ixor__",
            "location": 307,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__le__": {
            "name": "__le__",
            "location": 309,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__len__": {
            "name": "__len__",
            "location": 311,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayLike.__lshift__": {
            "name": "__lshift__",
            "location": 313,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__lt__": {
            "name": "__lt__",
            "location": 315,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__matmul__": {
            "name": "__matmul__",
            "location": 317,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__mod__": {
            "name": "__mod__",
            "location": 319,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__mul__": {
            "name": "__mul__",
            "location": 321,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__ne__": {
            "name": "__ne__",
            "location": 323,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__neg__": {
            "name": "__neg__",
            "location": 325,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayLike.__or__": {
            "name": "__or__",
            "location": 327,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__pos__": {
            "name": "__pos__",
            "location": 329,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayLike.__pow__": {
            "name": "__pow__",
            "location": 331,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__radd__": {
            "name": "__radd__",
            "location": 333,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__rand__": {
            "name": "__rand__",
            "location": 335,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__rdivmod__": {
            "name": "__rdivmod__",
            "location": 337,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__rfloordiv__": {
            "name": "__rfloordiv__",
            "location": 339,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__rlshift__": {
            "name": "__rlshift__",
            "location": 341,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__rmatmul__": {
            "name": "__rmatmul__",
            "location": 343,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__rmod__": {
            "name": "__rmod__",
            "location": 345,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__rmul__": {
            "name": "__rmul__",
            "location": 347,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__ror__": {
            "name": "__ror__",
            "location": 349,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__rpow__": {
            "name": "__rpow__",
            "location": 351,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__rrshift__": {
            "name": "__rrshift__",
            "location": 353,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__rshift__": {
            "name": "__rshift__",
            "location": 355,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__rsub__": {
            "name": "__rsub__",
            "location": 357,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__rtruediv__": {
            "name": "__rtruediv__",
            "location": 359,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__rxor__": {
            "name": "__rxor__",
            "location": 361,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__setattr__": {
            "name": "__setattr__",
            "location": 363,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "value": []
            }
        },
        "_ArrayLike.__setitem__": {
            "name": "__setitem__",
            "location": 365,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "_ArrayLike.__str__": {
            "name": "__str__",
            "location": 367,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayLike.__sub__": {
            "name": "__sub__",
            "location": 369,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__truediv__": {
            "name": "__truediv__",
            "location": 371,
            "return": [],
            "arguments": {
                "sel": [],
                "value": []
            }
        },
        "_ArrayLike.__xor__": {
            "name": "__xor__",
            "location": 373,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ndarray.__init__": {
            "name": "__init__",
            "location": 433,
            "return": [],
            "arguments": {
                "self": [],
                "shape": [],
                "dtype": [],
                "buffer": [],
                "offset": [],
                "strides": [],
                "order": []
            }
        }
    },
    "sensa-master/utils/actions.py": {
        "err_unsupported_action": {
            "name": "err_unsupported_action",
            "location": 3,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "action": [
                    "int",
                    "bytes"
                ],
                "state": [
                    "int",
                    "bytes"
                ]
            }
        },
        "bad_action": {
            "name": "bad_action",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sensa-master/utils/dict.py": {
        "uniform_dict_type": {
            "name": "uniform_dict_type",
            "location": 21,
            "return": [
                "type"
            ],
            "arguments": {
                "dictionary": [
                    "Dict[(K, A)]"
                ]
            }
        },
        "only_keys": {
            "name": "only_keys",
            "location": 31,
            "return": [
                "Dict[(K, A)]"
            ],
            "arguments": {
                "dict": [
                    "Dict[(K, A)]"
                ],
                "keys": [
                    "Iterable[K]"
                ]
            }
        },
        "dict_to_function": {
            "name": "dict_to_function",
            "location": 36,
            "return": [
                "typing.Callable[, ]",
                "bool",
                "mypy.types.CallableType",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "dictionary": [
                    "Dict[(K, A)]"
                ]
            }
        },
        "assert_dict_is_uniform": {
            "name": "assert_dict_is_uniform",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "dictionary": [
                    "Dict[(K, Any)]"
                ]
            }
        }
    },
    "sensa-master/utils/either.py": {
        "either": {
            "name": "either",
            "location": 42,
            "return": [
                "R"
            ],
            "arguments": {
                "e": [
                    "Either[(A, B)]"
                ],
                "l_fn": [
                    "bool",
                    "str",
                    "None",
                    "mypy.types.Type",
                    "mypy.types.CallableType",
                    "Optional[str]",
                    "int"
                ],
                "r_fn": [
                    "bool",
                    "str",
                    "None",
                    "mypy.types.Type",
                    "mypy.types.CallableType",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "Left.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "left": [
                    "Left"
                ],
                "val": [
                    "int",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "str",
                    "Union[str, int]",
                    "bool"
                ]
            }
        },
        "Left.is_left": {
            "name": "is_left",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "left": [
                    "str",
                    "int"
                ]
            }
        },
        "Left.is_right": {
            "name": "is_right",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "left": [
                    "str",
                    "int"
                ]
            }
        },
        "Left.err_val": {
            "name": "err_val",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "left": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Left.res_val": {
            "name": "res_val",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "left": [
                    "bool",
                    "str",
                    "list",
                    "list[]",
                    "IO[str]",
                    "typing.IO"
                ]
            }
        },
        "Left.__str__": {
            "name": "__str__",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "left": [
                    "Left"
                ]
            }
        },
        "Right.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "right": [
                    "Right"
                ],
                "val": [
                    "int",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "str",
                    "Union[str, int]",
                    "bool"
                ]
            }
        },
        "Right.is_left": {
            "name": "is_left",
            "location": 32,
            "return": [
                "bool"
            ],
            "arguments": {
                "right": [
                    "str",
                    "int"
                ]
            }
        },
        "Right.is_right": {
            "name": "is_right",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "right": [
                    "str",
                    "int"
                ]
            }
        },
        "Right.err_val": {
            "name": "err_val",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "right": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Right.res_val": {
            "name": "res_val",
            "location": 38,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "right": [
                    "bool",
                    "str",
                    "list",
                    "list[]",
                    "IO[str]",
                    "typing.IO"
                ]
            }
        },
        "Right.__str__": {
            "name": "__str__",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "right": [
                    "Right"
                ]
            }
        }
    },
    "sensa-master/utils/functools.py": {
        "const": {
            "name": "const",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "id_": {
            "name": "id_",
            "location": 13,
            "return": [
                "int",
                "str",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int"
                ]
            }
        },
        "chain": {
            "name": "chain",
            "location": 19,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {}
        },
        "sequence": {
            "name": "sequence",
            "location": 34,
            "return": [
                "Callable[([], Any)]"
            ],
            "arguments": {}
        },
        "put": {
            "name": "put",
            "location": 43,
            "return": [
                "Optional[int]",
                "Iterable[int]",
                "int"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str"
                ],
                "fn": [
                    "float",
                    "str"
                ]
            }
        },
        "iterate": {
            "name": "iterate",
            "location": 50,
            "return": [
                "Iterable[A]"
            ],
            "arguments": {
                "f": [
                    "Callable",
                    "Dict[str, str]",
                    "str"
                ],
                "seed": [
                    "A"
                ]
            }
        },
        "take": {
            "name": "take",
            "location": 57,
            "return": [
                "List[A]"
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "iterable": [
                    "Iterable[A]"
                ]
            }
        },
        "chain.chained": {
            "name": "chained",
            "location": 25,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "sequence.chained": {
            "name": "chained",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "sensa-master/utils/imgui.py": {
        "get_mouse_position": {
            "name": "get_mouse_position",
            "location": 11,
            "return": [
                "utils.types.IO_"
            ],
            "arguments": {}
        },
        "get_window_rect": {
            "name": "get_window_rect",
            "location": 15,
            "return": [
                "utils.types.IO_[utils.rect.Rect]"
            ],
            "arguments": {}
        },
        "get_window_content_rect": {
            "name": "get_window_content_rect",
            "location": 24,
            "return": [
                "utils.types.IO_[utils.rect.Rect]"
            ],
            "arguments": {}
        },
        "get_item_rect": {
            "name": "get_item_rect",
            "location": 34,
            "return": [
                "utils.types.IO_[utils.rect.Rect]"
            ],
            "arguments": {}
        },
        "add_rect_coords": {
            "name": "add_rect_coords",
            "location": 38,
            "return": [
                "utils.types.IO_[None]"
            ],
            "arguments": {
                "draw_list": [
                    "bool"
                ],
                "top_left": [
                    "Union[int, \"BitVec\"]",
                    "int"
                ],
                "bottom_right": [
                    "Union[int, \"BitVec\"]",
                    "int"
                ],
                "color": [
                    "int",
                    "List[List[int]]",
                    "list[list[int]]",
                    "list",
                    "list[]"
                ]
            }
        },
        "add_rect": {
            "name": "add_rect",
            "location": 50,
            "return": [
                "utils.types.IO_[None]"
            ],
            "arguments": {
                "draw_list": [
                    "list[]",
                    "list",
                    "list[float]",
                    "List[float]",
                    "int",
                    "list[list[typing.Any]]",
                    "Iterable[str]",
                    "list[list[T]]",
                    "List[List[Any]]",
                    "List[List[T]]"
                ],
                "rect": [
                    "utils.rect.Rect"
                ],
                "color": [
                    "list[]",
                    "list",
                    "list[float]",
                    "List[float]",
                    "int",
                    "list[list[typing.Any]]",
                    "Iterable[str]",
                    "list[list[T]]",
                    "List[List[Any]]",
                    "List[List[T]]"
                ]
            }
        }
    },
    "sensa-master/utils/maybe.py": {
        "Nothing.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "nothing": [
                    "Nothing"
                ]
            }
        },
        "Nothing.is_nothing": {
            "name": "is_nothing",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "nothing": [
                    "str",
                    "int"
                ]
            }
        },
        "Nothing.is_Nothing": {
            "name": "is_Nothing",
            "location": 18,
            "return": [
                "bool"
            ],
            "arguments": {
                "nothing": [
                    "Nothing"
                ]
            }
        },
        "Nothing.is_just": {
            "name": "is_just",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "nothing": [
                    "str",
                    "int"
                ]
            }
        },
        "Nothing.is_Just": {
            "name": "is_Just",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "nothing": [
                    "Nothing"
                ]
            }
        },
        "Nothing.val": {
            "name": "val",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "nothing": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Nothing.get_val": {
            "name": "get_val",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "nothing": [
                    "Nothing"
                ]
            }
        },
        "Nothing.map": {
            "name": "map",
            "location": 30,
            "return": [
                "Nothing"
            ],
            "arguments": {
                "nothing": [
                    "Nothing"
                ],
                "fn": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Nothing.__rshift__": {
            "name": "__rshift__",
            "location": 33,
            "return": [
                "Nothing"
            ],
            "arguments": {
                "nothing": [
                    "Nothing"
                ],
                "fn": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Nothing.__repr__": {
            "name": "__repr__",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "just": [
                    "Nothing"
                ]
            }
        },
        "Just.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "just": [
                    "Just"
                ],
                "val": [
                    "int",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "str",
                    "Union[str, int]",
                    "bool"
                ]
            }
        },
        "Just.is_nothing": {
            "name": "is_nothing",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "just": [
                    "str",
                    "int"
                ]
            }
        },
        "Just.is_Nothing": {
            "name": "is_Nothing",
            "location": 46,
            "return": [
                "bool"
            ],
            "arguments": {
                "just": [
                    "Just"
                ]
            }
        },
        "Just.is_just": {
            "name": "is_just",
            "location": 49,
            "return": [
                "bool"
            ],
            "arguments": {
                "just": [
                    "str",
                    "int"
                ]
            }
        },
        "Just.is_Just": {
            "name": "is_Just",
            "location": 51,
            "return": [
                "bool"
            ],
            "arguments": {
                "just": [
                    "Just"
                ]
            }
        },
        "Just.val": {
            "name": "val",
            "location": 54,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "just": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Just.get_val": {
            "name": "get_val",
            "location": 56,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "just": [
                    "Just"
                ]
            }
        },
        "Just.map": {
            "name": "map",
            "location": 58,
            "return": [
                "Just"
            ],
            "arguments": {
                "just": [
                    "Just"
                ],
                "fn": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Just.__rshift__": {
            "name": "__rshift__",
            "location": 61,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "just": [
                    "Just"
                ],
                "fn": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Just.__repr__": {
            "name": "__repr__",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "just": [
                    "Just"
                ]
            }
        }
    },
    "sensa-master/utils/misc.py": {
        "impossible": {
            "name": "impossible",
            "location": 13,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "limit_upper": {
            "name": "limit_upper",
            "location": 20,
            "return": [
                "A"
            ],
            "arguments": {
                "x": [
                    "A"
                ],
                "high": [
                    "A"
                ]
            }
        },
        "limit_lower": {
            "name": "limit_lower",
            "location": 23,
            "return": [
                "A"
            ],
            "arguments": {
                "x": [
                    "A"
                ],
                "low": [
                    "A"
                ]
            }
        },
        "clamp": {
            "name": "clamp",
            "location": 26,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "low": [
                    "int"
                ],
                "x": [
                    "int"
                ],
                "high": [
                    "int"
                ]
            }
        },
        "point_subtract_offset": {
            "name": "point_subtract_offset",
            "location": 32,
            "return": [
                "int",
                "List[int]",
                "str"
            ],
            "arguments": {
                "a": [
                    "int",
                    "imgui.Vec2",
                    "str",
                    "typing.Sequence[int]",
                    "Sequence[int]"
                ],
                "offset": [
                    "int",
                    "imgui.Vec2",
                    "str",
                    "typing.Sequence[int]",
                    "Sequence[int]"
                ]
            }
        },
        "point_offset": {
            "name": "point_offset",
            "location": 35,
            "return": [
                "int",
                "List[int]",
                "str"
            ],
            "arguments": {
                "a": [
                    "int",
                    "imgui.Vec2",
                    "str",
                    "typing.Sequence[int]",
                    "Sequence[int]"
                ],
                "offset": [
                    "int",
                    "imgui.Vec2",
                    "str",
                    "typing.Sequence[int]",
                    "Sequence[int]"
                ]
            }
        },
        "range_incl": {
            "name": "range_incl",
            "location": 40,
            "return": [
                "Iterable[int]"
            ],
            "arguments": {
                "first": [
                    "int"
                ],
                "last": [
                    "int"
                ],
                "step": [
                    "int"
                ]
            }
        },
        "get_in": {
            "name": "get_in",
            "location": 50,
            "return": [
                "B"
            ],
            "arguments": {
                "path": [
                    "Iterable"
                ],
                "x": [
                    "A"
                ]
            }
        }
    },
    "sensa-master/utils/pmap.py": {
        "invert": {
            "name": "invert",
            "location": 19,
            "return": [
                "utils.types.PMap_[(B, A)]"
            ],
            "arguments": {
                "d": [
                    "utils.types.PMap_[(A, B)]"
                ]
            }
        },
        "matches": {
            "name": "matches",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "map": [
                    "utils.types.PMap_[(K, A)]"
                ]
            }
        }
    },
    "sensa-master/utils/pred.py": {
        "assert_all": {
            "name": "assert_all",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "xs": [
                    "Sequence[A]"
                ],
                "pred": [
                    "str",
                    "int",
                    "Match[str]",
                    "typing.Match"
                ],
                "msg": [
                    "str"
                ]
            }
        },
        "one_is_true_of": {
            "name": "one_is_true_of",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "A"
                ],
                "preds": [
                    "Sequence"
                ]
            }
        },
        "one_is_true": {
            "name": "one_is_true",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "bools": [
                    "Sequence[bool]"
                ]
            }
        }
    },
    "sensa-master/utils/rect.py": {
        "rect_width": {
            "name": "rect_width",
            "location": 7,
            "return": [
                "float"
            ],
            "arguments": {
                "rect": [
                    "Rect"
                ]
            }
        },
        "rect_height": {
            "name": "rect_height",
            "location": 11,
            "return": [
                "float"
            ],
            "arguments": {
                "rect": [
                    "Rect"
                ]
            }
        },
        "rect_center": {
            "name": "rect_center",
            "location": 15,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "rect": [
                    "Rect"
                ]
            }
        },
        "is_in_rect": {
            "name": "is_in_rect",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {
                "point": [
                    "imgui.Vec2"
                ],
                "rect": [
                    "Rect"
                ]
            }
        }
    },
    "sensa-master/utils/sequence.py": {
        "is_sequence_unique": {
            "name": "is_sequence_unique",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "seq": [
                    "Sequence[A]"
                ]
            }
        },
        "is_sequence_uniform": {
            "name": "is_sequence_uniform",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "seq": [
                    "Sequence"
                ]
            }
        },
        "sequence_type": {
            "name": "sequence_type",
            "location": 34,
            "return": [
                "utils.either.Either[(int, type)]"
            ],
            "arguments": {
                "seq": [
                    "Sequence"
                ]
            }
        },
        "uniform_sequence_type": {
            "name": "uniform_sequence_type",
            "location": 53,
            "return": [
                "type"
            ],
            "arguments": {
                "seq": [
                    "Sequence[A]"
                ]
            }
        },
        "assert_sequence_is_uniform": {
            "name": "assert_sequence_is_uniform",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "seq": [
                    "Sequence[A]"
                ]
            }
        },
        "optional_index": {
            "name": "optional_index",
            "location": 75,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "seq": [
                    "Sequence[A]"
                ],
                "of": [
                    "A"
                ]
            }
        },
        "parts_of_len": {
            "name": "parts_of_len",
            "location": 91,
            "return": [
                "List[List[A]]"
            ],
            "arguments": {
                "xs": [
                    "Sequence[A]"
                ],
                "len": [
                    "int"
                ]
            }
        }
    },
    "sensa-master/utils/tuple.py": {
        "set_in_tuple": {
            "name": "set_in_tuple",
            "location": 14,
            "return": [
                "tuple"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "val": [
                    "B"
                ],
                "tup": [
                    "tuple"
                ]
            }
        },
        "modify_in_tuple": {
            "name": "modify_in_tuple",
            "location": 27,
            "return": [
                "tuple"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "fn": [
                    "str"
                ],
                "tup": [
                    "tuple"
                ]
            }
        },
        "is_namedtuple": {
            "name": "is_namedtuple",
            "location": 53,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "A"
                ]
            }
        }
    },
    "sensa-master/utils/types.py": {},
    "sensa-master/utils/__init__.py": {}
}
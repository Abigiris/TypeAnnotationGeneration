{
    "sensa-master/app.py": {
        "sensa_app_init": {
            "name": "sensa_app_init",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "app_state_init": {
            "name": "app_state_init",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "draw_and_log_actions": {
            "name": "draw_and_log_actions",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "sensa_post_frame": {
            "name": "sensa_post_frame",
            "location": 211,
            "return": [
                "Optional[str]"
            ],
            "arguments": {}
        },
        "update_state_with_actions_and_run_effects": {
            "name": "update_state_with_actions_and_run_effects",
            "location": 259,
            "return": [
                "dict",
                "Callable"
            ],
            "arguments": {
                "user_actions": [
                    "Optional[int]",
                    "str",
                    "bool"
                ]
            }
        },
        "handle_app_state_effect": {
            "name": "handle_app_state_effect",
            "location": 579,
            "return": [
                "None"
            ],
            "arguments": {
                "command": [
                    "str",
                    "Dict[str, List[str]]",
                    "int"
                ]
            }
        },
        "update_link_selection": {
            "name": "update_link_selection",
            "location": 635,
            "return": [
                "LinkSelection",
                "Dict",
                "bytes",
                "Dict[str,str]",
                "Optional[Dict[str,str]]",
                "str"
            ],
            "arguments": {
                "state": [
                    "str",
                    "Union[str,Callable[,str]]",
                    "Dict",
                    "Callable[,str]",
                    "Optional[UtilityFunction]",
                    "None"
                ],
                "graph": [
                    "Dict[str,str]",
                    "int",
                    "raiden.utils.List[str]"
                ],
                "action": [
                    "Optional[Any]",
                    "str",
                    "Any",
                    "None"
                ]
            }
        },
        "AppRunnerAction.Reload": {
            "name": "Reload",
            "location": 563,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "AppRunnerAction.Exit": {
            "name": "Exit",
            "location": 564,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "AppRunnerEffect.Reload": {
            "name": "Reload",
            "location": 567,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "AppRunnerEffect.Exit": {
            "name": "Exit",
            "location": 568,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "AppControl.Success": {
            "name": "Success",
            "location": 572,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "AppControl.Crash": {
            "name": "Crash",
            "location": 573,
            "return": [
                "None"
            ],
            "arguments": {
                "cause": [
                    "AppControl"
                ],
                "origin": [
                    "Exception",
                    "str",
                    "int",
                    "List[str]",
                    "bool"
                ],
                "exception": [
                    "Exception",
                    "str",
                    "int",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "AppControl.DoApp": {
            "name": "DoApp",
            "location": 574,
            "return": [
                "None"
            ],
            "arguments": {
                "command": [
                    "AppControl"
                ]
            }
        },
        "AppControl.DoAppRunner": {
            "name": "DoAppRunner",
            "location": 575,
            "return": [
                "None"
            ],
            "arguments": {
                "command": [
                    "AppControl"
                ]
            }
        },
        "LinkSelectionAction.ClickOutput": {
            "name": "ClickOutput",
            "location": 629,
            "return": [
                "None"
            ],
            "arguments": {
                "slot": [
                    "LinkSelectionAction"
                ]
            }
        },
        "LinkSelectionAction.ClickInput": {
            "name": "ClickInput",
            "location": 630,
            "return": [
                "None"
            ],
            "arguments": {
                "slot": [
                    "LinkSelectionAction"
                ]
            }
        },
        "LinkSelectionAction.Clear": {
            "name": "Clear",
            "location": 631,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "draw.right_pad": {
            "name": "right_pad",
            "location": 739,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes"
                ],
                "limit": [
                    "int",
                    "str",
                    "Union[int, Sequence[Any]]",
                    "Union[str, bytes]"
                ]
            }
        }
    },
    "sensa-master/debug_util.py": {
        "debug_initialize": {
            "name": "debug_initialize",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "debug_log_time": {
            "name": "debug_log_time",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "point_id": [
                    "List[str]",
                    "str",
                    "Union[list, str]",
                    "List[List[Any]]",
                    "int"
                ],
                "time_s": [
                    "int",
                    "Optional[Union[\"Cite\", str]]",
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[Dict[str, str]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "debug_log": {
            "name": "debug_log",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Sequence[utils.types.A]",
                    "List[str]"
                ],
                "val": [
                    "str",
                    "Sequence[utils.types.A]",
                    "List[str]"
                ]
            }
        },
        "debug_log_dict": {
            "name": "debug_log_dict",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Sequence[utils.types.A]",
                    "List[str]"
                ],
                "dictionary": [
                    "str",
                    "Sequence[utils.types.A]",
                    "List[str]"
                ]
            }
        },
        "debug_log_seq": {
            "name": "debug_log_seq",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Sequence[utils.types.A]",
                    "List[str]"
                ],
                "seq": [
                    "str",
                    "Sequence[utils.types.A]",
                    "List[str]"
                ]
            }
        },
        "debug_log_crash": {
            "name": "debug_log_crash",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "origin": [
                    "str",
                    "Exception",
                    "Dict[str, Any]",
                    "Iterator[Tuple[Any, Any]]",
                    "List[str]"
                ],
                "cause": [
                    "str",
                    "Exception",
                    "Dict[str, Any]",
                    "Iterator[Tuple[Any, Any]]",
                    "List[str]"
                ],
                "exception": [
                    "str",
                    "Exception",
                    "Dict[str, Any]",
                    "Iterator[Tuple[Any, Any]]",
                    "List[str]"
                ]
            }
        },
        "debug_window": {
            "name": "debug_window",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "debug_post_frame": {
            "name": "debug_post_frame",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_debug_clear_times": {
            "name": "_debug_clear_times",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "show_avg_durations_of_recorded_ranges": {
            "name": "show_avg_durations_of_recorded_ranges",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "show_durations": {
            "name": "show_durations",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "durations_ms": [
                    "str",
                    "dict",
                    "Dict[str, List]"
                ]
            }
        },
        "default_key_format_string_for_len": {
            "name": "default_key_format_string_for_len",
            "location": 224,
            "return": [
                "str"
            ],
            "arguments": {
                "len": [
                    "int",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "debug_set_type_format_string": {
            "name": "debug_set_type_format_string",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "t": [
                    "str",
                    "type",
                    "List[str]"
                ],
                "fmt_string": [
                    "str",
                    "type",
                    "List[str]"
                ]
            }
        },
        "show_varied_dict": {
            "name": "show_varied_dict",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "dictionary": [
                    "str",
                    "Dict[str, str]"
                ],
                "key_format_string_for_len": [
                    "str",
                    "Dict[str, str]"
                ],
                "value_format_string_for_type": [
                    "str",
                    "Dict[str, str]"
                ],
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "varied_dict_to_str": {
            "name": "varied_dict_to_str",
            "location": 261,
            "return": [
                "str"
            ],
            "arguments": {
                "dictionary": [
                    "str",
                    "float",
                    "int"
                ],
                "key_format_string_for_len": [
                    "str",
                    "Dict[str, Any]",
                    "Union[dict, str]",
                    "Type",
                    "type"
                ],
                "value_format_string_for_type": [
                    "str",
                    "Dict[str, Any]",
                    "Union[dict, str]",
                    "Type",
                    "type"
                ]
            }
        },
        "show_uniform_dict": {
            "name": "show_uniform_dict",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "dictionary": [
                    "str",
                    "Dict[str, utils.types.A]",
                    "Optional[str]"
                ],
                "key_format_string_for_len": [
                    "str",
                    "Dict[str, utils.types.A]",
                    "Optional[str]"
                ],
                "value_format_string": [
                    "str",
                    "Dict[str, utils.types.A]",
                    "Optional[str]"
                ]
            }
        },
        "uniform_dict_to_str": {
            "name": "uniform_dict_to_str",
            "location": 316,
            "return": [
                "str"
            ],
            "arguments": {
                "dictionary": [
                    "str",
                    "Optional[str]",
                    "Optional[Pattern]"
                ],
                "key_format_string_for_len": [
                    "str",
                    "Optional[str]"
                ],
                "value_format_string": [
                    "str",
                    "Dict[str, utils.types.A]",
                    "Optional[str]",
                    "utils.types.Fun[[int], str]"
                ]
            }
        },
        "show_sequence": {
            "name": "show_sequence",
            "location": 342,
            "return": [
                "None"
            ],
            "arguments": {
                "seq": [
                    "str",
                    "bool"
                ],
                "name": [
                    "str",
                    "Optional[Union[Any, Any]]",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "sequence_to_str": {
            "name": "sequence_to_str",
            "location": 353,
            "return": [
                "str"
            ],
            "arguments": {
                "seq": [
                    "str",
                    "bool",
                    "Type",
                    "Optional[List[str]]"
                ],
                "value_format_string": [
                    "str"
                ]
            }
        },
        "name_and_multiline_str": {
            "name": "name_and_multiline_str",
            "location": 369,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Union[None, int, str]",
                    "Optional[str]"
                ],
                "multiline_str": [
                    "str",
                    "Union[None, int, str]",
                    "Optional[str]"
                ]
            }
        },
        "indent_str": {
            "name": "indent_str",
            "location": 373,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str"
                ],
                "indent": [
                    "str",
                    "bool"
                ]
            }
        },
        "indent_multiline_str": {
            "name": "indent_multiline_str",
            "location": 379,
            "return": [
                "str"
            ],
            "arguments": {
                "multiline_str": [
                    "str",
                    "list",
                    "List[str]"
                ],
                "indent": [
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "logged_times_to_durations": {
            "name": "logged_times_to_durations",
            "location": 388,
            "return": [
                "collections.OrderedDict"
            ],
            "arguments": {
                "fresh_logged_times": [
                    "dict",
                    "django.utils.safestring.SafeText",
                    "Dict[str, Any]"
                ]
            }
        },
        "update_stored_durations": {
            "name": "update_stored_durations",
            "location": 403,
            "return": [
                "list"
            ],
            "arguments": {
                "durations_ms": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ],
                "fresh_logged_durations": [
                    "Dict[str, Any]",
                    "dict",
                    "Set[str]",
                    "List[str]",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, str]"
                ]
            }
        },
        "average_durations": {
            "name": "average_durations",
            "location": 438,
            "return": [
                "Dict[(Any, float)]"
            ],
            "arguments": {
                "range_duration_histories_ms": [
                    "List[str]",
                    "str",
                    "Counter[str]",
                    "Sequence[str]"
                ]
            }
        },
        "is_namedtuple": {
            "name": "is_namedtuple",
            "location": 452,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "Dict[str, Any]",
                    "int",
                    "Sequence",
                    "T",
                    "Optional[bool]"
                ]
            }
        },
        "is_union": {
            "name": "is_union",
            "location": 454,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "Dict[str, Any]",
                    "int",
                    "Sequence",
                    "T",
                    "Optional[bool]"
                ]
            }
        },
        "is_dictlike": {
            "name": "is_dictlike",
            "location": 456,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "Dict[str, Any]",
                    "int",
                    "Sequence",
                    "T",
                    "Optional[bool]"
                ]
            }
        },
        "is_not_dictlike": {
            "name": "is_not_dictlike",
            "location": 457,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "Dict[str, Any]",
                    "int",
                    "Sequence",
                    "T",
                    "Optional[bool]"
                ]
            }
        },
        "is_mapping": {
            "name": "is_mapping",
            "location": 459,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "Dict[str, Any]",
                    "int",
                    "Sequence",
                    "T",
                    "Optional[bool]"
                ]
            }
        },
        "is_not_mapping": {
            "name": "is_not_mapping",
            "location": 460,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "Dict[str, Any]",
                    "int",
                    "Sequence",
                    "T",
                    "Optional[bool]"
                ]
            }
        },
        "to_dictlike": {
            "name": "to_dictlike",
            "location": 462,
            "return": [
                "Union[(collections.OrderedDict, _T0)]"
            ],
            "arguments": {
                "x": [
                    "list",
                    "int",
                    "snorkel.types.DataPoint"
                ]
            }
        },
        "order_and_stringify_keys": {
            "name": "order_and_stringify_keys",
            "location": 484,
            "return": [
                "Union[(collections.OrderedDict, _T0)]"
            ],
            "arguments": {
                "d": [
                    "dict",
                    "raiden.utils.List[str]",
                    "List[str]",
                    "bytes",
                    "List[int]",
                    "list"
                ]
            }
        },
        "stringify_ordered_dict_keys": {
            "name": "stringify_ordered_dict_keys",
            "location": 497,
            "return": [
                "collections.OrderedDict[(str, Any)]"
            ],
            "arguments": {
                "d": [
                    "Dict[str, Any]",
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "order_dict_by_key": {
            "name": "order_dict_by_key",
            "location": 500,
            "return": [
                "collections.OrderedDict"
            ],
            "arguments": {
                "d": [
                    "Dict[str, utils.types.A]",
                    "dict",
                    "Dict[str, Any]",
                    "Callable",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "sensa-master/eeg_signal.py": {
        "Signal.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "sig": [
                    "Signal"
                ],
                "signal_info": [
                    "str",
                    "Dict[str,Any]",
                    "bool"
                ],
                "data": [
                    "bytes",
                    "Tuple",
                    "str",
                    "Optional[List[Any]]",
                    "List[Any]",
                    "None"
                ]
            }
        },
        "Signal.samples_per_second": {
            "name": "samples_per_second",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "sig": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Signal.sampling_interval": {
            "name": "sampling_interval",
            "location": 37,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "sig": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Signal.time_between_samples": {
            "name": "time_between_samples",
            "location": 41,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "sig": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "Signal.__repr__": {
            "name": "__repr__",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "sig": [
                    "Signal"
                ]
            }
        }
    },
    "sensa-master/eff.py": {
        "run_eff": {
            "name": "run_eff",
            "location": 75,
            "return": [
                "Tuple[(Any, Dict[(str, Any)])]"
            ],
            "arguments": {
                "comp": [
                    "str",
                    "raiden.utils.Optional[str]",
                    "List[Callable]"
                ]
            }
        },
        "effectful": {
            "name": "effectful",
            "location": 98,
            "return": [
                "int",
                "str",
                "Optional[str]",
                "Exception",
                "Sequence[T]"
            ],
            "arguments": {
                "f": [
                    "int",
                    "T",
                    "Exception",
                    "Sequence[T]"
                ]
            }
        },
        "is_decorated_generator_coroutine": {
            "name": "is_decorated_generator_coroutine",
            "location": 121,
            "return": [
                "bool",
                "List[int]",
                "Iterable[str]",
                "str"
            ],
            "arguments": {
                "f": [
                    "int",
                    "str",
                    "Tuple",
                    "float"
                ]
            }
        },
        "get_id": {
            "name": "get_id",
            "location": 135,
            "return": [
                "coroutine"
            ],
            "arguments": {}
        },
        "get_signal_id": {
            "name": "get_signal_id",
            "location": 144,
            "return": [
                "coroutine"
            ],
            "arguments": {}
        },
        "emit": {
            "name": "emit",
            "location": 153,
            "return": [
                "Coroutine[(Any, Any, None)]"
            ],
            "arguments": {
                "action": [
                    "Dict",
                    "T"
                ]
            }
        },
        "emit_effect": {
            "name": "emit_effect",
            "location": 160,
            "return": [
                "Coroutine[(Any, Any, None)]"
            ],
            "arguments": {
                "cmd": [
                    "str",
                    "List",
                    "Tuple",
                    "Callable[,None]"
                ]
            }
        },
        "Eff.__class_getitem__": {
            "name": "__class_getitem__",
            "location": 36,
            "return": [
                "_Eff"
            ],
            "arguments": {
                "cls": [
                    "Eff"
                ],
                "items": [
                    "Dict",
                    "Dict[str,str]",
                    "int",
                    "Dict[str,Any]"
                ]
            }
        },
        "enable_class_getitem.__getitem__": {
            "name": "__getitem__",
            "location": 29,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[int]",
                    "bool",
                    "complex",
                    "bytes"
                ],
                "item": [
                    "str",
                    "Optional[int]",
                    "complex",
                    "int",
                    "bytes",
                    "bool",
                    "None"
                ]
            }
        }
    },
    "sensa-master/eff_old.py": {
        "mk_get_id": {
            "name": "mk_get_id",
            "location": 39,
            "return": [
                "Callable[([], Any)]"
            ],
            "arguments": {
                "state_dict": [
                    "Dict[str,Any]",
                    "str",
                    "bool",
                    "List[T]",
                    "raiden.utils.List[raiden.transfer.state.NettingChannelState]"
                ]
            }
        },
        "mk_emit_effect": {
            "name": "mk_emit_effect",
            "location": 46,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "state_dict": [
                    "Dict[str,object]",
                    "bool",
                    "Optional[IO[bytes]]",
                    "IO",
                    "None"
                ]
            }
        },
        "mk_get_signal_id": {
            "name": "mk_get_signal_id",
            "location": 53,
            "return": [
                "Callable[([], Any)]"
            ],
            "arguments": {
                "state_dict": [
                    "Dict[str,Any]",
                    "bool",
                    "str",
                    "Optional[Any]",
                    "Any",
                    "int",
                    "None"
                ]
            }
        },
        "mk_emit": {
            "name": "mk_emit",
            "location": 60,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "state_dict": [
                    "Dict[str,object]",
                    "bool",
                    "Optional[IO[bytes]]",
                    "IO",
                    "None"
                ]
            }
        },
        "builtins_flag_for_effect_type": {
            "name": "builtins_flag_for_effect_type",
            "location": 97,
            "return": [
                "str"
            ],
            "arguments": {
                "eff_t": [
                    "float",
                    "list",
                    "bool"
                ]
            }
        },
        "run_eff": {
            "name": "run_eff",
            "location": 102,
            "return": [
                "Callable"
            ],
            "arguments": {
                "f": [
                    "Dict[str,Any]",
                    "Callable",
                    "List"
                ]
            }
        },
        "is_in_eff": {
            "name": "is_in_eff",
            "location": 166,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "all_eff_operations_present": {
            "name": "all_eff_operations_present",
            "location": 169,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "eff_operation": {
            "name": "eff_operation",
            "location": 177,
            "return": [
                "bool",
                "bytes",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "get_signal_ids": {
            "name": "get_signal_ids",
            "location": 192,
            "return": [
                "list"
            ],
            "arguments": {
                "n": [
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        },
        "get_ids": {
            "name": "get_ids",
            "location": 203,
            "return": [
                "list"
            ],
            "arguments": {
                "n": [
                    "int",
                    "float"
                ]
            }
        },
        "f": {
            "name": "f",
            "location": 215,
            "return": [
                "dict"
            ],
            "arguments": {}
        },
        "f2": {
            "name": "f2",
            "location": 222,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {}
        },
        "g": {
            "name": "g",
            "location": 229,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Union[Dict, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "key": [
                    "str",
                    "int"
                ]
            }
        },
        "mk_get_id._get_id": {
            "name": "_get_id",
            "location": 40,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "mk_emit_effect._emit_effect": {
            "name": "_emit_effect",
            "location": 47,
            "return": [
                "Eff[None]",
                "None"
            ],
            "arguments": {
                "effect": [
                    "dict"
                ]
            }
        },
        "mk_get_signal_id._get_signal_id": {
            "name": "_get_signal_id",
            "location": 54,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "mk_emit._emit": {
            "name": "_emit",
            "location": 61,
            "return": [
                "Eff[None]",
                "None"
            ],
            "arguments": {
                "action": [
                    "bool",
                    "Callable",
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]",
                    "dict"
                ]
            }
        },
        "run_eff.result_fn": {
            "name": "result_fn",
            "location": 113,
            "return": [
                "Tuple",
                "bool",
                "str",
                "int",
                "Hashable",
                "IO[str]"
            ],
            "arguments": {}
        },
        "effectful": {
            "name": "effectful",
            "location": 143,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {}
        },
        "effectful.effectful_decorator": {
            "name": "effectful_decorator",
            "location": 145,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "f": [
                    "Callable[[A], B]",
                    "Iterable[str]",
                    "Callable[..., A]",
                    "Callable",
                    "Iterable[A]",
                    "T"
                ]
            }
        },
        "effectful.effectful_decorator.wrapped": {
            "name": "wrapped",
            "location": 148,
            "return": [
                "str",
                "Iterable[str]"
            ],
            "arguments": {}
        }
    },
    "sensa-master/epoched_signal.py": {},
    "sensa-master/files.py": {
        "load_edf": {
            "name": "load_edf",
            "location": 67,
            "return": [
                "Dict[(Any, eeg_signal.Signal)]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "FileAction.Load": {
            "name": "Load",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "FileAction"
                ]
            }
        },
        "FileEffect.Load": {
            "name": "Load",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "FileEffect"
                ]
            }
        }
    },
    "sensa-master/filters.py": {
        "butter_lowpass_coeffs": {
            "name": "butter_lowpass_coeffs",
            "location": 20,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "cutoff_freq": [
                    "bool",
                    "float",
                    "int",
                    "str"
                ],
                "sampling_freq": [
                    "bool",
                    "float",
                    "int",
                    "str"
                ],
                "type": [
                    "str",
                    "float",
                    "Callable[[int],Any]",
                    "Callable[int,Any]"
                ],
                "order": [
                    "int",
                    "str",
                    "float",
                    "Callable[[int],Any]"
                ]
            }
        },
        "simple_filter_raw": {
            "name": "simple_filter_raw",
            "location": 27,
            "return": [
                "str",
                "Dict",
                "Mapping[str,Sequence[str]]",
                "int",
                "Dict[str,tuple[Union[Any,Any]]]",
                "Mapping",
                "Pattern",
                "List[str]"
            ],
            "arguments": {
                "data": [
                    "Tuple[int,int]",
                    "int",
                    "Tuple[Union[int,int]]",
                    "Dict[str,Any]",
                    "Callable[[str,str],float]",
                    "Callable[str,str,float]"
                ],
                "cutoff_freq": [
                    "float",
                    "str",
                    "Union[int,float]",
                    "int"
                ],
                "sampling_freq": [
                    "float",
                    "str",
                    "Union[int,float]",
                    "int"
                ],
                "type": [
                    "float",
                    "str",
                    "Union[int,float]",
                    "int"
                ],
                "order": [
                    "int",
                    "float",
                    "str",
                    "Union[int,float]"
                ]
            }
        },
        "simple_filter": {
            "name": "simple_filter",
            "location": 32,
            "return": [
                "eeg_signal.Signal"
            ],
            "arguments": {
                "signal": [
                    "str"
                ],
                "cutoff_freq": [
                    "List[str]",
                    "int"
                ],
                "type": [
                    "List[str]",
                    "int"
                ]
            }
        }
    },
    "sensa-master/filter_box.py": {
        "eval_node": {
            "name": "eval_node",
            "location": 64,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "filter_box": [
                    "FilterBoxState"
                ]
            }
        },
        "transformation": {
            "name": "transformation",
            "location": 70,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "filter_state": [
                    "DefaultDict[int,List[int]]",
                    "str",
                    "DefaultDict"
                ]
            }
        },
        "to_node": {
            "name": "to_node",
            "location": 80,
            "return": [
                "ng.Node"
            ],
            "arguments": {
                "filter_box": [
                    "FilterBoxState"
                ]
            }
        },
        "is_filter_box_full": {
            "name": "is_filter_box_full",
            "location": 95,
            "return": [
                "bool",
                "int",
                "raiden.utils.Tuple[raiden.utils.Tuple[raiden.utils.TokenAddress, raiden.utils.ProportionalFeeAmount], ...]"
            ],
            "arguments": {
                "state": [
                    "T"
                ]
            }
        },
        "update_filter_box": {
            "name": "update_filter_box",
            "location": 112,
            "return": [
                "None",
                "bool",
                "int",
                "util.freefocus.sql.Group",
                "str"
            ],
            "arguments": {
                "filter_box_state": [
                    "Union[int,None]",
                    "int",
                    "None"
                ],
                "action": [
                    "str",
                    "Optional[\"Texte\"]"
                ]
            }
        },
        "FilterState.Filter": {
            "name": "Filter",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "filter_id": [
                    "FilterState"
                ],
                "params": [
                    "str",
                    "int",
                    "List",
                    "Optional[cmk.utils.type_defs.UserId]",
                    "None"
                ]
            }
        },
        "FilterAction.SetParam": {
            "name": "SetParam",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "id_": [
                    "FilterAction"
                ],
                "name": [
                    "str",
                    "float",
                    "bool",
                    "utils.types.Id",
                    "int"
                ],
                "value": [
                    "str",
                    "float",
                    "bool",
                    "utils.types.Id",
                    "int"
                ]
            }
        }
    },
    "sensa-master/flags.py": {},
    "sensa-master/glplot.py": {
        "generate_pleple": {
            "name": "generate_pleple",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sensa-master/imgui_glfw.py": {
        "DEFAULT_DRAW": {
            "name": "DEFAULT_DRAW",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_reloadable_imgui_app": {
            "name": "run_reloadable_imgui_app",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "app_module": [
                    "bool",
                    "str",
                    "List[str]"
                ],
                "no_reload": [
                    "Dict",
                    "Tuple"
                ]
            }
        },
        "run_imgui_glfw_app": {
            "name": "run_imgui_glfw_app",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "app_init": [
                    "str",
                    "None",
                    "float",
                    "Callable",
                    "int",
                    "bool"
                ],
                "pre_frame": [
                    "str",
                    "None",
                    "float",
                    "Callable",
                    "int",
                    "bool"
                ],
                "draw": [
                    "str",
                    "float",
                    "Callable",
                    "int",
                    "bool"
                ],
                "post_frame": [
                    "str",
                    "None",
                    "float",
                    "Callable",
                    "int",
                    "bool"
                ],
                "app_shutdown": [
                    "str",
                    "None",
                    "float",
                    "Callable",
                    "int",
                    "bool"
                ],
                "window_title": [
                    "Text",
                    "str",
                    "float",
                    "Callable",
                    "int",
                    "bool"
                ],
                "window_size": [
                    "Tuple[int]",
                    "str",
                    "float",
                    "Callable",
                    "int",
                    "bool"
                ],
                "target_framerate": [
                    "float",
                    "str",
                    "Callable",
                    "int",
                    "bool"
                ]
            }
        },
        "impl_glfw_init": {
            "name": "impl_glfw_init",
            "location": 291,
            "return": [
                "str",
                "bytes",
                "int",
                "bool"
            ],
            "arguments": {
                "window_title": [
                    "int",
                    "Optional[int]",
                    "float",
                    "None",
                    "Optional[Union[int,float]]"
                ],
                "window_size": [
                    "Tuple[Union[int,int]]",
                    "str",
                    "int",
                    "Tuple[int,int]"
                ]
            }
        },
        "run_reloadable_imgui_app.got_input": {
            "name": "got_input",
            "location": 60,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "run_imgui_glfw_app.got_input": {
            "name": "got_input",
            "location": 209,
            "return": [
                "bool",
                "str",
                "Dict",
                "Set",
                "List[str]"
            ],
            "arguments": {}
        }
    },
    "sensa-master/multisignal.py": {
        "MultiSignal.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "msig": [
                    "MultiSignal"
                ],
                "signals": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "MultiSignal.num_channels": {
            "name": "num_channels",
            "location": 14,
            "return": [
                "int",
                "Dict[str,int]",
                "str",
                "float"
            ],
            "arguments": {
                "msig": [
                    "str",
                    "Tuple[bytes]",
                    "bytes"
                ]
            }
        },
        "MultiSignal.as_column_matrix": {
            "name": "as_column_matrix",
            "location": 17,
            "return": [
                "bool"
            ],
            "arguments": {
                "msig": [
                    "MultiSignal"
                ]
            }
        },
        "MultiSignal.__repr__": {
            "name": "__repr__",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "msig": [
                    "MultiSignal"
                ]
            }
        }
    },
    "sensa-master/node_graph.py": {
        "output_slots": {
            "name": "output_slots",
            "location": 125,
            "return": [
                "Set[OutputSlotId]"
            ],
            "arguments": {
                "graph": [
                    "int"
                ]
            }
        },
        "used_output_slots": {
            "name": "used_output_slots",
            "location": 129,
            "return": [
                "set"
            ],
            "arguments": {
                "graph": [
                    "str"
                ]
            }
        },
        "input_slots": {
            "name": "input_slots",
            "location": 134,
            "return": [
                "Set[InputSlotId]"
            ],
            "arguments": {
                "graph": [
                    "int",
                    "float",
                    "Union[int,slice]",
                    "utils.Node"
                ]
            }
        },
        "filled_input_slots": {
            "name": "filled_input_slots",
            "location": 138,
            "return": [
                "set"
            ],
            "arguments": {
                "graph": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "free_input_slots": {
            "name": "free_input_slots",
            "location": 142,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "graph": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "is_input_slot_free": {
            "name": "is_input_slot_free",
            "location": 145,
            "return": [
                "bool"
            ],
            "arguments": {
                "graph": [
                    "str",
                    "int"
                ],
                "input_slot": [
                    "str",
                    "int"
                ]
            }
        },
        "is_input_slot_filled": {
            "name": "is_input_slot_filled",
            "location": 148,
            "return": [
                "bool"
            ],
            "arguments": {
                "graph": [
                    "str",
                    "int"
                ],
                "input_slot": [
                    "str",
                    "int"
                ]
            }
        },
        "parent_nodes": {
            "name": "parent_nodes",
            "location": 151,
            "return": [
                "list"
            ],
            "arguments": {
                "graph": [
                    "int",
                    "utils.types.Id",
                    "itsim.types.Address"
                ],
                "node_id": [
                    "int",
                    "utils.types.Id",
                    "itsim.types.Address"
                ]
            }
        },
        "slot_sources": {
            "name": "slot_sources",
            "location": 158,
            "return": [
                "list"
            ],
            "arguments": {
                "graph": [
                    "str",
                    "int",
                    "float",
                    "Dict",
                    "Optional[int]",
                    "None"
                ],
                "node_id": [
                    "int",
                    "str",
                    "cmk.utils.type_defs.HostName"
                ]
            }
        },
        "graph_repr": {
            "name": "graph_repr",
            "location": 169,
            "return": [
                "str"
            ],
            "arguments": {
                "graph": [
                    "Optional[Callable]",
                    "Callable",
                    "None"
                ]
            }
        },
        "apply_maybe_fn": {
            "name": "apply_maybe_fn",
            "location": 188,
            "return": [
                "Union[(utils.maybe.Just, utils.maybe.Nothing)]"
            ],
            "arguments": {
                "m_fn": [
                    "Union[int, float]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "eval_outputs": {
            "name": "eval_outputs",
            "location": 198,
            "return": [
                "bool"
            ],
            "arguments": {
                "graph": [
                    "Dict"
                ],
                "source_signals": [
                    "str",
                    "int"
                ],
                "boxes": [
                    "Mapping",
                    "int",
                    "Mapping[str,Any]",
                    "raiden.utils.BlockIdentifier"
                ]
            }
        },
        "get_inputs": {
            "name": "get_inputs",
            "location": 275,
            "return": [
                "dict"
            ],
            "arguments": {
                "graph": [
                    "Dict[utils.types.Id,List[Any]]",
                    "str",
                    "Dict[utils.types.Id,list[Any]]",
                    "int",
                    "Callable[[None],bool]",
                    "bytes",
                    "Callable[None,bool]",
                    "List[Tuple[str,Any]]",
                    "List[tuple[Union[str,Any]]]"
                ],
                "output_values": [
                    "Dict[utils.types.Id,List[Any]]",
                    "str",
                    "Dict[utils.types.Id,list[Any]]",
                    "int",
                    "Callable[[None],bool]",
                    "bytes",
                    "Callable[None,bool]",
                    "List[Tuple[str,Any]]",
                    "List[tuple[Union[str,Any]]]"
                ]
            }
        },
        "handle_graph_effect": {
            "name": "handle_graph_effect",
            "location": 412,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "graph": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "source_signals": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "boxes": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "command": [
                    "int",
                    "str",
                    "List[Tuple[int, int]]",
                    "float",
                    "Optional[str]"
                ]
            }
        },
        "GraphAction.AddNode": {
            "name": "AddNode",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "id_": [
                    "GraphAction"
                ],
                "node": [
                    "int",
                    "str",
                    "utils.types.Id",
                    "Dict",
                    "bool"
                ]
            }
        },
        "GraphAction.RemoveNode": {
            "name": "RemoveNode",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "id_": [
                    "GraphAction"
                ]
            }
        },
        "GraphAction.Connect": {
            "name": "Connect",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "source_slot": [
                    "GraphAction"
                ],
                "dest_slot": [
                    "str",
                    "Union[str,bytes]",
                    "bytes",
                    "Union[str,bytes,IO[bytes]]",
                    "IO",
                    "Optional[Tuple[Any,Any]]",
                    "Tuple[Union[Any,Any]]",
                    "None"
                ]
            }
        },
        "GraphAction.Disconnect": {
            "name": "Disconnect",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "source_slot": [
                    "GraphAction"
                ],
                "dest_slot": [
                    "str",
                    "Union[str,bytes]",
                    "bytes",
                    "Union[str,bytes,IO[bytes]]",
                    "IO",
                    "Optional[Tuple[Any,Any]]",
                    "Tuple[Union[Any,Any]]",
                    "None"
                ]
            }
        },
        "GraphEffect.EvalGraph": {
            "name": "EvalGraph",
            "location": 409,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sensa-master/persist.py": {
        "dump_all": {
            "name": "dump_all",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "objs": [
                    "Iterable[Any]",
                    "List[str]",
                    "Sequence[str]",
                    "bool",
                    "List[Dict[str, Any]]"
                ],
                "file": [
                    "str",
                    "TextIO",
                    "BinaryIO",
                    "List[str]",
                    "IO[bytes]",
                    "IO"
                ]
            }
        },
        "dump_append": {
            "name": "dump_append",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "Dict[str,int]",
                    "int"
                ],
                "file": [
                    "BinaryIO",
                    "List[str]",
                    "bytes",
                    "List[int]"
                ]
            }
        },
        "load_all": {
            "name": "load_all",
            "location": 31,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "file": [
                    "BinaryIO",
                    "str",
                    "List[str]",
                    "List[int]",
                    "TextIO"
                ]
            }
        }
    },
    "sensa-master/plot.py": {
        "eval_node": {
            "name": "eval_node",
            "location": 109,
            "return": [
                "Union[(Callable[([Any], Any)], Type[utils.maybe.Just])]"
            ],
            "arguments": {
                "plot_box_state": [
                    "PlotBoxState"
                ]
            }
        },
        "to_node": {
            "name": "to_node",
            "location": 117,
            "return": [
                "ng.Node"
            ],
            "arguments": {
                "plot_box_state": [
                    "PlotBoxState"
                ]
            }
        },
        "update_plot_box": {
            "name": "update_plot_box",
            "location": 154,
            "return": [
                "str",
                "int",
                "None",
                "List",
                "Generator[Union[Any,None,None]]",
                "Tuple",
                "Dict"
            ],
            "arguments": {
                "plot_box_state": [
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.BlockNumber"
                ],
                "action": [
                    "int",
                    "str",
                    "raiden.utils.PaymentID",
                    "types.ModuleType"
                ]
            }
        },
        "time_range_after_drag": {
            "name": "time_range_after_drag",
            "location": 330,
            "return": [
                "Union[(time_range.TimeRange, _T0)]"
            ],
            "arguments": {
                "time_range_before_drag": [
                    "Tuple",
                    "Dict",
                    "time_range.TimeRange",
                    "raiden.utils.List[RouteState]",
                    "raiden.utils.Dict",
                    "TimeRange"
                ],
                "signal": [
                    "str",
                    "int",
                    "Dict"
                ],
                "plot_draw_area": [
                    "List[float]",
                    "Dict",
                    "numpy.ndarray"
                ],
                "drag_origin": [
                    "float",
                    "numpy.ndarray"
                ],
                "drag_delta": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "numpy.array"
                ]
            }
        },
        "show_full_plot": {
            "name": "show_full_plot",
            "location": 412,
            "return": [
                "None"
            ],
            "arguments": {
                "plot_box_state": [
                    "raiden.utils.SecreHash",
                    "raiden.utils.InitiatorAddress",
                    "raiden.utils.TargetAddress",
                    "raiden.utils.TokenNetworkID",
                    "raiden.utils.FeeAmount",
                    "raiden.utils.PaymentID",
                    "raiden.utils.PaymentAmount",
                    "raiden.utils.PaymentHashInvoice"
                ],
                "signal": [
                    "bool",
                    "numpy.ndarray",
                    "int"
                ],
                "plot_draw_area": [
                    "int",
                    "str",
                    "numpy.ndarray",
                    "bool"
                ],
                "draw_list": [
                    "int",
                    "str",
                    "Dict",
                    "types.transports.ProducerT",
                    "None",
                    "raiden.utils.PrivateKey",
                    "raiden.utils.Optional[raiden.utils.Address]"
                ],
                "ui_settings": [
                    "str",
                    "numpy.ndarray",
                    "List[Any]",
                    "List[numpy.ndarray]",
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "float",
                    "int"
                ]
            }
        },
        "show_empty_plot": {
            "name": "show_empty_plot",
            "location": 594,
            "return": [
                "None"
            ],
            "arguments": {
                "plot_state": [
                    "str",
                    "bool",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]",
                    "int",
                    "None"
                ],
                "text": [
                    "str",
                    "bool",
                    "Optional[bool]",
                    "None",
                    "Mapping[Union[str,starfish.types.Coordinates],starfish.types.CoordinateValue]",
                    "Mapping"
                ],
                "plot_draw_area": [
                    "bool",
                    "utils.Rect",
                    "Callable[T,bool]",
                    "List[int]",
                    "List[E]",
                    "str",
                    "int",
                    "Callable[[Type,str],bool]",
                    "List[Entity]"
                ],
                "draw_list": [
                    "bool",
                    "utils.Rect",
                    "Callable[T,bool]",
                    "List[int]",
                    "List[E]",
                    "str",
                    "int",
                    "Callable[[Type,str],bool]",
                    "List[Entity]"
                ]
            }
        },
        "show_imgui_plot": {
            "name": "show_imgui_plot",
            "location": 603,
            "return": [
                "None"
            ],
            "arguments": {
                "plot_box_state": [
                    "float",
                    "List[D]",
                    "List[raiden.utils.ChannelID]",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.TokenNetworkRegistryAddress"
                ],
                "signal": [
                    "int",
                    "List[int]",
                    "bool",
                    "Iterable[str]"
                ],
                "width": [
                    "int",
                    "bool",
                    "utils.Rect",
                    "float"
                ],
                "height": [
                    "int",
                    "Tuple[int,int]",
                    "bool"
                ],
                "ui_settings": [
                    "str",
                    "List[int]",
                    "float",
                    "int"
                ]
            }
        },
        "slice_signal": {
            "name": "slice_signal",
            "location": 644,
            "return": [
                "str",
                "bool",
                "List",
                "int",
                "Optional[float]",
                "Dict",
                "List[Dict[str,Any]]",
                "List[None]",
                "Dict[str,str]"
            ],
            "arguments": {
                "signal": [
                    "int",
                    "Dict",
                    "eeg_signal.Signal",
                    "float",
                    "numpy.ndarray"
                ],
                "time_range": [
                    "int",
                    "float",
                    "time_range.TimeRange",
                    "bool"
                ],
                "n_points_needed": [
                    "int",
                    "None",
                    "float",
                    "Optional[int]",
                    "Collection",
                    "numpy.ndarray",
                    "Collection[int]"
                ],
                "variant": [
                    "Text",
                    "int",
                    "Type[Exception]",
                    "bool",
                    "Callable",
                    "Sequence"
                ]
            }
        },
        "amplitude": {
            "name": "amplitude",
            "location": 692,
            "return": [
                "Optional[int]",
                "utils.Node",
                "Tuple[Tuple[int, Any]]",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "data": [
                    "int",
                    "bytes",
                    "numpy.ndarray"
                ]
            }
        },
        "downsample": {
            "name": "downsample",
            "location": 700,
            "return": [
                "int",
                "Callable",
                "str",
                "List",
                "List[list[Any]]",
                "float",
                "Dict[str,Any]",
                "Dict"
            ],
            "arguments": {
                "data": [
                    "int",
                    "str",
                    "utils.types.NDArray[float]",
                    "Callable",
                    "numpy.ndarray"
                ],
                "n_samples": [
                    "int",
                    "Callable",
                    "str",
                    "bytes",
                    "utils.types.NDArray[float]",
                    "numpy.ndarray"
                ]
            }
        },
        "crude_downsample": {
            "name": "crude_downsample",
            "location": 710,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "data": [
                    "int",
                    "utils.types.NDArray[float]",
                    "numpy.ndarray",
                    "Callable"
                ],
                "n_samples": [
                    "int",
                    "Callable",
                    "utils.types.NDArray[float]",
                    "numpy.ndarray"
                ]
            }
        },
        "n_indexes_from_range": {
            "name": "n_indexes_from_range",
            "location": 731,
            "return": [
                "list"
            ],
            "arguments": {
                "first_ix": [
                    "int",
                    "float",
                    "Optional[Union[int,slice]]",
                    "str",
                    "numpy.ndarray",
                    "Collection[int]"
                ],
                "last_ix": [
                    "int",
                    "float",
                    "Optional[Union[int,slice]]",
                    "numpy.ndarray",
                    "str",
                    "List[Tuple[int,int]]"
                ],
                "n": [
                    "int",
                    "List[int]"
                ]
            }
        },
        "time_range_to_ix_range_incl": {
            "name": "time_range_to_ix_range_incl",
            "location": 761,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "time_range": [
                    "str",
                    "int",
                    "time_range.TimeRange",
                    "float",
                    "None",
                    "Optional[int]",
                    "TimeRange",
                    "bool",
                    "Union[int,float]"
                ],
                "signal": [
                    "str",
                    "int",
                    "eeg_signal.Signal"
                ]
            }
        },
        "DragState.NotDragging": {
            "name": "NotDragging",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DragState.Dragging": {
            "name": "Dragging",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "time_range_before_drag": [
                    "DragState"
                ]
            }
        },
        "DragAction.StartDrag": {
            "name": "StartDrag",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "id_": [
                    "DragAction"
                ]
            }
        },
        "DragAction.EndDrag": {
            "name": "EndDrag",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "id_": [
                    "DragAction"
                ]
            }
        },
        "PlotState.NoTimeRange": {
            "name": "NoTimeRange",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "PlotState.WithTimeRange": {
            "name": "WithTimeRange",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "time_range": [
                    "PlotState"
                ]
            }
        },
        "PlotAction.SetTimeRange": {
            "name": "SetTimeRange",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "id_": [
                    "PlotAction"
                ],
                "time_range": [
                    "int",
                    "str",
                    "utils.types.Id",
                    "time_range.TimeRange",
                    "bool"
                ]
            }
        },
        "PlotAction.SetNoTimeRange": {
            "name": "SetNoTimeRange",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "id_": [
                    "PlotAction"
                ]
            }
        }
    },
    "sensa-master/read_edf.py": {
        "read_edf": {
            "name": "read_edf",
            "location": 15,
            "return": [
                "Tuple[(Any, dict)]"
            ],
            "arguments": {
                "path": [],
                "immutable": [
                    "str",
                    "bool"
                ]
            }
        },
        "scale": {
            "name": "scale",
            "location": 91,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "physical_max": [
                    "int",
                    "Callable",
                    "str"
                ],
                "digital_max": [
                    "int",
                    "Callable",
                    "str"
                ],
                "signal": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "read_header": {
            "name": "read_header",
            "location": 102,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "data_file": [
                    "BinaryIO",
                    "str",
                    "Dict[str,str]"
                ]
            }
        },
        "read_signals": {
            "name": "read_signals",
            "location": 161,
            "return": [
                "dict"
            ],
            "arguments": {
                "data_file": [
                    "str",
                    "bytes",
                    "int",
                    "Optional[str]",
                    "Union[bytes, str]"
                ],
                "hdr": [
                    "List",
                    "str",
                    "int",
                    "Optional[int]",
                    "bool"
                ],
                "immutable": [
                    "bool",
                    "str",
                    "List"
                ]
            }
        },
        "read_header.read_n_bytes": {
            "name": "read_n_bytes",
            "location": 105,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "df": [
                    "BinaryIO",
                    "int",
                    "Tuple[bool]"
                ],
                "n": [
                    "BinaryIO",
                    "int",
                    "Tuple[bool]"
                ],
                "method": [
                    "BinaryIO",
                    "int",
                    "Tuple[bool]"
                ]
            }
        },
        "read_header.static_header": {
            "name": "static_header",
            "location": 108,
            "return": [
                "str",
                "dict",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "df": [
                    "BinaryIO",
                    "str",
                    "T",
                    "numpy.ndarray",
                    "int",
                    "bytes",
                    "Optional[Dict]"
                ],
                "hdr": [
                    "BinaryIO",
                    "str",
                    "T",
                    "numpy.ndarray",
                    "int",
                    "bytes",
                    "Optional[Dict]"
                ]
            }
        },
        "read_header.dynamic_header": {
            "name": "dynamic_header",
            "location": 121,
            "return": [
                "str",
                "dict",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "df": [
                    "bytes",
                    "int",
                    "numpy.ndarray",
                    "Dict[str, Union[int, bool]]"
                ],
                "hdr": [
                    "List[Dict]"
                ]
            }
        }
    },
    "sensa-master/reload_util.py": {
        "recursive_reload": {
            "name": "recursive_reload",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "module": [
                    "str",
                    "Optional[List[str]]",
                    "bool",
                    "List[str]",
                    "Callable[[str],Any]",
                    "None",
                    "Callable[str,Any]"
                ],
                "dir": [
                    "bool",
                    "List[str]",
                    "float",
                    "str",
                    "List",
                    "Optional[list]",
                    "None",
                    "Optional[List[Any]]",
                    "slice"
                ],
                "excluded": [
                    "Tuple",
                    "bool",
                    "List[str]",
                    "float",
                    "Optional[list]",
                    "str",
                    "Optional[List[Any]]",
                    "slice"
                ],
                "verbose": [
                    "bool",
                    "List[str]",
                    "float",
                    "Optional[list]",
                    "str",
                    "Optional[List[Any]]",
                    "slice"
                ],
                "inject_versions": [
                    "bool",
                    "List[str]",
                    "float",
                    "Optional[list]",
                    "str",
                    "Optional[List[Any]]",
                    "slice"
                ]
            }
        },
        "direct_deps": {
            "name": "direct_deps",
            "location": 109,
            "return": [
                "set"
            ],
            "arguments": {
                "module": [
                    "str"
                ],
                "dir": [
                    "Optional[List[str]]",
                    "None",
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]",
                    "Optional[bytes]",
                    "bytes"
                ]
            }
        },
        "all_deps": {
            "name": "all_deps",
            "location": 137,
            "return": [
                "set"
            ],
            "arguments": {
                "module": [
                    "int",
                    "Dict",
                    "Dict[str,Any]",
                    "float"
                ],
                "dir": [
                    "Iterable[Any]",
                    "None",
                    "float",
                    "Dict[str,Any]"
                ]
            }
        },
        "is_module_in_dir": {
            "name": "is_module_in_dir",
            "location": 148,
            "return": [
                "bool"
            ],
            "arguments": {
                "module": [
                    "str",
                    "Type",
                    "List[List[str]]",
                    "List[list[str]]"
                ],
                "directory": [
                    "str",
                    "Type",
                    "List[List[str]]",
                    "List[list[str]]"
                ]
            }
        },
        "module_dirpath": {
            "name": "module_dirpath",
            "location": 160,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {
                "module": [
                    "int",
                    "Callable",
                    "str",
                    "List[tuple[Union[str,str]]]",
                    "bool",
                    "List[Tuple[str,str]]"
                ]
            }
        },
        "module_abspath": {
            "name": "module_abspath",
            "location": 163,
            "return": [
                "Optional[pathlib.Path]"
            ],
            "arguments": {
                "module": [
                    "str"
                ]
            }
        },
        "current_module_dirpath": {
            "name": "current_module_dirpath",
            "location": 171,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {}
        },
        "current_module_abspath": {
            "name": "current_module_abspath",
            "location": 178,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {}
        },
        "union_all": {
            "name": "union_all",
            "location": 189,
            "return": [
                "Callable",
                "MutableMapping[str, Any]",
                "str",
                "bool",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "sets": [
                    "str",
                    "int",
                    "bytes",
                    "Dict[str,Any]",
                    "Dict",
                    "Union[tuple,list]",
                    "Tuple",
                    "List"
                ]
            }
        },
        "cat": {
            "name": "cat",
            "location": 193,
            "return": [
                "None",
                "Optional[T]",
                "Type",
                "str",
                "List[str]"
            ],
            "arguments": {
                "expr": [
                    "bool",
                    "List",
                    "None",
                    "str",
                    "Optional[bool]",
                    "int"
                ]
            }
        },
        "catf": {
            "name": "catf",
            "location": 201,
            "return": [
                "Callable"
            ],
            "arguments": {
                "f": [
                    "Iterable[str]",
                    "Callable",
                    "T"
                ]
            }
        },
        "all_modules": {
            "name": "all_modules",
            "location": 214,
            "return": [
                "set"
            ],
            "arguments": {
                "dir": [
                    "Optional[str]",
                    "None",
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "Optional[Union[Any,Any]]",
                    "Any",
                    "Optional[IO[bytes]]",
                    "IO",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "recursive_reload.rec_rel": {
            "name": "rec_rel",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "mod": [
                    "str",
                    "Union[str, pathlib.Path]",
                    "dict",
                    "bool"
                ],
                "current_depth": [
                    "int",
                    "str"
                ]
            }
        },
        "catf.safe_f": {
            "name": "safe_f",
            "location": 205,
            "return": [
                "None",
                "str",
                "Dict[str,Any]",
                "int"
            ],
            "arguments": {}
        }
    },
    "sensa-master/repl.py": {
        "init_state": {
            "name": "init_state",
            "location": 9,
            "return": [
                "str",
                "bool",
                "None",
                "Set[int]",
                "Tuple[Union[str,str]]",
                "raiden.utils.PaymentNetworkID",
                "raiden.utils.TokenAddress",
                "int",
                "app.models.Tweet"
            ],
            "arguments": {}
        },
        "group_by": {
            "name": "group_by",
            "location": 84,
            "return": [
                "collections.OrderedDict[(Any, list)]"
            ],
            "arguments": {
                "xs": [
                    "List[T]",
                    "str",
                    "Hashable",
                    "Optional[int]",
                    "bool"
                ],
                "key": [
                    "bytes",
                    "str",
                    "int"
                ]
            }
        }
    },
    "sensa-master/signal_source.py": {
        "update_source": {
            "name": "update_source",
            "location": 62,
            "return": [
                "str",
                "Callable",
                "Dict[str,Any]",
                "int",
                "List[str]"
            ],
            "arguments": {
                "source_state": [
                    "str",
                    "Callable"
                ],
                "action": [
                    "str",
                    "Type"
                ]
            }
        },
        "SourceState.Empty": {
            "name": "Empty",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "id_": [
                    "SourceState"
                ]
            }
        },
        "SourceState.Full": {
            "name": "Full",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "id_": [
                    "SourceState"
                ],
                "signal_id": [
                    "int",
                    "utils.types.Id",
                    "None",
                    "Optional[int]",
                    "meerkadomain.posvalue_objects.Id"
                ]
            }
        },
        "SourceState.eval_node": {
            "name": "eval_node",
            "location": 38,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "src": [
                    "SourceState"
                ]
            }
        },
        "SourceState.to_node": {
            "name": "to_node",
            "location": 41,
            "return": [
                "ng.Node"
            ],
            "arguments": {
                "src": [
                    "SourceState"
                ]
            }
        },
        "SourceAction.SetEmpty": {
            "name": "SetEmpty",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "id_": [
                    "SourceAction"
                ]
            }
        },
        "SourceAction.SelectSignal": {
            "name": "SelectSignal",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "id_": [
                    "SourceAction"
                ],
                "signal_id": [
                    "int",
                    "utils.types.Id",
                    "None",
                    "Optional[int]",
                    "meerkadomain.posvalue_objects.Id"
                ]
            }
        }
    },
    "sensa-master/test_async_eff.py": {
        "test_async_get_id": {
            "name": "test_async_get_id",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "n": [
                    "int",
                    "Optional[str]",
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "test_sync_get_id": {
            "name": "test_sync_get_id",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "n": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "get_n_ids_sync": {
            "name": "get_n_ids_sync",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "n": [
                    "int",
                    "str",
                    "List[List[int]]",
                    "List[list[int]]"
                ]
            }
        },
        "yield_": {
            "name": "yield_",
            "location": 84,
            "return": [
                "Generator[(GetId, Any, Any)]"
            ],
            "arguments": {
                "x": [
                    "GetId"
                ]
            }
        },
        "run_id_async": {
            "name": "run_id_async",
            "location": 99,
            "return": [
                "tuple"
            ],
            "arguments": {
                "comp": [
                    "str",
                    "Optional[str]",
                    "list",
                    "List[int]",
                    "bool"
                ],
                "id_": [
                    "int",
                    "str",
                    "Optional[int]",
                    "Optional[Dict[str,Any]]",
                    "bool"
                ]
            }
        }
    },
    "sensa-master/time_range.py": {
        "clamp_time_range": {
            "name": "clamp_time_range",
            "location": 8,
            "return": [
                "Union[(TimeRange, _T1)]"
            ],
            "arguments": {
                "min_t": [
                    "int",
                    "List[int]"
                ],
                "time_range": [
                    "int",
                    "float",
                    "bool"
                ],
                "max_t": [
                    "float",
                    "int",
                    "str",
                    "List[float]"
                ]
            }
        },
        "scale_at_point_limited": {
            "name": "scale_at_point_limited",
            "location": 30,
            "return": [
                "Union[(TimeRange, _T0)]"
            ],
            "arguments": {
                "time_range": [
                    "int",
                    "float",
                    "bool"
                ],
                "scaling_factor": [
                    "str",
                    "int",
                    "None",
                    "torch.utils.data.DataLoader",
                    "Optional[str]"
                ],
                "point": [
                    "int"
                ],
                "min_len": [
                    "int",
                    "float"
                ],
                "min_t": [
                    "bool",
                    "float",
                    "int",
                    "Tuple[int,int]",
                    "Optional[int]"
                ],
                "max_t": [
                    "bool",
                    "float",
                    "int",
                    "Tuple[int,int]",
                    "Optional[int]"
                ]
            }
        },
        "scale_by_limited": {
            "name": "scale_by_limited",
            "location": 82,
            "return": [
                "Union[(TimeRange, _T1)]"
            ],
            "arguments": {
                "scaling_factor": [
                    "float",
                    "int"
                ],
                "time_range": [
                    "int",
                    "float",
                    "str"
                ],
                "min_len": [
                    "float",
                    "int"
                ],
                "max_len": [
                    "float",
                    "int"
                ]
            }
        },
        "scale_by": {
            "name": "scale_by",
            "location": 95,
            "return": [
                "TimeRange"
            ],
            "arguments": {
                "scaling_factor": [
                    "int",
                    "Optional[int]",
                    "float",
                    "Union[int,float]",
                    "recidiviz.calculator.pipeline.utils.time_range_utils.TimeRange"
                ],
                "time_range": [
                    "float",
                    "bool",
                    "int"
                ]
            }
        },
        "is_time_range_length_between": {
            "name": "is_time_range_length_between",
            "location": 108,
            "return": [
                "bool",
                "Union[str,int]",
                "Callable",
                "int"
            ],
            "arguments": {
                "min_len": [
                    "float",
                    "int",
                    "Optional[Union[int,float]]"
                ],
                "max_len": [
                    "float",
                    "int",
                    "Optional[Union[int,float]]"
                ],
                "time_range": [
                    "float",
                    "int"
                ]
            }
        },
        "time_range_middle": {
            "name": "time_range_middle",
            "location": 120,
            "return": [
                "float",
                "str",
                "int",
                "Union[List[str],List[Any]]",
                "List[None]"
            ],
            "arguments": {
                "time_range": [
                    "int",
                    "Iterable[T]",
                    "bytes"
                ]
            }
        },
        "time_range_add_offset": {
            "name": "time_range_add_offset",
            "location": 129,
            "return": [
                "TimeRange"
            ],
            "arguments": {
                "time_range": [
                    "int",
                    "Sequence",
                    "None",
                    "Optional[int]",
                    "T"
                ],
                "offset": [
                    "float",
                    "ByteString",
                    "str"
                ]
            }
        },
        "time_range_subtract_offset": {
            "name": "time_range_subtract_offset",
            "location": 137,
            "return": [
                "TimeRange"
            ],
            "arguments": {
                "time_range": [
                    "int",
                    "Iterable[T]",
                    "bytes"
                ],
                "offset": [
                    "float",
                    "bool",
                    "ByteString"
                ]
            }
        },
        "time_range_length": {
            "name": "time_range_length",
            "location": 144,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "time_range": [
                    "int",
                    "Iterable[T]",
                    "bytes"
                ]
            }
        }
    },
    "sensa-master/trans.py": {
        "Trans.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "OrderedDict",
                    "str",
                    "bool",
                    "Optional[Sequence[Any]]",
                    "Sequence[Any]",
                    "None",
                    "Optional[str]"
                ],
                "func": [
                    "Optional[List[str]]",
                    "List[str]",
                    "int",
                    "None",
                    "Callable",
                    "Optional[str]",
                    "str",
                    "bool"
                ],
                "func_sig": [
                    "Optional[List[str]]",
                    "List[str]",
                    "int",
                    "None",
                    "Callable",
                    "Optional[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "Trans.__call__": {
            "name": "__call__",
            "location": 32,
            "return": [
                "int",
                "Union[int, slice]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "signal": [
                    "Callable",
                    "int",
                    "starlette.types.Receive",
                    "float",
                    "starlette.types.Send"
                ],
                "params": [
                    "Callable",
                    "int",
                    "starlette.types.Receive",
                    "float",
                    "starlette.types.Send"
                ]
            }
        },
        "Trans.are_complete_parameters": {
            "name": "are_complete_parameters",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "str",
                    "int",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "Trans.__repr__": {
            "name": "__repr__",
            "location": 38,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sensa-master/__main__.py": {},
    "sensa-master/components/double_click_listbox.py": {
        "double_click_listbox": {
            "name": "double_click_listbox",
            "location": 8,
            "return": [
                "Tuple[(Any, Any, Union[(tuple, _T0)])]"
            ],
            "arguments": {
                "state": [
                    "List"
                ],
                "options": [
                    "str",
                    "Sequence[str]",
                    "float",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "sensa-master/components/draggable.py": {
        "draggable": {
            "name": "draggable",
            "location": 13,
            "return": [
                "bool",
                "Generator[tuple[Union[int,str,list,tuple[Union[float,float]],dict[str,int]]]]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "was_down": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Optional[float]",
                    "None",
                    "Optional[Type]",
                    "float",
                    "Type"
                ],
                "width": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "height": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "sensa-master/components/grouped.py": {
        "only_draw_if": {
            "name": "only_draw_if",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "cond": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "_IMGuiCtx.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "begin": [
                    "int",
                    "float",
                    "bool",
                    "apistar.types.RouteConfig"
                ],
                "end": [
                    "int",
                    "float",
                    "bool",
                    "apistar.types.RouteConfig"
                ]
            }
        },
        "_IMGuiCtx.__enter__": {
            "name": "__enter__",
            "location": 29,
            "return": [
                "mypy.types.Type",
                "types.Resolver",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_IMGuiCtx.__exit__": {
            "name": "__exit__",
            "location": 32,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "str",
                    "Optional[BaseException]",
                    "int",
                    "BaseException",
                    "Type",
                    "Union[int,str]",
                    "float",
                    "None"
                ],
                "exc": [
                    "None",
                    "Optional[types.TracebackType]",
                    "str",
                    "Type",
                    "BaseException",
                    "Optional[Type[BaseException]]",
                    "Exception",
                    "types.TracebackType",
                    "Optional[BaseException]"
                ],
                "traceback": [
                    "None",
                    "Optional[types.TracebackType]",
                    "str",
                    "Type",
                    "BaseException",
                    "Optional[Type[BaseException]]",
                    "Exception",
                    "types.TracebackType",
                    "Optional[BaseException]"
                ]
            }
        }
    },
    "sensa-master/components/str_combo.py": {
        "str_combo": {
            "name": "str_combo",
            "location": 14,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "List[str]"
                ],
                "current_option": [
                    "str",
                    "List[str]",
                    "int",
                    "dict",
                    "Optional[Sequence[Any]]"
                ],
                "options": [
                    "str",
                    "bytes",
                    "int",
                    "Union[str,bytes]",
                    "Dict[str,str]"
                ],
                "label_left": [
                    "bool",
                    "int",
                    "List[str]",
                    "str"
                ]
            }
        },
        "str_combo_with_none": {
            "name": "str_combo_with_none",
            "location": 42,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool",
                    "List[str]",
                    "Dict",
                    "int",
                    "None",
                    "Optional[str]"
                ],
                "o_current_option": [
                    "Optional[str]",
                    "str",
                    "Optional[Dict[str,Any]]",
                    "None",
                    "Dict[str,Any]"
                ],
                "options": [
                    "List[str]",
                    "Sequence[str]",
                    "Type",
                    "str",
                    "Optional[str]"
                ],
                "nothing_text": [
                    "Text",
                    "str",
                    "Optional[str]",
                    "types.ModuleType",
                    "Optional[List[str]]"
                ],
                "label_left": [
                    "bool",
                    "str",
                    "List[str]",
                    "int",
                    "Dict",
                    "Optional[str]"
                ]
            }
        },
        "ordered_dict_to_list": {
            "name": "ordered_dict_to_list",
            "location": 87,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "odict": [
                    "Dict[str,Any]",
                    "Dict",
                    "utils.types.OrderedDict_[utils.types.K,utils.types.A]",
                    "int",
                    "cmk.utils.type_defs.HostName"
                ]
            }
        },
        "ordered_dict_keys": {
            "name": "ordered_dict_keys",
            "location": 90,
            "return": [
                "list"
            ],
            "arguments": {
                "odict": [
                    "Dict",
                    "utils.types.OrderedDict_[utils.types.K,utils.types.A]",
                    "str"
                ]
            }
        },
        "ordered_dict_values": {
            "name": "ordered_dict_values",
            "location": 93,
            "return": [
                "list"
            ],
            "arguments": {
                "odict": [
                    "utils.types.OrderedDict_[utils.types.K, utils.types.A]",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "sensa-master/components/str_listbox.py": {
        "str_listbox": {
            "name": "str_listbox",
            "location": 12,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "label": [
                    "str",
                    "bool"
                ],
                "current_option": [
                    "str",
                    "Callable[...,T]"
                ],
                "options": [
                    "str",
                    "Mapping[str,Any]"
                ]
            }
        }
    },
    "sensa-master/components/styled.py": {
        "_IMColorCtx.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "imc": [
                    "_IMColorCtx"
                ],
                "colors": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "_IMColorCtx.__enter__": {
            "name": "__enter__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "imc": [
                    "_IMColorCtx"
                ]
            }
        },
        "_IMColorCtx.__exit__": {
            "name": "__exit__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "imc": [
                    "_IMColorCtx"
                ]
            }
        },
        "_IMStyleCtx.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "ims": [
                    "_IMStyleCtx"
                ],
                "styles": [
                    "int",
                    "float",
                    "bool",
                    "apistar.types.RouteConfig"
                ]
            }
        },
        "_IMStyleCtx.__enter__": {
            "name": "__enter__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "ims": [
                    "_IMStyleCtx"
                ]
            }
        },
        "_IMStyleCtx.__exit__": {
            "name": "__exit__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "ims": [
                    "_IMStyleCtx"
                ]
            }
        }
    },
    "sensa-master/components/__init__.py": {},
    "sensa-master/utils/actions.py": {
        "err_unsupported_action": {
            "name": "err_unsupported_action",
            "location": 3,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "action": [
                    "int",
                    "bytes"
                ],
                "state": [
                    "int",
                    "bytes"
                ]
            }
        },
        "bad_action": {
            "name": "bad_action",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sensa-master/utils/dict.py": {
        "uniform_dict_type": {
            "name": "uniform_dict_type",
            "location": 21,
            "return": [
                "Type",
                "mypy.types.Type",
                "str"
            ],
            "arguments": {
                "dictionary": [
                    "Dict[str,Any]",
                    "Dict[str,set[str]]",
                    "Dict",
                    "Dict[str,Set[str]]",
                    "Union[str,dict]",
                    "Optional[int]",
                    "mypy.types.Overloaded",
                    "Optional[Union[str,Any,Any,Any]]"
                ]
            }
        },
        "only_keys": {
            "name": "only_keys",
            "location": 31,
            "return": [
                "dict"
            ],
            "arguments": {
                "dict": [
                    "str",
                    "int",
                    "VT",
                    "KT",
                    "Union[str,int]"
                ],
                "keys": [
                    "str",
                    "VT",
                    "KT",
                    "Union[str,int]"
                ]
            }
        },
        "dict_to_function": {
            "name": "dict_to_function",
            "location": 36,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "dictionary": [
                    "int",
                    "mypy.types.Type"
                ]
            }
        },
        "assert_dict_is_uniform": {
            "name": "assert_dict_is_uniform",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "dictionary": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[Hashable, Any]",
                    "Dict[str, \"Outcome\"]"
                ]
            }
        }
    },
    "sensa-master/utils/either.py": {
        "either": {
            "name": "either",
            "location": 42,
            "return": [
                "bool",
                "int",
                "Optional[Any]",
                "str"
            ],
            "arguments": {
                "e": [
                    "bool",
                    "str",
                    "None",
                    "mypy.types.Type",
                    "mypy.types.CallableType",
                    "Optional[str]",
                    "int"
                ],
                "l_fn": [
                    "bool",
                    "str",
                    "None",
                    "mypy.types.Type",
                    "mypy.types.CallableType",
                    "Optional[str]",
                    "int"
                ],
                "r_fn": [
                    "bool",
                    "str",
                    "None",
                    "mypy.types.Type",
                    "mypy.types.CallableType",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "Left.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "left": [
                    "Left"
                ],
                "val": [
                    "int",
                    "Dict[str,Any]",
                    "str",
                    "Union[str,int]",
                    "bool"
                ]
            }
        },
        "Left.is_left": {
            "name": "is_left",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "left": [
                    "str",
                    "int"
                ]
            }
        },
        "Left.is_right": {
            "name": "is_right",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "left": [
                    "str",
                    "int"
                ]
            }
        },
        "Left.err_val": {
            "name": "err_val",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "left": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Left.res_val": {
            "name": "res_val",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "left": [
                    "bool",
                    "str",
                    "List",
                    "IO[str]",
                    "IO"
                ]
            }
        },
        "Left.__str__": {
            "name": "__str__",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "left": [
                    "Left"
                ]
            }
        },
        "Right.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "right": [
                    "Right"
                ],
                "val": [
                    "int",
                    "Dict[str,Any]",
                    "str",
                    "Union[str,int]",
                    "bool"
                ]
            }
        },
        "Right.is_left": {
            "name": "is_left",
            "location": 32,
            "return": [
                "bool"
            ],
            "arguments": {
                "right": [
                    "str",
                    "int"
                ]
            }
        },
        "Right.is_right": {
            "name": "is_right",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "right": [
                    "str",
                    "int"
                ]
            }
        },
        "Right.err_val": {
            "name": "err_val",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "right": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Right.res_val": {
            "name": "res_val",
            "location": 38,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "right": [
                    "bool",
                    "str",
                    "List",
                    "IO[str]",
                    "IO"
                ]
            }
        },
        "Right.__str__": {
            "name": "__str__",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "right": [
                    "Right"
                ]
            }
        }
    },
    "sensa-master/utils/functools.py": {
        "const": {
            "name": "const",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "id_": {
            "name": "id_",
            "location": 13,
            "return": [
                "int",
                "str",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int"
                ]
            }
        },
        "chain": {
            "name": "chain",
            "location": 19,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {}
        },
        "sequence": {
            "name": "sequence",
            "location": 34,
            "return": [
                "Callable[([], Any)]"
            ],
            "arguments": {}
        },
        "put": {
            "name": "put",
            "location": 43,
            "return": [
                "Optional[int]",
                "Iterable[int]",
                "int"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str"
                ],
                "fn": [
                    "float",
                    "str"
                ]
            }
        },
        "iterate": {
            "name": "iterate",
            "location": 50,
            "return": [
                "Generator[(_T1, Any, Any)]"
            ],
            "arguments": {
                "f": [
                    "Callable",
                    "Dict[str, str]",
                    "str"
                ],
                "seed": [
                    "str",
                    "float"
                ]
            }
        },
        "take": {
            "name": "take",
            "location": 57,
            "return": [
                "list"
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "iterable": [
                    "int"
                ]
            }
        },
        "chain.chained": {
            "name": "chained",
            "location": 25,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "sequence.chained": {
            "name": "chained",
            "location": 36,
            "return": [],
            "arguments": {}
        }
    },
    "sensa-master/utils/imgui.py": {
        "get_mouse_position": {
            "name": "get_mouse_position",
            "location": 11,
            "return": [
                "str",
                "int",
                "BinaryIO"
            ],
            "arguments": {}
        },
        "get_window_rect": {
            "name": "get_window_rect",
            "location": 15,
            "return": [
                "utils.rect.Rect"
            ],
            "arguments": {}
        },
        "get_window_content_rect": {
            "name": "get_window_content_rect",
            "location": 24,
            "return": [
                "utils.rect.Rect"
            ],
            "arguments": {}
        },
        "get_item_rect": {
            "name": "get_item_rect",
            "location": 34,
            "return": [
                "utils.rect.Rect"
            ],
            "arguments": {}
        },
        "add_rect_coords": {
            "name": "add_rect_coords",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "draw_list": [
                    "bool"
                ],
                "top_left": [
                    "Union[int,BitVec]",
                    "int"
                ],
                "bottom_right": [
                    "Union[int,BitVec]",
                    "int"
                ],
                "color": [
                    "int",
                    "List",
                    "List[List[int]]",
                    "List[list[int]]"
                ]
            }
        },
        "add_rect": {
            "name": "add_rect",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "draw_list": [
                    "List",
                    "List[float]",
                    "int",
                    "List[list[Any]]",
                    "Iterable[str]",
                    "List[list[T]]",
                    "List[List[Any]]",
                    "List[List[T]]"
                ],
                "rect": [
                    "int",
                    "float",
                    "List[List[T]]",
                    "str",
                    "List[list[T]]"
                ],
                "color": [
                    "List",
                    "List[float]",
                    "int",
                    "List[list[Any]]",
                    "Iterable[str]",
                    "List[list[T]]",
                    "List[List[Any]]",
                    "List[List[T]]"
                ]
            }
        }
    },
    "sensa-master/utils/maybe.py": {
        "Nothing.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "nothing": [
                    "Nothing"
                ]
            }
        },
        "Nothing.is_nothing": {
            "name": "is_nothing",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "nothing": [
                    "str",
                    "int"
                ]
            }
        },
        "Nothing.is_Nothing": {
            "name": "is_Nothing",
            "location": 18,
            "return": [
                "bool"
            ],
            "arguments": {
                "nothing": [
                    "Nothing"
                ]
            }
        },
        "Nothing.is_just": {
            "name": "is_just",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "nothing": [
                    "str",
                    "int"
                ]
            }
        },
        "Nothing.is_Just": {
            "name": "is_Just",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "nothing": [
                    "Nothing"
                ]
            }
        },
        "Nothing.val": {
            "name": "val",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "nothing": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Nothing.get_val": {
            "name": "get_val",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "nothing": [
                    "Nothing"
                ]
            }
        },
        "Nothing.map": {
            "name": "map",
            "location": 30,
            "return": [
                "Nothing"
            ],
            "arguments": {
                "nothing": [
                    "Nothing"
                ],
                "fn": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Nothing.__rshift__": {
            "name": "__rshift__",
            "location": 33,
            "return": [
                "Nothing"
            ],
            "arguments": {
                "nothing": [
                    "Nothing"
                ],
                "fn": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Nothing.__repr__": {
            "name": "__repr__",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "just": [
                    "Nothing"
                ]
            }
        },
        "Just.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "just": [
                    "Just"
                ],
                "val": [
                    "int",
                    "Dict[str,Any]",
                    "str",
                    "Union[str,int]",
                    "bool"
                ]
            }
        },
        "Just.is_nothing": {
            "name": "is_nothing",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "just": [
                    "str",
                    "int"
                ]
            }
        },
        "Just.is_Nothing": {
            "name": "is_Nothing",
            "location": 46,
            "return": [
                "bool"
            ],
            "arguments": {
                "just": [
                    "Just"
                ]
            }
        },
        "Just.is_just": {
            "name": "is_just",
            "location": 49,
            "return": [
                "bool"
            ],
            "arguments": {
                "just": [
                    "str",
                    "int"
                ]
            }
        },
        "Just.is_Just": {
            "name": "is_Just",
            "location": 51,
            "return": [
                "bool"
            ],
            "arguments": {
                "just": [
                    "Just"
                ]
            }
        },
        "Just.val": {
            "name": "val",
            "location": 54,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "just": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Just.get_val": {
            "name": "get_val",
            "location": 56,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "just": [
                    "Just"
                ]
            }
        },
        "Just.map": {
            "name": "map",
            "location": 58,
            "return": [
                "Just"
            ],
            "arguments": {
                "just": [
                    "Just"
                ],
                "fn": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Just.__rshift__": {
            "name": "__rshift__",
            "location": 61,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "just": [
                    "Just"
                ],
                "fn": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Just.__repr__": {
            "name": "__repr__",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "just": [
                    "Just"
                ]
            }
        }
    },
    "sensa-master/utils/misc.py": {
        "impossible": {
            "name": "impossible",
            "location": 13,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "limit_upper": {
            "name": "limit_upper",
            "location": 20,
            "return": [
                "str",
                "Iterable[Any]",
                "int"
            ],
            "arguments": {
                "x": [
                    "str",
                    "int"
                ],
                "high": [
                    "str",
                    "int"
                ]
            }
        },
        "limit_lower": {
            "name": "limit_lower",
            "location": 23,
            "return": [
                "bool",
                "Set[str]",
                "str",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "Set[str]",
                    "str",
                    "Callable[[None],bool]",
                    "Callable[None,bool]"
                ],
                "low": [
                    "int",
                    "Set[str]",
                    "str",
                    "Callable[[None],bool]",
                    "Callable[None,bool]"
                ]
            }
        },
        "clamp": {
            "name": "clamp",
            "location": 26,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "low": [
                    "int"
                ],
                "x": [
                    "int"
                ],
                "high": [
                    "int"
                ]
            }
        },
        "point_subtract_offset": {
            "name": "point_subtract_offset",
            "location": 32,
            "return": [
                "int",
                "List[int]",
                "str"
            ],
            "arguments": {
                "a": [
                    "int",
                    "imgui.Vec2",
                    "Sequence[int]",
                    "str"
                ],
                "offset": [
                    "int",
                    "imgui.Vec2",
                    "Sequence[int]",
                    "str"
                ]
            }
        },
        "point_offset": {
            "name": "point_offset",
            "location": 35,
            "return": [
                "int",
                "List[int]",
                "str"
            ],
            "arguments": {
                "a": [
                    "int",
                    "imgui.Vec2",
                    "Sequence[int]",
                    "str"
                ],
                "offset": [
                    "int",
                    "imgui.Vec2",
                    "Sequence[int]",
                    "str"
                ]
            }
        },
        "range_incl": {
            "name": "range_incl",
            "location": 40,
            "return": [
                "range"
            ],
            "arguments": {
                "first": [
                    "int",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ],
                "last": [
                    "int",
                    "Optional[List[str]]",
                    "List[str]"
                ],
                "step": [
                    "int",
                    "Optional[List[str]]"
                ]
            }
        },
        "get_in": {
            "name": "get_in",
            "location": 50,
            "return": [
                "str",
                "bytes",
                "Union[int,float,complex]",
                "Dict"
            ],
            "arguments": {
                "path": [
                    "Iterable[Any]",
                    "int",
                    "bool",
                    "str"
                ],
                "x": [
                    "str",
                    "int",
                    "bool",
                    "Optional[int]"
                ]
            }
        }
    },
    "sensa-master/utils/pmap.py": {
        "invert": {
            "name": "invert",
            "location": 19,
            "return": [
                "float",
                "Dict[str, str]",
                "bool",
                "tuple",
                "int",
                "Dict[str, Any]",
                "Iterable[int]"
            ],
            "arguments": {
                "d": [
                    "Dict",
                    "int",
                    "Machine"
                ]
            }
        },
        "matches": {
            "name": "matches",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "map": [
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "sensa-master/utils/pred.py": {
        "assert_all": {
            "name": "assert_all",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "xs": [
                    "List[cirq.Qid]",
                    "List[str]",
                    "List[float]",
                    "bool"
                ],
                "pred": [
                    "str",
                    "int",
                    "Match[str]",
                    "Match"
                ],
                "msg": [
                    "Text",
                    "str",
                    "int",
                    "Match[str]"
                ]
            }
        },
        "one_is_true_of": {
            "name": "one_is_true_of",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "int",
                    "str",
                    "snorkel.types.DataPoint"
                ],
                "preds": [
                    "str",
                    "int",
                    "snorkel.types.DataPoint"
                ]
            }
        },
        "one_is_true": {
            "name": "one_is_true",
            "location": 23,
            "return": [
                "bool",
                "Optional[int]",
                "int",
                "Optional[bool]"
            ],
            "arguments": {
                "bools": [
                    "bool"
                ]
            }
        }
    },
    "sensa-master/utils/rect.py": {
        "rect_width": {
            "name": "rect_width",
            "location": 7,
            "return": [
                "int",
                "List[int]",
                "str"
            ],
            "arguments": {
                "rect": [
                    "str",
                    "int"
                ]
            }
        },
        "rect_height": {
            "name": "rect_height",
            "location": 11,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "rect": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "rect_center": {
            "name": "rect_center",
            "location": 15,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "rect": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "is_in_rect": {
            "name": "is_in_rect",
            "location": 20,
            "return": [
                "bool",
                "Optional[int]",
                "str",
                "Optional[List[int]]"
            ],
            "arguments": {
                "point": [
                    "imgui.Vec2"
                ],
                "rect": [
                    "Callable[[T],bool]",
                    "Callable[T,bool]"
                ]
            }
        }
    },
    "sensa-master/utils/sequence.py": {
        "is_sequence_unique": {
            "name": "is_sequence_unique",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "seq": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "is_sequence_uniform": {
            "name": "is_sequence_uniform",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "seq": [
                    "Sequence[Any]"
                ]
            }
        },
        "sequence_type": {
            "name": "sequence_type",
            "location": 34,
            "return": [
                "Union[(utils.either.Left, utils.either.Right)]"
            ],
            "arguments": {
                "seq": [
                    "str",
                    "Optional[List[\"custom_index\"]]"
                ]
            }
        },
        "uniform_sequence_type": {
            "name": "uniform_sequence_type",
            "location": 53,
            "return": [
                "typing.Type"
            ],
            "arguments": {
                "seq": [
                    "str",
                    "Exception"
                ]
            }
        },
        "assert_sequence_is_uniform": {
            "name": "assert_sequence_is_uniform",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "seq": [
                    "Type['Frame']"
                ]
            }
        },
        "optional_index": {
            "name": "optional_index",
            "location": 75,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "seq": [
                    "int",
                    "T"
                ],
                "of": [
                    "int"
                ]
            }
        },
        "parts_of_len": {
            "name": "parts_of_len",
            "location": 91,
            "return": [
                "list"
            ],
            "arguments": {
                "xs": [],
                "len": [
                    "int",
                    "Sequence[T]",
                    "str"
                ]
            }
        }
    },
    "sensa-master/utils/tuple.py": {
        "set_in_tuple": {
            "name": "set_in_tuple",
            "location": 14,
            "return": [
                "int",
                "str",
                "bytes",
                "bool"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "val": [
                    "str"
                ],
                "tup": [
                    "str"
                ]
            }
        },
        "modify_in_tuple": {
            "name": "modify_in_tuple",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "fn": [
                    "str"
                ],
                "tup": [
                    "str",
                    "int",
                    "types.Path"
                ]
            }
        },
        "is_namedtuple": {
            "name": "is_namedtuple",
            "location": 53,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "str",
                    "List",
                    "bool"
                ]
            }
        }
    },
    "sensa-master/utils/types.py": {},
    "sensa-master/utils/__init__.py": {}
}
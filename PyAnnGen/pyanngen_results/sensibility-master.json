{
    "sensibility-master/setup.py": {
        "slurp": {
            "name": "slurp",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        }
    },
    "sensibility-master/libexec/configurations.py": {
        "Configuration.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Configuration.slug": {
            "name": "slug",
            "location": 17,
            "return": [
                "PurePath",
                "str",
                "Optional[str]",
                "TextIO",
                "BinaryIO",
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "Configuration.hashed_slug": {
            "name": "hashed_slug",
            "location": 22,
            "return": [
                "PurePath",
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "Configuration.__getitem__": {
            "name": "__getitem__",
            "location": 26,
            "return": [
                "str",
                "Dict[str, List[Any]]",
                "Union[str, bytes]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]",
                    "Tuple",
                    "Dict[str,str]",
                    "None",
                    "int",
                    "Callable[[KT],VT]",
                    "Callable[KT,VT]",
                    "Type[RuntimeError]",
                    "Type"
                ]
            }
        },
        "Configuration.__getattr__": {
            "name": "__getattr__",
            "location": 30,
            "return": [
                "str",
                "Dict[str, List[Any]]",
                "Union[str, bytes]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]",
                    "Tuple",
                    "Dict[str,str]",
                    "None",
                    "int",
                    "Callable[[KT],VT]",
                    "Callable[KT,VT]",
                    "Type[RuntimeError]",
                    "Type"
                ]
            }
        },
        "Configuration.__iter__": {
            "name": "__iter__",
            "location": 34,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "Configuration.__len__": {
            "name": "__len__",
            "location": 37,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Configurations.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Configurations.__iter__": {
            "name": "__iter__",
            "location": 45,
            "return": [
                "Generator[(Configuration, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Configurations.__len__": {
            "name": "__len__",
            "location": 53,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Configurations.__radd__": {
            "name": "__radd__",
            "location": 59,
            "return": [
                "pathlib.Path",
                "bool",
                "dict",
                "Tuple[Sequence]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Optional[\"Cell\"]"
                ]
            }
        },
        "Configurations.__add__": {
            "name": "__add__",
            "location": 62,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Set[VT]"
                ]
            }
        }
    },
    "sensibility-master/libexec/experiment.py": {
        "Experiment.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Experiment.add_to_makefile": {
            "name": "add_to_makefile",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make": [
                    "str",
                    "int",
                    "Dict[str,Any]",
                    "bool"
                ]
            }
        }
    },
    "sensibility-master/libexec/makefile.py": {
        "Command.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bin": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Command.__call__": {
            "name": "__call__",
            "location": 34,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command._add_arguments": {
            "name": "_add_arguments",
            "location": 37,
            "return": [
                "Command"
            ],
            "arguments": {
                "self": [
                    "_TCommand@@Command@@"
                ]
            }
        },
        "Command.copy": {
            "name": "copy",
            "location": 55,
            "return": [
                "Command"
            ],
            "arguments": {
                "self": [
                    "_TCommand@@Command@@"
                ]
            }
        },
        "Command.__str__": {
            "name": "__str__",
            "location": 58,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rule.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "targets": [
                    "int",
                    "str",
                    "float",
                    "List",
                    "None",
                    "Optional[str]",
                    "pathlib.Path"
                ],
                "sources": [
                    "str",
                    "Dict[str,str]",
                    "bool"
                ],
                "recipe": [
                    "int",
                    "str",
                    "float",
                    "List",
                    "None",
                    "Optional[str]",
                    "pathlib.Path"
                ]
            }
        },
        "Rule.creates": {
            "name": "creates",
            "location": 70,
            "return": [
                "Rule"
            ],
            "arguments": {
                "self": [
                    "Type[_TRule]"
                ]
            }
        },
        "Rule.set_recipe": {
            "name": "set_recipe",
            "location": 73,
            "return": [
                "Rule"
            ],
            "arguments": {
                "self": [
                    "_TRule@@Rule@@"
                ]
            }
        },
        "Rule.depends_on": {
            "name": "depends_on",
            "location": 77,
            "return": [
                "Rule"
            ],
            "arguments": {
                "self": [
                    "_TRule@@Rule@@"
                ]
            }
        },
        "Rule.print": {
            "name": "print",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PhonyRule.print": {
            "name": "print",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Makefile.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Makefile.__enter__": {
            "name": "__enter__",
            "location": 116,
            "return": [
                "Makefile"
            ],
            "arguments": {
                "self": [
                    "_TMakefile@@Makefile@@"
                ]
            }
        },
        "Makefile.__exit__": {
            "name": "__exit__",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_class": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_inst": [
                    "Optional[BaseException]"
                ],
                "tb": [
                    "Type"
                ]
            }
        },
        "Makefile.print": {
            "name": "print",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Makefile.rule": {
            "name": "rule",
            "location": 141,
            "return": [
                "Rule"
            ],
            "arguments": {
                "self": []
            }
        },
        "Makefile.phony_rule": {
            "name": "phony_rule",
            "location": 149,
            "return": [
                "PhonyRule"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "Dict[str,Any]",
                    "Union[str,List[str]]",
                    "List[str]"
                ]
            }
        },
        "Command._add_arguments.generate_kwargs": {
            "name": "generate_kwargs",
            "location": 38,
            "return": [
                "typing.Generator[]",
                "typing.Generator[str]"
            ],
            "arguments": {}
        }
    },
    "sensibility-master/sensibility/abram.py": {
        "at_least": {
            "name": "at_least",
            "location": 27,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "clamp": [
                    "int",
                    "Callable",
                    "str"
                ],
                "number": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "at_most": {
            "name": "at_most",
            "location": 39,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "clamp": [
                    "int",
                    "Callable",
                    "str"
                ],
                "number": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "sensibility-master/sensibility/edit.py": {
        "random_vocabulary_entry": {
            "name": "random_vocabulary_entry",
            "location": 324,
            "return": [
                "sensibility.vocabulary.Vind"
            ],
            "arguments": {}
        },
        "not_none": {
            "name": "not_none",
            "location": 338,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "item": [
                    "_T0@@"
                ]
            }
        },
        "Edit.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 55,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Edit.additive_inverse": {
            "name": "additive_inverse",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Edit.apply": {
            "name": "apply",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "program": []
            }
        },
        "Edit.serialize_components": {
            "name": "serialize_components",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Edit.create_random_mutation": {
            "name": "create_random_mutation",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "program": []
            }
        },
        "Edit.name": {
            "name": "name",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Edit.serialize": {
            "name": "serialize",
            "location": 107,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "Edit.__neg__": {
            "name": "__neg__",
            "location": 115,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Edit.__radd__": {
            "name": "__radd__",
            "location": 121,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Edit.__eq__": {
            "name": "__eq__",
            "location": 127,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Edit.__hash__": {
            "name": "__hash__",
            "location": 133,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Edit.deserialize": {
            "name": "deserialize",
            "location": 137,
            "return": [
                "Union[(Deletion, Insertion, Substitution)]"
            ],
            "arguments": {
                "cls": [],
                "code": [],
                "location": [],
                "token": [],
                "original_token": []
            }
        },
        "Insertion.__init__": {
            "name": "__init__",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [],
                "token": []
            }
        },
        "Insertion.__repr__": {
            "name": "__repr__",
            "location": 182,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Insertion.additive_inverse": {
            "name": "additive_inverse",
            "location": 187,
            "return": [
                "Deletion"
            ],
            "arguments": {
                "self": []
            }
        },
        "Insertion.apply": {
            "name": "apply",
            "location": 190,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "program": []
            }
        },
        "Insertion.serialize_components": {
            "name": "serialize_components",
            "location": 193,
            "return": [
                "Tuple[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Insertion.create_mutation": {
            "name": "create_mutation",
            "location": 197,
            "return": [
                "Insertion"
            ],
            "arguments": {
                "program": [],
                "index": [],
                "token": []
            }
        },
        "Insertion.create_random_mutation": {
            "name": "create_random_mutation",
            "location": 202,
            "return": [
                "Insertion"
            ],
            "arguments": {
                "cls": [
                    "Type[_TInsertion]"
                ],
                "program": []
            }
        },
        "Deletion.__init__": {
            "name": "__init__",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [],
                "original_token": []
            }
        },
        "Deletion.__repr__": {
            "name": "__repr__",
            "location": 227,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deletion.additive_inverse": {
            "name": "additive_inverse",
            "location": 232,
            "return": [
                "Insertion"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deletion.apply": {
            "name": "apply",
            "location": 236,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "program": []
            }
        },
        "Deletion.serialize_components": {
            "name": "serialize_components",
            "location": 239,
            "return": [
                "Tuple[(Any, None, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deletion.create_mutation": {
            "name": "create_mutation",
            "location": 243,
            "return": [
                "Deletion"
            ],
            "arguments": {
                "program": [],
                "index": []
            }
        },
        "Deletion.create_random_mutation": {
            "name": "create_random_mutation",
            "location": 247,
            "return": [
                "Deletion"
            ],
            "arguments": {
                "cls": [
                    "Type[_TDeletion]"
                ],
                "program": []
            }
        },
        "Substitution.__init__": {
            "name": "__init__",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "Substitution.__repr__": {
            "name": "__repr__",
            "location": 274,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Substitution.additive_inverse": {
            "name": "additive_inverse",
            "location": 284,
            "return": [
                "Substitution"
            ],
            "arguments": {
                "self": [
                    "_TSubstitution@@Substitution@@"
                ]
            }
        },
        "Substitution.apply": {
            "name": "apply",
            "location": 290,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "program": []
            }
        },
        "Substitution.serialize_components": {
            "name": "serialize_components",
            "location": 293,
            "return": [
                "Tuple[(Any, sensibility.vocabulary.Vind, sensibility.vocabulary.Vind)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Substitution.create_mutation": {
            "name": "create_mutation",
            "location": 297,
            "return": [
                "Substitution"
            ],
            "arguments": {
                "program": [],
                "index": [],
                "token": []
            }
        },
        "Substitution.create_random_mutation": {
            "name": "create_random_mutation",
            "location": 304,
            "return": [
                "Substitution"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSubstitution]"
                ],
                "program": []
            }
        }
    },
    "sensibility-master/sensibility/fix.py": {
        "is_normalized_vector": {
            "name": "is_normalized_vector",
            "location": 276,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [],
                "p": [
                    "int"
                ],
                "tolerance": [
                    "float"
                ]
            }
        },
        "zap_zeros_inplace": {
            "name": "zap_zeros_inplace",
            "location": 291,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "dist": [
                    "_T0@@"
                ]
            }
        },
        "cross_entropy": {
            "name": "cross_entropy",
            "location": 299,
            "return": [
                "Any"
            ],
            "arguments": {
                "true_dist": [],
                "est_dist": []
            }
        },
        "one_hot": {
            "name": "one_hot",
            "location": 308,
            "return": [
                "Any"
            ],
            "arguments": {
                "idx": [],
                "size": []
            }
        },
        "LSTMFixerUpper.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "k": [
                    "int"
                ]
            }
        },
        "LSTMFixerUpper.fix": {
            "name": "fix",
            "location": 54,
            "return": [
                "Tuple[(sensibility.edit.Edit, ...)]"
            ],
            "arguments": {
                "self": [],
                "source_file": []
            }
        },
        "IndexResult.__init__": {
            "name": "__init__",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [],
                "program": [],
                "a": [],
                "b": [],
                "token": [],
                "vind": []
            }
        },
        "IndexResult.__repr__": {
            "name": "__repr__",
            "location": 156,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexResult.line_no": {
            "name": "line_no",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexResult.comp_total_variation": {
            "name": "comp_total_variation",
            "location": 165,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexResult.__float__": {
            "name": "__float__",
            "location": 179,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexResult.__str__": {
            "name": "__str__",
            "location": 192,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexResult.best_suggestions": {
            "name": "best_suggestions",
            "location": 211,
            "return": [
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexResult.top_forwards": {
            "name": "top_forwards",
            "location": 215,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexResult.top_backwards": {
            "name": "top_backwards",
            "location": 219,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexResult._top": {
            "name": "_top",
            "location": 222,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "vector": [],
                "k": [
                    "int"
                ]
            }
        },
        "IndexResult._maxes": {
            "name": "_maxes",
            "location": 225,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "self": [],
                "vector": [],
                "k": [
                    "int"
                ]
            }
        },
        "Fixes.__init__": {
            "name": "__init__",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vector": []
            }
        },
        "Fixes.try_insert": {
            "name": "try_insert",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [],
                "token": []
            }
        },
        "Fixes.try_delete": {
            "name": "try_delete",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "Fixes.try_substitute": {
            "name": "try_substitute",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [],
                "token": []
            }
        },
        "Fixes._try_edit": {
            "name": "_try_edit",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "edit": []
            }
        },
        "Fixes.__bool__": {
            "name": "__bool__",
            "location": 269,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fixes.__iter__": {
            "name": "__iter__",
            "location": 272,
            "return": [
                "listiterator[nothing]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sensibility-master/sensibility/format_fix.py": {
        "format_fix": {
            "name": "format_fix",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "Dict[str,Any]",
                    "bytes"
                ],
                "fix": [
                    "str",
                    "int"
                ]
            }
        },
        "get_token_line": {
            "name": "get_token_line",
            "location": 208,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "pos": [
                    "int",
                    "str"
                ],
                "tokens": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "format_line": {
            "name": "format_line",
            "location": 226,
            "return": [
                "str"
            ],
            "arguments": {
                "tokens": [
                    "str",
                    "List[str]",
                    "List",
                    "bool",
                    "int"
                ],
                "insert_space_before": [
                    "str",
                    "None",
                    "Dict[str,int]",
                    "List[int]",
                    "int"
                ]
            }
        },
        "not_implemented": {
            "name": "not_implemented",
            "location": 239,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "Suggestion.enclose": {
            "name": "enclose",
            "location": 40,
            "return": [
                "Union[(Insert, Remove, Replace)]"
            ],
            "arguments": {
                "filename": [
                    "int",
                    "str",
                    "bool"
                ],
                "fix": [
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "Optional[Dict[str,str]]",
                    "None",
                    "Dict[str,str]"
                ]
            }
        },
        "Suggestion.__str__": {
            "name": "__str__",
            "location": 51,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Insert.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str",
                    "int",
                    "Optional[str]",
                    "bytes",
                    "None"
                ],
                "pos": [
                    "List[str]",
                    "str",
                    "List[Tuple[str, str]]",
                    "List[Tuple[int, int, Any]]"
                ],
                "tokens": [
                    "List[str]",
                    "Dict",
                    "str",
                    "List"
                ]
            }
        },
        "Insert.line": {
            "name": "line",
            "location": 73,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Insert.column": {
            "name": "column",
            "location": 77,
            "return": [
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Insert.insert_before": {
            "name": "insert_before",
            "location": 84,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Insert.__str__": {
            "name": "__str__",
            "location": 87,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Remove.__init__": {
            "name": "__init__",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "Sequence",
                    "List[str]",
                    "str"
                ],
                "tokens": [
                    "str",
                    "vocabulary.Vind"
                ]
            }
        },
        "Remove.token": {
            "name": "token",
            "location": 122,
            "return": [
                "int",
                "Sequence[Tuple[float, float]]",
                "Dict[str, str]",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Remove.line": {
            "name": "line",
            "location": 126,
            "return": [
                "Dict[str, Any]",
                "Callable",
                "OrderedDict",
                "float",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Remove.column": {
            "name": "column",
            "location": 130,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Remove.__str__": {
            "name": "__str__",
            "location": 136,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Replace.__init__": {
            "name": "__init__",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fix": [
                    "Sequence",
                    "List[str]",
                    "str"
                ],
                "tokens": [
                    "str",
                    "vocabulary.Vind"
                ]
            }
        },
        "Replace.pos": {
            "name": "pos",
            "location": 157,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Replace.token": {
            "name": "token",
            "location": 161,
            "return": [
                "int",
                "Sequence[Tuple[float, float]]",
                "Dict[str, str]",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Replace.line": {
            "name": "line",
            "location": 165,
            "return": [
                "Dict[str, Any]",
                "Callable",
                "OrderedDict",
                "float",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Replace.column": {
            "name": "column",
            "location": 169,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Replace.__str__": {
            "name": "__str__",
            "location": 175,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sensibility-master/sensibility/lexical_analysis.py": {
        "Lexeme.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lexeme.__str__": {
            "name": "__str__",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lexeme.__repr__": {
            "name": "__repr__",
            "location": 57,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Position.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Position.__eq__": {
            "name": "__eq__",
            "location": 71,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "int"
                ]
            }
        },
        "Position.__repr__": {
            "name": "__repr__",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Location.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Location.__eq__": {
            "name": "__eq__",
            "location": 90,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Type"
                ]
            }
        },
        "Location.spans_single_line": {
            "name": "spans_single_line",
            "location": 96,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Location.__repr__": {
            "name": "__repr__",
            "location": 102,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Location.line": {
            "name": "line",
            "location": 106,
            "return": [
                "Type[T]",
                "tuple",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Location.from_string": {
            "name": "from_string",
            "location": 110,
            "return": [
                "Location"
            ],
            "arguments": {
                "self": [
                    "Type[_TLocation]"
                ],
                "text": [
                    "str",
                    "Optional[Exception]"
                ]
            }
        },
        "Token.__init__": {
            "name": "__init__",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.column": {
            "name": "column",
            "location": 155,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.line": {
            "name": "line",
            "location": 162,
            "return": [
                "Type[T]",
                "tuple",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.lines": {
            "name": "lines",
            "location": 169,
            "return": [
                "Iterator[int]",
                "Generator[range]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.location": {
            "name": "location",
            "location": 176,
            "return": [
                "Tuple",
                "Location"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.loc": {
            "name": "loc",
            "location": 183,
            "return": [
                "bool",
                "Optional[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.spans_single_line": {
            "name": "spans_single_line",
            "location": 190,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "Type[BaseException]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.__repr__": {
            "name": "__repr__",
            "location": 196,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sensibility-master/sensibility/sentences.py": {
        "forward_sentences": {
            "name": "forward_sentences",
            "location": 130,
            "return": [
                "Iterator[Tuple[(Sequence, Any)]]"
            ],
            "arguments": {
                "vector": [
                    "int",
                    "Callable",
                    "str"
                ],
                "context": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "backward_sentences": {
            "name": "backward_sentences",
            "location": 139,
            "return": [
                "Iterator[Tuple[(Sequence, Any)]]"
            ],
            "arguments": {
                "vector": [
                    "int",
                    "Callable",
                    "str"
                ],
                "context": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Sentences.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seq": [
                    "int",
                    "float",
                    "bool"
                ],
                "context_length": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Sentences.__len__": {
            "name": "__len__",
            "location": 44,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sentences.__getitem__": {
            "name": "__getitem__",
            "location": 55,
            "return": [
                "None",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "List[int]",
                    "List",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "Sentences.make_sentence": {
            "name": "make_sentence",
            "location": 66,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Sentences.forwards_from": {
            "name": "forwards_from",
            "location": 73,
            "return": [
                "ForwardSentences"
            ],
            "arguments": {
                "seq": [
                    "float",
                    "Sequence[float]",
                    "Tuple",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ],
                "context_length": [
                    "float",
                    "Sequence[float]",
                    "Tuple",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "Sentences.backwards_from": {
            "name": "backwards_from",
            "location": 77,
            "return": [
                "BackwardSentences"
            ],
            "arguments": {
                "seq": [
                    "float",
                    "Sequence[float]",
                    "Tuple",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ],
                "context_length": [
                    "float",
                    "Sequence[float]",
                    "Tuple",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "ForwardSentences.make_sentence": {
            "name": "make_sentence",
            "location": 86,
            "return": [
                "Tuple[(tuple, Any)]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "List",
                    "str",
                    "List[int]",
                    "int",
                    "List[float]",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]",
                    "List[List[Any]]",
                    "List[list[Any]]"
                ]
            }
        },
        "BackwardSentences.make_sentence": {
            "name": "make_sentence",
            "location": 110,
            "return": [
                "Tuple[(tuple, Any)]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "List[int]",
                    "bool",
                    "bytes",
                    "List",
                    "str",
                    "int"
                ]
            }
        }
    },
    "sensibility-master/sensibility/source_vector.py": {
        "to_source_vector": {
            "name": "to_source_vector",
            "location": 165,
            "return": [
                "SourceVector"
            ],
            "arguments": {
                "source": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Sequence",
                    "None",
                    "Mapping",
                    "int",
                    "Mapping[str,Any]"
                ],
                "oov_to_unk": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "int",
                    "Mapping[str,Any]",
                    "Sequence"
                ]
            }
        },
        "SourceVector.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "SourceVector.__eq__": {
            "name": "__eq__",
            "location": 41,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "AbstractSet[Any]",
                    "AbstractSet"
                ]
            }
        },
        "SourceVector.__iter__": {
            "name": "__iter__",
            "location": 58,
            "return": [
                "tupleiterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "SourceVector.__getitem__": {
            "name": "__getitem__",
            "location": 62,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "SourceVector.__len__": {
            "name": "__len__",
            "location": 65,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SourceVector.__repr__": {
            "name": "__repr__",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SourceVector.print": {
            "name": "print",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "IO[str]",
                    "str",
                    "AsyncGenerator",
                    "Coroutine"
                ]
            }
        },
        "SourceVector.to_source_code": {
            "name": "to_source_code",
            "location": 82,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "SourceVector.random_token_index": {
            "name": "random_token_index",
            "location": 90,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SourceVector.random_insertion_point": {
            "name": "random_insertion_point",
            "location": 96,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SourceVector.with_substitution": {
            "name": "with_substitution",
            "location": 104,
            "return": [
                "SourceVector"
            ],
            "arguments": {
                "self": [
                    "_TSourceVector@@SourceVector@@"
                ],
                "index": [
                    "Iterable[str]",
                    "Dict[str, int]",
                    "str"
                ],
                "token": [
                    "str",
                    "vocabulary.Vind",
                    "List[str]",
                    "int"
                ]
            }
        },
        "SourceVector.with_token_removed": {
            "name": "with_token_removed",
            "location": 116,
            "return": [
                "SourceVector"
            ],
            "arguments": {
                "self": [
                    "_TSourceVector@@SourceVector@@"
                ],
                "index": [
                    "List[str]",
                    "List",
                    "str"
                ]
            }
        },
        "SourceVector.with_token_inserted": {
            "name": "with_token_inserted",
            "location": 128,
            "return": [
                "SourceVector"
            ],
            "arguments": {
                "self": [
                    "_TSourceVector@@SourceVector@@"
                ],
                "index": [
                    "str",
                    "Dict",
                    "int",
                    "Tuple[str]",
                    "List"
                ],
                "token": [
                    "str",
                    "vocabulary.Vind",
                    "int",
                    "List[str]"
                ]
            }
        },
        "SourceVector.to_array": {
            "name": "to_array",
            "location": 140,
            "return": [
                "array.array[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SourceVector.to_bytes": {
            "name": "to_bytes",
            "location": 146,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "SourceVector.from_bytes": {
            "name": "from_bytes",
            "location": 153,
            "return": [
                "SourceVector"
            ],
            "arguments": {
                "self": [
                    "Type[_TSourceVector]"
                ],
                "byte_string": [
                    "str",
                    "List[str]",
                    "float",
                    "int"
                ]
            }
        }
    },
    "sensibility-master/sensibility/utils.py": {
        "symlink_within_dir": {
            "name": "symlink_within_dir",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_symlink": {
            "name": "test_symlink",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "clamp": {
            "name": "clamp",
            "location": 68,
            "return": [
                "Union[(_T0, _T1, _T2)]"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "bool"
                ],
                "lower": [
                    "float",
                    "List[List]",
                    "Union[int,float]",
                    "int",
                    "bool"
                ],
                "upper": [
                    "float",
                    "List[List]",
                    "Union[int,float]",
                    "int",
                    "bool"
                ]
            }
        },
        "Timer.__enter__": {
            "name": "__enter__",
            "location": 83,
            "return": [
                "Timer"
            ],
            "arguments": {
                "self": [
                    "_TTimer@@Timer@@"
                ]
            }
        },
        "Timer.__exit__": {
            "name": "__exit__",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timer.seconds": {
            "name": "seconds",
            "location": 91,
            "return": [
                "float",
                "Tuple[Tuple[int, Any]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sensibility-master/sensibility/vocabulary.py": {
        "Vocabulary.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entries": [
                    "str",
                    "Dict[str,int]",
                    "int"
                ]
            }
        },
        "Vocabulary.entries": {
            "name": "entries",
            "location": 79,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vocabulary.representable_indicies": {
            "name": "representable_indicies",
            "location": 87,
            "return": [
                "Generator[(Vind, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vocabulary.to_text": {
            "name": "to_text",
            "location": 91,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "Dict[str,Any]",
                    "str",
                    "float"
                ]
            }
        },
        "Vocabulary.to_index": {
            "name": "to_index",
            "location": 94,
            "return": [
                "Vind"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "Vocabulary.to_index_or_unk": {
            "name": "to_index_or_unk",
            "location": 105,
            "return": [
                "Vind"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "Vocabulary.minimum_representable_index": {
            "name": "minimum_representable_index",
            "location": 111,
            "return": [
                "Vind"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vocabulary.maximum_representable_index": {
            "name": "maximum_representable_index",
            "location": 122,
            "return": [
                "Vind"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vocabulary.__len__": {
            "name": "__len__",
            "location": 129,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vocabulary.__getitem__": {
            "name": "__getitem__",
            "location": 132,
            "return": [
                "str",
                "dict",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "str"
                ]
            }
        },
        "Vocabulary.to_source_text": {
            "name": "to_source_text",
            "location": 135,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "str",
                    "Dict",
                    "List[str]",
                    "int",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "Vocabulary.from_json_file": {
            "name": "from_json_file",
            "location": 140,
            "return": [
                "Vocabulary"
            ],
            "arguments": {
                "cls": [
                    "Type[_TVocabulary]"
                ],
                "filename": [
                    "str"
                ]
            }
        }
    },
    "sensibility-master/sensibility/_paths.py": {
        "get_evaluation_dir": {
            "name": "get_evaluation_dir",
            "location": 39,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {}
        },
        "get_sources_path": {
            "name": "get_sources_path",
            "location": 43,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {}
        },
        "get_vectors_path": {
            "name": "get_vectors_path",
            "location": 47,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {}
        },
        "get_partitions_path": {
            "name": "get_partitions_path",
            "location": 51,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {}
        },
        "get_validation_set_path": {
            "name": "get_validation_set_path",
            "location": 55,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {
                "partition": [
                    "int",
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "get_training_set_path": {
            "name": "get_training_set_path",
            "location": 59,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {
                "partition": [
                    "int",
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "get_test_set_path": {
            "name": "get_test_set_path",
            "location": 63,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {
                "partition": [
                    "int",
                    "str",
                    "pathlib.Path",
                    "Any",
                    "None",
                    "bool",
                    "Optional[Union[Any,str]]"
                ]
            }
        },
        "get_mistakes_path": {
            "name": "get_mistakes_path",
            "location": 67,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {}
        },
        "get_lstm_path": {
            "name": "get_lstm_path",
            "location": 71,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {
                "direction": [
                    "str",
                    "int",
                    "List[str]",
                    "bool"
                ],
                "partition": [
                    "str",
                    "int",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "get_cache_path": {
            "name": "get_cache_path",
            "location": 76,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {}
        }
    },
    "sensibility-master/sensibility/__init__.py": {},
    "sensibility-master/sensibility/__main__.py": {
        "main": {
            "name": "main",
            "location": 38,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "run_subcommand": {
            "name": "run_subcommand",
            "location": 57,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "command": [
                    "Dict[str,Any]"
                ],
                "env": [
                    "bool",
                    "List",
                    "Callable[...,None]",
                    "List[str]",
                    "Tuple[str]"
                ]
            }
        },
        "list_commands": {
            "name": "list_commands",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_bin_and_argv": {
            "name": "get_bin_and_argv",
            "location": 74,
            "return": [
                "Tuple[(pathlib.Path, Any)]"
            ],
            "arguments": {
                "command": [
                    "List[str]",
                    "str",
                    "Tuple[str]"
                ]
            }
        },
        "is_executable": {
            "name": "is_executable",
            "location": 87,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "str",
                    "pathlib.Path",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "parse_args": {
            "name": "parse_args",
            "location": 92,
            "return": [
                "types.SimpleNamespace"
            ],
            "arguments": {
                "argv": [
                    "tuple",
                    "List[str]",
                    "float",
                    "Callable[..., None]",
                    "Optional[List[str]]"
                ]
            }
        },
        "usage_error": {
            "name": "usage_error",
            "location": 117,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        }
    },
    "sensibility-master/sensibility/evaluation/cluster.py": {
        "dump": {
            "name": "dump",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "breakpoint": [
                    "str",
                    "bool",
                    "TextIO"
                ],
                "files": [
                    "List",
                    "Union[List,set]",
                    "Set",
                    "str",
                    "bool",
                    "Optional[str]",
                    "IO[str]"
                ]
            }
        },
        "find_break_point": {
            "name": "find_break_point",
            "location": 56,
            "return": [
                "float"
            ],
            "arguments": {
                "files": [
                    "int",
                    "str"
                ]
            }
        },
        "SummaryWithHash.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filehash": [
                    "str",
                    "float",
                    "int",
                    "Dict",
                    "Optional[str]",
                    "None"
                ],
                "summary": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "SummaryWithHash.ratio": {
            "name": "ratio",
            "location": 46,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sensibility-master/sensibility/evaluation/distance.py": {
        "tokenwise_distance": {
            "name": "tokenwise_distance",
            "location": 182,
            "return": [
                "str",
                "Union[str, bytes]",
                "bytes"
            ],
            "arguments": {
                "file_a": [
                    "bytes",
                    "bool",
                    "str",
                    "int"
                ],
                "file_b": [
                    "bytes",
                    "bool",
                    "str",
                    "int"
                ],
                "abstract_open_classes": [
                    "bool",
                    "bytes",
                    "str",
                    "int"
                ]
            }
        },
        "determine_edit": {
            "name": "determine_edit",
            "location": 189,
            "return": [
                "Optional[dict]",
                "dict"
            ],
            "arguments": {
                "file_a": [
                    "bytes",
                    "str",
                    "bool"
                ],
                "file_b": [
                    "bytes",
                    "str",
                    "bool"
                ],
                "abstract_open_classes": [
                    "bool",
                    "bytes",
                    "str"
                ]
            }
        },
        "determine_fix_event": {
            "name": "determine_fix_event",
            "location": 196,
            "return": [
                "str"
            ],
            "arguments": {
                "file_a": [
                    "bytes",
                    "str",
                    "int"
                ],
                "file_b": [
                    "bytes",
                    "str",
                    "int"
                ],
                "abstract_open_classes": [
                    "bool",
                    "bytes",
                    "str",
                    "int"
                ]
            }
        },
        "FixEvent.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fix": [
                    "int",
                    "str",
                    "Sequence[int]",
                    "bool"
                ],
                "line_no": [
                    "str",
                    "float"
                ]
            }
        },
        "FixEvent.mistake": {
            "name": "mistake",
            "location": 44,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FixEvent.old_token": {
            "name": "old_token",
            "location": 48,
            "return": [
                "None",
                "Mapping[str,Any]",
                "str",
                "Dict",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FixEvent.new_token": {
            "name": "new_token",
            "location": 54,
            "return": [
                "None",
                "str",
                "Optional[Dict]",
                "Mapping[str,Any]",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenDistance.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "List[Union[tuple[Union[int,int]],str,str,str,str,str,str,str]]",
                    "str",
                    "float",
                    "Union[int,float]",
                    "List[Tuple[int,int]]",
                    "bool"
                ],
                "b": [
                    "str",
                    "int",
                    "bool"
                ],
                "convert": [
                    "str",
                    "Dict[str,str]",
                    "Sequence[str]",
                    "Union[IndexBase,Series]",
                    "Union[str,Sequence[str]]"
                ]
            }
        },
        "TokenDistance.distance": {
            "name": "distance",
            "location": 86,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenDistance.determine_fix": {
            "name": "determine_fix",
            "location": 92,
            "return": [
                "FixEvent"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenDistance.of": {
            "name": "of",
            "location": 127,
            "return": [
                "TokenDistance"
            ],
            "arguments": {
                "cls": [
                    "Type[_TTokenDistance]"
                ],
                "file_a": [
                    "bytes",
                    "bool",
                    "float",
                    "str",
                    "List",
                    "Optional[str]",
                    "None"
                ],
                "file_b": [
                    "bytes",
                    "bool",
                    "float",
                    "str",
                    "List",
                    "Optional[str]",
                    "None"
                ],
                "abstract": [
                    "bool",
                    "bytes",
                    "float",
                    "str",
                    "List",
                    "Optional[str]"
                ]
            }
        },
        "PrivateUseAreaMapper.__init__": {
            "name": "__init__",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrivateUseAreaMapper.__getitem__": {
            "name": "__getitem__",
            "location": 164,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "str"
                ]
            }
        },
        "PrivateUseAreaMapper._get_next_code_point": {
            "name": "_get_next_code_point",
            "location": 172,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenDistance.determine_fix.to_index": {
            "name": "to_index",
            "location": 105,
            "return": [
                "dict",
                "str",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "token": [
                    "Sequence[str]",
                    "Sequence[Sequence[str]]",
                    "bool",
                    "str",
                    "bytes",
                    "Union[str, Callable]"
                ]
            }
        }
    },
    "sensibility-master/sensibility/evaluation/mistakes.py": {
        "Mistake.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sfid": [
                    "int",
                    "float",
                    "bool"
                ],
                "meid": [
                    "int",
                    "float",
                    "bool"
                ],
                "before": [
                    "float",
                    "int"
                ],
                "after": [
                    "float",
                    "int"
                ]
            }
        },
        "Mistake.__repr__": {
            "name": "__repr__",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mistakes.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conn": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Mistakes.__iter__": {
            "name": "__iter__",
            "location": 89,
            "return": [
                "Generator[(Mistake, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mistakes.eligible_mistakes": {
            "name": "eligible_mistakes",
            "location": 95,
            "return": [
                "Iterator[Mistake]",
                "Generator[Mistake]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mistakes.insert_distance": {
            "name": "insert_distance",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "str",
                    "int"
                ],
                "dist": [
                    "str",
                    "int"
                ]
            }
        },
        "Mistakes.insert_fix_event": {
            "name": "insert_fix_event",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "int",
                    "List[List[int]]",
                    "List[list[int]]"
                ],
                "event": [
                    "Dict",
                    "sensibility.evaluation.distance.FixEvent",
                    "int",
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        }
    },
    "sensibility-master/sensibility/evaluation/partitions.py": {
        "main": {
            "name": "main",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Split.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "split": [
                    "str",
                    "bytes",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "main.write_hashes": {
            "name": "write_hashes",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path",
                    "str",
                    "Tuple[str]",
                    "Iterable[pathlib.Path]"
                ],
                "hashes": [
                    "Iterable[str]",
                    "Optional[List[str]]",
                    "Optional[str]"
                ]
            }
        },
        "main.pop": {
            "name": "pop",
            "location": 189,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        },
        "main.push": {
            "name": "push",
            "location": 192,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "partition": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "main.Partition.__init__": {
            "name": "__init__",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "main.Partition.__eq__": {
            "name": "__eq__",
            "location": 128,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]"
                ]
            }
        },
        "main.Partition.__lt__": {
            "name": "__lt__",
            "location": 131,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]"
                ]
            }
        },
        "main.Partition.add_repo": {
            "name": "add_repo",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "repo": [
                    "T",
                    "str"
                ],
                "tokens": [
                    "str",
                    "Callable[[str], str]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "main.Partition.create_sets": {
            "name": "create_sets",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.Partition.save_to": {
            "name": "save_to",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "pathlib.Path",
                    "Union[str, pathlib.Path]",
                    "pathlib2.Path",
                    "bool",
                    "str"
                ]
            }
        },
        "main.Partition._commit_set": {
            "name": "_commit_set",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "set_name": [
                    "str"
                ],
                "directory": [
                    "pathlib.Path",
                    "str",
                    "Pattern"
                ]
            }
        }
    },
    "sensibility-master/sensibility/evaluation/vectors.py": {
        "query_table": {
            "name": "query_table",
            "location": 117,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "conn": [
                    "str",
                    "sqlite3.Cursor",
                    "int",
                    "Callable",
                    "sqlite3.Connection"
                ],
                "hashes": [
                    "str",
                    "sqlite3.Cursor",
                    "int",
                    "Callable",
                    "sqlite3.Connection"
                ]
            }
        },
        "determine_from_language": {
            "name": "determine_from_language",
            "location": 132,
            "return": [
                "sqlite3.dbapi2.Connection"
            ],
            "arguments": {}
        },
        "Vectors.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conn": [
                    "Optional[float]",
                    "None",
                    "Optional[str]",
                    "float",
                    "int",
                    "Optional[int]",
                    "str",
                    "Optional[Callable]",
                    "Optional[Hashable]",
                    "Callable",
                    "Hashable"
                ]
            }
        },
        "Vectors._instantiate_schema": {
            "name": "_instantiate_schema",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vectors._mmap": {
            "name": "_mmap",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vectors.length_of_vectors": {
            "name": "length_of_vectors",
            "location": 67,
            "return": [
                "int",
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "self": [],
                "hashes": [
                    "Callable",
                    "float",
                    "Project"
                ]
            }
        },
        "Vectors.disconnect": {
            "name": "disconnect",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vectors.__len__": {
            "name": "__len__",
            "location": 81,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vectors.__iter__": {
            "name": "__iter__",
            "location": 84,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vectors.__getitem__": {
            "name": "__getitem__",
            "location": 87,
            "return": [
                "sensibility.source_vector.SourceVector"
            ],
            "arguments": {
                "self": [],
                "filehash": [
                    "str",
                    "List"
                ]
            }
        },
        "Vectors.__setitem__": {
            "name": "__setitem__",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filehash": [
                    "Callable",
                    "str"
                ],
                "vector": [
                    "bool",
                    "bytes",
                    "float",
                    "int"
                ]
            }
        },
        "Vectors.__delitem__": {
            "name": "__delitem__",
            "location": 108,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vectors.from_filename": {
            "name": "from_filename",
            "location": 112,
            "return": [
                "Vectors"
            ],
            "arguments": {
                "cls": [
                    "Type[_TVectors]"
                ],
                "path": [
                    "str",
                    "TextIO",
                    "int"
                ]
            }
        }
    },
    "sensibility-master/sensibility/evaluation/__init__.py": {},
    "sensibility-master/sensibility/language/__init__.py": {
        "Language.id": {
            "name": "id",
            "location": 58,
            "return": [
                "str",
                "type",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Language.name": {
            "name": "name",
            "location": 62,
            "return": [
                "BaseException",
                "Exception",
                "Type[BaseException]",
                "type",
                "str",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Language.matches_extension": {
            "name": "matches_extension",
            "location": 68,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "Language.summarize": {
            "name": "summarize",
            "location": 82,
            "return": [
                "None",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "Language.vocabularize": {
            "name": "vocabularize",
            "location": 90,
            "return": [
                "Generator",
                "str",
                "List[str]",
                "Optional[str]",
                "Type[T]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "None",
                    "T",
                    "Optional[str]"
                ]
            }
        },
        "Language.vocabularize_with_locations": {
            "name": "vocabularize_with_locations",
            "location": 98,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]",
                    "Union[str,bytes]",
                    "bytes"
                ]
            }
        },
        "Language.token_locations": {
            "name": "token_locations",
            "location": 105,
            "return": [
                "Generator",
                "int",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "None",
                    "Optional[str]",
                    "bytes",
                    "T",
                    "Union[str,bytes]"
                ]
            }
        },
        "Language.to_index": {
            "name": "to_index",
            "location": 110,
            "return": [
                "Dict[str, Any]",
                "float"
            ],
            "arguments": {
                "self": [],
                "entry": [
                    "int",
                    "Sequence[int]",
                    "str",
                    "List[int]"
                ]
            }
        },
        "Language.to_index_or_unk": {
            "name": "to_index_or_unk",
            "location": 113,
            "return": [
                "Dict[str, Any]",
                "float"
            ],
            "arguments": {
                "self": [],
                "entry": [
                    "float",
                    "Dict",
                    "str",
                    "int"
                ]
            }
        },
        "Language.to_text": {
            "name": "to_text",
            "location": 116,
            "return": [
                "str",
                "Dict[str, List[str]]"
            ],
            "arguments": {
                "self": [],
                "entry": [
                    "str",
                    "Mapping",
                    "Dict",
                    "Callable[[str],T]",
                    "Callable[str,T]"
                ]
            }
        },
        "Language.to_source_text": {
            "name": "to_source_text",
            "location": 119,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "entry": [
                    "str",
                    "bool"
                ]
            }
        },
        "Language.__str__": {
            "name": "__str__",
            "location": 124,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Language.tokenize": {
            "name": "tokenize",
            "location": 130,
            "return": [
                "Iterable[lexical_analysis.Token]",
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "Iterable[Union[str,os.PathLike]]",
                    "Union[str,bytes]",
                    "bytes",
                    "Union[str,bytes,IO[bytes]]",
                    "IO",
                    "Optional[Tuple[Any,Any]]",
                    "None"
                ]
            }
        },
        "Language.check_syntax": {
            "name": "check_syntax",
            "location": 133,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "Iterable[Union[str,os.PathLike]]",
                    "Union[str,bytes]",
                    "bytes",
                    "Union[str,bytes,IO[bytes]]",
                    "IO",
                    "Optional[Tuple[Any,Any]]",
                    "None"
                ]
            }
        },
        "Language.summarize_tokens": {
            "name": "summarize_tokens",
            "location": 136,
            "return": [
                "SourceSummary",
                "None"
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "str",
                    "Iterable[T]",
                    "bool",
                    "Iterable[lexical_analysis.Token]",
                    "Iterable[sensibility.lexical_analysis.Token]",
                    "Dict",
                    "List[allennlp.data.tokenizers.Token]"
                ]
            }
        },
        "Language.vocabularize_tokens": {
            "name": "vocabularize_tokens",
            "location": 139,
            "return": [
                "Iterable[Tuple[lexical_analysis.Location,str]]",
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "Iterable[T]",
                    "str",
                    "Iterable[lexical_analysis.Token]",
                    "int",
                    "Literal",
                    "logging.Logger"
                ]
            }
        },
        "Language._as_tokens": {
            "name": "_as_tokens",
            "location": 146,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str"
                ]
            }
        },
        "LanguageProxy.__init__": {
            "name": "__init__",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LanguageProxy.is_initialized": {
            "name": "is_initialized",
            "location": 178,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LanguageProxy.wrapped_language": {
            "name": "wrapped_language",
            "location": 185,
            "return": [
                "int",
                "Literal",
                "Callable",
                "str",
                "Dict[str,Type]",
                "Dict[str,str]",
                "Set",
                "Dict[str,int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LanguageProxy.__repr__": {
            "name": "__repr__",
            "location": 190,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LanguageProxy.forget": {
            "name": "forget",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LanguageProxy.set": {
            "name": "set",
            "location": 199,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "LanguageProxy.set_language": {
            "name": "set_language",
            "location": 205,
            "return": [
                "LanguageProxy"
            ],
            "arguments": {
                "self": [
                    "_TLanguageProxy@@LanguageProxy@@"
                ],
                "name": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "LanguageProxy.unwrap": {
            "name": "unwrap",
            "location": 212,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LanguageProxy.determine_language": {
            "name": "determine_language",
            "location": 220,
            "return": [
                "Type",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LanguageProxy.load_langauge_by_name": {
            "name": "load_langauge_by_name",
            "location": 235,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "LanguageProxy.name": {
            "name": "name",
            "location": 250,
            "return": [
                "str",
                "Dict[str, str]",
                "list",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "LanguageProxy.tokenize": {
            "name": "tokenize",
            "location": 253,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LanguageProxy.check_syntax": {
            "name": "check_syntax",
            "location": 256,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "LanguageProxy.summarize_tokens": {
            "name": "summarize_tokens",
            "location": 259,
            "return": [
                "int",
                "dict",
                "Sequence[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LanguageProxy.vocabularize_tokens": {
            "name": "vocabularize_tokens",
            "location": 262,
            "return": [
                "dict",
                "int",
                "Sequence[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LanguageProxy.to_index": {
            "name": "to_index",
            "location": 265,
            "return": [
                "str",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LanguageProxy.to_index_or_unk": {
            "name": "to_index_or_unk",
            "location": 268,
            "return": [
                "str",
                "Optional[bool]",
                "Optional[int]",
                "Dict[str, int]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LanguageProxy.to_text": {
            "name": "to_text",
            "location": 271,
            "return": [
                "str",
                "Exception",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LanguageProxy.to_source_text": {
            "name": "to_source_text",
            "location": 274,
            "return": [
                "str",
                "dict",
                "Mapping[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConcreteLanguageProxy.__getattr__": {
            "name": "__getattr__",
            "location": 284,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "List",
                    "bytes"
                ]
            }
        }
    },
    "sensibility-master/sensibility/language/java/__init__.py": {
        "to_str": {
            "name": "to_str",
            "location": 77,
            "return": [
                "str",
                "os.PathLike",
                "List[str]"
            ],
            "arguments": {
                "source": [
                    "str",
                    "Union[str,bytes,IO[bytes]]",
                    "bytes",
                    "IO",
                    "Union[str,bool]",
                    "bool",
                    "pathlib.Path"
                ]
            }
        },
        "JavaVocabulary.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entries": [
                    "bool",
                    "Dict[str,Any]",
                    "Callable[[Any,Any],bool]",
                    "Callable[A,bool]"
                ],
                "reprs": [
                    "List[str]",
                    "List[dict]",
                    "Optional[Iterable[str]]",
                    "Iterable[str]",
                    "Iterable[cirq.Operation]",
                    "List[Dict]"
                ]
            }
        },
        "JavaVocabulary.to_source_text": {
            "name": "to_source_text",
            "location": 54,
            "return": [
                "str",
                "List[dict]",
                "Dict[str, Any]",
                "float",
                "bool"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "JavaVocabulary.load": {
            "name": "load",
            "location": 60,
            "return": [
                "JavaVocabulary"
            ],
            "arguments": {}
        },
        "LazyVocabulary.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "LazyVocabulary.__get__": {
            "name": "__get__",
            "location": 94,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "List",
                    "List[int]",
                    "Optional[pathlib.Path]",
                    "None"
                ],
                "value": [
                    "str",
                    "List"
                ]
            }
        },
        "JavaToken.__init__": {
            "name": "__init__",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JavaToken.__repr__": {
            "name": "__repr__",
            "location": 112,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Java.java": {
            "name": "java",
            "location": 128,
            "return": [
                "int",
                "str",
                "Callable",
                "Dict[str,Any]",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Java.tokenize": {
            "name": "tokenize",
            "location": 146,
            "return": [
                "Generator[(JavaToken, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "Type"
                ]
            }
        },
        "Java.check_syntax": {
            "name": "check_syntax",
            "location": 166,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "Java.summarize_tokens": {
            "name": "summarize_tokens",
            "location": 169,
            "return": [
                "SourceSummary",
                "str",
                "List[str]",
                "Optional[str]",
                "Optional[Union[str,pathlib.Path]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "source": []
            }
        },
        "Java.vocabularize_tokens": {
            "name": "vocabularize_tokens",
            "location": 174,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "Iterable[lexical_analysis.Token]",
                    "int",
                    "Literal"
                ]
            }
        },
        "Java.java.remove_reference": {
            "name": "remove_reference",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sensibility-master/sensibility/language/javascript/esprima_interface.py": {
        "get_server": {
            "name": "get_server",
            "location": 83,
            "return": [
                "Server"
            ],
            "arguments": {}
        },
        "start": {
            "name": "start",
            "location": 92,
            "return": [
                "Server"
            ],
            "arguments": {}
        },
        "tokenize": {
            "name": "tokenize",
            "location": 117,
            "return": [
                "str",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "file_obj": [
                    "IO",
                    "pathlib.Path",
                    "IO[bytes]"
                ]
            }
        },
        "check_syntax": {
            "name": "check_syntax",
            "location": 128,
            "return": [
                "bool"
            ],
            "arguments": {
                "source_file": [
                    "IO",
                    "IO[bytes]",
                    "bool",
                    "str",
                    "Union[str,pathlib.Path]",
                    "pathlib.Path"
                ]
            }
        },
        "Server.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "socket_path": [
                    "str",
                    "path.Path",
                    "pathlib.Path"
                ],
                "process": [
                    "Dict",
                    "bool"
                ]
            }
        },
        "Server.check_syntax": {
            "name": "check_syntax",
            "location": 54,
            "return": [
                "bytes",
                "str",
                "Tuple[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "float",
                    "TextIO",
                    "List",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Server.tokenize": {
            "name": "tokenize",
            "location": 57,
            "return": [
                "str",
                "List[List[int]]",
                "bool",
                "List[pathlib.Path]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "float",
                    "TextIO",
                    "List",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Server.exit": {
            "name": "exit",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Server._communicate": {
            "name": "_communicate",
            "location": 68,
            "return": [
                "List[str]",
                "Union[str, List[str]]",
                "Dict[str, Any]",
                "Dict[str, dict]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "type_code": [
                    "type"
                ],
                "payload": [
                    "type"
                ]
            }
        },
        "Server._ensure_alive": {
            "name": "_ensure_alive",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "start.cleanup": {
            "name": "cleanup",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sensibility-master/sensibility/language/javascript/__init__.py": {
        "ensure_bytes": {
            "name": "ensure_bytes",
            "location": 81,
            "return": [
                "bytes"
            ],
            "arguments": {
                "source": []
            }
        },
        "esprima_to_tokens": {
            "name": "esprima_to_tokens",
            "location": 92,
            "return": [
                "list"
            ],
            "arguments": {
                "raw_tokens": []
            }
        },
        "synthetic_file": {
            "name": "synthetic_file",
            "location": 124,
            "return": [
                "IO[bytes]"
            ],
            "arguments": {
                "source": []
            }
        },
        "from_esprima_format": {
            "name": "from_esprima_format",
            "location": 138,
            "return": [
                "sensibility.lexical_analysis.Token"
            ],
            "arguments": {
                "token": []
            }
        },
        "unescape_unicode": {
            "name": "unescape_unicode",
            "location": 243,
            "return": [
                "str"
            ],
            "arguments": {
                "text": []
            }
        },
        "JavaScript.tokenize": {
            "name": "tokenize",
            "location": 46,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "source": []
            }
        },
        "JavaScript.check_syntax": {
            "name": "check_syntax",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "source": []
            }
        },
        "JavaScript.summarize_tokens": {
            "name": "summarize_tokens",
            "location": 58,
            "return": [
                "SourceSummary"
            ],
            "arguments": {
                "self": [],
                "source": []
            }
        },
        "JavaScript.vocabularize_tokens": {
            "name": "vocabularize_tokens",
            "location": 65,
            "return": [
                "Generator[(Tuple[(Any, str)], Any, None)]"
            ],
            "arguments": {
                "self": [],
                "tokens": []
            }
        },
        "JavaScriptWithServer.tokenize": {
            "name": "tokenize",
            "location": 73,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "source": []
            }
        },
        "JavaScriptWithServer.check_syntax": {
            "name": "check_syntax",
            "location": 77,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "source": []
            }
        },
        "SafeSourceFile.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": []
            }
        },
        "SafeSourceFile.__enter__": {
            "name": "__enter__",
            "location": 107,
            "return": [
                "IOBase"
            ],
            "arguments": {
                "self": []
            }
        },
        "SafeSourceFile.__exit__": {
            "name": "__exit__",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringifyLexeme.__call__": {
            "name": "__call__",
            "location": 189,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "token": []
            }
        },
        "StringifyLexeme.Boolean": {
            "name": "Boolean",
            "location": 199,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "StringifyLexeme.Identifier": {
            "name": "Identifier",
            "location": 202,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "StringifyLexeme.Keyword": {
            "name": "Keyword",
            "location": 205,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "StringifyLexeme.Null": {
            "name": "Null",
            "location": 213,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "StringifyLexeme.Numeric": {
            "name": "Numeric",
            "location": 216,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "StringifyLexeme.Punctuator": {
            "name": "Punctuator",
            "location": 219,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "StringifyLexeme.String": {
            "name": "String",
            "location": 222,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "StringifyLexeme.RegularExpression": {
            "name": "RegularExpression",
            "location": 225,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "StringifyLexeme.Template": {
            "name": "Template",
            "location": 228,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        }
    },
    "sensibility-master/sensibility/language/python/__init__.py": {
        "is_physical_token": {
            "name": "is_physical_token",
            "location": 170,
            "return": [
                "bool"
            ],
            "arguments": {
                "token": [
                    "str",
                    "Dict",
                    "MutableMapping",
                    "MutableMapping[Any,Any]",
                    "List[str]",
                    "bytes",
                    "List[tuple[Union[str,Any]]]",
                    "tokenize.TokenInfo",
                    "List[Tuple[str,Any]]"
                ]
            }
        },
        "open_closed_tokens": {
            "name": "open_closed_tokens",
            "location": 181,
            "return": [
                "Text",
                "bool",
                "app.models.Position"
            ],
            "arguments": {
                "token": [
                    "str",
                    "Dict[str,Any]",
                    "bool",
                    "T"
                ]
            }
        },
        "Python.tokenize": {
            "name": "tokenize",
            "location": 46,
            "return": [
                "List[sensibility.lexical_analysis.Token]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "Iterable[Union[str,os.PathLike]]",
                    "Union[str,bytes]",
                    "bytes",
                    "Union[str,bytes,IO[bytes]]",
                    "IO",
                    "Optional[Tuple[Any,Any]]",
                    "None"
                ]
            }
        },
        "Python.check_syntax": {
            "name": "check_syntax",
            "location": 85,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "Union[str,bytes]",
                    "bool",
                    "bytes",
                    "List[Tuple]",
                    "List[tuple]"
                ]
            }
        },
        "Python.summarize_tokens": {
            "name": "summarize_tokens",
            "location": 119,
            "return": [
                "SourceSummary",
                "str",
                "bool",
                "Optional[str]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "Iterable[lexical_analysis.Token]",
                    "List['OverloadPart']",
                    "List[Type]",
                    "Optional[Tuple[int, Any]]"
                ]
            }
        },
        "Python.vocabularize_tokens": {
            "name": "vocabularize_tokens",
            "location": 142,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "Iterable[lexical_analysis.Token]",
                    "int",
                    "Literal"
                ]
            }
        },
        "Python.tokenize.open_as_file": {
            "name": "open_as_file",
            "location": 67,
            "return": [
                "BytesIO",
                "pathlib.Path",
                "str"
            ],
            "arguments": {}
        }
    },
    "sensibility-master/sensibility/miner/connection.py": {
        "get_redis_client": {
            "name": "get_redis_client",
            "location": 39,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "get_sqlite3_path": {
            "name": "get_sqlite3_path",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_sqlite3_connection": {
            "name": "get_sqlite3_connection",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_github_client": {
            "name": "get_github_client",
            "location": 64,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "get_github_token": {
            "name": "get_github_token",
            "location": 72,
            "return": [
                "str",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {}
        }
    },
    "sensibility-master/sensibility/miner/corpus.py": {
        "FileInfo.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mappings": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[Union[IPUtilityFunction,UtilityDistribution]]",
                    "Dict[str,Any]",
                    "int",
                    "Optional[Dict[str,Any]]",
                    "Sequence[MutableSet]",
                    "Optional[int]",
                    "Sequence[MutableSet[int]]",
                    "sqlalchemy.orm.Session"
                ],
                "summary": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[Union[IPUtilityFunction,UtilityDistribution]]",
                    "Dict[str,Any]",
                    "int",
                    "Optional[Dict[str,Any]]",
                    "Sequence[MutableSet]",
                    "Optional[int]",
                    "Sequence[MutableSet[int]]",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "FileInfo.filehash": {
            "name": "filehash",
            "location": 61,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileInfo.owner": {
            "name": "owner",
            "location": 65,
            "return": [
                "bool",
                "Iterable[str]",
                "Sequence[Sequence[str]]",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileInfo.name": {
            "name": "name",
            "location": 69,
            "return": [
                "str",
                "Type",
                "zerver.models.Realm",
                "Callable[..., T]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileInfo.href": {
            "name": "href",
            "location": 73,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileInfo.license": {
            "name": "license",
            "location": 77,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileInfo.path": {
            "name": "path",
            "location": 81,
            "return": [
                "str",
                "paradigm.catalog.Path",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileInfo.n_tokens": {
            "name": "n_tokens",
            "location": 85,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileInfo.sloc": {
            "name": "sloc",
            "location": 89,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileInfo.is_unique": {
            "name": "is_unique",
            "location": 93,
            "return": [
                "bool",
                "Dict[str,Any]",
                "str",
                "Dict[str,Dict[str,str]]",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileInfo._any": {
            "name": "_any",
            "location": 101,
            "return": [
                "Callable",
                "List[int]",
                "app.models.Article",
                "List[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Corpus.__init__": {
            "name": "__init__",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "engine": [
                    "None",
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[pathlib.Path]",
                    "Optional[zerver.models.Realm]"
                ],
                "url": [
                    "str",
                    "None",
                    "Dict",
                    "Optional[str]",
                    "pathlib.Path",
                    "Optional[pathlib.Path]"
                ],
                "path": [
                    "None",
                    "str",
                    "Optional[str]",
                    "Optional[pathlib.Path]"
                ],
                "writable": [
                    "bool",
                    "Dict",
                    "psycopg2.extensions.connection",
                    "Dict[str,Any]",
                    "Optional[str]"
                ]
            }
        },
        "Corpus.language": {
            "name": "language",
            "location": 143,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Corpus.empty": {
            "name": "empty",
            "location": 157,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Corpus.eligible_sources": {
            "name": "eligible_sources",
            "location": 163,
            "return": [
                "Iterator[models.SourceFile]",
                "Generator[SourceFile]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Corpus.source_summaries": {
            "name": "source_summaries",
            "location": 174,
            "return": [
                "Iterator[Tuple[str,sensibility.language.SourceSummary]]",
                "Generator[tuple[SourceSummary]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Corpus.sources_with_repository": {
            "name": "sources_with_repository",
            "location": 186,
            "return": [
                "Iterator[Tuple[str,str,pathlib.PurePosixPath,bytes]]",
                "Generator[tuple[PurePosixPath]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Corpus.__getitem__": {
            "name": "__getitem__",
            "location": 198,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "filehash": [
                    "bool",
                    "str"
                ]
            }
        },
        "Corpus.set_metadata": {
            "name": "set_metadata",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Corpus.insert_repository": {
            "name": "insert_repository",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "repo": [
                    "Callable",
                    "str"
                ]
            }
        },
        "Corpus.insert_source_file_from_repo": {
            "name": "insert_source_file_from_repo",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entry": [
                    "str",
                    "bytes",
                    "IO",
                    "Union[str,pathlib3x.Path,IO[str]]",
                    "pathlib.Path"
                ]
            }
        },
        "Corpus.insert_source_summary": {
            "name": "insert_source_summary",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filehash": [
                    "Iterable[str]",
                    "str",
                    "daylighdb.models.Profile",
                    "language.DocumentNode",
                    "daylighdb.models.Photo"
                ],
                "summary": [
                    "Iterable[str]",
                    "str",
                    "daylighdb.models.Profile",
                    "language.DocumentNode",
                    "daylighdb.models.Photo"
                ]
            }
        },
        "Corpus.insert_failure": {
            "name": "insert_failure",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filehash": [
                    "int"
                ],
                "reason": [
                    "int",
                    "None"
                ],
                "ignore": [
                    "int",
                    "bool"
                ]
            }
        },
        "Corpus.get_source": {
            "name": "get_source",
            "location": 262,
            "return": [
                "str",
                "pathlib.Path",
                "List[str]",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "filehash": [
                    "str",
                    "Dict[str,Any]",
                    "bool",
                    "Dict",
                    "pathlib.Path"
                ]
            }
        },
        "Corpus.get_info": {
            "name": "get_info",
            "location": 271,
            "return": [
                "FileInfo"
            ],
            "arguments": {
                "self": [],
                "filehash": [
                    "str",
                    "List[str]",
                    "pathlib.Path"
                ]
            }
        },
        "Corpus.get_repositories_with_n_tokens": {
            "name": "get_repositories_with_n_tokens",
            "location": 304,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Corpus.get_eligible_hashes_in_repo": {
            "name": "get_eligible_hashes_in_repo",
            "location": 319,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "repo": [],
                "elligible": [
                    "bool",
                    "Sequence[int]",
                    "Exception"
                ]
            }
        },
        "Corpus._initialize_sqlite3": {
            "name": "_initialize_sqlite3",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "writable": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Corpus._initialize_sqlite3.set_sqlite_pragma": {
            "name": "set_sqlite_pragma",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "dbapi_connection": [
                    "str",
                    "int",
                    "float"
                ],
                "_connection_record": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "sensibility-master/sensibility/miner/downloader.py": {
        "clean_path": {
            "name": "clean_path",
            "location": 267,
            "return": [
                "pathlib.PurePosixPath"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "coerce_to_bytes": {
            "name": "coerce_to_bytes",
            "location": 276,
            "return": [
                "pathlib.Path",
                "Dict[str, int]",
                "esm.models.service_type.ServiceType",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "thing": [
                    "Union[str, bytes]",
                    "str",
                    "tuple",
                    "bool",
                    "int",
                    "MutableMapping[str, Any]"
                ]
            }
        },
        "Downloader.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Downloader.loop_forever": {
            "name": "loop_forever",
            "location": 74,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Downloader.get_a_job": {
            "name": "get_a_job",
            "location": 86,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Downloader.acknowledge": {
            "name": "acknowledge",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "Downloader.do_job": {
            "name": "do_job",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job": [
                    "bool",
                    "str",
                    "List[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Downloader.download": {
            "name": "download",
            "location": 111,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "repo": [
                    "pathlib.Path",
                    "Callable",
                    "int"
                ]
            }
        },
        "Downloader.log_error": {
            "name": "log_error",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job": [
                    "str",
                    "logging.Logger"
                ]
            }
        },
        "Downloader.insert_repository": {
            "name": "insert_repository",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "repo": [
                    "logging.Logger",
                    "str",
                    "bool",
                    "models.RepositoryMetadata"
                ]
            }
        },
        "Downloader.insert_source_file": {
            "name": "insert_source_file",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entry": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "Downloader.extract_sources": {
            "name": "extract_sources",
            "location": 141,
            "return": [
                "Generator[(Tuple[(pathlib.PurePosixPath, Any)], Any, None)]"
            ],
            "arguments": {
                "self": [],
                "archive": [
                    "zipfile.ZipFile",
                    "str",
                    "pathlib.Path",
                    "bool"
                ]
            }
        },
        "Downloader.zip_url_for": {
            "name": "zip_url_for",
            "location": 152,
            "return": [
                "str"
            ],
            "arguments": {
                "repo": [
                    "models.RepositoryMetadata",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "GitHubGraphQLClient.__init__": {
            "name": "__init__",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitHubGraphQLClient.fetch_repository": {
            "name": "fetch_repository",
            "location": 175,
            "return": [
                "dict",
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "repo": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "GitHubGraphQLClient.query": {
            "name": "query",
            "location": 218,
            "return": [
                "int",
                "List[str]",
                "Dict[str, str]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, object]",
                    "str"
                ]
            }
        },
        "GitHubGraphQLClient.update_rate_limit": {
            "name": "update_rate_limit",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resp": [
                    "str",
                    "requests.Response",
                    "bytes",
                    "Callable"
                ]
            }
        },
        "GitHubGraphQLClient.ratelimit_reset": {
            "name": "ratelimit_reset",
            "location": 248,
            "return": [
                "str",
                "datetime.datetime",
                "int",
                "Sequence[str]",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitHubGraphQLClient.seconds_until_reset": {
            "name": "seconds_until_reset",
            "location": 252,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitHubGraphQLClient.wait_for_rate_limit": {
            "name": "wait_for_rate_limit",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sensibility-master/sensibility/miner/models.py": {
        "RepositoryID.__str__": {
            "name": "__str__",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RepositoryID.parse": {
            "name": "parse",
            "location": 56,
            "return": [
                "str",
                "bool",
                "Iterable[str]",
                "IO[str]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "text": [
                    "str",
                    "Container[str]",
                    "Container",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "SourceFile.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None"
                ]
            }
        },
        "SourceFile.filehash": {
            "name": "filehash",
            "location": 80,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SourceFile.__repr__": {
            "name": "__repr__",
            "location": 85,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockSourceFile.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filehash": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "MockSourceFile.source": {
            "name": "source",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockSourceFile.filehash": {
            "name": "filehash",
            "location": 98,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SourceFileInRepository.owner": {
            "name": "owner",
            "location": 110,
            "return": [
                "bool",
                "Iterable[str]",
                "Sequence[Sequence[str]]",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SourceFileInRepository.name": {
            "name": "name",
            "location": 114,
            "return": [
                "str",
                "Type",
                "Callable[..., T]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SourceFileInRepository.filehash": {
            "name": "filehash",
            "location": 118,
            "return": [
                "str",
                "pathlib.Path",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SourceFileInRepository.revision": {
            "name": "revision",
            "location": 122,
            "return": [
                "int",
                "Callable[[Mapping], T]",
                "List[List[str]]",
                "str",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "SourceFileInRepository.license": {
            "name": "license",
            "location": 126,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SourceFileInRepository.href": {
            "name": "href",
            "location": 130,
            "return": [
                "Text",
                "str",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sensibility-master/sensibility/miner/names.py": {
        "WithErrors.errors": {
            "name": "errors",
            "location": 30,
            "return": [
                "Text",
                "str",
                "Callable",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkQueueName.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "WorkQueueName.__getitem__": {
            "name": "__getitem__",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "queue_id": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "sensibility-master/sensibility/miner/rate_limit.py": {
        "wait_for_rate_limit": {
            "name": "wait_for_rate_limit",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "resource": [
                    "bytes"
                ]
            }
        },
        "seconds_until": {
            "name": "seconds_until",
            "location": 49,
            "return": [
                "int"
            ],
            "arguments": {
                "timestamp": [
                    "float",
                    "str",
                    "int",
                    "datetime.timezone",
                    "datetime.timedelta"
                ]
            }
        }
    },
    "sensibility-master/sensibility/miner/rqueue.py": {
        "Queue.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "Dict",
                    "Dict[str,Any]"
                ],
                "client": [
                    "Optional[str]",
                    "None",
                    "str",
                    "Optional[Dict[str,str]]",
                    "Dict",
                    "Dict[str,str]"
                ]
            }
        },
        "Queue.enqueue": {
            "name": "enqueue",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "thing": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "Queue.pop": {
            "name": "pop",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Queue.__lshift__": {
            "name": "__lshift__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Dict",
                    "AbstractSet",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "Queue.__rshift__": {
            "name": "__rshift__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Dict",
                    "AbstractSet",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "Queue.__iter__": {
            "name": "__iter__",
            "location": 48,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Queue.clear": {
            "name": "clear",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Queue.remove": {
            "name": "remove",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "List[str]",
                    "bool",
                    "str",
                    "List",
                    "defaultdict",
                    "DefaultDict",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]"
                ],
                "count": [
                    "int",
                    "List[str]",
                    "bool",
                    "defaultdict",
                    "str",
                    "List",
                    "Tuple[str,str]"
                ]
            }
        },
        "Queue.transfer": {
            "name": "transfer",
            "location": 57,
            "return": [
                "str",
                "Tuple[str]",
                "Union[str, int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "Callable",
                    "Optional[Dict[str,str]]",
                    "Dict",
                    "Dict[str,str]",
                    "Type",
                    "None"
                ],
                "timeout": [
                    "int",
                    "str",
                    "Optional[Dict[str,str]]",
                    "Callable",
                    "Dict",
                    "Type"
                ]
            }
        },
        "WorkQueue.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "queue": [
                    "str",
                    "bool",
                    "Dict[str,str]",
                    "Dict"
                ]
            }
        },
        "WorkQueue.name": {
            "name": "name",
            "location": 69,
            "return": [
                "str",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkQueue.get": {
            "name": "get",
            "location": 72,
            "return": [
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "int",
                    "str",
                    "Optional[Any]",
                    "bool"
                ]
            }
        },
        "WorkQueue.acknowledge": {
            "name": "acknowledge",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "bytes",
                    "float",
                    "Union[str,bytes]"
                ]
            }
        }
    },
    "sensibility-master/sensibility/miner/util.py": {
        "filehashes": {
            "name": "filehashes",
            "location": 27,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "file": [
                    "str",
                    "IO[str]",
                    "List[str]",
                    "BinaryIO",
                    "bool",
                    "list"
                ]
            }
        },
        "create_query_table": {
            "name": "create_query_table",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "conn": [
                    "sqlite3.Connection",
                    "str",
                    "sqlite3.Cursor",
                    "List[str]",
                    "Dict[str, str]"
                ],
                "hashes": [
                    "bool",
                    "None",
                    "Union[List,Dict,None]",
                    "Sequence[str]",
                    "Optional[str]",
                    "List",
                    "Dict",
                    "str"
                ]
            }
        }
    },
    "sensibility-master/sensibility/miner/_schema.py": {
        "_to": {
            "name": "_to",
            "location": 51,
            "return": [
                "Generator[(tuple, Any, None)]"
            ],
            "arguments": {
                "table_name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "compile_create": {
            "name": "compile_create",
            "location": 151,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "element": [
                    "List[dict]",
                    "str",
                    "List[Dict]",
                    "sqlalchemy.sql.ColumnElement"
                ],
                "compiler": [
                    "List[dict]",
                    "str",
                    "List[Dict]",
                    "sqlalchemy.sql.ColumnElement"
                ]
            }
        },
        "compile_drop": {
            "name": "compile_drop",
            "location": 156,
            "return": [
                "Text",
                "str",
                "bool",
                "Iterable[str]"
            ],
            "arguments": {
                "element": [
                    "str",
                    "Dict[str,Any]"
                ],
                "compiler": [
                    "List[int]",
                    "Sequence[T]",
                    "Tuple"
                ]
            }
        },
        "view": {
            "name": "view",
            "location": 160,
            "return": [
                "bool",
                "str",
                "float",
                "Type",
                "int",
                "bytes"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "metadata": [
                    "str"
                ],
                "selectable": [
                    "str"
                ]
            }
        },
        "CreateView.__init__": {
            "name": "__init__",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str,Any]",
                    "List[str]",
                    "Dict"
                ],
                "selectable": [
                    "int",
                    "str",
                    "Sequence",
                    "None",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "DropView.__init__": {
            "name": "__init__",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str,Any]",
                    "List[str]",
                    "Dict"
                ]
            }
        }
    },
    "sensibility-master/sensibility/miner/__init__.py": {},
    "sensibility-master/sensibility/model/__init__.py": {},
    "sensibility-master/sensibility/model/lstm/loop_batches.py": {
        "one_hot_batch": {
            "name": "one_hot_batch",
            "location": 106,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "batch": [
                    "float",
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "LoopBatchesEndlessly.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoopBatchesEndlessly.__iter__": {
            "name": "__iter__",
            "location": 64,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoopBatchesEndlessly._yield_sentences_from_corpus": {
            "name": "_yield_sentences_from_corpus",
            "location": 73,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoopBatchesEndlessly._yield_batches_endlessly": {
            "name": "_yield_batches_endlessly",
            "location": 95,
            "return": [
                "Generator[(nothing, Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogBatch.__init__": {
            "name": "__init__",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "batch": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "LogBatch.__str__": {
            "name": "__str__",
            "location": 163,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pct.__init__": {
            "name": "__init__",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "int",
                    "float",
                    "str",
                    "bool"
                ],
                "total": [
                    "int",
                    "float",
                    "str",
                    "bool"
                ]
            }
        },
        "Pct.__format__": {
            "name": "__format__",
            "location": 186,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "_format": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "List",
                    "None"
                ]
            }
        },
        "LogBatch.__str__.generate_parts": {
            "name": "generate_parts",
            "location": 167,
            "return": [
                "typing.Generator[typing.Text]"
            ],
            "arguments": {}
        }
    },
    "sensibility-master/sensibility/model/lstm/remote.py": {
        "RemoteDualLSTMModel.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "RemoteDualLSTMModel.language_name": {
            "name": "language_name",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoteDualLSTMModel.predict_file": {
            "name": "predict_file",
            "location": 50,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "vector": [
                    "str",
                    "Sequence[sensibility.vocabulary.Vind]",
                    "Dict[str,Any]",
                    "List[str]",
                    "List",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "RemoteDualLSTMModel.connect": {
            "name": "connect",
            "location": 67,
            "return": [
                "RemoteDualLSTMModel"
            ],
            "arguments": {
                "cls": [
                    "Type[_TRemoteDualLSTMModel]"
                ],
                "port": [
                    "int",
                    "Type",
                    "numpy.array",
                    "float"
                ]
            }
        },
        "RemoteDualLSTMModel.predict_file.deserialize_result": {
            "name": "deserialize_result",
            "location": 60,
            "return": [
                "typing.Generator[TokenResult]"
            ],
            "arguments": {}
        }
    },
    "sensibility-master/sensibility/model/lstm/train.py": {
        "validation_loss": {
            "name": "validation_loss",
            "location": 340,
            "return": [
                "float"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "Optional[Container[str]]",
                    "Container",
                    "None"
                ]
            }
        },
        "epoch_from_path": {
            "name": "epoch_from_path",
            "location": 355,
            "return": [
                "int"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "path_to_best_model": {
            "name": "path_to_best_model",
            "location": 365,
            "return": [
                "List",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "model_dir": [
                    "pathlib.Path",
                    "catalog.Path",
                    "Sequence[str]",
                    "str"
                ]
            }
        },
        "layers": {
            "name": "layers",
            "location": 375,
            "return": [
                "Tuple[(int, ...)]"
            ],
            "arguments": {
                "string": [
                    "str",
                    "Dict",
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 429,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "slurp": {
            "name": "slurp",
            "location": 461,
            "return": [
                "list"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "subset": {
            "name": "subset",
            "location": 469,
            "return": [
                "set"
            ],
            "arguments": {
                "xs": [
                    "int"
                ],
                "max_size": [
                    "int"
                ]
            }
        },
        "full_cores_available": {
            "name": "full_cores_available",
            "location": 476,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "configure_gpu": {
            "name": "configure_gpu",
            "location": 486,
            "return": [
                "None"
            ],
            "arguments": {
                "prefered": [
                    "Optional[str]",
                    "Dict",
                    "str",
                    "None"
                ]
            }
        },
        "ModelDescription.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelDescription.train": {
            "name": "train",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelDescription.train_from_scratch": {
            "name": "train_from_scratch",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelDescription.train_from_existing": {
            "name": "train_from_existing",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelDescription._train": {
            "name": "_train",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "continue_from": [
                    "Optional[Any]",
                    "None",
                    "Optional[str]",
                    "Any",
                    "Optional[int]",
                    "str",
                    "int"
                ]
            }
        },
        "ModelDescription.compile_model": {
            "name": "compile_model",
            "location": 197,
            "return": [
                "List[app.models.Question]",
                "app.models.Question"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelDescription.create_batches": {
            "name": "create_batches",
            "location": 253,
            "return": [
                "Tuple[(sensibility.model.lstm.loop_batches.LoopBatchesEndlessly, sensibility.model.lstm.loop_batches.LoopBatchesEndlessly)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelDescription.save_manifest": {
            "name": "save_manifest",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelDescription._batches_per_epoch": {
            "name": "_batches_per_epoch",
            "location": 289,
            "return": [
                "int",
                "Dict[str,int]",
                "trezor.utils.Writer",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "training_samples": [
                    "List[dict]",
                    "int",
                    "Optional[List[int]]",
                    "List[int]",
                    "bool",
                    "None"
                ]
            }
        },
        "ModelDescription._ensure_vectors_exist": {
            "name": "_ensure_vectors_exist",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelDescription.incomplete_path": {
            "name": "incomplete_path",
            "location": 302,
            "return": [
                "Path",
                "pathlib.Path",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelDescription.model_path": {
            "name": "model_path",
            "location": 306,
            "return": [
                "pathlib.Path",
                "str",
                "dict",
                "pathlib.PurePosixPath",
                "paradigm.catalog.Path",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelDescription.progress_path": {
            "name": "progress_path",
            "location": 310,
            "return": [
                "pathlib.Path",
                "str",
                "paradigm.catalog.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelDescription.manifest_path": {
            "name": "manifest_path",
            "location": 314,
            "return": [
                "pathlib.Path",
                "str",
                "paradigm.catalog.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelDescription.weight_path_pattern": {
            "name": "weight_path_pattern",
            "location": 318,
            "return": [
                "pathlib.Path",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelDescription.interrupted_path": {
            "name": "interrupted_path",
            "location": 324,
            "return": [
                "str",
                "pathlib.Path",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelDescription.training_set_size": {
            "name": "training_set_size",
            "location": 328,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelDescription.validation_set_size": {
            "name": "validation_set_size",
            "location": 332,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelDescription.direction": {
            "name": "direction",
            "location": 336,
            "return": [
                "Text",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sensibility-master/sensibility/model/lstm/__init__.py": {
        "model_context_length": {
            "name": "model_context_length",
            "location": 141,
            "return": [
                "Callable",
                "Optional[str]",
                "Type"
            ],
            "arguments": {
                "model": [
                    "Type",
                    "str",
                    "Model",
                    "List[tuple[Union[int,int,float]]]",
                    "Type[T]",
                    "models.cf_recommend_models.ICfRecommendationModel",
                    "List[Tuple[int,int,float]]",
                    "allennlp.models.Model",
                    "Type[abilian.core.models.Model]"
                ]
            }
        },
        "test": {
            "name": "test",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "dirname": [
                    "Mapping[str,Any]",
                    "None",
                    "Mapping"
                ]
            }
        },
        "DualLSTMModel.predict_file": {
            "name": "predict_file",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vector": [
                    "str",
                    "Sequence[sensibility.vocabulary.Vind]",
                    "Dict[str,Any]",
                    "List[str]",
                    "List",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "KerasDualLSTMModel.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KerasDualLSTMModel.predict_file": {
            "name": "predict_file",
            "location": 75,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "vector": [
                    "str",
                    "Sequence[sensibility.vocabulary.Vind]",
                    "Dict[str,Any]",
                    "List[str]",
                    "List",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "KerasDualLSTMModel.from_directory": {
            "name": "from_directory",
            "location": 93,
            "return": [
                "KerasDualLSTMModel"
            ],
            "arguments": {
                "cls": [
                    "Type[_TKerasDualLSTMModel]"
                ],
                "dirname": [
                    "str",
                    "Dict[str,int]",
                    "Union[pathlib.Path,str]",
                    "Exception",
                    "bool",
                    "Tuple[Union[str,float]]",
                    "Tuple[str,float]"
                ]
            }
        },
        "KerasDualLSTMModel.from_filename": {
            "name": "from_filename",
            "location": 101,
            "return": [
                "str",
                "bool",
                "Optional[Sequence[Any]]",
                "List[int]",
                "List[Optional[str]]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "bool",
                    "Callable[str,None]",
                    "pathlib.Path",
                    "Callable[[str],None]"
                ]
            }
        },
        "OneHotter.__init__": {
            "name": "__init__",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneHotter.forwards": {
            "name": "forwards",
            "location": 117,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "vector": [
                    "int",
                    "Callable",
                    "str",
                    "models.Question"
                ]
            }
        },
        "OneHotter.backwards": {
            "name": "backwards",
            "location": 120,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "vector": [
                    "int",
                    "Callable",
                    "str",
                    "models.Question"
                ]
            }
        },
        "OneHotter._one_hot": {
            "name": "_one_hot",
            "location": 123,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "vector": [
                    "numpy.array",
                    "int",
                    "List[int]",
                    "bool"
                ],
                "sentenizer": [
                    "Optional[int]",
                    "int",
                    "bool",
                    "None"
                ]
            }
        },
        "KerasDualLSTMModel.predict_file.generate_pairs": {
            "name": "generate_pairs",
            "location": 86,
            "return": [
                "typing.Generator[TokenResult]"
            ],
            "arguments": {}
        }
    },
    "sensibility-master/tests/conftest.py": {
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "c": {
            "name": "c",
            "location": 22,
            "return": [
                "T",
                "float",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "i": {
            "name": "i",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "c": [
                    "str",
                    "Dict",
                    "List[str]",
                    "List",
                    "bool",
                    "Iterable[str]"
                ]
            }
        },
        "c.canonical_representation": {
            "name": "canonical_representation",
            "location": 30,
            "return": [
                "bool",
                "dict",
                "Iterable[str]",
                "List[List[str]]",
                "str"
            ],
            "arguments": {
                "token": [
                    "List[str]",
                    "List[Dict[str, Any]]",
                    "str"
                ]
            }
        },
        "i.index_of_input": {
            "name": "index_of_input",
            "location": 47,
            "return": [
                "Dict[str, int]",
                "int"
            ],
            "arguments": {
                "text": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "sensibility-master/tests/location_factory.py": {
        "LocationFactory.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int",
                    "str"
                ]
            }
        },
        "LocationFactory.across": {
            "name": "across",
            "location": 11,
            "return": [
                "sensibility.lexical_analysis.Location"
            ],
            "arguments": {
                "self": [],
                "width": [
                    "int"
                ]
            }
        },
        "LocationFactory.until": {
            "name": "until",
            "location": 16,
            "return": [
                "sensibility.lexical_analysis.Location"
            ],
            "arguments": {
                "self": [],
                "end": [
                    "int",
                    "float",
                    "sensibility.lexical_analysis.Position"
                ]
            }
        },
        "LocationFactory.single": {
            "name": "single",
            "location": 21,
            "return": [
                "sensibility.lexical_analysis.Location"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocationFactory.newline": {
            "name": "newline",
            "location": 24,
            "return": [
                "bool",
                "int",
                "Optional[Union[str,Any]]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocationFactory.next_line": {
            "name": "next_line",
            "location": 29,
            "return": [
                "LocationFactory"
            ],
            "arguments": {
                "self": [
                    "_TLocationFactory@@LocationFactory@@"
                ],
                "n": [
                    "int",
                    "str"
                ]
            }
        },
        "LocationFactory.space": {
            "name": "space",
            "location": 33,
            "return": [
                "LocationFactory"
            ],
            "arguments": {
                "self": [
                    "_TLocationFactory@@LocationFactory@@"
                ],
                "n": [
                    "int",
                    "Sequence"
                ]
            }
        }
    },
    "sensibility-master/tests/strategies.py": {
        "programs": {
            "name": "programs",
            "location": 25,
            "return": [
                "SourceVector",
                "str",
                "List[str]"
            ],
            "arguments": {
                "draw": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "sensibility-master/tests/test_clamp.py": {
        "test_clamp_nan": {
            "name": "test_clamp_nan",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_clamp": {
            "name": "test_clamp",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "sensibility-master/tests/test_database_dependent_stuff.py": {},
    "sensibility-master/tests/test_edit.py": {
        "setup": {
            "name": "setup",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_create_substitution": {
            "name": "test_create_substitution",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "program": [],
                "random": []
            }
        },
        "test_apply_substitution": {
            "name": "test_apply_substitution",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "program": [
                    "int",
                    "bool"
                ],
                "random": [
                    "str",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "test_create_deletion": {
            "name": "test_create_deletion",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "program": [
                    "float"
                ],
                "random": []
            }
        },
        "test_apply_deletion": {
            "name": "test_apply_deletion",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "program": [],
                "random": [
                    "str",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "test_create_insertion": {
            "name": "test_create_insertion",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "program": [
                    "str"
                ],
                "random": []
            }
        },
        "test_apply_insertion": {
            "name": "test_apply_insertion",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "program": [
                    "int"
                ],
                "random": [
                    "str",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "test_additive_inverse": {
            "name": "test_additive_inverse",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "program": [
                    "bytes",
                    "int"
                ],
                "edit_cls": [],
                "random": [
                    "List[str]",
                    "bool"
                ]
            }
        },
        "test_serialization": {
            "name": "test_serialization",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "program": [
                    "str",
                    "Optional[str]",
                    "None",
                    "List[Dict[str,str]]",
                    "List[dict[str,str]]"
                ],
                "edit_cls": [
                    "str",
                    "Optional[str]",
                    "List[Dict[str, str]]"
                ],
                "random": [
                    "List[str]",
                    "bool"
                ]
            }
        }
    },
    "sensibility-master/tests/test_edit_distance.py": {
        "setup_module": {
            "name": "setup_module",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_general": {
            "name": "test_general",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unused_keywords": {
            "name": "test_unused_keywords",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unabstracted_edit_distance": {
            "name": "test_unabstracted_edit_distance",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_edit": {
            "name": "test_get_edit",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "c": [
                    "Callable",
                    "hypothesis.strategies.SearchStrategy[str]"
                ]
            }
        },
        "test_get_unabstacted_edit": {
            "name": "test_get_unabstacted_edit",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "c": [
                    "Callable",
                    "hypothesis.strategies.SearchStrategy[str]"
                ]
            }
        },
        "test_out_of_vocabulary": {
            "name": "test_out_of_vocabulary",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_edit_line": {
            "name": "test_edit_line",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "c": [
                    "Dict"
                ]
            }
        },
        "test_dependency": {
            "name": "test_dependency",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "a": [
                    "int",
                    "Sequence[T]",
                    "Optional[T]",
                    "Sequence[int]",
                    "None"
                ],
                "b": [
                    "int",
                    "Sequence[T]",
                    "Optional[T]",
                    "Sequence[int]",
                    "None"
                ]
            }
        },
        "index_of": {
            "name": "index_of",
            "location": 186,
            "return": [
                "List[str]",
                "Optional[bool]",
                "Optional[int]",
                "ebl.transliteration.domain.language.Language",
                "bool",
                "dict"
            ],
            "arguments": {
                "token": [
                    "str",
                    "Dict[str,list[float]]",
                    "Dict[str,List[float]]",
                    "List[int]",
                    "List[tuple[Union[float,float]]]",
                    "Dict",
                    "List[Tuple[float,float]]",
                    "T",
                    "None",
                    "Optional[List[Any]]"
                ]
            }
        },
        "test_edit_line.to_source": {
            "name": "to_source",
            "location": 156,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "line": [
                    "str",
                    "List[str]",
                    "Iterator[str]",
                    "list",
                    "Callable[[List[str]], Iterable[str]]",
                    "Tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str]"
                ]
            }
        }
    },
    "sensibility-master/tests/test_fixer_upper.py": {
        "setup": {
            "name": "setup",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fixer_upper": {
            "name": "test_fixer_upper",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "rigged_lstm_model": [],
                "i": []
            }
        },
        "test_fixer_upper_oov": {
            "name": "test_fixer_upper_oov",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "rigged_lstm_model": []
            }
        },
        "one_hot_result": {
            "name": "one_hot_result",
            "location": 94,
            "return": [
                "Any"
            ],
            "arguments": {
                "entry": [],
                "flip": [
                    "bool"
                ]
            }
        },
        "normalize": {
            "name": "normalize",
            "location": 113,
            "return": [
                "float"
            ],
            "arguments": {
                "a": []
            }
        },
        "rigged_lstm_model": {
            "name": "rigged_lstm_model",
            "location": 124,
            "return": [
                "FakeModel"
            ],
            "arguments": {
                "i": []
            }
        },
        "rigged_lstm_model.FakeModel.bad_token": {
            "name": "bad_token",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "rigged_lstm_model.FakeModel.predict_file": {
            "name": "predict_file",
            "location": 143,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "tokens": []
            }
        },
        "rigged_lstm_model.FakeModel.predict_file.generate_pairs": {
            "name": "generate_pairs",
            "location": 144,
            "return": [
                "typing.Generator[TokenResult]"
            ],
            "arguments": {}
        }
    },
    "sensibility-master/tests/test_language_proxy.py": {
        "test_environment_variables": {
            "name": "test_environment_variables",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_match_extension": {
            "name": "test_match_extension",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sensibility-master/tests/test_lang_java.py": {
        "test_sanity_check": {
            "name": "test_sanity_check",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_check_syntax": {
            "name": "test_check_syntax",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_summarize": {
            "name": "test_summarize",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_vocabularize": {
            "name": "test_vocabularize",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "c": []
            }
        },
        "test_vocabulary": {
            "name": "test_vocabulary",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tokenize_invalid": {
            "name": "test_tokenize_invalid",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tokenize_evil": {
            "name": "test_tokenize_evil",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sensibility-master/tests/test_lang_javascript.py": {
        "test_sanity_check": {
            "name": "test_sanity_check",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tokenize": {
            "name": "test_tokenize",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_check_syntax": {
            "name": "test_check_syntax",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_summarize": {
            "name": "test_summarize",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_vocabularize": {
            "name": "test_vocabularize",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_javascript_vocabulary": {
            "name": "test_javascript_vocabulary",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_round_trip": {
            "name": "test_round_trip",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sensibility-master/tests/test_lang_python.py": {
        "test_sanity_check": {
            "name": "test_sanity_check",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tokenize": {
            "name": "test_tokenize",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_summarize": {
            "name": "test_summarize",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_vocabularize": {
            "name": "test_vocabularize",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sensibility-master/tests/test_line_number_regression.py": {
        "setup": {
            "name": "setup",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_calculates_line_numbers_from_source": {
            "name": "test_calculates_line_numbers_from_source",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "c": []
            }
        },
        "test_calculates_first_line_number": {
            "name": "test_calculates_first_line_number",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sensibility-master/tests/test_print_edit.py": {
        "setup": {
            "name": "setup",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_delete": {
            "name": "test_delete",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "c": [
                    "int",
                    "List[str]"
                ]
            }
        },
        "test_insert": {
            "name": "test_insert",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "c": [
                    "float",
                    "bool"
                ]
            }
        },
        "test_substitution": {
            "name": "test_substitution",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "c": [
                    "str"
                ]
            }
        },
        "to_index": {
            "name": "to_index",
            "location": 70,
            "return": [
                "Dict[str, int]",
                "str",
                "dict"
            ],
            "arguments": {
                "text": [
                    "str",
                    "List[str]",
                    "bytes"
                ]
            }
        }
    },
    "sensibility-master/tests/test_program.py": {
        "setup": {
            "name": "setup",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_program_random": {
            "name": "test_program_random",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "program": [
                    "str",
                    "int"
                ],
                "random": [
                    "str",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "test_program_print": {
            "name": "test_program_print",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "program": [
                    "List[Dict[str,Any]]",
                    "int",
                    "List[dict[str,Any]]"
                ]
            }
        }
    },
    "sensibility-master/tests/test_sentences.py": {
        "setup": {
            "name": "setup",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_forward_sentences": {
            "name": "test_forward_sentences",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "test_file": [
                    "List[List[Any]]",
                    "List[list[Any]]"
                ],
                "vocabulary": [
                    "str"
                ]
            }
        },
        "test_forward_sentences_too_big": {
            "name": "test_forward_sentences_too_big",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "test_file": [
                    "str",
                    "List[List[Any]]"
                ],
                "vocabulary": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_backward_sentences": {
            "name": "test_backward_sentences",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "test_file": [
                    "List[List[Any]]",
                    "List[list[Any]]"
                ],
                "vocabulary": [
                    "str",
                    "Dict[str,Any]",
                    "Tuple[float,float,float,float]",
                    "Tuple[Union[float,float,float,float]]"
                ]
            }
        },
        "test_both_sentences": {
            "name": "test_both_sentences",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "test_file": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "test_sentences_forwards_from": {
            "name": "test_sentences_forwards_from",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "test_file": [
                    "str"
                ],
                "vocabulary": [
                    "bool",
                    "str",
                    "Union[bool,None]",
                    "None"
                ]
            }
        },
        "test_sentences_backwards_from": {
            "name": "test_sentences_backwards_from",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "test_file": [],
                "vocabulary": [
                    "str",
                    "IO[bytes]",
                    "IO",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_file": {
            "name": "test_file",
            "location": 165,
            "return": [
                "str",
                "List"
            ],
            "arguments": {}
        },
        "vocabulary": {
            "name": "vocabulary",
            "location": 178,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "sensibility-master/tests/test_source_vector.py": {
        "setup": {
            "name": "setup",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_source_vector_unk_conversion": {
            "name": "test_source_vector_unk_conversion",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sensibility-master/tests/test_suggestion.py": {
        "setup": {
            "name": "setup",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_format_deletion": {
            "name": "test_format_deletion",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "inner_missing_paren": [
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ],
                "i": [
                    "str",
                    "List[list[int]]",
                    "List[List[int]]",
                    "Iterable[Iterable[str]]"
                ]
            }
        },
        "test_format_insertion": {
            "name": "test_format_insertion",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "inner_missing_paren": [
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ],
                "i": [
                    "str",
                    "List[list[int]]",
                    "List[List[int]]",
                    "Iterable[Iterable[str]]"
                ]
            }
        },
        "test_format_replacement": {
            "name": "test_format_replacement",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "inner_bad_keyword": [
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ],
                "i": [
                    "int"
                ]
            }
        },
        "test_int_print_regression": {
            "name": "test_int_print_regression",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "int_print_regression": [
                    "bool",
                    "str",
                    "Optional[pathlib.Path]",
                    "None"
                ],
                "i": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "inner_missing_paren": {
            "name": "inner_missing_paren",
            "location": 162,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "int_print_regression": {
            "name": "int_print_regression",
            "location": 167,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "inner_bad_keyword": {
            "name": "inner_bad_keyword",
            "location": 172,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "create_temp_file": {
            "name": "create_temp_file",
            "location": 176,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "source": [
                    "str"
                ],
                "basename": [
                    "str",
                    "Callable"
                ]
            }
        },
        "slurp_stdout": {
            "name": "slurp_stdout",
            "location": 185,
            "return": [
                "typing.Generator[list[]]"
            ],
            "arguments": {}
        },
        "File.lines": {
            "name": "lines",
            "location": 157,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sensibility-master/tests/test_zap_zeros.py": {
        "test_zap_zeros": {
            "name": "test_zap_zeros",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "sample_list": [
                    "List[numpy.ndarray]",
                    "int",
                    "List[int]",
                    "List[tuple[Union[int,int]]]",
                    "Tuple[Union[int,int]]",
                    "Iterable[str]",
                    "List[Tuple[int,int]]",
                    "Tuple[int,int]"
                ],
                "amount": [
                    "int",
                    "List[numpy.ndarray]",
                    "Iterable[str]",
                    "List[int]",
                    "List[Tuple[int,int]]",
                    "Tuple[int,int]"
                ]
            }
        }
    },
    "sensibility-master/tests/evaluation/test_vectors.py": {
        "setup": {
            "name": "setup",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_creates_file": {
            "name": "test_creates_file",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "new_vectors_path": [
                    "str",
                    "pathlib.Path",
                    "bool",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "test_length_of_vectors": {
            "name": "test_length_of_vectors",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "new_vectors_path": [
                    "str",
                    "pathlib.Path",
                    "Dict[str,str]",
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        },
        "new_vectors_path": {
            "name": "new_vectors_path",
            "location": 71,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        }
    },
    "sensibility-master/tests/miner/test_corpus.py": {
        "test_create": {
            "name": "test_create",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_insert_source_summary": {
            "name": "test_insert_source_summary",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "empty_corpus": [
                    "str",
                    "pathlib.Path"
                ],
                "repo_file": [
                    "pathlib.Path"
                ]
            }
        },
        "test_insert_and_retrieve": {
            "name": "test_insert_and_retrieve",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "corpus": [
                    "str",
                    "pathlib.Path",
                    "None",
                    "Optional[pathlib.Path]"
                ],
                "source_file": [
                    "str",
                    "None",
                    "pathlib.Path",
                    "Optional[pathlib.Path]"
                ]
            }
        },
        "test_metadata": {
            "name": "test_metadata",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "corpus": [
                    "str",
                    "float"
                ]
            }
        },
        "test_insert_duplicate": {
            "name": "test_insert_duplicate",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "corpus": [
                    "sensibility.miner.corpus.Corpus",
                    "str",
                    "Callable"
                ],
                "repo_file": [
                    "str",
                    "bool",
                    "pathlib.Path"
                ]
            }
        },
        "test_eligible_sources": {
            "name": "test_eligible_sources",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "populated_corpus": [
                    "str"
                ]
            }
        },
        "source_file": {
            "name": "source_file",
            "location": 85,
            "return": [
                "SourceFile",
                "str",
                "Sequence[str]",
                "Optional[str]",
                "Union[str,pathlib.Path]",
                "Optional[pathlib.Path]",
                "List[str]",
                "pathlib.PosixPath"
            ],
            "arguments": {}
        },
        "repo_file": {
            "name": "repo_file",
            "location": 92,
            "return": [
                "SourceFileInRepository",
                "str",
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {}
        },
        "repository": {
            "name": "repository",
            "location": 101,
            "return": [
                "RepositoryMetadata",
                "Dict",
                "str",
                "int",
                "Callable"
            ],
            "arguments": {}
        },
        "now": {
            "name": "now",
            "location": 110,
            "return": [
                "datetime.datetime"
            ],
            "arguments": {}
        },
        "corpus": {
            "name": "corpus",
            "location": 115,
            "return": [
                "str",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {}
        },
        "populated_corpus": {
            "name": "populated_corpus",
            "location": 127,
            "return": [
                "str",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {}
        },
        "empty_corpus": {
            "name": "empty_corpus",
            "location": 184,
            "return": [
                "Corpus",
                "str",
                "int",
                "Tuple[Tuple[int,Any]]",
                "List[List[str]]",
                "bool"
            ],
            "arguments": {}
        },
        "engine": {
            "name": "engine",
            "location": 189,
            "return": [
                "int",
                "str",
                "Tuple[float, float]",
                "users.models.CustomUser"
            ],
            "arguments": {}
        }
    },
    "sensibility-master/tests/miner/test_rqueue.py": {
        "redis_running": {
            "name": "redis_running",
            "location": 17,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "redis_client": {
            "name": "redis_client",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "test_base_queue": {
            "name": "test_base_queue",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "redis_client": []
            }
        },
        "test_work_queue": {
            "name": "test_work_queue",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "redis_client": [
                    "str",
                    "slice"
                ]
            }
        }
    }
}
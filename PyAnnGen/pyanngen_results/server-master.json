{
    "server-master/run.py": {},
    "server-master/docs/source/conf.py": {},
    "server-master/fakebike/bike.py": {
        "Bike.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bid": [
                    "Optional[str]",
                    "str",
                    "tuple",
                    "None",
                    "bool",
                    "List[str]",
                    "tuple[]",
                    "list[str]",
                    "int"
                ],
                "seed": [
                    "str",
                    "bytes",
                    "tuple",
                    "tuple[]",
                    "Optional[bytes]",
                    "None"
                ],
                "location": [
                    "tuple[typing.Union[int,int]]",
                    "bool",
                    "Tuple[int, int]",
                    "str",
                    "Optional[str]",
                    "None",
                    "int"
                ],
                "locked": [
                    "bool",
                    "Optional[str]",
                    "tuple",
                    "List[str]",
                    "int"
                ]
            }
        },
        "Bike.public_key": {
            "name": "public_key",
            "location": 32,
            "return": [
                "str",
                "Dict[str, List[Any]]",
                "marshmallow.Schema"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bike.sign": {
            "name": "sign",
            "location": 35,
            "return": [
                "bool",
                "list"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "bytes",
                    "dict",
                    "dict[str, typing.Any]",
                    "str",
                    "T",
                    "None",
                    "Optional[Dict[str, Any]]",
                    "list[int]",
                    "Dict[str, Any]",
                    "List[int]"
                ]
            }
        }
    },
    "server-master/fakebike/__init__.py": {},
    "server-master/fakebike/__main__.py": {
        "websocket_handler": {
            "name": "websocket_handler",
            "location": 166,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "loop": [
                    "str",
                    "float",
                    "int"
                ],
                "coroutines": [
                    "str"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 171,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "server-master/server/app.py": {
        "build_app": {
            "name": "build_app",
            "location": 30,
            "return": [
                "aiohttp.web.Application",
                "\"App\""
            ],
            "arguments": {
                "db_uri": [
                    "bool",
                    "None",
                    "Optional[str]",
                    "deeplearning.ml4pl.models.logger.Logger",
                    "str"
                ]
            }
        }
    },
    "server-master/server/config.py": {},
    "server-master/server/heroku.py": {},
    "server-master/server/middleware.py": {},
    "server-master/server/monitor.py": {
        "Tap2GoMonitor.do_set_user_level": {
            "name": "do_set_user_level",
            "location": 13,
            "return": [
                "None",
                "bytes",
                "Set[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str",
                    "int"
                ],
                "user_type": [
                    "str",
                    "list[alerta.models.enums.Scope]",
                    "gardnr.models.Driver",
                    "List[alerta.models.enums.Scope]"
                ]
            }
        },
        "Tap2GoMonitor.do_search_user": {
            "name": "do_search_user",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Tap2GoMonitor.do_get_bikes": {
            "name": "do_get_bikes",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tap2GoMonitor.do_take_out_of_circulation": {
            "name": "do_take_out_of_circulation",
            "location": 56,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "bike": [
                    "int",
                    "dict[, ]",
                    "models.Course",
                    "None",
                    "dict",
                    "Optional[dict]"
                ]
            }
        },
        "Tap2GoMonitor.do_put_bike_into_circulation": {
            "name": "do_put_bike_into_circulation",
            "location": 64,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "bike": [
                    "dict[, ]",
                    "str",
                    "salon.models.Stylist",
                    "dict"
                ]
            }
        }
    },
    "server-master/server/signals.py": {
        "register_signals": {
            "name": "register_signals",
            "location": 77,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "aiohttp.web.Application"
                ],
                "init_database": [
                    "aiohttp.web.Application",
                    "bool"
                ]
            }
        }
    },
    "server-master/server/version.py": {},
    "server-master/server/worker.py": {},
    "server-master/server/__init__.py": {},
    "server-master/server/__main__.py": {
        "run": {
            "name": "run",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "server-master/server/events/decorators.py": {
        "emits": {
            "name": "emits",
            "location": 7,
            "return": [
                "Callable[([type], Any)]"
            ],
            "arguments": {}
        },
        "emits.class_decorator": {
            "name": "class_decorator",
            "location": 10,
            "return": [
                "Union[str, List]",
                "int",
                "set",
                "Dict[str, str]"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "type"
                ]
            }
        }
    },
    "server-master/server/events/event_emitter.py": {
        "EventEmitter.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "emitter": [
                    "str",
                    "int",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "None",
                    "bool"
                ],
                "event": [
                    "int"
                ]
            }
        },
        "EventEmitter.__iadd__": {
            "name": "__iadd__",
            "location": 8,
            "return": [
                "EventEmitter"
            ],
            "arguments": {
                "self": [
                    "_TEventEmitter"
                ],
                "handler": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "EventEmitter.__isub__": {
            "name": "__isub__",
            "location": 12,
            "return": [
                "EventEmitter"
            ],
            "arguments": {
                "self": [
                    "_TEventEmitter"
                ],
                "handler": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "EventEmitter.__call__": {
            "name": "__call__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "server-master/server/events/event_hub.py": {
        "EventHub.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventHub.add_events": {
            "name": "add_events",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventHub.emit": {
            "name": "emit",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "Union[(server.events.event_emitter.EventEmitter, Callable)]"
                ]
            }
        },
        "EventHub.__contains__": {
            "name": "__contains__",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Iterable[Any]",
                    "typing.Iterable[typing.Any]"
                ]
            }
        },
        "EventHub.__getattr__": {
            "name": "__getattr__",
            "location": 33,
            "return": [
                "server.events.event_emitter.EventEmitter"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str"
                ]
            }
        },
        "EventHub.subscribe": {
            "name": "subscribe",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "Union[(server.events.event_emitter.EventEmitter, Callable)]"
                ],
                "handler": [
                    "Callable"
                ]
            }
        },
        "EventHub.unsubscribe": {
            "name": "unsubscribe",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "Union[(server.events.event_emitter.EventEmitter, Callable)]"
                ],
                "handler": [
                    "Callable"
                ]
            }
        },
        "EventHub._resolve_event": {
            "name": "_resolve_event",
            "location": 82,
            "return": [
                "Callable"
            ],
            "arguments": {
                "target": [
                    "Union[(server.events.event_emitter.EventEmitter, Callable)]"
                ]
            }
        },
        "AsyncEventHub.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncEventHub.subscribe": {
            "name": "subscribe",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "Union[(server.events.event_emitter.EventEmitter, Callable)]"
                ],
                "handler": [
                    "Callable"
                ]
            }
        },
        "AsyncEventHub.unsubscribe": {
            "name": "unsubscribe",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "Union[(server.events.event_emitter.EventEmitter, Callable)]"
                ],
                "handler": [
                    "Callable"
                ]
            }
        },
        "AsyncEventHub.__getattr__": {
            "name": "__getattr__",
            "location": 134,
            "return": [
                "server.events.event_emitter.EventEmitter"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str"
                ]
            }
        }
    },
    "server-master/server/events/event_list.py": {
        "EventListMeta.__contains__": {
            "name": "__contains__",
            "location": 8,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Callable"
                ]
            }
        }
    },
    "server-master/server/events/exceptions.py": {},
    "server-master/server/events/__init__.py": {},
    "server-master/server/models/bike.py": {
        "CalculatedBikeStatus.get": {
            "name": "get",
            "location": 33,
            "return": [
                "bool",
                "str",
                "bytes",
                "Dict[int, dict]",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "Optional[int]",
                    "None"
                ],
                "available": [
                    "str",
                    "Optional[str]",
                    "None",
                    "dict",
                    "int",
                    "dict[, ]",
                    "Optional[int]",
                    "typing.BinaryIO",
                    "BinaryIO",
                    "bool"
                ],
                "rented": [
                    "str",
                    "Optional[str]",
                    "None",
                    "dict",
                    "int",
                    "dict[, ]",
                    "Optional[int]",
                    "typing.BinaryIO",
                    "BinaryIO",
                    "bool"
                ],
                "in_circulation": [
                    "str",
                    "Optional[str]",
                    "None",
                    "dict",
                    "int",
                    "dict[, ]",
                    "Optional[int]",
                    "typing.BinaryIO",
                    "BinaryIO",
                    "bool"
                ],
                "broken": [
                    "str",
                    "Optional[str]",
                    "None",
                    "dict",
                    "int",
                    "dict[, ]",
                    "Optional[int]",
                    "typing.BinaryIO",
                    "BinaryIO",
                    "bool"
                ]
            }
        },
        "Bike.serialize": {
            "name": "serialize",
            "location": 58,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "bike_connection_manager": [
                    "List[Dict[str, Any]]"
                ],
                "rental_manager": [
                    "str",
                    "bool"
                ],
                "reservation_manager": [
                    "bool",
                    "str"
                ]
            }
        },
        "Bike.public_key": {
            "name": "public_key",
            "location": 102,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bike.identifier": {
            "name": "identifier",
            "location": 107,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bike.in_circulation": {
            "name": "in_circulation",
            "location": 112,
            "return": [
                "bool",
                "Optional[Callable]",
                "Dict[str, bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bike.broken": {
            "name": "broken",
            "location": 120,
            "return": [
                "bool",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bike.__str__": {
            "name": "__str__",
            "location": 123,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "server-master/server/models/fields.py": {
        "EnumField.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "enum_type": [
                    "Type[enum.Enum]"
                ]
            }
        },
        "EnumField.to_db_value": {
            "name": "to_db_value",
            "location": 25,
            "return": [
                "typing.Type",
                "bool",
                "str",
                "dict[typing.Type, typing.Callable[, ]]",
                "Callable",
                "Optional[List[int]]",
                "None",
                "Union[int, float]",
                "int",
                "bytes",
                "Optional[str]",
                "self_@__enum_type",
                "Optional[T]",
                "Set[enum.Enum]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "type",
                    "typing.Type",
                    "Dict[type, Callable]",
                    "dict[typing.Type, typing.Callable[, ]]",
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "None",
                    "Union[None, str, bytes]",
                    "int",
                    "bytes"
                ],
                "instance": [
                    "float",
                    "str",
                    "bool"
                ]
            }
        },
        "EnumField.to_python_value": {
            "name": "to_python_value",
            "location": 31,
            "return": [
                "Optional[enum.Enum]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[str, Exception]",
                    "Exception",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "server-master/server/models/issue.py": {
        "Issue.serialize": {
            "name": "serialize",
            "location": 29,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "router": [
                    "int",
                    "models.characters.states.StatusEffect",
                    "server.models.Reservation"
                ]
            }
        }
    },
    "server-master/server/models/location_update.py": {},
    "server-master/server/models/pickup_point.py": {
        "PickupPoint.serialize": {
            "name": "serialize",
            "location": 19,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "reservation_manager": [
                    "bool"
                ],
                "shortage_count": [
                    "int"
                ],
                "shortage_date": [
                    "_datetime.datetime"
                ]
            }
        }
    },
    "server-master/server/models/rental.py": {
        "Rental.start_time": {
            "name": "start_time",
            "location": 36,
            "return": [
                "Dict[str, Any]",
                "Dict[str, List[int]]",
                "Mapping[str, Any]",
                "int",
                "Pattern[str]",
                "str",
                "T"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rental.end_time": {
            "name": "end_time",
            "location": 40,
            "return": [
                "None",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rental.cancel_time": {
            "name": "cancel_time",
            "location": 45,
            "return": [
                "None",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rental.outcome": {
            "name": "outcome",
            "location": 50,
            "return": [
                "typing.Text",
                "list",
                "None",
                "Optional[BaseException]",
                "type"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "server-master/server/models/report.py": {},
    "server-master/server/models/reservation.py": {
        "Reservation.serialize": {
            "name": "serialize",
            "location": 27,
            "return": [
                "dict[typing.Text, None]",
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "router": [
                    "int",
                    "server.models.Reservation",
                    "Callable",
                    "bool"
                ],
                "reservation_manager": [
                    "str"
                ]
            }
        }
    },
    "server-master/server/models/user.py": {
        "User.serialize": {
            "name": "serialize",
            "location": 32,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.can_pay": {
            "name": "can_pay",
            "location": 40,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.is_admin": {
            "name": "is_admin",
            "location": 45,
            "return": [
                "bool",
                "Type[BaseException]",
                "Type",
                "Optional[Type[BaseException]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.__str__": {
            "name": "__str__",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "server-master/server/models/util.py": {
        "resolve_id": {
            "name": "resolve_id",
            "location": 28,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "target": [
                    "bool",
                    "int"
                ]
            }
        },
        "get_serialized_location_for_bike": {
            "name": "get_serialized_location_for_bike",
            "location": 37,
            "return": [
                "Optional[dict]"
            ],
            "arguments": {
                "bike": [
                    "Optional[Iterable[T]]",
                    "typing.Iterable[T]",
                    "bool",
                    "None",
                    "dict"
                ],
                "bike_connection_manager": [
                    "Optional[Iterable[T]]",
                    "bool",
                    "dict"
                ],
                "reservation_manager": [
                    "Type",
                    "typing.Type"
                ]
            }
        },
        "RentalUpdateType.terminating_types": {
            "name": "terminating_types",
            "location": 23,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {}
        }
    },
    "server-master/server/models/__init__.py": {},
    "server-master/server/permissions/bikes.py": {
        "BikeNotBroken.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "server-master/server/permissions/decorators.py": {
        "add_apispec_permission": {
            "name": "add_apispec_permission",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "original_function": [
                    "Iterable[str]",
                    "bool",
                    "List[List[str]]"
                ],
                "new_func": [
                    "str",
                    "dict"
                ],
                "permission": [
                    "str",
                    "Optional[Sequence[Any]]",
                    "Optional[float]",
                    "bool"
                ]
            }
        },
        "requires": {
            "name": "requires",
            "location": 29,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "permission": [
                    "server.permissions.permission.Permission"
                ]
            }
        },
        "requires.decorator": {
            "name": "decorator",
            "location": 35,
            "return": [
                "Dict[str, Any]",
                "str",
                "bool",
                "Optional[BaseException]"
            ],
            "arguments": {
                "original_function": [
                    "Callable"
                ]
            }
        }
    },
    "server-master/server/permissions/permission.py": {
        "RoutePermissionError.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoutePermissionError.__str__": {
            "name": "__str__",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoutePermissionError.serialize": {
            "name": "serialize",
            "location": 42,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Permission.__and__": {
            "name": "__and__",
            "location": 52,
            "return": [
                "AndPermission"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "list[str]",
                    "str",
                    "int"
                ]
            }
        },
        "Permission.__or__": {
            "name": "__or__",
            "location": 62,
            "return": [
                "OrPermission"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "list[str]",
                    "str",
                    "int"
                ]
            }
        },
        "Permission.__invert__": {
            "name": "__invert__",
            "location": 72,
            "return": [
                "NotPermission"
            ],
            "arguments": {
                "self": []
            }
        },
        "Permission._sub_permissions": {
            "name": "_sub_permissions",
            "location": 76,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Permission.openapi_security": {
            "name": "openapi_security",
            "location": 90,
            "return": [
                "list[]",
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AndPermission.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AndPermission.__repr__": {
            "name": "__repr__",
            "location": 113,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AndPermission.__len__": {
            "name": "__len__",
            "location": 116,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AndPermission._sub_permissions": {
            "name": "_sub_permissions",
            "location": 119,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "AndPermission.openapi_security": {
            "name": "openapi_security",
            "location": 123,
            "return": [
                "list[dict[tuple[typing.Union[str,set[str]]], list[typing.Union[str,set[str]]]]]",
                "Dict[str, str]",
                "Set[str]",
                "Dict[str, Any]",
                "Dict[int, Dict[int, Any]]",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrPermission.__init__": {
            "name": "__init__",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrPermission.__repr__": {
            "name": "__repr__",
            "location": 157,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrPermission.__len__": {
            "name": "__len__",
            "location": 160,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrPermission._sub_permissions": {
            "name": "_sub_permissions",
            "location": 163,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrPermission.openapi_security": {
            "name": "openapi_security",
            "location": 167,
            "return": [
                "list[]",
                "List[Dict]",
                "List[int]",
                "List[float]",
                "Tuple[int, int, int]",
                "float",
                "list",
                "List[List[Any]]",
                "Union[List[float], List[int]]",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotPermission.__init__": {
            "name": "__init__",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "permission": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]",
                    "List[str]",
                    "list[str]",
                    "type",
                    "typing.Type"
                ]
            }
        }
    },
    "server-master/server/permissions/users.py": {
        "UserIsAdmin.openapi_security": {
            "name": "openapi_security",
            "location": 28,
            "return": [
                "list[dict[typing.Text, list[typing.Text]]]",
                "str",
                "ajapaik.ajapaik.models.Album",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserIsRentingBike.openapi_security": {
            "name": "openapi_security",
            "location": 48,
            "return": [
                "list[dict[typing.Text, list[typing.Text]]]",
                "str",
                "ajapaik.ajapaik.models.Album",
                "float",
                "List[str]",
                "int",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserMatchesToken.openapi_security": {
            "name": "openapi_security",
            "location": 65,
            "return": [
                "list[dict[typing.Text, list[typing.Text]]]",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserCanPay.openapi_security": {
            "name": "openapi_security",
            "location": 77,
            "return": [
                "list[dict[typing.Text, list[typing.Text]]]",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "server-master/server/permissions/__init__.py": {},
    "server-master/server/pricing/__init__.py": {},
    "server-master/server/serializer/decorators.py": {
        "expects": {
            "name": "expects",
            "location": 31,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "schema": [
                    "Optional[marshmallow.Schema]",
                    "bool",
                    "dict",
                    "str",
                    "Tuple[Tuple[str, ...]]"
                ],
                "into": [
                    "Optional[marshmallow.Schema]",
                    "bool",
                    "dict",
                    "str",
                    "Tuple[Tuple[str, ...]]"
                ]
            }
        },
        "returns": {
            "name": "returns",
            "location": 129,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "schema": [
                    "Optional[marshmallow.Schema]",
                    "bool",
                    "Optional[Set[str]]",
                    "str",
                    "Optional[str]",
                    "dict"
                ],
                "return_code": [
                    "Optional[marshmallow.Schema]",
                    "bool",
                    "Optional[Set[str]]",
                    "str",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "expects.decorator": {
            "name": "decorator",
            "location": 64,
            "return": [],
            "arguments": {
                "original_function": []
            }
        },
        "returns.decorator": {
            "name": "decorator",
            "location": 171,
            "return": [
                "Dict[str, Any]",
                "str",
                "bool",
                "Optional[BaseException]"
            ],
            "arguments": {
                "original_function": []
            }
        }
    },
    "server-master/server/serializer/fields.py": {
        "Many": {
            "name": "Many",
            "location": 106,
            "return": [
                "int",
                "list"
            ],
            "arguments": {
                "schema": [
                    "int",
                    "Type"
                ]
            }
        },
        "BytesField.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BytesField._serialize": {
            "name": "_serialize",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Union[(bytes, str)]"
                ],
                "attr": [
                    "str"
                ],
                "obj": [
                    "str"
                ]
            }
        },
        "BytesField._deserialize": {
            "name": "_deserialize",
            "location": 48,
            "return": [
                "Union[(bytes, str)]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ],
                "attr": [
                    "dict",
                    "str"
                ],
                "data": [
                    "dict",
                    "str"
                ]
            }
        },
        "EnumField.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "enum_type": [
                    "Type[enum.Enum]"
                ]
            }
        },
        "EnumField._serialize": {
            "name": "_serialize",
            "location": 79,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Union[(str, enum.Enum)]"
                ],
                "attr": [
                    "str"
                ],
                "obj": [
                    "str"
                ]
            }
        },
        "EnumField._deserialize": {
            "name": "_deserialize",
            "location": 91,
            "return": [
                "Optional[enum.Enum]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ],
                "attr": [
                    "dict",
                    "str"
                ],
                "data": [
                    "dict",
                    "str"
                ]
            }
        }
    },
    "server-master/server/serializer/geojson.py": {
        "GeoJSON.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "feature_type": [
                    "Optional[GeoJSONType]"
                ]
            }
        },
        "GeoJSON.assert_correct_fields_included": {
            "name": "assert_correct_fields_included",
            "location": 49,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "dict"
                ]
            }
        },
        "GeoJSON.assert_correct_type": {
            "name": "assert_correct_type",
            "location": 56,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "dict",
                    "Callable[..., T]",
                    "bool",
                    "Dict[str, Any]",
                    "type"
                ]
            }
        },
        "GeoJSON.of": {
            "name": "of",
            "location": 61,
            "return": [
                "TypedJSendSchema",
                "Type[Any]",
                "Optional[Dict[str, str]]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "properties_schema": [
                    "typing.Callable[, ]",
                    "marshmallow.Schema",
                    "list[]",
                    "str",
                    "Callable",
                    "typing.Type",
                    "list",
                    "Type",
                    "Callable[[Any], bool]"
                ],
                "feature_type": [
                    "Optional[GeoJSONType]"
                ]
            }
        }
    },
    "server-master/server/serializer/jsend.py": {
        "JSendSchema.assert_fields": {
            "name": "assert_fields",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "dict"
                ]
            }
        },
        "JSendSchema.of": {
            "name": "of",
            "location": 59,
            "return": [
                "TypedJSendSchema",
                "Type[Any]",
                "str"
            ],
            "arguments": {}
        }
    },
    "server-master/server/serializer/json_rpc.py": {},
    "server-master/server/serializer/misc.py": {},
    "server-master/server/serializer/models.py": {
        "BikeSchema.assert_current_location_on_available_bikes": {
            "name": "assert_current_location_on_available_bikes",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "Dict[str, Any]",
                    "list[]",
                    "str",
                    "dict",
                    "list"
                ]
            }
        },
        "UserSchema.assert_strip_id_valid": {
            "name": "assert_strip_id_valid",
            "location": 51,
            "return": [
                "bool",
                "str",
                "zam_repondeur.models.Lecture"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str",
                    "Optional[dict]",
                    "Callable",
                    "dict"
                ]
            }
        },
        "RentalSchema.assert_end_time_with_price": {
            "name": "assert_end_time_with_price",
            "location": 84,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "bytes",
                    "dict[str, typing.Any]",
                    "Optional[Dict[str, Any]]",
                    "list[str]",
                    "List[str]",
                    "list[]",
                    "Union[Dict, List]",
                    "list[tuple[]]",
                    "List[Tuple]",
                    "Dict[str, Any]"
                ]
            }
        },
        "RentalSchema.assert_url_included_with_foreign_key": {
            "name": "assert_url_included_with_foreign_key",
            "location": 96,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "dict[, ]",
                    "List[str]",
                    "list[str]",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "PickupPointSchema.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IssueSchema.assert_url_included_with_foreign_key": {
            "name": "assert_url_included_with_foreign_key",
            "location": 154,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "dict[, ]",
                    "List[str]",
                    "list[str]",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "List[int]",
                    "list[int]"
                ]
            }
        }
    },
    "server-master/server/serializer/__init__.py": {},
    "server-master/server/service/firebase.py": {
        "FirebaseClaimManager.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "credentials": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "server-master/server/service/payment.py": {
        "DummyPaymentManager.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stripe_key": [
                    "None"
                ]
            }
        },
        "PaymentManager.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stripe_key": [
                    "str"
                ]
            }
        }
    },
    "server-master/server/service/rebuildable.py": {},
    "server-master/server/service/ticket_store.py": {
        "BikeConnectionTicket.__hash__": {
            "name": "__hash__",
            "location": 31,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TicketStore.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TicketStore.add_ticket": {
            "name": "add_ticket",
            "location": 61,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "remote": [
                    "str",
                    "float",
                    "Optional[str]",
                    "None"
                ],
                "bike": [
                    "server.models.bike.Bike"
                ]
            }
        },
        "TicketStore.pop_ticket": {
            "name": "pop_ticket",
            "location": 79,
            "return": [
                "BikeConnectionTicket"
            ],
            "arguments": {
                "self": [],
                "remote": [
                    "bytes",
                    "str"
                ],
                "public_key": [
                    "bytes"
                ]
            }
        },
        "TicketStore.remove_expired": {
            "name": "remove_expired",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TicketStore._is_expired": {
            "name": "_is_expired",
            "location": 98,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "ticket": [
                    "BikeConnectionTicket"
                ]
            }
        },
        "TicketStore.__contains__": {
            "name": "__contains__",
            "location": 101,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "remote": [
                    "int",
                    "str",
                    "typing.Callable[, ]",
                    "Callable",
                    "models.Question"
                ]
            }
        }
    },
    "server-master/server/service/verify_token.py": {
        "verify_token": {
            "name": "verify_token",
            "location": 94,
            "return": [
                "int",
                "Dict[str, str]",
                "bool",
                "List[Tuple[bool, Any]]"
            ],
            "arguments": {
                "request": [
                    "aiohttp.web.Request",
                    "starlette.requests.Request"
                ]
            }
        },
        "TokenVerificationError.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "int"
                ],
                "auth_header": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "TokenVerifier.verify_token": {
            "name": "verify_token",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str",
                    "bool",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "FirebaseVerifier.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "audience": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "FirebaseVerifier.verify_token": {
            "name": "verify_token",
            "location": 59,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str",
                    "Dict[\"core.Edge\", \"state.State\"]",
                    "dict[E, \"state.State\"]"
                ],
                "verify_exp": [
                    "bool",
                    "str",
                    "list"
                ]
            }
        },
        "DummyVerifier.verify_token": {
            "name": "verify_token",
            "location": 87,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str"
                ]
            }
        }
    },
    "server-master/server/service/__init__.py": {},
    "server-master/server/service/access/bikes.py": {
        "register_bike.clean_key": {
            "name": "clean_key",
            "location": 71,
            "return": [
                "str",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "key": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "dict"
                ]
            }
        }
    },
    "server-master/server/service/access/issues.py": {},
    "server-master/server/service/access/pickup_points.py": {},
    "server-master/server/service/access/rentals.py": {},
    "server-master/server/service/access/reservations.py": {},
    "server-master/server/service/access/users.py": {
        "initialize_firebase": {
            "name": "initialize_firebase",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "UserExistsError.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "errors": [
                    "str",
                    "bool",
                    "float",
                    "typing.Callable[, ]",
                    "int",
                    "zerver.models.Realm",
                    "Callable"
                ]
            }
        }
    },
    "server-master/server/service/access/__init__.py": {},
    "server-master/server/service/background/reservation_sourcer.py": {
        "is_within_reservation_time": {
            "name": "is_within_reservation_time",
            "location": 11,
            "return": [
                "datetime.datetime",
                "bool"
            ],
            "arguments": {
                "date_pickup": [
                    "str",
                    "datetime.date",
                    "None",
                    "datetime.datetime",
                    "Optional[datetime.datetime]"
                ]
            }
        },
        "ReservationSourcer.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "reservation_manager": [
                    "None",
                    "asyncio.AbstractEventLoop",
                    "asyncio.base_events.BaseEventLoop",
                    "server.service.manager.reservation_manager.ReservationManager",
                    "Optional[asyncio.AbstractEventLoop]"
                ]
            }
        },
        "ReservationSourcer.shortages": {
            "name": "shortages",
            "location": 28,
            "return": [
                "dict[datetime.date, dict[str, float]]",
                "int",
                "tuple[typing.Union[tuple[typing.Union[str,str]],tuple[typing.Union[str,str]],tuple[typing.Union[str,str]]]]",
                "Callable",
                "dict[datetime.date, dict[str, typing.Any]]",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "pickup": [
                    "datetime.datetime",
                    "None"
                ]
            }
        },
        "ReservationSourcer.opened_reservation": {
            "name": "opened_reservation",
            "location": 85,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "pickup": [
                    "int",
                    "str",
                    "float",
                    "complex"
                ],
                "user": [
                    "int",
                    "datetime.datetime",
                    "server.models.PickupPoint",
                    "server.models.User",
                    "bool"
                ],
                "time": [
                    "int",
                    "str",
                    "float",
                    "complex"
                ]
            }
        },
        "ReservationSourcer.cancelled_reservation": {
            "name": "cancelled_reservation",
            "location": 88,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "pickup": [
                    "int",
                    "tuple[]",
                    "str",
                    "tuple",
                    "tuple[typing.Union[int,...]]",
                    "Union[int, Tuple[int, ...]]",
                    "zam_repondeur.models.Lecture"
                ],
                "user": [
                    "float",
                    "str",
                    "server.models.User",
                    "bool",
                    "datetime.datetime",
                    "server.models.PickupPoint",
                    "int"
                ],
                "time": [
                    "int",
                    "tuple[]",
                    "str",
                    "tuple",
                    "tuple[typing.Union[int,...]]",
                    "Union[int, Tuple[int, ...]]",
                    "zam_repondeur.models.Lecture"
                ]
            }
        }
    },
    "server-master/server/service/background/stats_reporter.py": {
        "StatisticsReporter.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "rental_manager": [
                    "int",
                    "asyncio.AbstractEventLoop"
                ],
                "reservation_manager": [
                    "int",
                    "asyncio.AbstractEventLoop"
                ]
            }
        },
        "StatisticsReporter._rental_started": {
            "name": "_rental_started",
            "location": 57,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "float",
                    "str",
                    "server.models.Bike",
                    "server.models.User",
                    "models.User"
                ],
                "bike": [
                    "float",
                    "str",
                    "server.models.Bike",
                    "server.models.User",
                    "models.User"
                ],
                "location": [
                    "float",
                    "str",
                    "server.models.Bike",
                    "server.models.User",
                    "models.User"
                ]
            }
        },
        "StatisticsReporter._rental_ended": {
            "name": "_rental_ended",
            "location": 60,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "float",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "server.models.Bike",
                    "str",
                    "None",
                    "server.models.User",
                    "dict",
                    "Dict[str, Any]",
                    "zerver.models.UserProfile",
                    "Optional[zerver.models.UserProfile]"
                ],
                "bike": [
                    "float",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "server.models.Bike",
                    "str",
                    "None",
                    "server.models.User",
                    "dict",
                    "Dict[str, Any]",
                    "zerver.models.UserProfile",
                    "Optional[zerver.models.UserProfile]"
                ],
                "location": [
                    "float",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "server.models.Bike",
                    "str",
                    "None",
                    "server.models.User",
                    "dict",
                    "Dict[str, Any]",
                    "zerver.models.UserProfile",
                    "Optional[zerver.models.UserProfile]"
                ],
                "price": [
                    "str",
                    "float",
                    "int",
                    "models.user.UserModel",
                    "None",
                    "datetime.datetime",
                    "Optional[int]"
                ],
                "distance": [
                    "str",
                    "float",
                    "int",
                    "models.user.UserModel",
                    "None",
                    "datetime.datetime",
                    "Optional[int]"
                ]
            }
        },
        "StatisticsReporter._opened_reservation": {
            "name": "_opened_reservation",
            "location": 66,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "pickup": [
                    "int",
                    "datetime.datetime",
                    "server.models.PickupPoint",
                    "server.models.User",
                    "bool"
                ],
                "user": [
                    "int",
                    "datetime.datetime",
                    "server.models.PickupPoint",
                    "server.models.User",
                    "bool"
                ],
                "time": [
                    "int",
                    "datetime.datetime",
                    "server.models.PickupPoint",
                    "server.models.User",
                    "bool"
                ]
            }
        },
        "StatisticsReporter._cancelled_reservation": {
            "name": "_cancelled_reservation",
            "location": 69,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "pickup": [
                    "float",
                    "str",
                    "server.models.User",
                    "bool",
                    "datetime.datetime",
                    "server.models.PickupPoint",
                    "int"
                ],
                "user": [
                    "float",
                    "str",
                    "server.models.User",
                    "bool",
                    "datetime.datetime",
                    "server.models.PickupPoint",
                    "int"
                ],
                "time": [
                    "float",
                    "str",
                    "server.models.User",
                    "bool",
                    "datetime.datetime",
                    "server.models.PickupPoint",
                    "int"
                ]
            }
        },
        "StatisticsReporter.daily_report": {
            "name": "daily_report",
            "location": 72,
            "return": [
                "list[dict[typing.Text, bool]]",
                "str",
                "dict",
                "Dict[str, Set[str]]",
                "OrderedDict"
            ],
            "arguments": {
                "self": [],
                "year": [
                    "None",
                    "Optional[int]",
                    "bool",
                    "Optional[datetime.datetime]"
                ],
                "month": [
                    "None",
                    "bool",
                    "float",
                    "int",
                    "T",
                    "Optional[int]"
                ],
                "day_nr": [
                    "None",
                    "float",
                    "Optional[int]",
                    "T",
                    "int",
                    "datetime.datetime"
                ]
            }
        },
        "StatisticsReporter.monthly_report": {
            "name": "monthly_report",
            "location": 101,
            "return": [
                "List[str]",
                "bool",
                "Optional[Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "year": [
                    "None",
                    "int",
                    "Optional[datetime.datetime]",
                    "stiff.models.Anchor",
                    "Type['Frame']",
                    "Optional[float]"
                ],
                "month": [
                    "int",
                    "None",
                    "Type['Frame']",
                    "stiff.models.Anchor",
                    "typing.Type"
                ]
            }
        },
        "StatisticsReporter.annual_report": {
            "name": "annual_report",
            "location": 129,
            "return": [
                "List[str]",
                "bool",
                "Optional[Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "year": [
                    "None",
                    "Optional[datetime.datetime]",
                    "str",
                    "Union[str, int]",
                    "int",
                    "Tuple[datetime.datetime, datetime.datetime]",
                    "tuple[typing.Union[datetime.datetime,datetime.datetime]]",
                    "Optional[float]",
                    "float",
                    "Optional[Union[bool, int]]",
                    "Optional[datetime.timedelta]"
                ]
            }
        }
    },
    "server-master/server/service/background/__init__.py": {},
    "server-master/server/service/manager/bike_connection_manager.py": {
        "RPC.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "rpc_id": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "socket": [
                    "str",
                    "int",
                    "None",
                    "list[int]",
                    "bool",
                    "Optional[bool]",
                    "Optional[str]",
                    "List[int]",
                    "zerver.models.UserProfile"
                ],
                "command_name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "List[zerver.models.Stream]",
                    "list[zerver.models.Stream]"
                ],
                "args": [
                    "None"
                ]
            }
        },
        "BikeConnectionManager.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BikeConnectionManager.most_recent_location": {
            "name": "most_recent_location",
            "location": 90,
            "return": [
                "Optional[str]",
                "django.contrib.auth.models.AbstractBaseUser"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "Union[server.models.Bike, int]",
                    "int",
                    "Type",
                    "typing.Type"
                ]
            }
        },
        "BikeConnectionManager.bikes_in": {
            "name": "bikes_in",
            "location": 100,
            "return": [
                "bool",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "area": [
                    "int",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "BikeConnectionManager.update_battery": {
            "name": "update_battery",
            "location": 121,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "bike_id": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "transfer.models.TicketBundleID"
                ],
                "percent": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "transfer.models.TicketBundleID"
                ]
            }
        },
        "BikeConnectionManager.update_locked": {
            "name": "update_locked",
            "location": 125,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "bike_id": [
                    "int",
                    "float",
                    "str",
                    "bool"
                ],
                "value": [
                    "int",
                    "float",
                    "str",
                    "bool"
                ]
            }
        },
        "BikeConnectionManager.is_locked": {
            "name": "is_locked",
            "location": 128,
            "return": [
                "str",
                "Iterable[int]",
                "Optional[zerver.models.Realm]"
            ],
            "arguments": {
                "self": [],
                "bike_id": [
                    "int",
                    "str",
                    "tuple[typing.Union[str,None,str]]",
                    "Tuple[Optional[str], str]",
                    "Union[int,str]"
                ]
            }
        },
        "BikeConnectionManager.battery_level": {
            "name": "battery_level",
            "location": 140,
            "return": [
                "str",
                "Optional[int]",
                "Optional[str]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "bike_id": [
                    "int",
                    "str",
                    "tuple[typing.Union[str,None,str]]",
                    "Tuple[Optional[str], str]",
                    "Union[int,str]"
                ]
            }
        },
        "BikeConnectionManager.is_connected": {
            "name": "is_connected",
            "location": 144,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "int",
                    "str",
                    "Union[server.models.Bike, int]",
                    "tuple[int]",
                    "Tuple[int]",
                    "typing.Callable[, ]",
                    "Callable",
                    "typing.Sequence[T]",
                    "Sequence[T]",
                    "Callable[[T], bool]"
                ]
            }
        },
        "BikeConnectionManager._next_rpc_id": {
            "name": "_next_rpc_id",
            "location": 168,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BikeConnectionManager.closest_available_bike.haversine_distance": {
            "name": "haversine_distance",
            "location": 201,
            "return": [
                "Callable"
            ],
            "arguments": {
                "p1": [
                    "List[float]",
                    "Sequence[models.seaSeat]",
                    "Callable"
                ],
                "p2": [
                    "List[float]",
                    "Sequence[models.seaSeat]",
                    "Callable"
                ]
            }
        }
    },
    "server-master/server/service/manager/rental_manager.py": {
        "ActiveRentalError.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "rental_id": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "CurrentlyRentedError.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "float",
                    "bool"
                ],
                "available_bikes": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "RentalEvent.rental_started": {
            "name": "rental_started",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "float",
                    "str",
                    "server.models.Bike",
                    "shapely.geometry.Point",
                    "server.models.User",
                    "models.User"
                ],
                "bike": [
                    "float",
                    "str",
                    "server.models.Bike",
                    "shapely.geometry.Point",
                    "server.models.User",
                    "models.User"
                ],
                "location": [
                    "float",
                    "str",
                    "server.models.Bike",
                    "shapely.geometry.Point",
                    "server.models.User",
                    "models.User"
                ]
            }
        },
        "RentalEvent.rental_ended": {
            "name": "rental_ended",
            "location": 57,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "float",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "server.models.Bike",
                    "str",
                    "None",
                    "shapely.geometry.Point",
                    "server.models.User",
                    "dict",
                    "Dict[str, Any]",
                    "zerver.models.UserProfile",
                    "Optional[zerver.models.UserProfile]"
                ],
                "bike": [
                    "float",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "server.models.Bike",
                    "str",
                    "None",
                    "shapely.geometry.Point",
                    "server.models.User",
                    "dict",
                    "Dict[str, Any]",
                    "zerver.models.UserProfile",
                    "Optional[zerver.models.UserProfile]"
                ],
                "location": [
                    "float",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "server.models.Bike",
                    "str",
                    "None",
                    "shapely.geometry.Point",
                    "server.models.User",
                    "dict",
                    "Dict[str, Any]",
                    "zerver.models.UserProfile",
                    "Optional[zerver.models.UserProfile]"
                ],
                "price": [
                    "float",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "server.models.Bike",
                    "str",
                    "None",
                    "shapely.geometry.Point",
                    "server.models.User",
                    "dict",
                    "Dict[str, Any]",
                    "zerver.models.UserProfile",
                    "Optional[zerver.models.UserProfile]"
                ],
                "distance": [
                    "float",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "server.models.Bike",
                    "str",
                    "None",
                    "shapely.geometry.Point",
                    "server.models.User",
                    "dict",
                    "Dict[str, Any]",
                    "zerver.models.UserProfile",
                    "Optional[zerver.models.UserProfile]"
                ]
            }
        },
        "RentalEvent.rental_cancelled": {
            "name": "rental_cancelled",
            "location": 60,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "dict[, ]",
                    "dict",
                    "dict[str, typing.Any]",
                    "str",
                    "Dict[str, Any]",
                    "None",
                    "zerver.models.UserProfile",
                    "Optional[zerver.models.UserProfile]",
                    "multinedb.models.user.User"
                ],
                "bike": [
                    "dict[, ]",
                    "dict",
                    "dict[str, typing.Any]",
                    "str",
                    "Dict[str, Any]",
                    "None",
                    "zerver.models.UserProfile",
                    "Optional[zerver.models.UserProfile]",
                    "multinedb.models.user.User"
                ]
            }
        },
        "RentalManager.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "payment_manager": [
                    "int"
                ]
            }
        },
        "RentalManager.has_active_rental": {
            "name": "has_active_rental",
            "location": 170,
            "return": [
                "bool",
                "int",
                "Mapping",
                "transfer.models.Scope",
                "abilian.core.models.subjects.User"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "dict[, ]",
                    "zerver.models.Realm",
                    "None",
                    "excars.models.user.User",
                    "zerver.models.UserProfile",
                    "Optional[Dict]"
                ]
            }
        },
        "RentalManager.is_active": {
            "name": "is_active",
            "location": 174,
            "return": [
                "bool",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "rental_id": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "RentalManager.is_in_use": {
            "name": "is_in_use",
            "location": 178,
            "return": [
                "bool",
                "int",
                "Sequence[Any]"
            ],
            "arguments": {
                "self": [],
                "bike": [
                    "int",
                    "str",
                    "Union[server.models.Bike, int]",
                    "list[typing.Any]",
                    "zerver.models.Realm",
                    "None",
                    "bool",
                    "Optional[List[Any]]"
                ]
            }
        },
        "RentalManager.is_available": {
            "name": "is_available",
            "location": 183,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "bike": [
                    "int",
                    "str",
                    "server.models.Bike",
                    "bool"
                ],
                "reservation_manager": [
                    "server.models.Bike",
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "RentalManager.is_renting": {
            "name": "is_renting",
            "location": 187,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int",
                    "List[int]",
                    "list[int]"
                ],
                "bike_id": [
                    "int",
                    "List[int]",
                    "list[int]"
                ]
            }
        }
    },
    "server-master/server/service/manager/reservation_manager.py": {
        "CollectionError.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "ReservationEvent.opened_reservation": {
            "name": "opened_reservation",
            "location": 63,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "pickup": [
                    "int",
                    "datetime.datetime",
                    "server.models.PickupPoint",
                    "server.models.User",
                    "bool"
                ],
                "user": [
                    "int",
                    "datetime.datetime",
                    "server.models.PickupPoint",
                    "server.models.User",
                    "bool"
                ],
                "time": [
                    "int",
                    "datetime.datetime",
                    "server.models.PickupPoint",
                    "server.models.User",
                    "bool"
                ]
            }
        },
        "ReservationEvent.cancelled_reservation": {
            "name": "cancelled_reservation",
            "location": 66,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "pickup": [
                    "float",
                    "str",
                    "server.models.User",
                    "bool",
                    "datetime.datetime",
                    "server.models.PickupPoint",
                    "int"
                ],
                "user": [
                    "float",
                    "str",
                    "server.models.User",
                    "bool",
                    "datetime.datetime",
                    "server.models.PickupPoint",
                    "int"
                ],
                "time": [
                    "float",
                    "str",
                    "server.models.User",
                    "bool",
                    "datetime.datetime",
                    "server.models.PickupPoint",
                    "int"
                ]
            }
        },
        "ReservationManager.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "bike_connection_manager": [
                    "int"
                ],
                "rental_manager": [
                    "int"
                ]
            }
        },
        "ReservationManager.reservations_in": {
            "name": "reservations_in",
            "location": 167,
            "return": [
                "list[]",
                "float",
                "int",
                "bool",
                "List[Dict[str, str]]",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "pickup_point": [
                    "str",
                    "bool",
                    "Callable",
                    "typing.Callable[, ]",
                    "Optional[list]",
                    "list[]",
                    "int",
                    "None"
                ]
            }
        },
        "ReservationManager.is_reserved": {
            "name": "is_reserved",
            "location": 171,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "bike": [
                    "str",
                    "int"
                ]
            }
        },
        "ReservationManager.pickup_bike_surplus": {
            "name": "pickup_bike_surplus",
            "location": 185,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "pickup_point": [
                    "Sequence[T]",
                    "typing.Sequence[T]",
                    "Callable[[], float]",
                    "typing.Callable[[], float]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "ReservationManager._pickup_containing": {
            "name": "_pickup_containing",
            "location": 221,
            "return": [
                "int",
                "bytearray",
                "Callable",
                "models.Question",
                "frozenset",
                "str",
                "list[str]",
                "list[int]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "bike": [
                    "int"
                ]
            }
        }
    },
    "server-master/server/views/base.py": {
        "BaseView.register_route": {
            "name": "register_route",
            "location": 55,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict",
                    "bool",
                    "dict[, ]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "app": [
                    "list[aiohttp.TraceConfig]",
                    "Optional[List[aiohttp.TraceConfig]]",
                    "aiohttp.ClientTimeout",
                    "Dict[str, Any]"
                ],
                "base": [
                    "str",
                    "None"
                ]
            }
        },
        "BaseView.enable_cors": {
            "name": "enable_cors",
            "location": 80,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Callable[..., str]",
                    "bool",
                    "Callable[..., str]",
                    "typing.Iterable[T]",
                    "Iterable[T]",
                    "typing.Type",
                    "type",
                    "list"
                ],
                "cors": [
                    "typing.Callable[..., str]",
                    "bool",
                    "Callable[..., str]",
                    "typing.Iterable[T]",
                    "Iterable[T]",
                    "typing.Type",
                    "type",
                    "list"
                ]
            }
        }
    },
    "server-master/server/views/bikes.py": {},
    "server-master/server/views/decorators.py": {
        "flatten": {
            "name": "flatten",
            "location": 32,
            "return": [
                "list"
            ],
            "arguments": {
                "error": [
                    "Dict[str, Any]",
                    "tuple",
                    "Callable"
                ]
            }
        },
        "resolve_match_map": {
            "name": "resolve_match_map",
            "location": 42,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "request": [
                    "base.Request",
                    "aiohttp.web.Request",
                    "Optional[Dict[str, Any]]"
                ],
                "match_map": [
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, bytes]"
                ]
            }
        },
        "match_getter": {
            "name": "match_getter",
            "location": 84,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "getter_function": [
                    "Optional[Tuple[str]]",
                    "Optional[List[str]]",
                    "bool",
                    "Callable[[int], None]",
                    "Optional[bool]",
                    "List[str]",
                    "Optional[int]"
                ]
            }
        },
        "Optional.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "enum.Enum",
                    "float",
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "match_getter.attach_instance": {
            "name": "attach_instance",
            "location": 102,
            "return": [
                "Dict[str, Any]",
                "str",
                "bool",
                "Optional[BaseException]"
            ],
            "arguments": {
                "original_function": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        },
        "match_getter.setup_apispec": {
            "name": "setup_apispec",
            "location": 156,
            "return": [
                ""
            ],
            "arguments": {
                "new_func": [
                    "Optional[str]",
                    "int"
                ],
                "original_function": [
                    "int",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        }
    },
    "server-master/server/views/issues.py": {},
    "server-master/server/views/misc.py": {},
    "server-master/server/views/pickups.py": {},
    "server-master/server/views/rentals.py": {},
    "server-master/server/views/reports.py": {},
    "server-master/server/views/reservations.py": {},
    "server-master/server/views/users.py": {
        "MeView._get_concrete_user_url": {
            "name": "_get_concrete_user_url",
            "location": 424,
            "return": [
                "zerver.models.UserProfile",
                "str",
                "zerver.models.Realm",
                "amundsen_application.models.user.User",
                "bool"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Optional[str]"
                ],
                "tail": [
                    "str",
                    "dict"
                ],
                "user": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "server-master/server/views/__init__.py": {
        "register_views": {
            "name": "register_views",
            "location": 60,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "app": [
                    "bool",
                    "List[Dict[str, Any]]",
                    "str",
                    "list[dict[str, typing.Any]]",
                    "List[str]",
                    "list[str]"
                ],
                "base": [
                    "str",
                    "List[List[str]]",
                    "list[list[str]]"
                ]
            }
        }
    },
    "server-master/tests/conftest.py": {
        "random_user_factory": {
            "name": "random_user_factory",
            "location": 40,
            "return": [
                "arxiv.users.domain.User",
                "str"
            ],
            "arguments": {
                "database": [
                    "dict",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "random_bike_factory": {
            "name": "random_bike_factory",
            "location": 53,
            "return": [
                "Tuple[int, int]",
                "str",
                "int",
                "T"
            ],
            "arguments": {
                "database": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "database_url": {
            "name": "database_url",
            "location": 64,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "reservation_sourcer": {
            "name": "reservation_sourcer",
            "location": 93,
            "return": [
                "ReservationSourcer",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "reservation_manager": [
                    "int",
                    "str",
                    "typing.Callable[, ]",
                    "Callable",
                    "models.Question"
                ]
            }
        },
        "statistics_reporter": {
            "name": "statistics_reporter",
            "location": 98,
            "return": [
                "StatisticsReporter",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "rental_manager": [
                    "str",
                    "bool",
                    "models.data_frames.data_frame.GUIInterface"
                ],
                "reservation_manager": [
                    "str",
                    "bool",
                    "models.data_frames.data_frame.GUIInterface"
                ]
            }
        },
        "_database": {
            "name": "_database",
            "location": 103,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "database_url": [
                    "typing.Callable[, ]",
                    "Callable",
                    "aiohttp.web.Application",
                    "asyncio.AbstractEventLoop",
                    "bob_emploi.frontend.server.scoring_base.ScoringProject"
                ]
            }
        },
        "ticket_store": {
            "name": "ticket_store",
            "location": 152,
            "return": [
                "TicketStore",
                "str",
                "List[int]",
                "magic.models.Deck"
            ],
            "arguments": {}
        },
        "bike_connection_manager": {
            "name": "bike_connection_manager",
            "location": 157,
            "return": [
                "BikeConnectionManager",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "database": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "payment_manager": {
            "name": "payment_manager",
            "location": 162,
            "return": [
                "DummyPaymentManager",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        },
        "rental_manager": {
            "name": "rental_manager",
            "location": 167,
            "return": [
                "RentalManager",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "database": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "payment_manager": [
                    "int",
                    "typing.Callable[[], None]",
                    "bob_emploi.frontend.server.scoring_base.ScoringProject",
                    "Callable[[], None]"
                ]
            }
        },
        "reservation_manager": {
            "name": "reservation_manager",
            "location": 172,
            "return": [
                "ReservationManager",
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "database": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "bike_connection_manager": [
                    "str",
                    "None",
                    "asyncio.AbstractEventLoop",
                    "dict[str, str]",
                    "Optional[str]",
                    "Dict[str, str]"
                ],
                "rental_manager": [
                    "str",
                    "None",
                    "asyncio.AbstractEventLoop",
                    "dict[str, str]",
                    "Optional[str]",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "server-master/tests/test_events.py": {
        "ExampleEvents.something_happened": {
            "name": "something_happened",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "argument": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "SecondExampleEvents.something_else_happened": {
            "name": "something_else_happened",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "argument": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "EmittingObject.do_something": {
            "name": "do_something",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmittingObject.emit_missing_event": {
            "name": "emit_missing_event",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRegistry.handler": {
            "name": "handler",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "argument": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestRegistry.invalid_handler": {
            "name": "invalid_handler",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestRegistry.test_trigger_event.raise_listener": {
            "name": "raise_listener",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "argument": []
            }
        },
        "TestRegistry.test_trigger_event_natural_syntax.raise_listener": {
            "name": "raise_listener",
            "location": 127,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "argument": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "server-master/tests/test_permissions.py": {
        "true_permission": {
            "name": "true_permission",
            "location": 7,
            "return": [
                "bool",
                "BoolPermission"
            ],
            "arguments": {}
        },
        "false_permission": {
            "name": "false_permission",
            "location": 12,
            "return": [
                "bool",
                "BoolPermission"
            ],
            "arguments": {}
        },
        "BoolPermission.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected_bool": [
                    "dict",
                    "bool",
                    "dict[, ]"
                ]
            }
        }
    },
    "server-master/tests/util.py": {
        "random_key": {
            "name": "random_key",
            "location": 4,
            "return": [
                "str"
            ],
            "arguments": {
                "size": [
                    "int",
                    "float",
                    "Tuple[int, int]"
                ]
            }
        }
    },
    "server-master/tests/__init__.py": {},
    "server-master/tests/serializer/test_decorators.py": {},
    "server-master/tests/serializer/test_model_serializers.py": {
        "TestBikeSerializer.test_serializer_available": {
            "name": "test_serializer_available",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "random_bike": [
                    "str"
                ],
                "rental_manager": [
                    "float",
                    "Optional[Callable]",
                    "typing.Callable[, ]",
                    "None"
                ],
                "bike_connection_manager": [
                    "Optional[str]",
                    "bool",
                    "str",
                    "None"
                ],
                "reservation_manager": [
                    "str"
                ]
            }
        },
        "TestBikeSerializer.test_serializer_unavailable": {
            "name": "test_serializer_unavailable",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "random_bike": [
                    "str"
                ],
                "rental_manager": [
                    "int",
                    "List[int]",
                    "list[int]"
                ],
                "bike_connection_manager": [
                    "Optional[str]",
                    "bool",
                    "str",
                    "None"
                ],
                "reservation_manager": [
                    "str"
                ]
            }
        },
        "TestBikeSerializer.test_serializer_force_location": {
            "name": "test_serializer_force_location",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "random_bike": [
                    "str"
                ],
                "rental_manager": [
                    "int",
                    "List[int]",
                    "list[int]"
                ],
                "bike_connection_manager": [
                    "Optional[str]",
                    "bool",
                    "str",
                    "None"
                ],
                "reservation_manager": [
                    "str"
                ]
            }
        },
        "TestBikeSerializer.test_serializer_with_pickup": {
            "name": "test_serializer_with_pickup",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "random_bike": [
                    "str"
                ],
                "rental_manager": [
                    "float",
                    "Optional[Callable]",
                    "typing.Callable[, ]",
                    "None"
                ],
                "bike_connection_manager": [],
                "random_pickup_point": [],
                "reservation_manager": [
                    "str"
                ]
            }
        }
    },
    "server-master/tests/service/test_bike_connection_manager.py": {
        "TestBikeConnectionManager.setup_method": {
            "name": "setup_method",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBikeConnectionManager.conn_generator": {
            "name": "conn_generator",
            "location": 27,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "server-master/tests/service/test_bike_service.py": {},
    "server-master/tests/service/test_issues.py": {},
    "server-master/tests/service/test_pickup_points.py": {},
    "server-master/tests/service/test_rental_manager.py": {},
    "server-master/tests/service/test_rental_service.py": {},
    "server-master/tests/service/test_reservation_manager.py": {},
    "server-master/tests/service/test_ticket_store.py": {},
    "server-master/tests/service/test_user_service.py": {},
    "server-master/tests/service/test_verify_token.py": {},
    "server-master/tests/service/__init__.py": {},
    "server-master/tests/views/test_bike_views.py": {},
    "server-master/tests/views/test_issues_views.py": {},
    "server-master/tests/views/test_pickup_views.py": {},
    "server-master/tests/views/test_rental_views.py": {},
    "server-master/tests/views/test_reservation_views.py": {},
    "server-master/tests/views/test_user_views.py": {},
    "server-master/tests/views/__init__.py": {}
}
{
    "serverwamp-master/setup.py": {},
    "serverwamp-master/docs/conf.py": {},
    "serverwamp-master/examples/aiohttp_pubsub_app.py": {},
    "serverwamp-master/examples/aiohttp_rpc_app.py": {},
    "serverwamp-master/examples/aiohttp_rpc_app_multi_realm.py": {},
    "serverwamp-master/examples/trio_asgi_rpc_and_pubsub.py": {},
    "serverwamp-master/serverwamp/application.py": {
        "verify_cra_response": {
            "name": "verify_cra_response",
            "location": 541,
            "return": [
                "bool"
            ],
            "arguments": {
                "response": [
                    "CRAResponse"
                ],
                "secret": [
                    "bytes"
                ]
            }
        },
        "Realm.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uri": [
                    "Optional[str]"
                ]
            }
        },
        "Realm.set_authentication_handler": {
            "name": "set_authentication_handler",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "Callable[([serverwamp.session.WAMPSession], Awaitable)]"
                ]
            }
        },
        "Realm.set_rpc_handler": {
            "name": "set_rpc_handler",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "Callable[([serverwamp.rpc.RPCRequest], Union[(AsyncIterator[Union[(serverwamp.rpc.RPCErrorResult, serverwamp.rpc.RPCResult)]], Awaitable[Union[(serverwamp.rpc.RPCErrorResult, serverwamp.rpc.RPCResult)]])])]"
                ]
            }
        },
        "Realm.set_subscription_handler": {
            "name": "set_subscription_handler",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "Callable[([str, serverwamp.session.WAMPSession], AsyncIterator)]"
                ]
            }
        },
        "Realm.add_transport_authenticator": {
            "name": "add_transport_authenticator",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport_authenticator": [
                    "Callable[([serverwamp.session.WAMPSession], Awaitable)]"
                ]
            }
        },
        "Realm.set_cra_handlers": {
            "name": "set_cra_handlers",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "requirement_provider": [
                    "Callable[([serverwamp.session.WAMPSession], Awaitable[CRAAuthRequirement])]"
                ],
                "identity_provider": [
                    "Callable[([serverwamp.session.WAMPSession], Awaitable)]"
                ]
            }
        },
        "Realm.set_ticket_authenticator": {
            "name": "set_ticket_authenticator",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "authenticator": [
                    "Callable[([serverwamp.session.WAMPSession, str], Awaitable)]"
                ]
            }
        },
        "Realm.add_session_state_handler": {
            "name": "add_session_state_handler",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "Callable[([serverwamp.session.WAMPSession], AsyncIterator[None])]"
                ],
                "authenticated_only": []
            }
        },
        "Realm.set_default_arg": {
            "name": "set_default_arg",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arg_name": [],
                "value": [],
                "factory": [
                    "Optional[Callable]"
                ]
            }
        },
        "Realm.add_rpc_routes": {
            "name": "add_rpc_routes",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "routes": []
            }
        },
        "Realm.add_topic_routes": {
            "name": "add_topic_routes",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "routes": []
            }
        },
        "Realm.args_for_realm_level_handler": {
            "name": "args_for_realm_level_handler",
            "location": 138,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "handler": []
            }
        },
        "Application.__init__": {
            "name": "__init__",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "allow_default_realm": [],
                "async_support": [
                    "Optional[Type[serverwamp.adapters.async_base.AsyncSupport]]"
                ],
                "synchronize_requests": [
                    "bool"
                ],
                "protocol_request_handlers": [
                    "Optional[Mapping[(Type[serverwamp.protocol.WAMPRequest], Callable[([serverwamp.protocol.WAMPRequest, serverwamp.session.WAMPSession], Awaitable[None])])]]"
                ]
            }
        },
        "Application.add_realm": {
            "name": "add_realm",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "realm": []
            }
        },
        "Application.set_authentication_handler": {
            "name": "set_authentication_handler",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "Callable[([serverwamp.session.WAMPSession], Awaitable)]"
                ]
            }
        },
        "Application.set_rpc_handler": {
            "name": "set_rpc_handler",
            "location": 381,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "Callable[([serverwamp.rpc.RPCRequest], Union[(AsyncIterator[Union[(serverwamp.rpc.RPCErrorResult, serverwamp.rpc.RPCResult)]], Awaitable[Union[(serverwamp.rpc.RPCErrorResult, serverwamp.rpc.RPCResult)]])])]"
                ]
            }
        },
        "Application.set_subscription_handler": {
            "name": "set_subscription_handler",
            "location": 384,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "Callable[([str, serverwamp.session.WAMPSession], AsyncIterator)]"
                ]
            }
        },
        "Application.add_transport_authenticator": {
            "name": "add_transport_authenticator",
            "location": 387,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "authenticator": [
                    "Callable[([serverwamp.session.WAMPSession], Awaitable)]"
                ]
            }
        },
        "Application.set_cra_handlers": {
            "name": "set_cra_handlers",
            "location": 393,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "requirement_provider": [
                    "Callable[([serverwamp.session.WAMPSession], Awaitable[CRAAuthRequirement])]"
                ],
                "identity_provider": [
                    "Callable[([serverwamp.session.WAMPSession], Awaitable)]"
                ]
            }
        },
        "Application.set_ticket_authenticator": {
            "name": "set_ticket_authenticator",
            "location": 403,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "authenticator": [
                    "Callable[([serverwamp.session.WAMPSession, str], Awaitable)]"
                ]
            }
        },
        "Application.add_session_state_handler": {
            "name": "add_session_state_handler",
            "location": 409,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "Callable[([serverwamp.session.WAMPSession], AsyncIterator[None])]"
                ],
                "authenticated_only": []
            }
        },
        "Application.set_default_arg": {
            "name": "set_default_arg",
            "location": 412,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arg_name": [],
                "value": [],
                "factory": [
                    "Optional[Callable]"
                ]
            }
        },
        "Application.add_rpc_routes": {
            "name": "add_rpc_routes",
            "location": 420,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "routes": []
            }
        },
        "Application.add_topic_routes": {
            "name": "add_topic_routes",
            "location": 423,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "routes": []
            }
        },
        "Application.aiohttp_websocket_handler": {
            "name": "aiohttp_websocket_handler",
            "location": 481,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.asgi_application": {
            "name": "asgi_application",
            "location": 490,
            "return": [
                "Callable[([Mapping, Callable[([], Awaitable[Mapping])], Callable[([Mapping], Awaitable)]], None)]"
            ],
            "arguments": {
                "self": [],
                "paths": [
                    "Optional[Collection[str]]"
                ]
            }
        },
        "Application.legacy_asgi_application": {
            "name": "legacy_asgi_application",
            "location": 512,
            "return": [
                "Callable[([Mapping], Callable[([Callable[([], Awaitable[Mapping])], Callable[([Mapping], Awaitable)]], Awaitable)])]"
            ],
            "arguments": {
                "self": [],
                "paths": [
                    "Optional[Collection[str]]"
                ]
            }
        },
        "Application.legacy_asgi_application.application_callable": {
            "name": "application_callable",
            "location": 519,
            "return": [],
            "arguments": {
                "scope": []
            }
        }
    },
    "serverwamp-master/serverwamp/connection.py": {
        "Connection.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "serverwamp-master/serverwamp/context.py": {
        "asynccontextmanager": {
            "name": "asynccontextmanager",
            "location": 61,
            "return": [
                "Callable[(..., contextlib._AsyncGeneratorContextManager[_T_co])]"
            ],
            "arguments": {
                "func": [
                    "Callable[(..., AsyncIterator[_T_co])]"
                ]
            }
        },
        "asynccontextmanager.helper": {
            "name": "helper",
            "location": 65,
            "return": [
                "_AsyncGeneratorContextManager",
                "Dict[str, int]",
                "str",
                "int",
                "dict"
            ],
            "arguments": {}
        },
        "_GeneratorContextManagerBase.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Tuple[object]",
                    "tuple[object]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "tuple",
                    "int",
                    "tuple[]",
                    "list",
                    "list[]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "args": [],
                "kwds": [
                    "Tuple[object]",
                    "int",
                    "tuple[object]",
                    "Callable",
                    "typing.Callable[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "tuple",
                    "tuple[]",
                    "list",
                    "list[]"
                ]
            }
        },
        "AbstractAsyncContextManager.__subclasshook__": {
            "name": "__subclasshook__",
            "location": 97,
            "return": [
                "str",
                "int",
                "Dict[str, int]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "Sequence[Any]",
                    "typing.Sequence[typing.Any]"
                ],
                "C": [
                    "str",
                    "None",
                    "Optional[str]",
                    "dict[str, typing.Any]",
                    "Optional['ModelOrDc']",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "serverwamp-master/serverwamp/events.py": {
        "TopicRouteSet.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TopicRouteSet.__repr__": {
            "name": "__repr__",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TopicRouteSet.__getitem__": {
            "name": "__getitem__",
            "location": 20,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TopicRouteSet.__iter__": {
            "name": "__iter__",
            "location": 23,
            "return": [
                "listiterator[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TopicRouteSet.__len__": {
            "name": "__len__",
            "location": 26,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TopicRouteSet.__contains__": {
            "name": "__contains__",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "list[str]",
                    "List[str]",
                    "abc.Mapping"
                ]
            }
        },
        "TopicRouteSet.route": {
            "name": "route",
            "location": 32,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "self": [],
                "uri": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TopicRouteSet.prefix_route": {
            "name": "prefix_route",
            "location": 39,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "self": [],
                "uri_prefix": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TopicRouteSet.regex_route": {
            "name": "regex_route",
            "location": 46,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "self": [],
                "uri_pattern": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TopicRouteDef.register": {
            "name": "register",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "router": [
                    "int"
                ]
            }
        },
        "TopicPrefixRouteDef.register": {
            "name": "register",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "router": [
                    "str",
                    "int"
                ]
            }
        },
        "TopicRegexRouteDef.register": {
            "name": "register",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "router": [
                    "int"
                ]
            }
        },
        "TopicRouteSet.route.inner": {
            "name": "inner",
            "location": 33,
            "return": [],
            "arguments": {
                "handler": []
            }
        },
        "TopicRouteSet.prefix_route.inner": {
            "name": "inner",
            "location": 40,
            "return": [],
            "arguments": {
                "handler": []
            }
        },
        "TopicRouteSet.regex_route.inner": {
            "name": "inner",
            "location": 47,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "handler": [
                    "T",
                    "int",
                    "str"
                ]
            }
        }
    },
    "serverwamp-master/serverwamp/helpers.py": {
        "camel_to_snake": {
            "name": "camel_to_snake",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "format_sockaddr": {
            "name": "format_sockaddr",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "net_family": [
                    "str",
                    "int"
                ],
                "sockaddr": [
                    "str",
                    "list[int]",
                    "int",
                    "Union[int, List[int]]"
                ]
            }
        },
        "objects_from_msgpack_batch": {
            "name": "objects_from_msgpack_batch",
            "location": 27,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "batch": [
                    "bytes"
                ]
            }
        }
    },
    "serverwamp-master/serverwamp/json.py": {
        "jsons_from_batch": {
            "name": "jsons_from_batch",
            "location": 87,
            "return": [
                "Generator[(str, Any, None)]"
            ],
            "arguments": {
                "batch": [
                    "str"
                ]
            }
        },
        "_WAMPJSONEncoder.default": {
            "name": "default",
            "location": 55,
            "return": [
                "str",
                "float",
                "List[dict]",
                "bytes",
                "bytearray"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "TextIO",
                    "bool"
                ]
            }
        },
        "_WAMPJSONDecoder.string": {
            "name": "string",
            "location": 49,
            "return": [
                "Union[(bytes, str)]"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str"
                ]
            }
        },
        "_obj_fallback": {
            "name": "_obj_fallback",
            "location": 70,
            "return": [
                "float",
                "str",
                "T"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "bool",
                    "TextIO",
                    "int"
                ]
            }
        },
        "serialize": {
            "name": "serialize",
            "location": 78,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "Union[str, List[str]]",
                    "bool"
                ]
            }
        }
    },
    "serverwamp-master/serverwamp/protocol.py": {
        "generate_global_id": {
            "name": "generate_global_id",
            "location": 40,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "call_result_response_msg": {
            "name": "call_result_response_msg",
            "location": 203,
            "return": [
                "typing.Sequence"
            ],
            "arguments": {
                "request": [
                    "WAMPRPCRequest"
                ],
                "args": [
                    "Optional[typing.Sequence]"
                ],
                "kwargs": [
                    "None"
                ],
                "progress": [
                    "bool"
                ]
            }
        },
        "call_error_response_msg": {
            "name": "call_error_response_msg",
            "location": 220,
            "return": [
                "tuple"
            ],
            "arguments": {
                "request": [
                    "WAMPRPCRequest"
                ],
                "error_uri": [
                    "str"
                ],
                "args": [
                    "Optional[typing.Sequence]"
                ],
                "kwargs": [
                    "Optional[Mapping]"
                ]
            }
        },
        "subscribed_response_msg": {
            "name": "subscribed_response_msg",
            "location": 236,
            "return": [
                "Iterable"
            ],
            "arguments": {
                "request": [
                    "WAMPSubscribeRequest"
                ],
                "subscription_id": [
                    "int",
                    "str"
                ]
            }
        },
        "unsubscribe_error_response_msg": {
            "name": "unsubscribe_error_response_msg",
            "location": 243,
            "return": [
                "Tuple[(Any, Any, int, Dict[(nothing, nothing)], _T0)]"
            ],
            "arguments": {
                "request": [
                    "WAMPUnsubscribeRequest"
                ],
                "error_uri": [
                    "_T0"
                ]
            }
        },
        "unsubscribed_response_msg": {
            "name": "unsubscribed_response_msg",
            "location": 251,
            "return": [
                "Iterable"
            ],
            "arguments": {
                "request": [
                    "WAMPUnsubscribeRequest"
                ]
            }
        },
        "unimplemented_response_msg": {
            "name": "unimplemented_response_msg",
            "location": 255,
            "return": [
                "Iterable"
            ],
            "arguments": {
                "request": [
                    "WAMPRequest"
                ]
            }
        },
        "cra_challenge_msg": {
            "name": "cra_challenge_msg",
            "location": 264,
            "return": [
                "Iterable"
            ],
            "arguments": {
                "challenge_string": [
                    "str"
                ]
            }
        },
        "ticket_challenge_msg": {
            "name": "ticket_challenge_msg",
            "location": 268,
            "return": [
                "Iterable"
            ],
            "arguments": {}
        },
        "scram_nonce": {
            "name": "scram_nonce",
            "location": 272,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "welcome_msg": {
            "name": "welcome_msg",
            "location": 285,
            "return": [
                "Iterable"
            ],
            "arguments": {
                "session_id": [
                    "str",
                    "int"
                ],
                "agent_name": [
                    "str",
                    "None",
                    "Optional[str]",
                    "bool",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "goodbye_msg": {
            "name": "goodbye_msg",
            "location": 301,
            "return": [
                "Tuple[(Any, Dict[(str, _T1)], _T0)]"
            ],
            "arguments": {
                "reason_uri": [
                    "_T0"
                ],
                "message": [
                    "_T1"
                ]
            }
        },
        "abort_msg": {
            "name": "abort_msg",
            "location": 308,
            "return": [
                "Tuple[(Any, Dict[(str, _T1)], _T0)]"
            ],
            "arguments": {
                "reason_uri": [
                    "_T0"
                ],
                "message": [
                    "_T1"
                ]
            }
        },
        "event_msg": {
            "name": "event_msg",
            "location": 315,
            "return": [
                "tuple"
            ],
            "arguments": {
                "subscription_id": [
                    "int"
                ],
                "publication_id": [
                    "int"
                ],
                "args": [
                    "Optional[typing.Sequence]"
                ],
                "kwargs": [
                    "Optional[Mapping]"
                ],
                "trust_level": [
                    "Optional[int]"
                ],
                "specific_topic": [
                    "Optional[str]"
                ]
            }
        },
        "cra_challenge_string": {
            "name": "cra_challenge_string",
            "location": 339,
            "return": [
                "str"
            ],
            "arguments": {
                "session_id": [
                    "int"
                ],
                "auth_id": [
                    "str"
                ],
                "auth_role": [
                    "str"
                ],
                "auth_provider": [
                    "str"
                ],
                "nonce": [
                    "str"
                ],
                "auth_time": [
                    "Optional[_datetime.datetime]"
                ]
            }
        },
        "wamp_request_from_msg": {
            "name": "wamp_request_from_msg",
            "location": 374,
            "return": [
                "WAMPRequest"
            ],
            "arguments": {
                "msg": [
                    "typing.Sequence"
                ]
            }
        },
        "AuthenticationFailure.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "str"
                ]
            }
        },
        "WAMPHelloRequest.from_msg_data": {
            "name": "from_msg_data",
            "location": 57,
            "return": [
                "WAMPHelloRequest"
            ],
            "arguments": {
                "cls": [
                    "Type[_TWAMPHelloRequest]"
                ],
                "msg_data": [
                    "typing.Sequence"
                ]
            }
        },
        "WAMPSubscribeRequest.from_msg_data": {
            "name": "from_msg_data",
            "location": 76,
            "return": [
                "WAMPSubscribeRequest"
            ],
            "arguments": {
                "cls": [
                    "Type[_TWAMPSubscribeRequest]"
                ],
                "msg_data": [
                    "typing.Sequence"
                ]
            }
        },
        "WAMPUnsubscribeRequest.from_msg_data": {
            "name": "from_msg_data",
            "location": 106,
            "return": [
                "WAMPUnsubscribeRequest"
            ],
            "arguments": {
                "cls": [
                    "Type[_TWAMPUnsubscribeRequest]"
                ],
                "msg_data": [
                    "typing.Sequence"
                ]
            }
        },
        "WAMPRPCRequest.from_msg_data": {
            "name": "from_msg_data",
            "location": 140,
            "return": [
                "WAMPRPCRequest"
            ],
            "arguments": {
                "cls": [
                    "Type[_TWAMPRPCRequest]"
                ],
                "msg_data": [
                    "typing.Sequence"
                ]
            }
        },
        "WAMPGoodbyeRequest.from_msg_data": {
            "name": "from_msg_data",
            "location": 191,
            "return": [
                "WAMPGoodbyeRequest"
            ],
            "arguments": {
                "cls": [
                    "Type[_TWAMPGoodbyeRequest]"
                ],
                "msg_data": [
                    "typing.Sequence"
                ]
            }
        }
    },
    "serverwamp-master/serverwamp/routing.py": {
        "URIsRouter.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "camel_snake_conversion": [
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "URIsRouter.set_default_arg": {
            "name": "set_default_arg",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arg_name": [
                    "str",
                    "Optional[IO[bytes]]",
                    "typing.IO",
                    "Dict[str, Any]",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "value": [
                    "str",
                    "None",
                    "Optional[IO[bytes]]",
                    "Dict[str, Any]",
                    "typing.IO",
                    "dict[str, typing.Any]"
                ],
                "factory": [
                    "Optional[Callable[([], Any)]]"
                ]
            }
        },
        "URIsRouter.add_route": {
            "name": "add_route",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uri": [
                    "str"
                ],
                "handler": [
                    "Callable[(..., Awaitable)]"
                ]
            }
        },
        "URIsRouter.add_prefix_route": {
            "name": "add_prefix_route",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uri_prefix": [
                    "str"
                ],
                "handler": [
                    "Callable[(..., Awaitable)]"
                ]
            }
        },
        "URIsRouter.add_regex_route": {
            "name": "add_regex_route",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uri_pattern": [
                    "Union[(str, Pattern)]"
                ],
                "handler": [
                    "Callable"
                ]
            }
        },
        "URIsRouter.resolve": {
            "name": "resolve",
            "location": 58,
            "return": [
                "Callable[(..., Awaitable)]"
            ],
            "arguments": {
                "self": [],
                "uri": [
                    "str"
                ]
            }
        },
        "URIsRouter.add_routes": {
            "name": "add_routes",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "routes": [
                    "bytes",
                    "str",
                    "list[str]",
                    "List[str]"
                ]
            }
        }
    },
    "serverwamp-master/serverwamp/rpc.py": {
        "route": {
            "name": "route",
            "location": 163,
            "return": [
                "RPCRouteDef"
            ],
            "arguments": {
                "uri": [
                    "int",
                    "List[List[T]]"
                ],
                "handler": [
                    "int",
                    "List[List[T]]"
                ]
            }
        },
        "_yielded_value_to_result": {
            "name": "_yielded_value_to_result",
            "location": 217,
            "return": [
                "Union[(RPCResult, _T0)]"
            ],
            "arguments": {
                "yielded_value": [
                    "_T0"
                ]
            }
        },
        "RPCRouteDef.register": {
            "name": "register",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "router": [
                    "int"
                ]
            }
        },
        "RPCPrefixRouteDef.register": {
            "name": "register",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "router": [
                    "str",
                    "int"
                ]
            }
        },
        "RPCRegexRouteDef.register": {
            "name": "register",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "router": [
                    "int"
                ]
            }
        },
        "RPCRouteSet.__init__": {
            "name": "__init__",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPCRouteSet.__repr__": {
            "name": "__repr__",
            "location": 172,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPCRouteSet.__getitem__": {
            "name": "__getitem__",
            "location": 175,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "RPCRouteSet.__iter__": {
            "name": "__iter__",
            "location": 178,
            "return": [
                "listiterator[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPCRouteSet.__len__": {
            "name": "__len__",
            "location": 181,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPCRouteSet.__contains__": {
            "name": "__contains__",
            "location": 184,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "List[str]",
                    "abc.Mapping"
                ]
            }
        },
        "RPCRouteSet.route": {
            "name": "route",
            "location": 187,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "self": [],
                "uri": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "RPCRouteSet.prefix_route": {
            "name": "prefix_route",
            "location": 193,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "self": [],
                "uri_prefix": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "RPCRouteSet.regex_route": {
            "name": "regex_route",
            "location": 200,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "self": [],
                "uri_pattern": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "RPCRouteSet.route.inner": {
            "name": "inner",
            "location": 188,
            "return": [],
            "arguments": {
                "handler": []
            }
        },
        "RPCRouteSet.prefix_route.inner": {
            "name": "inner",
            "location": 194,
            "return": [],
            "arguments": {
                "handler": []
            }
        },
        "RPCRouteSet.regex_route.inner": {
            "name": "inner",
            "location": 201,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "handler": [
                    "T",
                    "int",
                    "str"
                ]
            }
        }
    },
    "serverwamp-master/serverwamp/session.py": {
        "AbstractAsyncQueue.task_done": {
            "name": "task_done",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractAsyncQueue.put_nowait": {
            "name": "put_nowait",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "int"
                ]
            }
        },
        "WAMPSession.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "realm": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "tasks": [
                    "serverwamp.adapters.async_base.AsyncTaskGroup"
                ],
                "auth_id": [
                    "str",
                    "int",
                    "None",
                    "bytes"
                ],
                "auth_methods": [
                    "tuple[]",
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "WAMPSession.__getitem__": {
            "name": "__getitem__",
            "location": 65,
            "return": [
                "dict",
                "Optional[str]",
                "Sequence['cirq.Qid']"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "WAMPSession.__setitem__": {
            "name": "__setitem__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "str",
                    "int",
                    "VT",
                    "KT",
                    "Union[str, int]"
                ]
            }
        },
        "WAMPSession.__delitem__": {
            "name": "__delitem__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "WAMPSession.__len__": {
            "name": "__len__",
            "location": 74,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "WAMPSession.__iter__": {
            "name": "__iter__",
            "location": 77,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WAMPSession.subscription_id_for_topic": {
            "name": "subscription_id_for_topic",
            "location": 138,
            "return": [
                "int"
            ],
            "arguments": {
                "topic": [
                    "str",
                    "logging.LogRecord",
                    "Optional[int]",
                    "bool"
                ]
            }
        }
    },
    "serverwamp-master/serverwamp/__init__.py": {},
    "serverwamp-master/serverwamp/adapters/aiohttp.py": {
        "AiohttpWebSocketConnection.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ws": [
                    "str",
                    "int",
                    "List[str]",
                    "float",
                    "list[str]"
                ],
                "request": [
                    "dict[str, typing.Any]",
                    "aiohttp.web.Request",
                    "Dict[str, Any]"
                ],
                "compress_outbound": [
                    "bool",
                    "str",
                    "List[str]",
                    "int",
                    "float"
                ]
            }
        }
    },
    "serverwamp-master/serverwamp/adapters/anyio.py": {
        "AnyioTaskGroup.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "anyio_task_group": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "str",
                    "tuple",
                    "tuple[]"
                ]
            }
        }
    },
    "serverwamp-master/serverwamp/adapters/asgi.py": {
        "scope_cookies": {
            "name": "scope_cookies",
            "location": 26,
            "return": [
                "Optional[Dict[(str, str)]]"
            ],
            "arguments": {
                "scope": [
                    "Mapping"
                ]
            }
        },
        "ASGIWebSocketConection.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "asgi_scope": [
                    "int"
                ],
                "asgi_receiver": [
                    "int",
                    "bool",
                    "float"
                ],
                "asgi_sender": [
                    "int",
                    "bool",
                    "float"
                ],
                "cookies": [
                    "List[str]"
                ]
            }
        }
    },
    "serverwamp-master/serverwamp/adapters/asyncio.py": {
        "AsyncioTaskGroup.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "serverwamp-master/serverwamp/adapters/async_base.py": {
        "AsyncSupport.launch_task_group": {
            "name": "launch_task_group",
            "location": 36,
            "return": [
                "AsyncContextManager[AsyncTaskGroup]"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "Type[T]",
                    "typing.Iterable[]",
                    "typing.Callable[[], typing.Any]",
                    "T",
                    "Type",
                    "Iterable",
                    "Callable[[], Any]"
                ]
            }
        }
    },
    "serverwamp-master/serverwamp/adapters/trio.py": {
        "TrioTaskGroup.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nursery": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "serverwamp-master/serverwamp/adapters/__init__.py": {},
    "serverwamp-master/tests/old_test_rpc.py": {
        "test_route_table": {
            "name": "test_route_table",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_router_rpc_handling": {
            "name": "test_router_rpc_handling",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_type_marshaling": {
            "name": "test_type_marshaling",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_default_args": {
            "name": "test_default_args",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_realms": {
            "name": "test_realms",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
{
    "shmooganography2019-master/basic.py": {},
    "shmooganography2019-master/exif-header.py": {
        "hide": {
            "name": "hide",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "img": [],
                "img_enc": [],
                "copyright": [],
                "secret_message": [],
                "secret_file": []
            }
        },
        "reveal": {
            "name": "reveal",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "img": []
            }
        }
    },
    "shmooganography2019-master/exifHeader.py": {
        "hide": {
            "name": "hide",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "img": [],
                "img_enc": [],
                "copyright": [],
                "secret_message": [],
                "secret_file": []
            }
        },
        "reveal": {
            "name": "reveal",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "img": []
            }
        }
    },
    "shmooganography2019-master/lsb-s.py": {},
    "shmooganography2019-master/LSB.py": {},
    "shmooganography2019-master/setup.py": {},
    "shmooganography2019-master/slsb.py": {},
    "shmooganography2019-master/steganalyse.py": {
        "steganalyse": {
            "name": "steganalyse",
            "location": 10,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "img": [
                    "int",
                    "list",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "shmooganography2019-master/steganalysis-parity.py": {
        "steganalyse": {
            "name": "steganalyse",
            "location": 29,
            "return": [],
            "arguments": {
                "img": []
            }
        }
    },
    "shmooganography2019-master/steganalysis-statistics.py": {
        "steganalyse": {
            "name": "steganalyse",
            "location": 33,
            "return": [
                "Tuple[(Any, List[Tuple[(Any, int)]])]"
            ],
            "arguments": {
                "img": []
            }
        }
    },
    "shmooganography2019-master/tools.py": {
        "a2bits": {
            "name": "a2bits",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "chars": []
            }
        },
        "a2bits_list": {
            "name": "a2bits_list",
            "location": 38,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "chars": []
            }
        },
        "bs": {
            "name": "bs",
            "location": 60,
            "return": [
                "str"
            ],
            "arguments": {
                "s": []
            }
        },
        "setlsb": {
            "name": "setlsb",
            "location": 66,
            "return": [],
            "arguments": {
                "component": [],
                "bit": []
            }
        },
        "n_at_a_time": {
            "name": "n_at_a_time",
            "location": 72,
            "return": [],
            "arguments": {
                "items": [],
                "n": [],
                "fillvalue": []
            }
        },
        "binary2base64": {
            "name": "binary2base64",
            "location": 83,
            "return": [
                "bytes"
            ],
            "arguments": {
                "binary_file": []
            }
        },
        "base642binary": {
            "name": "base642binary",
            "location": 100,
            "return": [
                "bytes"
            ],
            "arguments": {
                "b64_fname": []
            }
        }
    },
    "shmooganography2019-master/__init__.py": {},
    "shmooganography2019-master/docs/conf.py": {},
    "shmooganography2019-master/examples/example-lsb.py": {},
    "shmooganography2019-master/exif/minimal_exif_reader.py": {},
    "shmooganography2019-master/exif/minimal_exif_writer.py": {},
    "shmooganography2019-master/exif/__init__.py": {},
    "shmooganography2019-master/stegano/basic.py": {
        "hide": {
            "name": "hide",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "img": [],
                "message": []
            }
        },
        "reveal": {
            "name": "reveal",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "img": []
            }
        }
    },
    "shmooganography2019-master/stegano/exifHeader.py": {
        "hide": {
            "name": "hide",
            "location": 30,
            "return": [
                "Image.Image"
            ],
            "arguments": {
                "input_image_file": [],
                "img_enc": [],
                "secret_message": [],
                "secret_file": []
            }
        },
        "reveal": {
            "name": "reveal",
            "location": 57,
            "return": [
                "bytes"
            ],
            "arguments": {
                "input_image_file": []
            }
        }
    },
    "shmooganography2019-master/stegano/generators.py": {
        "identity": {
            "name": "identity",
            "location": 31,
            "return": [
                "Generator[(int, Any, Any)]"
            ],
            "arguments": {}
        },
        "Dead_Man_Walking": {
            "name": "Dead_Man_Walking",
            "location": 40,
            "return": [
                "Generator[(int, Any, Any)]"
            ],
            "arguments": {}
        },
        "OEIS_A000217": {
            "name": "OEIS_A000217",
            "location": 46,
            "return": [
                "Generator[(int, Any, Any)]"
            ],
            "arguments": {}
        },
        "fermat": {
            "name": "fermat",
            "location": 56,
            "return": [
                "Generator[(int, Any, Any)]"
            ],
            "arguments": {}
        },
        "mersenne": {
            "name": "mersenne",
            "location": 65,
            "return": [
                "Generator[(int, Any, Any)]"
            ],
            "arguments": {}
        },
        "eratosthenes": {
            "name": "eratosthenes",
            "location": 74,
            "return": [
                "Generator[(int, Any, None)]"
            ],
            "arguments": {}
        },
        "eratosthenes_composite": {
            "name": "eratosthenes_composite",
            "location": 88,
            "return": [
                "Generator[(int, Any, None)]"
            ],
            "arguments": {}
        },
        "carmichael": {
            "name": "carmichael",
            "location": 98,
            "return": [
                "Generator[(int, Any, None)]"
            ],
            "arguments": {}
        },
        "ackermann": {
            "name": "ackermann",
            "location": 106,
            "return": [],
            "arguments": {
                "m": [],
                "n": []
            }
        },
        "fibonacci": {
            "name": "fibonacci",
            "location": 117,
            "return": [
                "Generator[(int, Any, Any)]"
            ],
            "arguments": {}
        },
        "syracuse": {
            "name": "syracuse",
            "location": 128,
            "return": [
                "Generator[(_T0, Any, Any)]"
            ],
            "arguments": {
                "l": [
                    "_T0"
                ]
            }
        },
        "log_gen": {
            "name": "log_gen",
            "location": 141,
            "return": [
                "Generator[(int, Any, Any)]"
            ],
            "arguments": {}
        }
    },
    "shmooganography2019-master/stegano/red.py": {
        "hide": {
            "name": "hide",
            "location": 31,
            "return": [
                "Image.Image"
            ],
            "arguments": {
                "input_image_file": [],
                "message": []
            }
        },
        "reveal": {
            "name": "reveal",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "input_image_file": []
            }
        },
        "write": {
            "name": "write",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "image": [],
                "output_image_file": []
            }
        }
    },
    "shmooganography2019-master/stegano/slsb-gen.py": {},
    "shmooganography2019-master/stegano/slsb.py": {
        "hide": {
            "name": "hide",
            "location": 38,
            "return": [],
            "arguments": {
                "input_image_file": [],
                "message": [],
                "auto_convert_rgb": [
                    "bool"
                ]
            }
        },
        "reveal": {
            "name": "reveal",
            "location": 87,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "input_image_file": []
            }
        },
        "write": {
            "name": "write",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "image": [],
                "output_image_file": []
            }
        }
    },
    "shmooganography2019-master/stegano/slsbset.py": {
        "hide": {
            "name": "hide",
            "location": 39,
            "return": [],
            "arguments": {
                "input_image_file": [],
                "message": [],
                "generator_function": [],
                "auto_convert_rgb": [
                    "bool"
                ]
            }
        },
        "reveal": {
            "name": "reveal",
            "location": 94,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "input_image_file": [],
                "generator_function": []
            }
        },
        "write": {
            "name": "write",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "image": [],
                "output_image_file": []
            }
        }
    },
    "shmooganography2019-master/stegano/steganalysis-parity.py": {
        "steganalyse": {
            "name": "steganalyse",
            "location": 29,
            "return": [],
            "arguments": {
                "img": []
            }
        }
    },
    "shmooganography2019-master/stegano/steganalysis-statistics.py": {
        "steganalyse": {
            "name": "steganalyse",
            "location": 33,
            "return": [
                "Tuple[(Any, List[Tuple[(Any, int)]])]"
            ],
            "arguments": {
                "img": []
            }
        }
    },
    "shmooganography2019-master/stegano/steganalysisParity.py": {
        "steganalyse": {
            "name": "steganalyse",
            "location": 29,
            "return": [],
            "arguments": {
                "img": []
            }
        }
    },
    "shmooganography2019-master/stegano/steganalysisStatistics.py": {
        "steganalyse": {
            "name": "steganalyse",
            "location": 33,
            "return": [
                "Tuple[(list, List[Tuple[(Any, int)]])]"
            ],
            "arguments": {
                "img": []
            }
        }
    },
    "shmooganography2019-master/stegano/tools.py": {
        "a2bits": {
            "name": "a2bits",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "chars": [
                    "str"
                ]
            }
        },
        "a2bits_list": {
            "name": "a2bits_list",
            "location": 46,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "chars": [
                    "str"
                ],
                "encoding": [
                    "str"
                ]
            }
        },
        "bs": {
            "name": "bs",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "int"
                ]
            }
        },
        "setlsb": {
            "name": "setlsb",
            "location": 72,
            "return": [
                "int"
            ],
            "arguments": {
                "component": [
                    "int"
                ],
                "bit": [
                    "str"
                ]
            }
        },
        "n_at_a_time": {
            "name": "n_at_a_time",
            "location": 77,
            "return": [
                "Iterator[Tuple[Union[(int, str)]]]"
            ],
            "arguments": {
                "items": [
                    "List[int]"
                ],
                "n": [
                    "int"
                ],
                "fillvalue": [
                    "str"
                ]
            }
        },
        "binary2base64": {
            "name": "binary2base64",
            "location": 88,
            "return": [
                "str"
            ],
            "arguments": {
                "binary_file": [
                    "str"
                ]
            }
        },
        "base642binary": {
            "name": "base642binary",
            "location": 97,
            "return": [
                "bytes"
            ],
            "arguments": {
                "b64_fname": [
                    "str"
                ]
            }
        }
    },
    "shmooganography2019-master/stegano/__init__.py": {},
    "shmooganography2019-master/stegano/exif/minimal_exif_reader.py": {
        "MinimalExifReader.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "MinimalExifReader.imageDescription": {
            "name": "imageDescription",
            "location": 87,
            "return": [
                "str",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MinimalExifReader.copyright": {
            "name": "copyright",
            "location": 93,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MinimalExifReader.dateTimeOriginal": {
            "name": "dateTimeOriginal",
            "location": 99,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "formatString": [
                    "str",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "MinimalExifReader.ifdSearch": {
            "name": "ifdSearch",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ifdStart": [
                    "int",
                    "list[float]",
                    "float",
                    "Optional[int]",
                    "Dict[int, int]",
                    "bool",
                    "List[float]",
                    "str"
                ]
            }
        },
        "MinimalExifReader.getValueAtLocation": {
            "name": "getValueAtLocation",
            "location": 135,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "int",
                    "Tuple[int, int]",
                    "tuple[bytes]",
                    "Tuple[bytes]",
                    "Dict[str, Any]"
                ],
                "length": [
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "int",
                    "Tuple[int, int]",
                    "tuple[bytes]",
                    "Tuple[bytes]",
                    "Dict[str, Any]"
                ]
            }
        },
        "MinimalExifReader.s2n_motorola": {
            "name": "s2n_motorola",
            "location": 144,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "str": [
                    "str",
                    "bool",
                    "list[]",
                    "list",
                    "int"
                ]
            }
        },
        "MinimalExifReader.s2n_intel": {
            "name": "s2n_intel",
            "location": 151,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "str": [
                    "str",
                    "bool",
                    "list[]",
                    "list",
                    "int"
                ]
            }
        },
        "MinimalExifReader.getTagValue": {
            "name": "getTagValue",
            "location": 160,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "thisTagStart": [
                    "int",
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "MinimalExifReader.__str__": {
            "name": "__str__",
            "location": 173,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "shmooganography2019-master/stegano/exif/minimal_exif_writer.py": {
        "usage": {
            "name": "usage",
            "location": 346,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "error": [
                    "str",
                    "None",
                    "bool",
                    "float",
                    "IO[str]",
                    "typing.IO",
                    "int",
                    "IO"
                ]
            }
        },
        "parseArgs": {
            "name": "parseArgs",
            "location": 387,
            "return": [
                "tuple[typing.Union[str,list[str],list[],dict[str, list[typing.Any]],None,int]]",
                "bool",
                "str"
            ],
            "arguments": {
                "args_": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[List[str]]",
                    "list[str]",
                    "Union[str, Iterable[str]]",
                    "None",
                    "str"
                ]
            }
        },
        "MinimalExifWriter.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "MinimalExifWriter.newImageDescription": {
            "name": "newImageDescription",
            "location": 70,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "description": [
                    "bool",
                    "int"
                ]
            }
        },
        "MinimalExifWriter.newCopyright": {
            "name": "newCopyright",
            "location": 74,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "copyright": [
                    "Optional[int]",
                    "float",
                    "int",
                    "None"
                ],
                "addSymbol": [
                    "int",
                    "Optional[str]",
                    "bool",
                    "Dict[str, Any]",
                    "Iterable"
                ],
                "addYear": [
                    "int",
                    "Optional[str]",
                    "bool",
                    "Dict[str, Any]",
                    "Iterable"
                ]
            }
        },
        "MinimalExifWriter.removeExif": {
            "name": "removeExif",
            "location": 85,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MinimalExifWriter.process": {
            "name": "process",
            "location": 89,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MinimalExifWriter.buildSubIfd": {
            "name": "buildSubIfd",
            "location": 160,
            "return": [
                "typing.Text",
                "List[int]",
                "str",
                "List[dict]",
                "bool",
                "Union[int, float]",
                "float"
            ],
            "arguments": {
                "self": [],
                "lenDateTime": [
                    "bool",
                    "str"
                ],
                "offsetToEndOfData": [
                    "bool",
                    "str"
                ]
            }
        },
        "MinimalExifWriter.getExistingExifInfo": {
            "name": "getExistingExifInfo",
            "location": 164,
            "return": [
                "None",
                "Union[tuple, list]",
                "Set[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MinimalExifWriter.removeExifInfo": {
            "name": "removeExifInfo",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "addApp0": [
                    "int",
                    "str",
                    "List[Dict[str, Any]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "MinimalExifWriter.removeApp0": {
            "name": "removeApp0",
            "location": 257,
            "return": [
                "None",
                "float",
                "str",
                "List[str]",
                "OrderedDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "MinimalExifWriter.addApp1": {
            "name": "addApp1",
            "location": 280,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "app1": [
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "MinimalExifWriter.fourBytesHexIntel": {
            "name": "fourBytesHexIntel",
            "location": 293,
            "return": [
                "typing.Text",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "int",
                    "Iterable[Any]",
                    "Dict[str, bool]"
                ]
            }
        },
        "MinimalExifWriter.twoBytesHexIntel": {
            "name": "twoBytesHexIntel",
            "location": 300,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "int",
                    "Iterable[Any]",
                    "Dict[str, bool]"
                ]
            }
        },
        "MinimalExifWriter.descriptionTag": {
            "name": "descriptionTag",
            "location": 305,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "numChars": [
                    "int",
                    "List[str]",
                    "float",
                    "list[str]",
                    "Callable[..., None]",
                    "typing.Callable[..., None]"
                ],
                "loc": [
                    "int",
                    "List[str]",
                    "float",
                    "list[str]",
                    "Callable[..., None]",
                    "typing.Callable[..., None]"
                ]
            }
        },
        "MinimalExifWriter.copyrightTag": {
            "name": "copyrightTag",
            "location": 309,
            "return": [
                "str",
                "list",
                "dict"
            ],
            "arguments": {
                "self": [],
                "numChars": [
                    "int",
                    "List[str]",
                    "float",
                    "list[str]",
                    "Callable[..., None]",
                    "typing.Callable[..., None]"
                ],
                "loc": [
                    "int",
                    "List[str]",
                    "float",
                    "list[str]",
                    "Callable[..., None]",
                    "typing.Callable[..., None]"
                ]
            }
        },
        "MinimalExifWriter.subIfdTag": {
            "name": "subIfdTag",
            "location": 313,
            "return": [
                "typing.Text",
                "AbstractSet[T]",
                "AbstractSet[T_co]",
                "dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "loc": [
                    "str",
                    "bytearray",
                    "int",
                    "Union[str, bytes]",
                    "bytes"
                ]
            }
        },
        "MinimalExifWriter.asciiTag": {
            "name": "asciiTag",
            "location": 317,
            "return": [
                "typing.Text",
                "Dict[str, Iterable[Any]]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "bool",
                    "str"
                ],
                "numChars": [
                    "bool",
                    "str"
                ],
                "loc": [
                    "bool",
                    "str"
                ]
            }
        },
        "MinimalExifWriter.buildApp1Section": {
            "name": "buildApp1Section",
            "location": 323,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "ifdPieces": [
                    "str",
                    "list[str]",
                    "os.PathLike",
                    "List[str]",
                    "Iterable[str]"
                ],
                "ifdEndPieces": [
                    "str",
                    "list[str]",
                    "os.PathLike",
                    "List[str]",
                    "Iterable[str]"
                ]
            }
        },
        "MinimalExifWriter.__str__": {
            "name": "__str__",
            "location": 337,
            "return": [
                "typing.Text",
                "str",
                "Optional[str]",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "shmooganography2019-master/stegano/exif/__init__.py": {},
    "shmooganography2019-master/stegano/exifHeader/exifHeader.py": {
        "hide": {
            "name": "hide",
            "location": 31,
            "return": [
                "Image.Image"
            ],
            "arguments": {
                "input_image_file": [],
                "img_enc": [],
                "secret_message": [],
                "secret_file": [],
                "img_format": [
                    "None"
                ]
            }
        },
        "reveal": {
            "name": "reveal",
            "location": 63,
            "return": [
                "bytes"
            ],
            "arguments": {
                "input_image_file": []
            }
        }
    },
    "shmooganography2019-master/stegano/exifHeader/__init__.py": {},
    "shmooganography2019-master/stegano/lsb/lsb.py": {
        "hide": {
            "name": "hide",
            "location": 35,
            "return": [
                "Optional[Image.Image]"
            ],
            "arguments": {
                "input_image": [
                    "Union[(str, IO[bytes])]"
                ],
                "message": [
                    "str"
                ],
                "encoding": [
                    "str"
                ],
                "auto_convert_rgb": [
                    "bool"
                ]
            }
        },
        "reveal": {
            "name": "reveal",
            "location": 96,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "input_image": [
                    "Union[(str, IO[bytes])]"
                ],
                "encoding": [
                    "typing.Text"
                ]
            }
        }
    },
    "shmooganography2019-master/stegano/lsb/__init__.py": {},
    "shmooganography2019-master/stegano/lsbset/generators.py": {
        "identity": {
            "name": "identity",
            "location": 32,
            "return": [
                "Iterator[int]"
            ],
            "arguments": {}
        },
        "triangular_numbers": {
            "name": "triangular_numbers",
            "location": 40,
            "return": [
                "Iterator[int]"
            ],
            "arguments": {}
        },
        "fermat": {
            "name": "fermat",
            "location": 49,
            "return": [
                "Iterator[int]"
            ],
            "arguments": {}
        },
        "mersenne": {
            "name": "mersenne",
            "location": 58,
            "return": [
                "Iterator[int]"
            ],
            "arguments": {}
        },
        "eratosthenes": {
            "name": "eratosthenes",
            "location": 66,
            "return": [
                "Iterator[int]"
            ],
            "arguments": {}
        },
        "composite": {
            "name": "composite",
            "location": 80,
            "return": [
                "Iterator[int]"
            ],
            "arguments": {}
        },
        "carmichael": {
            "name": "carmichael",
            "location": 90,
            "return": [
                "Iterator[int]"
            ],
            "arguments": {}
        },
        "ackermann_naive": {
            "name": "ackermann_naive",
            "location": 102,
            "return": [
                "int"
            ],
            "arguments": {
                "m": [
                    "int"
                ],
                "n": [
                    "int"
                ]
            }
        },
        "ackermann": {
            "name": "ackermann",
            "location": 112,
            "return": [
                "int"
            ],
            "arguments": {
                "m": [
                    "int"
                ],
                "n": [
                    "int"
                ]
            }
        },
        "fibonacci": {
            "name": "fibonacci",
            "location": 130,
            "return": [
                "Iterator[int]"
            ],
            "arguments": {}
        },
        "log_gen": {
            "name": "log_gen",
            "location": 139,
            "return": [
                "Iterator[int]"
            ],
            "arguments": {}
        }
    },
    "shmooganography2019-master/stegano/lsbset/lsbset.py": {
        "hide": {
            "name": "hide",
            "location": 36,
            "return": [],
            "arguments": {
                "input_image": [],
                "message": [],
                "generator": [],
                "shift": [
                    "int"
                ],
                "encoding": [
                    "typing.Text"
                ],
                "auto_convert_rgb": [
                    "bool"
                ]
            }
        },
        "reveal": {
            "name": "reveal",
            "location": 102,
            "return": [
                "str"
            ],
            "arguments": {
                "input_image": [],
                "generator": [],
                "shift": [
                    "int"
                ],
                "encoding": [
                    "typing.Text"
                ]
            }
        }
    },
    "shmooganography2019-master/stegano/lsbset/__init__.py": {},
    "shmooganography2019-master/stegano/red/red.py": {
        "hide": {
            "name": "hide",
            "location": 33,
            "return": [
                "Image.Image"
            ],
            "arguments": {
                "input_image": [
                    "Union[(str, IO[bytes])]"
                ],
                "message": [
                    "str"
                ]
            }
        },
        "reveal": {
            "name": "reveal",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "input_image": [
                    "Union[(str, IO[bytes])]"
                ]
            }
        }
    },
    "shmooganography2019-master/stegano/red/__init__.py": {},
    "shmooganography2019-master/stegano/steganalysis/parity.py": {
        "steganalyse": {
            "name": "steganalyse",
            "location": 29,
            "return": [],
            "arguments": {
                "img": []
            }
        }
    },
    "shmooganography2019-master/stegano/steganalysis/statistics.py": {
        "steganalyse": {
            "name": "steganalyse",
            "location": 34,
            "return": [
                "Tuple[(List[int], List[Tuple[(Any, int)]])]"
            ],
            "arguments": {
                "img": []
            }
        }
    },
    "shmooganography2019-master/stegano/steganalysis/steganalysisParity.py": {
        "steganalyse": {
            "name": "steganalyse",
            "location": 29,
            "return": [],
            "arguments": {
                "img": []
            }
        }
    },
    "shmooganography2019-master/stegano/steganalysis/steganalysisStatistics.py": {
        "steganalyse": {
            "name": "steganalyse",
            "location": 33,
            "return": [
                "Tuple[(list, List[Tuple[(Any, int)]])]"
            ],
            "arguments": {
                "img": []
            }
        }
    },
    "shmooganography2019-master/stegano/steganalysis/__init__.py": {},
    "shmooganography2019-master/tests/test_exifHeader.py": {
        "TestEXIFHeader.test_hide_empty_message": {
            "name": "test_hide_empty_message",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEXIFHeader.test_hide_and_reveal": {
            "name": "test_hide_and_reveal",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEXIFHeader.test_with_image_without_exif_data": {
            "name": "test_with_image_without_exif_data",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEXIFHeader.test_with_text_file": {
            "name": "test_with_text_file",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEXIFHeader.test_with_png_image": {
            "name": "test_with_png_image",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEXIFHeader.test_with_bytes": {
            "name": "test_with_bytes",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEXIFHeader.tearDown": {
            "name": "tearDown",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "shmooganography2019-master/tests/test_generators.py": {
        "TestGenerators.test_identity": {
            "name": "test_identity",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenerators.test_fibonacci": {
            "name": "test_fibonacci",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenerators.test_eratosthenes": {
            "name": "test_eratosthenes",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenerators.test_composite": {
            "name": "test_composite",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenerators.test_fermat": {
            "name": "test_fermat",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenerators.test_triangular_numbers": {
            "name": "test_triangular_numbers",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenerators.test_mersenne": {
            "name": "test_mersenne",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenerators.test_carmichael": {
            "name": "test_carmichael",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenerators.test_ackermann_naive": {
            "name": "test_ackermann_naive",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenerators.test_ackermann": {
            "name": "test_ackermann",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "shmooganography2019-master/tests/test_lsb.py": {
        "TestLSB.test_hide_empty_message": {
            "name": "test_hide_empty_message",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLSB.test_hide_and_reveal": {
            "name": "test_hide_and_reveal",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLSB.test_hide_and_reveal_UTF32LE": {
            "name": "test_hide_and_reveal_UTF32LE",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLSB.test_with_transparent_png": {
            "name": "test_with_transparent_png",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLSB.test_manual_convert_rgb": {
            "name": "test_manual_convert_rgb",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input": []
            }
        },
        "TestLSB.test_refuse_convert_rgb": {
            "name": "test_refuse_convert_rgb",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input": []
            }
        },
        "TestLSB.test_auto_convert_rgb": {
            "name": "test_auto_convert_rgb",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLSB.test_with_text_file": {
            "name": "test_with_text_file",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLSB.test_with_binary_file": {
            "name": "test_with_binary_file",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLSB.test_with_too_long_message": {
            "name": "test_with_too_long_message",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLSB.test_with_bytes": {
            "name": "test_with_bytes",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLSB.tearDown": {
            "name": "tearDown",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "shmooganography2019-master/tests/test_lsbset.py": {
        "TestLSBSet.test_hide_empty_message": {
            "name": "test_hide_empty_message",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLSBSet.test_hide_and_reveal": {
            "name": "test_hide_and_reveal",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLSBSet.test_hide_and_reveal_with_shift": {
            "name": "test_hide_and_reveal_with_shift",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLSBSet.test_hide_and_reveal_UTF32LE": {
            "name": "test_hide_and_reveal_UTF32LE",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLSBSet.test_with_transparent_png": {
            "name": "test_with_transparent_png",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLSBSet.test_manual_convert_rgb": {
            "name": "test_manual_convert_rgb",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input": []
            }
        },
        "TestLSBSet.test_refuse_convert_rgb": {
            "name": "test_refuse_convert_rgb",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input": []
            }
        },
        "TestLSBSet.test_auto_convert_rgb": {
            "name": "test_auto_convert_rgb",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLSBSet.test_with_too_long_message": {
            "name": "test_with_too_long_message",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLSBSet.test_hide_and_reveal_with_bad_generator": {
            "name": "test_hide_and_reveal_with_bad_generator",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLSBSet.test_with_unknown_generator": {
            "name": "test_with_unknown_generator",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLSBSet.tearDown": {
            "name": "tearDown",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "shmooganography2019-master/tests/test_red.py": {
        "TestRed.test_hide_empty_message": {
            "name": "test_hide_empty_message",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRed.test_hide_and_reveal": {
            "name": "test_hide_and_reveal",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRed.test_with_too_long_message": {
            "name": "test_with_too_long_message",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRed.tearDown": {
            "name": "tearDown",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "shmooganography2019-master/tests/test_slsb.py": {
        "TestSLSB.test_hide_empty_message": {
            "name": "test_hide_empty_message",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSLSB.test_hide_and_reveal": {
            "name": "test_hide_and_reveal",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSLSB.test_with_long_message": {
            "name": "test_with_long_message",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSLSB.test_with_too_long_message": {
            "name": "test_with_too_long_message",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSLSB.tearDown": {
            "name": "tearDown",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "shmooganography2019-master/tests/test_slsbset.py": {
        "TestSLSBSet.test_hide_empty_message": {
            "name": "test_hide_empty_message",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSLSBSet.test_hide_and_reveal": {
            "name": "test_hide_and_reveal",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSLSBSet.test_hide_and_reveal_with_bad_generator": {
            "name": "test_hide_and_reveal_with_bad_generator",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSLSBSet.tearDown": {
            "name": "tearDown",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "shmooganography2019-master/tests/test_tools.py": {
        "TestTools.test_a2bits": {
            "name": "test_a2bits",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTools.test_a2bits_list_UTF8": {
            "name": "test_a2bits_list_UTF8",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTools.test_a2bits_list_UTF32LE": {
            "name": "test_a2bits_list_UTF32LE",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTools.test_n_at_a_time": {
            "name": "test_n_at_a_time",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTools.test_binary2base64": {
            "name": "test_binary2base64",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "shmooganography2019-master/tests/__init__.py": {},
    "shmooganography2019-master/tools/run_mypy.py": {}
}
{
    "sicp-bot-master/conftest.py": {},
    "sicp-bot-master/setup.py": {},
    "sicp-bot-master/sicp_bot/config.py": {},
    "sicp-bot-master/sicp_bot/explorer.py": {
        "_content_type_to_file_type": {
            "name": "_content_type_to_file_type",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "content_type": [
                    "str"
                ]
            }
        },
        "get_explorer_cls": {
            "name": "get_explorer_cls",
            "location": 87,
            "return": [
                "Type[Explorer]"
            ],
            "arguments": {
                "api_token": [
                    "str",
                    "Dict[str,int]",
                    "None"
                ]
            }
        },
        "Explorer.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "Callable"
                ],
                "repo_name": [
                    "str",
                    "Callable"
                ]
            }
        },
        "Explorer.get_dir_tree": {
            "name": "get_dir_tree",
            "location": 32,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Explorer._traverse": {
            "name": "_traverse",
            "location": 38,
            "return": [
                "List[FileDesc]"
            ],
            "arguments": {
                "self": [],
                "file_desc": [
                    "Sequence[str]",
                    "TextIO",
                    "str",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Explorer._get_last_commit": {
            "name": "_get_last_commit",
            "location": 63,
            "return": [
                "str",
                "Optional[str]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sicp-bot-master/sicp_bot/handler.py": {
        "Handler.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bot": [
                    "str",
                    "bool",
                    "Dict[str,Any]",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ],
                "issuer_id": [
                    "str",
                    "bool",
                    "Dict[str,Any]",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ],
                "processor": [
                    "str",
                    "bool",
                    "Dict[str,Any]",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ],
                "serializer": [
                    "str",
                    "bool",
                    "Dict[str,Any]",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ],
                "deserializer": [
                    "str",
                    "bool",
                    "Dict[str,Any]",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ]
            }
        },
        "Handler.authorized": {
            "name": "authorized",
            "location": 104,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "Dict",
                    "None",
                    "Optional[ics.types.ContextDict]",
                    "zam_repondeur.models.Amendement",
                    "purplship.core.models.RateRequest"
                ]
            }
        },
        "Handler.del_cowboy": {
            "name": "del_cowboy",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Dict",
                    "telebotypes.Message"
                ]
            }
        },
        "Handler.add_cowboy": {
            "name": "add_cowboy",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "telebotypes.Message",
                    "models.Course",
                    "aiogram.types.Message",
                    "rosie.types.ReceivedMessage"
                ]
            }
        },
        "Handler.__init__.start_help": {
            "name": "start_help",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "telebotypes.Message",
                    "str"
                ]
            }
        },
        "Handler.__init__.pre_add_cowboy": {
            "name": "pre_add_cowboy",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "telebotypes.Message",
                    "discord.Message",
                    "Any",
                    "email.message.Message"
                ]
            }
        },
        "Handler.__init__.pre_del_cowboy": {
            "name": "pre_del_cowboy",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "discord.Message",
                    "telebotypes.Message",
                    "Any",
                    "List[Dict[str, Any]]",
                    "Optional[str]"
                ]
            }
        },
        "Handler.__init__.get_cowboy": {
            "name": "get_cowboy",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "str",
                    "telebotypes.Message"
                ]
            }
        },
        "Handler.__init__.get_leaderboard": {
            "name": "get_leaderboard",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        },
        "Handler.__init__.repeat_all_messages": {
            "name": "repeat_all_messages",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "telebotypes.Message",
                    "dict"
                ]
            }
        }
    },
    "sicp-bot-master/sicp_bot/logger.py": {
        "get_logger": {
            "name": "get_logger",
            "location": 18,
            "return": [
                "logging.Logger"
            ],
            "arguments": {
                "scope": [
                    "str",
                    "List[str]",
                    "logging.Logger",
                    "Tuple[tuple[Union[str,...]]]",
                    "Tuple[Tuple[str,...]]"
                ]
            }
        }
    },
    "sicp-bot-master/sicp_bot/parser.py": {
        "_pattern_validator": {
            "name": "_pattern_validator",
            "location": 15,
            "return": [
                "ParsePattern"
            ],
            "arguments": {
                "dir_pattern": [
                    "str"
                ]
            }
        },
        "get_parser": {
            "name": "get_parser",
            "location": 25,
            "return": [
                "ParsePattern"
            ],
            "arguments": {
                "dir_pattern": [
                    "str"
                ]
            }
        }
    },
    "sicp-bot-master/sicp_bot/processor.py": {
        "_must_be_done": {
            "name": "_must_be_done",
            "location": 154,
            "return": [
                "int"
            ],
            "arguments": {
                "datetime_str": [
                    "str",
                    "int",
                    "None",
                    "datetime.datetime",
                    "Optional[str]",
                    "datetime.timezone"
                ]
            }
        },
        "Processor.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "str",
                    "Tuple"
                ],
                "db_man": [
                    "str",
                    "float"
                ],
                "explorer_cls": [
                    "str",
                    "float"
                ]
            }
        },
        "Processor.get_leaderboard": {
            "name": "get_leaderboard",
            "location": 35,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Processor.create_cowboy": {
            "name": "create_cowboy",
            "location": 41,
            "return": [
                "None",
                "Callable[,bool]",
                "bool",
                "Optional[str]",
                "Dict[str,Tuple[str,str]]",
                "List",
                "int"
            ],
            "arguments": {
                "self": [],
                "cowboy": [
                    "db.models.Cowboy",
                    "str",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "None",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "Processor.update_cowboy": {
            "name": "update_cowboy",
            "location": 50,
            "return": [
                "int",
                "float",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "cowboy": [
                    "Dict[str,Any]",
                    "int"
                ]
            }
        },
        "Processor.delete_cowboy": {
            "name": "delete_cowboy",
            "location": 65,
            "return": [
                "None",
                "bool",
                "str",
                "int",
                "Dict",
                "Dict[str,Tuple[str,str]]"
            ],
            "arguments": {
                "self": [],
                "cowboy_github_nick": [
                    "str",
                    "int"
                ]
            }
        },
        "Processor.get_cowboy": {
            "name": "get_cowboy",
            "location": 71,
            "return": [
                "None",
                "Optional[int]",
                "bool",
                "str",
                "Optional[Literal[only_clustered,include_clustered]]",
                "Dict",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "cowboy_github_nick": [
                    "str",
                    "bool"
                ]
            }
        },
        "Processor.get_cowboys": {
            "name": "get_cowboys",
            "location": 77,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Processor._update_cowboys_exercises": {
            "name": "_update_cowboys_exercises",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Processor._tree_matcher": {
            "name": "_tree_matcher",
            "location": 95,
            "return": [
                "bool",
                "int",
                "List[E]",
                "List",
                "models.seat_group.SeatGroup",
                "ticketing.models.ticket_bundle.TicketBundle",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "cowboy": [
                    "bool",
                    "db.models.Cowboy",
                    "List",
                    "List[E]",
                    "List[Entity]"
                ],
                "user_tree": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "Processor._flatten": {
            "name": "_flatten",
            "location": 107,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "tree": []
            }
        },
        "Processor._prevent_duplicate": {
            "name": "_prevent_duplicate",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cowboy": [
                    "int",
                    "Callable",
                    "str",
                    "models.Question"
                ]
            }
        },
        "Serializer.from_exercises": {
            "name": "from_exercises",
            "location": 122,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "exercises": [
                    "List[str]",
                    "int",
                    "datetime.datetime",
                    "Union[server.models.Bike,int]"
                ]
            }
        },
        "Serializer.from_cowboy_extended": {
            "name": "from_cowboy_extended",
            "location": 125,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "cowboy": [
                    "str",
                    "projects.models.Project",
                    "bool",
                    "List",
                    "Union[List,Dict]",
                    "Dict"
                ]
            }
        },
        "Serializer.from_cowboy": {
            "name": "from_cowboy",
            "location": 141,
            "return": [
                "str"
            ],
            "arguments": {
                "cowboy": [
                    "str",
                    "db.models.Cowboy",
                    "bool",
                    "List[str]",
                    "Dict",
                    "None",
                    "Optional[int]"
                ]
            }
        },
        "Serializer.leaderboard": {
            "name": "leaderboard",
            "location": 148,
            "return": [
                "str"
            ],
            "arguments": {
                "cowboys": [
                    "str",
                    "int",
                    "Callable",
                    "models.Question"
                ]
            }
        },
        "Deserializer.to_cowboy": {
            "name": "to_cowboy",
            "location": 164,
            "return": [
                "sicp_bot.db.models.Cowboy"
            ],
            "arguments": {
                "self": [],
                "cowboy_str": [
                    "str",
                    "bool",
                    "Sequence[str]"
                ]
            }
        },
        "Deserializer.to_update_cowboy": {
            "name": "to_update_cowboy",
            "location": 176,
            "return": [
                "str",
                "bool",
                "List[str]",
                "Generator"
            ],
            "arguments": {
                "self": [],
                "cowboy_str": [
                    "str",
                    "float"
                ],
                "cowboy": [
                    "str",
                    "db.models.Cowboy"
                ]
            }
        }
    },
    "sicp-bot-master/sicp_bot/serve.py": {
        "_set_bot": {
            "name": "_set_bot",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [
                    "bool",
                    "float"
                ]
            }
        },
        "get_flask_app": {
            "name": "get_flask_app",
            "location": 43,
            "return": [
                "Flask",
                "flask.Flask",
                "Dict"
            ],
            "arguments": {
                "bot": [
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "_Bot.post": {
            "name": "post",
            "location": 24,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Home.get": {
            "name": "get",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sicp-bot-master/sicp_bot/utils.py": {
        "get_data_folder_path": {
            "name": "get_data_folder_path",
            "location": 4,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "sicp-bot-master/sicp_bot/__init__.py": {
        "start": {
            "name": "start",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict[str,Any]",
                    "config.Config",
                    "pyramid.config.Configurator",
                    "cmk.base.config.ConfigCache"
                ]
            }
        }
    },
    "sicp-bot-master/sicp_bot/db/manager.py": {
        "_KeysType.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "list_name": [
                    "str",
                    "Optional[List[str]]",
                    "Type",
                    "List[str]",
                    "Optional[str]",
                    "Optional[Dict]"
                ],
                "db": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]",
                    "Dict",
                    "Optional[Dict]",
                    "Optional[InstrumentBase]"
                ]
            }
        },
        "_KeysType._rewrite_db": {
            "name": "_rewrite_db",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_KeysType.append": {
            "name": "append",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "List[str]",
                    "Type[RuntimeError]",
                    "Type"
                ]
            }
        },
        "_KeysType.remove": {
            "name": "remove",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "DBManager.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Optional[int]",
                    "int",
                    "bool",
                    "None"
                ],
                "object_type": [
                    "Iterable[str]",
                    "int",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "create_if_missing": [
                    "bool",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "DBManager._is_valid_model": {
            "name": "_is_valid_model",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "str"
                ]
            }
        },
        "DBManager.put": {
            "name": "put",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "DBManager.update": {
            "name": "update",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Dict[str,Any]"
                ]
            }
        },
        "DBManager.delete": {
            "name": "delete",
            "location": 63,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "model_id": [
                    "str",
                    "List[str]",
                    "int",
                    "range",
                    "bool"
                ]
            }
        },
        "DBManager.get": {
            "name": "get",
            "location": 68,
            "return": [
                "None",
                "str",
                "Optional[str]",
                "int",
                "List[Dict[str,Any]]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "model_id": [
                    "str",
                    "int",
                    "Union[str,List[str]]"
                ]
            }
        },
        "DBManager.get_model_ids": {
            "name": "get_model_ids",
            "location": 73,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DBManager.get_models": {
            "name": "get_models",
            "location": 77,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DBManager._decode": {
            "name": "_decode",
            "location": 83,
            "return": [
                "Tuple[str, str]",
                "Tuple[type]"
            ],
            "arguments": {
                "self": [],
                "byte_object": [
                    "str",
                    "float",
                    "Union[None,bytes]",
                    "int",
                    "None",
                    "Iterable[T]",
                    "bytes"
                ]
            }
        }
    },
    "sicp-bot-master/sicp_bot/db/models.py": {},
    "sicp-bot-master/sicp_bot/db/__init__.py": {
        "BaseModel.encode": {
            "name": "encode",
            "location": 11,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sicp-bot-master/tests/config_tests.py": {
        "test_config": {
            "name": "test_config",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_config_dict": [
                    "Dict",
                    "Dict[str,str]",
                    "pyramid.config.Configurator",
                    "Config"
                ]
            }
        }
    },
    "sicp-bot-master/tests/factories.py": {
        "ExerciseFactory.exercise": {
            "name": "exercise",
            "location": 8,
            "return": [
                "sicp_bot.db.models.Exercise"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "list",
                    "List[manager.models.reflection.Reflection]",
                    "int",
                    "List[str]",
                    "bool",
                    "List[manager.models.language.Language]",
                    "Iterable[str]"
                ],
                "model_id": [
                    "str",
                    "int"
                ]
            }
        },
        "ExerciseFactory.exercises": {
            "name": "exercises",
            "location": 12,
            "return": [
                "List[sicp_bot.db.models.Exercise]"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "count": [
                    "int"
                ]
            }
        },
        "CowboyFactory.cowboy": {
            "name": "cowboy",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "sicp-bot-master/tests/fixtures.py": {
        "mock_config_dict": {
            "name": "mock_config_dict",
            "location": 11,
            "return": [
                "Dict[Text,Text]",
                "bool",
                "Callable"
            ],
            "arguments": {}
        },
        "exercise": {
            "name": "exercise",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        },
        "exercises": {
            "name": "exercises",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        },
        "cowboy": {
            "name": "cowboy",
            "location": 37,
            "return": [
                "Cowboy",
                "Dict",
                "bool"
            ],
            "arguments": {
                "exercises": [
                    "List",
                    "bool"
                ]
            }
        },
        "parse_pattern": {
            "name": "parse_pattern",
            "location": 52,
            "return": [
                "ParsePattern",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        }
    },
    "sicp-bot-master/tests/parser_tests.py": {
        "test_get_parser": {
            "name": "test_get_parser",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "parse_pattern": [
                    "List[str]"
                ]
            }
        },
        "test_fail_get_parser": {
            "name": "test_fail_get_parser",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sicp-bot-master/tests/utils_tests.py": {
        "test_get_data_folder_path": {
            "name": "test_get_data_folder_path",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sicp-bot-master/tests/db/manager_tests.py": {
        "test_init": {
            "name": "test_init",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sicp-bot-master/tests/db/models_tests.py": {
        "test_model_encode": {
            "name": "test_model_encode",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "cowboy": [
                    "str",
                    "List[str]",
                    "Dict",
                    "List[List[str]]"
                ]
            }
        }
    }
}
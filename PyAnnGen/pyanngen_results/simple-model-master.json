{
    "simple-model-master/setup.py": {
        "UploadCommand.status": {
            "name": "status",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "s": []
            }
        },
        "UploadCommand.initialize_options": {
            "name": "initialize_options",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UploadCommand.finalize_options": {
            "name": "finalize_options",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UploadCommand.run": {
            "name": "run",
            "location": 30,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "simple-model-master/docs/source/conf.py": {},
    "simple-model-master/simple_model/base.py": {
        "ModelMetaClass._get_class_attributes": {
            "name": "_get_class_attributes",
            "location": 11,
            "return": [
                "Set",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "Optional[\"TreeNode\"]",
                    "Tuple[str, float]",
                    "bool"
                ],
                "new_class": [
                    "Dict[str,Any]",
                    "List",
                    "List[T]"
                ],
                "parents": [
                    "Tuple[Union[str,float]]",
                    "Type",
                    "Optional[TreeNode]",
                    "Tuple[str,float]",
                    "bool"
                ]
            }
        },
        "ModelMetaClass._get_fields": {
            "name": "_get_fields",
            "location": 23,
            "return": [
                "tuple"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str"
                ],
                "attrs": [
                    "T",
                    "List[str]",
                    "Type[T]",
                    "str"
                ],
                "hints": [
                    "List[Union[str,str,str,str,str,str,str,str,str,str]]",
                    "str",
                    "T",
                    "List[str]",
                    "Type[T]"
                ]
            }
        },
        "ModelMetaClass.__new__": {
            "name": "__new__",
            "location": 29,
            "return": [
                "bool",
                "int",
                "Optional[Any]",
                "Callable[..., None]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str,Any]",
                    "Type"
                ],
                "name": [
                    "str"
                ],
                "bases": [
                    "str",
                    "Tuple[Type]",
                    "Optional[Iterable[Any]]"
                ],
                "attrs": [
                    "str",
                    "Dict[str,Any]",
                    "Type"
                ]
            }
        }
    },
    "simple-model-master/simple_model/builder.py": {
        "model_class_builder": {
            "name": "model_class_builder",
            "location": 7,
            "return": [
                "Type",
                "int",
                "bool",
                "utils.CWLObjectType"
            ],
            "arguments": {
                "class_name": [
                    "Callable[,T]",
                    "str"
                ],
                "data": [
                    "str",
                    "bytes",
                    "bool",
                    "Set[str]"
                ]
            }
        },
        "model_builder": {
            "name": "model_builder",
            "location": 15,
            "return": [
                "int",
                "Dict[str, bool]"
            ],
            "arguments": {
                "data": [
                    "Dict[str,Any]",
                    "Dict",
                    "Optional[str]",
                    "Optional[Dict[str,Any]]",
                    "Mapping"
                ],
                "class_name": [
                    "Text",
                    "str",
                    "zerver.models.Realm",
                    "bool"
                ],
                "cls": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]"
                ],
                "recurse": [
                    "bool",
                    "Iterable[Tuple[str,Any]]",
                    "List[bytes]"
                ],
                "snake_case_keys": [
                    "bool",
                    "Iterable[Tuple[str,Any]]",
                    "List[bytes]"
                ],
                "alpha_keys": [
                    "bool",
                    "Iterable[Tuple[str,Any]]",
                    "List[bytes]"
                ]
            }
        },
        "model_many_builder": {
            "name": "model_many_builder",
            "location": 55,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "data": [
                    "str",
                    "Optional[str]",
                    "Optional[bool]",
                    "annofabapi.models.LabelV1"
                ],
                "class_name": [
                    "Text",
                    "bool",
                    "Optional[str]",
                    "str",
                    "Optional[bool]",
                    "cmk.utils.type_defs.HostName"
                ],
                "cls": [
                    "bool",
                    "None",
                    "str",
                    "Optional[str]",
                    "Optional[bool]",
                    "cmk.utils.type_defs.HostName"
                ],
                "recurse": [
                    "bool",
                    "str",
                    "Optional[Dict]",
                    "Dict[str,str]",
                    "Dict[str,Union[bool,str]]",
                    "Tuple[int,int]"
                ],
                "snake_case_keys": [
                    "bool",
                    "str",
                    "Optional[Dict]",
                    "Dict[str,str]",
                    "Dict[str,Union[bool,str]]",
                    "Tuple[int,int]"
                ],
                "alpha_keys": [
                    "bool",
                    "str",
                    "Optional[Dict]",
                    "Dict[str,str]",
                    "Dict[str,Union[bool,str]]",
                    "Tuple[int,int]"
                ]
            }
        }
    },
    "simple-model-master/simple_model/converters.py": {
        "to_dict": {
            "name": "to_dict",
            "location": 6,
            "return": [
                "dict"
            ],
            "arguments": {
                "model": [
                    "allennlp.models.model.Model",
                    "esm.models.service_instance.ServiceInstance",
                    "allennlp.models.Model",
                    "str"
                ]
            }
        }
    },
    "simple-model-master/simple_model/exceptions.py": {
        "EmptyField.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field_name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "EmptyField.__str__": {
            "name": "__str__",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "simple-model-master/simple_model/fields.py": {
        "ModelField.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_class": [
                    "bool",
                    "Callable",
                    "Optional[str]"
                ],
                "name": [
                    "Type",
                    "Optional[Dict[str, Any]]",
                    "bool",
                    "Optional[str]"
                ],
                "default_value": [
                    "str",
                    "Callable",
                    "Sequence",
                    "Optional[Callable]"
                ],
                "type": [
                    "type",
                    "bool"
                ]
            }
        },
        "ModelField.__repr__": {
            "name": "__repr__",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelField.default_value": {
            "name": "default_value",
            "location": 28,
            "return": [
                "str",
                "Type[T]",
                "Optional[Set[str]]",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelField.types": {
            "name": "types",
            "location": 32,
            "return": [
                "Tuple[List[str], List[str], List[str]]",
                "bool",
                "str",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelField.allow_empty": {
            "name": "allow_empty",
            "location": 39,
            "return": [
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelField._split_class_and_type": {
            "name": "_split_class_and_type",
            "location": 42,
            "return": [
                "Tuple[(Any, Optional[_T0])]"
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "Union[Type, Tuple[Type, ...]]"
                ]
            }
        },
        "ModelField.convert_to_type": {
            "name": "convert_to_type",
            "location": 48,
            "return": [
                "str",
                "Optional[T]",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Optional[List[int]]",
                    "str",
                    "bool"
                ],
                "value": [
                    "List[int]",
                    "int",
                    "Callable",
                    "Optional[str]"
                ],
                "field_class": [
                    "bool",
                    "int"
                ]
            }
        },
        "ModelField.validate": {
            "name": "validate",
            "location": 105,
            "return": [
                "str",
                "int",
                "float",
                "Union[bool, List, Tuple]"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "bytes",
                    "int",
                    "float"
                ],
                "value": [
                    "bool",
                    "T",
                    "Optional[Sequence[T]]",
                    "Iterable[Any]"
                ]
            }
        },
        "ModelField.to_python": {
            "name": "to_python",
            "location": 126,
            "return": [
                "Union[(dict, list, _T0)]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "List[str]",
                    "bool",
                    "set"
                ]
            }
        }
    },
    "simple-model-master/simple_model/models.py": {
        "BaseModel.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.__post_init__": {
            "name": "__post_init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.__eq__": {
            "name": "__eq__",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "Union[typesystem.fields.Field, Type[typesystem.schemas.Schema]]",
                    "str"
                ]
            }
        },
        "BaseModel.__repr__": {
            "name": "__repr__",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.__setattr__": {
            "name": "__setattr__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[Mapping[str, Any]]",
                    "Dict[str, str]"
                ],
                "value": [
                    "str",
                    "int"
                ]
            }
        },
        "BaseModel._get_fields": {
            "name": "_get_fields",
            "location": 70,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.build_many": {
            "name": "build_many",
            "location": 77,
            "return": [
                "List[BaseModel]"
            ],
            "arguments": {
                "cls": [
                    "List[T]"
                ],
                "source": [
                    "denite.base.source.Base"
                ]
            }
        },
        "BaseModel.is_empty": {
            "name": "is_empty",
            "location": 89,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[Sequence[T]]",
                    "bool",
                    "Union[bytes, str]",
                    "Sequence[Any]",
                    "dict"
                ]
            }
        },
        "BaseModel.convert_fields": {
            "name": "convert_fields",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.validate": {
            "name": "validate",
            "location": 104,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "raise_exception": [
                    "bool",
                    "str",
                    "BaseException"
                ]
            }
        },
        "BaseModel.as_dict": {
            "name": "as_dict",
            "location": 131,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "LazyModel.__getattribute__": {
            "name": "__getattribute__",
            "location": 157,
            "return": [
                "bool",
                "bytes",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "LazyModel.__setattr__": {
            "name": "__setattr__",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Union[str, int, float]",
                    "List[str]"
                ],
                "value": [
                    "str",
                    "int"
                ]
            }
        },
        "LazyModel.as_dict": {
            "name": "as_dict",
            "location": 172,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "simple-model-master/simple_model/utils.py": {
        "capitalize_first": {
            "name": "capitalize_first",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str",
                    "Dict",
                    "Dict[str,str]"
                ]
            }
        },
        "camel_case": {
            "name": "camel_case",
            "location": 15,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "coerce_to_alpha": {
            "name": "coerce_to_alpha",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "snake_case": {
            "name": "snake_case",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str",
                    "float",
                    "List[List[str]]",
                    "List[list[str]]"
                ]
            }
        },
        "is_not_special_object": {
            "name": "is_not_special_object",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj": [
                    "float",
                    "str",
                    "bool",
                    "Union[int,float]"
                ]
            }
        },
        "getkey": {
            "name": "getkey",
            "location": 45,
            "return": [
                "str",
                "Sequence[str]",
                "bytes",
                "Union[str,bytes]",
                "Dict[str,str]"
            ],
            "arguments": {
                "d": [
                    "str",
                    "bytes",
                    "Dict"
                ],
                "key": [
                    "dict",
                    "str",
                    "bytes"
                ]
            }
        },
        "remove_private_keys": {
            "name": "remove_private_keys",
            "location": 49,
            "return": [
                "dict"
            ],
            "arguments": {
                "d": [
                    "Dict",
                    "Callable",
                    "Optional[int]"
                ]
            }
        },
        "is_private_attribute": {
            "name": "is_private_attribute",
            "location": 55,
            "return": [
                "bool"
            ],
            "arguments": {
                "name": [
                    "str",
                    "int",
                    "Pattern[str]",
                    "List[str]",
                    "Pattern"
                ]
            }
        }
    },
    "simple-model-master/simple_model/__init__.py": {},
    "simple-model-master/simple_model/__version__.py": {},
    "simple-model-master/tests/conftest.py": {
        "model_data": {
            "name": "model_data",
            "location": 22,
            "return": [
                "Dict[Text,Text]",
                "str",
                "int",
                "Generator",
                "bool"
            ],
            "arguments": {}
        },
        "model": {
            "name": "model",
            "location": 32,
            "return": [
                "MyModel",
                "bool",
                "bytes",
                "Dict[str,Any]",
                "Dict[str,Dict[str,float]]"
            ],
            "arguments": {
                "model_data": [
                    "Dict",
                    "str"
                ]
            }
        },
        "model2": {
            "name": "model2",
            "location": 37,
            "return": [
                "MyModel",
                "str",
                "bytes",
                "Union[fonduer.candidates.models.Candidate,fonduer.candidates.models.Mention,fonduer.candidates.models.span_mention.TemporarySpanMention]",
                "int",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "MyModel.validate_foo": {
            "name": "validate_foo",
            "location": 15,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        }
    },
    "simple-model-master/tests/test_builder.py": {
        "test_model_class_builder": {
            "name": "test_model_class_builder",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_model_class_builder_empty_data": {
            "name": "test_model_class_builder_empty_data",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_model_builder": {
            "name": "test_model_builder",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_model_builder_class_name": {
            "name": "test_model_builder_class_name",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_model_builder_recurse_false": {
            "name": "test_model_builder_recurse_false",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_model_builder_recurse": {
            "name": "test_model_builder_recurse",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_model_builder_recurse_iterable": {
            "name": "test_model_builder_recurse_iterable",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "iterable_class": [
                    "bool",
                    "str",
                    "Callable"
                ]
            }
        },
        "test_model_builder_data_keys_with_special_characters": {
            "name": "test_model_builder_data_keys_with_special_characters",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_model_builder_ignore_private_attrs": {
            "name": "test_model_builder_ignore_private_attrs",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_model_builder_custom_class": {
            "name": "test_model_builder_custom_class",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_model_many_builder": {
            "name": "test_model_many_builder",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_model_many_builder_ignore_private_attrs": {
            "name": "test_model_many_builder_ignore_private_attrs",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_model_many_builder_empty_iterable": {
            "name": "test_model_many_builder_empty_iterable",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "iterable": []
            }
        },
        "test_model_many_builder_custom_cls": {
            "name": "test_model_many_builder_custom_cls",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_model_many_builder_custom_cls.Foo.baz": {
            "name": "baz",
            "location": 183,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "simple-model-master/tests/test_converters.py": {
        "test_model_to_dict_invalid_argument": {
            "name": "test_model_to_dict_invalid_argument",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_model_to_dict_model_not_validated": {
            "name": "test_model_to_dict_model_not_validated",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "int",
                    "str",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_model_to_dict_simple": {
            "name": "test_model_to_dict_simple",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "keanu.Model",
                    "Callable[[List, bool], None]",
                    "Callable"
                ]
            }
        },
        "test_model_to_dict_nested_list": {
            "name": "test_model_to_dict_nested_list",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "iterable": [
                    "tests.setup.SetupTest"
                ],
                "model": [
                    "bool"
                ],
                "model2": [
                    "keanu.Model"
                ]
            }
        },
        "test_model_to_dict_property": {
            "name": "test_model_to_dict_property",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_model_to_dict_inheritance": {
            "name": "test_model_to_dict_inheritance",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "model_data": [
                    "Dict[str,Optional[str]]",
                    "Dict[str,str]",
                    "Dict[str,Union[str,None]]",
                    "str"
                ]
            }
        },
        "test_model_to_dict_attribute_is_enum": {
            "name": "test_model_to_dict_attribute_is_enum",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_model_to_dict_property.Foo.b": {
            "name": "b",
            "location": 54,
            "return": [
                "float",
                "bool",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "simple-model-master/tests/test_fields.py": {
        "model_field": {
            "name": "model_field",
            "location": 20,
            "return": [
                "ModelField",
                "bool",
                "Optional[BaseException]"
            ],
            "arguments": {}
        },
        "empty_model_field": {
            "name": "empty_model_field",
            "location": 25,
            "return": [
                "ModelField",
                "str",
                "Optional[db.models.Taxon]",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "typeless_model_field": {
            "name": "typeless_model_field",
            "location": 30,
            "return": [
                "ModelField",
                "Type",
                "bool",
                "Optional[db.models.Taxon]",
                "Optional[str]",
                "BaseException"
            ],
            "arguments": {}
        },
        "test_model_field": {
            "name": "test_model_field",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "model_field": [
                    "Dict[str,Any]",
                    "List[str]",
                    "core.models.Grouping"
                ]
            }
        },
        "test_empty_model_field_default_value": {
            "name": "test_empty_model_field_default_value",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "empty_model_field": []
            }
        },
        "test_model_field_to_python_simple": {
            "name": "test_model_field_to_python_simple",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "model_field": [
                    "Callable"
                ],
                "value": [
                    "Callable"
                ]
            }
        },
        "test_model_field_to_python_nested": {
            "name": "test_model_field_to_python_nested",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "model2": [
                    "Callable[[List, bool], None]"
                ],
                "model_field": [
                    "model.Model",
                    "keanu.Model",
                    "models.cf_recommend_models.ICfRecommendationModel"
                ]
            }
        },
        "test_model_field_to_python_nested_iterable": {
            "name": "test_model_field_to_python_nested_iterable",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "iterable": [
                    "keanu.Model"
                ],
                "model_field": [
                    "keanu.Model"
                ],
                "model": [
                    "Callable[[List, bool], None]"
                ],
                "model2": [
                    "Callable[[List, bool], None]"
                ]
            }
        },
        "test_model_field_to_python_iterable_empty": {
            "name": "test_model_field_to_python_iterable_empty",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "iterable": [
                    "bool"
                ],
                "model_field": [
                    "bool"
                ],
                "model": [
                    "bool"
                ],
                "model2": [
                    "bool"
                ]
            }
        },
        "test_model_field_to_python_iterable": {
            "name": "test_model_field_to_python_iterable",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "iterable": [
                    "bool"
                ],
                "model_field": [
                    "bool"
                ],
                "model": [
                    "bool"
                ],
                "model2": [
                    "bool"
                ]
            }
        },
        "test_model_field_validate": {
            "name": "test_model_field_validate",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "bool"
                ],
                "model_field": [
                    "Optional[Iterable[Any]]",
                    "Callable",
                    "Iterable[Any]",
                    "str",
                    "None"
                ]
            }
        },
        "test_model_field_validate_validation_error": {
            "name": "test_model_field_validate_validation_error",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "bool"
                ],
                "model_field": [
                    "Optional[Iterable[Any]]",
                    "Callable",
                    "keanu.Model",
                    "core.models.Recipe"
                ],
                "exception": []
            }
        },
        "test_model_field_validate_empty_field": {
            "name": "test_model_field_validate_empty_field",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "empty_model_field": [
                    "Callable",
                    "list"
                ],
                "blank_value": [
                    "Optional[bool]",
                    "Callable",
                    "bool",
                    "Union[str,List[str]]",
                    "None",
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_model_field_validate_and_clean": {
            "name": "test_model_field_validate_and_clean",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "model_field": [
                    "Callable",
                    "str",
                    "Set[int]",
                    "int",
                    "Optional[List[str]]",
                    "List[str]",
                    "Iterable[str]",
                    "None"
                ]
            }
        },
        "test_model_field_validate_and_clean_clean_nested": {
            "name": "test_model_field_validate_and_clean_clean_nested",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "int",
                    "models.cf_recommend_models.ICfRecommendationModel"
                ]
            }
        },
        "test_model_field_convert_to_type_unset": {
            "name": "test_model_field_convert_to_type_unset",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "typeless_model_field": [
                    "Dict"
                ]
            }
        },
        "test_model_field_convert_to_type_union": {
            "name": "test_model_field_convert_to_type_union",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "typeless_model_field": [
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "None",
                    "Optional[object]",
                    "int"
                ],
                "value": [
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "None",
                    "Optional[object]",
                    "int"
                ]
            }
        },
        "test_model_field_convert_to_type_optional": {
            "name": "test_model_field_convert_to_type_optional",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "typeless_model_field": [
                    "str",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "None"
                ],
                "value": [
                    "str",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        },
        "test_model_field_convert_to_type_union_invalid": {
            "name": "test_model_field_convert_to_type_union_invalid",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "typeless_model_field": [
                    "Optional[str]",
                    "str",
                    "int",
                    "Optional[Type[Exception]]",
                    "None",
                    "Type",
                    "Optional[float]",
                    "Optional[Sequence[Any]]",
                    "float",
                    "bool",
                    "Sequence[Any]"
                ]
            }
        },
        "test_model_field_convert_to_type_value_has_correct_type": {
            "name": "test_model_field_convert_to_type_value_has_correct_type",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "model_field": [
                    "Callable",
                    "float",
                    "int",
                    "Type",
                    "Optional[bool]",
                    "None"
                ]
            }
        },
        "test_model_field_convert_to_type_invalid_model_type": {
            "name": "test_model_field_convert_to_type_invalid_model_type",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "model_field": [
                    "models.User",
                    "asgard.models.user.User",
                    "search_service.models.search_resulSearchResult",
                    "tracim.models.auth.Permission",
                    "str"
                ]
            }
        },
        "test_model_field_convert_to_type_model_type": {
            "name": "test_model_field_convert_to_type_model_type",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "model_field": [
                    "float",
                    "Iterable[viewer.models.Archive]",
                    "core.models.Grouping"
                ]
            }
        },
        "test_model_field_convert_to_type": {
            "name": "test_model_field_convert_to_type",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "model_field": [
                    "str",
                    "Optional[str]",
                    "Sequence[str]",
                    "None",
                    "Dict[str,Set[str]]",
                    "Dict[str,set[str]]"
                ]
            }
        },
        "test_model_field_convert_to_type_iterable_without_type": {
            "name": "test_model_field_convert_to_type_iterable_without_type",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "iterable_type": [
                    "str",
                    "Tuple[Type]",
                    "Optional[str]",
                    "None"
                ],
                "iterable_cls": [
                    "str",
                    "bool",
                    "Optional[bool]",
                    "None"
                ],
                "model_field": [
                    "Dict[str,Any]",
                    "str"
                ]
            }
        },
        "test_model_field_convert_to_type_iterable_typed": {
            "name": "test_model_field_convert_to_type_iterable_typed",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "iterable_type": [
                    "str",
                    "Tuple[Type]",
                    "Optional[str]",
                    "None"
                ],
                "iterable_cls": [
                    "int",
                    "bool"
                ],
                "model_field": [
                    "int",
                    "Type",
                    "Dict"
                ]
            }
        },
        "test_model_field_convert_to_type_iterable_generic": {
            "name": "test_model_field_convert_to_type_iterable_generic",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "iterable_type": [
                    "str",
                    "Dict[str,str]"
                ],
                "model_field": [
                    "str",
                    "x509_pki.models.Certificate"
                ]
            }
        },
        "test_model_field_convert_to_type_iterable_same_type": {
            "name": "test_model_field_convert_to_type_iterable_same_type",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "iterable_type": [
                    "str",
                    "Tuple[Type]",
                    "Optional[str]",
                    "None"
                ],
                "iterable_cls": [
                    "str",
                    "bool",
                    "Optional[bool]",
                    "None"
                ],
                "model_field": [
                    "Dict[str,Any]",
                    "str"
                ]
            }
        },
        "test_model_field_conversion_iterable_with_type_var": {
            "name": "test_model_field_conversion_iterable_with_type_var",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "model_field": [
                    "List[zam_repondeur.models.Amendement]",
                    "str",
                    "T",
                    "core.models.Resource"
                ]
            }
        },
        "test_model_field_convert_to_type_do_nothing_if_field_is_already_of_expected_type": {
            "name": "test_model_field_convert_to_type_do_nothing_if_field_is_already_of_expected_type",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "model_field": [
                    "str",
                    "int"
                ]
            }
        },
        "test_model_field_validate_and_clean_clean_nested.MyModel.validate_foo": {
            "name": "validate_foo",
            "location": 113,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "datetime.timedelta",
                    "T",
                    "int",
                    "bytes"
                ]
            }
        }
    },
    "simple-model-master/tests/test_models.py": {
        "now": {
            "name": "now",
            "location": 38,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {}
        },
        "model_clean_validate_foo_data": {
            "name": "model_clean_validate_foo_data",
            "location": 49,
            "return": [
                "Dict[Text,Text]",
                "bool",
                "str",
                "List[str]"
            ],
            "arguments": {}
        },
        "model_clean_validate_foo": {
            "name": "model_clean_validate_foo",
            "location": 54,
            "return": [
                "FooBarModel",
                "str",
                "int"
            ],
            "arguments": {
                "model_clean_validate_foo_data": [
                    "Dict[str,str]",
                    "int",
                    "Dict",
                    "Dict[str,list[Any]]",
                    "games.models.Game",
                    "Dict[str,List[Any]]",
                    "Dict[str,Any]"
                ]
            }
        },
        "nested_model": {
            "name": "nested_model",
            "location": 59,
            "return": [
                "CleanQuxModel",
                "Optional[str]",
                "models.PermissionLookup",
                "Callable"
            ],
            "arguments": {}
        },
        "many_source": {
            "name": "many_source",
            "location": 80,
            "return": [
                "Tuple[dict[Text,Text]]",
                "str",
                "int",
                "Type[Any]",
                "complex",
                "models.Name"
            ],
            "arguments": {}
        },
        "typed_model": {
            "name": "typed_model",
            "location": 89,
            "return": [
                "audiopyle.lib.models.plugin.VampyPlugin.Params",
                "TypedModel"
            ],
            "arguments": {
                "model_clean_validate_foo": [
                    "int",
                    "Type",
                    "Type[T]",
                    "models.Model",
                    "base.Model"
                ]
            }
        },
        "test_base_model": {
            "name": "test_base_model",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "keanu.Model",
                    "TestModule.Model",
                    "models.cf_recommend_models.ICfRecommendationModel"
                ]
            }
        },
        "test_base_model_repr": {
            "name": "test_base_model_repr",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "model_clean_validate_foo": [
                    "Set"
                ]
            }
        },
        "test_base_model__get_fields": {
            "name": "test_base_model__get_fields",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "model_clean_validate_foo": []
            }
        },
        "test_base_model_is_empty_false": {
            "name": "test_base_model_is_empty_false",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "test_base_model_is_empty_true": {
            "name": "test_base_model_is_empty_true",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "Callable",
                    "Type",
                    "Callable[[KT],VT]",
                    "Type[Any]",
                    "Type[BaseException]"
                ],
                "value": [
                    "Callable",
                    "Type",
                    "Callable[[KT],VT]",
                    "Type[Any]",
                    "Type[BaseException]"
                ]
            }
        },
        "test_base_model_validate_and_clean": {
            "name": "test_base_model_validate_and_clean",
            "location": 126,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "model_clean_validate_foo": [
                    "int"
                ]
            }
        },
        "test_base_model_validate_fail": {
            "name": "test_base_model_validate_fail",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "str",
                    "core.models.Recipe"
                ]
            }
        },
        "test_base_model___eq___equals": {
            "name": "test_base_model___eq___equals",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_base_model___eq___not_equals": {
            "name": "test_base_model___eq___not_equals",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "int"
                ]
            }
        },
        "test_base_model___eq___not_equals_same_model": {
            "name": "test_base_model___eq___not_equals_same_model",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_base_model___eq___not_equals_different_models_same_field_qty": {
            "name": "test_base_model___eq___not_equals_different_models_same_field_qty",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_model": {
            "name": "test_model",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "int",
                    "List[str]",
                    "models.cf_recommend_models.ICfRecommendationModel"
                ]
            }
        },
        "test_model__get_fields": {
            "name": "test_model__get_fields",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "model": []
            }
        },
        "test_model_fields_without_fields": {
            "name": "test_model_fields_without_fields",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_model_validate_empty": {
            "name": "test_model_validate_empty",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "str",
                    "django.db.models.Model",
                    "app.models.GameMember",
                    "app.models.course.Course",
                    "abilian.core.models.subjects.User",
                    "models.User"
                ],
                "value": [
                    "Dict[str,str]",
                    "bool",
                    "str",
                    "bytes"
                ]
            }
        },
        "test_model_fields_validate_allow_empty_error": {
            "name": "test_model_fields_validate_allow_empty_error",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "empty_value": [
                    "Callable",
                    "excars.models.user.User",
                    "lms.lmsdb.models.User",
                    "lms.lmsdb.models.Solution"
                ]
            }
        },
        "test_model_fields_field_validation": {
            "name": "test_model_fields_field_validation",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "model": []
            }
        },
        "test_model_fields_field_validation_without_raise": {
            "name": "test_model_fields_field_validation_without_raise",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "bool",
                    "keanu.Model"
                ]
            }
        },
        "test_model_fields_field_validation_error": {
            "name": "test_model_fields_field_validation_error",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "keanu.Model",
                    "TestModule.Model",
                    "models.cf_recommend_models.ICfRecommendationModel"
                ]
            }
        },
        "test_model_fields_field_validation_error_without_raise": {
            "name": "test_model_fields_field_validation_error_without_raise",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "bool",
                    "keanu.Model",
                    "deeplearning.ml4pl.models.logger.Logger"
                ]
            }
        },
        "test_model_validate_nested": {
            "name": "test_model_validate_nested",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "nested_model": [
                    "bool"
                ]
            }
        },
        "test_model_validate_and_clean_without_clean_method": {
            "name": "test_model_validate_and_clean_without_clean_method",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "core.models.Grouping"
                ]
            }
        },
        "test_model_validate_and_clean": {
            "name": "test_model_validate_and_clean",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_model_validate_and_clean_nested": {
            "name": "test_model_validate_and_clean_nested",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "nested_model": [
                    "str",
                    "int"
                ]
            }
        },
        "test_model_get_fields_invalid": {
            "name": "test_model_get_fields_invalid",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_model_with_private_attrs": {
            "name": "test_model_with_private_attrs",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_build_many": {
            "name": "test_build_many",
            "location": 343,
            "return": [
                "None"
            ],
            "arguments": {
                "many_source": [
                    "str",
                    "List[str]",
                    "tracim.models.data.Content"
                ]
            }
        },
        "test_build_many_empty_iterable": {
            "name": "test_build_many_empty_iterable",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_build_many_different_items": {
            "name": "test_build_many_different_items",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_type_model": {
            "name": "test_type_model",
            "location": 361,
            "return": [
                "None"
            ],
            "arguments": {
                "typed_model": [
                    "str",
                    "Union[str,List[str]]",
                    "List[str]"
                ],
                "model_clean_validate_foo": [
                    "str",
                    "None",
                    "Optional[str]",
                    "zam_repondeur.models.Lecture",
                    "datetime.date"
                ]
            }
        },
        "test_typed_model_type_conversion": {
            "name": "test_typed_model_type_conversion",
            "location": 370,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "typed_model": [
                    "List[Dict]"
                ],
                "model_clean_validate_foo_data": [
                    "bool",
                    "models.Trip",
                    "int"
                ],
                "model_clean_validate_foo": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "test_model_inheritance_with_meta_fields": {
            "name": "test_model_inheritance_with_meta_fields",
            "location": 390,
            "return": [
                "None"
            ],
            "arguments": {
                "model_clean_validate_foo": [
                    "keanu.Model",
                    "TestModule.Model"
                ]
            }
        },
        "test_model_inheritance_without_meta_fields": {
            "name": "test_model_inheritance_without_meta_fields",
            "location": 414,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_typeless_model": {
            "name": "test_typeless_model",
            "location": 437,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_field_factory_model": {
            "name": "test_field_factory_model",
            "location": 445,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_model_validate_union": {
            "name": "test_model_validate_union",
            "location": 454,
            "return": [
                "None"
            ],
            "arguments": {
                "default": [
                    "str",
                    "Atom",
                    "None",
                    "int",
                    "Optional[str]",
                    "Optional[object]",
                    "Optional[int]"
                ]
            }
        },
        "test_model_validate_optional": {
            "name": "test_model_validate_optional",
            "location": 466,
            "return": [
                "None"
            ],
            "arguments": {
                "default": [
                    "bool",
                    "None",
                    "tnadmin.models.GvOrganisation",
                    "Optional[int]",
                    "Optional[object]",
                    "salon.models.Stylist"
                ]
            }
        },
        "test_model_validate_optional_without_default": {
            "name": "test_model_validate_optional_without_default",
            "location": 477,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_model_validate_optional_empty_without_default": {
            "name": "test_model_validate_optional_empty_without_default",
            "location": 487,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_model_validate_and_clean_invalid_mocked_model": {
            "name": "test_model_validate_and_clean_invalid_mocked_model",
            "location": 497,
            "return": [
                "None"
            ],
            "arguments": {
                "model": []
            }
        },
        "test_model_validate_and_clean_invalid_model_validate_called_after_clean": {
            "name": "test_model_validate_and_clean_invalid_model_validate_called_after_clean",
            "location": 504,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "keanu.Model",
                    "TestModule.Model",
                    "core.models.Grouping"
                ]
            }
        },
        "test_model_validate_and_clean_model_list": {
            "name": "test_model_validate_and_clean_model_list",
            "location": 520,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "int",
                    "List[str]"
                ]
            }
        },
        "test_wtf_validate": {
            "name": "test_wtf_validate",
            "location": 542,
            "return": [
                "None"
            ],
            "arguments": {
                "empty_value": [
                    "str",
                    "List",
                    "Dict",
                    "Callable[...,str]",
                    "List[bytes]"
                ]
            }
        },
        "test_model_validate_and_clean_type_conversion": {
            "name": "test_model_validate_and_clean_type_conversion",
            "location": 550,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "Iterable[object]"
                ]
            }
        },
        "test_field_conversion_model_type_conflict": {
            "name": "test_field_conversion_model_type_conflict",
            "location": 602,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "models.Form700Filing",
                    "zerver.models.Realm",
                    "deeplearning.ml4pl.models.batch.BatchIterator"
                ]
            }
        },
        "test_field_conversion_list": {
            "name": "test_field_conversion_list",
            "location": 614,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "List[src.main.core.models.display.Display]",
                    "core.models.Grouping"
                ]
            }
        },
        "test_model_property_getter": {
            "name": "test_model_property_getter",
            "location": 625,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_model_property_setter": {
            "name": "test_model_property_setter",
            "location": 659,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_model_property_is_not_called_on_validation_unless_necessary": {
            "name": "test_model_property_is_not_called_on_validation_unless_necessary",
            "location": 698,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_model_property_validation": {
            "name": "test_model_property_validation",
            "location": 712,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_model_ignores_private_attrs": {
            "name": "test_model_ignores_private_attrs",
            "location": 732,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_model_as_dict_validated": {
            "name": "test_model_as_dict_validated",
            "location": 751,
            "return": [
                "None"
            ],
            "arguments": {
                "model": []
            }
        },
        "test_model_validate_unexpected_exception": {
            "name": "test_model_validate_unexpected_exception",
            "location": 761,
            "return": [
                "None"
            ],
            "arguments": {
                "model": []
            }
        },
        "test_lazy_model_auto_validation_on_getattr": {
            "name": "test_lazy_model_auto_validation_on_getattr",
            "location": 772,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_lazy_model_auto_invalidation_on_setattr": {
            "name": "test_lazy_model_auto_invalidation_on_setattr",
            "location": 782,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_lazy_model_as_dict": {
            "name": "test_lazy_model_as_dict",
            "location": 793,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_model_subclass_inheritance_wont_consider_is_valid_as_field": {
            "name": "test_model_subclass_inheritance_wont_consider_is_valid_as_field",
            "location": 802,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_model_super_validate_is_called": {
            "name": "test_model_super_validate_is_called",
            "location": 812,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "FooBarModel.validate_foo": {
            "name": "validate_foo",
            "location": 18,
            "return": [
                "str",
                "int",
                "Callable",
                "models.Question"
            ],
            "arguments": {
                "self": [],
                "foo": [
                    "str",
                    "int",
                    "Callable",
                    "models.Question"
                ]
            }
        },
        "nested_model.CleanQuxModel.validate_foo": {
            "name": "validate_foo",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "nested_model.CleanQuxModel.validate_qux": {
            "name": "validate_qux",
            "location": 70,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "datetime.timedelta",
                    "T",
                    "int",
                    "bytes"
                ]
            }
        },
        "test_base_model_validate_fail.MyModel.validate_foo": {
            "name": "validate_foo",
            "location": 141,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "test_model_validate_and_clean.TidyModel.validate_foo": {
            "name": "validate_foo",
            "location": 286,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "foo": [
                    "str",
                    "OrderedDict"
                ]
            }
        },
        "test_model_validate_and_clean.TidyModel.validate_bar": {
            "name": "validate_bar",
            "location": 289,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "bar": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "test_model_validate_and_clean.TidyModel.validate_baz": {
            "name": "validate_baz",
            "location": 292,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "baz": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "test_model_with_private_attrs.PvtModel.__len__": {
            "name": "__len__",
            "location": 327,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_model_with_private_attrs.PvtModel.__private_method": {
            "name": "__private_method",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_model_validate_and_clean_invalid_model_validate_called_after_clean.MyModel.validate_foo": {
            "name": "validate_foo",
            "location": 509,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "foo": [
                    "str"
                ]
            }
        },
        "test_model_validate_and_clean_model_list.MyModel.validate_foo": {
            "name": "validate_foo",
            "location": 525,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "foo": [
                    "str",
                    "OrderedDict"
                ]
            }
        },
        "test_model_validate_and_clean_type_conversion.Foo.__init__": {
            "name": "__init__",
            "location": 566,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "foo": [
                    "int",
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "bool"
                ]
            }
        },
        "test_model_property_getter.Foo.c": {
            "name": "c",
            "location": 632,
            "return": [
                "float",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_model_property_getter.Foo.d": {
            "name": "d",
            "location": 636,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_model_property_getter.Foo.validate_c": {
            "name": "validate_c",
            "location": 639,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "Optional[Iterable[str]]",
                "bool",
                "Tuple[str]",
                "list"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "list",
                    "List[magic.models.Card]",
                    "int",
                    "dict",
                    "str"
                ]
            }
        },
        "test_model_property_setter.Foo.d": {
            "name": "d",
            "location": 668,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "type",
                    "T",
                    "dict"
                ]
            }
        },
        "test_model_property_setter.Foo.validate_d": {
            "name": "validate_d",
            "location": 674,
            "return": [
                "dict",
                "Dict[str, bool]",
                "int",
                "Union[Dict, str]",
                "Exception",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "dict",
                    "Tuple[int, int, str]",
                    "datetime.date",
                    "str"
                ]
            }
        },
        "test_model_property_is_not_called_on_validation_unless_necessary.Foo.a": {
            "name": "a",
            "location": 704,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_model_property_validation.Foo.a": {
            "name": "a",
            "location": 718,
            "return": [
                "int",
                "bytes",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_model_property_validation.Foo.validate_a": {
            "name": "validate_a",
            "location": 721,
            "return": [
                "str",
                "Type[T]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "T",
                    "Tuple[str, int]",
                    "eth.exceptions.VMError",
                    "int",
                    "list",
                    "bytes",
                    "str"
                ]
            }
        }
    },
    "simple-model-master/tests/test_utils.py": {
        "test_utils_capitalize_first": {
            "name": "test_utils_capitalize_first",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_utils_camel_case": {
            "name": "test_utils_camel_case",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_coerce_to_alpha": {
            "name": "test_coerce_to_alpha",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_snake_case": {
            "name": "test_snake_case",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_getkey": {
            "name": "test_getkey",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_is_private_attribute": {
            "name": "test_is_private_attribute",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "attr_name": [
                    "str"
                ],
                "result": [
                    "str"
                ]
            }
        }
    },
    "simple-model-master/tests/test_version.py": {
        "test_version": {
            "name": "test_version",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "simple-model-master/tests/__init__.py": {}
}
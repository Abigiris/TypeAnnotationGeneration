{
    "simple_schema_validator-master/setup.py": {
        "UploadCommand.status": {
            "name": "status",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "s": []
            }
        },
        "UploadCommand.initialize_options": {
            "name": "initialize_options",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UploadCommand.finalize_options": {
            "name": "finalize_options",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UploadCommand.run": {
            "name": "run",
            "location": 66,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "simple_schema_validator-master/examples/list.py": {
        "validate": {
            "name": "validate",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "Dict[str, Any]",
                    "str",
                    "dict[str, typing.Any]",
                    "int",
                    "bytes",
                    "List[int]",
                    "list[int]"
                ],
                "data": [
                    "Dict[str, Any]",
                    "str",
                    "dict[str, typing.Any]",
                    "int",
                    "bytes",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "simple_schema_validator-master/examples/optional.py": {
        "validate": {
            "name": "validate",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "Dict[str, Any]",
                    "str",
                    "dict[str, typing.Any]",
                    "int",
                    "bytes",
                    "List[int]",
                    "list[int]"
                ],
                "data": [
                    "Dict[str, Any]",
                    "str",
                    "dict[str, typing.Any]",
                    "int",
                    "bytes",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "simple_schema_validator-master/examples/recursive.py": {
        "validate": {
            "name": "validate",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "Dict[str, Any]",
                    "str",
                    "dict[str, typing.Any]",
                    "int",
                    "bytes",
                    "List[int]",
                    "list[int]"
                ],
                "data": [
                    "Dict[str, Any]",
                    "str",
                    "dict[str, typing.Any]",
                    "int",
                    "bytes",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "simple_schema_validator-master/examples/simple.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "simple_schema_validator-master/simple_schema_validator/schema_types.py": {
        "is_optional": {
            "name": "is_optional",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {
                "t": [
                    "Type"
                ]
            }
        },
        "get_optional_type": {
            "name": "get_optional_type",
            "location": 30,
            "return": [
                "T",
                "Type"
            ],
            "arguments": {
                "t": [
                    "OptionalType"
                ]
            }
        },
        "get_listType_type": {
            "name": "get_listType_type",
            "location": 41,
            "return": [
                "str",
                "T",
                "Type"
            ],
            "arguments": {
                "t": [
                    "ListType"
                ]
            }
        },
        "is_optional_schema": {
            "name": "is_optional_schema",
            "location": 45,
            "return": [
                "bool"
            ],
            "arguments": {
                "v": [
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "is_any": {
            "name": "is_any",
            "location": 49,
            "return": [
                "bool"
            ],
            "arguments": {
                "v": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "is_any_or_optional_any": {
            "name": "is_any_or_optional_any",
            "location": 53,
            "return": [
                "bool"
            ],
            "arguments": {
                "v": [
                    "float",
                    "abc.BaseConfig",
                    "int",
                    "str"
                ]
            }
        },
        "is_list": {
            "name": "is_list",
            "location": 57,
            "return": [
                "bool"
            ],
            "arguments": {
                "v": [
                    "int",
                    "str"
                ]
            }
        },
        "is_dict": {
            "name": "is_dict",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {
                "v": [
                    "int",
                    "str"
                ]
            }
        },
        "get_list_type": {
            "name": "get_list_type",
            "location": 65,
            "return": [
                "Optional[List[Any]]",
                "Type"
            ],
            "arguments": {
                "v": [
                    "bool"
                ]
            }
        },
        "get_expected_type": {
            "name": "get_expected_type",
            "location": 75,
            "return": [
                "type"
            ],
            "arguments": {
                "v": [
                    "int",
                    "type",
                    "Type",
                    "Callable"
                ]
            }
        },
        "type_check_lists": {
            "name": "type_check_lists",
            "location": 87,
            "return": [
                "Tuple[(bool, Optional[list])]"
            ],
            "arguments": {
                "_type": [
                    "str",
                    "int",
                    "Type",
                    "Optional[Type]"
                ],
                "value": [
                    "str",
                    "bool",
                    "dict"
                ],
                "path": [
                    "List[str]"
                ]
            }
        },
        "type_check": {
            "name": "type_check",
            "location": 119,
            "return": [
                "Tuple[(bool, Optional[list])]"
            ],
            "arguments": {
                "schema_paths_mapping": [
                    "str",
                    "Dict[int, Any]",
                    "Dict[str, Set[str]]"
                ],
                "data_paths_mapping": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, str]"
                ],
                "path": [
                    "dict",
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "Dict[str, str]",
                    "Optional[dict]",
                    "Optional[str]"
                ],
                "optional_paths": [
                    "str"
                ]
            }
        },
        "OptionalType.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "T": [
                    "int",
                    "float"
                ]
            }
        },
        "OptionalTypeFactory.__getitem__": {
            "name": "__getitem__",
            "location": 12,
            "return": [
                "OptionalType"
            ],
            "arguments": {
                "self": [],
                "T": [
                    "str"
                ]
            }
        },
        "ListType.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "T": [
                    "int",
                    "float"
                ]
            }
        },
        "ListTypeFactory.__getitem__": {
            "name": "__getitem__",
            "location": 22,
            "return": [
                "ListType"
            ],
            "arguments": {
                "self": [],
                "T": [
                    "str"
                ]
            }
        }
    },
    "simple_schema_validator-master/simple_schema_validator/schema_validator.py": {
        "remove_optional_values": {
            "name": "remove_optional_values",
            "location": 43,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "data_paths_mapping": [
                    "str",
                    "Optional[str]"
                ],
                "optional_paths": [
                    "str",
                    "Optional[str]",
                    "list[int]",
                    "List[int]",
                    "list[str]",
                    "bool",
                    "list[dict[str, typing.Any]]",
                    "List[str]",
                    "List[Dict[str, Any]]"
                ],
                "schema_paths": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "remove_paths_inside_paths_of_any": {
            "name": "remove_paths_inside_paths_of_any",
            "location": 57,
            "return": [
                "str",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "data_paths": [
                    "str"
                ],
                "schema_paths_mapping": [
                    "str"
                ]
            }
        },
        "schema_validator": {
            "name": "schema_validator",
            "location": 70,
            "return": [
                "SchemaValidationResult"
            ],
            "arguments": {
                "schema": [
                    "Dict[(str, Any)]"
                ],
                "data": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "SchemaValidationResult.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaValidationResult.missing_keys": {
            "name": "missing_keys",
            "location": 28,
            "return": [
                "str",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaValidationResult.additional_keys": {
            "name": "additional_keys",
            "location": 32,
            "return": [
                "str",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaValidationResult.type_errors": {
            "name": "type_errors",
            "location": 36,
            "return": [
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaValidationResult.__bool__": {
            "name": "__bool__",
            "location": 39,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "simple_schema_validator-master/simple_schema_validator/utils.py": {
        "get_paths": {
            "name": "get_paths",
            "location": 8,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "d": [
                    "dict[, ]",
                    "str",
                    "int",
                    "Union[int, float]",
                    "List[Dict[str, Any]]",
                    "dict",
                    "List[Dict[str, str]]"
                ]
            }
        },
        "set_nested": {
            "name": "set_nested",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "d": [
                    "str",
                    "dict",
                    "list",
                    "Optional[str]",
                    "int"
                ],
                "path": [
                    "str"
                ],
                "value": [
                    "bool",
                    "bytes",
                    "str",
                    "int",
                    "dict[str, int]",
                    "Dict[str, int]"
                ]
            }
        },
        "replace_optional_schema_paths": {
            "name": "replace_optional_schema_paths",
            "location": 42,
            "return": [
                "Tuple[(Dict[(str, Any)], List[str])]"
            ],
            "arguments": {
                "schema": [
                    "bool",
                    "str"
                ]
            }
        },
        "get_paths_with_any": {
            "name": "get_paths_with_any",
            "location": 68,
            "return": [
                "set"
            ],
            "arguments": {
                "schema_paths_mapping": [
                    "str"
                ]
            }
        }
    },
    "simple_schema_validator-master/simple_schema_validator/__init__.py": {},
    "simple_schema_validator-master/simple_schema_validator/__version__.py": {},
    "simple_schema_validator-master/tests/test_schema_types.py": {
        "SchemaTypesTests.test_optional_type_factory_builds_optional_type": {
            "name": "test_optional_type_factory_builds_optional_type",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaTypesTests.test_is_optional_schema_cases": {
            "name": "test_is_optional_schema_cases",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "simple_schema_validator-master/tests/test_schema_validator.py": {
        "SchemaValidatorTests.get_invalid_message": {
            "name": "get_invalid_message",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "validation": [
                    "dict",
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "SchemaValidatorTests.assert_valid": {
            "name": "assert_valid",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "validation": [
                    "str",
                    "int"
                ]
            }
        },
        "SchemaValidatorTests.test_empty_data_and_schema_are_considered_valid": {
            "name": "test_empty_data_and_schema_are_considered_valid",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaValidatorTests.test_validating_any_values": {
            "name": "test_validating_any_values",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaValidatorTests.test_validating_plain_schema": {
            "name": "test_validating_plain_schema",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaValidatorTests.test_validating_one_level_nested_schema": {
            "name": "test_validating_one_level_nested_schema",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaValidatorTests.test_validating_two_level_nested_schema": {
            "name": "test_validating_two_level_nested_schema",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaValidatorTests.test_validating_multiple_level_nested_schema": {
            "name": "test_validating_multiple_level_nested_schema",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaValidatorTests.test_validating_types_with_plain_schema": {
            "name": "test_validating_types_with_plain_schema",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaValidatorTests.test_validating_different_types": {
            "name": "test_validating_different_types",
            "location": 353,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaValidatorTests.test_validating_types_with_nested_schema": {
            "name": "test_validating_types_with_nested_schema",
            "location": 408,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaValidatorTests.test_validating_optional_type": {
            "name": "test_validating_optional_type",
            "location": 533,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaValidatorTests.test_validating_optional_schema": {
            "name": "test_validating_optional_schema",
            "location": 571,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaValidatorTests.test_validating_with_optional_any": {
            "name": "test_validating_with_optional_any",
            "location": 608,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaValidatorTests.test_validating_deeply_nested_optional_schema": {
            "name": "test_validating_deeply_nested_optional_schema",
            "location": 633,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaValidatorTests.test_validate_general_list_types": {
            "name": "test_validate_general_list_types",
            "location": 717,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaValidatorTests.test_validating_specific_list_types": {
            "name": "test_validating_specific_list_types",
            "location": 746,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaValidatorTests.test_validate_list_of_dict_with_int_for_value": {
            "name": "test_validate_list_of_dict_with_int_for_value",
            "location": 791,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaValidatorTests.test_validate_list_of_dict_with_str_for_value": {
            "name": "test_validate_list_of_dict_with_str_for_value",
            "location": 820,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaValidatorTests.test_validating_recursive_list_of_dict": {
            "name": "test_validating_recursive_list_of_dict",
            "location": 849,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaValidatorTests.test_validating_recursive_list_of_dict_with_empty_inner_list": {
            "name": "test_validating_recursive_list_of_dict_with_empty_inner_list",
            "location": 920,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaValidatorTests.test_validating_recursive_list_of_dict_with_optional_int": {
            "name": "test_validating_recursive_list_of_dict_with_optional_int",
            "location": 934,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaValidatorTests.test_validating_recursive_list_of_dict_with_any_optional": {
            "name": "test_validating_recursive_list_of_dict_with_any_optional",
            "location": 981,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaValidatorTests.test_more_list_cases": {
            "name": "test_more_list_cases",
            "location": 1004,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaValidatorTests.test_optional_list": {
            "name": "test_optional_list",
            "location": 1079,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaValidatorTests.test_optional_int_list": {
            "name": "test_optional_int_list",
            "location": 1162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaValidatorTests.test_types_list": {
            "name": "test_types_list",
            "location": 1215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "simple_schema_validator-master/tests/test_utils.py": {
        "UtilsTests.test_get_paths": {
            "name": "test_get_paths",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilsTests.test_set_nested": {
            "name": "test_set_nested",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "simple_schema_validator-master/tests/__init__.py": {}
}
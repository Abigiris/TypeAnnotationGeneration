{
    "simplenet-master/docs/conf.py": {},
    "simplenet-master/examples/mnist.py": {
        "get_images_and_labels": {
            "name": "get_images_and_labels",
            "location": 26,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "train_or_test": [
                    "int",
                    "str"
                ],
                "folder": [
                    "Text",
                    "str",
                    "Tuple[int,int]",
                    "Optional[str]"
                ]
            }
        },
        "read_images": {
            "name": "read_images",
            "location": 60,
            "return": [
                "str",
                "int",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "file_name": [
                    "str"
                ],
                "data_folder": [
                    "str"
                ]
            }
        },
        "read_labels": {
            "name": "read_labels",
            "location": 99,
            "return": [
                "int",
                "Sequence[Tuple[float, float]]",
                "Dict[str, str]",
                "bytes",
                "Callable[[str], bool]"
            ],
            "arguments": {
                "file_name": [
                    "str"
                ],
                "data_folder": [
                    "str"
                ]
            }
        },
        "check_or_download": {
            "name": "check_or_download",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "file_name": [
                    "str",
                    "bool"
                ],
                "data_folder": [
                    "str"
                ],
                "url": [
                    "Text",
                    "str",
                    "Optional[Dict[str,Any]]",
                    "Dict"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "import_progress": [
                    "None",
                    "Iterator[int]",
                    "int",
                    "Iterator",
                    "Tuple[int]",
                    "str",
                    "bool",
                    "Iterable[Iterable]",
                    "Iterable"
                ],
                "save_progress": [
                    "None",
                    "Iterator[int]",
                    "int",
                    "Iterator",
                    "Tuple[int]",
                    "str",
                    "bool",
                    "Iterable[Iterable]",
                    "Iterable"
                ]
            }
        }
    },
    "simplenet-master/src/simplenet/simplenet.py": {
        "sigmoid": {
            "name": "sigmoid",
            "location": 17,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "arr": [
                    "int",
                    "Callable",
                    "str"
                ],
                "der": [
                    "bool"
                ]
            }
        },
        "softmax": {
            "name": "softmax",
            "location": 39,
            "return": [
                "bytearray",
                "float",
                "str",
                "numpy.ndarray",
                "bool",
                "List[int]"
            ],
            "arguments": {
                "arr": [
                    "str",
                    "bytearray",
                    "bool",
                    "Callable",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "neg_log_likelihood": {
            "name": "neg_log_likelihood",
            "location": 57,
            "return": [
                "str",
                "List[bytes]",
                "Iterable[float]",
                "type",
                "int"
            ],
            "arguments": {
                "y_hat": [
                    "bool",
                    "float",
                    "str",
                    "int",
                    "Union[int,float]"
                ],
                "targets": [
                    "str",
                    "int",
                    "bool"
                ],
                "der": [
                    "bool"
                ]
            }
        },
        "cross_entropy": {
            "name": "cross_entropy",
            "location": 81,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "y_hat": [
                    "int",
                    "float",
                    "str",
                    "bool"
                ],
                "targets": [
                    "bytes",
                    "Callable[,Actor]",
                    "Union[int,float]",
                    "int",
                    "float"
                ],
                "der": [
                    "bool"
                ]
            }
        },
        "relu": {
            "name": "relu",
            "location": 99,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "arr": [
                    "int",
                    "List",
                    "str"
                ],
                "der": [
                    "bool"
                ]
            }
        },
        "SimpleNet.__init__": {
            "name": "__init__",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hidden_layer_sizes": [
                    "Tuple[Union[int,int]]",
                    "int",
                    "Union[Tuple[int,int],int]",
                    "Tuple[int,int,int,int]",
                    "Optional[numpy.ndarray]",
                    "bool"
                ],
                "input_shape": [
                    "Tuple[Union[int,int]]",
                    "int",
                    "Union[Tuple[int,int],int]",
                    "Tuple[int,int,int,int]",
                    "Optional[numpy.ndarray]",
                    "bool"
                ],
                "output_shape": [
                    "Tuple[Union[int,int]]",
                    "int",
                    "Union[Tuple[int,int],int]",
                    "Tuple[int,int,int,int]",
                    "Optional[numpy.ndarray]",
                    "bool"
                ],
                "activation_function": [
                    "bytes",
                    "bool",
                    "int",
                    "str"
                ],
                "output_activation": [
                    "int",
                    "numpy.ndarray",
                    "List[int]"
                ],
                "loss_function": [
                    "bytes",
                    "bool",
                    "int",
                    "str"
                ],
                "learning_rate": [
                    "float",
                    "bytes",
                    "bool",
                    "int",
                    "str"
                ],
                "dtype": [
                    "Text",
                    "int",
                    "Callable",
                    "List",
                    "Optional[int]"
                ],
                "seed": [
                    "int",
                    "None",
                    "float",
                    "bool",
                    "Optional[int]"
                ]
            }
        },
        "SimpleNet._forward": {
            "name": "_forward",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "SimpleNet._backprop": {
            "name": "_backprop",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "str",
                    "Callable",
                    "Optional[Union[str,Any]]",
                    "Any",
                    "None"
                ],
                "targets": [
                    "float"
                ]
            }
        },
        "SimpleNet.learn": {
            "name": "learn",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "float",
                    "int",
                    "numpy.ndarray",
                    "Union[numpy.ndarray,numpy.void]"
                ],
                "targets": [
                    "float",
                    "int",
                    "Sequence[numpy.ndarray]",
                    "numpy.ndarray"
                ]
            }
        },
        "SimpleNet.predict": {
            "name": "predict",
            "location": 245,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "float",
                    "List[float]",
                    "Union[numpy.ndarray,numpy.void]",
                    "numpy.ndarray"
                ]
            }
        },
        "SimpleNet.validate": {
            "name": "validate",
            "location": 276,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "List[str]",
                    "str",
                    "Optional[bool]",
                    "bool",
                    "int",
                    "None"
                ],
                "targets": [
                    "float",
                    "numpy.ndarray"
                ],
                "epsilon": [
                    "float",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "SimpleNet.export_model": {
            "name": "export_model",
            "location": 408,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "List[str]",
                    "Dict[str,dict[str,str]]",
                    "Dict[str,Dict[str,str]]",
                    "List[tuple[Union[int,int]]]",
                    "List[Tuple[int,int]]",
                    "List[Tuple[int,int,int,int]]"
                ]
            }
        },
        "SimpleNet.import_model": {
            "name": "import_model",
            "location": 428,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "List[str]",
                    "bytes"
                ]
            }
        }
    },
    "simplenet-master/src/simplenet/__init__.py": {},
    "simplenet-master/tests/keras_against_tf.py": {
        "test_learned_something": {
            "name": "test_learned_something",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_weights_and_biases": {
            "name": "test_weights_and_biases",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_err": {
            "name": "test_err",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "simplenet-master/tests/test_against_keras.py": {
        "test_learned_something": {
            "name": "test_learned_something",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_weights_and_biases": {
            "name": "test_weights_and_biases",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_err": {
            "name": "test_err",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "simplenet-master/tests/test_against_tensorflow.py": {
        "test_learned_something": {
            "name": "test_learned_something",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_weights_and_biases": {
            "name": "test_weights_and_biases",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_err": {
            "name": "test_err",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_softmax": {
            "name": "test_softmax",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "simplenet-master/tests/test_simplenet.py": {
        "test_validate_neg_log_likelihood": {
            "name": "test_validate_neg_log_likelihood",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validate_cross_entropy": {
            "name": "test_validate_cross_entropy",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_export": {
            "name": "test_import_export",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
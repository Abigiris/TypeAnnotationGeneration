{
    "sipa-master/manage.py": {
        "large_message": {
            "name": "large_message",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "int",
                    "str",
                    "List[int]"
                ],
                "title": [
                    "int",
                    "str",
                    "List[int]"
                ],
                "width": [
                    "int",
                    "str",
                    "List[int]"
                ],
                "fill": [
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        },
        "run_tests_unittest": {
            "name": "run_tests_unittest",
            "location": 41,
            "return": [
                "unittest.result.TestResult"
            ],
            "arguments": {}
        },
        "run_tests_nose": {
            "name": "run_tests_nose",
            "location": 48,
            "return": [
                "Union[(int, unittest.result.TestResult)]"
            ],
            "arguments": {}
        },
        "test": {
            "name": "test",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "force_unittest": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "wait_until_ready": {
            "name": "wait_until_ready",
            "location": 98,
            "return": [
                "bool"
            ],
            "arguments": {
                "connections_to_test": [
                    "Tuple[str, str, str]",
                    "str",
                    "int",
                    "bool"
                ],
                "timeout": [
                    "int",
                    "str",
                    "float"
                ]
            }
        }
    },
    "sipa-master/sipa.py": {
        "inject_hotline_status": {
            "name": "inject_hotline_status",
            "location": 53,
            "return": [
                "Dict[str, Any]",
                "dict",
                "str",
                "int",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {}
        },
        "preparation": {
            "name": "preparation",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "sipa-master/build/install_requirements.py": {
        "main": {
            "name": "main",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sipa-master/docs/source/conf.py": {},
    "sipa-master/sipa/babel.py": {
        "possible_locales": {
            "name": "possible_locales",
            "location": 13,
            "return": [
                "List[babel.core.Locale]"
            ],
            "arguments": {}
        },
        "get_user_locale_setting": {
            "name": "get_user_locale_setting",
            "location": 18,
            "return": [
                "Optional[babel.core.Locale]"
            ],
            "arguments": {}
        },
        "save_user_locale_setting": {
            "name": "save_user_locale_setting",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "select_locale": {
            "name": "select_locale",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "sipa-master/sipa/base.py": {
        "load_user": {
            "name": "load_user",
            "location": 31,
            "return": [
                "AnonymousUserMixin"
            ],
            "arguments": {
                "username": [
                    "dict",
                    "int",
                    "dict[, ]",
                    "Optional['models.LTI1p3Provider']",
                    "None"
                ]
            }
        }
    },
    "sipa-master/sipa/defaults.py": {},
    "sipa-master/sipa/flatpages.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "extension": [],
                "parent": [],
                "node_id": []
            }
        },
        "Article.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "extension": [],
                "parent": [],
                "article_id": []
            }
        },
        "Article.add_page": {
            "name": "add_page",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "page": [],
                "locale": [
                    "babel.core.Locale"
                ]
            }
        },
        "Article.validate_page_meta": {
            "name": "validate_page_meta",
            "location": 76,
            "return": [
                "bool"
            ],
            "arguments": {
                "page": []
            }
        },
        "Article.rank": {
            "name": "rank",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Article.html": {
            "name": "html",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Article.link": {
            "name": "link",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Article.hidden": {
            "name": "hidden",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Article.__getattr__": {
            "name": "__getattr__",
            "location": 136,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "str"
                ]
            }
        },
        "Article.localized_page": {
            "name": "localized_page",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Article.file_basename": {
            "name": "file_basename",
            "location": 179,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Category.__init__": {
            "name": "__init__",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "extension": [],
                "parent": [],
                "category_id": []
            }
        },
        "Category.articles": {
            "name": "articles",
            "location": 202,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Category.__getattr__": {
            "name": "__getattr__",
            "location": 209,
            "return": [],
            "arguments": {
                "self": [],
                "attr": []
            }
        },
        "Category.add_child_category": {
            "name": "add_child_category",
            "location": 222,
            "return": [
                "Category"
            ],
            "arguments": {
                "self": [
                    "_TCategory"
                ],
                "id": []
            }
        },
        "Category._parse_page_basename": {
            "name": "_parse_page_basename",
            "location": 235,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "basename": [
                    "_T0"
                ]
            }
        },
        "Category.add_article": {
            "name": "add_article",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [],
                "page": []
            }
        },
        "CategorizedFlatPages.__init__": {
            "name": "__init__",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CategorizedFlatPages.init_app": {
            "name": "init_app",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "CategorizedFlatPages.categories": {
            "name": "categories",
            "location": 304,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CategorizedFlatPages.get": {
            "name": "get",
            "location": 310,
            "return": [
                "Optional[Article]"
            ],
            "arguments": {
                "self": [],
                "category_id": [],
                "article_id": []
            }
        },
        "CategorizedFlatPages.get_category": {
            "name": "get_category",
            "location": 316,
            "return": [
                "Optional[Category]"
            ],
            "arguments": {
                "self": [],
                "category_id": []
            }
        },
        "CategorizedFlatPages.get_articles_of_category": {
            "name": "get_articles_of_category",
            "location": 321,
            "return": [
                "List[Article]"
            ],
            "arguments": {
                "self": [],
                "category_id": []
            }
        },
        "CategorizedFlatPages.get_or_404": {
            "name": "get_or_404",
            "location": 332,
            "return": [
                "Optional[Article]"
            ],
            "arguments": {
                "self": [],
                "category_id": [],
                "article_id": []
            }
        },
        "CategorizedFlatPages._init_categories": {
            "name": "_init_categories",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CategorizedFlatPages.reload": {
            "name": "reload",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sipa-master/sipa/forms.py": {
        "lower_filter": {
            "name": "lower_filter",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "string": []
            }
        },
        "strip_filter": {
            "name": "strip_filter",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "string": []
            }
        },
        "require_unicast_mac": {
            "name": "require_unicast_mac",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "form": [],
                "field": []
            }
        },
        "flash_formerrors": {
            "name": "flash_formerrors",
            "location": 542,
            "return": [
                "None"
            ],
            "arguments": {
                "form": []
            }
        },
        "render_links": {
            "name": "render_links",
            "location": 555,
            "return": [
                "str"
            ],
            "arguments": {
                "raw": [
                    "str"
                ],
                "links": [
                    "dict"
                ]
            }
        },
        "MacAddress.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "None"
                ]
            }
        },
        "PasswordComplexity.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "min_length": [
                    "int"
                ],
                "min_classes": [
                    "int"
                ],
                "message": [
                    "None"
                ]
            }
        },
        "PasswordComplexity.__call__": {
            "name": "__call__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "form": [],
                "field": [],
                "message": [
                    "None"
                ]
            }
        },
        "PasswordComplexity.raise_error": {
            "name": "raise_error",
            "location": 53,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "OptionalIf.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "deciding_field": [],
                "invert": [
                    "bool"
                ]
            }
        },
        "OptionalIf.__call__": {
            "name": "__call__",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "form": [],
                "field": []
            }
        },
        "StrippedStringField.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReadonlyStringField.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReadonlyStringField.__call__": {
            "name": "__call__",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EmailField.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NativeDateField.__init__": {
            "name": "__init__",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NativeDateField.__call__": {
            "name": "__call__",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SpamCheckField.__init__": {
            "name": "__init__",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpamCheckField.__call__": {
            "name": "__call__",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TerminateMembershipForm.validate_end_date": {
            "name": "validate_end_date",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "form": [
                    "TerminateMembershipForm"
                ],
                "field": []
            }
        },
        "render_links.render_link": {
            "name": "render_link",
            "location": 562,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "match": []
            }
        }
    },
    "sipa-master/sipa/initialization.py": {
        "init_app": {
            "name": "init_app",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ]
            }
        },
        "load_config_file": {
            "name": "load_config_file",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "dict[, ]",
                    "dict",
                    "asyncpg_migrate.model.Config"
                ],
                "config": [
                    "dict",
                    "None",
                    "asyncpg_migrate.model.Config",
                    "dict[, ]"
                ]
            }
        },
        "init_env_and_config": {
            "name": "init_env_and_config",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "dict[, ]",
                    "str",
                    "flask.Flask",
                    "dict"
                ]
            }
        },
        "try_register_uwsgi_timer": {
            "name": "try_register_uwsgi_timer",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ]
            }
        },
        "init_logging": {
            "name": "init_logging",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ]
            }
        },
        "try_register_uwsgi_timer.update_uwsgi": {
            "name": "update_uwsgi",
            "location": 159,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "signum": [
                    "int",
                    "str",
                    "Optional[bool]",
                    "bool"
                ]
            }
        }
    },
    "sipa-master/sipa/login_manager.py": {
        "SipaLoginManager.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SipaLoginManager.ignore_endpoint": {
            "name": "ignore_endpoint",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "endpoint_name": [
                    "str",
                    "int",
                    "tuple",
                    "tuple[]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "SipaLoginManager.disable_user_loading": {
            "name": "disable_user_loading",
            "location": 20,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "self": [],
                "bp": [
                    "dict",
                    "str",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "SipaLoginManager.user_callback": {
            "name": "user_callback",
            "location": 47,
            "return": [
                "",
                "str",
                "typing.Callable[, ]",
                "int",
                "typing.TextIO"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "str",
                    "Callable"
                ]
            }
        },
        "SipaLoginManager.disable_user_loading.decorate": {
            "name": "decorate",
            "location": 37,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "f": [
                    "str"
                ]
            }
        },
        "SipaLoginManager.user_callback.wrapped_user_callback": {
            "name": "wrapped_user_callback",
            "location": 49,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "user_id": [
                    "int",
                    "str",
                    "Callable"
                ]
            }
        },
        "SipaLoginManager.disable_user_loading.endpoint_name": {
            "name": "endpoint_name",
            "location": 34,
            "return": [
                "str",
                "Optional[str]",
                "type"
            ],
            "arguments": {
                "f": [
                    "T",
                    "Mapping",
                    "Callable[..., Awaitable[None]]",
                    "Callable",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        }
    },
    "sipa-master/sipa/mail.py": {
        "wrap_message": {
            "name": "wrap_message",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "message": [
                    "str"
                ],
                "chars_in_line": [
                    "int"
                ]
            }
        },
        "send_mail": {
            "name": "send_mail",
            "location": 52,
            "return": [
                "bool"
            ],
            "arguments": {
                "author": [
                    "str"
                ],
                "recipient": [
                    "str"
                ],
                "subject": [
                    "str"
                ],
                "message": [
                    "str"
                ],
                "reply_to": [
                    "str"
                ]
            }
        },
        "send_contact_mail": {
            "name": "send_contact_mail",
            "location": 144,
            "return": [
                "bool"
            ],
            "arguments": {
                "author": [
                    "str"
                ],
                "subject": [
                    "str"
                ],
                "message": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "dormitory_name": [
                    "str"
                ]
            }
        },
        "send_official_contact_mail": {
            "name": "send_official_contact_mail",
            "location": 171,
            "return": [
                "bool"
            ],
            "arguments": {
                "author": [
                    "str"
                ],
                "subject": [
                    "str"
                ],
                "message": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "send_usersuite_contact_mail": {
            "name": "send_usersuite_contact_mail",
            "location": 194,
            "return": [
                "bool"
            ],
            "arguments": {
                "subject": [
                    "str"
                ],
                "message": [
                    "str"
                ],
                "category": [
                    "str"
                ],
                "user": [
                    "sipa.model.user.BaseUser"
                ],
                "author": [
                    "str"
                ]
            }
        },
        "send_complex_mail": {
            "name": "send_complex_mail",
            "location": 225,
            "return": [
                "bool"
            ],
            "arguments": {
                "subject": [
                    "str"
                ],
                "message": [
                    "str"
                ],
                "tag": [
                    "str"
                ],
                "category": [
                    "str"
                ],
                "header": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "compose_subject": {
            "name": "compose_subject",
            "location": 248,
            "return": [
                "str"
            ],
            "arguments": {
                "raw_subject": [
                    "str"
                ],
                "tag": [
                    "str"
                ],
                "category": [
                    "str"
                ]
            }
        },
        "compose_body": {
            "name": "compose_body",
            "location": 272,
            "return": [
                "str"
            ],
            "arguments": {
                "message": [
                    "str"
                ],
                "header": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        }
    },
    "sipa-master/sipa/session.py": {
        "SeparateLocaleCookieSessionInterface._copy_session": {
            "name": "_copy_session",
            "location": 9,
            "return": [
                "str",
                "dict",
                "dict[, ]",
                "dict[str, typing.Union[typing.Any,typing.Any,typing.Any]]"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "Mapping",
                    "typing.Mapping"
                ],
                "data": [
                    "str",
                    "bytes",
                    "dict",
                    "dict[, ]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "SeparateLocaleCookieSessionInterface.open_session": {
            "name": "open_session",
            "location": 18,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "Tuple[int]",
                    "Exception",
                    "tuple[int]"
                ],
                "request": [
                    "Tuple[int]",
                    "Exception",
                    "tuple[int]"
                ]
            }
        },
        "SeparateLocaleCookieSessionInterface.save_session": {
            "name": "save_session",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [],
                "session": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ],
                "response": [
                    "dict",
                    "int",
                    "dict[, ]"
                ]
            }
        }
    },
    "sipa-master/sipa/units.py": {
        "max_divisions": {
            "name": "max_divisions",
            "location": 17,
            "return": [
                "int"
            ],
            "arguments": {
                "number": [
                    "float"
                ],
                "base": [
                    "int"
                ],
                "unit_list": [
                    "list"
                ]
            }
        },
        "reduce_by_base": {
            "name": "reduce_by_base",
            "location": 41,
            "return": [
                "float"
            ],
            "arguments": {
                "number": [
                    "float"
                ],
                "divisions": [
                    "int"
                ],
                "base": [
                    "int"
                ]
            }
        },
        "format_as_traffic": {
            "name": "format_as_traffic",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "number": [
                    "float"
                ],
                "divisions": [
                    "int"
                ],
                "divide": [
                    "bool"
                ]
            }
        },
        "dynamic_unit": {
            "name": "dynamic_unit",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "number": [
                    "float"
                ]
            }
        },
        "money": {
            "name": "money",
            "location": 77,
            "return": [
                "Callable"
            ],
            "arguments": {
                "func": []
            }
        },
        "money_style": {
            "name": "money_style",
            "location": 102,
            "return": [
                "str"
            ],
            "arguments": {
                "amount": [
                    "float"
                ]
            }
        },
        "format_money": {
            "name": "format_money",
            "location": 112,
            "return": [
                "str"
            ],
            "arguments": {
                "amount": [
                    "float"
                ]
            }
        },
        "money._wrapped_func": {
            "name": "_wrapped_func",
            "location": 92,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {}
        }
    },
    "sipa-master/sipa/__init__.py": {
        "create_app": {
            "name": "create_app",
            "location": 7,
            "return": [
                "flask.Flask",
                "None",
                "Flask"
            ],
            "arguments": {
                "app": [
                    "flask.Flask",
                    "None"
                ],
                "prepare_callable": [
                    "type",
                    "None",
                    "typing.Type"
                ]
            }
        }
    },
    "sipa-master/sipa/backends/datasource.py": {
        "DataSource.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "user_class": [
                    "Type[sipa.backends.types.UserLike]"
                ],
                "mail_server": [
                    "str"
                ],
                "webmailer_url": [
                    "str"
                ],
                "support_mail": [
                    "str"
                ],
                "init_context": [
                    "Callable[([Any], None)]"
                ]
            }
        },
        "DataSource.__eq__": {
            "name": "__eq__",
            "location": 45,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Collection",
                    "typing.Collection"
                ]
            }
        },
        "DataSource.__repr__": {
            "name": "__repr__",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataSource.__hash__": {
            "name": "__hash__",
            "location": 54,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataSource.register_dormitory": {
            "name": "register_dormitory",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dormitory": [
                    "Dormitory"
                ]
            }
        },
        "DataSource.dormitories": {
            "name": "dormitories",
            "location": 64,
            "return": [
                "list[]",
                "list",
                "str",
                "List[T]",
                "List['Frame']"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataSource.init_context": {
            "name": "init_context",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "str",
                    "flask.Flask"
                ]
            }
        },
        "SubnetCollection.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subnets": [
                    "List[ipaddress.IPv4Network]"
                ]
            }
        },
        "SubnetCollection.__repr__": {
            "name": "__repr__",
            "location": 118,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubnetCollection.__contains__": {
            "name": "__contains__",
            "location": 124,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "ipaddress.IPv4Address"
                ]
            }
        },
        "SubnetCollection.__eq__": {
            "name": "__eq__",
            "location": 130,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Collection",
                    "typing.Collection"
                ]
            }
        },
        "SubnetCollection.__hash__": {
            "name": "__hash__",
            "location": 133,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dormitory.__init__": {
            "name": "__init__",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "display_name": [
                    "str"
                ],
                "datasource": [
                    "DataSource"
                ],
                "subnets": [
                    "bool",
                    "None",
                    "str",
                    "int",
                    "Sequence",
                    "typing.Sequence[]"
                ]
            }
        },
        "Dormitory.__repr__": {
            "name": "__repr__",
            "location": 151,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dormitory.__eq__": {
            "name": "__eq__",
            "location": 159,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Collection",
                    "typing.Collection"
                ]
            }
        },
        "Dormitory.__hash__": {
            "name": "__hash__",
            "location": 162,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sipa-master/sipa/backends/exceptions.py": {
        "BackendError.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "backend_name": [
                    "str"
                ]
            }
        }
    },
    "sipa-master/sipa/backends/extension.py": {
        "evaluates_uniquely": {
            "name": "evaluates_uniquely",
            "location": 18,
            "return": [
                "bool"
            ],
            "arguments": {
                "objects": [],
                "func": []
            }
        },
        "Backends.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backends.init_app": {
            "name": "init_app",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "Backends.register": {
            "name": "register",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "datasource": [
                    "sipa.backends.datasource.DataSource"
                ]
            }
        },
        "Backends._activate_datasource": {
            "name": "_activate_datasource",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Backends._register_dormitory": {
            "name": "_register_dormitory",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dormitory": [
                    "sipa.backends.datasource.Dormitory"
                ]
            }
        },
        "Backends.pre_init_hook": {
            "name": "pre_init_hook",
            "location": 172,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Backends.init_backends": {
            "name": "init_backends",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backends.datasources": {
            "name": "datasources",
            "location": 195,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backends.dormitories": {
            "name": "dormitories",
            "location": 200,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backends.all_dormitories": {
            "name": "all_dormitories",
            "location": 208,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Backends.dormitories_short": {
            "name": "dormitories_short",
            "location": 217,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backends.supported_dormitories_short": {
            "name": "supported_dormitories_short",
            "location": 226,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backends.get_dormitory": {
            "name": "get_dormitory",
            "location": 238,
            "return": [
                "Optional[sipa.backends.datasource.Dormitory]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Backends.get_first_dormitory": {
            "name": "get_first_dormitory",
            "location": 250,
            "return": [
                "Optional[sipa.backends.datasource.Dormitory]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backends.get_datasource": {
            "name": "get_datasource",
            "location": 261,
            "return": [
                "Optional[sipa.backends.datasource.DataSource]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Backends.dormitory_from_ip": {
            "name": "dormitory_from_ip",
            "location": 273,
            "return": [
                "Optional[sipa.backends.datasource.Dormitory]"
            ],
            "arguments": {
                "self": [],
                "ip": [
                    "str"
                ]
            }
        },
        "Backends.preferred_dormitory_name": {
            "name": "preferred_dormitory_name",
            "location": 290,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backends.user_from_ip": {
            "name": "user_from_ip",
            "location": 301,
            "return": [
                "Optional[sipa.backends.types.UserLike]"
            ],
            "arguments": {
                "self": [],
                "ip": [
                    "str"
                ]
            }
        },
        "Backends.current_dormitory": {
            "name": "current_dormitory",
            "location": 322,
            "return": [
                "Optional[sipa.backends.datasource.Dormitory]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backends.current_datasource": {
            "name": "current_datasource",
            "location": 326,
            "return": [
                "Optional[sipa.backends.datasource.DataSource]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backends.pre_init_hook.decorator": {
            "name": "decorator",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "f": []
            }
        }
    },
    "sipa-master/sipa/backends/logging.py": {},
    "sipa-master/sipa/backends/types.py": {
        "UserLike.is_active": {
            "name": "is_active",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserLike.is_authenticated": {
            "name": "is_authenticated",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserLike.is_anonymous": {
            "name": "is_anonymous",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sipa-master/sipa/backends/__init__.py": {},
    "sipa-master/sipa/blueprints/documents.py": {
        "StaticFiles.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "directory": [
                    "int",
                    "float",
                    "bool"
                ],
                "login_required": [
                    "bool",
                    "int",
                    "float"
                ],
                "member_required": [
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "StaticFiles.dispatch_request": {
            "name": "dispatch_request",
            "location": 21,
            "return": [
                "flask.Flask"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        }
    },
    "sipa-master/sipa/blueprints/features.py": {
        "bustimes": {
            "name": "bustimes",
            "location": 16,
            "return": [],
            "arguments": {
                "stopname": [
                    "None"
                ]
            }
        }
    },
    "sipa-master/sipa/blueprints/generic.py": {
        "log_request": {
            "name": "log_request",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "error_handler_redirection": {
            "name": "error_handler_redirection",
            "location": 54,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "e": []
            }
        },
        "exceptionhandler_sql": {
            "name": "exceptionhandler_sql",
            "location": 75,
            "return": [],
            "arguments": {
                "ex": []
            }
        },
        "exceptionhandler_backend": {
            "name": "exceptionhandler_backend",
            "location": 90,
            "return": [],
            "arguments": {
                "ex": []
            }
        },
        "index": {
            "name": "index",
            "location": 104,
            "return": [],
            "arguments": {}
        },
        "login": {
            "name": "login",
            "location": 109,
            "return": [],
            "arguments": {}
        },
        "logout": {
            "name": "logout",
            "location": 163,
            "return": [],
            "arguments": {}
        },
        "request_password_reset": {
            "name": "request_password_reset",
            "location": 172,
            "return": [],
            "arguments": {}
        },
        "reset_password": {
            "name": "reset_password",
            "location": 202,
            "return": [],
            "arguments": {
                "token": []
            }
        },
        "to_gigabytes": {
            "name": "to_gigabytes",
            "location": 229,
            "return": [
                "int"
            ],
            "arguments": {
                "number": []
            }
        },
        "jinja_format_date": {
            "name": "jinja_format_date",
            "location": 239,
            "return": [],
            "arguments": {
                "date": []
            }
        },
        "usertraffic": {
            "name": "usertraffic",
            "location": 247,
            "return": [],
            "arguments": {}
        },
        "traffic_api": {
            "name": "traffic_api",
            "location": 285,
            "return": [],
            "arguments": {}
        },
        "contact": {
            "name": "contact",
            "location": 307,
            "return": [],
            "arguments": {}
        },
        "contact_official": {
            "name": "contact_official",
            "location": 333,
            "return": [],
            "arguments": {}
        },
        "version": {
            "name": "version",
            "location": 360,
            "return": [],
            "arguments": {}
        },
        "trigger_error": {
            "name": "trigger_error",
            "location": 371,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sipa-master/sipa/blueprints/hooks.py": {
        "content_hook": {
            "name": "content_hook",
            "location": 15,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {}
        }
    },
    "sipa-master/sipa/blueprints/news.py": {
        "show": {
            "name": "show",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "show_news": {
            "name": "show_news",
            "location": 66,
            "return": [],
            "arguments": {
                "filename": []
            }
        }
    },
    "sipa-master/sipa/blueprints/pages.py": {
        "show": {
            "name": "show",
            "location": 22,
            "return": [
                "flask.Flask",
                "Optional[str]"
            ],
            "arguments": {
                "category_id": [
                    "str",
                    "int"
                ],
                "article_id": [
                    "str",
                    "int"
                ]
            }
        },
        "load_dynamic_json": {
            "name": "load_dynamic_json",
            "location": 57,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        }
    },
    "sipa-master/sipa/blueprints/register.py": {
        "load_register_state": {
            "name": "load_register_state",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "save_register_state": {
            "name": "save_register_state",
            "location": 78,
            "return": [],
            "arguments": {
                "response": []
            }
        },
        "register_redirect": {
            "name": "register_redirect",
            "location": 84,
            "return": [
                "Callable"
            ],
            "arguments": {
                "func": []
            }
        },
        "goto_step": {
            "name": "goto_step",
            "location": 99,
            "return": [],
            "arguments": {
                "step": []
            }
        },
        "handle_backend_error": {
            "name": "handle_backend_error",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "ex": [
                    "sipa.model.pycroft.exc.PycroftBackendError"
                ]
            }
        },
        "landing": {
            "name": "landing",
            "location": 115,
            "return": [],
            "arguments": {}
        },
        "identify": {
            "name": "identify",
            "location": 121,
            "return": [],
            "arguments": {
                "reg_state": []
            }
        },
        "room": {
            "name": "room",
            "location": 182,
            "return": [],
            "arguments": {
                "reg_state": []
            }
        },
        "data": {
            "name": "data",
            "location": 199,
            "return": [],
            "arguments": {
                "reg_state": []
            }
        },
        "finish": {
            "name": "finish",
            "location": 266,
            "return": [],
            "arguments": {
                "reg_state": []
            }
        },
        "confirm": {
            "name": "confirm",
            "location": 271,
            "return": [],
            "arguments": {
                "token": []
            }
        },
        "success": {
            "name": "success",
            "location": 301,
            "return": [],
            "arguments": {
                "reg_state": []
            }
        },
        "cancel": {
            "name": "cancel",
            "location": 306,
            "return": [],
            "arguments": {}
        },
        "restart": {
            "name": "restart",
            "location": 312,
            "return": [],
            "arguments": {}
        },
        "RegisterState.__post_init__": {
            "name": "__post_init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegisterState.confirmed_room_id": {
            "name": "confirmed_room_id",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegisterState.to_json": {
            "name": "to_json",
            "location": 62,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegisterState.from_json": {
            "name": "from_json",
            "location": 66,
            "return": [
                "RegisterState"
            ],
            "arguments": {
                "cls": [
                    "Type[_TRegisterState]"
                ],
                "json": [
                    "dict"
                ]
            }
        },
        "register_redirect.wrapper_decorator": {
            "name": "wrapper_decorator",
            "location": 86,
            "return": [],
            "arguments": {}
        }
    },
    "sipa-master/sipa/blueprints/usersuite.py": {
        "capability_or_403": {
            "name": "capability_or_403",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "active_property": [],
                "capability": []
            }
        },
        "index": {
            "name": "index",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "contact": {
            "name": "contact",
            "location": 115,
            "return": [],
            "arguments": {}
        },
        "render_payment_details": {
            "name": "render_payment_details",
            "location": 155,
            "return": [
                "dict"
            ],
            "arguments": {
                "details": [
                    "sipa.model.misc.PaymentDetails"
                ],
                "months": []
            }
        },
        "generate_epc_qr_code": {
            "name": "generate_epc_qr_code",
            "location": 167,
            "return": [
                "str"
            ],
            "arguments": {
                "details": [
                    "sipa.model.misc.PaymentDetails"
                ],
                "months": []
            }
        },
        "get_attribute_endpoint": {
            "name": "get_attribute_endpoint",
            "location": 180,
            "return": [
                "str"
            ],
            "arguments": {
                "attribute": [],
                "capability": [
                    "typing.Text"
                ]
            }
        },
        "change_password": {
            "name": "change_password",
            "location": 211,
            "return": [],
            "arguments": {}
        },
        "change_mail": {
            "name": "change_mail",
            "location": 236,
            "return": [],
            "arguments": {}
        },
        "resend_confirm_mail": {
            "name": "resend_confirm_mail",
            "location": 271,
            "return": [],
            "arguments": {}
        },
        "change_mac": {
            "name": "change_mac",
            "location": 303,
            "return": [],
            "arguments": {}
        },
        "activate_network_access": {
            "name": "activate_network_access",
            "location": 345,
            "return": [],
            "arguments": {}
        },
        "hosting": {
            "name": "hosting",
            "location": 389,
            "return": [],
            "arguments": {
                "action": [
                    "None"
                ]
            }
        },
        "finance_logs": {
            "name": "finance_logs",
            "location": 422,
            "return": [],
            "arguments": {}
        },
        "terminate_membership": {
            "name": "terminate_membership",
            "location": 428,
            "return": [],
            "arguments": {}
        },
        "terminate_membership_confirm": {
            "name": "terminate_membership_confirm",
            "location": 462,
            "return": [],
            "arguments": {}
        },
        "continue_membership": {
            "name": "continue_membership",
            "location": 519,
            "return": [],
            "arguments": {}
        },
        "reset_wifi_password": {
            "name": "reset_wifi_password",
            "location": 561,
            "return": [],
            "arguments": {}
        }
    },
    "sipa-master/sipa/blueprints/__init__.py": {},
    "sipa-master/sipa/config/default.py": {},
    "sipa-master/sipa/config/example.py": {},
    "sipa-master/sipa/config/__init__.py": {},
    "sipa-master/sipa/model/exceptions.py": {},
    "sipa-master/sipa/model/fancy_property.py": {
        "unsupported_prop": {
            "name": "unsupported_prop",
            "location": 120,
            "return": [
                "property"
            ],
            "arguments": {
                "func": []
            }
        },
        "connection_dependent": {
            "name": "connection_dependent",
            "location": 239,
            "return": [
                "Callable"
            ],
            "arguments": {
                "func": []
            }
        },
        "PropertyBase.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "value": [],
                "raw_value": [],
                "capabilities": [],
                "style": [],
                "empty": [],
                "description_url": []
            }
        },
        "PropertyBase.__repr__": {
            "name": "__repr__",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PropertyBase.supported": {
            "name": "supported",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PropertyBase.__eq__": {
            "name": "__eq__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "PropertyBase.__contains__": {
            "name": "__contains__",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "PropertyBase.__bool__": {
            "name": "__bool__",
            "location": 59,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnsupportedProperty.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "UnsupportedProperty.__repr__": {
            "name": "__repr__",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnsupportedProperty.__eq__": {
            "name": "__eq__",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ActiveProperty.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "value": [],
                "raw_value": [],
                "capabilities": [],
                "style": [],
                "empty": [],
                "description_url": []
            }
        },
        "ActiveProperty.__repr__": {
            "name": "__repr__",
            "location": 111,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "active_prop.__init__": {
            "name": "__init__",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fget": [],
                "fset": [],
                "fdel": [],
                "doc": [],
                "fake_setter": []
            }
        },
        "active_prop.__repr__": {
            "name": "__repr__",
            "location": 215,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "active_prop.getter": {
            "name": "getter",
            "location": 224,
            "return": [
                "active_prop"
            ],
            "arguments": {
                "self": [
                    "_Tactive_prop"
                ],
                "func": []
            }
        },
        "active_prop.setter": {
            "name": "setter",
            "location": 227,
            "return": [
                "active_prop"
            ],
            "arguments": {
                "self": [
                    "_Tactive_prop"
                ],
                "func": []
            }
        },
        "active_prop.deleter": {
            "name": "deleter",
            "location": 230,
            "return": [
                "active_prop"
            ],
            "arguments": {
                "self": [
                    "_Tactive_prop"
                ],
                "func": []
            }
        },
        "active_prop.fake_setter": {
            "name": "fake_setter",
            "location": 233,
            "return": [
                "active_prop"
            ],
            "arguments": {
                "self": [
                    "_Tactive_prop"
                ]
            }
        },
        "connection_dependent._connection_dependent": {
            "name": "_connection_dependent",
            "location": 243,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "active_prop.__init__.wrapped_getter": {
            "name": "wrapped_getter",
            "location": 176,
            "return": [],
            "arguments": {}
        }
    },
    "sipa-master/sipa/model/finance.py": {
        "BaseFinanceInformation.balance": {
            "name": "balance",
            "location": 23,
            "return": [
                "ActiveProperty",
                "bool",
                "eth.abc.ComputationAPI"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFinanceInformation.raw_balance": {
            "name": "raw_balance",
            "location": 42,
            "return": [
                "builtins.float",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFinanceInformation.has_to_pay": {
            "name": "has_to_pay",
            "location": 52,
            "return": [
                "builtins.bool",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFinanceInformation.history": {
            "name": "history",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFinanceInformation.last_update": {
            "name": "last_update",
            "location": 68,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFinanceInformation.__eq__": {
            "name": "__eq__",
            "location": 72,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Collection",
                    "typing.Collection"
                ]
            }
        }
    },
    "sipa-master/sipa/model/misc.py": {
        "has_connection": {
            "name": "has_connection",
            "location": 13,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "user": [
                    "str",
                    "float",
                    "bytes",
                    "bool",
                    "int"
                ]
            }
        },
        "should_display_traffic_data": {
            "name": "should_display_traffic_data",
            "location": 17,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        }
    },
    "sipa-master/sipa/model/sqlalchemy.py": {},
    "sipa-master/sipa/model/user.py": {
        "BaseUser.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uid": []
            }
        },
        "BaseUser.__eq__": {
            "name": "__eq__",
            "location": 60,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BaseUser.get_id": {
            "name": "get_id",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseUser.get": {
            "name": "get",
            "location": 71,
            "return": [
                "T"
            ],
            "arguments": {
                "cls": [
                    "Type[T]"
                ],
                "username": [
                    "str"
                ]
            }
        },
        "BaseUser.from_ip": {
            "name": "from_ip",
            "location": 81,
            "return": [
                "T"
            ],
            "arguments": {
                "cls": [
                    "Type[T]"
                ],
                "ip": [
                    "str"
                ]
            }
        },
        "BaseUser.re_authenticate": {
            "name": "re_authenticate",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "password": []
            }
        },
        "BaseUser.tmp_authentication": {
            "name": "tmp_authentication",
            "location": 96,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "password": []
            }
        },
        "BaseUser.authenticate": {
            "name": "authenticate",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "username": [],
                "password": []
            }
        },
        "BaseUser.can_change_password": {
            "name": "can_change_password",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUser.change_password": {
            "name": "change_password",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "old": [],
                "new": []
            }
        },
        "BaseUser.traffic_history": {
            "name": "traffic_history",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUser.generate_rows": {
            "name": "generate_rows",
            "location": 153,
            "return": [
                "Generator[(Row, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "description_dict": [
                    "dict"
                ]
            }
        },
        "BaseUser.realname": {
            "name": "realname",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUser.login": {
            "name": "login",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUser.mac": {
            "name": "mac",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUser.mail": {
            "name": "mail",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUser.birthdate": {
            "name": "birthdate",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUser.mail_forwarded": {
            "name": "mail_forwarded",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUser.mail_confirmed": {
            "name": "mail_confirmed",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUser.resend_confirm_mail": {
            "name": "resend_confirm_mail",
            "location": 203,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUser.address": {
            "name": "address",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUser.status": {
            "name": "status",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUser.id": {
            "name": "id",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUser.hostname": {
            "name": "hostname",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUser.hostalias": {
            "name": "hostalias",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUser.userdb_status": {
            "name": "userdb_status",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUser.userdb": {
            "name": "userdb",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUser.has_connection": {
            "name": "has_connection",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUser.finance_information": {
            "name": "finance_information",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUser.finance_balance": {
            "name": "finance_balance",
            "location": 282,
            "return": [
                "UnsupportedProperty"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUser.payment_details": {
            "name": "payment_details",
            "location": 291,
            "return": [
                "sipa.model.misc.PaymentDetails"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUser.has_property": {
            "name": "has_property",
            "location": 295,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "property": []
            }
        },
        "BaseUser.membership_end_date": {
            "name": "membership_end_date",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUser.network_access_active": {
            "name": "network_access_active",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUser.activate_network_access": {
            "name": "activate_network_access",
            "location": 309,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "password": [],
                "mac": [],
                "birthdate": [],
                "host_name": []
            }
        },
        "BaseUser.terminate_membership": {
            "name": "terminate_membership",
            "location": 313,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "end_date": []
            }
        },
        "BaseUser.continue_membership": {
            "name": "continue_membership",
            "location": 317,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUser.estimate_balance": {
            "name": "estimate_balance",
            "location": 321,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "end_date": []
            }
        },
        "BaseUser.is_member": {
            "name": "is_member",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUser.wifi_password": {
            "name": "wifi_password",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUser.request_password_reset": {
            "name": "request_password_reset",
            "location": 335,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [],
                "user_ident": [],
                "email": []
            }
        },
        "BaseUser.password_reset": {
            "name": "password_reset",
            "location": 339,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [],
                "token": [],
                "new_password": []
            }
        },
        "BaseUserDB.__init__": {
            "name": "__init__",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "BaseUser"
                ]
            }
        },
        "BaseUserDB.has_db": {
            "name": "has_db",
            "location": 358,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUserDB.create": {
            "name": "create",
            "location": 366,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str"
                ]
            }
        },
        "BaseUserDB.drop": {
            "name": "drop",
            "location": 371,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUserDB.change_password": {
            "name": "change_password",
            "location": 376,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str"
                ]
            }
        }
    },
    "sipa-master/sipa/model/__init__.py": {
        "prepare_sqlalchemy": {
            "name": "prepare_sqlalchemy",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "build_backends_ext": {
            "name": "build_backends_ext",
            "location": 24,
            "return": [
                "sipa.backends.extension.Backends"
            ],
            "arguments": {}
        }
    },
    "sipa-master/sipa/model/pycroft/api.py": {
        "PycroftApiError.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str"
                ],
                "message": [
                    "str"
                ]
            }
        },
        "MatchPersonResult.__post_init__": {
            "name": "__post_init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MatchPersonResult.from_json": {
            "name": "from_json",
            "location": 41,
            "return": [
                "str",
                "Optional[str]",
                "int",
                "Dict[str, str]",
                "List[str]",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "dict[str, typing.Any]",
                    "bool",
                    "Dict[str, Any]"
                ],
                "json": [
                    "dict"
                ]
            }
        },
        "PycroftApi.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "endpoint": [
                    "str"
                ],
                "api_key": [
                    "str"
                ]
            }
        },
        "PycroftApi.get_user": {
            "name": "get_user",
            "location": 52,
            "return": [
                "Tuple[(int, dict)]"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str"
                ]
            }
        },
        "PycroftApi.get_user_from_ip": {
            "name": "get_user_from_ip",
            "location": 55,
            "return": [
                "raiden.utils.Dict[str, raiden.utils.Any]",
                "Dict[str, Dict]",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "ip": [
                    "int",
                    "str",
                    "list[]",
                    "list",
                    "bool"
                ]
            }
        },
        "PycroftApi.authenticate": {
            "name": "authenticate",
            "location": 58,
            "return": [
                "int",
                "Tuple[float, int]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str",
                    "List[int]",
                    "list[int]"
                ],
                "password": [
                    "str",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "PycroftApi.change_password": {
            "name": "change_password",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str"
                ],
                "old_password": [
                    "str"
                ],
                "new_password": [
                    "str"
                ]
            }
        },
        "PycroftApi.change_mail": {
            "name": "change_mail",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str",
                    "bytes"
                ],
                "password": [
                    "str",
                    "bytes"
                ],
                "new_mail": [
                    "str",
                    "bytes"
                ],
                "forwarded": [
                    "str",
                    "bytes"
                ]
            }
        },
        "PycroftApi.change_mac": {
            "name": "change_mac",
            "location": 71,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str",
                    "int",
                    "bytes",
                    "Optional[str]",
                    "None",
                    "Optional[Exception]",
                    "Exception"
                ],
                "password": [
                    "str",
                    "int",
                    "bytes",
                    "Optional[str]",
                    "None",
                    "Optional[Exception]",
                    "Exception"
                ],
                "interface_id": [
                    "str",
                    "int",
                    "bytes",
                    "Optional[str]",
                    "None",
                    "Optional[Exception]",
                    "Exception"
                ],
                "new_mac": [
                    "str",
                    "int",
                    "bytes",
                    "Optional[str]",
                    "None",
                    "Optional[Exception]",
                    "Exception"
                ],
                "host_name": [
                    "str",
                    "int",
                    "bytes",
                    "Optional[str]",
                    "None",
                    "Optional[Exception]",
                    "Exception"
                ]
            }
        },
        "PycroftApi.activate_network_access": {
            "name": "activate_network_access",
            "location": 75,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str",
                    "int"
                ],
                "password": [
                    "str",
                    "int"
                ],
                "mac": [
                    "str",
                    "int"
                ],
                "birthdate": [
                    "str",
                    "int"
                ],
                "host_name": [
                    "str",
                    "int"
                ]
            }
        },
        "PycroftApi.estimate_balance_at_end_of_membership": {
            "name": "estimate_balance_at_end_of_membership",
            "location": 80,
            "return": [
                "Optional[str]",
                "List[str]",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int"
                ],
                "end_date": [
                    "int"
                ]
            }
        },
        "PycroftApi.terminate_membership": {
            "name": "terminate_membership",
            "location": 84,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int",
                    "str",
                    "bool"
                ],
                "end_date": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "PycroftApi.continue_membership": {
            "name": "continue_membership",
            "location": 89,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "dict",
                "datetime.date.time"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "PycroftApi.reset_wifi_password": {
            "name": "reset_wifi_password",
            "location": 92,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int",
                    "str"
                ]
            }
        },
        "PycroftApi.request_password_reset": {
            "name": "request_password_reset",
            "location": 95,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "user_ident": [
                    "str"
                ],
                "email": [
                    "str"
                ]
            }
        },
        "PycroftApi.reset_password": {
            "name": "reset_password",
            "location": 101,
            "return": [
                "str",
                "cmk.utils.type_defs.UserId",
                "float",
                "Optional[cmk.utils.type_defs.HostAddress]",
                "cmk.utils.type_defs.HostName",
                "bool"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str",
                    "bytes",
                    "Optional[bytes]",
                    "Tuple[int, int]",
                    "None",
                    "List[Tuple[int, int]]",
                    "tuple[typing.Union[int,int]]",
                    "list[tuple[typing.Union[int,int]]]"
                ],
                "new_password": [
                    "str",
                    "bytes",
                    "Optional[bytes]",
                    "Tuple[int, int]",
                    "None",
                    "List[Tuple[int, int]]",
                    "tuple[typing.Union[int,int]]",
                    "list[tuple[typing.Union[int,int]]]"
                ]
            }
        },
        "PycroftApi.match_person": {
            "name": "match_person",
            "location": 107,
            "return": [
                "MatchPersonResult"
            ],
            "arguments": {
                "self": [],
                "first_name": [
                    "str"
                ],
                "last_name": [
                    "str"
                ],
                "birthdate": [
                    "datetime.date"
                ],
                "tenant_number": [
                    "int"
                ],
                "previous_dorm": [
                    "Optional[str]"
                ]
            }
        },
        "PycroftApi.member_request": {
            "name": "member_request",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "str"
                ],
                "login": [
                    "str"
                ],
                "password": [
                    "str"
                ],
                "first_name": [
                    "str"
                ],
                "last_name": [
                    "str"
                ],
                "birthdate": [
                    "datetime.date"
                ],
                "move_in_date": [
                    "datetime.date"
                ],
                "tenant_number": [
                    "Optional[int]"
                ],
                "room_id": [
                    "Optional[int]"
                ],
                "previous_dorm": [
                    "Optional[str]"
                ]
            }
        },
        "PycroftApi.resend_confirm_email": {
            "name": "resend_confirm_email",
            "location": 183,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int"
                ]
            }
        },
        "PycroftApi.confirm_email": {
            "name": "confirm_email",
            "location": 187,
            "return": [
                "str",
                "dict",
                "set",
                "list[]",
                "list[int]",
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str"
                ]
            }
        },
        "PycroftApi.get": {
            "name": "get",
            "location": 210,
            "return": [
                "Tuple[(int, Any)]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "params": [
                    "str",
                    "int",
                    "None"
                ],
                "no_raise": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "PycroftApi.post": {
            "name": "post",
            "location": 214,
            "return": [
                "Tuple[(int, Any)]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "int",
                    "dict[str, typing.Any]",
                    "str",
                    "Dict[str, Any]",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "Iterable[str]"
                ],
                "data": [
                    "bytes",
                    "None",
                    "str",
                    "Tuple[int, int]",
                    "Mapping",
                    "tuple[typing.Union[int,int]]",
                    "typing.Mapping"
                ],
                "no_raise": [
                    "bool",
                    "Optional[bytes]",
                    "str"
                ]
            }
        },
        "PycroftApi.delete": {
            "name": "delete",
            "location": 218,
            "return": [
                "Tuple[(int, Any)]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "dict[str, typing.Any]",
                    "int",
                    "Dict[str, Any]",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "Iterable[str]"
                ],
                "data": [
                    "None",
                    "Optional[str]",
                    "str",
                    "bool",
                    "dict[, ]",
                    "dict",
                    "int"
                ],
                "no_raise": [
                    "bool",
                    "Optional[bytes]",
                    "str",
                    "list",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "PycroftApi.patch": {
            "name": "patch",
            "location": 222,
            "return": [
                "Tuple[(int, Any)]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "dict[str, typing.Any]",
                    "int",
                    "purplship.core.utils.xml.Element",
                    "Dict[str, Any]",
                    "Iterable[str]"
                ],
                "data": [
                    "dict",
                    "None",
                    "datetime.datetime",
                    "dict[, ]",
                    "Mapping",
                    "typing.Mapping"
                ],
                "no_raise": [
                    "bool",
                    "str",
                    "dict",
                    "Optional[str]",
                    "Optional[bytes]"
                ]
            }
        },
        "PycroftApi._do_api_call": {
            "name": "_do_api_call",
            "location": 226,
            "return": [
                "Tuple[(int, Any)]"
            ],
            "arguments": {
                "self": [],
                "request_function": [
                    "Callable"
                ],
                "url": [
                    "str"
                ],
                "no_raise": [
                    "bool"
                ]
            }
        }
    },
    "sipa-master/sipa/model/pycroft/exc.py": {
        "PycroftBackendError.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sipa-master/sipa/model/pycroft/schema.py": {},
    "sipa-master/sipa/model/pycroft/unserialize.py": {
        "canonicalize_key": {
            "name": "canonicalize_key",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "key": [
                    "str"
                ]
            }
        },
        "_maybe_setattr": {
            "name": "_maybe_setattr",
            "location": 24,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Sequence[str]",
                    "Callable[..., T]",
                    "type",
                    "dict",
                    "Collection[str]"
                ],
                "attrname": [
                    "str",
                    "Sequence[str]",
                    "Callable[..., T]",
                    "type",
                    "dict",
                    "Collection[str]"
                ],
                "attr": [
                    "Type",
                    "bool",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "_is_optional": {
            "name": "_is_optional",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {
                "t": [
                    "datetime.datetime"
                ]
            }
        },
        "constructor_from_generic": {
            "name": "constructor_from_generic",
            "location": 41,
            "return": [
                "Union[(builtins.NoneType, Callable)]"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "args": [
                    "tuple"
                ]
            }
        },
        "constructor_from_annotation": {
            "name": "constructor_from_annotation",
            "location": 75,
            "return": [
                "Callable"
            ],
            "arguments": {
                "type_": [
                    "Optional[str]",
                    "str"
                ],
                "module": [
                    "str",
                    "dict",
                    "Optional[str]"
                ],
                "maxdepth": [
                    "str",
                    "Union[int, bytes]",
                    "type",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "unserializer": {
            "name": "unserializer",
            "location": 114,
            "return": [
                "type"
            ],
            "arguments": {
                "cls": [
                    "type"
                ]
            }
        },
        "unserializer._json_keys": {
            "name": "_json_keys",
            "location": 122,
            "return": [
                "str",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "unserializer.__init__": {
            "name": "__init__",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dict_like": [
                    "dict",
                    "List[str]",
                    "list"
                ]
            }
        },
        "constructor_from_generic.constructor": {
            "name": "constructor",
            "location": 64,
            "return": [
                "float",
                "bool",
                "Tuple[int, int]",
                "int"
            ],
            "arguments": {
                "val": [
                    "int",
                    "Optional[float]"
                ]
            }
        }
    },
    "sipa-master/sipa/model/pycroft/user.py": {
        "to_kib": {
            "name": "to_kib",
            "location": 393,
            "return": [
                "int"
            ],
            "arguments": {
                "v": [
                    "int"
                ]
            }
        },
        "User.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_data": [
                    "dict"
                ]
            }
        },
        "User.get": {
            "name": "get",
            "location": 41,
            "return": [
                "User"
            ],
            "arguments": {
                "cls": [
                    "Type[_TUser]"
                ],
                "username": []
            }
        },
        "User.from_ip": {
            "name": "from_ip",
            "location": 50,
            "return": [
                "AnonymousUserMixin"
            ],
            "arguments": {
                "cls": [],
                "ip": []
            }
        },
        "User.re_authenticate": {
            "name": "re_authenticate",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "password": []
            }
        },
        "User.authenticate": {
            "name": "authenticate",
            "location": 62,
            "return": [
                "User"
            ],
            "arguments": {
                "cls": [
                    "Type[_TUser]"
                ],
                "username": [],
                "password": []
            }
        },
        "User.change_password": {
            "name": "change_password",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "old": [],
                "new": []
            }
        },
        "User.traffic_history": {
            "name": "traffic_history",
            "location": 84,
            "return": [
                "list[dict[typing.Text, ]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.realname": {
            "name": "realname",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.birthdate": {
            "name": "birthdate",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.login": {
            "name": "login",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.ips": {
            "name": "ips",
            "location": 106,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.mac": {
            "name": "mac",
            "location": 118,
            "return": [
                "dict[typing.Text, typing.Union[str,bool]]"
            ],
            "arguments": {
                "self": [],
                "new_mac": []
            }
        },
        "User.change_mac_address": {
            "name": "change_mac_address",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_mac": [],
                "host_name": []
            }
        },
        "User.network_access_active": {
            "name": "network_access_active",
            "location": 143,
            "return": [
                "dict[typing.Text, bool]"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "User.activate_network_access": {
            "name": "activate_network_access",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "password": [],
                "mac": [],
                "birthdate": [],
                "host_name": []
            }
        },
        "User.terminate_membership": {
            "name": "terminate_membership",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "end_date": []
            }
        },
        "User.estimate_balance": {
            "name": "estimate_balance",
            "location": 167,
            "return": [],
            "arguments": {
                "self": [],
                "end_date": []
            }
        },
        "User.continue_membership": {
            "name": "continue_membership",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.mail": {
            "name": "mail",
            "location": 189,
            "return": [
                "dict[typing.Text, bool]"
            ],
            "arguments": {
                "self": [],
                "new_mail": []
            }
        },
        "User.mail_forwarded": {
            "name": "mail_forwarded",
            "location": 206,
            "return": [
                "dict[typing.Text, bool]"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "User.mail_confirmed": {
            "name": "mail_confirmed",
            "location": 210,
            "return": [
                "ActiveProperty"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.resend_confirm_mail": {
            "name": "resend_confirm_mail",
            "location": 219,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.address": {
            "name": "address",
            "location": 223,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.status": {
            "name": "status",
            "location": 227,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.id": {
            "name": "id",
            "location": 232,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.hostname": {
            "name": "hostname",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.hostalias": {
            "name": "hostalias",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.userdb_status": {
            "name": "userdb_status",
            "location": 244,
            "return": [
                "UnsupportedProperty",
                "ActiveProperty"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.userdb": {
            "name": "userdb",
            "location": 270,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.has_connection": {
            "name": "has_connection",
            "location": 274,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.finance_information": {
            "name": "finance_information",
            "location": 278,
            "return": [
                "FinanceInformation"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.payment_details": {
            "name": "payment_details",
            "location": 286,
            "return": [
                "sipa.model.misc.PaymentDetails"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.has_property": {
            "name": "has_property",
            "location": 299,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "property": []
            }
        },
        "User.membership_end_date": {
            "name": "membership_end_date",
            "location": 310,
            "return": [
                "dict[typing.Text, bool]"
            ],
            "arguments": {
                "self": [],
                "end_date": []
            }
        },
        "User.is_member": {
            "name": "is_member",
            "location": 314,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.evaluate_status": {
            "name": "evaluate_status",
            "location": 317,
            "return": [
                "Tuple[(Any, str)]"
            ],
            "arguments": {
                "self": [],
                "status": []
            }
        },
        "User.wifi_password": {
            "name": "wifi_password",
            "location": 357,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,None]]"
            ],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "User.reset_wifi_password": {
            "name": "reset_wifi_password",
            "location": 360,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.request_password_reset": {
            "name": "request_password_reset",
            "location": 369,
            "return": [],
            "arguments": {
                "cls": [],
                "user_ident": [],
                "email": []
            }
        },
        "User.password_reset": {
            "name": "password_reset",
            "location": 382,
            "return": [],
            "arguments": {
                "cls": [],
                "token": [],
                "new_password": []
            }
        },
        "FinanceInformation.__init__": {
            "name": "__init__",
            "location": 400,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "balance": [],
                "transactions": [],
                "last_update": []
            }
        },
        "FinanceInformation.raw_balance": {
            "name": "raw_balance",
            "location": 406,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FinanceInformation.last_update": {
            "name": "last_update",
            "location": 410,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FinanceInformation.history": {
            "name": "history",
            "location": 414,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sipa-master/sipa/model/pycroft/userdb.py": {
        "register_userdb_extension": {
            "name": "register_userdb_extension",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ]
            }
        },
        "UserDB.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "UserDB.test_ipmask_validity": {
            "name": "test_ipmask_validity",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "mask": [
                    "str"
                ]
            }
        },
        "UserDB.sql_query": {
            "name": "sql_query",
            "location": 38,
            "return": [
                "set",
                "rflx.model.Refinement",
                "str",
                "List[str]",
                "Type",
                "List[Dict[str, str]]",
                "list"
            ],
            "arguments": {
                "query": [
                    "str"
                ],
                "args": [
                    "tuple[]"
                ]
            }
        },
        "UserDB.has_db": {
            "name": "has_db",
            "location": 53,
            "return": [
                "None",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserDB.create": {
            "name": "create",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "UserDB.drop": {
            "name": "drop",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserDB.change_password": {
            "name": "change_password",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str"
                ]
            }
        },
        "UserDB.db_name": {
            "name": "db_name",
            "location": 115,
            "return": [
                "str",
                "lib.model.share.share.Share",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sipa-master/sipa/model/pycroft/__init__.py": {
        "init_pycroft_api": {
            "name": "init_pycroft_api",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "init_userdb": {
            "name": "init_userdb",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "init_context": {
            "name": "init_context",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        }
    },
    "sipa-master/sipa/model/sample/user.py": {
        "init_context": {
            "name": "init_context",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "dict[, ]",
                    "flask.Flask",
                    "dict"
                ]
            }
        },
        "SampleFinanceInformation.raw_balance": {
            "name": "raw_balance",
            "location": 47,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SampleFinanceInformation.history": {
            "name": "history",
            "location": 52,
            "return": [
                "list[typing.Union[tuple[typing.Union[int,typing.Text]],tuple[typing.Union[float,typing.Text]]]]",
                "int",
                "datetime.timedelta",
                "str",
                "Union[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SampleFinanceInformation.last_update": {
            "name": "last_update",
            "location": 60,
            "return": [
                "str",
                "List[str]",
                "Tuple[int, int]",
                "Sequence['cirq.Qid']",
                "Union[List[str], str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uid": [
                    "str",
                    "bool",
                    "None",
                    "Optional[int]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "User.__repr__": {
            "name": "__repr__",
            "location": 73,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.get": {
            "name": "get",
            "location": 88,
            "return": [
                "AnonymousUserMixin",
                "int",
                "Callable",
                "str",
                "py.path.local"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "List[int]",
                    "str",
                    "list[int]",
                    "Type['DataclassT']",
                    "typing.Type",
                    "List[str]",
                    "list[str]"
                ],
                "username": [
                    "type",
                    "typing.Type",
                    "bytes",
                    "Sequence",
                    "BaseException",
                    "typing.Sequence[]",
                    "dict",
                    "dict[, ]",
                    "Optional[Dict]",
                    "None",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "User.authenticate": {
            "name": "authenticate",
            "location": 98,
            "return": [
                "int",
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "username": [
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "password": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "User.from_ip": {
            "name": "from_ip",
            "location": 108,
            "return": [
                "int",
                "cmk.utils.type_defs.UserId",
                "Dict[str, str]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "Mapping[str, Any]",
                    "str"
                ],
                "ip": [
                    "int",
                    "dict[str, typing.Any]",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "User.change_password": {
            "name": "change_password",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "old": [
                    "typing.Iterable[typing.Any]",
                    "str",
                    "Iterable[Any]",
                    "bool",
                    "tuple",
                    "dict"
                ],
                "new": [
                    "str",
                    "BinaryIO",
                    "typing.BinaryIO",
                    "Optional[str]",
                    "None",
                    "Optional[List[str]]",
                    "list[str]",
                    "tuple",
                    "tuple[]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "User.traffic_history": {
            "name": "traffic_history",
            "location": 115,
            "return": [
                "list[dict[typing.Text, ]]",
                "str",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.realname": {
            "name": "realname",
            "location": 128,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.login": {
            "name": "login",
            "location": 132,
            "return": [
                "str",
                "int",
                "dict",
                "Union[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.mac": {
            "name": "mac",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[str, bytes]",
                    "Union[list, str]",
                    "Callable[[], Iterator[Any]]"
                ]
            }
        },
        "User.mail": {
            "name": "mail",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[str, bytes]",
                    "Union[list, str]",
                    "Callable[[], Iterator[Any]]"
                ]
            }
        },
        "User.mail_forwarded": {
            "name": "mail_forwarded",
            "location": 148,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.mail_confirmed": {
            "name": "mail_confirmed",
            "location": 152,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.resend_confirm_mail": {
            "name": "resend_confirm_mail",
            "location": 155,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.address": {
            "name": "address",
            "location": 164,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.ips": {
            "name": "ips",
            "location": 168,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.status": {
            "name": "status",
            "location": 172,
            "return": [
                "typing.Text",
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.id": {
            "name": "id",
            "location": 181,
            "return": [
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.hostname": {
            "name": "hostname",
            "location": 185,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.hostalias": {
            "name": "hostalias",
            "location": 189,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.userdb_status": {
            "name": "userdb_status",
            "location": 193,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.birthdate": {
            "name": "birthdate",
            "location": 197,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.payment_details": {
            "name": "payment_details",
            "location": 200,
            "return": [
                "sipa.model.misc.PaymentDetails"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.membership_end_date": {
            "name": "membership_end_date",
            "location": 218,
            "return": [
                "",
                "dict[typing.Text, bool]"
            ],
            "arguments": {
                "self": [],
                "end_date": [
                    "datetime.date",
                    "str",
                    "List[datetime.date]",
                    "int",
                    "datetime.datetime"
                ]
            }
        },
        "User.is_member": {
            "name": "is_member",
            "location": 240,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.estimate_balance": {
            "name": "estimate_balance",
            "location": 235,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "end_date": [
                    "str",
                    "int",
                    "datetime.date",
                    "datetime.datetime",
                    "bool"
                ]
            }
        },
        "User.terminate_membership": {
            "name": "terminate_membership",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "end_date": [
                    "str",
                    "bytes",
                    "Union[str, bytes]",
                    "None",
                    "dict[str, typing.Any]",
                    "Optional[\"permissions_doc\"]",
                    "Optional[str]",
                    "datetime.datetime",
                    "Dict[str, Any]"
                ]
            }
        },
        "User.continue_membership": {
            "name": "continue_membership",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.wifi_password": {
            "name": "wifi_password",
            "location": 244,
            "return": [
                "dict[typing.Text, typing.Text]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.request_password_reset": {
            "name": "request_password_reset",
            "location": 248,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "Optional[Union[str, Any]]",
                    "typing.Any"
                ],
                "user_ident": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "Optional[Union[str, Any]]",
                    "typing.Any"
                ],
                "email": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "Optional[Union[str, Any]]",
                    "typing.Any"
                ]
            }
        },
        "User.password_reset": {
            "name": "password_reset",
            "location": 252,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Tuple[str]",
                    "tuple[str]"
                ],
                "token": [
                    "str",
                    "bool",
                    "Tuple[str]",
                    "tuple[str]"
                ],
                "new_password": [
                    "str",
                    "bool",
                    "Tuple[str]",
                    "tuple[str]"
                ]
            }
        },
        "User.traffic_history.rand": {
            "name": "rand",
            "location": 116,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "sipa-master/sipa/model/sample/__init__.py": {},
    "sipa-master/sipa/utils/babel_utils.py": {
        "lang": {
            "name": "lang",
            "location": 5,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_weekday": {
            "name": "get_weekday",
            "location": 9,
            "return": [
                "Optional[bool]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "day": [
                    "int",
                    "str",
                    "Optional[bool]",
                    "None"
                ]
            }
        }
    },
    "sipa-master/sipa/utils/bootstraped_tables.py": {
        "makeExtension": {
            "name": "makeExtension",
            "location": 105,
            "return": [
                "BootstrapedTableExtension"
            ],
            "arguments": {}
        },
        "BootstrapedTableProcessor.test": {
            "name": "test",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "list[str]",
                    "markdown.util.etree.Element",
                    "typing.Callable[, ]",
                    "List[str]",
                    "Callable"
                ],
                "block": [
                    "str",
                    "markdown.util.etree.Element",
                    "bool"
                ]
            }
        },
        "BootstrapedTableProcessor.run": {
            "name": "run",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "Tuple[int, str]",
                    "tuple[typing.Union[int,str]]",
                    "Callable[..., None]",
                    "typing.Callable[..., None]",
                    "List[List[xml.etree.ElementTree.Element]]",
                    "list[list[xml.etree.ElementTree.Element]]"
                ],
                "blocks": [
                    "str",
                    "Exception",
                    "Type[T]",
                    "typing.Type"
                ]
            }
        },
        "BootstrapedTableProcessor._build_row": {
            "name": "_build_row",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "List[str]",
                    "list[str]",
                    "list",
                    "list[]",
                    "bool",
                    "List[T]",
                    "list[T]",
                    "Set[str]",
                    "set[str]"
                ],
                "parent": [
                    "str",
                    "bool",
                    "dict[str, dict[, ]]",
                    "Union[int, str]",
                    "Dict[str, Dict]"
                ],
                "align": [
                    "list[str]",
                    "int",
                    "bool",
                    "List[str]"
                ],
                "border": [
                    "List[str]",
                    "list[str]",
                    "list",
                    "list[]",
                    "bool",
                    "List[T]",
                    "list[T]",
                    "Set[str]",
                    "set[str]"
                ]
            }
        },
        "BootstrapedTableProcessor._split_row": {
            "name": "_split_row",
            "location": 82,
            "return": [
                "list[str]",
                "float",
                "int",
                "list"
            ],
            "arguments": {
                "row": [
                    "str",
                    "Optional[str]",
                    "Dict[str, str]",
                    "Callable[[str], str]"
                ],
                "border": [
                    "int",
                    "str",
                    "typing.Iterable[]",
                    "Iterable",
                    "Iterator[Dict[str, Any]]",
                    "dict"
                ]
            }
        },
        "BootstrapedTableExtension.extendMarkdown": {
            "name": "extendMarkdown",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "md": [
                    "markdown.core.Markdown"
                ]
            }
        }
    },
    "sipa-master/sipa/utils/git_utils.py": {
        "init_repo": {
            "name": "init_repo",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "repo_dir": [
                    "str"
                ],
                "repo_url": [
                    "str"
                ]
            }
        },
        "update_repo": {
            "name": "update_repo",
            "location": 45,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "repo_dir": [
                    "str",
                    "deque[str]",
                    "typing.Deque"
                ]
            }
        },
        "get_repo_active_branch": {
            "name": "get_repo_active_branch",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "repo_dir": [
                    "str"
                ]
            }
        },
        "get_latest_commits": {
            "name": "get_latest_commits",
            "location": 79,
            "return": [
                "List[dict]"
            ],
            "arguments": {
                "repo_dir": [
                    "str"
                ],
                "commit_count": [
                    "int"
                ]
            }
        }
    },
    "sipa-master/sipa/utils/graph_utils.py": {
        "rgb_string": {
            "name": "rgb_string",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "r": [
                    "int",
                    "List[int]"
                ],
                "g": [
                    "int",
                    "List[int]"
                ],
                "b": [
                    "int",
                    "List[int]"
                ]
            }
        },
        "hsl": {
            "name": "hsl",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "h": [
                    "int",
                    "str"
                ],
                "s": [
                    "int",
                    "str"
                ],
                "l": [
                    "int",
                    "str"
                ]
            }
        },
        "default_chart": {
            "name": "default_chart",
            "location": 33,
            "return": [
                "str",
                "Type[Exception]",
                "Dict[str, Any]",
                "Callable[..., T]",
                "cmk.utils.type_defs.CheckPluginName.Str"
            ],
            "arguments": {
                "chart_type": [
                    "float",
                    "int",
                    "List[cmk.utils.type_defs.ParsedSectionName]",
                    "list[S]"
                ],
                "title": [
                    "float",
                    "int",
                    "List[cmk.utils.type_defs.ParsedSectionName]",
                    "list[S]"
                ],
                "inline": [
                    "bool",
                    "float",
                    "List[cmk.utils.type_defs.ParsedSectionName]",
                    "int"
                ]
            }
        },
        "generate_traffic_chart": {
            "name": "generate_traffic_chart",
            "location": 49,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "traffic_data": [
                    "List[dict]"
                ],
                "inline": [
                    "bool"
                ]
            }
        },
        "provide_render_function": {
            "name": "provide_render_function",
            "location": 94,
            "return": [
                "Callable"
            ],
            "arguments": {
                "generator": [
                    "str",
                    "bool",
                    "Iterable",
                    "typing.Iterable[]"
                ]
            }
        },
        "provide_render_function.renderer": {
            "name": "renderer",
            "location": 95,
            "return": [
                "str",
                "raiden.utils.signer.Signer",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "data": [
                    "List[int]",
                    "dict",
                    "List['PlotInfo']",
                    "int",
                    "bytes"
                ]
            }
        }
    },
    "sipa-master/sipa/utils/link_patch.py": {
        "absolute_path_replacer": {
            "name": "absolute_path_replacer",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "match": [
                    "str",
                    "int",
                    "List[str]",
                    "float"
                ]
            }
        },
        "makeExtension": {
            "name": "makeExtension",
            "location": 56,
            "return": [
                "AbsoluteLinkExtension"
            ],
            "arguments": {}
        },
        "LinkPostprocessor.run": {
            "name": "run",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "AbsoluteLinkExtension.extendMarkdown": {
            "name": "extendMarkdown",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "md": [
                    "markdown.core.Markdown"
                ]
            }
        }
    },
    "sipa-master/sipa/utils/__init__.py": {
        "timetag_today": {
            "name": "timetag_today",
            "location": 26,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "get_bustimes": {
            "name": "get_bustimes",
            "location": 31,
            "return": [
                "Optional[Generator[(Dict[(str, Any)], Any, None)]]"
            ],
            "arguments": {
                "stopname": [],
                "count": [
                    "int"
                ]
            }
        },
        "support_hotline_available": {
            "name": "support_hotline_available",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "password_changeable": {
            "name": "password_changeable",
            "location": 85,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "user": []
            }
        },
        "get_user_name": {
            "name": "get_user_name",
            "location": 111,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "user": []
            }
        },
        "url_self": {
            "name": "url_self",
            "location": 121,
            "return": [],
            "arguments": {}
        },
        "redirect_url": {
            "name": "redirect_url",
            "location": 142,
            "return": [],
            "arguments": {
                "default": [
                    "typing.Text"
                ]
            }
        },
        "argstr": {
            "name": "argstr",
            "location": 146,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "dict_diff": {
            "name": "dict_diff",
            "location": 155,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "d1": [],
                "d2": []
            }
        },
        "compare_all_attributes": {
            "name": "compare_all_attributes",
            "location": 162,
            "return": [
                "bool"
            ],
            "arguments": {
                "one": [
                    "object"
                ],
                "other": [
                    "object"
                ],
                "attr_list": [
                    "Iterable[str]"
                ]
            }
        },
        "xor_hashes": {
            "name": "xor_hashes",
            "location": 179,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "parse_date": {
            "name": "parse_date",
            "location": 189,
            "return": [
                "Optional[_datetime.date]"
            ],
            "arguments": {
                "date": [
                    "Optional[str]"
                ]
            }
        },
        "dataclass_from_dict": {
            "name": "dataclass_from_dict",
            "location": 193,
            "return": [],
            "arguments": {
                "cls": [],
                "raw": [
                    "dict"
                ]
            }
        },
        "password_changeable.feature_decorator": {
            "name": "feature_decorator",
            "location": 96,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "password_changeable.feature_decorator.decorated_view": {
            "name": "decorated_view",
            "location": 98,
            "return": [],
            "arguments": {}
        },
        "password_changeable.feature_decorator.decorated_view.not_supported": {
            "name": "not_supported",
            "location": 102,
            "return": [],
            "arguments": {}
        }
    },
    "sipa-master/tests/base.py": {
        "dynamic_frontend_base": {
            "name": "dynamic_frontend_base",
            "location": 100,
            "return": [
                "type"
            ],
            "arguments": {
                "backend": [
                    "str",
                    "bool",
                    "Mapping",
                    "typing.Mapping"
                ]
            }
        },
        "disable_logs": {
            "name": "disable_logs",
            "location": 180,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "loglevel": [
                    "str",
                    "logging.Logger",
                    "float",
                    "Optional[float]",
                    "None"
                ]
            }
        },
        "AppInitialized.app_config": {
            "name": "app_config",
            "location": 26,
            "return": [
                "dict[, ]",
                "str",
                "int",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppInitialized.create_app": {
            "name": "create_app",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AppInitialized.temp_set_attribute": {
            "name": "temp_set_attribute",
            "location": 59,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "attr_name": [
                    "str",
                    "List[int]",
                    "list[int]"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "AppInitialized.temp_short_log": {
            "name": "temp_short_log",
            "location": 76,
            "return": [
                "contextlib._GeneratorContextManager"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppInitialized.assert_something_flashed": {
            "name": "assert_something_flashed",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes"
                ],
                "level": [
                    "typing.Text",
                    "int",
                    "bytes",
                    "list",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "AppInitialized.assert_nothing_flashed": {
            "name": "assert_nothing_flashed",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "SampleFrontendTestBase.login": {
            "name": "login",
            "location": 120,
            "return": [
                "dict",
                "List[Dict[str, Any]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SampleFrontendTestBase.current_user": {
            "name": "current_user",
            "location": 130,
            "return": [
                "bool",
                "models.User"
            ],
            "arguments": {
                "self": []
            }
        },
        "SampleFrontendTestBase.logout": {
            "name": "logout",
            "location": 133,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormTemplateTestMixin.submit_form": {
            "name": "submit_form",
            "location": 155,
            "return": [
                "flask.Response",
                "List[str]",
                "Optional[Tuple]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "dict",
                    "str",
                    "Iterable[str]",
                    "Union[str, bytes]"
                ]
            }
        },
        "FormTemplateTestMixin.test_endpoint_reachable": {
            "name": "test_endpoint_reachable",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormTemplateTestMixin.test_empty_request_flashes": {
            "name": "test_empty_request_flashes",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormTemplateTestMixin.test_invalid_data_flashes": {
            "name": "test_invalid_data_flashes",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormTemplateTestMixin.test_valid_data_passes": {
            "name": "test_valid_data_passes",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "dynamic_frontend_base.cls.app_config": {
            "name": "app_config",
            "location": 108,
            "return": [
                "dict[, ]",
                "dict",
                "Optional[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sipa-master/tests/test_basic.py": {
        "TestSipaFrontendCase.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSipaFrontendCase.tearDown": {
            "name": "tearDown",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSipaFrontendCase.login": {
            "name": "login",
            "location": 14,
            "return": [
                "flask.Response"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str",
                    "Union[str, bytes]",
                    "bytes"
                ],
                "password": [
                    "str",
                    "Union[str, bytes]",
                    "bytes"
                ]
            }
        },
        "TestSipaFrontendCase.logout": {
            "name": "logout",
            "location": 20,
            "return": [
                "float",
                "Optional[str]",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSipaFrontendCase.test_root_redirect": {
            "name": "test_root_redirect",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSipaFrontendCase.test_restricted_area": {
            "name": "test_restricted_area",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSipaFrontendCase.test_unrestricted_area": {
            "name": "test_unrestricted_area",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sipa-master/tests/test_forms.py": {
        "PasswordComplexityValidatorTest.validate": {
            "name": "validate",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "validator": [
                    "str"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "PasswordComplexityValidatorTest.test_min_length": {
            "name": "test_min_length",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PasswordComplexityValidatorTest.test_min_classes": {
            "name": "test_min_classes",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sipa-master/tests/test_git.py": {
        "set_author_config_locally": {
            "name": "set_author_config_locally",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "None"
                ]
            }
        },
        "init_sample_git_repo": {
            "name": "init_sample_git_repo",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [],
                "name": []
            }
        },
        "init_cloned_git_repo": {
            "name": "init_cloned_git_repo",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [],
                "path_to_bare": []
            }
        },
        "SampleBareRepoInitializedBase.setUp": {
            "name": "setUp",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SampleBareRepoInitializedBase.tearDown": {
            "name": "tearDown",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSampleGitRepository.test_repo_path_correctly_joined": {
            "name": "test_repo_path_correctly_joined",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSampleGitRepository.test_repo_path_exists": {
            "name": "test_repo_path_exists",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSampleGitRepository.test_cloned_git_repo_correct_files": {
            "name": "test_cloned_git_repo_correct_files",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSampleGitRepository.test_repo_is_bare": {
            "name": "test_repo_is_bare",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSampleGitRepository.test_repo_only_master": {
            "name": "test_repo_only_master",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CorrectlyClonedTesterMixin.test_cloned_repo_not_bare": {
            "name": "test_cloned_repo_not_bare",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CorrectlyClonedTesterMixin.test_cloned_repo_one_branch": {
            "name": "test_cloned_repo_one_branch",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CorrectlyClonedTesterMixin.test_cloned_repo_correct_refs": {
            "name": "test_cloned_repo_correct_refs",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExplicitlyClonedSampleRepoTestBase.setUp": {
            "name": "setUp",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InitRepoTestBase.setUp": {
            "name": "setUp",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpdateRepo.setUp": {
            "name": "setUp",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpdateRepo.update_repo": {
            "name": "update_repo",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpdateRepo.test_commitsha_different_before_update": {
            "name": "test_commitsha_different_before_update",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpdateRepo.test_same_commit_after_update": {
            "name": "test_same_commit_after_update",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sipa-master/tests/test_login_manager.py": {
        "AuthenticatedUser.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uid": [
                    "int",
                    "\"ks.Series\"",
                    "dict[, ]",
                    "bytes",
                    "dict",
                    "bool"
                ]
            }
        },
        "AuthenticatedUser.get_id": {
            "name": "get_id",
            "location": 13,
            "return": [
                "str",
                "Callable[[], bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SipaLoginManagerTest.create_app": {
            "name": "create_app",
            "location": 21,
            "return": [
                "flask.Flask",
                "Flask"
            ],
            "arguments": {
                "self": []
            }
        },
        "SipaLoginManagerTest.login": {
            "name": "login",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SipaLoginManagerAuthenticationTest.test_authentication_works": {
            "name": "test_authentication_works",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SipaLoginManagerAuthenticationTest.test_decorator_called_without_parameter": {
            "name": "test_decorator_called_without_parameter",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppLevelUserLoadingDisabledTest.create_app": {
            "name": "create_app",
            "location": 64,
            "return": [
                "flask.Flask",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppLevelUserLoadingDisabledTest.test_login_manager": {
            "name": "test_login_manager",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlueprintLevelUserLoadingDisabledTest.create_app": {
            "name": "create_app",
            "location": 84,
            "return": [
                "flask.Flask"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlueprintLevelUserLoadingDisabledTest.test_documents_no_user": {
            "name": "test_documents_no_user",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlueprintLevelUserLoadingDisabledTest.test_images_no_user": {
            "name": "test_images_no_user",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SipaLoginManagerTest.create_app.login": {
            "name": "login",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "SipaLoginManagerTest.create_app.restricted": {
            "name": "restricted",
            "location": 34,
            "return": [
                "typing.Text",
                "bool",
                "str",
                "float",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "SipaLoginManagerTest.create_app.load_user": {
            "name": "load_user",
            "location": 38,
            "return": [
                "AuthenticatedUser",
                "str",
                "Optional[str]",
                "int",
                "bytes"
            ],
            "arguments": {
                "uid": [
                    "int",
                    "Optional[int]",
                    "bool",
                    "Union[None, int]"
                ]
            }
        },
        "AppLevelUserLoadingDisabledTest.create_app.show_images": {
            "name": "show_images",
            "location": 69,
            "return": [
                "typing.Text",
                "int",
                "tuple"
            ],
            "arguments": {}
        },
        "BlueprintLevelUserLoadingDisabledTest.create_app.show_documents": {
            "name": "show_documents",
            "location": 90,
            "return": [
                "typing.Text",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "BlueprintLevelUserLoadingDisabledTest.create_app.show_images_as_well": {
            "name": "show_images_as_well",
            "location": 95,
            "return": [
                "typing.Text",
                "int",
                "tuple"
            ],
            "arguments": {}
        },
        "SipaLoginManagerAuthenticationTest.test_decorator_called_without_parameter.view": {
            "name": "view",
            "location": 59,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "sipa-master/tests/test_mail.py": {
        "MailSendingTestBase.setUp": {
            "name": "setUp",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MailSendingTestBase._call_mail_function": {
            "name": "_call_mail_function",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MailSendingTestBase.args": {
            "name": "args",
            "location": 43,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MailSendingTestBase.assert_arg_in_call_arg": {
            "name": "assert_arg_in_call_arg",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arg": [],
                "call_arg": []
            }
        },
        "MailSendingTestBase.assert_arg_equals_call_arg": {
            "name": "assert_arg_equals_call_arg",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arg": [],
                "call_arg": []
            }
        },
        "ComposeSubjectTestCase.test_tag_and_category": {
            "name": "test_tag_and_category",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComposeSubjectTestCase.test_tag_missing": {
            "name": "test_tag_missing",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComposeSubjectTestCase.test_category_missing": {
            "name": "test_category_missing",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComposeSubjectTestCase.test_both_missing": {
            "name": "test_both_missing",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComposeBodyTestCase.setUp": {
            "name": "setUp",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComposeBodyTestCase.test_without_dict_is_identity": {
            "name": "test_without_dict_is_identity",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComposeBodyTestCase.test_correct_header_with_full_dict": {
            "name": "test_correct_header_with_full_dict",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SMTPTestBase.setUp": {
            "name": "setUp",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SMTPTestBase._get_app_config": {
            "name": "_get_app_config",
            "location": 96,
            "return": [
                "Dict[(str, Optional[Union[(int, str)]])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SMTPTestBase._patch_smtp": {
            "name": "_patch_smtp",
            "location": 109,
            "return": [
                "unittest.mock._patch[unittest.mock.MagicMock]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendMailTestBase.setUp": {
            "name": "setUp",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendMailCommonTests.test_wrap_message_called": {
            "name": "test_wrap_message_called",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendMailCommonTests.test_smtp_close_called": {
            "name": "test_smtp_close_called",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendMailCommonTests.test_sendmail_envelope_sender": {
            "name": "test_sendmail_envelope_sender",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendMailCommonTests.test_sendmail_from_header": {
            "name": "test_sendmail_from_header",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendMailCommonTests.test_sendmail_otrs_header": {
            "name": "test_sendmail_otrs_header",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendMailCommonTests.test_sendmail_reply_to": {
            "name": "test_sendmail_reply_to",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendMailCommonTests.test_sendmail_recipient_passed": {
            "name": "test_sendmail_recipient_passed",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendMailCommonTests.test_sendmail_subject_passed": {
            "name": "test_sendmail_subject_passed",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendMailCommonTests.test_returned_true": {
            "name": "test_returned_true",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendMailCommonTests.test_info_logged": {
            "name": "test_info_logged",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendMailNoAuthTestCase.test_smtp_login_not_called": {
            "name": "test_smtp_login_not_called",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendMailAuthTestCase.test_smtp_login_called": {
            "name": "test_smtp_login_called",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendMailAuthTestCase._get_app_config": {
            "name": "_get_app_config",
            "location": 209,
            "return": [
                "Dict[(str, Optional[Union[(int, str)]])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendMailTestSslCase._get_app_config": {
            "name": "_get_app_config",
            "location": 218,
            "return": [
                "Dict[(str, Optional[Union[(int, str)]])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendMailTestStarttlsCase.test_smtp_starttls_called": {
            "name": "test_smtp_starttls_called",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendMailTestStarttlsCase._get_app_config": {
            "name": "_get_app_config",
            "location": 230,
            "return": [
                "Dict[(str, Optional[Union[(int, str)]])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendMailFailingTestCase.setUp": {
            "name": "setUp",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendMailFailingTestCase.test_send_mail_logs_on_success": {
            "name": "test_send_mail_logs_on_success",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendMailFailingTestCase.test_failing_returns_false": {
            "name": "test_failing_returns_false",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComplexMailContentTestCase.args": {
            "name": "args",
            "location": 268,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, typing.Text]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComplexMailContentTestCase.test_success_passed": {
            "name": "test_success_passed",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComplexMailContentTestCase.test_keyword_args_used": {
            "name": "test_keyword_args_used",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComplexMailContentTestCase.test_subject_complete_passed": {
            "name": "test_subject_complete_passed",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComplexMailContentTestCase.test_message_complete_passed": {
            "name": "test_message_complete_passed",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComplexMailArgumentsTestCase.test_fails_on_missing_argument": {
            "name": "test_fails_on_missing_argument",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OfficialContactMailTestCase.args": {
            "name": "args",
            "location": 317,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OfficialContactMailTestCase.test_success_passed": {
            "name": "test_success_passed",
            "location": 325,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OfficialContactMailTestCase.test_sender_mail_passed": {
            "name": "test_sender_mail_passed",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OfficialContactMailTestCase.test_subject_complete": {
            "name": "test_subject_complete",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OfficialContactMailTestCase.test_message_body_complete": {
            "name": "test_message_body_complete",
            "location": 334,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContactMailTestCase.setUp": {
            "name": "setUp",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContactMailTestCase.args": {
            "name": "args",
            "location": 352,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContactMailTestCase._call_mail_function": {
            "name": "_call_mail_function",
            "location": 361,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContactMailTestCase.test_success_passed": {
            "name": "test_success_passed",
            "location": 366,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContactMailTestCase.test_message_complete": {
            "name": "test_message_complete",
            "location": 369,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContactMailTestCase.test_subject_complete": {
            "name": "test_subject_complete",
            "location": 374,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContactMailTestCase.test_sender_mail_passed": {
            "name": "test_sender_mail_passed",
            "location": 377,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContactMailTestCase.test_recipient_passed": {
            "name": "test_recipient_passed",
            "location": 380,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UsersuiteContactMailTestCase.setUp": {
            "name": "setUp",
            "location": 386,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UsersuiteContactMailTestCase.args": {
            "name": "args",
            "location": 401,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UsersuiteContactMailTestCase.test_success_passed": {
            "name": "test_success_passed",
            "location": 409,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UsersuiteContactMailTestCase.test_sender_composed_correctly": {
            "name": "test_sender_composed_correctly",
            "location": 412,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UsersuiteContactMailTestCase.test_recipient_passed": {
            "name": "test_recipient_passed",
            "location": 419,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UsersuiteContactMailTestCase.test_subject_completeg": {
            "name": "test_subject_completeg",
            "location": 424,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UsersuiteContactMailTestCase.test_message_complete": {
            "name": "test_message_complete",
            "location": 428,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendMailTestBase.setUp.dont_wrap_message": {
            "name": "dont_wrap_message",
            "location": 120,
            "return": [],
            "arguments": {
                "msg": []
            }
        },
        "SendMailFailingTestCase.setUp.bad_sendmail": {
            "name": "bad_sendmail",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sipa-master/tests/test_units.py": {
        "TrafficFormatStringTestCase.test_contains_less_or_equal_two_format_fields": {
            "name": "test_contains_less_or_equal_two_format_fields",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrafficFormatStringTestCase.test_contains_more_than_one_format_field": {
            "name": "test_contains_more_than_one_format_field",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThingsWithBasesTestCase.test_max_divisions": {
            "name": "test_max_divisions",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThingsWithBasesTestCase.test_number_reduced_correctly": {
            "name": "test_number_reduced_correctly",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThingsWithBasesTestCase.test_unit_in_formatted_string": {
            "name": "test_unit_in_formatted_string",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThingsWithBasesTestCase.test_dynamic_unit_contains_unit": {
            "name": "test_dynamic_unit_contains_unit",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MoneyStylePositiveTestCase.setUp": {
            "name": "setUp",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MoneyStylePositiveTestCase.test_positive_style_returned": {
            "name": "test_positive_style_returned",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MoneyStyleNegativeTestCase.setUp": {
            "name": "setUp",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MoneyStyleNegativeTestCase.test_positive_style_returned": {
            "name": "test_positive_style_returned",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MoneyDecoratorTestCase.dummy_func": {
            "name": "dummy_func",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "MoneyDecoratorTestCase.prepare_dict": {
            "name": "prepare_dict",
            "location": 99,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "d": []
            }
        },
        "MoneyDecoratorTestCase.test_positive_float": {
            "name": "test_positive_float",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MoneyDecoratorTestCase.test_negative_float": {
            "name": "test_negative_float",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MoneyDecoratorTestCase.test_zero_is_positive": {
            "name": "test_zero_is_positive",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MoneyDecoratorTestCase.test_whole_number_has_cent_digits": {
            "name": "test_whole_number_has_cent_digits",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MoneyTestCase.test_positive_float": {
            "name": "test_positive_float",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MoneyTestCase.test_negative_float": {
            "name": "test_negative_float",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MoneyTestCase.test_zero_is_positive": {
            "name": "test_zero_is_positive",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sipa-master/tests/test_unserialize.py": {
        "UnserializerTest.test_basic_unserializer": {
            "name": "test_basic_unserializer",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnserializerTest.test_slash_stripping": {
            "name": "test_slash_stripping",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnserializerTest.test_type_conversion": {
            "name": "test_type_conversion",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnserializerTest.test_list_can_convert": {
            "name": "test_list_can_convert",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnserializerTest.test_optional_can_convert": {
            "name": "test_optional_can_convert",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnserializerTest.test_complex_unserializer": {
            "name": "test_complex_unserializer",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmptyArgumentsTest.test_no_argument_throws": {
            "name": "test_no_argument_throws",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmptyArgumentsTest.test_argument_none_throws": {
            "name": "test_argument_none_throws",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NestedUnserializationTest.setUp": {
            "name": "setUp",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NestedUnserializationTest.test": {
            "name": "test",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sipa-master/tests/test_utils.py": {
        "TimetagValidator.test_today_timetag": {
            "name": "test_today_timetag",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDictDiff.test_diffs_same_dicts": {
            "name": "test_diffs_same_dicts",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDictDiff.test_diffs_one_different": {
            "name": "test_diffs_one_different",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sipa-master/tests/__init__.py": {},
    "sipa-master/tests/blueprints/test_bp_features.py": {
        "BpFeaturesTestCase.test_bustimes_reachable": {
            "name": "test_bustimes_reachable",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sipa-master/tests/blueprints/test_bp_generic.py": {
        "TestErrorhandlersCase.create_app": {
            "name": "create_app",
            "location": 12,
            "return": [
                "str",
                "bool",
                "flask.Flask",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestErrorhandlersCase.test_error_handler_redirection": {
            "name": "test_error_handler_redirection",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenericEndpointsReachableTestCase.test_index_redirects_correctly": {
            "name": "test_index_redirects_correctly",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenericEndpointsReachableTestCase.test_index_reachable": {
            "name": "test_index_reachable",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenericEndpointsReachableTestCase.test_usertraffic_permitted": {
            "name": "test_usertraffic_permitted",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenericEndpointsReachableTestCase.test_api_reachable": {
            "name": "test_api_reachable",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenericEndpointsReachableTestCase.test_version_reachable": {
            "name": "test_version_reachable",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoginTestCase.setUp": {
            "name": "setUp",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContactFormTestBase.setUp": {
            "name": "setUp",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContactFormTestBase.tearDown": {
            "name": "tearDown",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnonymousContactTestCase.setUp": {
            "name": "setUp",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OfficialContactTestCase.setUp": {
            "name": "setUp",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InexistentUrlTest.test_nonexistent_url_returns_404": {
            "name": "test_nonexistent_url_returns_404",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestErrorhandlersCase.create_app.failing": {
            "name": "failing",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "code": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "sipa-master/tests/blueprints/test_hooks.py": {
        "GitHookTestBase.assert_hook_status": {
            "name": "assert_hook_status",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [],
                "token": [
                    "None"
                ]
            }
        },
        "GitHookNoToken.test_git_hook_wrong_method": {
            "name": "test_git_hook_wrong_method",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitHookNoToken.test_git_hook_not_existent": {
            "name": "test_git_hook_not_existent",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitHookExistent.app_config": {
            "name": "app_config",
            "location": 42,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitHookExistent.test_no_token_auth_required": {
            "name": "test_no_token_auth_required",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitHookExistent.test_empty_token_auth_required": {
            "name": "test_empty_token_auth_required",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitHookExistent.test_wrong_token_permission_denied": {
            "name": "test_wrong_token_permission_denied",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitHookExistent.test_correct_token_working": {
            "name": "test_correct_token_working",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sipa-master/tests/blueprints/test_usersuite.py": {
        "SampleAuthenticationTestCase.test_login_successful": {
            "name": "test_login_successful",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SampleAuthenticationTestCase.test_logout_successful": {
            "name": "test_logout_successful",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SampleAuthenticatedTestBase.setUp": {
            "name": "setUp",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SampleAuthenticatedTestBase.tearDown": {
            "name": "tearDown",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UsersuiteReachableTestCase.test_usersuite_200": {
            "name": "test_usersuite_200",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UsersuiteReachableTestCase.test_contact_200": {
            "name": "test_contact_200",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UsersuiteReachableTestCase.test_mac_edit_200": {
            "name": "test_mac_edit_200",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UsersuiteReachableTestCase.activate_network_access_200": {
            "name": "activate_network_access_200",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UsersuiteReachableTestCase.test_mail_edit_200": {
            "name": "test_mail_edit_200",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UsersuiteReachableTestCase.test_usersuite_contains_urls": {
            "name": "test_usersuite_contains_urls",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sipa-master/tests/blueprints/__init__.py": {},
    "sipa-master/tests/integration/__init__.py": {},
    "sipa-master/tests/model/test_finance.py": {
        "EverythingMissingTestCase.test_cannot_inherit_base": {
            "name": "test_cannot_inherit_base",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoNeedToPayTestCase.test_instanciation_works": {
            "name": "test_instanciation_works",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoNeedToPayTestCase.test_has_correct_balance": {
            "name": "test_has_correct_balance",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StaticBalanceTestCase.setUp": {
            "name": "setUp",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StaticBalanceTestCase.test_has_correct_balance": {
            "name": "test_has_correct_balance",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StaticBalanceTestCase.test_balance_not_editable": {
            "name": "test_balance_not_editable",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StaticBalanceTestCase.test_balance_not_deletable": {
            "name": "test_balance_not_deletable",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sipa-master/tests/model/test_misc.py": {
        "CompareAllAttributesTestCase.test_true_comparisons": {
            "name": "test_true_comparisons",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompareAllAttributesTestCase.test_false_comparisons": {
            "name": "test_false_comparisons",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompareAllAttributesTestCase.test_attributes_missing_false": {
            "name": "test_attributes_missing_false",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "XorHashesTestCase.test_xor_hashes_correct": {
            "name": "test_xor_hashes_correct",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sipa-master/tests/model/test_model.py": {
        "TestBackendInitializationCase.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBackendInitializationCase.test_extension_registrated": {
            "name": "test_extension_registrated",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBackendInitializationCase.test_datasource_names_unique": {
            "name": "test_datasource_names_unique",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBackendInitializationCase.test_dormitory_names_unique": {
            "name": "test_dormitory_names_unique",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBackendInitializationCase.test_all_dormitories_names_unique": {
            "name": "test_all_dormitories_names_unique",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBackendInitializationCase.test_all_dormitories_greater": {
            "name": "test_all_dormitories_greater",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBackendInitializationCase.assert_dormitories_namelist": {
            "name": "assert_dormitories_namelist",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "list": [],
                "base": []
            }
        },
        "TestBackendInitializationCase.test_all_dormitories_list": {
            "name": "test_all_dormitories_list",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBackendInitializationCase.test_supported_dormitories_list": {
            "name": "test_supported_dormitories_list",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBackendInitializationCase.test_get_dormitory": {
            "name": "test_get_dormitory",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBackendInitializationCase.test_dormitory_from_ip": {
            "name": "test_dormitory_from_ip",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasourceTestCase.setUp": {
            "name": "setUp",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasourceTestCase.test_init_context_gets_called_correctly": {
            "name": "test_init_context_gets_called_correctly",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasourceTestCase.test_init_context_reads_mail": {
            "name": "test_init_context_reads_mail",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasourceTestCase.test_init_context_warns_on_unknown_keys": {
            "name": "test_init_context_warns_on_unknown_keys",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sipa-master/tests/model/test_sample.py": {
        "TestSampleUserCase.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSampleUserCase.test_uid_not_accepted": {
            "name": "test_uid_not_accepted",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSampleUserCase.test_uid_correct": {
            "name": "test_uid_correct",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSampleUserCase.test_row_getters": {
            "name": "test_row_getters",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSampleUserCase.test_row_setters": {
            "name": "test_row_setters",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSampleUserCase.test_row_deleters": {
            "name": "test_row_deleters",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSampleUserCase.test_correct_password": {
            "name": "test_correct_password",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSampleUserCase.test_traffic_history": {
            "name": "test_traffic_history",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sipa-master/tests/model/test_user.py": {
        "TestBaseUserCase.test_BaseUser_is_abstract": {
            "name": "test_BaseUser_is_abstract",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseUserCase.test_BaseUser_has_flask_login_properties": {
            "name": "test_BaseUser_has_flask_login_properties",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DegenerateUserTestCase.setUp": {
            "name": "setUp",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DegenerateUserTestCase.test_uid_passed": {
            "name": "test_uid_passed",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DegenerateUserTestCase.test_get_id_implemented": {
            "name": "test_get_id_implemented",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DegenerateUserTestCase.test_equality_when_same_uid": {
            "name": "test_equality_when_same_uid",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DegenerateUserTestCase.test_inequality_when_other_uid": {
            "name": "test_inequality_when_other_uid",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DegenerateUserTestCase.test_finance_balance_unsupported": {
            "name": "test_finance_balance_unsupported",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserWithFinancesTestCase.setUp": {
            "name": "setUp",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserWithFinancesTestCase.test_balance_row_supported": {
            "name": "test_balance_row_supported",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserWithFinancesTestCase.test_balance_correct_name": {
            "name": "test_balance_correct_name",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sipa-master/tests/model/__init__.py": {}
}
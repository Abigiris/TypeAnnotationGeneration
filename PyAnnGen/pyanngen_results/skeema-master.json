{
    "skeema-master/setup.py": {},
    "skeema-master/setup/common.py": {
        "get_long_description": {
            "name": "get_long_description",
            "location": 6,
            "return": [
                "str"
            ],
            "arguments": {
                "readme_loc": [
                    "str",
                    "int",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ]
            }
        }
    },
    "skeema-master/setup/__init__.py": {},
    "skeema-master/skeema/simple_types.py": {
        "ModelMeta.__new__": {
            "name": "__new__",
            "location": 15,
            "return": [
                "str",
                "list",
                "Type"
            ],
            "arguments": {
                "mcs": [
                    "Type[ModelMeta]"
                ],
                "class_name": [
                    "str"
                ],
                "class_parents": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "class_attrs": [
                    "str",
                    "Union[int, float]",
                    "nevergrad.parametrization.parameter.Parameter",
                    "Union[int, str]",
                    "Set[str]"
                ]
            }
        },
        "ModelMeta.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "ModelMeta"
                ],
                "class_name": [
                    "str",
                    "bool",
                    "list[str]",
                    "None"
                ],
                "class_parents": [
                    "str",
                    "bool",
                    "typing.Type"
                ],
                "class_attrs": [
                    "str"
                ]
            }
        },
        "ModelMeta.annotations": {
            "name": "annotations",
            "location": 48,
            "return": [
                "Dict[str, Any]",
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "float",
                    "Type",
                    "type"
                ]
            }
        },
        "ModelMeta.annotation": {
            "name": "annotation",
            "location": 51,
            "return": [
                "str",
                "Sequence[str]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "ModelMeta"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "ModelMeta.signature": {
            "name": "signature",
            "location": 55,
            "return": [
                "str",
                "Optional[str]",
                "dict",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "util.XYZ"
                ]
            }
        },
        "ModelMeta.__signature__": {
            "name": "__signature__",
            "location": 59,
            "return": [
                "Signature",
                "int",
                "Set[str]",
                "str",
                "set"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Dict[str, Iterable[Any]]",
                    "dict[str, typing.Iterable[typing.Any]]",
                    "Optional[str]",
                    "dict",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "ModelMeta.build_attrs": {
            "name": "build_attrs",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "class_attrs": [
                    "str",
                    "list[str]",
                    "List[str]",
                    "int",
                    "float"
                ]
            }
        },
        "Array.__init__": {
            "name": "__init__",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "list"
                ]
            }
        },
        "Array.__eq__": {
            "name": "__eq__",
            "location": 147,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list[str]",
                    "List[str]",
                    "tuple[typing.Union[int,int]]",
                    "T",
                    "Tuple[int, int]"
                ]
            }
        },
        "Array.__iter__": {
            "name": "__iter__",
            "location": 150,
            "return": [
                "listiterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "Boolean.type_check": {
            "name": "type_check",
            "location": 156,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "list",
                    "list[]",
                    "List[str]",
                    "list[str]",
                    "Optional[Callable]",
                    "typing.Callable[, ]",
                    "type",
                    "None",
                    "Optional[Dict]",
                    "typing.Type",
                    "dict[, ]"
                ],
                "value": [
                    "typing.Type",
                    "Type[Any]",
                    "str",
                    "Type[T]",
                    "Union[str, 'Type']"
                ]
            }
        },
        "Boolean.__init__": {
            "name": "__init__",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool"
                ]
            }
        },
        "Boolean.__bool__": {
            "name": "__bool__",
            "location": 168,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Boolean.__eq__": {
            "name": "__eq__",
            "location": 171,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Boolean"
                ]
            }
        },
        "Integer.type_check": {
            "name": "type_check",
            "location": 177,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "bytes",
                    "Optional[Any]",
                    "typing.Any",
                    "None",
                    "bool"
                ],
                "value": [
                    "typing.Type",
                    "Type[Any]",
                    "str",
                    "Type[T]",
                    "Union[str, 'Type']"
                ]
            }
        },
        "Integer.__init__": {
            "name": "__init__",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "Integer.__eq__": {
            "name": "__eq__",
            "location": 189,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list[str]",
                    "List[str]",
                    "tuple[typing.Union[int,int]]",
                    "T",
                    "Tuple[int, int]"
                ]
            }
        },
        "Number.type_check": {
            "name": "type_check",
            "location": 199,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "tuple[]",
                    "T_co",
                    "float",
                    "bool",
                    "tuple",
                    "str",
                    "list[str]",
                    "Union[List[str], List[Any]]"
                ],
                "value": [
                    "typing.Type",
                    "Type[Any]",
                    "str",
                    "Type[T]",
                    "Union[str, 'Type']"
                ]
            }
        },
        "Number.__init__": {
            "name": "__init__",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "Number.__eq__": {
            "name": "__eq__",
            "location": 211,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list[str]",
                    "List[str]",
                    "tuple[typing.Union[int,int]]",
                    "T",
                    "Tuple[int, int]"
                ]
            }
        },
        "Object.type_check": {
            "name": "type_check",
            "location": 217,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "bool"
                ],
                "_value": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "Object.__init__": {
            "name": "__init__",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "String.type_check": {
            "name": "type_check",
            "location": 226,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "value": [
                    "typing.Type",
                    "Type[Any]",
                    "str",
                    "Type[T]",
                    "Union[str, 'Type']"
                ]
            }
        },
        "String.__init__": {
            "name": "__init__",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "String.__eq__": {
            "name": "__eq__",
            "location": 238,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list[str]",
                    "List[str]",
                    "tuple[typing.Union[int,int]]",
                    "T",
                    "Tuple[int, int]"
                ]
            }
        },
        "ModelMeta.build_attrs.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelMeta.build_attrs.get_attribute": {
            "name": "get_attribute",
            "location": 105,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "ModelMeta.build_attrs.set_attribute": {
            "name": "set_attribute",
            "location": 116,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ],
                "value": [
                    "str",
                    "bool",
                    "Union[str, int]"
                ]
            }
        }
    },
    "skeema-master/skeema/types.py": {},
    "skeema-master/skeema/util.py": {
        "to_camel_case": {
            "name": "to_camel_case",
            "location": 5,
            "return": [
                "str"
            ],
            "arguments": {
                "snake": [
                    "str",
                    "bytes"
                ]
            }
        },
        "is_annotation_pod": {
            "name": "is_annotation_pod",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {
                "annotation": [
                    "str",
                    "int"
                ]
            }
        },
        "is_annotation_array": {
            "name": "is_annotation_array",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "annotation": [
                    "str"
                ]
            }
        },
        "class_lookup": {
            "name": "class_lookup",
            "location": 28,
            "return": [
                "None",
                "str",
                "Set[str]",
                "bool",
                "Type",
                "Dict[str, Any]",
                "set"
            ],
            "arguments": {
                "module_name": [
                    "str"
                ],
                "class_name": [
                    "str"
                ]
            }
        }
    },
    "skeema-master/skeema/__init__.py": {},
    "skeema-master/skeema/core/compilable.py": {
        "Compilable.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Compilable.compiled": {
            "name": "compiled",
            "location": 34,
            "return": [
                "str",
                "Dict[str, Any]",
                "Iterable[int]",
                "Union[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Compilable._precompile": {
            "name": "_precompile",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "compilation_context": [
                    "list[str]",
                    "int",
                    "skeema.intermediate.CompilationContext",
                    "float",
                    "List[str]",
                    "dict[, ]",
                    "dict",
                    "Union[int, float]"
                ]
            }
        },
        "Compilable._compile": {
            "name": "_compile",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "compilation_context": [
                    "bool",
                    "skeema.intermediate.CompilationContext",
                    "float",
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "Compilable.compile": {
            "name": "compile",
            "location": 44,
            "return": [
                "int",
                "float",
                "CompilationContext"
            ],
            "arguments": {
                "self": [],
                "compilation_context": [
                    "skeema.intermediate.CompilationContext",
                    "None",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "list[str]"
                ]
            }
        }
    },
    "skeema-master/skeema/core/container.py": {
        "Container.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Container.add_object": {
            "name": "add_object",
            "location": 29,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "obj_id": [
                    "int",
                    "str",
                    "float"
                ],
                "obj": [
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "obj_debug_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "Container.get_object_handle": {
            "name": "get_object_handle",
            "location": 41,
            "return": [
                "Dict[str, bool]",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "obj_id": [
                    "int",
                    "float",
                    "bytes",
                    "str",
                    "list",
                    "list[]",
                    "Tuple[Literal, Literal]",
                    "tuple[typing.Union[typing.Literal,typing.Literal]]"
                ]
            }
        },
        "Container.get_object": {
            "name": "get_object",
            "location": 47,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "handle": [
                    "dict[, ]",
                    "int",
                    "dict",
                    "str",
                    "Union[Dict, str]",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Container.clear": {
            "name": "clear",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "skeema-master/skeema/core/handle.py": {
        "Handle.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "float"
                ],
                "generation": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Handle.index": {
            "name": "index",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Handle.generation": {
            "name": "generation",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Handle.__eq__": {
            "name": "__eq__",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "int"
                ]
            }
        },
        "HandleValidationException.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "handle_manager": [
                    "typing.Callable[, ]",
                    "bool",
                    "Callable",
                    "Callable[[str], None]"
                ],
                "handle": [
                    "bool",
                    "str"
                ],
                "msg": [
                    "str",
                    "None",
                    "Optional[Any]",
                    "typing.Any"
                ]
            }
        },
        "HandleInvalidException.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "handle_manager": [
                    "int",
                    "handle_manager.HandleManager",
                    "str",
                    "Optional[str]",
                    "None",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ],
                "handle": [
                    "int",
                    "handle_manager.HandleManager",
                    "str",
                    "Optional[str]",
                    "None",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ]
            }
        },
        "HandleOutOfRangeException.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "handle_manager": [
                    "str",
                    "handle_manager.HandleManager",
                    "int",
                    "typing.Callable[, ]",
                    "Callable"
                ],
                "handle": [
                    "str",
                    "handle_manager.HandleManager",
                    "int",
                    "typing.Callable[, ]",
                    "Callable"
                ]
            }
        },
        "HandleIsInactiveException.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "handle_manager": [
                    "int",
                    "handle_manager.HandleManager",
                    "str",
                    "Optional[str]",
                    "None",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ],
                "handle": [
                    "int",
                    "handle_manager.HandleManager",
                    "str",
                    "Optional[str]",
                    "None",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ]
            }
        },
        "HandleIsRetiredException.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "handle_manager": [
                    "int",
                    "handle_manager.HandleManager",
                    "str",
                    "Optional[str]",
                    "None",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ],
                "handle": [
                    "int",
                    "handle_manager.HandleManager",
                    "str",
                    "Optional[str]",
                    "None",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ],
                "entry": [
                    "int",
                    "handle_manager.HandleManager",
                    "str",
                    "Optional[str]",
                    "None",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ]
            }
        }
    },
    "skeema-master/skeema/core/handle_manager.py": {
        "HandleEntry.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HandleManager.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HandleManager.num_entries": {
            "name": "num_entries",
            "location": 35,
            "return": [
                "int",
                "str",
                "deque"
            ],
            "arguments": {
                "self": []
            }
        },
        "HandleManager.num_active_handles": {
            "name": "num_active_handles",
            "location": 39,
            "return": [
                "int",
                "Optional[Dict[str, int]]",
                "List[List[int]]",
                "bool",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HandleManager.issue_handle": {
            "name": "issue_handle",
            "location": 42,
            "return": [
                "Handle",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HandleManager.remove_handle": {
            "name": "remove_handle",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handle": [
                    "int",
                    "str",
                    "float",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "HandleManager.remove_all_handles": {
            "name": "remove_all_handles",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HandleManager.validate_handle": {
            "name": "validate_handle",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handle": [
                    "bool",
                    "bytes",
                    "int",
                    "handle.Handle"
                ]
            }
        }
    },
    "skeema-master/skeema/core/proxy_container.py": {
        "ProxyContainer.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProxyContainer.add_object": {
            "name": "add_object",
            "location": 27,
            "return": [
                "list[dict[str, typing.Any]]",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "int"
                ]
            }
        },
        "ProxyContainer.get": {
            "name": "get",
            "location": 38,
            "return": [
                "None",
                "Optional[int]",
                "Optional[str]",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "handle": [
                    "int",
                    "Optional[bool]",
                    "None",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "ProxyContainer.remove": {
            "name": "remove",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handle": [
                    "float",
                    "str",
                    "Optional[str]",
                    "None",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ]
            }
        },
        "ProxyContainer.clear": {
            "name": "clear",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "skeema-master/skeema/core/__init__.py": {},
    "skeema-master/skeema/core/dependency/dependency.py": {
        "DependencyHasNoNodeException.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dependency.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dependency.add_dependency": {
            "name": "add_dependency",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dependency": [
                    "int",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "Dependency.dependency_node": {
            "name": "dependency_node",
            "location": 26,
            "return": [
                "str",
                "int",
                "float",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dependency.on_add_to_container": {
            "name": "on_add_to_container",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handle": [
                    "str",
                    "bool",
                    "Iterator[bytes]",
                    "typing.Iterator"
                ],
                "debug_name": [
                    "str",
                    "bool",
                    "Iterator[bytes]",
                    "typing.Iterator"
                ]
            }
        }
    },
    "skeema-master/skeema/core/dependency/dependency_graph.py": {
        "CircularDependencyException.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "node_a": [
                    "dict[str, typing.Any]",
                    "str",
                    "Dict[str, Any]",
                    "typing.Match",
                    "Match[bytes]",
                    "dict[, ]",
                    "Iterable",
                    "dict"
                ],
                "node_b": [
                    "dict[str, typing.Any]",
                    "str",
                    "Dict[str, Any]",
                    "typing.Match",
                    "Match[bytes]",
                    "dict[, ]",
                    "Iterable",
                    "dict"
                ]
            }
        },
        "DependencyGraph.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root_node": [
                    "str",
                    "int",
                    "typing.Callable[, ]",
                    "Union[str, \"FLSqlCursor\"]",
                    "Callable",
                    "Callable[..., int]"
                ]
            }
        },
        "DependencyGraph.resolve_dependencies": {
            "name": "resolve_dependencies",
            "location": 23,
            "return": [
                "list[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DependencyGraph.dependency_resolve": {
            "name": "dependency_resolve",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "node": [
                    "List[str]",
                    "int",
                    "list[str]",
                    "bytearray",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "resolved": [
                    "int",
                    "Set[str]"
                ],
                "unresolved": [
                    "None"
                ]
            }
        }
    },
    "skeema-master/skeema/core/dependency/dependency_node.py": {
        "DependencyNode.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handle": [
                    "str",
                    "int",
                    "bool"
                ],
                "debug_name": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "DependencyNode.handle": {
            "name": "handle",
            "location": 19,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DependencyNode.debug_name": {
            "name": "debug_name",
            "location": 23,
            "return": [
                "str",
                "bool",
                "Callable[..., T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DependencyNode.dependency_nodes": {
            "name": "dependency_nodes",
            "location": 27,
            "return": [
                "str",
                "int",
                "float",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DependencyNode.add_dependency": {
            "name": "add_dependency",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[str]",
                    "int",
                    "list[str]"
                ]
            }
        },
        "DependencyNode.resolve_dependencies": {
            "name": "resolve_dependencies",
            "location": 35,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "skeema-master/skeema/core/dependency/__init__.py": {},
    "skeema-master/skeema/file/file.py": {
        "File.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": [
                    "str",
                    "int",
                    "bytes",
                    "Optional[int]",
                    "None",
                    "Optional[str]"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "File._populate_dependency_node": {
            "name": "_populate_dependency_node",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "File._preload": {
            "name": "_preload",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "File._postload": {
            "name": "_postload",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "File.load": {
            "name": "load",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonFile._populate_dependency_node": {
            "name": "_populate_dependency_node",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonFile._postload": {
            "name": "_postload",
            "location": 64,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonFile.search_definition": {
            "name": "search_definition",
            "location": 68,
            "return": [
                "[str]",
                "typing.Generator[]"
            ],
            "arguments": {
                "source": [
                    "Optional[Any]",
                    "typing.Any",
                    "str",
                    "None",
                    "Optional[List[Any]]",
                    "Optional[dict]",
                    "list[typing.Any]",
                    "dict",
                    "dict[, ]"
                ],
                "filter_key": [
                    "str",
                    "bytes",
                    "int",
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "list",
                    "list[]"
                ]
            }
        },
        "FileManager.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileManager.create_file": {
            "name": "create_file",
            "location": 90,
            "return": [
                "list[str]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "FileManager._create_file": {
            "name": "_create_file",
            "location": 95,
            "return": [
                "File",
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "FileManager.get_file_from_handle": {
            "name": "get_file_from_handle",
            "location": 98,
            "return": [
                "str",
                "Dict[str, str]",
                "Optional[Dict[str, Any]]",
                "Dict[int, Set[str]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "handle": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[bool]"
                ]
            }
        },
        "FileManager.load": {
            "name": "load",
            "location": 101,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "JsonFileManager._create_file": {
            "name": "_create_file",
            "location": 112,
            "return": [
                "str",
                "JsonFile"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "django.core.files.storage.Storage"
                ]
            }
        }
    },
    "skeema-master/skeema/file/__init__.py": {},
    "skeema-master/skeema/intermediate/class_context.py": {
        "ClassContext.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "class_name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "ClassContext.class_name": {
            "name": "class_name",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClassContext.class_type": {
            "name": "class_type",
            "location": 19,
            "return": [
                "",
                "tuple[typing.Type]",
                "typing.Type"
            ],
            "arguments": {
                "self": [],
                "class_type": [
                    "bool",
                    "int"
                ]
            }
        },
        "ClassContext.base_classes": {
            "name": "base_classes",
            "location": 23,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClassContext.constructor_parameters": {
            "name": "constructor_parameters",
            "location": 27,
            "return": [
                "int",
                "Dict[str, Any]",
                "List['cirq.Qid']"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClassContext.data_members": {
            "name": "data_members",
            "location": 31,
            "return": [
                "Dict[str, List[int]]",
                "str",
                "Optional[float]",
                "dict",
                "float",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClassContext.add_constructor_parameter": {
            "name": "add_constructor_parameter",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parameter": [
                    "str",
                    "list",
                    "list[]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "ClassContext.add_data_member": {
            "name": "add_data_member",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "member": [
                    "list",
                    "str",
                    "list[]",
                    "float",
                    "dict",
                    "int",
                    "dict[, ]",
                    "tuple",
                    "tuple[]"
                ]
            }
        }
    },
    "skeema-master/skeema/intermediate/compilation_context.py": {
        "CompilationContext.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompilationContext.representations": {
            "name": "representations",
            "location": 6,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompilationContext.register_representation": {
            "name": "register_representation",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "representation": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        },
        "CompilationContext.get_representation": {
            "name": "get_representation",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "CompilationContext.__str__": {
            "name": "__str__",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "skeema-master/skeema/intermediate/data_member.py": {
        "DataMember.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "list[str]",
                    "dict",
                    "dict[, ]"
                ],
                "klass": [
                    "int",
                    "str",
                    "typing.Sequence[]",
                    "Sequence",
                    "None",
                    "bool",
                    "Optional[str]"
                ],
                "array": [
                    "bool",
                    "int",
                    "str",
                    "Sequence",
                    "Optional[str]"
                ]
            }
        },
        "DataMember.name": {
            "name": "name",
            "location": 8,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataMember.klass": {
            "name": "klass",
            "location": 12,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataMember.array": {
            "name": "array",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataMember.json": {
            "name": "json",
            "location": 20,
            "return": [
                "dict[typing.Text, ]",
                "str",
                "bool",
                "Type",
                "int",
                "OrderedDict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "skeema-master/skeema/intermediate/parameter.py": {
        "Parameter.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "klass": [
                    "str"
                ],
                "data_member": [
                    "bool",
                    "str",
                    "int",
                    "typing.Sequence[]",
                    "typing.Mapping",
                    "Sequence",
                    "Mapping[str, Any]"
                ],
                "required": [
                    "bool",
                    "int",
                    "str",
                    "Sequence",
                    "Mapping[str, Any]"
                ],
                "array": [
                    "bool",
                    "int",
                    "str",
                    "Sequence",
                    "Mapping[str, Any]"
                ]
            }
        },
        "Parameter.__eq__": {
            "name": "__eq__",
            "location": 9,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "Dict[str, Iterable[Any]]",
                    "dict[str, typing.Iterable[typing.Any]]",
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "int",
                    "list",
                    "list[]"
                ]
            }
        },
        "Parameter.name": {
            "name": "name",
            "location": 16,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parameter.klass": {
            "name": "klass",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parameter.required": {
            "name": "required",
            "location": 36,
            "return": [
                "",
                "int",
                "str",
                "set[str]",
                "dict[str, list[str]]",
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "Parameter.data_member": {
            "name": "data_member",
            "location": 28,
            "return": [
                "Dict[str, List[int]]",
                "str",
                "Optional[float]",
                "dict",
                "float",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parameter.array": {
            "name": "array",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parameter.json": {
            "name": "json",
            "location": 40,
            "return": [
                "dict[typing.Text, None]",
                "bool",
                "Dict[str, str]",
                "Tuple[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "skeema-master/skeema/intermediate/representation.py": {
        "Representation.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "class_name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "int",
                    "Collection[str]",
                    "typing.Collection",
                    "List[str]",
                    "list[str]"
                ],
                "base_classes": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "parameters": [
                    "int",
                    "str",
                    "typing.Type",
                    "bool",
                    "Type[T]"
                ],
                "data_members": [
                    "int",
                    "str",
                    "typing.Type",
                    "bool",
                    "Type[T]"
                ]
            }
        },
        "Representation.__eq__": {
            "name": "__eq__",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "Representation.class_name": {
            "name": "class_name",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Representation.base_classes": {
            "name": "base_classes",
            "location": 22,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Representation.parameters": {
            "name": "parameters",
            "location": 26,
            "return": [
                "list[]",
                "str",
                "list",
                "int",
                "Iterable",
                "dict",
                "Union[int, None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Representation.data_members": {
            "name": "data_members",
            "location": 30,
            "return": [
                "list[]",
                "list",
                "List[Dict[str, Any]]",
                "frozenset",
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Representation.json": {
            "name": "json",
            "location": 34,
            "return": [
                "dict[typing.Text, ]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Representation.__str__": {
            "name": "__str__",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "skeema-master/skeema/intermediate/__init__.py": {},
    "skeema-master/skeema/intermediate/compiler/class_builder.py": {
        "private": {
            "name": "private",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ]
            }
        },
        "ClassBuilder.set_class_module": {
            "name": "set_class_module",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "klass": [
                    "str",
                    "type",
                    "typing.Type"
                ],
                "module_name": [
                    "str"
                ]
            }
        },
        "ClassBuilder.create_class": {
            "name": "create_class",
            "location": 26,
            "return": [
                "ModelMeta",
                "int",
                "set",
                "BinaryIO",
                "Union[str, List]"
            ],
            "arguments": {
                "class_name": [
                    "str"
                ],
                "base_classes": [
                    "str",
                    "[str]",
                    "type",
                    "bool"
                ],
                "parameters": [
                    "list[typing.Any]",
                    "str",
                    "Optional[List[Any]]",
                    "list[str]",
                    "dict[, ]",
                    "Iterable[T]",
                    "List[str]",
                    "Sequence[str]",
                    "dict"
                ],
                "data_members": [
                    "dict[, ]",
                    "str",
                    "bool",
                    "dict",
                    "static_frame.core.util.NameType"
                ]
            }
        },
        "ClassBuilder.create_class.parse": {
            "name": "parse",
            "location": 33,
            "return": [
                "tuple",
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "json_str": [
                    "str"
                ]
            }
        },
        "ClassBuilder.create_class.decorate": {
            "name": "decorate",
            "location": 37,
            "return": [
                "typing.Text",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "annotation": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "array": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "skeema-master/skeema/intermediate/compiler/compiler.py": {
        "Compiler.compile": {
            "name": "compile",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Iterable[Any]",
                    "typing.Iterable[typing.Any]"
                ]
            }
        }
    },
    "skeema-master/skeema/intermediate/compiler/parser.py": {
        "is_annotation_pod": {
            "name": "is_annotation_pod",
            "location": 8,
            "return": [
                "bool"
            ],
            "arguments": {
                "annotation": [
                    "str",
                    "int"
                ]
            }
        },
        "Parser.class_lookup": {
            "name": "class_lookup",
            "location": 21,
            "return": [
                "BaseException"
            ],
            "arguments": {
                "module_name": [
                    "str"
                ],
                "class_name": [
                    "str"
                ]
            }
        },
        "Parser.parse": {
            "name": "parse",
            "location": 26,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "klass": [
                    "typing.Type",
                    "Type",
                    "str",
                    "dict[str, object]",
                    "int",
                    "Dict[str, object]",
                    "Dict[str, Any]"
                ],
                "json_instance": [
                    "dict",
                    "str",
                    "dict[, ]"
                ]
            }
        }
    },
    "skeema-master/skeema/intermediate/compiler/__init__.py": {},
    "skeema-master/skeema/schema/compiler.py": {
        "Compiler.get_compilation_keys": {
            "name": "get_compilation_keys",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Compiler.compile": {
            "name": "compile",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "str",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "T"
                ],
                "compilation_context": [
                    "bytes",
                    "ValuesView",
                    "typing.ValuesView",
                    "List[str]",
                    "list[str]",
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "skeema-master/skeema/schema/schema.py": {
        "Schema.compiler": {
            "name": "compiler",
            "location": 26,
            "return": [
                "compiler.Compiler",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "url": [
                    "str",
                    "None",
                    "Optional[str]",
                    "supersemodels.core.Database"
                ],
                "class_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "key_value_definition": [
                    "str"
                ]
            }
        },
        "Schema.key_value_definition": {
            "name": "key_value_definition",
            "location": 52,
            "return": [
                "str",
                "Optional[str]",
                "Optional[List[str]]",
                "Callable",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema.url": {
            "name": "url",
            "location": 56,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema.class_name": {
            "name": "class_name",
            "location": 60,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema.property_map": {
            "name": "property_map",
            "location": 64,
            "return": [
                "Dict[str, Any]",
                "set",
                "dict",
                "Mapping[str, str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema._resolve_dependency_url": {
            "name": "_resolve_dependency_url",
            "location": 67,
            "return": [
                "str",
                "list[]",
                "None",
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "dependency_url_string": [
                    "str",
                    "list",
                    "list[]",
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "Schema._populate_dependency_node": {
            "name": "_populate_dependency_node",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema._compile": {
            "name": "_compile",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "compilation_context": [
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "list",
                    "list[]"
                ]
            }
        }
    },
    "skeema-master/skeema/schema/schema_manager.py": {
        "SchemaManager.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaManager.create_schema": {
            "name": "create_schema",
            "location": 20,
            "return": [
                "bool",
                "str",
                "float",
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "class_name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "key_value_definition": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "SchemaManager._create_schema": {
            "name": "_create_schema",
            "location": 30,
            "return": [
                "schema.Schema",
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "int",
                    "skeema.types.KeyValueDef",
                    "Union[str, int]"
                ],
                "class_name": [
                    "str",
                    "int",
                    "skeema.types.KeyValueDef",
                    "Union[str, int]"
                ],
                "key_value_definition": [
                    "str",
                    "int",
                    "skeema.types.KeyValueDef",
                    "Union[str, int]"
                ]
            }
        },
        "SchemaManager.add_schema": {
            "name": "add_schema",
            "location": 33,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "str",
                    "int",
                    "blurr.core.aggregate_window.WindowAggregateSchema"
                ]
            }
        },
        "SchemaManager.get_schema_handle": {
            "name": "get_schema_handle",
            "location": 37,
            "return": [
                "str",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "bool",
                    "Sequence[int]",
                    "typing.Sequence[int]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "SchemaManager.get_schema_from_handle": {
            "name": "get_schema_from_handle",
            "location": 40,
            "return": [
                "str",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "handle": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "float",
                    "Union[str, int]",
                    "str",
                    "int"
                ]
            }
        },
        "SchemaManager.get_schema": {
            "name": "get_schema",
            "location": 43,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "skeema-master/skeema/schema/__init__.py": {},
    "skeema-master/skeema/schema/json/compiler.py": {
        "Compiler.get_compilation_keys": {
            "name": "get_compilation_keys",
            "location": 6,
            "return": [
                "List[Union[(skeema.schema.json.keyword.AllOf, skeema.schema.json.keyword.Properties, skeema.schema.json.keyword.Required, skeema.schema.json.keyword.Type)]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "skeema-master/skeema/schema/json/keyword.py": {
        "Keyword.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Keyword.key": {
            "name": "key",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Keyword.compile": {
            "name": "compile",
            "location": 19,
            "return": [
                "str",
                "bool",
                "dict[str, typing.Any]",
                "dict",
                "tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal]]",
                "int",
                "list[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "bool",
                    "Optional[Optional]",
                    "typing.Optional[]",
                    "None"
                ],
                "class_context": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "str",
                    "Optional[bool]",
                    "bool",
                    "None",
                    "int"
                ],
                "compilation_context": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "str",
                    "Optional[bool]",
                    "bool",
                    "None",
                    "int"
                ]
            }
        },
        "Keyword._precompile": {
            "name": "_precompile",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "Keyword._compile": {
            "name": "_compile",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "bool",
                    "Exception",
                    "Optional[Tuple[str]]",
                    "tuple[str]",
                    "None",
                    "Type['Model']",
                    "Dict[str, Any]",
                    "typing.Type",
                    "Optional[bool]",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "list[str]"
                ],
                "class_context": [
                    "bool",
                    "Exception",
                    "Optional[Tuple[str]]",
                    "tuple[str]",
                    "None",
                    "Type['Model']",
                    "Dict[str, Any]",
                    "typing.Type",
                    "Optional[bool]",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "list[str]"
                ],
                "compilation_context": [
                    "bool",
                    "Exception",
                    "Optional[Tuple[str]]",
                    "tuple[str]",
                    "None",
                    "Type['Model']",
                    "Dict[str, Any]",
                    "typing.Type",
                    "Optional[bool]",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "Type.key": {
            "name": "key",
            "location": 39,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Type._compile": {
            "name": "_compile",
            "location": 42,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "Callable",
                    "int",
                    "typing.Callable[, ]"
                ],
                "class_context": [],
                "compilation_context": [
                    "bool",
                    "Exception",
                    "Optional[Tuple[str]]",
                    "tuple[str]",
                    "None",
                    "Type['Model']",
                    "Dict[str, Any]",
                    "typing.Type",
                    "Optional[bool]",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "Properties.key": {
            "name": "key",
            "location": 97,
            "return": [
                "typing.Text",
                "Optional[List[str]]",
                "Mapping[str, str]",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Properties._compile": {
            "name": "_compile",
            "location": 100,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "class_context": [
                    "Iterable[T]",
                    "str"
                ],
                "compilation_context": [
                    "bool",
                    "Exception",
                    "Optional[Tuple[str]]",
                    "tuple[str]",
                    "None",
                    "Type['Model']",
                    "Dict[str, Any]",
                    "typing.Type",
                    "Optional[bool]",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "AllOf.__init__": {
            "name": "__init__",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllOf.key": {
            "name": "key",
            "location": 165,
            "return": [
                "typing.Text",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllOf._compile": {
            "name": "_compile",
            "location": 168,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "bool",
                    "Exception",
                    "Optional[Tuple[str]]",
                    "tuple[str]",
                    "None",
                    "Type['Model']",
                    "Dict[str, Any]",
                    "typing.Type",
                    "Optional[bool]",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "list[str]"
                ],
                "class_context": [
                    "bool",
                    "Exception",
                    "Optional[Tuple[str]]",
                    "tuple[str]",
                    "None",
                    "Type['Model']",
                    "Dict[str, Any]",
                    "typing.Type",
                    "Optional[bool]",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "list[str]"
                ],
                "compilation_context": [
                    "bool",
                    "Exception",
                    "Optional[Tuple[str]]",
                    "tuple[str]",
                    "None",
                    "Type['Model']",
                    "Dict[str, Any]",
                    "typing.Type",
                    "Optional[bool]",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "Required.__init__": {
            "name": "__init__",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Required.key": {
            "name": "key",
            "location": 179,
            "return": [
                "typing.Text",
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Required._compile": {
            "name": "_compile",
            "location": 182,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "bool",
                    "Exception",
                    "Optional[Tuple[str]]",
                    "tuple[str]",
                    "None",
                    "Type['Model']",
                    "Dict[str, Any]",
                    "typing.Type",
                    "Optional[bool]",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "list[str]"
                ],
                "class_context": [
                    "bool",
                    "str",
                    "float",
                    "Callable[..., Awaitable]",
                    "typing.Callable[..., collections.abc.Awaitable[]]",
                    "Optional[float]",
                    "None"
                ],
                "compilation_context": [
                    "bool",
                    "Exception",
                    "Optional[Tuple[str]]",
                    "tuple[str]",
                    "None",
                    "Type['Model']",
                    "Dict[str, Any]",
                    "typing.Type",
                    "Optional[bool]",
                    "dict[str, typing.Any]",
                    "List[str]",
                    "list[str]"
                ]
            }
        }
    },
    "skeema-master/skeema/schema/json/schema.py": {
        "Schema.compiler": {
            "name": "compiler",
            "location": 13,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema.definitions": {
            "name": "definitions",
            "location": 17,
            "return": [
                "str",
                "Union[int, float, complex]",
                "List[str]",
                "Callable[[str], str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema.properties": {
            "name": "properties",
            "location": 21,
            "return": [
                "Dict[str, str]",
                "List[str]",
                "List[Dict[str, Any]]",
                "Dict[str, Any]",
                "Type[bytes]",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema._precompile": {
            "name": "_precompile",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "compilation_context": [
                    "list[str]",
                    "int",
                    "skeema.intermediate.CompilationContext",
                    "float",
                    "List[str]",
                    "dict[, ]",
                    "dict",
                    "Union[int, float]"
                ]
            }
        },
        "Schema._create_definition_schemas": {
            "name": "_create_definition_schemas",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema._populate_dependency_node": {
            "name": "_populate_dependency_node",
            "location": 42,
            "return": [
                "set",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "skeema-master/skeema/schema/json/schema_manager.py": {
        "SchemaManager._create_schema": {
            "name": "_create_schema",
            "location": 6,
            "return": [
                "Schema",
                "Optional[str]",
                "dict",
                "type",
                "Type"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "class_name": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "key_value_definition": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "skeema-master/skeema/schema/json/__init__.py": {},
    "skeema-master/tests/conftest.py": {
        "uid": {
            "name": "uid",
            "location": 4,
            "return": [
                "str"
            ],
            "arguments": {
                "v": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "id0": {
            "name": "id0",
            "location": 9,
            "return": [
                "str",
                "Callable[[], bool]",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "id1": {
            "name": "id1",
            "location": 14,
            "return": [
                "str",
                "Callable[[], bool]",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "id2": {
            "name": "id2",
            "location": 19,
            "return": [
                "str",
                "Callable[[], bool]",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "id3": {
            "name": "id3",
            "location": 24,
            "return": [
                "str",
                "Callable[[], bool]",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "id4": {
            "name": "id4",
            "location": 29,
            "return": [
                "str",
                "Callable[[], bool]",
                "Optional[int]"
            ],
            "arguments": {}
        }
    },
    "skeema-master/tests/core/test_compilable.py": {
        "test_compilable": {
            "name": "test_compilable",
            "location": 15,
            "return": [
                "MyCompilable",
                "str",
                "float"
            ],
            "arguments": {}
        },
        "MyCompilable._compile": {
            "name": "_compile",
            "location": 7,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "compilation_context": [
                    "bool",
                    "skeema.intermediate.CompilationContext",
                    "float",
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "MyCompilable._find_dependencies": {
            "name": "_find_dependencies",
            "location": 10,
            "return": [
                "list[]",
                "int",
                "set",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompilable.TestCompile.test_sets_compiled_to_true": {
            "name": "test_sets_compiled_to_true",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "compilable": []
            }
        }
    },
    "skeema-master/tests/core/test_container.py": {
        "create_container": {
            "name": "create_container",
            "location": 14,
            "return": [
                "",
                "typing.Generator[Container]"
            ],
            "arguments": {}
        },
        "MyObject.on_add_to_container": {
            "name": "on_add_to_container",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "handle": [
                    "str",
                    "int"
                ],
                "debug_name": [
                    "str",
                    "int"
                ]
            }
        },
        "TestContainer.TestAddObject.test_returns_valid_handle": {
            "name": "test_returns_valid_handle",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "container": [
                    "bool",
                    "str",
                    "IO",
                    "Optional[bool]",
                    "Optional[str]"
                ],
                "id0": [
                    "bool",
                    "str",
                    "IO",
                    "Optional[bool]",
                    "Optional[str]"
                ]
            }
        },
        "TestContainer.TestAddObject.test_creates_reference": {
            "name": "test_creates_reference",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "container": [
                    "Optional[str]",
                    "str"
                ],
                "id0": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "TestContainer.TestAddObject.test_returns_invalid_handle_with_duplicate_id": {
            "name": "test_returns_invalid_handle_with_duplicate_id",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "container": [
                    "bytes",
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "id0": [
                    "bytes",
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "TestContainer.TestGetObjectHandle.test_returns_correct_handle_with_valid_id": {
            "name": "test_returns_correct_handle_with_valid_id",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "container": [
                    "str",
                    "tensorhive.core.ssh.Hostname",
                    "Tuple[int, int]"
                ],
                "id0": [
                    "str",
                    "tensorhive.core.ssh.Hostname",
                    "Tuple[int, int]"
                ]
            }
        },
        "TestContainer.TestGetObject.test_does_not_create_reference": {
            "name": "test_does_not_create_reference",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "container": [],
                "id0": [
                    "core.models.MyUser",
                    "str",
                    "Tuple[int, int]",
                    "dict"
                ]
            }
        },
        "TestContainer.TestGetObject.test_returns_none_with_invalid_handle": {
            "name": "test_returns_none_with_invalid_handle",
            "location": 56,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "container": []
            }
        },
        "TestContainer.TestClear.test_removes_all_objects": {
            "name": "test_removes_all_objects",
            "location": 61,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "container": [
                    "int"
                ],
                "id0": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "skeema-master/tests/core/test_handle_manager.py": {
        "create_handle_manager": {
            "name": "create_handle_manager",
            "location": 9,
            "return": [
                "HandleManager",
                "bool",
                "float"
            ],
            "arguments": {}
        },
        "TestHandleManager.test_manager_starts_with_no_active_handles": {
            "name": "test_manager_starts_with_no_active_handles",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": [
                    "int",
                    "str",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "TestHandleManager.TestIssueHandle.test_returns_new_handle": {
            "name": "test_returns_new_handle",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": [
                    "core.models.Recipe"
                ]
            }
        },
        "TestHandleManager.TestIssueHandle.test_returns_valid_handle": {
            "name": "test_returns_valid_handle",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": [
                    "core.models.Recipe",
                    "float"
                ]
            }
        },
        "TestHandleManager.TestIssueHandle.test_increments_active_count": {
            "name": "test_increments_active_count",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": [
                    "int",
                    "str"
                ]
            }
        },
        "TestHandleManager.TestRemoveHandle.issue_handle": {
            "name": "issue_handle",
            "location": 35,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "manager": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TestHandleManager.TestRemoveHandle.test_decrements_active_count": {
            "name": "test_decrements_active_count",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": [
                    "str"
                ],
                "handle": [
                    "set"
                ]
            }
        },
        "TestHandleManager.TestRemoveHandle.test_throws_handle_is_inactive_exception_with_already_removed_handle": {
            "name": "test_throws_handle_is_inactive_exception_with_already_removed_handle",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": [
                    "core.models.Recipe"
                ],
                "handle": [
                    "core.models.Recipe"
                ]
            }
        },
        "TestHandleManager.TestValidate.test_throws_invalid_handle_exception_with_orphan_handle": {
            "name": "test_throws_invalid_handle_exception_with_orphan_handle",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": [
                    "str"
                ]
            }
        },
        "TestHandleManager.TestValidate.test_throws_invalid_handle_exception_with_invalid_handle": {
            "name": "test_throws_invalid_handle_exception_with_invalid_handle",
            "location": 55,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": [
                    "str"
                ]
            }
        },
        "TestHandleManager.TestValidate.test_handle_throws_handle_out_of_range_exception_with_stranger_handle": {
            "name": "test_handle_throws_handle_out_of_range_exception_with_stranger_handle",
            "location": 60,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": [
                    "str",
                    "core.models.Grouping"
                ]
            }
        },
        "TestHandleManager.TestValidate.test_throws_handle_is_inactive_exception_with_inactive_handle": {
            "name": "test_throws_handle_is_inactive_exception_with_inactive_handle",
            "location": 66,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": [
                    "blurr.core.schema_loader.SchemaLoader"
                ]
            }
        },
        "TestHandleManager.TestValidate.test_validate_retired_handle_throws_handle_is_retired_exception": {
            "name": "test_validate_retired_handle_throws_handle_is_retired_exception",
            "location": 72,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": [
                    "int"
                ]
            }
        },
        "TestHandleManager.TestRemoveAllHandles.test_deactivates_issued_handles": {
            "name": "test_deactivates_issued_handles",
            "location": 80,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": [
                    "str"
                ]
            }
        }
    },
    "skeema-master/tests/core/test_proxy_container.py": {
        "create_container": {
            "name": "create_container",
            "location": 14,
            "return": [
                "tartare.core.contexContributorExportContext",
                "ProxyContainer"
            ],
            "arguments": {}
        },
        "TestHandleManagedContainer.TestGet.test_returns_correct_object": {
            "name": "test_returns_correct_object",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "container": [
                    "meeshkan.core.api.Api"
                ]
            }
        },
        "TestHandleManagedContainer.TestGet.test_does_not_create_reference": {
            "name": "test_does_not_create_reference",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "container": []
            }
        },
        "TestHandleManagedContainer.TestGet.test_returns_none_with_invalid_handle": {
            "name": "test_returns_none_with_invalid_handle",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "container": [
                    "meeshkan.core.api.Api",
                    "antidote.core.DependencyContainer"
                ]
            }
        },
        "TestHandleManagedContainer.TestGet.test_returns_none_with_removed_handle": {
            "name": "test_returns_none_with_removed_handle",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "container": [
                    "Optional[str]",
                    "antidote.core.DependencyContainer",
                    "str"
                ]
            }
        },
        "TestHandleManagedContainer.TestGet.test_handles_returns_none_with_cleared_container": {
            "name": "test_handles_returns_none_with_cleared_container",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "container": [
                    "meeshkan.core.api.Api"
                ]
            }
        },
        "TestHandleManagedContainer.TestRemove.test_throws_handle_is_inactive_exception_with_already_removed_handle": {
            "name": "test_throws_handle_is_inactive_exception_with_already_removed_handle",
            "location": 56,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "container": []
            }
        },
        "TestHandleManagedContainer.TestAddObject.test_does_not_create_reference": {
            "name": "test_does_not_create_reference",
            "location": 64,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "container": []
            }
        }
    },
    "skeema-master/tests/core/dependency/test_dependency.py": {
        "create_container": {
            "name": "create_container",
            "location": 12,
            "return": [
                "tartare.core.contexContributorExportContext",
                "Container"
            ],
            "arguments": {}
        },
        "create_dependency": {
            "name": "create_dependency",
            "location": 22,
            "return": [
                "MyDependency",
                "bool",
                "float"
            ],
            "arguments": {
                "container": [
                    "str",
                    "Optional[str]"
                ],
                "_id": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "MyDependency._find_dependencies": {
            "name": "_find_dependencies",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDependency.TestAddDependency.test_throws_dependency_has_no_node_exception_with_dependency_without_node": {
            "name": "test_throws_dependency_has_no_node_exception_with_dependency_without_node",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDependency.TestAddDependency.test_throws_circular_dependency_exception_with_simple_circular_reference": {
            "name": "test_throws_circular_dependency_exception_with_simple_circular_reference",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "container": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Union[str, List[str]]"
                ],
                "id0": [
                    "str",
                    "Union[str, List[str]]",
                    "Optional[str]",
                    "int"
                ],
                "id1": [
                    "str",
                    "Union[str, List[str]]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "TestDependency.TestAddDependency.test_throws_circular_dependency_exception_with_complex_circular_reference": {
            "name": "test_throws_circular_dependency_exception_with_complex_circular_reference",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "container": [
                    "int",
                    "str"
                ],
                "id0": [
                    "str",
                    "bool",
                    "int"
                ],
                "id1": [
                    "str",
                    "bool",
                    "int"
                ],
                "id2": [
                    "str",
                    "bool",
                    "int"
                ],
                "id3": [
                    "str",
                    "bool",
                    "int"
                ],
                "id4": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "TestDependency.TestAddDependency.test_throws_circular_dependency_exception_with_self_as_dependency": {
            "name": "test_throws_circular_dependency_exception_with_self_as_dependency",
            "location": 59,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "container": [
                    "int",
                    "str"
                ],
                "id0": [
                    "int",
                    "str"
                ]
            }
        },
        "TestDependency.TestResolveDependencies.test_returns_a_list_of_the_graph_dependency_nodes_in_the_correct_order": {
            "name": "test_returns_a_list_of_the_graph_dependency_nodes_in_the_correct_order",
            "location": 66,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "container": [
                    "int",
                    "str",
                    "Optional[bytes]"
                ],
                "id0": [
                    "str",
                    "int"
                ],
                "id1": [
                    "str",
                    "int"
                ],
                "id2": [
                    "str",
                    "int"
                ],
                "id3": [
                    "str",
                    "int"
                ],
                "id4": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "skeema-master/tests/file/test_file.py": {
        "TestFileManager.TestLoad.test_loads_a_local_file": {
            "name": "test_loads_a_local_file",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "skeema-master/tests/intermediate/compiler/test_compiler.py": {
        "create_compiler": {
            "name": "create_compiler",
            "location": 9,
            "return": [
                "Compiler",
                "bool",
                "float"
            ],
            "arguments": {}
        },
        "create_manager": {
            "name": "create_manager",
            "location": 14,
            "return": [
                "SchemaManager",
                "bool",
                "float"
            ],
            "arguments": {}
        },
        "TestCompiler.TestCompile.test_creates_class_from_boolean": {
            "name": "test_creates_class_from_boolean",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "compiler": [
                    "str"
                ],
                "manager": []
            }
        },
        "TestCompiler.TestCompile.test_creates_class_from_integer": {
            "name": "test_creates_class_from_integer",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "compiler": [
                    "str"
                ],
                "manager": []
            }
        },
        "TestCompiler.TestCompile.test_creates_class_from_number": {
            "name": "test_creates_class_from_number",
            "location": 61,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "compiler": [
                    "str"
                ],
                "manager": []
            }
        },
        "TestCompiler.TestCompile.test_creates_class_from_string": {
            "name": "test_creates_class_from_string",
            "location": 76,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "compiler": [
                    "str",
                    "Dict[str, object]"
                ],
                "manager": [
                    "bool"
                ]
            }
        },
        "TestCompiler.TestCompile.test_creates_class_from_array": {
            "name": "test_creates_class_from_array",
            "location": 91,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "compiler": [
                    "str"
                ],
                "manager": []
            }
        },
        "TestCompiler.TestCompile.test_creates_class_from_object": {
            "name": "test_creates_class_from_object",
            "location": 120,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "compiler": [
                    "str"
                ],
                "manager": []
            }
        },
        "TestCompiler.TestCompile.test_creates_class_from_object_with_references": {
            "name": "test_creates_class_from_object_with_references",
            "location": 148,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "compiler": [
                    "str"
                ],
                "manager": []
            }
        },
        "TestCompiler.TestCompile.test_creates_classes_from_object_definitions": {
            "name": "test_creates_classes_from_object_definitions",
            "location": 186,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "compiler": [
                    "str"
                ],
                "manager": []
            }
        }
    },
    "skeema-master/tests/intermediate/compiler/test_parser.py": {
        "create_compiler": {
            "name": "create_compiler",
            "location": 9,
            "return": [
                "Compiler",
                "bool",
                "float"
            ],
            "arguments": {}
        },
        "create_manager": {
            "name": "create_manager",
            "location": 14,
            "return": [
                "SchemaManager",
                "bool",
                "float"
            ],
            "arguments": {}
        },
        "setup": {
            "name": "setup",
            "location": 19,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "manager": [
                    "int",
                    "List[Callable]",
                    "str"
                ],
                "compiler": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "TestModel.test_parse": {
            "name": "test_parse",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "skeema-master/tests/json/test_schema.py": {
        "manager": {
            "name": "manager",
            "location": 10,
            "return": [
                "SchemaManager",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "TestJsonSchema.TestCompile.test_creates_the_expected_representation_with_root_type_boolean": {
            "name": "test_creates_the_expected_representation_with_root_type_boolean",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": []
            }
        },
        "TestJsonSchema.TestCompile.test_creates_the_expected_representation_with_root_type_integer": {
            "name": "test_creates_the_expected_representation_with_root_type_integer",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": []
            }
        },
        "TestJsonSchema.TestCompile.test_creates_the_expected_representation_with_root_type_null": {
            "name": "test_creates_the_expected_representation_with_root_type_null",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": []
            }
        },
        "TestJsonSchema.TestCompile.test_creates_the_expected_representation_with_root_type_number": {
            "name": "test_creates_the_expected_representation_with_root_type_number",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": []
            }
        },
        "TestJsonSchema.TestCompile.test_creates_the_expected_representation_with_root_type_object": {
            "name": "test_creates_the_expected_representation_with_root_type_object",
            "location": 62,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": []
            }
        },
        "TestJsonSchema.TestCompile.test_creates_the_expected_representation_with_root_type_object_and_properties": {
            "name": "test_creates_the_expected_representation_with_root_type_object_and_properties",
            "location": 74,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": []
            }
        },
        "TestJsonSchema.TestCompile.test_creates_the_expected_representation_with_root_type_string": {
            "name": "test_creates_the_expected_representation_with_root_type_string",
            "location": 99,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": []
            }
        },
        "TestJsonSchema.TestCompile.test_creates_the_expected_representation_with_root_type_array": {
            "name": "test_creates_the_expected_representation_with_root_type_array",
            "location": 111,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": []
            }
        },
        "TestJsonSchema.TestCompile.test_creates_representations_for_each_property": {
            "name": "test_creates_representations_for_each_property",
            "location": 126,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": []
            }
        },
        "TestJsonSchema.TestCompile.test_creates_a_representation_with_a_parameter_and_data_member_for_each_property": {
            "name": "test_creates_a_representation_with_a_parameter_and_data_member_for_each_property",
            "location": 143,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": []
            }
        },
        "TestJsonSchema.TestCompile.test_creates_a_representation_with_a_parameter_and_data_member_for_each_reference_property": {
            "name": "test_creates_a_representation_with_a_parameter_and_data_member_for_each_reference_property",
            "location": 158,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": []
            }
        }
    }
}
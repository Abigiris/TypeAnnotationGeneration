{
    "sky_tool-master/config.py": {
        "Config.init_app": {
            "name": "init_app",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "Type[Config]"
                ]
            }
        }
    },
    "sky_tool-master/gunicorn_config.py": {},
    "sky_tool-master/manager.py": {},
    "sky_tool-master/app/models.py": {
        "addModel": {
            "name": "addModel",
            "location": 17,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "model": [
                    "_T0@@"
                ]
            }
        },
        "BaseModel.save": {
            "name": "save",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "commit": [
                    "bool"
                ]
            }
        },
        "BaseModel.delete": {
            "name": "delete",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logic": [
                    "bool"
                ]
            }
        },
        "BaseModel.query_all": {
            "name": "query_all",
            "location": 39,
            "return": [
                "list[]"
            ],
            "arguments": {
                "Model": []
            }
        },
        "User.get_user": {
            "name": "get_user",
            "location": 57,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "user_id": [
                    "None"
                ],
                "token": [
                    "None"
                ]
            }
        },
        "FileUserModel.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_id": [],
                "file_id": [],
                "add_time": [
                    "None"
                ]
            }
        },
        "RssModel.__init__": {
            "name": "__init__",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "link": [],
                "add_time": [
                    "None"
                ]
            }
        },
        "RssUserModel.__init__": {
            "name": "__init__",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_id": [],
                "rss_id": [],
                "add_time": [
                    "None"
                ]
            }
        },
        "RssContentModel.__init__": {
            "name": "__init__",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "link": [],
                "baseurl": [],
                "title": [],
                "description": [],
                "cover_img": [],
                "published_time": [],
                "add_time": [
                    "None"
                ]
            }
        },
        "RssReadRecordModel.__init__": {
            "name": "__init__",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url_id": [],
                "user_id": [],
                "read_at": [
                    "None"
                ]
            }
        }
    },
    "sky_tool-master/app/__init__.py": {
        "fetch_route": {
            "name": "fetch_route",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "blueprint": [],
                "prefix": [
                    "None"
                ]
            }
        },
        "register_blueprint": {
            "name": "register_blueprint",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "create_table": {
            "name": "create_table",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "config_name": [],
                "app": []
            }
        },
        "create_app": {
            "name": "create_app",
            "location": 38,
            "return": [
                "Any"
            ],
            "arguments": {
                "env": []
            }
        }
    },
    "sky_tool-master/app/utils/constant.py": {
        "get_header": {
            "name": "get_header",
            "location": 26,
            "return": [
                "Dict[(str, Union[(str, _T0)])]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "None",
                    "List[str]",
                    "float",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "sky_tool-master/app/utils/errors.py": {
        "ApiError.get_error": {
            "name": "get_error",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "error_code": []
            }
        },
        "CommonError.get_error": {
            "name": "get_error",
            "location": 21,
            "return": [
                "Tuple[(Any, int, Any)]"
            ],
            "arguments": {
                "cls": [],
                "error_code": []
            }
        },
        "CommonError.error_toast": {
            "name": "error_toast",
            "location": 39,
            "return": [
                "Tuple[(Any, int, Any)]"
            ],
            "arguments": {
                "cls": [],
                "msg": [
                    "typing.Text"
                ]
            }
        },
        "UserError.get_error": {
            "name": "get_error",
            "location": 46,
            "return": [
                "Tuple[(Any, int, Any)]"
            ],
            "arguments": {
                "cls": [],
                "error_code": []
            }
        }
    },
    "sky_tool-master/app/utils/ext.py": {},
    "sky_tool-master/app/utils/response_factory.py": {
        "__check_request": {
            "name": "__check_request",
            "location": 12,
            "return": [
                "Any"
            ],
            "arguments": {
                "request": []
            }
        },
        "__error_handler": {
            "name": "__error_handler",
            "location": 33,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "msg": [],
                "code": [],
                "request": [],
                "data": []
            }
        },
        "r400_invalid_requet": {
            "name": "r400_invalid_requet",
            "location": 52,
            "return": [
                "Tuple[(Any, int)]"
            ],
            "arguments": {
                "msg": [],
                "code": [],
                "request": []
            }
        },
        "r401_unauthorized": {
            "name": "r401_unauthorized",
            "location": 57,
            "return": [
                "Tuple[(Any, int)]"
            ],
            "arguments": {
                "msg": [],
                "code": [],
                "request": []
            }
        },
        "r403_forbidden": {
            "name": "r403_forbidden",
            "location": 62,
            "return": [
                "Tuple[(Any, int)]"
            ],
            "arguments": {
                "msg": [],
                "code": [],
                "request": []
            }
        },
        "r404_not_found": {
            "name": "r404_not_found",
            "location": 66,
            "return": [
                "Tuple[(Any, int)]"
            ],
            "arguments": {
                "msg": [],
                "code": [],
                "request": []
            }
        },
        "r500_server_error": {
            "name": "r500_server_error",
            "location": 70,
            "return": [
                "Tuple[(Any, int)]"
            ],
            "arguments": {
                "msg": [],
                "code": [],
                "request": []
            }
        },
        "boolValue": {
            "name": "boolValue",
            "location": 79,
            "return": [
                "Dict[(str, _T0)]"
            ],
            "arguments": {
                "value": [
                    "_T0@@"
                ]
            }
        },
        "response_succ": {
            "name": "response_succ",
            "location": 83,
            "return": [
                "Tuple[(Any, _T0, Union[(Dict[(str, str)], _T2)])]"
            ],
            "arguments": {
                "status_code": [
                    "_T0@@"
                ],
                "body": [],
                "header": [
                    "_T2@@"
                ]
            }
        },
        "response_error": {
            "name": "response_error",
            "location": 107,
            "return": [
                "Tuple[(Any, _T2, Union[(Dict[(str, str)], _T3)])]"
            ],
            "arguments": {
                "error_code": [],
                "msg": [],
                "http_code": [
                    "_T2@@"
                ],
                "header": [
                    "_T3@@"
                ]
            }
        }
    },
    "sky_tool-master/app/utils/strings.py": {
        "get_unix_time_tuple": {
            "name": "get_unix_time_tuple",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "date": [],
                "millisecond": [
                    "bool"
                ]
            }
        },
        "get_date_from_time_tuple": {
            "name": "get_date_from_time_tuple",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "unix_time": [],
                "formatter": [
                    "typing.Text"
                ]
            }
        },
        "getmd5": {
            "name": "getmd5",
            "location": 52,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "code": []
            }
        },
        "get_random_num": {
            "name": "get_random_num",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "digit": [
                    "int"
                ]
            }
        },
        "is_emoji": {
            "name": "is_emoji",
            "location": 88,
            "return": [
                "bool"
            ],
            "arguments": {
                "content": []
            }
        },
        "contain_emoji": {
            "name": "contain_emoji",
            "location": 108,
            "return": [
                "bool"
            ],
            "arguments": {
                "content": []
            }
        },
        "get_domain": {
            "name": "get_domain",
            "location": 120,
            "return": [
                "str"
            ],
            "arguments": {
                "url": []
            }
        },
        "filter_all_img_src": {
            "name": "filter_all_img_src",
            "location": 131,
            "return": [
                "list"
            ],
            "arguments": {
                "content": []
            }
        }
    },
    "sky_tool-master/app/utils/verfy.py": {
        "login_option": {
            "name": "login_option",
            "location": 6,
            "return": [
                "Callable"
            ],
            "arguments": {
                "func": []
            }
        },
        "login_require": {
            "name": "login_require",
            "location": 17,
            "return": [
                "Callable"
            ],
            "arguments": {
                "func": []
            }
        },
        "get_user_from_request": {
            "name": "get_user_from_request",
            "location": 35,
            "return": [
                "Any"
            ],
            "arguments": {
                "request": [],
                "isforce": []
            }
        },
        "pages_info_require": {
            "name": "pages_info_require",
            "location": 51,
            "return": [
                "Callable"
            ],
            "arguments": {
                "func": []
            }
        },
        "login_option.decorator_view": {
            "name": "decorator_view",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "login_require.decorator_view": {
            "name": "decorator_view",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "pages_info_require.decorator_view": {
            "name": "decorator_view",
            "location": 54,
            "return": [],
            "arguments": {}
        }
    },
    "sky_tool-master/app/utils/__init__.py": {},
    "sky_tool-master/app/views/index.py": {
        "index": {
            "name": "index",
            "location": 15,
            "return": [
                "int",
                "List[str]",
                "Dict[str, Any]",
                "bool",
                "str",
                "float",
                "raiden.utils.Dict[str, raiden.utils.Any]"
            ],
            "arguments": {}
        },
        "test_f": {
            "name": "test_f",
            "location": 20,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "sky_tool-master/app/views/inpectors.py": {
        "api_before_request": {
            "name": "api_before_request",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sky_tool-master/app/views/permission.py": {
        "delivery_authority": {
            "name": "delivery_authority",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sky_tool-master/app/views/root_bp.py": {
        "root_file_handle": {
            "name": "root_file_handle",
            "location": 6,
            "return": [
                "List[List[str]]",
                "str",
                "Dict[str, Dict[str, Any]]",
                "Dict[cmk.utils.type_defs.HostName, str]"
            ],
            "arguments": {
                "file": [
                    "Text",
                    "str",
                    "BinaryIO"
                ]
            }
        }
    },
    "sky_tool-master/app/views/rss.py": {
        "add_rss_source": {
            "name": "add_rss_source",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "list_rss": {
            "name": "list_rss",
            "location": 66,
            "return": [],
            "arguments": {}
        },
        "parser_rss": {
            "name": "parser_rss",
            "location": 98,
            "return": [],
            "arguments": {}
        },
        "task_parser_backend": {
            "name": "task_parser_backend",
            "location": 111,
            "return": [],
            "arguments": {}
        },
        "rss_content_list": {
            "name": "rss_content_list",
            "location": 128,
            "return": [],
            "arguments": {}
        },
        "rss_record": {
            "name": "rss_record",
            "location": 198,
            "return": [],
            "arguments": {}
        }
    },
    "sky_tool-master/app/views/todo.py": {
        "add_todo": {
            "name": "add_todo",
            "location": 10,
            "return": [
                "Dict[str, Any]",
                "Optional[str]",
                "dict"
            ],
            "arguments": {}
        },
        "set_todo_state": {
            "name": "set_todo_state",
            "location": 40,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "todo_id": [
                    "str",
                    "int",
                    "transfer.models.SnippetID"
                ],
                "state": [
                    "int",
                    "Dict",
                    "str",
                    "raiden.utils.Address",
                    "List[dict[str,Any]]",
                    "tracklater.models.Entry",
                    "List[Dict[str,Any]]"
                ]
            }
        },
        "finish_todo": {
            "name": "finish_todo",
            "location": 82,
            "return": [
                "cmk.utils.type_defs.EventRule",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "remove_todo": {
            "name": "remove_todo",
            "location": 93,
            "return": [
                "cmk.utils.type_defs.EventRule",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "filter_todo": {
            "name": "filter_todo",
            "location": 104,
            "return": [
                "Optional[str]",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "filter": [
                    "None",
                    "Dict[str,Any]",
                    "esm.models.service_instance.ServiceInstance",
                    "deeplearning.ml4pl.models.classifier_base.ClassifierBase",
                    "deeplearning.ml4pl.models.logger.Logger"
                ]
            }
        },
        "undo_todo": {
            "name": "undo_todo",
            "location": 130,
            "return": [
                "cmk.utils.type_defs.EventRule",
                "Dict[str, Any]"
            ],
            "arguments": {}
        }
    },
    "sky_tool-master/app/views/tool_view.py": {
        "encryption": {
            "name": "encryption",
            "location": 16,
            "return": [],
            "arguments": {
                "encrypt_type": [
                    "typing.Text"
                ]
            }
        },
        "handle_client_message": {
            "name": "handle_client_message",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": []
            }
        },
        "email_to": {
            "name": "email_to",
            "location": 52,
            "return": [],
            "arguments": {}
        },
        "query_task": {
            "name": "query_task",
            "location": 79,
            "return": [],
            "arguments": {}
        }
    },
    "sky_tool-master/app/views/upload.py": {
        "upload": {
            "name": "upload",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "listall": {
            "name": "listall",
            "location": 48,
            "return": [],
            "arguments": {}
        },
        "delete": {
            "name": "delete",
            "location": 67,
            "return": [],
            "arguments": {}
        }
    },
    "sky_tool-master/app/views/user.py": {
        "register": {
            "name": "register",
            "location": 9,
            "return": [
                "dict",
                "int",
                "Type",
                "cmk.utils.type_defs.EventRule"
            ],
            "arguments": {}
        },
        "login": {
            "name": "login",
            "location": 30,
            "return": [
                "List[Dict[str, Any]]",
                "Tuple[str, str]",
                "Optional[bytes]"
            ],
            "arguments": {}
        },
        "logout": {
            "name": "logout",
            "location": 55,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]",
                "Dict[str, dict]"
            ],
            "arguments": {}
        },
        "user_info": {
            "name": "user_info",
            "location": 61,
            "return": [
                "int",
                "flask.testing.FlaskClient"
            ],
            "arguments": {}
        },
        "set_nickname": {
            "name": "set_nickname",
            "location": 74,
            "return": [
                "Dict[str, Any]",
                "int",
                "str",
                "flask.Response",
                "models.Base"
            ],
            "arguments": {}
        }
    },
    "sky_tool-master/app/views/__init__.py": {},
    "sky_tool-master/celery_tasks/email.py": {
        "get_file_path": {
            "name": "get_file_path",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "file": []
            }
        },
        "Connection.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mail": []
            }
        },
        "Connection.__enter__": {
            "name": "__enter__",
            "location": 28,
            "return": [
                "Connection"
            ],
            "arguments": {
                "self": [
                    "_TConnection@@Connection@@"
                ]
            }
        },
        "Connection.__exit__": {
            "name": "__exit__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_value": [
                    "Optional[BaseException]"
                ],
                "tb": []
            }
        },
        "Connection.configure_host": {
            "name": "configure_host",
            "location": 38,
            "return": [
                "smtplib.SMTP"
            ],
            "arguments": {
                "self": []
            }
        },
        "Connection.send": {
            "name": "send",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [],
                "envelop_from": [
                    "None"
                ]
            }
        },
        "Connection.send_message": {
            "name": "send_message",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subject": [],
                "recipients": [],
                "body": [],
                "sender": [],
                "attaches": [],
                "extra_headers": [
                    "None"
                ]
            }
        },
        "Message.send_to": {
            "name": "send_to",
            "location": 108,
            "return": [
                "set[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message._mimetext": {
            "name": "_mimetext",
            "location": 111,
            "return": [
                "email.mime.text.MIMEText"
            ],
            "arguments": {
                "self": [],
                "text": [],
                "subtype": [
                    "typing.Text"
                ]
            }
        },
        "Message._message": {
            "name": "_message",
            "location": 115,
            "return": [
                "email.mime.multipart.MIMEMultipart"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.as_string": {
            "name": "as_string",
            "location": 142,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.as_bytes": {
            "name": "as_bytes",
            "location": 145,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.__str__": {
            "name": "__str__",
            "location": 148,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.__bytes__": {
            "name": "__bytes__",
            "location": 151,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.send": {
            "name": "send",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": []
            }
        },
        "Message.add_recipient": {
            "name": "add_recipient",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "recipient": []
            }
        },
        "Mail.__init__": {
            "name": "__init__",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server": [],
                "username": [],
                "password": [],
                "port": [],
                "use_ssl": [],
                "sender": [],
                "max_emails": []
            }
        },
        "Mail.connect": {
            "name": "connect",
            "location": 186,
            "return": [
                "Connection"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mail.send": {
            "name": "send",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "Mail.send_message": {
            "name": "send_message",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sky_tool-master/celery_tasks/monitor.py": {
        "exec_cmd": {
            "name": "exec_cmd",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "command": []
            }
        },
        "disk_state": {
            "name": "disk_state",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sky_tool-master/celery_tasks/rss.py": {
        "parser_feed": {
            "name": "parser_feed",
            "location": 12,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "feed_url": []
            }
        },
        "parse_inner": {
            "name": "parse_inner",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {
                "url": [],
                "payload": []
            }
        },
        "parse_rss20": {
            "name": "parse_rss20",
            "location": 89,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "item": []
            }
        },
        "parse_rss10": {
            "name": "parse_rss10",
            "location": 134,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "item": []
            }
        },
        "parse_atom": {
            "name": "parse_atom",
            "location": 138,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "item": []
            }
        }
    },
    "sky_tool-master/celery_tasks/tasks.py": {
        "add": {
            "name": "add",
            "location": 34,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "async_email_to": {
            "name": "async_email_to",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "subject": [],
                "body": [],
                "recipients": [],
                "attaches": [],
                "extra_headers": [
                    "None"
                ]
            }
        },
        "async_parser_feed": {
            "name": "async_parser_feed",
            "location": 83,
            "return": [],
            "arguments": {
                "url": [],
                "user_id": [
                    "None"
                ]
            }
        },
        "report_local_ip": {
            "name": "report_local_ip",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "parse_rsses": {
            "name": "parse_rsses",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "CallBackTask.on_success": {
            "name": "on_success",
            "location": 16,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "retval": [],
                "task_id": [],
                "args": [],
                "kwargs": []
            }
        },
        "CallBackTask.on_failure": {
            "name": "on_failure",
            "location": 29,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "exc": [],
                "task_id": [],
                "args": [],
                "kwargs": [],
                "einfo": []
            }
        }
    },
    "sky_tool-master/celery_tasks/__init__.py": {},
    "sky_tool-master/tests/test_rss.py": {},
    "sky_tool-master/tests/test_todo.py": {
        "TestTodo.test_addtodo": {
            "name": "test_addtodo",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTodo.get_todo": {
            "name": "get_todo",
            "location": 17,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "TestTodo.test_finishtodo": {
            "name": "test_finishtodo",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTodo.test_undotodo": {
            "name": "test_undotodo",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTodo.test_removetodo": {
            "name": "test_removetodo",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sky_tool-master/tests/test_tool.py": {
        "app": {
            "name": "app",
            "location": 14,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "client": {
            "name": "client",
            "location": 19,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "test_md5": {
            "name": "test_md5",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_sha512": {
            "name": "test_sha512",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_logging": {
            "name": "test_logging",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sky_tool-master/tests/test_user.py": {
        "app": {
            "name": "app",
            "location": 13,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "client": {
            "name": "client",
            "location": 18,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "TestUser.setup_method": {
            "name": "setup_method",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUser.test_register_on_error": {
            "name": "test_register_on_error",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestUser.test_login": {
            "name": "test_login",
            "location": 41,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestUser.test_user_info": {
            "name": "test_user_info",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestUser.test_nickname": {
            "name": "test_nickname",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        }
    },
    "sky_tool-master/tests/__init__.py": {
        "TestBase.setup_method": {
            "name": "setup_method",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBase.login": {
            "name": "login",
            "location": 15,
            "return": [
                "Text",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
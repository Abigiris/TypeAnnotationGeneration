{
    "slp-master/noxfile.py": {
        "install_reqs": {
            "name": "install_reqs",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "str",
                    "bool",
                    "Tuple[float, float]"
                ]
            }
        },
        "run_lint": {
            "name": "run_lint",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "nox.sessions.Session"
                ]
            }
        },
        "run_typecheck": {
            "name": "run_typecheck",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "run_tests": {
            "name": "run_tests",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "lint": {
            "name": "lint",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "str"
                ]
            }
        },
        "typecheck": {
            "name": "typecheck",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "Dict",
                    "str",
                    "nox.sessions.Session"
                ]
            }
        },
        "tests": {
            "name": "tests",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "nox.sessions.Session"
                ]
            }
        },
        "lintci": {
            "name": "lintci",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "str",
                    "bool",
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]"
                ]
            }
        },
        "typecheckci": {
            "name": "typecheckci",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "str",
                    "bool",
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]"
                ]
            }
        },
        "testsci": {
            "name": "testsci",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "str",
                    "bool",
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]"
                ]
            }
        }
    },
    "slp-master/examples/imdb.py": {},
    "slp-master/examples/imdb_transformer.py": {},
    "slp-master/examples/mnist.py": {
        "get_data": {
            "name": "get_data",
            "location": 51,
            "return": [
                "Tuple[MNIST]",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "get_parser": {
            "name": "get_parser",
            "location": 80,
            "return": [
                "ArgumentParser",
                "argparse.ArgumentParser",
                "argparse._SubParsersAction",
                "argparse._MutuallyExclusiveGroup"
            ],
            "arguments": {}
        },
        "Net.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "intermediate_hidden": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Net.forward": {
            "name": "forward",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "List[int]",
                    "float"
                ]
            }
        }
    },
    "slp-master/examples/mnist_autoencoder.py": {
        "get_data": {
            "name": "get_data",
            "location": 38,
            "return": [
                "Tuple[MNIST]",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "Net.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Net.forward": {
            "name": "forward",
            "location": 24,
            "return": [
                "str",
                "int",
                "float",
                "List[Type]",
                "Set",
                "List[list[int]]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "List"
                ]
            }
        }
    },
    "slp-master/examples/mnist_rnn.py": {
        "get_parser": {
            "name": "get_parser",
            "location": 41,
            "return": [
                "ArgumentParser",
                "argparse.ArgumentParser",
                "argparse._SubParsersAction",
                "argparse._MutuallyExclusiveGroup"
            ],
            "arguments": {}
        },
        "get_data": {
            "name": "get_data",
            "location": 59,
            "return": [
                "Tuple[MNIST]",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "Net.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [
                    "int",
                    "float",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ],
                "hidden_size": [
                    "int",
                    "float",
                    "bool"
                ],
                "num_classes": [
                    "int",
                    "float",
                    "Union[None,int]"
                ],
                "bidirectional": [
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "Net.forward": {
            "name": "forward",
            "location": 34,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "str",
                    "data.AbstractTaggedUnion",
                    "int"
                ],
                "lengths": []
            }
        },
        "get_data.squeeze": {
            "name": "squeeze",
            "location": 80,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        }
    },
    "slp-master/examples/mnist_tune.py": {
        "get_data": {
            "name": "get_data",
            "location": 51,
            "return": [
                "Tuple[Union[bool,str,list,dict[str,None],list[str],dict,None,MNIST]]",
                "Mapping[str,Any]",
                "bytes",
                "bool",
                "IO[bytes]",
                "Dict"
            ],
            "arguments": {
                "seed": [
                    "int",
                    "Dict",
                    "None",
                    "Dict[str,str]"
                ],
                "train": [
                    "bool",
                    "int",
                    "str"
                ],
                "val": [
                    "bool",
                    "int",
                    "Dict[str,Dict[str,Any]]",
                    "Optional[int]"
                ],
                "test": [
                    "bool",
                    "int",
                    "Dict[str,Dict[str,Any]]",
                    "Optional[int]"
                ]
            }
        },
        "get_parser": {
            "name": "get_parser",
            "location": 89,
            "return": [
                "ArgumentParser",
                "argparse.ArgumentParser",
                "argparse._SubParsersAction",
                "argparse._MutuallyExclusiveGroup"
            ],
            "arguments": {}
        },
        "train_mnist": {
            "name": "train_mnist",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict[str,Any]",
                    "pyramid.config.Configurator",
                    "config.Config"
                ],
                "train": [
                    "None",
                    "config.Config",
                    "int",
                    "Event",
                    "cmk.base.config.HostConfig",
                    "Optional[int]"
                ],
                "val": [
                    "None",
                    "config.Config",
                    "int",
                    "Event",
                    "cmk.base.config.HostConfig",
                    "Optional[int]"
                ]
            }
        },
        "configure_search_space": {
            "name": "configure_search_space",
            "location": 147,
            "return": [
                "Dict[str, str]",
                "Dict[str, Any]",
                "Sequence",
                "app.config.MQConfig",
                "List[Tuple[str, str, str, str, str, str, str]]"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "sphinx.config.Config",
                    "pyramid.config.Configurator",
                    "backup.config.Config"
                ]
            }
        },
        "Net.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "intermediate_hidden": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Net.forward": {
            "name": "forward",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "List[int]",
                    "float"
                ]
            }
        }
    },
    "slp-master/examples/mosei_baseline.py": {},
    "slp-master/examples/mosei_m3.py": {},
    "slp-master/examples/mosei_rnn.py": {},
    "slp-master/examples/mosei_transformer.py": {},
    "slp-master/examples/mosei_transformer_tune.py": {
        "get_data": {
            "name": "get_data",
            "location": 30,
            "return": [
                "Tuple[Optional[MOSEI]]",
                "str",
                "int"
            ],
            "arguments": {
                "seed": [
                    "bool",
                    "None",
                    "Tuple[str,int]",
                    "int",
                    "Tuple[Union[str,int]]",
                    "Optional[str]",
                    "str"
                ],
                "remove_pauses": [
                    "bool",
                    "int",
                    "float"
                ],
                "pad": [
                    "Text",
                    "bool",
                    "Tuple[str,int]",
                    "int",
                    "Optional[str]"
                ],
                "max_length": [
                    "int",
                    "bool",
                    "float"
                ],
                "train": [
                    "bool",
                    "float"
                ],
                "val": [
                    "bool",
                    "Tuple[str,int]",
                    "int",
                    "Optional[str]"
                ],
                "test": [
                    "bool",
                    "allennlp.modules.FeedForward",
                    "int",
                    "Optional[int]"
                ],
                "modalities": [
                    "Set[Text]",
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "train_mosei": {
            "name": "train_mosei",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict[str,Any]",
                    "pyramid.config.Configurator",
                    "config.Config"
                ],
                "train": [
                    "bool",
                    "None",
                    "float",
                    "Dict[str,Any]",
                    "int"
                ],
                "val": [
                    "bool",
                    "None",
                    "float",
                    "Dict[str,Any]",
                    "int"
                ]
            }
        },
        "configure_search_space": {
            "name": "configure_search_space",
            "location": 185,
            "return": [
                "Dict[str, str]",
                "Dict[str, Any]",
                "Sequence",
                "app.config.MQConfig",
                "List[Tuple[str, str, str, str, str, str, str]]"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "config.Config",
                    "tracim.config.CFG",
                    "config.ConfigManager"
                ]
            }
        }
    },
    "slp-master/examples/mosi_rnn.py": {},
    "slp-master/examples/mosi_transformer.py": {},
    "slp-master/examples/mosi_tune.py": {
        "get_data": {
            "name": "get_data",
            "location": 34,
            "return": [
                "Tuple[Optional[MOSI]]",
                "str",
                "int"
            ],
            "arguments": {
                "seed": [
                    "bool",
                    "None",
                    "Tuple[str,int]",
                    "int",
                    "Tuple[Union[str,int]]",
                    "Optional[str]",
                    "str"
                ],
                "remove_pauses": [
                    "bool",
                    "int",
                    "float"
                ],
                "pad": [
                    "Text",
                    "bool",
                    "Tuple[str,int]",
                    "int",
                    "Optional[str]"
                ],
                "max_length": [
                    "int",
                    "bool",
                    "float"
                ],
                "train": [
                    "bool",
                    "float",
                    "Dict[str,Any]"
                ],
                "val": [
                    "bool",
                    "Tuple[str,int]",
                    "int",
                    "Optional[str]"
                ],
                "test": [
                    "int",
                    "bool"
                ]
            }
        },
        "get_parser": {
            "name": "get_parser",
            "location": 74,
            "return": [
                "ArgumentParser",
                "argparse.ArgumentParser",
                "argparse._SubParsersAction",
                "argparse._MutuallyExclusiveGroup"
            ],
            "arguments": {}
        },
        "train_mosi": {
            "name": "train_mosi",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Iterable[str]",
                    "pyramid.config.Configurator",
                    "None",
                    "Optional[Iterable[str]]",
                    "Dict"
                ],
                "train": [
                    "bool",
                    "None",
                    "float",
                    "Dict[str,Any]",
                    "int"
                ],
                "val": [
                    "bool",
                    "None",
                    "float",
                    "Dict[str,Any]",
                    "int"
                ]
            }
        },
        "configure_search_space": {
            "name": "configure_search_space",
            "location": 196,
            "return": [
                "Dict[str, str]",
                "Dict[str, Any]",
                "Sequence",
                "app.config.MQConfig",
                "List[Tuple[str, str, str, str, str, str, str]]"
            ],
            "arguments": {
                "config": [
                    "str",
                    "Exception"
                ]
            }
        }
    },
    "slp-master/examples/smt_bert.py": {
        "get_parser": {
            "name": "get_parser",
            "location": 22,
            "return": [
                "ArgumentParser",
                "argparse.ArgumentParser",
                "argparse._SubParsersAction",
                "argparse._MutuallyExclusiveGroup"
            ],
            "arguments": {}
        },
        "get_data": {
            "name": "get_data",
            "location": 34,
            "return": [
                "Tuple[Union[list,dict[str,Any],bytes,str,dict[Any,float],list[str],set[str],int,None,dict[str,str],tuple[Union[Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal]],float]]",
                "Dict",
                "Mapping[str,Any]",
                "Dict[str,Any]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "config": [
                    "Dict[str,Any]",
                    "sphinx.config.Config",
                    "virgene.config.Config"
                ]
            }
        },
        "get_data.filter_neutrals": {
            "name": "filter_neutrals",
            "location": 43,
            "return": [
                "Tuple[list[Text]]",
                "bool",
                "Dict[str,Any]",
                "allennlp.data.Dataset"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bytes",
                    "List[str]",
                    "T",
                    "Sequence[str]",
                    "Optional[Any]",
                    "Union[Mapping, str]"
                ],
                "labels": [
                    "str",
                    "bytes",
                    "List[str]",
                    "T",
                    "Sequence[str]",
                    "Optional[Any]",
                    "Union[Mapping, str]"
                ]
            }
        }
    },
    "slp-master/examples/smt_rnn.py": {},
    "slp-master/examples/template.py": {
        "get_parser": {
            "name": "get_parser",
            "location": 50,
            "return": [
                "ArgumentParser",
                "argparse.ArgumentParser",
                "argparse._SubParsersAction",
                "argparse._MutuallyExclusiveGroup"
            ],
            "arguments": {}
        },
        "setup": {
            "name": "setup",
            "location": 64,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "revlibs.connections.config.Config",
                "qutebrowser.config.config.Config"
            ],
            "arguments": {}
        },
        "get_data": {
            "name": "get_data",
            "location": 74,
            "return": [
                "Tuple[None]",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "get_lightning_module": {
            "name": "get_lightning_module",
            "location": 82,
            "return": [
                "PLModule",
                "str",
                "Tuple",
                "int"
            ],
            "arguments": {
                "config": [
                    "Dict",
                    "Dict[str,Any]",
                    "azafea.config.Config",
                    "pyramid.config.Configurator"
                ]
            }
        },
        "get_lightning_data_module": {
            "name": "get_lightning_data_module",
            "location": 111,
            "return": [
                "PLDataModuleFromDatasets",
                "str",
                "int"
            ],
            "arguments": {
                "config": [
                    "Dict[str,Any]",
                    "pyramid.config.Configurator"
                ]
            }
        },
        "MyCoolNet.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyCoolNet.forward": {
            "name": "forward",
            "location": 20,
            "return": [
                "str",
                "bool",
                "float",
                "Iterable[Iterable[float]]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "str",
                    "bytes",
                    "List",
                    "T"
                ]
            }
        }
    },
    "slp-master/examples/transformer_lm.py": {
        "TransformerLM.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab_size": [
                    "int",
                    "bool",
                    "float"
                ],
                "num_layers": [
                    "int",
                    "Optional[int]"
                ],
                "hidden_size": [
                    "int",
                    "List",
                    "float",
                    "bool"
                ],
                "num_heads": [
                    "int",
                    "Optional[int]"
                ],
                "inner_size": [
                    "int",
                    "Optional[int]"
                ],
                "dropout": [
                    "float",
                    "int",
                    "Optional[int]"
                ],
                "tie_weights": [
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "TransformerLM.init_weights": {
            "name": "init_weights",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransformerLM.forward": {
            "name": "forward",
            "location": 61,
            "return": [
                "int",
                "str",
                "float",
                "Optional[str]",
                "List"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "int",
                    "Callable[str,None]",
                    "Callable[[str],None]",
                    "bool"
                ],
                "targets": [
                    "int",
                    "bool"
                ],
                "source_mask": [
                    "int",
                    "None",
                    "bool"
                ],
                "target_mask": [
                    "str",
                    "None",
                    "int",
                    "List[str]",
                    "Dict"
                ]
            }
        }
    },
    "slp-master/slp/__init__.py": {},
    "slp-master/slp/config/config_parser.py": {
        "make_cli_parser": {
            "name": "make_cli_parser",
            "location": 12,
            "return": [],
            "arguments": {
                "parser": [],
                "datamodule_cls": [
                    "bool"
                ]
            }
        },
        "parse_config": {
            "name": "parse_config",
            "location": 172,
            "return": [],
            "arguments": {
                "parser": [
                    "bool",
                    "typing.Type"
                ],
                "config_file": [
                    "str",
                    "None",
                    "typing.TextIO"
                ],
                "args": [
                    "None"
                ],
                "include_none": [
                    "bool"
                ]
            }
        },
        "generate_example_config": {
            "name": "generate_example_config",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "str",
                    "None",
                    "dict[, ]"
                ],
                "output_file": [
                    "str",
                    "None"
                ],
                "args": [
                    "None"
                ]
            }
        }
    },
    "slp-master/slp/config/multimodal.py": {},
    "slp-master/slp/config/nlp.py": {
        "SPECIAL_TOKENS.has_token": {
            "name": "has_token",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Tuple[Union[str,int]]",
                    "Optional[Tuple[str,int]]",
                    "Callable"
                ],
                "token": [
                    "Optional[Tuple[str,int]]",
                    "Callable",
                    "Tuple[Union[str,int]]",
                    "None"
                ]
            }
        },
        "SPECIAL_TOKENS.to_list": {
            "name": "to_list",
            "location": 41,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "cls": [
                    "List",
                    "List[dict]",
                    "int",
                    "List[Tuple[str,int]]",
                    "List[tuple[Union[str,int]]]"
                ]
            }
        }
    },
    "slp-master/slp/config/omegaconf.py": {
        "_nest": {
            "name": "_nest",
            "location": 10,
            "return": [
                "Optional[dict]"
            ],
            "arguments": {
                "d": [
                    "Dict[str,dict[str,int]]",
                    "Dict[str,str]",
                    "Dict[str,Dict[str,int]]",
                    "bool",
                    "str",
                    "Union[int,float]",
                    "Union[str]"
                ],
                "separator": [
                    "Text",
                    "bool",
                    "Mapping[str,float]",
                    "Exception",
                    "Callable[...,bool]",
                    "Union[int,float]",
                    "List"
                ],
                "include_none": [
                    "bool",
                    "Optional[int]",
                    "Optional[Type[Any]]",
                    "int"
                ]
            }
        },
        "OmegaConfExtended.from_yaml": {
            "name": "from_yaml",
            "location": 56,
            "return": [
                "bool",
                "str",
                "bytes",
                "List[List[int]]",
                "Optional[str]"
            ],
            "arguments": {
                "file_": [
                    "str",
                    "Dict",
                    "None",
                    "Optional[Dict]",
                    "Optional[Directory]"
                ]
            }
        },
        "OmegaConfExtended.from_argparse": {
            "name": "from_argparse",
            "location": 72,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "parser": [
                    "argparse.Namespace"
                ],
                "args": [
                    "None"
                ],
                "include_none": [
                    "Container",
                    "bool"
                ]
            }
        }
    },
    "slp-master/slp/config/__init__.py": {},
    "slp-master/slp/data/cmusdk.py": {
        "download_mmdata": {
            "name": "download_mmdata",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "base_path": [
                    "str"
                ],
                "dataset": [
                    "str"
                ]
            }
        },
        "avg_collapse": {
            "name": "avg_collapse",
            "location": 42,
            "return": [
                "int",
                "typing.Callable[, ]",
                "str"
            ],
            "arguments": {
                "intervals": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ],
                "features": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "deploy": {
            "name": "deploy",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "in_dataset": [],
                "destination": [
                    "int",
                    "list[]",
                    "str",
                    "typing.Sequence[T]"
                ]
            }
        },
        "load_modality": {
            "name": "load_modality",
            "location": 56,
            "return": [],
            "arguments": {
                "base_path": [
                    "str",
                    "list[str]"
                ],
                "feature_cfg": [
                    "list[str]",
                    "str"
                ],
                "modality": []
            }
        },
        "get_vocabulary": {
            "name": "get_vocabulary",
            "location": 65,
            "return": [
                "list[]"
            ],
            "arguments": {
                "text_dataset": []
            }
        },
        "create_word2idx": {
            "name": "create_word2idx",
            "location": 80,
            "return": [
                "dict[str, typing.Union[dict[, ],int]]",
                "int"
            ],
            "arguments": {
                "all_words": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "select_dataset": {
            "name": "select_dataset",
            "location": 95,
            "return": [],
            "arguments": {
                "dataset_name": [
                    "str",
                    "None",
                    "list[str]",
                    "typing.Any",
                    "typing.Callable[, ]",
                    "int"
                ]
            }
        },
        "patch_missing_metadata": {
            "name": "patch_missing_metadata",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "dict[, ]",
                    "str",
                    "dict[str, typing.Any]",
                    "bytes"
                ]
            }
        },
        "load_and_align": {
            "name": "load_and_align",
            "location": 124,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "base_path": [
                    "str"
                ],
                "dataset": [
                    "typing.Text"
                ],
                "feature_cfg": [],
                "modalities": [
                    "set[typing.Text]"
                ],
                "collapse": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "load_dataset": {
            "name": "load_dataset",
            "location": 174,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "base_path": [
                    "str",
                    "dict[, ]",
                    "None"
                ],
                "dataset": [
                    "typing.Text"
                ],
                "feature_cfg": [],
                "modalities": [
                    "set[typing.Text]"
                ],
                "already_segmented": [
                    "bool"
                ]
            }
        },
        "remove_pause_tokens": {
            "name": "remove_pause_tokens",
            "location": 212,
            "return": [
                "tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal]]",
                "str"
            ],
            "arguments": {
                "mods": [
                    "str",
                    "list[int]",
                    "list[str]",
                    "list[]"
                ],
                "modalities": [
                    "dict[str, float]"
                ],
                "is_raw_text_feature": [
                    "str",
                    "list[str]",
                    "bool",
                    "None",
                    "list[dict[str, str]]"
                ]
            }
        },
        "replace_sp_token": {
            "name": "replace_sp_token",
            "location": 224,
            "return": [
                "str",
                "list[float]",
                "list[dict[str, typing.Any]]",
                "list[str]"
            ],
            "arguments": {
                "mods": [
                    "str",
                    "list[float]",
                    "list[dict[str, typing.Any]]",
                    "list[str]"
                ],
                "is_raw_text_feature": [
                    "str",
                    "typing.Iterable[str]",
                    "typing.Callable[str,Any, None]",
                    "typing.MutableMapping"
                ]
            }
        },
        "pad_modality_features": {
            "name": "pad_modality_features",
            "location": 235,
            "return": [],
            "arguments": {
                "mods": [],
                "modalities": [
                    "list[str]",
                    "dict[str, typing.Any]"
                ],
                "max_length": [],
                "pad_front": [
                    "bool",
                    "list[str]",
                    "dict[str, typing.Any]",
                    "float"
                ],
                "pad_back": [
                    "bool",
                    "list[str]",
                    "dict[str, typing.Any]",
                    "float"
                ],
                "is_raw_text_feature": [
                    "bool",
                    "list[str]",
                    "dict[str, typing.Any]",
                    "float"
                ]
            }
        },
        "clean_split_dataset": {
            "name": "clean_split_dataset",
            "location": 277,
            "return": [],
            "arguments": {
                "data": [
                    "dict[, ]",
                    "int",
                    "typing.Sequence[T]",
                    "tuple[typing.Union[int,int,bytearray]]"
                ],
                "dataset": [
                    "typing.Text"
                ],
                "feature_cfg": [],
                "modalities": [
                    "set[typing.Text]"
                ],
                "remove_pauses": [
                    "bool"
                ],
                "max_length": [
                    "int"
                ],
                "pad_front": [
                    "bool"
                ],
                "pad_back": [
                    "bool"
                ],
                "aligned": [
                    "bool"
                ]
            }
        },
        "load_splits": {
            "name": "load_splits",
            "location": 378,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "base_path": [
                    "str"
                ],
                "dataset": [
                    "typing.Text"
                ],
                "feature_cfg": [],
                "modalities": [
                    "set[typing.Text]"
                ],
                "remove_pauses": [
                    "bool"
                ],
                "max_length": [
                    "int"
                ],
                "pad_front": [
                    "bool"
                ],
                "pad_back": [
                    "bool"
                ],
                "already_aligned": [
                    "bool"
                ],
                "align_features": [
                    "bool"
                ],
                "cache": [
                    "None",
                    "bool",
                    "list[typing.Union[str,S]]",
                    "str",
                    "typing.Callable[[], str]",
                    "typing.Sequence[]"
                ]
            }
        },
        "mosi": {
            "name": "mosi",
            "location": 432,
            "return": [],
            "arguments": {
                "base_path": [
                    "int",
                    "str"
                ],
                "feature_cfg": [],
                "modalities": [
                    "set[typing.Text]"
                ],
                "remove_pauses": [
                    "bool"
                ],
                "max_length": [
                    "int"
                ],
                "pad_front": [
                    "bool"
                ],
                "pad_back": [
                    "bool"
                ],
                "cache": [
                    "None",
                    "int",
                    "str"
                ],
                "already_aligned": [
                    "bool"
                ],
                "align_features": [
                    "bool"
                ]
            }
        },
        "mosei": {
            "name": "mosei",
            "location": 459,
            "return": [],
            "arguments": {
                "base_path": [
                    "int",
                    "str"
                ],
                "feature_cfg": [],
                "modalities": [
                    "set[typing.Text]"
                ],
                "remove_pauses": [
                    "bool"
                ],
                "max_length": [
                    "int"
                ],
                "pad_front": [
                    "bool"
                ],
                "pad_back": [
                    "bool"
                ],
                "cache": [
                    "None",
                    "int",
                    "str"
                ],
                "already_aligned": [
                    "bool"
                ],
                "align_features": [
                    "bool"
                ]
            }
        },
        "pom": {
            "name": "pom",
            "location": 486,
            "return": [],
            "arguments": {
                "base_path": [
                    "int",
                    "str"
                ],
                "feature_cfg": [],
                "modalities": [
                    "set[typing.Text]"
                ],
                "remove_pauses": [
                    "bool"
                ],
                "max_length": [
                    "int"
                ],
                "pad_front": [
                    "bool"
                ],
                "pad_back": [
                    "bool"
                ],
                "cache": [
                    "None",
                    "int",
                    "str"
                ],
                "already_aligned": [
                    "bool"
                ],
                "align_features": [
                    "bool"
                ]
            }
        },
        "data_pickle": {
            "name": "data_pickle",
            "location": 513,
            "return": [
                "tuple[typing.Union[str,dict[str, typing.Any],None]]"
            ],
            "arguments": {
                "fname": [
                    "str"
                ]
            }
        },
        "pad_modality_features.compute_padding": {
            "name": "compute_padding",
            "location": 241,
            "return": [
                "list[]"
            ],
            "arguments": {
                "m": [],
                "seglen": []
            }
        }
    },
    "slp-master/slp/data/collators.py": {
        "SequenceClassificationCollator.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pad_indx": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "max_length": [
                    "int",
                    "Optional[int]",
                    "float"
                ],
                "device": [
                    "Text",
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ]
            }
        },
        "SequenceClassificationCollator.__call__": {
            "name": "__call__",
            "location": 29,
            "return": [
                "util.IDM",
                "Tuple"
            ],
            "arguments": {
                "self": [],
                "batch": [
                    "List[str]"
                ]
            }
        },
        "Seq2SeqCollator.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pad_indx": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "max_length": [
                    "int",
                    "Optional[int]",
                    "float"
                ],
                "device": [
                    "Text",
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ]
            }
        },
        "Seq2SeqCollator.__call__": {
            "name": "__call__",
            "location": 81,
            "return": [
                "Tuple",
                "starlette.types.Receive",
                "Callable",
                "starlette.types.Send",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "batch": [
                    "List[str]"
                ]
            }
        },
        "MultimodalSequenceClassificationCollator.__init__": {
            "name": "__init__",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pad_indx": [
                    "int",
                    "List[List[str]]",
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "modalities": [
                    "Set[Text]",
                    "int",
                    "List[List[str]]",
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "label_key": [
                    "Text",
                    "str",
                    "List[Dict[str,Any]]",
                    "Optional[str]",
                    "Dict",
                    "Mapping",
                    "starfish.core.util.logging.Log",
                    "bytes",
                    "bool"
                ],
                "max_length": [
                    "int",
                    "List[float]",
                    "List[str]"
                ],
                "label_dtype": [
                    "int",
                    "List[List[str]]",
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "device": [
                    "Text",
                    "int",
                    "List[List[str]]",
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "MultimodalSequenceClassificationCollator.extract_sequence": {
            "name": "extract_sequence",
            "location": 154,
            "return": [
                "List[Text]",
                "str",
                "Callable[,bool]",
                "Tuple",
                "int",
                "List[int]",
                "List[float]",
                "object"
            ],
            "arguments": {
                "self": [],
                "batch": [
                    "str",
                    "bytes",
                    "Union[int,slice]",
                    "KT"
                ],
                "key": [
                    "int",
                    "str",
                    "Union[int,slice]",
                    "KT",
                    "bytes"
                ]
            }
        },
        "MultimodalSequenceClassificationCollator.__call__": {
            "name": "__call__",
            "location": 157,
            "return": [
                "Tuple[dict]",
                "str",
                "torch.Tensor"
            ],
            "arguments": {
                "self": [],
                "batch": [
                    "Dict",
                    "Optional[Dict]",
                    "int"
                ]
            }
        }
    },
    "slp-master/slp/data/corpus.py": {
        "create_vocab": {
            "name": "create_vocab",
            "location": 17,
            "return": [],
            "arguments": {
                "corpus": [
                    "str"
                ],
                "vocab_size": [
                    "int"
                ],
                "special_tokens": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "create_vocab.take0": {
            "name": "take0",
            "location": 60,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "create_vocab.token_freq": {
            "name": "token_freq",
            "location": 72,
            "return": [
                "int"
            ],
            "arguments": {
                "t": []
            }
        },
        "EmbeddingsLoader.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "embeddings_file": [
                    "str",
                    "bool",
                    "typing.Callable[float, None]"
                ],
                "dim": [
                    "bool",
                    "None",
                    "float",
                    "typing.Iterator"
                ],
                "vocab": [
                    "None",
                    "bool",
                    "float",
                    "typing.Iterator"
                ],
                "extra_tokens": [
                    "None",
                    "bool",
                    "float",
                    "typing.Iterator"
                ]
            }
        },
        "EmbeddingsLoader.__repr__": {
            "name": "__repr__",
            "location": 107,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmbeddingsLoader.in_accepted_vocab": {
            "name": "in_accepted_vocab",
            "location": 112,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "str",
                    "None",
                    "float",
                    "int"
                ]
            }
        },
        "EmbeddingsLoader._get_cache_name": {
            "name": "_get_cache_name",
            "location": 124,
            "return": [
                "str",
                "list[str]",
                "dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmbeddingsLoader._dump_cache": {
            "name": "_dump_cache",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "typing.Callable[bytes, bytes]",
                    "list[str]"
                ]
            }
        },
        "EmbeddingsLoader._load_cache": {
            "name": "_load_cache",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EmbeddingsLoader.augment_embeddings": {
            "name": "augment_embeddings",
            "location": 163,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "word2idx": [],
                "idx2word": [],
                "embeddings": [],
                "token": [
                    "int"
                ],
                "emb": [
                    "None",
                    "str",
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "EmbeddingsLoader.load": {
            "name": "load",
            "location": 194,
            "return": [
                "int",
                "tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal]]",
                "typing.Type",
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordCorpus.__init__": {
            "name": "__init__",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "int",
                    "float",
                    "list[typing.Any]",
                    "None",
                    "str"
                ],
                "limit_vocab_size": [
                    "int"
                ],
                "word2idx": [
                    "None",
                    "int",
                    "bytes"
                ],
                "idx2word": [
                    "None",
                    "float",
                    "int",
                    "tuple[typing.Union[str,int]]"
                ],
                "embeddings": [
                    "None",
                    "tuple[typing.Union[str,int]]",
                    "float"
                ],
                "embeddings_file": [
                    "None",
                    "str",
                    "bool"
                ],
                "embeddings_dim": [
                    "int"
                ],
                "lower": [
                    "bool"
                ],
                "special_tokens": [],
                "prepend_bos": [
                    "bool"
                ],
                "append_eos": [
                    "bool"
                ],
                "lang": [
                    "typing.Text"
                ],
                "max_length": [
                    "int"
                ]
            }
        },
        "WordCorpus.vocab_size": {
            "name": "vocab_size",
            "location": 417,
            "return": [
                "int"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "float",
                    "list[int]",
                    "list['Product']",
                    "str"
                ]
            }
        },
        "WordCorpus.frequencies": {
            "name": "frequencies",
            "location": 430,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "float"
                ]
            }
        },
        "WordCorpus.vocab": {
            "name": "vocab",
            "location": 440,
            "return": [
                "set[]"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "str",
                    "int",
                    "None",
                    "typing.Callable[, ]"
                ]
            }
        },
        "WordCorpus.embeddings": {
            "name": "embeddings",
            "location": 450,
            "return": [],
            "arguments": {
                "cls": [
                    "complex",
                    "bytes",
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "WordCorpus.word2idx": {
            "name": "word2idx",
            "location": 460,
            "return": [],
            "arguments": {
                "cls": [
                    "int",
                    "bytes"
                ]
            }
        },
        "WordCorpus.idx2word": {
            "name": "idx2word",
            "location": 470,
            "return": [],
            "arguments": {
                "cls": [
                    "int",
                    "None",
                    "BaseException",
                    "str"
                ]
            }
        },
        "WordCorpus.tokenized": {
            "name": "tokenized",
            "location": 480,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "float"
                ]
            }
        },
        "WordCorpus.indices": {
            "name": "indices",
            "location": 490,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "float"
                ]
            }
        },
        "WordCorpus.raw": {
            "name": "raw",
            "location": 500,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "float"
                ]
            }
        },
        "WordCorpus.__len__": {
            "name": "__len__",
            "location": 509,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordCorpus.__getitem__": {
            "name": "__getitem__",
            "location": 518,
            "return": [],
            "arguments": {
                "self": [],
                "idx": [
                    "int",
                    "list[int]",
                    "str"
                ]
            }
        },
        "HfCorpus.__init__": {
            "name": "__init__",
            "location": 537,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "bool",
                    "typing.Callable[, ]",
                    "str",
                    "None"
                ],
                "lower": [
                    "bool"
                ],
                "tokenizer_model": [
                    "typing.Text"
                ],
                "add_special_tokens": [
                    "bool"
                ],
                "special_tokens": [],
                "max_length": [
                    "int"
                ]
            }
        },
        "HfCorpus.vocab_size": {
            "name": "vocab_size",
            "location": 594,
            "return": [],
            "arguments": {
                "cls": [
                    "int",
                    "float",
                    "list[int]",
                    "str",
                    "list['Product']"
                ]
            }
        },
        "HfCorpus.frequencies": {
            "name": "frequencies",
            "location": 605,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "float"
                ]
            }
        },
        "HfCorpus.vocab": {
            "name": "vocab",
            "location": 615,
            "return": [
                "set[]"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "str",
                    "int",
                    "None",
                    "typing.Callable[, ]"
                ]
            }
        },
        "HfCorpus.embeddings": {
            "name": "embeddings",
            "location": 625,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "HfCorpus.word2idx": {
            "name": "word2idx",
            "location": 631,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "list[dict[, ]]",
                    "typing.Type",
                    "str",
                    "list[int]",
                    "list[str]",
                    "dict[, ]"
                ]
            }
        },
        "HfCorpus.idx2word": {
            "name": "idx2word",
            "location": 637,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "typing.Type"
                ]
            }
        },
        "HfCorpus.tokenized": {
            "name": "tokenized",
            "location": 643,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "float"
                ]
            }
        },
        "HfCorpus.indices": {
            "name": "indices",
            "location": 653,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "float"
                ]
            }
        },
        "HfCorpus.raw": {
            "name": "raw",
            "location": 663,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "float"
                ]
            }
        },
        "HfCorpus.__len__": {
            "name": "__len__",
            "location": 672,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "HfCorpus.__getitem__": {
            "name": "__getitem__",
            "location": 681,
            "return": [],
            "arguments": {
                "self": [],
                "idx": [
                    "int",
                    "list[int]",
                    "str"
                ]
            }
        },
        "TokenizedCorpus.__init__": {
            "name": "__init__",
            "location": 700,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "str"
                ],
                "word2idx": [
                    "None",
                    "bytes",
                    "str"
                ],
                "special_tokens": [],
                "max_length": [
                    "int"
                ]
            }
        },
        "TokenizedCorpus.vocab_size": {
            "name": "vocab_size",
            "location": 754,
            "return": [
                "int"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "typing.ClassVar",
                    "typing.Type"
                ]
            }
        },
        "TokenizedCorpus.frequencies": {
            "name": "frequencies",
            "location": 764,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "float"
                ]
            }
        },
        "TokenizedCorpus.vocab": {
            "name": "vocab",
            "location": 774,
            "return": [
                "set[]"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "str",
                    "int",
                    "None",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TokenizedCorpus.embeddings": {
            "name": "embeddings",
            "location": 784,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "TokenizedCorpus.word2idx": {
            "name": "word2idx",
            "location": 790,
            "return": [],
            "arguments": {
                "cls": [
                    "int",
                    "list[int]",
                    "list[dict[, ]]",
                    "list[T]"
                ]
            }
        },
        "TokenizedCorpus.idx2word": {
            "name": "idx2word",
            "location": 800,
            "return": [],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "TokenizedCorpus.tokenized": {
            "name": "tokenized",
            "location": 810,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "float"
                ]
            }
        },
        "TokenizedCorpus.indices": {
            "name": "indices",
            "location": 820,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "float"
                ]
            }
        },
        "TokenizedCorpus.raw": {
            "name": "raw",
            "location": 830,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "float"
                ]
            }
        },
        "TokenizedCorpus.__len__": {
            "name": "__len__",
            "location": 839,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenizedCorpus.__getitem__": {
            "name": "__getitem__",
            "location": 848,
            "return": [],
            "arguments": {
                "self": [],
                "idx": [
                    "int",
                    "list[int]",
                    "str"
                ]
            }
        }
    },
    "slp-master/slp/data/datasets.py": {
        "CorpusLMDataset.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "CorpusLMDataset.map": {
            "name": "map",
            "location": 26,
            "return": [
                "CorpusLMDataset",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "int",
                    "mode.utils.Deque[T]",
                    "T"
                ]
            }
        },
        "CorpusLMDataset.__len__": {
            "name": "__len__",
            "location": 39,
            "return": [
                "int",
                "str",
                "io.BytesIO"
            ],
            "arguments": {
                "self": []
            }
        },
        "CorpusLMDataset.__getitem__": {
            "name": "__getitem__",
            "location": 48,
            "return": [
                "Tuple[Union[str,int,list[int],dict[str,Union[Any,Any,Any,Any]],None]]",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "bool",
                    "Dict",
                    "str",
                    "None",
                    "_types.Image",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "CorpusDataset.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "List[str]",
                    "List[allennlp.data.tokenizers.Token]",
                    "Set[str]",
                    "DefaultDict[int,List[Any]]",
                    "DefaultDict",
                    "List[Tuple[int,int]]",
                    "List[tuple[Union[int,int]]]"
                ],
                "labels": [
                    "List[str]",
                    "List[allennlp.data.tokenizers.Token]",
                    "List",
                    "List[tuple[Union[int,int]]]",
                    "int",
                    "List[int]",
                    "Set[str]",
                    "List[Tuple[int,int]]",
                    "DefaultDict[int,List[Any]]"
                ]
            }
        },
        "CorpusDataset.map": {
            "name": "map",
            "location": 83,
            "return": [
                "CorpusDataset",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "int",
                    "mode.utils.Deque[T]",
                    "T"
                ]
            }
        },
        "CorpusDataset.__len__": {
            "name": "__len__",
            "location": 96,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CorpusDataset.__getitem__": {
            "name": "__getitem__",
            "location": 105,
            "return": [
                "str",
                "Tuple[Union[str,bool,float,list[int]]]"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "str",
                    "int",
                    "Callable[str,None]",
                    "Callable[[str],None]",
                    "bool"
                ]
            }
        },
        "ImageFolderLMDB.__init__": {
            "name": "__init__",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db_path": [
                    "str"
                ],
                "transform": [
                    "Dict",
                    "None",
                    "Optional[str]",
                    "List[Dict]",
                    "str",
                    "allennlp.data.Vocabulary",
                    "List[dict]",
                    "MutableMapping[str,str]",
                    "MutableMapping"
                ],
                "target_transform": [
                    "str",
                    "None",
                    "int",
                    "Optional[int]",
                    "io.IOBase"
                ]
            }
        },
        "ImageFolderLMDB.loads_data": {
            "name": "loads_data",
            "location": 143,
            "return": [
                "str",
                "Dict[str, List[int]]",
                "int",
                "Optional[float]",
                "bool",
                "Set[cmk.utils.type_defs.HostName]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "buf": [
                    "bytes",
                    "str",
                    "IO",
                    "pymatgen.io.vasp.inputs.Poscar"
                ]
            }
        },
        "ImageFolderLMDB.__getitem__": {
            "name": "__getitem__",
            "location": 146,
            "return": [
                "Tuple",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "Dict[str,Any]",
                    "str",
                    "List",
                    "raiden.utils.Dict[str,raiden.utils.Any]"
                ]
            }
        },
        "ImageFolderLMDB.__len__": {
            "name": "__len__",
            "location": 175,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageFolderLMDB.__repr__": {
            "name": "__repr__",
            "location": 178,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "slp-master/slp/data/multimodal.py": {
        "binarize": {
            "name": "binarize",
            "location": 64,
            "return": [
                "float",
                "bool",
                "utils.Node",
                "numpy.ndarray"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "bytes",
                    "numpy.ndarray"
                ]
            }
        },
        "MMDataset.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str,Any]",
                    "bytes",
                    "Dict[str,str]",
                    "List",
                    "str",
                    "Optional[Dict[str,Any]]",
                    "None"
                ],
                "modalities": [
                    "Set[Text]",
                    "Dict[str,List[Callable]]",
                    "List[Dict[str,Any]]",
                    "Dict[str,Set[str]]",
                    "Dict",
                    "Dict[int,List[Any]]",
                    "List[str]",
                    "List[int]",
                    "int"
                ]
            }
        },
        "MMDataset.map": {
            "name": "map",
            "location": 24,
            "return": [
                "MMDataset",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "str",
                    "List",
                    "Tuple",
                    "Callable[,None]"
                ],
                "modality": [
                    "str",
                    "List[List[int]]",
                    "List[list[int]]"
                ],
                "lazy": [
                    "bool",
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict"
                ]
            }
        },
        "MMDataset.apply_transforms": {
            "name": "apply_transforms",
            "location": 34,
            "return": [
                "MMDataset",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MMDataset.__len__": {
            "name": "__len__",
            "location": 51,
            "return": [
                "int",
                "raiden.utils.signer.Signer",
                "str",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MMDataset.__getitem__": {
            "name": "__getitem__",
            "location": 54,
            "return": [
                "Dict",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "bool",
                    "torch.Tensor",
                    "str",
                    "Sequence[tuple[Union[float,float]]]",
                    "Sequence[Tuple[float,float]]"
                ]
            }
        },
        "MOSI.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bool",
                    "List[int]",
                    "List"
                ],
                "modalities": [
                    "Set[Text]",
                    "int",
                    "float",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "text_is_tokens": [
                    "bool",
                    "Optional[bool]",
                    "Tuple[Any,int,Dict[str,str]]"
                ],
                "binary": [
                    "bool",
                    "List[int]",
                    "List"
                ]
            }
        },
        "MOSEI.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bool",
                    "Optional[int]",
                    "None",
                    "Callable",
                    "Optional[dict]",
                    "Dict",
                    "Optional[List]",
                    "List"
                ],
                "modalities": [
                    "Set[Text]",
                    "bool",
                    "float",
                    "torch.FloatTensor",
                    "List[List[str]]",
                    "Callable[[str],Any]"
                ],
                "text_is_tokens": [
                    "bool",
                    "Optional[bool]",
                    "Optional[str]"
                ],
                "label_selector": [
                    "None",
                    "Optional[str]",
                    "Dict[str,np.ndarray]",
                    "str",
                    "bool",
                    "Optional[bool]",
                    "Optional[torch.Tensor]",
                    "Tuple[Union[float,float]]",
                    "Optional[Tuple[float,float]]"
                ]
            }
        },
        "MOSI.__init__.label_selector": {
            "name": "label_selector",
            "location": 78,
            "return": [
                "bool",
                "Tuple[int, int]",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "l": [
                    "Dict[str, Set[str]]",
                    "Dict[str, Any]",
                    "dict",
                    "Iterable[T]",
                    "Mapping[str, Mapping[str, Any]]"
                ]
            }
        },
        "MOSEI.__init__.default_label_selector": {
            "name": "default_label_selector",
            "location": 103,
            "return": [
                "List[str]",
                "str",
                "List[Mapping[str, Any]]",
                "dict",
                "Iterable[str]"
            ],
            "arguments": {
                "l": [
                    "numpy.ndarray",
                    "bool"
                ]
            }
        }
    },
    "slp-master/slp/data/transforms.py": {
        "SentencepieceTokenizer.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lower": [
                    "bool",
                    "Optional[Union[IPUtilityFunction,UtilityDistribution]]"
                ],
                "model": [
                    "bytes",
                    "None",
                    "str",
                    "IO",
                    "Union[str,IO]",
                    "IO[str]"
                ],
                "prepend_bos": [
                    "bool",
                    "Dict",
                    "int",
                    "List[int]"
                ],
                "append_eos": [
                    "bool",
                    "Dict",
                    "int",
                    "List[int]"
                ],
                "specials": [
                    "list",
                    "Dict[str, List]",
                    "Optional[str]"
                ]
            }
        },
        "SentencepieceTokenizer.__call__": {
            "name": "__call__",
            "location": 47,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bytes",
                    "str",
                    "List[int]",
                    "int",
                    "List",
                    "Sequence[T]",
                    "Union[int,List[int]]"
                ]
            }
        },
        "HuggingFaceTokenizer.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lower": [
                    "bool",
                    "torch.nn.Module",
                    "torch.Tensor",
                    "str"
                ],
                "model": [
                    "Text",
                    "bool",
                    "torch.nn.Module",
                    "torch.Tensor",
                    "str"
                ],
                "add_special_tokens": [
                    "bool",
                    "Dict[str,Any]",
                    "str"
                ]
            }
        },
        "HuggingFaceTokenizer.detokenize": {
            "name": "detokenize",
            "location": 80,
            "return": [
                "List[str]",
                "str",
                "Optional[Union[str,Any]]",
                "Set[str]",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "List[str]",
                    "int",
                    "str",
                    "Union[str,List[str]]",
                    "Iterable[str]"
                ]
            }
        },
        "HuggingFaceTokenizer.__call__": {
            "name": "__call__",
            "location": 92,
            "return": [
                "List[int]",
                "Set[str]",
                "Optional[Union[str,Any]]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "List[int]",
                    "int",
                    "List",
                    "Sequence[T]",
                    "bytes",
                    "str",
                    "Union[int,List[int]]"
                ]
            }
        },
        "SpacyTokenizer.__init__": {
            "name": "__init__",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lower": [
                    "bool",
                    "int",
                    "float"
                ],
                "prepend_bos": [
                    "bool",
                    "int",
                    "Dict[str,Any]",
                    "Union[str,int]"
                ],
                "append_eos": [
                    "bool",
                    "int",
                    "Dict[str,Any]",
                    "Union[str,int]"
                ],
                "specials": [
                    "List[str]",
                    "int",
                    "str",
                    "float"
                ],
                "lang": [
                    "Text",
                    "Dict",
                    "IO",
                    "List[str]",
                    "str",
                    "bytes"
                ]
            }
        },
        "SpacyTokenizer.get_nlp": {
            "name": "get_nlp",
            "location": 136,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Text"
                ],
                "specials": [
                    "Optional[str]",
                    "str",
                    "Optional[List[str]]",
                    "int"
                ]
            }
        },
        "SpacyTokenizer.__call__": {
            "name": "__call__",
            "location": 156,
            "return": [
                "Set[str]",
                "Optional[Union[str, Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "List[str]",
                    "Union[str,List[str]]",
                    "List[Tuple[str,int]]",
                    "List",
                    "denite.util.UserContext"
                ]
            }
        },
        "ToTokenIds.__init__": {
            "name": "__init__",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "word2idx": [
                    "bytes",
                    "str",
                    "List",
                    "Union[List[str],str]",
                    "List[str]",
                    "List[Tuple[bool,str]]",
                    "List[tuple[Union[bool,str]]]"
                ],
                "specials": [
                    "float",
                    "str",
                    "Generator",
                    "List[str]"
                ]
            }
        },
        "ToTokenIds.__call__": {
            "name": "__call__",
            "location": 188,
            "return": [
                "List",
                "Tuple[Tuple[int,Any]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ]
            }
        },
        "ReplaceUnknownToken.__init__": {
            "name": "__init__",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "old_unk": [
                    "Text",
                    "int",
                    "Dict[str,Tuple[str,str]]",
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "new_unk": [
                    "str",
                    "torch.Tensor",
                    "Tuple[int, int]",
                    "float"
                ]
            }
        },
        "ReplaceUnknownToken.__call__": {
            "name": "__call__",
            "location": 218,
            "return": [
                "util.IDM",
                "List"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ]
            }
        },
        "ToTensor.__init__": {
            "name": "__init__",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device": [
                    "Text",
                    "int",
                    "bool",
                    "float"
                ],
                "dtype": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ToTensor.__call__": {
            "name": "__call__",
            "location": 241,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "util.ArrayLike",
                    "int"
                ]
            }
        }
    },
    "slp-master/slp/data/__init__.py": {},
    "slp-master/slp/modules/attention.py": {
        "reset_parameters": {
            "name": "reset_parameters",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "named_parameters": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "split_heads": {
            "name": "split_heads",
            "location": 22,
            "return": [],
            "arguments": {
                "x": [],
                "num_heads": [
                    "int"
                ]
            }
        },
        "merge_heads": {
            "name": "merge_heads",
            "location": 40,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "attention_scores": {
            "name": "attention_scores",
            "location": 58,
            "return": [],
            "arguments": {
                "k": [],
                "q": [
                    "str",
                    "bytes",
                    "int",
                    "float"
                ],
                "dk": [
                    "str",
                    "bytes",
                    "int",
                    "float"
                ],
                "attention_mask": [
                    "float",
                    "None",
                    "int"
                ],
                "dropout": [
                    "float"
                ],
                "training": [
                    "bool"
                ]
            }
        },
        "attention": {
            "name": "attention",
            "location": 99,
            "return": [
                "tuple[typing.Union[list[float],dict[tuple[typing.Union[typing.Any,typing.Any]], typing.Any],float,list[]]]"
            ],
            "arguments": {
                "k": [
                    "bool",
                    "list[str]",
                    "str",
                    "float"
                ],
                "q": [
                    "bool",
                    "list[str]",
                    "str",
                    "float"
                ],
                "v": [
                    "int",
                    "None"
                ],
                "dk": [
                    "bool",
                    "list[str]",
                    "str",
                    "float"
                ],
                "attention_mask": [
                    "None",
                    "bool",
                    "list[str]",
                    "str",
                    "float"
                ],
                "dropout": [
                    "float"
                ],
                "training": [
                    "bool"
                ]
            }
        },
        "pad_for_nystrom": {
            "name": "pad_for_nystrom",
            "location": 141,
            "return": [
                "tuple[None]"
            ],
            "arguments": {
                "x": [],
                "num_landmarks": [
                    "int"
                ],
                "attention_mask": [
                    "None"
                ]
            }
        },
        "nystrom_attention": {
            "name": "nystrom_attention",
            "location": 176,
            "return": [
                "tuple[tuple[]]"
            ],
            "arguments": {
                "k": [],
                "q": [
                    "int",
                    "float",
                    "None"
                ],
                "v": [
                    "bool",
                    "set[]",
                    "None"
                ],
                "dk": [
                    "bool",
                    "str",
                    "None",
                    "float"
                ],
                "num_landmarks": [
                    "int",
                    "float",
                    "None"
                ],
                "attention_mask": [
                    "None",
                    "str",
                    "int",
                    "list[]",
                    "float"
                ],
                "inverse_iterations": [
                    "int"
                ],
                "dropout": [
                    "float"
                ],
                "training": [
                    "bool"
                ]
            }
        },
        "SelfAttention.__init__": {
            "name": "__init__",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attention_size": [
                    "int"
                ],
                "input_size": [
                    "None",
                    "int",
                    "tuple[]"
                ],
                "dropout": [
                    "float"
                ]
            }
        },
        "SelfAttention.forward": {
            "name": "forward",
            "location": 316,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "str",
                    "typing.Iterable[float]"
                ],
                "attention_mask": [
                    "None",
                    "tuple[]"
                ]
            }
        },
        "Attention.__init__": {
            "name": "__init__",
            "location": 361,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attention_size": [
                    "int"
                ],
                "input_size": [
                    "None",
                    "int",
                    "typing.Callable[, ]"
                ],
                "dropout": [
                    "float"
                ]
            }
        },
        "Attention.forward": {
            "name": "forward",
            "location": 386,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "keys": [
                    "list[str]",
                    "int",
                    "str",
                    "None",
                    "dict[, ]"
                ],
                "queries": [
                    "None",
                    "str",
                    "dict[, ]",
                    "tuple[typing.Union[typing.Any,typing.Any]]",
                    "bytes",
                    "int"
                ],
                "attention_mask": [
                    "None",
                    "int",
                    "typing.Any",
                    "str",
                    "list[str]"
                ]
            }
        },
        "MultiheadSelfAttention.__init__": {
            "name": "__init__",
            "location": 440,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attention_size": [
                    "int"
                ],
                "num_heads": [
                    "int"
                ],
                "input_size": [
                    "None",
                    "int",
                    "float",
                    "tuple[]"
                ],
                "dropout": [
                    "float"
                ],
                "nystrom": [
                    "bool"
                ],
                "num_landmarks": [
                    "int"
                ],
                "inverse_iterations": [
                    "int"
                ],
                "kernel_size": [
                    "int",
                    "None"
                ]
            }
        },
        "MultiheadSelfAttention.forward": {
            "name": "forward",
            "location": 489,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "attention_mask": [
                    "None"
                ]
            }
        },
        "MultiheadAttention.__init__": {
            "name": "__init__",
            "location": 578,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attention_size": [
                    "int"
                ],
                "num_heads": [
                    "int"
                ],
                "input_size": [
                    "None",
                    "int",
                    "list[float]",
                    "float"
                ],
                "dropout": [
                    "float"
                ],
                "nystrom": [
                    "bool"
                ],
                "num_landmarks": [
                    "int"
                ],
                "inverse_iterations": [
                    "int"
                ],
                "kernel_size": [
                    "int",
                    "None"
                ]
            }
        },
        "MultiheadAttention.forward": {
            "name": "forward",
            "location": 633,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "keys": [],
                "queries": [
                    "None",
                    "str",
                    "dict[, ]",
                    "tuple[typing.Union[typing.Any,typing.Any]]",
                    "bytes",
                    "int"
                ],
                "attention_mask": [
                    "None",
                    "int",
                    "str",
                    "typing.Iterable[]",
                    "float"
                ]
            }
        },
        "MultiheadTwowayAttention.__init__": {
            "name": "__init__",
            "location": 730,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attention_size": [
                    "int"
                ],
                "input_size": [
                    "None",
                    "int",
                    "float"
                ],
                "dropout": [
                    "float"
                ],
                "num_heads": [
                    "int"
                ],
                "residual": [
                    "bool"
                ],
                "nystrom": [
                    "bool"
                ],
                "num_landmarks": [
                    "int"
                ],
                "inverse_iterations": [
                    "int"
                ],
                "kernel_size": [
                    "None",
                    "int",
                    "float"
                ]
            }
        },
        "MultiheadTwowayAttention.forward": {
            "name": "forward",
            "location": 791,
            "return": [
                "tuple[typing.Union[int,str]]"
            ],
            "arguments": {
                "self": [],
                "mod1": [
                    "str",
                    "bool"
                ],
                "mod2": [
                    "str",
                    "bool"
                ],
                "attention_mask": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "slp-master/slp/modules/classifier.py": {
        "Classifier.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "encoder": [
                    "int",
                    "dict[str, typing.Any]",
                    "str"
                ],
                "encoded_features": [
                    "str",
                    "int",
                    "typing.Type",
                    "list[bytes]"
                ],
                "num_classes": [
                    "str",
                    "int",
                    "typing.Type",
                    "list[bytes]"
                ],
                "dropout": [
                    "float"
                ]
            }
        },
        "Classifier.forward": {
            "name": "forward",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TransformerSequenceClassifier.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_classes": [
                    "str",
                    "None",
                    "int",
                    "float",
                    "typing.Type"
                ],
                "num_layers": [
                    "int"
                ],
                "hidden_size": [
                    "int"
                ],
                "num_heads": [
                    "int"
                ],
                "max_length": [
                    "int"
                ],
                "inner_size": [
                    "int"
                ],
                "dropout": [
                    "float"
                ],
                "nystrom": [
                    "bool"
                ],
                "num_landmarks": [
                    "int"
                ],
                "kernel_size": [
                    "None",
                    "int"
                ],
                "prenorm": [
                    "bool"
                ],
                "scalenorm": [
                    "bool"
                ]
            }
        },
        "TransformerTokenSequenceClassifier.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_classes": [
                    "str",
                    "int",
                    "dict[str, str]"
                ],
                "vocab_size": [
                    "int"
                ],
                "num_layers": [
                    "int"
                ],
                "hidden_size": [
                    "int"
                ],
                "num_heads": [
                    "int"
                ],
                "max_length": [
                    "int"
                ],
                "inner_size": [
                    "int"
                ],
                "dropout": [
                    "float"
                ],
                "nystrom": [
                    "bool"
                ],
                "num_landmarks": [
                    "int"
                ],
                "kernel_size": [
                    "None",
                    "int"
                ],
                "prenorm": [
                    "bool"
                ],
                "scalenorm": [
                    "bool"
                ]
            }
        },
        "RNNSequenceClassifier.__init__": {
            "name": "__init__",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [
                    "int",
                    "None"
                ],
                "num_classes": [
                    "str",
                    "int",
                    "None"
                ],
                "hidden_size": [
                    "int"
                ],
                "batch_first": [
                    "bool"
                ],
                "layers": [
                    "int"
                ],
                "bidirectional": [
                    "bool"
                ],
                "merge_bi": [
                    "typing.Text"
                ],
                "dropout": [
                    "float"
                ],
                "rnn_type": [
                    "typing.Text"
                ],
                "packed_sequence": [
                    "bool"
                ],
                "attention": [
                    "bool"
                ],
                "max_length": [
                    "int"
                ],
                "num_heads": [
                    "int"
                ],
                "nystrom": [
                    "bool"
                ],
                "num_landmarks": [
                    "int"
                ],
                "kernel_size": [
                    "int"
                ],
                "inverse_iterations": [
                    "int"
                ]
            }
        },
        "RNNTokenSequenceClassifier.__init__": {
            "name": "__init__",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_classes": [
                    "str",
                    "None",
                    "int"
                ],
                "vocab_size": [
                    "None",
                    "int",
                    "typing.Callable[, ]",
                    "str",
                    "float"
                ],
                "embeddings_dim": [
                    "None",
                    "int",
                    "typing.Callable[, ]",
                    "str",
                    "float"
                ],
                "embeddings": [
                    "None",
                    "int",
                    "typing.Callable[, ]",
                    "str",
                    "float"
                ],
                "embeddings_dropout": [
                    "float"
                ],
                "finetune_embeddings": [
                    "bool"
                ],
                "hidden_size": [
                    "int"
                ],
                "batch_first": [
                    "bool"
                ],
                "layers": [
                    "int"
                ],
                "bidirectional": [
                    "bool"
                ],
                "merge_bi": [
                    "typing.Text"
                ],
                "dropout": [
                    "float"
                ],
                "rnn_type": [
                    "typing.Text"
                ],
                "packed_sequence": [
                    "bool"
                ],
                "attention": [
                    "bool"
                ],
                "max_length": [
                    "int"
                ],
                "num_heads": [
                    "int"
                ],
                "nystrom": [
                    "bool"
                ],
                "num_landmarks": [
                    "int"
                ],
                "kernel_size": [
                    "int"
                ],
                "inverse_iterations": [
                    "int"
                ]
            }
        },
        "TransformerLateFusionClassifier.__init__": {
            "name": "__init__",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "modality_feature_sizes": [],
                "num_classes": [
                    "int",
                    "float",
                    "tuple[typing.Union[int,int]]"
                ],
                "num_layers": [
                    "int"
                ],
                "hidden_size": [
                    "int"
                ],
                "num_heads": [
                    "int"
                ],
                "max_length": [
                    "int"
                ],
                "inner_size": [
                    "int"
                ],
                "dropout": [
                    "float"
                ],
                "nystrom": [
                    "bool"
                ],
                "num_landmarks": [
                    "int"
                ],
                "kernel_size": [
                    "int"
                ],
                "prenorm": [
                    "bool"
                ],
                "scalenorm": [
                    "bool"
                ],
                "multi_modal_drop": [
                    "typing.Text"
                ],
                "p_mmdrop": [
                    "float"
                ],
                "p_drop_modalities": [
                    "None",
                    "int"
                ]
            }
        },
        "TransformerLateFusionClassifier.forward": {
            "name": "forward",
            "location": 315,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": [
                    "str",
                    "list[str]",
                    "tuple[typing.Union[str,...]]",
                    "bool",
                    "tuple[typing.Union[str,str]]"
                ],
                "attention_masks": [
                    "None",
                    "complex"
                ]
            }
        },
        "RNNLateFusionClassifier.__init__": {
            "name": "__init__",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "modality_feature_sizes": [],
                "num_classes": [
                    "int",
                    "float"
                ],
                "num_layers": [
                    "int"
                ],
                "batch_first": [
                    "bool"
                ],
                "bidirectional": [
                    "bool"
                ],
                "packed_sequence": [
                    "bool"
                ],
                "merge_bi": [
                    "typing.Text"
                ],
                "rnn_type": [
                    "typing.Text"
                ],
                "attention": [
                    "bool"
                ],
                "hidden_size": [
                    "int"
                ],
                "num_heads": [
                    "int"
                ],
                "max_length": [
                    "int"
                ],
                "dropout": [
                    "float"
                ],
                "nystrom": [
                    "bool"
                ],
                "num_landmarks": [
                    "int"
                ],
                "kernel_size": [
                    "int"
                ],
                "use_mmdrop": [
                    "bool"
                ],
                "p_mmdrop": [
                    "float"
                ],
                "p_drop_modalities": [
                    "None",
                    "int",
                    "dict[str, typing.Any]"
                ],
                "mmdrop_mode": [
                    "typing.Text"
                ]
            }
        },
        "RNNLateFusionClassifier.forward": {
            "name": "forward",
            "location": 397,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": [
                    "int"
                ],
                "lengths": [
                    "int"
                ]
            }
        },
        "MOSEITextClassifier.forward": {
            "name": "forward",
            "location": 411,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "lengths": []
            }
        }
    },
    "slp-master/slp/modules/embed.py": {
        "PositionalEncoding.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "embedding_dim": [
                    "int",
                    "bool",
                    "Optional[Union[int,float]]"
                ],
                "max_len": [
                    "int",
                    "bool",
                    "Optional[Union[int,float]]"
                ]
            }
        },
        "PositionalEncoding.forward": {
            "name": "forward",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "numpy.ndarray",
                    "float",
                    "torch.Tensor"
                ]
            }
        },
        "Embed.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_embeddings": [
                    "int",
                    "str",
                    "Optional[int]",
                    "None"
                ],
                "embedding_dim": [
                    "int",
                    "str",
                    "Optional[int]",
                    "None"
                ],
                "embeddings": [
                    "None",
                    "Optional[str]",
                    "int",
                    "str",
                    "Optional[int]",
                    "Callable",
                    "Optional[Callable]",
                    "List",
                    "Optional[List]",
                    "bool"
                ],
                "noise": [
                    "float",
                    "int",
                    "Union[str,float]"
                ],
                "dropout": [
                    "float",
                    "int",
                    "Union[str,float]"
                ],
                "scale": [
                    "float",
                    "int",
                    "Union[str,float]"
                ],
                "trainable": [
                    "bool",
                    "int",
                    "Union[str,float]",
                    "float"
                ]
            }
        },
        "Embed.init_embeddings": {
            "name": "init_embeddings",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "weights": [
                    "str",
                    "float",
                    "Optional[str]",
                    "None"
                ],
                "trainable": [
                    "str",
                    "float",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Embed.forward": {
            "name": "forward",
            "location": 121,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "numpy.ndarray",
                    "str",
                    "T"
                ]
            }
        }
    },
    "slp-master/slp/modules/feedback.py": {
        "_make_feedback_unit": {
            "name": "_make_feedback_unit",
            "location": 267,
            "return": [],
            "arguments": {
                "top_size": [
                    "int",
                    "str"
                ],
                "target_size": [
                    "int",
                    "str"
                ],
                "n_top_modalities": [
                    "int",
                    "str"
                ],
                "mask_type": [
                    "typing.Text"
                ]
            }
        },
        "BaseFeedbackUnit.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "top_size": [
                    "int",
                    "typing.Sequence[]",
                    "typing.Callable[str, bool]"
                ],
                "target_size": [
                    "int",
                    "typing.Sequence[]",
                    "typing.Callable[str, bool]"
                ],
                "n_top_modalities": [
                    "int",
                    "float"
                ]
            }
        },
        "BaseFeedbackUnit.make_mask_layer": {
            "name": "make_mask_layer",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "top_size": [
                    "int",
                    "list[]",
                    "float"
                ],
                "target_size": [
                    "int",
                    "list[]",
                    "float"
                ]
            }
        },
        "BaseFeedbackUnit._get_feedback_mask_one_modality": {
            "name": "_get_feedback_mask_one_modality",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "m_top": [
                    "str",
                    "bool"
                ],
                "modality_index": [
                    "str",
                    "bool"
                ],
                "lengths": [
                    "None",
                    "bool",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "BaseFeedbackUnit._get_feedback_mask": {
            "name": "_get_feedback_mask",
            "location": 74,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFeedbackUnit.forward": {
            "name": "forward",
            "location": 110,
            "return": [
                "float",
                "int",
                "typing.Final",
                "str"
            ],
            "arguments": {
                "self": [],
                "x_bottom": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "GatedFeedbackUnit.make_mask_layer": {
            "name": "make_mask_layer",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "top_size": [
                    "int",
                    "typing.Iterable[int]"
                ],
                "target_size": [
                    "int",
                    "typing.Iterable[int]"
                ]
            }
        },
        "RNNFeedbackUnit.make_mask_layer": {
            "name": "make_mask_layer",
            "location": 166,
            "return": [
                "AttentiveRNN"
            ],
            "arguments": {
                "self": [],
                "top_size": [
                    "int",
                    "bytes"
                ],
                "target_size": [
                    "int",
                    "bytes"
                ]
            }
        },
        "RNNFeedbackUnit._get_feedback_mask_one_modality": {
            "name": "_get_feedback_mask_one_modality",
            "location": 189,
            "return": [],
            "arguments": {
                "self": [],
                "m_top": [
                    "int",
                    "float",
                    "None",
                    "tuple[typing.Union[int,int]]",
                    "str"
                ],
                "modality_index": [
                    "int",
                    "float",
                    "None",
                    "tuple[typing.Union[int,int]]",
                    "str"
                ],
                "lengths": [
                    "None",
                    "int",
                    "float",
                    "tuple[typing.Union[int,int]]",
                    "str"
                ]
            }
        },
        "BoomFeedbackUnit.make_mask_layer": {
            "name": "make_mask_layer",
            "location": 211,
            "return": [
                "TwoLayer"
            ],
            "arguments": {
                "self": [],
                "top_size": [
                    "int",
                    "float",
                    "typing.Iterable[int]",
                    "str"
                ],
                "target_size": [
                    "int",
                    "float",
                    "typing.Iterable[int]",
                    "str",
                    "None"
                ]
            }
        },
        "DownUpFeedbackUnit.make_mask_layer": {
            "name": "make_mask_layer",
            "location": 235,
            "return": [
                "TwoLayer"
            ],
            "arguments": {
                "self": [],
                "top_size": [
                    "int",
                    "float"
                ],
                "target_size": [
                    "int",
                    "float",
                    "typing.Iterable[int]",
                    "str",
                    "None"
                ]
            }
        },
        "Feedback.__init__": {
            "name": "__init__",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "top_size": [
                    "int",
                    "str",
                    "float"
                ],
                "bottom_modality_sizes": [],
                "use_self": [
                    "bool"
                ],
                "mask_type": [
                    "typing.Text"
                ]
            }
        },
        "Feedback.forward": {
            "name": "forward",
            "location": 326,
            "return": [
                "list[typing.Union[int,list[],float]]"
            ],
            "arguments": {
                "self": [],
                "mods_bottom": [
                    "str"
                ],
                "mods_top": [
                    "str",
                    "None"
                ],
                "lengths": [
                    "None",
                    "str",
                    "int",
                    "tuple[int]"
                ]
            }
        }
    },
    "slp-master/slp/modules/feedforward.py": {
        "TwoLayer.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_in": [
                    "int",
                    "List[int]",
                    "Tuple",
                    "str"
                ],
                "inner_dim": [
                    "int",
                    "torch.Tensor"
                ],
                "n_out": [
                    "int",
                    "str",
                    "None",
                    "Optional[torch.device]",
                    "bool"
                ],
                "activation": [
                    "Text",
                    "int",
                    "bool",
                    "float"
                ],
                "bias": [
                    "bool",
                    "int",
                    "float",
                    "str",
                    "Optional[Union[Any,Any]]",
                    "Dict"
                ],
                "dropout": [
                    "float",
                    "int",
                    "bool"
                ],
                "residual": [
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "TwoLayer.forward": {
            "name": "forward",
            "location": 45,
            "return": [
                "int",
                "str",
                "float",
                "Optional[Union[str,Any]]",
                "Set[str]",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "str"
                ]
            }
        },
        "PositionwiseFF.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "d_model": [
                    "str",
                    "bool",
                    "torch.nn.Module",
                    "torch.Tensor"
                ],
                "d_ff": [
                    "str",
                    "bool",
                    "torch.nn.Module",
                    "torch.Tensor"
                ],
                "dropout": [
                    "float",
                    "int",
                    "bool",
                    "str",
                    "Type[SerializationDialect]",
                    "Union[int,float]"
                ],
                "gelu": [
                    "bool",
                    "int",
                    "str",
                    "Type[SerializationDialect]",
                    "Union[int,float]"
                ]
            }
        },
        "PositionwiseFF.forward": {
            "name": "forward",
            "location": 75,
            "return": [
                "int",
                "str",
                "Optional[Union[str,Any]]",
                "Set[str]",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "Iterable[Iterable[float]]",
                    "torch.Tensor"
                ]
            }
        }
    },
    "slp-master/slp/modules/fuse.py": {
        "make_fuser": {
            "name": "make_fuser",
            "location": 1065,
            "return": [
                "BimodalBilinearFuser",
                "BilinearFuser",
                "BimodalAttentionFuser",
                "AttentionFuser"
            ],
            "arguments": {
                "fusion_method": [
                    "int"
                ],
                "feature_size": [
                    "int"
                ],
                "n_modalities": [
                    "int"
                ]
            }
        },
        "Conv1dProjection.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "modality_sizes": [],
                "projection_size": [
                    "int",
                    "typing.Sequence[]"
                ],
                "kernel_size": [
                    "int"
                ],
                "padding": [
                    "int"
                ],
                "bias": [
                    "bool"
                ]
            }
        },
        "Conv1dProjection.forward": {
            "name": "forward",
            "location": 45,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinearProjection.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "modality_sizes": [
                    "list[tuple[typing.Union[int,int]]]"
                ],
                "projection_size": [
                    "int",
                    "None",
                    "list[tuple[typing.Union[int,int]]]"
                ],
                "bias": [
                    "bool"
                ]
            }
        },
        "LinearProjection.forward": {
            "name": "forward",
            "location": 88,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModalityProjection.__init__": {
            "name": "__init__",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "modality_sizes": [
                    "int",
                    "float"
                ],
                "projection_size": [
                    "int",
                    "float"
                ],
                "kernel_size": [
                    "int"
                ],
                "padding": [
                    "int"
                ],
                "bias": [
                    "bool"
                ],
                "mode": [
                    "None",
                    "bool",
                    "bytes",
                    "list[str]",
                    "str",
                    "list[]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "ModalityProjection.forward": {
            "name": "forward",
            "location": 156,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModalityWeights.__init__": {
            "name": "__init__",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "feature_size": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "ModalityWeights.forward": {
            "name": "forward",
            "location": 214,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseTimestepsPooler.__init__": {
            "name": "__init__",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "feature_size": [
                    "int"
                ],
                "batch_first": [
                    "bool"
                ]
            }
        },
        "BaseTimestepsPooler.out_size": {
            "name": "out_size",
            "location": 270,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseTimestepsPooler._pool": {
            "name": "_pool",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "float",
                    "typing.Iterable[typing.Iterable[float]]",
                    "str",
                    "bytes"
                ],
                "lengths": [
                    "None",
                    "bool",
                    "float",
                    "typing.Iterable[typing.Iterable[float]]",
                    "str",
                    "bytes"
                ]
            }
        },
        "BaseTimestepsPooler.forward": {
            "name": "forward",
            "location": 296,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int"
                ],
                "lengths": [
                    "None",
                    "int",
                    "float"
                ]
            }
        },
        "SumPooler._pool": {
            "name": "_pool",
            "location": 319,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "str"
                ],
                "lengths": [
                    "None",
                    "bool",
                    "float",
                    "typing.Iterable[typing.Iterable[float]]",
                    "str",
                    "bytes"
                ]
            }
        },
        "MeanPooler._pool": {
            "name": "_pool",
            "location": 336,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "str"
                ],
                "lengths": [
                    "None",
                    "bool",
                    "float",
                    "typing.Iterable[typing.Iterable[float]]",
                    "str",
                    "bytes"
                ]
            }
        },
        "MaxPooler._pool": {
            "name": "_pool",
            "location": 353,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float"
                ],
                "lengths": [
                    "None",
                    "bool",
                    "float",
                    "typing.Iterable[typing.Iterable[float]]",
                    "str",
                    "bytes"
                ]
            }
        },
        "RnnPooler.__init__": {
            "name": "__init__",
            "location": 371,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "feature_size": [
                    "float",
                    "None",
                    "int"
                ],
                "hidden_size": [
                    "None",
                    "int",
                    "float"
                ],
                "batch_first": [
                    "bool"
                ],
                "bidirectional": [
                    "bool"
                ],
                "merge_bi": [
                    "typing.Text"
                ],
                "attention": [
                    "bool"
                ]
            }
        },
        "RnnPooler.out_size": {
            "name": "out_size",
            "location": 406,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RnnPooler._pool": {
            "name": "_pool",
            "location": 415,
            "return": [
                "list[]",
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int"
                ],
                "lengths": [
                    "None",
                    "float",
                    "int"
                ]
            }
        },
        "TimestepsPooler.__init__": {
            "name": "__init__",
            "location": 445,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "feature_size": [
                    "int",
                    "float"
                ],
                "mode": [
                    "typing.Text"
                ],
                "batch_first": [
                    "bool"
                ]
            }
        },
        "TimestepsPooler.out_size": {
            "name": "out_size",
            "location": 481,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TimestepsPooler._pool": {
            "name": "_pool",
            "location": 493,
            "return": [
                "int",
                "float",
                "str",
                "list[]",
                "dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float"
                ],
                "lengths": [
                    "None",
                    "int",
                    "float"
                ]
            }
        },
        "BaseFuser.__init__": {
            "name": "__init__",
            "location": 515,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "feature_size": [
                    "int"
                ],
                "n_modalities": [
                    "int",
                    "float",
                    "list[]",
                    "tuple[int]"
                ]
            }
        },
        "BaseFuser._check_n_modalities": {
            "name": "_check_n_modalities",
            "location": 540,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "BaseFuser.out_size": {
            "name": "out_size",
            "location": 554,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFuser.fuse": {
            "name": "fuse",
            "location": 562,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFuser.forward": {
            "name": "forward",
            "location": 578,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CatFuser.out_size": {
            "name": "out_size",
            "location": 608,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CatFuser.fuse": {
            "name": "fuse",
            "location": 617,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SumFuser.out_size": {
            "name": "out_size",
            "location": 652,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SumFuser.fuse": {
            "name": "fuse",
            "location": 661,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BimodalCombinatorialFuser.__init__": {
            "name": "__init__",
            "location": 684,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "feature_size": [
                    "int",
                    "float"
                ],
                "n_modalities": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "None"
                ]
            }
        },
        "BimodalCombinatorialFuser._bimodal_fusion_module": {
            "name": "_bimodal_fusion_module",
            "location": 708,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "feature_size": [
                    "int",
                    "list[dict[, ]]"
                ]
            }
        },
        "BimodalCombinatorialFuser.out_size": {
            "name": "out_size",
            "location": 721,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BimodalBilinearFuser._bimodal_fusion_module": {
            "name": "_bimodal_fusion_module",
            "location": 733,
            "return": [],
            "arguments": {
                "self": [],
                "feature_size": [
                    "int",
                    "list[float]",
                    "float",
                    "tuple[int]"
                ]
            }
        },
        "BimodalBilinearFuser.fuse": {
            "name": "fuse",
            "location": 736,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BimodalAttentionFuser._bimodal_fusion_module": {
            "name": "_bimodal_fusion_module",
            "location": 759,
            "return": [
                "TwowayAttention"
            ],
            "arguments": {
                "self": [],
                "feature_size": [
                    "bytes",
                    "int",
                    "str"
                ]
            }
        },
        "BimodalAttentionFuser.fuse": {
            "name": "fuse",
            "location": 766,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrimodalCombinatorialFuser.__init__": {
            "name": "__init__",
            "location": 789,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "feature_size": [
                    "float",
                    "tuple[]",
                    "list[]",
                    "int",
                    "str"
                ],
                "n_modalities": [
                    "bool",
                    "float",
                    "None"
                ],
                "use_all_trimodal": [
                    "bool"
                ]
            }
        },
        "TrimodalCombinatorialFuser._bimodal_fusion_module": {
            "name": "_bimodal_fusion_module",
            "location": 825,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "feature_size": [
                    "int",
                    "list[dict[, ]]"
                ]
            }
        },
        "TrimodalCombinatorialFuser._trimodal_fusion_module": {
            "name": "_trimodal_fusion_module",
            "location": 838,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "feature_size": [
                    "int",
                    "list[dict[, ]]"
                ]
            }
        },
        "TrimodalCombinatorialFuser.out_size": {
            "name": "out_size",
            "location": 851,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BilinearFuser.__init__": {
            "name": "__init__",
            "location": 867,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "feature_size": [
                    "float",
                    "None",
                    "int"
                ],
                "n_modalities": [
                    "float",
                    "None",
                    "int"
                ],
                "use_all_trimodal": [
                    "bool"
                ]
            }
        },
        "BilinearFuser._bimodal_fusion_module": {
            "name": "_bimodal_fusion_module",
            "location": 893,
            "return": [],
            "arguments": {
                "self": [],
                "feature_size": [
                    "int",
                    "list[float]",
                    "float",
                    "tuple[int]"
                ]
            }
        },
        "BilinearFuser._trimodal_fusion_module": {
            "name": "_trimodal_fusion_module",
            "location": 905,
            "return": [],
            "arguments": {
                "self": [],
                "feature_size": [
                    "int",
                    "list[float]",
                    "float",
                    "tuple[int]"
                ]
            }
        },
        "BilinearFuser.fuse": {
            "name": "fuse",
            "location": 917,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AttentionFuser.__init__": {
            "name": "__init__",
            "location": 952,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "feature_size": [
                    "float",
                    "None",
                    "int"
                ],
                "n_modalities": [
                    "float",
                    "None",
                    "int"
                ],
                "use_all_trimodal": [
                    "bool"
                ],
                "residual": [
                    "bool"
                ],
                "dropout": [
                    "float"
                ]
            }
        },
        "AttentionFuser._bimodal_fusion_module": {
            "name": "_bimodal_fusion_module",
            "location": 984,
            "return": [
                "TwowayAttention"
            ],
            "arguments": {
                "self": [],
                "feature_size": [
                    "bytes",
                    "int",
                    "str"
                ]
            }
        },
        "AttentionFuser._trimodal_fusion_module": {
            "name": "_trimodal_fusion_module",
            "location": 1001,
            "return": [
                "Attention"
            ],
            "arguments": {
                "self": [],
                "feature_size": [
                    "bytes",
                    "int"
                ]
            }
        },
        "AttentionFuser.fuse": {
            "name": "fuse",
            "location": 1017,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseFusionPipeline.__init__": {
            "name": "__init__",
            "location": 1100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFusionPipeline.out_size": {
            "name": "out_size",
            "location": 1110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FuseAggregateTimesteps.__init__": {
            "name": "__init__",
            "location": 1120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "feature_size": [
                    "int",
                    "bytearray"
                ],
                "n_modalities": [
                    "int",
                    "bytearray"
                ],
                "output_size": [
                    "None",
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "typing.Sequence[int]"
                ],
                "fusion_method": [
                    "typing.Text"
                ],
                "timesteps_pooling_method": [
                    "typing.Text"
                ],
                "batch_first": [
                    "bool"
                ]
            }
        },
        "FuseAggregateTimesteps.out_size": {
            "name": "out_size",
            "location": 1163,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FuseAggregateTimesteps.forward": {
            "name": "forward",
            "location": 1172,
            "return": [
                "float",
                "tuple[]",
                "dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectFuseAggregate.__init__": {
            "name": "__init__",
            "location": 1191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "modality_sizes": [],
                "projection_size": [
                    "int",
                    "str",
                    "float",
                    "None"
                ],
                "projection_type": [
                    "None",
                    "int",
                    "float",
                    "tuple[]"
                ],
                "fusion_method": [
                    "typing.Text"
                ],
                "timesteps_pooling_method": [
                    "typing.Text"
                ],
                "modality_weights": [
                    "bool"
                ],
                "batch_first": [
                    "bool"
                ]
            }
        },
        "ProjectFuseAggregate.out_size": {
            "name": "out_size",
            "location": 1250,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProjectFuseAggregate.forward": {
            "name": "forward",
            "location": 1259,
            "return": [
                "bytearray",
                "int",
                "dict[str, typing.Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slp-master/slp/modules/m3.py": {
        "M3FuseAggregate.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "feature_size": [
                    "int",
                    "bytes",
                    "str",
                    "bytearray",
                    "bool"
                ],
                "n_modalities": [
                    "bool",
                    "float",
                    "int"
                ],
                "output_size": [
                    "int",
                    "List",
                    "None",
                    "str"
                ],
                "fusion_method": [
                    "Text",
                    "float",
                    "bool",
                    "torch.nn.modules.rnn.GRUCell",
                    "str",
                    "int",
                    "torch.utils.data.DataLoader"
                ],
                "timesteps_pooling_method": [
                    "Text",
                    "float",
                    "bool",
                    "torch.nn.modules.rnn.GRUCell",
                    "str",
                    "int",
                    "torch.utils.data.DataLoader"
                ],
                "batch_first": [
                    "bool",
                    "float",
                    "torch.nn.modules.rnn.GRUCell",
                    "str",
                    "int",
                    "torch.utils.data.DataLoader"
                ],
                "mmdrop_prob": [
                    "float",
                    "int",
                    "List[str]",
                    "Optional[str]"
                ],
                "mmdrop_individual_mod_prob": [
                    "int",
                    "None",
                    "float",
                    "List[str]",
                    "Optional[str]",
                    "str"
                ],
                "mmdrop_algorithm": [
                    "Text",
                    "int",
                    "float",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "M3FuseAggregate.out_size": {
            "name": "out_size",
            "location": 69,
            "return": [
                "int",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "M3FuseAggregate.forward": {
            "name": "forward",
            "location": 78,
            "return": [
                "int",
                "bytearray",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "M3._make_fusion_pipeline": {
            "name": "_make_fusion_pipeline",
            "location": 97,
            "return": [
                "M3FuseAggregate",
                "List",
                "str"
            ],
            "arguments": {
                "self": [],
                "encoder_output_sizes": [
                    "Dict[str,str]",
                    "float",
                    "bool",
                    "str"
                ]
            }
        },
        "M3.encoder_cfg": {
            "name": "encoder_cfg",
            "location": 118,
            "return": [
                "Dict[Text,Union[dict,dict[str,Any],str,Callable[str,bool],tuple,dict[str,float],Any,float]]",
                "Callable",
                "torch.Tensor",
                "Optional[torch.Tensor]",
                "List[dict]",
                "bool"
            ],
            "arguments": {
                "input_size": [
                    "Dict",
                    "Dict[str,Any]",
                    "str",
                    "Tuple",
                    "Dict[str,float]",
                    "Callable[[str],bool]",
                    "Callable[str,bool]"
                ]
            }
        },
        "M3.fuser_cfg": {
            "name": "fuser_cfg",
            "location": 143,
            "return": [
                "str",
                "Dict[Text,Union[int,Text,float,None]]"
            ],
            "arguments": {}
        },
        "M3Classifier.__init__": {
            "name": "__init__",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_classes": [
                    "int",
                    "str",
                    "bool"
                ],
                "text_size": [
                    "int"
                ],
                "audio_size": [
                    "int"
                ],
                "visual_size": [
                    "int"
                ],
                "hidden_size": [
                    "int"
                ],
                "dropout": [
                    "int",
                    "float"
                ],
                "encoder_layers": [
                    "int"
                ],
                "bidirectional": [
                    "int",
                    "bool"
                ],
                "rnn_type": [
                    "int",
                    "Text"
                ],
                "encoder_attention": [
                    "int",
                    "bool"
                ],
                "fuser_residual": [
                    "int",
                    "bool"
                ],
                "use_all_trimodal": [
                    "int",
                    "bool"
                ]
            }
        },
        "M3Classifier.forward": {
            "name": "forward",
            "location": 202,
            "return": [
                "str",
                "int",
                "Optional[Union[str,Any]]",
                "Set[str]",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "mod_dict": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "lengths": [
                    "bytes",
                    "int",
                    "List[list[int]]",
                    "float",
                    "List[List[int]]"
                ]
            }
        }
    },
    "slp-master/slp/modules/mmdrop.py": {
        "HardMultimodalDropout.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "float",
                    "int",
                    "str",
                    "bool"
                ],
                "n_modalities": [
                    "int"
                ],
                "p_mod": [
                    "List[int]",
                    "int",
                    "None"
                ]
            }
        },
        "HardMultimodalDropout.forward": {
            "name": "forward",
            "location": 30,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "SoftMultimodalDropout.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "float",
                    "int",
                    "str",
                    "bool"
                ],
                "n_modalities": [
                    "int"
                ],
                "p_mod": [
                    "List[int]",
                    "int",
                    "None"
                ]
            }
        },
        "SoftMultimodalDropout.forward": {
            "name": "forward",
            "location": 89,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultimodalDropout.__init__": {
            "name": "__init__",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "float",
                    "int",
                    "Iterable[str]",
                    "Iterable[Union[int,str]]"
                ],
                "n_modalities": [
                    "int",
                    "Iterable[str]",
                    "Iterable[Union[int,str]]",
                    "float"
                ],
                "p_mod": [
                    "int",
                    "None",
                    "Iterable[Union[int,str]]",
                    "Iterable[str]",
                    "float"
                ],
                "mode": [
                    "Text",
                    "bool",
                    "float",
                    "str"
                ]
            }
        },
        "MultimodalDropout.forward": {
            "name": "forward",
            "location": 151,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slp-master/slp/modules/mmlatch.py": {
        "MMLatch.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text_size": [
                    "int",
                    "str"
                ],
                "audio_size": [
                    "int",
                    "str"
                ],
                "visual_size": [
                    "int",
                    "str"
                ],
                "hidden_size": [
                    "int",
                    "str"
                ],
                "dropout": [
                    "float",
                    "int",
                    "str"
                ],
                "encoder_layers": [
                    "int",
                    "str"
                ],
                "bidirectional": [
                    "bool",
                    "int",
                    "str"
                ],
                "merge_bi": [
                    "Text",
                    "int",
                    "str"
                ],
                "rnn_type": [
                    "Text",
                    "int",
                    "str"
                ],
                "encoder_attention": [
                    "bool",
                    "int",
                    "str"
                ],
                "fuser_residual": [
                    "bool",
                    "int",
                    "str"
                ],
                "use_all_trimodal": [
                    "bool",
                    "int",
                    "str"
                ],
                "feedback": [
                    "bool",
                    "int",
                    "List[int]"
                ],
                "use_self_feedback": [
                    "bool",
                    "int",
                    "str"
                ],
                "feedback_algorithm": [
                    "Text",
                    "int",
                    "str"
                ]
            }
        },
        "MMLatch.encoder_cfg": {
            "name": "encoder_cfg",
            "location": 76,
            "return": [
                "Dict[Text,Union[dict,dict[str,Any],str,Callable[str,bool],tuple,dict[str,float],Any,float]]",
                "Callable",
                "torch.Tensor",
                "Optional[torch.Tensor]",
                "List[dict]",
                "bool"
            ],
            "arguments": {
                "input_size": [
                    "Dict",
                    "Dict[str,Any]",
                    "str",
                    "Tuple",
                    "Dict[str,float]",
                    "Callable[[str],bool]",
                    "Callable[str,bool]"
                ]
            }
        },
        "MMLatch.fuser_cfg": {
            "name": "fuser_cfg",
            "location": 101,
            "return": [
                "str",
                "Dict[Text,Union[int,Text]]"
            ],
            "arguments": {}
        },
        "MMLatch.forward": {
            "name": "forward",
            "location": 125,
            "return": [
                "int",
                "Callable",
                "List",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MMLatchClassifier.__init__": {
            "name": "__init__",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_classes": [
                    "bool",
                    "int"
                ],
                "text_size": [
                    "int",
                    "str"
                ],
                "audio_size": [
                    "int",
                    "str"
                ],
                "visual_size": [
                    "int",
                    "str"
                ],
                "hidden_size": [
                    "int",
                    "str"
                ]
            }
        },
        "MMLatchClassifier.forward": {
            "name": "forward",
            "location": 158,
            "return": [
                "str",
                "int",
                "Optional[Union[str,Any]]",
                "Set[str]",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "mod_dict": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "lengths": [
                    "bytes",
                    "int",
                    "List[list[int]]",
                    "float",
                    "List[List[int]]"
                ]
            }
        }
    },
    "slp-master/slp/modules/multimodal.py": {
        "BaseEncoder.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseEncoder._check_n_modalities": {
            "name": "_check_n_modalities",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseEncoder.out_size": {
            "name": "out_size",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseEncoder._make_fusion_pipeline": {
            "name": "_make_fusion_pipeline",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "encoder_output_sizes": [
                    "dict[str, str]",
                    "float",
                    "bool",
                    "str"
                ]
            }
        },
        "BaseEncoder._encode": {
            "name": "_encode",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseEncoder._fuse": {
            "name": "_fuse",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseEncoder.forward": {
            "name": "forward",
            "location": 95,
            "return": [
                "int",
                "list[]",
                "list[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnimodalEncoder.__init__": {
            "name": "__init__",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [
                    "int",
                    "float",
                    "None",
                    "str"
                ],
                "hidden_size": [
                    "int",
                    "float",
                    "None",
                    "str"
                ],
                "layers": [
                    "int"
                ],
                "bidirectional": [
                    "bool"
                ],
                "dropout": [
                    "float"
                ],
                "rnn_type": [
                    "typing.Text"
                ],
                "attention": [
                    "bool"
                ],
                "merge_bi": [
                    "typing.Text"
                ],
                "aggregate_encoded": [
                    "bool"
                ]
            }
        },
        "UnimodalEncoder._make_fusion_pipeline": {
            "name": "_make_fusion_pipeline",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "encoder_output_sizes": [
                    "dict[str, str]",
                    "float",
                    "bool",
                    "str"
                ]
            }
        },
        "UnimodalEncoder.out_size": {
            "name": "out_size",
            "location": 187,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnimodalEncoder._encode": {
            "name": "_encode",
            "location": 195,
            "return": [
                "list[typing.Union[int,float]]",
                "list[typing.Union[int,tuple[]]]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float"
                ],
                "lengths": [
                    "None",
                    "float"
                ]
            }
        },
        "UnimodalEncoder._fuse": {
            "name": "_fuse",
            "location": 213,
            "return": [
                "bool",
                "float",
                "typing.Iterable[typing.Iterable[float]]",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "float",
                    "typing.Iterable[typing.Iterable[float]]",
                    "str",
                    "bytes"
                ],
                "lengths": [
                    "None",
                    "bool",
                    "float",
                    "typing.Iterable[typing.Iterable[float]]",
                    "str",
                    "bytes"
                ]
            }
        },
        "BimodalEncoder.__init__": {
            "name": "__init__",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "encoder1_args": [],
                "encoder2_args": [],
                "fuser_args": [
                    "str"
                ]
            }
        },
        "BimodalEncoder._make_fusion_pipeline": {
            "name": "_make_fusion_pipeline",
            "location": 310,
            "return": [
                "ProjectFuseAggregate"
            ],
            "arguments": {
                "self": [],
                "encoder_output_sizes": [
                    "int"
                ]
            }
        },
        "BimodalEncoder.out_size": {
            "name": "out_size",
            "location": 330,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BimodalEncoder._encode": {
            "name": "_encode",
            "location": 338,
            "return": [
                "list[typing.Union[float,str,list[list[int]],int,list[],typing.Counter,typing.Pattern]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BimodalEncoder._fuse": {
            "name": "_fuse",
            "location": 362,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrimodalEncoder.__init__": {
            "name": "__init__",
            "location": 381,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "encoder1_args": [
                    "str"
                ],
                "encoder2_args": [
                    "str"
                ],
                "encoder3_args": [
                    "int",
                    "str",
                    "None"
                ],
                "fuser_args": [
                    "str"
                ]
            }
        },
        "TrimodalEncoder._make_fusion_pipeline": {
            "name": "_make_fusion_pipeline",
            "location": 448,
            "return": [
                "ProjectFuseAggregate"
            ],
            "arguments": {
                "self": [],
                "encoder_output_sizes": [
                    "int"
                ]
            }
        },
        "TrimodalEncoder.out_size": {
            "name": "out_size",
            "location": 468,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrimodalEncoder._encode": {
            "name": "_encode",
            "location": 476,
            "return": [
                "list[typing.Union[float,list[list[int]],int,dict[int, dict[str, int]],tuple[typing.Union[tuple[typing.Union[typing.Any,typing.Any]],tuple[typing.Union[typing.Any,typing.Any]],tuple[typing.Union[typing.Any,typing.Any]],tuple[typing.Union[typing.Any,typing.Any]]]],tuple[typing.Union[typing.Literal,typing.Literal]],list[],dict[int, int]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrimodalEncoder._fuse": {
            "name": "_fuse",
            "location": 501,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultimodalBaseline.__init__": {
            "name": "__init__",
            "location": 520,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text_size": [
                    "int"
                ],
                "audio_size": [
                    "int"
                ],
                "visual_size": [
                    "int"
                ],
                "hidden_size": [
                    "int"
                ],
                "dropout": [
                    "float"
                ],
                "encoder_layers": [
                    "int"
                ],
                "bidirectional": [
                    "bool"
                ],
                "merge_bi": [
                    "typing.Text"
                ],
                "rnn_type": [
                    "typing.Text"
                ],
                "encoder_attention": [
                    "bool"
                ],
                "fuser_residual": [
                    "bool"
                ],
                "use_all_trimodal": [
                    "bool"
                ]
            }
        },
        "MultimodalBaseline._make_fusion_pipeline": {
            "name": "_make_fusion_pipeline",
            "location": 578,
            "return": [
                "FuseAggregateTimesteps"
            ],
            "arguments": {
                "self": [],
                "encoder_output_sizes": [
                    "list[]"
                ]
            }
        },
        "MultimodalBaseline.encoder_cfg": {
            "name": "encoder_cfg",
            "location": 604,
            "return": [
                "dict[typing.Text, typing.Union[dict[str, float],typing.Mapping,dict[, ],float]]"
            ],
            "arguments": {
                "input_size": [
                    "dict[str, float]",
                    "typing.Mapping",
                    "dict[, ]"
                ]
            }
        },
        "MultimodalBaseline.fuser_cfg": {
            "name": "fuser_cfg",
            "location": 630,
            "return": [
                "dict[typing.Text, typing.Union[int,typing.Text]]"
            ],
            "arguments": {}
        },
        "MOSEIClassifier.__init__": {
            "name": "__init__",
            "location": 656,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "encoder": [
                    "int",
                    "str",
                    "float"
                ],
                "num_classes": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "float",
                    "str"
                ],
                "dropout": [
                    "float"
                ]
            }
        },
        "UnimodalClassifier.__init__": {
            "name": "__init__",
            "location": 672,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [
                    "int",
                    "list[str]",
                    "None"
                ],
                "hidden_size": [
                    "int",
                    "list[str]",
                    "None"
                ],
                "num_classes": [
                    "bool",
                    "str"
                ],
                "layers": [
                    "int"
                ],
                "bidirectional": [
                    "bool"
                ],
                "dropout": [
                    "float"
                ],
                "rnn_type": [
                    "typing.Text"
                ],
                "attention": [
                    "bool"
                ]
            }
        },
        "UnimodalClassifier.forward": {
            "name": "forward",
            "location": 709,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int"
                ],
                "lengths": []
            }
        },
        "BimodalClassifier.__init__": {
            "name": "__init__",
            "location": 720,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "encoder1_args": [
                    "bool",
                    "typing.Sequence[typing.Optional[typing.Type]]",
                    "tuple[typing.Union[bool,str]]"
                ],
                "encoder2_args": [
                    "bool",
                    "typing.Sequence[typing.Optional[typing.Type]]",
                    "tuple[typing.Union[bool,str]]"
                ],
                "fuser_args": [
                    "bool",
                    "typing.Sequence[typing.Optional[typing.Type]]",
                    "tuple[typing.Union[bool,str]]"
                ],
                "num_classes": [
                    "bool",
                    "None",
                    "str",
                    "float"
                ]
            }
        },
        "AudioVisualClassifier.forward": {
            "name": "forward",
            "location": 733,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "mod_dict": [
                    "list[]"
                ],
                "lengths": [
                    "bytes",
                    "list[list[int]]"
                ]
            }
        },
        "AudioTextClassifier.forward": {
            "name": "forward",
            "location": 745,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "mod_dict": [
                    "list[]"
                ],
                "lengths": [
                    "bytes",
                    "list[list[int]]"
                ]
            }
        },
        "VisualTextClassifier.forward": {
            "name": "forward",
            "location": 757,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "mod_dict": [
                    "list[]"
                ],
                "lengths": [
                    "bytes",
                    "list[list[int]]"
                ]
            }
        },
        "TrimodalClassifier.__init__": {
            "name": "__init__",
            "location": 769,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "encoder1_args": [
                    "bool",
                    "typing.Sequence[typing.Optional[typing.Type]]",
                    "tuple[typing.Union[bool,str]]"
                ],
                "encoder2_args": [
                    "bool",
                    "typing.Sequence[typing.Optional[typing.Type]]",
                    "tuple[typing.Union[bool,str]]"
                ],
                "encoder3_args": [
                    "bool",
                    "typing.Sequence[typing.Optional[typing.Type]]",
                    "tuple[typing.Union[bool,str]]"
                ],
                "fuser_args": [
                    "bool",
                    "typing.Sequence[typing.Optional[typing.Type]]",
                    "tuple[typing.Union[bool,str]]"
                ],
                "num_classes": [
                    "bool",
                    "None",
                    "float",
                    "str"
                ]
            }
        },
        "TrimodalClassifier.forward": {
            "name": "forward",
            "location": 783,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "mod_dict": [],
                "lengths": [
                    "bytes",
                    "list[list[int]]"
                ]
            }
        },
        "MultimodalBaselineClassifier.__init__": {
            "name": "__init__",
            "location": 795,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_classes": [
                    "int"
                ],
                "text_size": [
                    "int"
                ],
                "audio_size": [
                    "int"
                ],
                "visual_size": [
                    "int"
                ],
                "hidden_size": [
                    "int"
                ],
                "dropout": [
                    "float"
                ],
                "encoder_layers": [
                    "int"
                ],
                "bidirectional": [
                    "bool"
                ],
                "rnn_type": [
                    "typing.Text"
                ],
                "encoder_attention": [
                    "bool"
                ],
                "fuser_residual": [
                    "bool"
                ],
                "use_all_trimodal": [
                    "bool"
                ]
            }
        },
        "MultimodalBaselineClassifier.forward": {
            "name": "forward",
            "location": 827,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "mod_dict": [],
                "lengths": [
                    "bytes",
                    "list[list[int]]"
                ]
            }
        }
    },
    "slp-master/slp/modules/norm.py": {
        "safe_norm": {
            "name": "safe_norm",
            "location": 5,
            "return": [
                "str",
                "Optional[int]",
                "float",
                "bytearray"
            ],
            "arguments": {
                "x": [
                    "float",
                    "Iterable[T]",
                    "int",
                    "torch.Tensor"
                ],
                "eps": [
                    "float",
                    "torch.Tensor",
                    "Iterable[T]",
                    "int"
                ],
                "dim": [
                    "int",
                    "float",
                    "torch.Tensor",
                    "Iterable[T]"
                ],
                "keepdim": [
                    "bool",
                    "float",
                    "torch.Tensor",
                    "Iterable[T]",
                    "int"
                ]
            }
        },
        "LayerNormTf.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hidden_size": [
                    "int",
                    "float",
                    "bool"
                ],
                "eps": [
                    "float",
                    "int",
                    "str",
                    "Union[torch.Tensor,float]",
                    "torch.Tensor"
                ]
            }
        },
        "LayerNormTf.forward": {
            "name": "forward",
            "location": 19,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ]
            }
        },
        "ScaleNorm.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hidden_size": [
                    "int",
                    "bool"
                ],
                "eps": [
                    "float",
                    "int",
                    "str",
                    "Union[torch.Tensor,float]",
                    "torch.Tensor"
                ]
            }
        },
        "ScaleNorm.forward": {
            "name": "forward",
            "location": 34,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "torch.Tensor"
                ]
            }
        }
    },
    "slp-master/slp/modules/regularization.py": {
        "GaussianNoise.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stddev": [
                    "int",
                    "float",
                    "bool"
                ],
                "mean": [
                    "float",
                    "int",
                    "bool"
                ]
            }
        },
        "GaussianNoise.forward": {
            "name": "forward",
            "location": 18,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "torch.Tensor",
                    "torch.tensor",
                    "float"
                ]
            }
        },
        "GaussianNoise.__repr__": {
            "name": "__repr__",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slp-master/slp/modules/rnn.py": {
        "RNN.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [
                    "int",
                    "float"
                ],
                "hidden_size": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "float",
                    "dict[str, torch.LongTensor]"
                ],
                "batch_first": [
                    "bool"
                ],
                "layers": [
                    "int"
                ],
                "bidirectional": [
                    "bool"
                ],
                "merge_bi": [
                    "typing.Text"
                ],
                "dropout": [
                    "float"
                ],
                "rnn_type": [
                    "typing.Text"
                ],
                "packed_sequence": [
                    "bool"
                ],
                "max_length": [
                    "int"
                ]
            }
        },
        "RNN.out_size": {
            "name": "out_size",
            "location": 82,
            "return": [],
            "arguments": {
                "cls": [
                    "int",
                    "float",
                    "bytes",
                    "str",
                    "list[int]"
                ]
            }
        },
        "RNN._merge_bi": {
            "name": "_merge_bi",
            "location": 96,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "forward": [
                    "int",
                    "str"
                ],
                "backward": [
                    "int",
                    "str"
                ]
            }
        },
        "RNN._select_last_unpadded": {
            "name": "_select_last_unpadded",
            "location": 112,
            "return": [
                "typing.Pattern",
                "dict[int, str]"
            ],
            "arguments": {
                "self": [],
                "out": [
                    "int",
                    "list[str]",
                    "list[int]",
                    "str",
                    "typing.AnyStr"
                ],
                "lengths": [
                    "int"
                ]
            }
        },
        "RNN._final_output": {
            "name": "_final_output",
            "location": 137,
            "return": [
                "tuple[]",
                "tuple[typing.Union[int,dict[str, int],list[],dict[, ]]]"
            ],
            "arguments": {
                "self": [],
                "out": [],
                "lengths": [
                    "int",
                    "str",
                    "None",
                    "float"
                ]
            }
        },
        "RNN.forward": {
            "name": "forward",
            "location": 168,
            "return": [
                "tuple[typing.Union[float,int,dict[str, typing.Any],tuple[typing.Union[int,int,int]]]]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "lengths": []
            }
        },
        "AttentiveRNN.__init__": {
            "name": "__init__",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [
                    "int",
                    "float"
                ],
                "hidden_size": [
                    "int"
                ],
                "batch_first": [
                    "bool"
                ],
                "layers": [
                    "int"
                ],
                "bidirectional": [
                    "bool"
                ],
                "merge_bi": [
                    "typing.Text"
                ],
                "dropout": [
                    "float"
                ],
                "rnn_type": [
                    "typing.Text"
                ],
                "packed_sequence": [
                    "bool"
                ],
                "attention": [
                    "bool"
                ],
                "max_length": [
                    "int"
                ],
                "num_heads": [
                    "int"
                ],
                "nystrom": [
                    "bool"
                ],
                "num_landmarks": [
                    "int"
                ],
                "kernel_size": [
                    "int"
                ],
                "inverse_iterations": [
                    "int"
                ],
                "return_hidden": [
                    "bool"
                ]
            }
        },
        "AttentiveRNN.forward": {
            "name": "forward",
            "location": 291,
            "return": [
                "tuple[typing.Union[int,float]]",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "lengths": [
                    "bool"
                ]
            }
        },
        "TokenRNN.__init__": {
            "name": "__init__",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hidden_size": [
                    "int"
                ],
                "vocab_size": [
                    "None",
                    "int"
                ],
                "embeddings_dim": [
                    "None",
                    "int",
                    "float"
                ],
                "embeddings": [
                    "None",
                    "int",
                    "float",
                    "str"
                ],
                "embeddings_dropout": [
                    "float"
                ],
                "finetune_embeddings": [
                    "bool"
                ],
                "batch_first": [
                    "bool"
                ],
                "layers": [
                    "int"
                ],
                "bidirectional": [
                    "bool"
                ],
                "merge_bi": [
                    "typing.Text"
                ],
                "dropout": [
                    "float"
                ],
                "rnn_type": [
                    "typing.Text"
                ],
                "packed_sequence": [
                    "bool"
                ],
                "attention": [
                    "bool"
                ],
                "max_length": [
                    "int"
                ],
                "num_heads": [
                    "int"
                ],
                "nystrom": [
                    "bool"
                ],
                "num_landmarks": [
                    "int"
                ],
                "kernel_size": [
                    "int"
                ],
                "inverse_iterations": [
                    "int"
                ],
                "return_hidden": [
                    "bool"
                ]
            }
        },
        "TokenRNN.forward": {
            "name": "forward",
            "location": 426,
            "return": [
                "float",
                "str",
                "int",
                "list[int]",
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "lengths": [
                    "float"
                ]
            }
        }
    },
    "slp-master/slp/modules/transformer.py": {
        "reset_parameters": {
            "name": "reset_parameters",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "named_parameters": [
                    "str",
                    "list[str]"
                ],
                "gain": [
                    "float"
                ]
            }
        },
        "Sublayer1.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hidden_size": [
                    "int"
                ],
                "num_heads": [
                    "int"
                ],
                "dropout": [
                    "float"
                ],
                "nystrom": [
                    "bool"
                ],
                "num_landmarks": [
                    "int"
                ],
                "kernel_size": [
                    "None",
                    "int",
                    "float"
                ],
                "prenorm": [
                    "bool"
                ],
                "scalenorm": [
                    "bool"
                ]
            }
        },
        "Sublayer1._prenorm": {
            "name": "_prenorm",
            "location": 47,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "attention_mask": [
                    "None",
                    "float"
                ]
            }
        },
        "Sublayer1._postnorm": {
            "name": "_postnorm",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float"
                ],
                "attention_mask": [
                    "None",
                    "float",
                    "int"
                ]
            }
        },
        "Sublayer1.forward": {
            "name": "forward",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "float"
                ],
                "attention_mask": [
                    "None",
                    "float"
                ]
            }
        },
        "Sublayer2.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hidden_size": [
                    "int"
                ],
                "inner_size": [
                    "int"
                ],
                "dropout": [
                    "float"
                ],
                "prenorm": [
                    "bool"
                ],
                "scalenorm": [
                    "bool"
                ]
            }
        },
        "Sublayer2._prenorm": {
            "name": "_prenorm",
            "location": 79,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ]
            }
        },
        "Sublayer2._postnorm": {
            "name": "_postnorm",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Sublayer2.forward": {
            "name": "forward",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "bool"
                ]
            }
        },
        "Sublayer3.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hidden_size": [
                    "int"
                ],
                "num_heads": [
                    "int"
                ],
                "dropout": [
                    "float"
                ],
                "prenorm": [
                    "bool"
                ],
                "scalenorm": [
                    "bool"
                ]
            }
        },
        "Sublayer3._prenorm": {
            "name": "_prenorm",
            "location": 113,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int"
                ],
                "y": [
                    "int"
                ],
                "attention_mask": [
                    "None",
                    "float",
                    "int"
                ]
            }
        },
        "Sublayer3._postnorm": {
            "name": "_postnorm",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "bool"
                ],
                "attention_mask": [
                    "None",
                    "int",
                    "float"
                ]
            }
        },
        "Sublayer3.forward": {
            "name": "forward",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int"
                ],
                "y": [
                    "float",
                    "int"
                ],
                "attention_mask": [
                    "None",
                    "float",
                    "int"
                ]
            }
        },
        "EncoderLayer.__init__": {
            "name": "__init__",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hidden_size": [
                    "int"
                ],
                "num_heads": [
                    "int"
                ],
                "inner_size": [
                    "int"
                ],
                "dropout": [
                    "float"
                ],
                "nystrom": [
                    "bool"
                ],
                "num_landmarks": [
                    "int"
                ],
                "kernel_size": [
                    "None",
                    "int",
                    "float"
                ],
                "prenorm": [
                    "bool"
                ],
                "scalenorm": [
                    "bool"
                ]
            }
        },
        "EncoderLayer.forward": {
            "name": "forward",
            "location": 165,
            "return": [
                "int",
                "list[float]",
                "list[]",
                "list[None]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float"
                ],
                "attention_mask": [
                    "None",
                    "float"
                ]
            }
        },
        "Encoder.__init__": {
            "name": "__init__",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_layers": [
                    "int"
                ],
                "hidden_size": [
                    "int"
                ],
                "num_heads": [
                    "int"
                ],
                "inner_size": [
                    "int"
                ],
                "dropout": [
                    "float"
                ],
                "nystrom": [
                    "bool"
                ],
                "num_landmarks": [
                    "int"
                ],
                "kernel_size": [
                    "None",
                    "int"
                ],
                "prenorm": [
                    "bool"
                ],
                "scalenorm": [
                    "bool"
                ]
            }
        },
        "Encoder.forward": {
            "name": "forward",
            "location": 204,
            "return": [
                "int",
                "list[list[str]]",
                "list[int]",
                "float",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int",
                    "bytes"
                ],
                "attention_mask": [
                    "None",
                    "float",
                    "int",
                    "bytes"
                ]
            }
        },
        "DecoderLayer.__init__": {
            "name": "__init__",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hidden_size": [
                    "int"
                ],
                "num_heads": [
                    "int"
                ],
                "inner_size": [
                    "int"
                ],
                "dropout": [
                    "float"
                ],
                "prenorm": [
                    "bool"
                ],
                "scalenorm": [
                    "bool"
                ]
            }
        },
        "DecoderLayer.forward": {
            "name": "forward",
            "location": 246,
            "return": [
                "int",
                "list[None]",
                "list[]",
                "str"
            ],
            "arguments": {
                "self": [],
                "targets": [
                    "float",
                    "bool"
                ],
                "encoded": [
                    "str",
                    "bytes"
                ],
                "source_mask": [
                    "None",
                    "str",
                    "bytes"
                ],
                "target_mask": [
                    "None",
                    "str",
                    "int",
                    "list[int]"
                ]
            }
        },
        "Decoder.__init__": {
            "name": "__init__",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_layers": [
                    "int"
                ],
                "hidden_size": [
                    "int"
                ],
                "num_heads": [
                    "int"
                ],
                "inner_size": [
                    "int"
                ],
                "dropout": [
                    "float"
                ],
                "prenorm": [
                    "bool"
                ],
                "scalenorm": [
                    "bool"
                ]
            }
        },
        "Decoder.forward": {
            "name": "forward",
            "location": 280,
            "return": [
                "str",
                "int",
                "bytes",
                "tuple[M]"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "str",
                    "bytes",
                    "tuple[M]"
                ],
                "encoded": [
                    "str",
                    "bytes",
                    "tuple[M]"
                ],
                "source_mask": [
                    "None",
                    "str",
                    "bytes",
                    "tuple[M]"
                ],
                "target_mask": [
                    "None",
                    "str",
                    "bytes",
                    "tuple[M]"
                ]
            }
        },
        "EncoderDecoder.__init__": {
            "name": "__init__",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_layers": [
                    "int"
                ],
                "hidden_size": [
                    "int"
                ],
                "num_heads": [
                    "int"
                ],
                "inner_size": [
                    "int"
                ],
                "dropout": [
                    "float"
                ],
                "nystrom": [
                    "bool"
                ],
                "num_landmarks": [
                    "int"
                ],
                "kernel_size": [
                    "None",
                    "int",
                    "str"
                ],
                "prenorm": [
                    "bool"
                ],
                "scalenorm": [
                    "bool"
                ]
            }
        },
        "EncoderDecoder.forward": {
            "name": "forward",
            "location": 327,
            "return": [
                "str",
                "int",
                "bytes",
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "dict[str, typing.Any]",
                    "bool",
                    "typing.Type"
                ],
                "target": [
                    "str",
                    "int",
                    "float",
                    "list[str]"
                ],
                "source_mask": [
                    "None",
                    "str"
                ],
                "target_mask": [
                    "None",
                    "str",
                    "int",
                    "float",
                    "list[str]"
                ]
            }
        },
        "Transformer.__init__": {
            "name": "__init__",
            "location": 337,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab_size": [
                    "int"
                ],
                "max_length": [
                    "int"
                ],
                "num_layers": [
                    "int"
                ],
                "hidden_size": [
                    "int"
                ],
                "num_heads": [
                    "int"
                ],
                "inner_size": [
                    "int"
                ],
                "dropout": [
                    "float"
                ],
                "nystrom": [
                    "bool"
                ],
                "num_landmarks": [
                    "int"
                ],
                "kernel_size": [
                    "None",
                    "int",
                    "str"
                ],
                "prenorm": [
                    "bool"
                ],
                "scalenorm": [
                    "bool"
                ]
            }
        },
        "Transformer.forward": {
            "name": "forward",
            "location": 378,
            "return": [
                "str",
                "tuple[]",
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "typing.ChainMap",
                    "None",
                    "bool"
                ],
                "target": [
                    "str",
                    "float"
                ],
                "source_mask": [
                    "None",
                    "typing.Callable[, ]",
                    "str",
                    "bool"
                ],
                "target_mask": [
                    "None",
                    "typing.Callable[, ]",
                    "str",
                    "bool"
                ]
            }
        },
        "TransformerSequenceEncoder.__init__": {
            "name": "__init__",
            "location": 395,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [
                    "int",
                    "float",
                    "tuple[typing.Union[int,int]]"
                ],
                "num_layers": [
                    "int"
                ],
                "hidden_size": [
                    "int"
                ],
                "num_heads": [
                    "int"
                ],
                "max_length": [
                    "int"
                ],
                "inner_size": [
                    "int"
                ],
                "dropout": [
                    "float"
                ],
                "nystrom": [
                    "bool"
                ],
                "num_landmarks": [
                    "int"
                ],
                "kernel_size": [
                    "None",
                    "int",
                    "float"
                ],
                "prenorm": [
                    "bool"
                ],
                "scalenorm": [
                    "bool"
                ],
                "feature_normalization": [
                    "bool"
                ]
            }
        },
        "TransformerSequenceEncoder.forward": {
            "name": "forward",
            "location": 433,
            "return": [
                "float",
                "str",
                "int",
                "list[int]"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "attention_mask": [
                    "None",
                    "float"
                ]
            }
        },
        "TransformerTokenSequenceEncoder.__init__": {
            "name": "__init__",
            "location": 445,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab_size": [
                    "int"
                ],
                "max_length": [
                    "int"
                ],
                "num_layers": [
                    "int"
                ],
                "hidden_size": [
                    "int"
                ],
                "num_heads": [
                    "int"
                ],
                "inner_size": [
                    "int"
                ],
                "dropout": [
                    "float"
                ],
                "nystrom": [
                    "bool"
                ],
                "num_landmarks": [
                    "int"
                ],
                "kernel_size": [
                    "None",
                    "int",
                    "float"
                ],
                "prenorm": [
                    "bool"
                ],
                "scalenorm": [
                    "bool"
                ]
            }
        },
        "TransformerTokenSequenceEncoder.forward": {
            "name": "forward",
            "location": 485,
            "return": [
                "float",
                "str",
                "int",
                "list[int]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "int"
                ],
                "attention_mask": [
                    "None",
                    "float"
                ]
            }
        }
    },
    "slp-master/slp/modules/twowayattention.py": {
        "TwowayAttention.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attention_size": [
                    "int",
                    "Callable",
                    "Dict[str,torch.LongTensor]",
                    "Union[Tuple[int,int],int]",
                    "torch.FloatTensor"
                ],
                "input_size": [
                    "int",
                    "None",
                    "Tuple",
                    "Union[float,int]",
                    "float"
                ],
                "dropout": [
                    "float",
                    "int",
                    "bool",
                    "bytes"
                ],
                "residual": [
                    "bool",
                    "int",
                    "float",
                    "bytes"
                ],
                "layernorm": [
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TwowayAttention.forward": {
            "name": "forward",
            "location": 41,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "mod1": [
                    "int",
                    "Callable",
                    "str"
                ],
                "mod2": [
                    "int",
                    "Callable",
                    "str"
                ],
                "attention_mask": [
                    "None",
                    "int",
                    "float",
                    "Iterable[Optional[Any]]",
                    "Optional[int]"
                ]
            }
        },
        "TwowayAttention._reset_parameters": {
            "name": "_reset_parameters",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slp-master/slp/modules/__init__.py": {},
    "slp-master/slp/plbind/dm.py": {
        "split_data": {
            "name": "split_data",
            "location": 19,
            "return": [
                "tuple[typing.Union[list[],dict[, ],typing.Final,set[str],typing.Type,tuple[tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal]]]]]"
            ],
            "arguments": {
                "dataset": [
                    "int",
                    "None",
                    "list[int]"
                ],
                "test_size": [],
                "seed": [
                    "float",
                    "None",
                    "tuple[typing.Union[str,int]]",
                    "list[int]",
                    "int"
                ]
            }
        },
        "PLDataModuleFromDatasets.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "train": [
                    "bool",
                    "str"
                ],
                "val": [
                    "None",
                    "bool",
                    "str"
                ],
                "test": [
                    "None",
                    "bool",
                    "str"
                ],
                "val_percent": [
                    "float"
                ],
                "test_percent": [
                    "float"
                ],
                "batch_size": [
                    "int"
                ],
                "batch_size_eval": [
                    "None",
                    "int",
                    "list[float]"
                ],
                "seed": [
                    "None",
                    "bool",
                    "str"
                ],
                "num_workers": [
                    "int"
                ],
                "pin_memory": [
                    "bool"
                ],
                "drop_last": [
                    "bool"
                ],
                "sampler_train": [
                    "None",
                    "int",
                    "str"
                ],
                "sampler_val": [
                    "None",
                    "int",
                    "str"
                ],
                "sampler_test": [
                    "None",
                    "int",
                    "str"
                ],
                "batch_sampler_train": [
                    "None",
                    "int",
                    "str"
                ],
                "batch_sampler_val": [
                    "None",
                    "int",
                    "str"
                ],
                "batch_sampler_test": [
                    "None",
                    "int",
                    "str"
                ],
                "shuffle_eval": [
                    "bool"
                ],
                "shuffle_train": [
                    "bool"
                ],
                "collate_fn": [
                    "None",
                    "bool",
                    "str"
                ],
                "no_test_set": [
                    "bool"
                ]
            }
        },
        "PLDataModuleFromDatasets.prepare_data": {
            "name": "prepare_data",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PLDataModuleFromDatasets.setup": {
            "name": "setup",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stage": [
                    "None",
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "PLDataModuleFromDatasets.train_dataloader": {
            "name": "train_dataloader",
            "location": 223,
            "return": [
                "DataLoader"
            ],
            "arguments": {
                "self": []
            }
        },
        "PLDataModuleFromDatasets.val_dataloader": {
            "name": "val_dataloader",
            "location": 246,
            "return": [
                "DataLoader"
            ],
            "arguments": {
                "self": []
            }
        },
        "PLDataModuleFromDatasets.test_dataloader": {
            "name": "test_dataloader",
            "location": 270,
            "return": [
                "DataLoader"
            ],
            "arguments": {
                "self": []
            }
        },
        "PLDataModuleFromDatasets.add_argparse_args": {
            "name": "add_argparse_args",
            "location": 294,
            "return": [],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "list[]",
                    "typing.Type",
                    "None"
                ],
                "parent_parser": [
                    "str"
                ]
            }
        },
        "PLDataModuleFromCorpus.__init__": {
            "name": "__init__",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "train": [
                    "str",
                    "dict[str, typing.Any]",
                    "tuple[int]"
                ],
                "train_labels": [
                    "None",
                    "str",
                    "dict[str, typing.Any]",
                    "tuple[int]"
                ],
                "val": [
                    "None",
                    "str",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Mapping"
                ],
                "val_labels": [
                    "None",
                    "str",
                    "dict[str, typing.Any]",
                    "tuple[int]"
                ],
                "test": [
                    "None",
                    "str",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "typing.Mapping"
                ],
                "test_labels": [
                    "None",
                    "str",
                    "dict[str, typing.Any]",
                    "tuple[int]"
                ],
                "val_percent": [
                    "float"
                ],
                "test_percent": [
                    "float"
                ],
                "batch_size": [
                    "int"
                ],
                "batch_size_eval": [
                    "None",
                    "str"
                ],
                "seed": [
                    "None",
                    "str"
                ],
                "num_workers": [
                    "int"
                ],
                "pin_memory": [
                    "bool"
                ],
                "drop_last": [
                    "bool"
                ],
                "shuffle_eval": [
                    "bool"
                ],
                "sampler_train": [
                    "None",
                    "str"
                ],
                "sampler_val": [
                    "None",
                    "str"
                ],
                "sampler_test": [
                    "None",
                    "str"
                ],
                "batch_sampler_train": [
                    "None",
                    "str"
                ],
                "batch_sampler_val": [
                    "None",
                    "str"
                ],
                "batch_sampler_test": [
                    "None",
                    "str"
                ],
                "collate_fn": [
                    "None",
                    "str"
                ],
                "language_model": [
                    "bool"
                ],
                "tokenizer": [
                    "typing.Text"
                ],
                "no_test_set": [
                    "bool"
                ]
            }
        },
        "PLDataModuleFromCorpus.setup": {
            "name": "setup",
            "location": 474,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stage": [
                    "None",
                    "str",
                    "bool",
                    "typing.Mapping"
                ]
            }
        },
        "PLDataModuleFromCorpus._zip_corpus_and_labels": {
            "name": "_zip_corpus_and_labels",
            "location": 505,
            "return": [
                "tuple[typing.Union[list[],dict[, ],tuple[typing.Union[str,list[]]],None,bool,list[str],typing.Any,float,str]]"
            ],
            "arguments": {
                "self": [],
                "train": [
                    "dict[, ]",
                    "tuple[typing.Union[str,list[]]]"
                ],
                "val": [
                    "bool",
                    "list[str]",
                    "typing.Any",
                    "None",
                    "list[]"
                ],
                "test": [
                    "float",
                    "str",
                    "None",
                    "int"
                ],
                "train_labels": [
                    "list[str]",
                    "list[numpy.ndarray]",
                    "dict[str, typing.Any]",
                    "bool"
                ],
                "val_labels": [
                    "dict[, ]",
                    "tuple[typing.Union[str,list[]]]"
                ],
                "test_labels": [
                    "str",
                    "list[int]",
                    "bool",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "PLDataModuleFromCorpus._select_corpus_cls": {
            "name": "_select_corpus_cls",
            "location": 539,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "corpus_args": []
            }
        },
        "PLDataModuleFromCorpus._force_train_vocab_on_val_and_test": {
            "name": "_force_train_vocab_on_val_and_test",
            "location": 567,
            "return": [
                "dict[str, typing.Any]"
            ],
            "arguments": {
                "self": [],
                "corpus_args": [
                    "dict[str, typing.Any]"
                ],
                "train_corpus": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "PLDataModuleFromCorpus._create_corpora": {
            "name": "_create_corpora",
            "location": 582,
            "return": [
                "tuple[typing.Union[dict[, ],list[],typing.Type,None,tuple[typing.Union[typing.Literal,typing.Literal]],str]]"
            ],
            "arguments": {
                "self": [],
                "train_corpus": [
                    "bool"
                ],
                "val_corpus": [
                    "bool"
                ],
                "test_corpus": [
                    "str",
                    "bool"
                ],
                "corpus_args": [
                    "bool",
                    "str",
                    "list[int]",
                    "float"
                ]
            }
        },
        "PLDataModuleFromCorpus.embeddings": {
            "name": "embeddings",
            "location": 599,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PLDataModuleFromCorpus.vocab_size": {
            "name": "vocab_size",
            "location": 610,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PLDataModuleFromCorpus.add_argparse_args": {
            "name": "add_argparse_args",
            "location": 621,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[, ]"
                ],
                "parent_parser": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "slp-master/slp/plbind/helpers.py": {
        "EarlyStoppingWithLogs._run_early_stopping_check": {
            "name": "_run_early_stopping_check",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trainer": [
                    "str",
                    "bool",
                    "Callable",
                    "Dict[str,str]",
                    "Dict[str,list[str]]",
                    "Union[str,int]",
                    "Dict[str,List[str]]"
                ],
                "pl_module": [
                    "bool",
                    "Dict[str,Any]",
                    "Tuple[bool,float]",
                    "Tuple[Union[bool,float]]"
                ]
            }
        },
        "FromLogits.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metric": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "FromLogits.update": {
            "name": "update",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "preds": [
                    "Dict",
                    "str",
                    "int"
                ],
                "target": [
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "bytes",
                    "None",
                    "str",
                    "Optional[Dict[str,str]]",
                    "int",
                    "Dict[str,str]"
                ]
            }
        },
        "FromLogits.compute": {
            "name": "compute",
            "location": 64,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FixedWandbLogger.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[str]",
                    "None",
                    "str",
                    "Optional[dict]",
                    "Callable",
                    "Dict",
                    "Optional[List[str]]",
                    "List[str]",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]"
                ],
                "save_dir": [
                    "Optional[str]",
                    "None",
                    "str",
                    "Optional[dict]",
                    "Callable",
                    "Dict",
                    "Optional[List[str]]",
                    "List[str]",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]"
                ],
                "offline": [
                    "bool",
                    "Optional[str]",
                    "Optional[dict]",
                    "str",
                    "Callable",
                    "Optional[List[str]]",
                    "Optional[Dict[str,Any]]"
                ],
                "id": [
                    "Optional[str]",
                    "None",
                    "str",
                    "Optional[dict]",
                    "Callable",
                    "Dict",
                    "Optional[List[str]]",
                    "List[str]",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]"
                ],
                "anonymous": [
                    "bool",
                    "Optional[str]",
                    "Optional[dict]",
                    "str",
                    "Callable",
                    "Optional[List[str]]",
                    "Optional[Dict[str,Any]]"
                ],
                "version": [
                    "Optional[str]",
                    "None",
                    "str",
                    "Optional[dict]",
                    "Callable",
                    "Dict",
                    "Optional[List[str]]",
                    "List[str]",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]"
                ],
                "project": [
                    "Optional[str]",
                    "None",
                    "str",
                    "Optional[dict]",
                    "Callable",
                    "Dict",
                    "Optional[List[str]]",
                    "List[str]",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]"
                ],
                "log_model": [
                    "bool",
                    "Optional[str]",
                    "Optional[dict]",
                    "str",
                    "Callable",
                    "Optional[List[str]]",
                    "Optional[Dict[str,Any]]"
                ],
                "experiment": [
                    "Optional[str]",
                    "None",
                    "str",
                    "Optional[dict]",
                    "Callable",
                    "Dict",
                    "Optional[List[str]]",
                    "List[str]",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]"
                ],
                "prefix": [
                    "Text",
                    "Optional[str]",
                    "Optional[dict]",
                    "str",
                    "Callable",
                    "Optional[List[str]]",
                    "Optional[Dict[str,Any]]"
                ],
                "sync_step": [
                    "bool",
                    "Optional[str]",
                    "Optional[dict]",
                    "str",
                    "Callable",
                    "Optional[List[str]]",
                    "Optional[Dict[str,Any]]"
                ],
                "checkpoint_dir": [
                    "str",
                    "List[str]",
                    "None",
                    "bool"
                ]
            }
        },
        "FixedWandbLogger.finalize": {
            "name": "finalize",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "str",
                    "Optional[float]",
                    "float",
                    "None"
                ]
            }
        }
    },
    "slp-master/slp/plbind/metrics.py": {
        "_multiclass_accuracy_update": {
            "name": "_multiclass_accuracy_update",
            "location": 9,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "preds": [
                    "List[List[str]]"
                ],
                "targets": [
                    "float",
                    "int"
                ]
            }
        },
        "MoseiAcc2.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exclude_neutral": [
                    "int",
                    "bool",
                    "float"
                ],
                "compute_on_step": [
                    "str",
                    "Union[str, Dict[str, str]]",
                    "Mapping[str, Any]"
                ],
                "dist_sync_on_step": [
                    "str",
                    "Union[str, Dict[str, str]]",
                    "Mapping[str, Any]"
                ],
                "process_group": [
                    "str",
                    "Union[str, Dict[str, str]]",
                    "Mapping[str, Any]"
                ],
                "dist_sync_fn": [
                    "str",
                    "Union[str, Dict[str, str]]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "MoseiAcc2.update": {
            "name": "update",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "preds": [
                    "str",
                    "int",
                    "bytes"
                ],
                "targets": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "MoseiAcc2.compute": {
            "name": "compute",
            "location": 50,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MoseiMulticlassAcc.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "clamp": [
                    "int",
                    "bool",
                    "float"
                ],
                "compute_on_step": [
                    "bytes",
                    "Optional[str]"
                ],
                "dist_sync_on_step": [
                    "bytes",
                    "Optional[str]"
                ],
                "process_group": [
                    "bytes",
                    "Optional[str]"
                ],
                "dist_sync_fn": [
                    "bytes",
                    "Optional[str]"
                ]
            }
        },
        "MoseiMulticlassAcc.update": {
            "name": "update",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "preds": [
                    "float",
                    "str",
                    "int"
                ],
                "targets": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "MoseiMulticlassAcc.compute": {
            "name": "compute",
            "location": 82,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MoseiF1.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exclude_neutral": [
                    "int",
                    "bool",
                    "float"
                ],
                "compute_on_step": [
                    "str",
                    "Union[str, Dict[str, str]]",
                    "Mapping[str, Any]"
                ],
                "dist_sync_on_step": [
                    "str",
                    "Union[str, Dict[str, str]]",
                    "Mapping[str, Any]"
                ],
                "process_group": [
                    "str",
                    "Union[str, Dict[str, str]]",
                    "Mapping[str, Any]"
                ],
                "dist_sync_fn": [
                    "str",
                    "Union[str, Dict[str, str]]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "MoseiF1.update": {
            "name": "update",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "preds": [
                    "str",
                    "int",
                    "bytes"
                ],
                "targets": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "MoseiF1.compute": {
            "name": "compute",
            "location": 127,
            "return": [
                "bool",
                "Optional[int]",
                "int",
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MoseiAcc5.__init__": {
            "name": "__init__",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "compute_on_step": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "dist_sync_on_step": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "process_group": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "dist_sync_fn": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "MoseiAcc7.__init__": {
            "name": "__init__",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "compute_on_step": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "dist_sync_on_step": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "process_group": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "dist_sync_fn": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "slp-master/slp/plbind/module.py": {
        "_Predictor.parse_batch": {
            "name": "parse_batch",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "batch": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "_Predictor.get_predictions_and_targets": {
            "name": "get_predictions_and_targets",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "int",
                    "str",
                    "typing.Any",
                    "None",
                    "typing.IO"
                ],
                "batch": [
                    "int",
                    "str",
                    "typing.Any",
                    "None",
                    "typing.IO"
                ]
            }
        },
        "_Classification.parse_batch": {
            "name": "parse_batch",
            "location": 62,
            "return": [
                "tuple[typing.Union[int,str]]"
            ],
            "arguments": {
                "self": [],
                "batch": [
                    "tuple[typing.Union[int,int]]",
                    "str"
                ]
            }
        },
        "_Classification.get_predictions_and_targets": {
            "name": "get_predictions_and_targets",
            "location": 78,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "int",
                    "str",
                    "typing.Type"
                ],
                "batch": [
                    "str",
                    "bool"
                ]
            }
        },
        "_AutoEncoder.parse_batch": {
            "name": "parse_batch",
            "location": 99,
            "return": [
                "tuple[str]"
            ],
            "arguments": {
                "self": [],
                "batch": [
                    "str"
                ]
            }
        },
        "_AutoEncoder.get_predictions_and_targets": {
            "name": "get_predictions_and_targets",
            "location": 114,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "int",
                    "str",
                    "typing.Type"
                ],
                "batch": [
                    "str",
                    "bool"
                ]
            }
        },
        "_RnnClassification.parse_batch": {
            "name": "parse_batch",
            "location": 135,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "batch": []
            }
        },
        "_RnnClassification.get_predictions_and_targets": {
            "name": "get_predictions_and_targets",
            "location": 153,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "int",
                    "str",
                    "typing.Type"
                ],
                "batch": [
                    "str",
                    "int",
                    "typing.Mapping"
                ]
            }
        },
        "_TransformerClassification.parse_batch": {
            "name": "parse_batch",
            "location": 174,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "batch": []
            }
        },
        "_TransformerClassification.get_predictions_and_targets": {
            "name": "get_predictions_and_targets",
            "location": 194,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "int",
                    "str",
                    "typing.Type"
                ],
                "batch": [
                    "str",
                    "bool"
                ]
            }
        },
        "_MultimodalTransformerClassification.parse_batch": {
            "name": "parse_batch",
            "location": 215,
            "return": [
                "tuple[dict[, ]]"
            ],
            "arguments": {
                "self": [],
                "batch": []
            }
        },
        "_MultimodalTransformerClassification.get_predictions_and_targets": {
            "name": "get_predictions_and_targets",
            "location": 238,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "int",
                    "str",
                    "typing.Type"
                ],
                "batch": [
                    "str",
                    "bool"
                ]
            }
        },
        "_Transformer.parse_batch": {
            "name": "parse_batch",
            "location": 259,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "batch": [
                    "tuple[typing.Union[int,int]]",
                    "str"
                ]
            }
        },
        "_Transformer.get_predictions_and_targets": {
            "name": "get_predictions_and_targets",
            "location": 290,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "str",
                    "int",
                    "typing.Iterable[str]"
                ],
                "batch": [
                    "str",
                    "bytes"
                ]
            }
        },
        "_BertSequenceClassification.parse_batch": {
            "name": "parse_batch",
            "location": 316,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "batch": []
            }
        },
        "_BertSequenceClassification.get_predictions_and_targets": {
            "name": "get_predictions_and_targets",
            "location": 337,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "bool",
                    "typing.Sequence[str]"
                ],
                "batch": [
                    "str",
                    "bool"
                ]
            }
        },
        "SimplePLModule.__init__": {
            "name": "__init__",
            "location": 363,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "bool",
                    "typing.Sequence[typing.Sequence[float]]",
                    "float"
                ],
                "optimizer": [
                    "bool",
                    "typing.Sequence[typing.Sequence[float]]",
                    "float"
                ],
                "criterion": [
                    "bool",
                    "typing.Sequence[typing.Sequence[float]]",
                    "float"
                ],
                "lr_scheduler": [
                    "None",
                    "bool",
                    "typing.Sequence[typing.Sequence[float]]",
                    "float"
                ],
                "hparams": [
                    "None",
                    "float",
                    "typing.Type",
                    "dict[, ]"
                ],
                "metrics": [
                    "None"
                ],
                "predictor_cls": [
                    "_Classification"
                ],
                "calculate_perplexity": [
                    "bool"
                ]
            }
        },
        "SimplePLModule.configure_optimizers": {
            "name": "configure_optimizers",
            "location": 420,
            "return": [
                "tuple[list[dict[typing.Text, typing.Text]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimplePLModule.forward": {
            "name": "forward",
            "location": 438,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimplePLModule._compute_metrics": {
            "name": "_compute_metrics",
            "location": 443,
            "return": [
                "dict[typing.Text, typing.Union[str,int,tuple[]]]"
            ],
            "arguments": {
                "self": [],
                "metrics": [],
                "loss": [
                    "str",
                    "int",
                    "tuple[]"
                ],
                "y_hat": [
                    "dict[str, typing.Any]",
                    "bool",
                    "str",
                    "dict[str, dict[str, float]]",
                    "dict[, ]"
                ],
                "targets": [
                    "dict[str, typing.Any]",
                    "bool",
                    "str",
                    "dict[str, dict[str, float]]",
                    "dict[, ]"
                ],
                "mode": [
                    "typing.Text"
                ]
            }
        },
        "SimplePLModule.log_to_console": {
            "name": "log_to_console",
            "location": 471,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metrics": [
                    "dict[, ]",
                    "dict[str, float]",
                    "dict[str, dict[, ]]",
                    "dict[str, dict[str, typing.Any]]"
                ],
                "mode": [
                    "typing.Text"
                ]
            }
        },
        "SimplePLModule.aggregate_epoch_metrics": {
            "name": "aggregate_epoch_metrics",
            "location": 488,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": [],
                "outputs": [
                    "list[int]",
                    "list[str]"
                ],
                "mode": [
                    "typing.Text"
                ]
            }
        },
        "SimplePLModule.training_step": {
            "name": "training_step",
            "location": 509,
            "return": [],
            "arguments": {
                "self": [],
                "batch": [
                    "str",
                    "list[list[typing.Any]]"
                ],
                "batch_idx": [
                    "int",
                    "list[str]",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "SimplePLModule.training_epoch_end": {
            "name": "training_epoch_end",
            "location": 537,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "outputs": [
                    "str",
                    "typing.IO",
                    "bool",
                    "typing.TextIO",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "SimplePLModule.validation_step": {
            "name": "validation_step",
            "location": 546,
            "return": [
                "str",
                "int",
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "batch": [
                    "str",
                    "int"
                ],
                "batch_idx": [
                    "int",
                    "list[str]",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "SimplePLModule.validation_epoch_end": {
            "name": "validation_epoch_end",
            "location": 568,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "outputs": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "SimplePLModule.test_step": {
            "name": "test_step",
            "location": 585,
            "return": [],
            "arguments": {
                "self": [],
                "batch": [],
                "batch_idx": [
                    "str",
                    "bool"
                ]
            }
        },
        "SimplePLModule.test_epoch_end": {
            "name": "test_epoch_end",
            "location": 603,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "outputs": [
                    "typing.IO",
                    "bool"
                ]
            }
        },
        "PLModule.__init__": {
            "name": "__init__",
            "location": 614,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "optimizer": [],
                "criterion": [],
                "lr_scheduler": [
                    "None"
                ],
                "hparams": [
                    "None"
                ],
                "metrics": [
                    "None"
                ],
                "calculate_perplexity": [
                    "bool"
                ]
            }
        },
        "AutoEncoderPLModule.__init__": {
            "name": "__init__",
            "location": 638,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "str",
                    "list[int]"
                ],
                "optimizer": [
                    "str",
                    "list[int]"
                ],
                "criterion": [
                    "str",
                    "list[int]"
                ],
                "lr_scheduler": [
                    "None",
                    "str",
                    "list[int]"
                ],
                "hparams": [
                    "None",
                    "str",
                    "list[int]"
                ],
                "metrics": [
                    "None",
                    "str",
                    "list[int]"
                ],
                "calculate_perplexity": [
                    "bool"
                ]
            }
        },
        "RnnPLModule.__init__": {
            "name": "__init__",
            "location": 662,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "optimizer": [],
                "criterion": [],
                "lr_scheduler": [
                    "None"
                ],
                "hparams": [
                    "None"
                ],
                "metrics": [
                    "None"
                ],
                "calculate_perplexity": [
                    "bool"
                ]
            }
        },
        "TransformerClassificationPLModule.__init__": {
            "name": "__init__",
            "location": 686,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "str",
                    "list[int]"
                ],
                "optimizer": [
                    "str",
                    "list[int]"
                ],
                "criterion": [
                    "str",
                    "list[int]"
                ],
                "lr_scheduler": [
                    "None",
                    "str",
                    "list[int]"
                ],
                "hparams": [
                    "None",
                    "str",
                    "list[int]"
                ],
                "metrics": [
                    "None",
                    "str",
                    "list[int]"
                ],
                "calculate_perplexity": [
                    "bool"
                ]
            }
        },
        "TransformerPLModule.__init__": {
            "name": "__init__",
            "location": 710,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "optimizer": [],
                "criterion": [],
                "lr_scheduler": [
                    "None"
                ],
                "hparams": [
                    "None"
                ],
                "metrics": [
                    "None"
                ],
                "calculate_perplexity": [
                    "bool"
                ]
            }
        },
        "BertPLModule.__init__": {
            "name": "__init__",
            "location": 734,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "optimizer": [],
                "criterion": [],
                "lr_scheduler": [
                    "None"
                ],
                "hparams": [
                    "None"
                ],
                "metrics": [
                    "None"
                ],
                "calculate_perplexity": [
                    "bool"
                ]
            }
        },
        "MultimodalTransformerClassificationPLModule.__init__": {
            "name": "__init__",
            "location": 758,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "list[int]",
                    "str"
                ],
                "optimizer": [
                    "list[int]",
                    "str"
                ],
                "criterion": [
                    "list[int]",
                    "str"
                ],
                "lr_scheduler": [
                    "None",
                    "list[int]",
                    "str"
                ],
                "hparams": [
                    "None",
                    "list[int]",
                    "str"
                ],
                "metrics": [
                    "None",
                    "list[int]",
                    "str"
                ],
                "calculate_perplexity": [
                    "bool"
                ]
            }
        },
        "SimplePLModule._compute_metrics.fmt": {
            "name": "fmt",
            "location": 454,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "name": []
            }
        },
        "SimplePLModule.aggregate_epoch_metrics.fmt": {
            "name": "fmt",
            "location": 496,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "name": []
            }
        }
    },
    "slp-master/slp/plbind/trainer.py": {
        "add_tune_args": {
            "name": "add_tune_args",
            "location": 14,
            "return": [],
            "arguments": {
                "parent_parser": []
            }
        },
        "add_trainer_args": {
            "name": "add_trainer_args",
            "location": 56,
            "return": [],
            "arguments": {
                "parent_parser": []
            }
        },
        "add_optimizer_args": {
            "name": "add_optimizer_args",
            "location": 248,
            "return": [],
            "arguments": {
                "parent_parser": []
            }
        },
        "make_trainer": {
            "name": "make_trainer",
            "location": 338,
            "return": [],
            "arguments": {
                "experiment_name": [
                    "typing.Text"
                ],
                "experiment_description": [
                    "None",
                    "str",
                    "bytes"
                ],
                "run_id": [
                    "None",
                    "str",
                    "dict[str, typing.Any]",
                    "bool"
                ],
                "experiment_group": [
                    "None",
                    "str",
                    "bytes"
                ],
                "experiments_folder": [
                    "typing.Text"
                ],
                "save_top_k": [
                    "int"
                ],
                "patience": [
                    "int"
                ],
                "wandb_project": [
                    "None",
                    "str",
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "wandb_user": [
                    "None",
                    "str",
                    "bytes"
                ],
                "force_wandb_offline": [
                    "bool"
                ],
                "tags": [
                    "None",
                    "str",
                    "bytes"
                ],
                "stochastic_weight_avg": [
                    "bool"
                ],
                "auto_scale_batch_size": [
                    "bool"
                ],
                "gpus": [
                    "int"
                ],
                "check_val_every_n_epoch": [
                    "int"
                ],
                "gradient_clip_val": [
                    "int"
                ],
                "precision": [
                    "int"
                ],
                "num_nodes": [
                    "int"
                ],
                "max_epochs": [
                    "int"
                ],
                "max_steps": [
                    "None",
                    "int",
                    "list[int]",
                    "str"
                ],
                "accumulate_grad_batches": [
                    "int"
                ],
                "truncated_bptt_steps": [
                    "None",
                    "int",
                    "list[int]",
                    "str"
                ],
                "fast_dev_run": [
                    "None",
                    "str",
                    "int"
                ],
                "overfit_batches": [
                    "None",
                    "str",
                    "int"
                ],
                "terminate_on_nan": [
                    "bool"
                ],
                "profiler": [
                    "typing.Text"
                ],
                "early_stop_on": [
                    "typing.Text"
                ],
                "early_stop_mode": [
                    "typing.Text"
                ]
            }
        },
        "make_trainer_for_ray_tune": {
            "name": "make_trainer_for_ray_tune",
            "location": 531,
            "return": [],
            "arguments": {
                "patience": [
                    "int"
                ],
                "stochastic_weight_avg": [
                    "bool"
                ],
                "gpus": [
                    "int"
                ],
                "gradient_clip_val": [
                    "int"
                ],
                "precision": [
                    "int"
                ],
                "max_epochs": [
                    "int"
                ],
                "max_steps": [
                    "None",
                    "int",
                    "str"
                ],
                "truncated_bptt_steps": [
                    "None",
                    "int",
                    "str"
                ],
                "terminate_on_nan": [
                    "bool"
                ],
                "early_stop_on": [
                    "typing.Text"
                ],
                "early_stop_mode": [
                    "typing.Text"
                ],
                "metrics_map": [
                    "None",
                    "float",
                    "str"
                ]
            }
        },
        "watch_model": {
            "name": "watch_model",
            "location": 609,
            "return": [
                "None"
            ],
            "arguments": {
                "trainer": [
                    "str",
                    "int"
                ],
                "model": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "slp-master/slp/plbind/__init__.py": {},
    "slp-master/slp/util/log.py": {
        "log_to_file": {
            "name": "log_to_file",
            "location": 10,
            "return": [
                "Text",
                "str",
                "List[str]"
            ],
            "arguments": {
                "fname_prefix": [
                    "str",
                    "int"
                ]
            }
        },
        "configure_logging": {
            "name": "configure_logging",
            "location": 29,
            "return": [
                "str",
                "None",
                "Type",
                "List[bytes]",
                "Iterable[float]",
                "float",
                "int"
            ],
            "arguments": {
                "logfile_prefix": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Optional[float]",
                    "float"
                ]
            }
        },
        "configure_logging.tqdm_write": {
            "name": "tqdm_write",
            "location": 73,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "TextIO",
                    "IO"
                ]
            }
        },
        "configure_logging.InterceptHandler.emit": {
            "name": "emit",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "logging.LogRecord",
                    "Union[str, int]"
                ]
            }
        }
    },
    "slp-master/slp/util/mosei.py": {
        "get_mosei_parser": {
            "name": "get_mosei_parser",
            "location": 19,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "multiclass_acc": {
            "name": "multiclass_acc",
            "location": 166,
            "return": [
                "float"
            ],
            "arguments": {
                "preds": [
                    "str",
                    "int"
                ],
                "truths": []
            }
        },
        "weighted_accuracy": {
            "name": "weighted_accuracy",
            "location": 176,
            "return": [
                "float"
            ],
            "arguments": {
                "test_preds_emo": [
                    "int"
                ],
                "test_truth_emo": [
                    "int"
                ]
            }
        },
        "eval_mosei_senti": {
            "name": "eval_mosei_senti",
            "location": 187,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "results": [
                    "bool",
                    "float"
                ],
                "truths": [
                    "bool",
                    "typing.Callable[, ]",
                    "None",
                    "str"
                ],
                "exclude_zero": [
                    "bool"
                ]
            }
        },
        "eval_mosei_senti_old": {
            "name": "eval_mosei_senti_old",
            "location": 236,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "results": [
                    "bool",
                    "float"
                ],
                "truths": [
                    "bool",
                    "str",
                    "None",
                    "float",
                    "dict[int, dict[, ]]"
                ],
                "exclude_zero": [
                    "bool"
                ]
            }
        },
        "print_metrics": {
            "name": "print_metrics",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "metrics": [
                    "dict[str, object]",
                    "dict[str, dict[str, int]]",
                    "dict[str, str]"
                ]
            }
        },
        "save_metrics": {
            "name": "save_metrics",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "metrics": [
                    "dict[str, str]",
                    "dict[, ]",
                    "dict[str, list[str]]"
                ],
                "results_file": [
                    "str"
                ]
            }
        },
        "eval_mosi": {
            "name": "eval_mosi",
            "location": 288,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "results": [
                    "dict[str, typing.Any]",
                    "bool",
                    "dict[, ]"
                ],
                "truths": [
                    "dict[str, typing.Any]",
                    "bool",
                    "dict[, ]"
                ],
                "exclude_zero": [
                    "bool"
                ]
            }
        },
        "eval_iemocap": {
            "name": "eval_iemocap",
            "location": 292,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "results": [
                    "str",
                    "bool"
                ],
                "truths": [
                    "bool",
                    "typing.Callable[, ]",
                    "None",
                    "str"
                ],
                "single": [
                    "int"
                ]
            }
        },
        "run_evaluation": {
            "name": "run_evaluation",
            "location": 309,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "model": [],
                "test_loader": [
                    "bool",
                    "list[str]",
                    "str",
                    "typing.Callable[, ]",
                    "None",
                    "dict[, ]"
                ],
                "results_file": [
                    "str"
                ]
            }
        }
    },
    "slp-master/slp/util/pytorch.py": {
        "repeat_layer": {
            "name": "repeat_layer",
            "location": 79,
            "return": [],
            "arguments": {
                "l": [],
                "times": []
            }
        },
        "pad_mask": {
            "name": "pad_mask",
            "location": 93,
            "return": [],
            "arguments": {
                "lengths": [],
                "max_length": []
            }
        },
        "subsequent_mask": {
            "name": "subsequent_mask",
            "location": 115,
            "return": [],
            "arguments": {
                "max_length": []
            }
        },
        "sort_sequences": {
            "name": "sort_sequences",
            "location": 130,
            "return": [],
            "arguments": {
                "inputs": [],
                "lengths": []
            }
        },
        "to_device": {
            "name": "to_device",
            "location": 154,
            "return": [],
            "arguments": {
                "tt": [],
                "device": [],
                "non_blocking": []
            }
        },
        "t_": {
            "name": "t_",
            "location": 171,
            "return": [],
            "arguments": {
                "data": [],
                "dtype": [],
                "device": [],
                "requires_grad": []
            }
        },
        "t": {
            "name": "t",
            "location": 204,
            "return": [],
            "arguments": {
                "data": [],
                "dtype": [],
                "device": [],
                "requires_grad": []
            }
        },
        "mktensor": {
            "name": "mktensor",
            "location": 233,
            "return": [],
            "arguments": {
                "data": [],
                "dtype": [],
                "device": [],
                "requires_grad": [],
                "copy_tensor": []
            }
        },
        "from_checkpoint": {
            "name": "from_checkpoint",
            "location": 265,
            "return": [],
            "arguments": {
                "checkpoint_file": [],
                "obj": [],
                "map_location": [],
                "dataparallel": []
            }
        },
        "rotate_tensor": {
            "name": "rotate_tensor",
            "location": 303,
            "return": [],
            "arguments": {
                "l": [],
                "n": []
            }
        },
        "shift_tensor": {
            "name": "shift_tensor",
            "location": 317,
            "return": [],
            "arguments": {
                "l": [],
                "n": []
            }
        },
        "moore_penrose_pinv": {
            "name": "moore_penrose_pinv",
            "location": 333,
            "return": [],
            "arguments": {
                "x": [],
                "num_iter": []
            }
        },
        "pad_sequence": {
            "name": "pad_sequence",
            "location": 361,
            "return": [],
            "arguments": {
                "sequences": [],
                "batch_first": [],
                "padding_value": [],
                "max_length": []
            }
        },
        "NoOp.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NoOp.forward": {
            "name": "forward",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "PadPackedSequence.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "batch_first": [],
                "max_length": []
            }
        },
        "PadPackedSequence.forward": {
            "name": "forward",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "lengths": []
            }
        },
        "PackSequence.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "batch_first": []
            }
        },
        "PackSequence.forward": {
            "name": "forward",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "lengths": []
            }
        },
        "sort_sequences.unsort": {
            "name": "unsort",
            "location": 146,
            "return": [],
            "arguments": {
                "tt": []
            }
        }
    },
    "slp-master/slp/util/system.py": {
        "has_internet_connection": {
            "name": "has_internet_connection",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {
                "timeout": [
                    "int"
                ]
            }
        },
        "date_fname": {
            "name": "date_fname",
            "location": 53,
            "return": [],
            "arguments": {
                "append_uuid": [
                    "bool"
                ]
            }
        },
        "print_separator": {
            "name": "print_separator",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "symbol": [
                    "typing.Text"
                ],
                "n": [
                    "int"
                ],
                "print_fn": []
            }
        },
        "is_url": {
            "name": "is_url",
            "location": 87,
            "return": [
                "bool"
            ],
            "arguments": {
                "inp": [
                    "str",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "is_file": {
            "name": "is_file",
            "location": 109,
            "return": [
                "bool"
            ],
            "arguments": {
                "inp": [
                    "str",
                    "bool",
                    "list[]"
                ]
            }
        },
        "is_subpath": {
            "name": "is_subpath",
            "location": 131,
            "return": [],
            "arguments": {
                "child": [
                    "str",
                    "int",
                    "dict[str, typing.Any]"
                ],
                "parent": [
                    "str",
                    "bool",
                    "typing.Callable[, ]"
                ]
            }
        },
        "safe_mkdirs": {
            "name": "safe_mkdirs",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "timethis": {
            "name": "timethis",
            "location": 173,
            "return": [],
            "arguments": {
                "method": [
                    "bool"
                ]
            }
        },
        "suppress_print": {
            "name": "suppress_print",
            "location": 214,
            "return": [],
            "arguments": {
                "func": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "run_cmd": {
            "name": "run_cmd",
            "location": 233,
            "return": [
                "tuple[typing.Text]"
            ],
            "arguments": {
                "command": [
                    "str"
                ]
            }
        },
        "run_cmd_silent": {
            "name": "run_cmd_silent",
            "location": 263,
            "return": [],
            "arguments": {
                "command": [
                    "int",
                    "list[int]",
                    "str"
                ]
            }
        },
        "download_url": {
            "name": "download_url",
            "location": 280,
            "return": [
                "str"
            ],
            "arguments": {
                "url": [
                    "str",
                    "bytes"
                ],
                "dest_path": [
                    "str",
                    "list[]",
                    "list[str]"
                ]
            }
        },
        "write_wav": {
            "name": "write_wav",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "byte_str": [
                    "str",
                    "bool",
                    "bytes"
                ],
                "wav_file": [
                    "str"
                ]
            }
        },
        "read_wav": {
            "name": "read_wav",
            "location": 311,
            "return": [],
            "arguments": {
                "wav_sample": [
                    "str"
                ]
            }
        },
        "pickle_load": {
            "name": "pickle_load",
            "location": 326,
            "return": [],
            "arguments": {
                "fname": [
                    "str"
                ]
            }
        },
        "pickle_dump": {
            "name": "pickle_dump",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "dict[, ]",
                    "dict[str, object]",
                    "int"
                ],
                "fname": [
                    "str"
                ]
            }
        },
        "yaml_load": {
            "name": "yaml_load",
            "location": 352,
            "return": [],
            "arguments": {
                "fname": [
                    "str"
                ]
            }
        },
        "yaml_dump": {
            "name": "yaml_dump",
            "location": 367,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "dict[, ]",
                    "dict[str, object]",
                    "int"
                ],
                "fname": [
                    "str"
                ]
            }
        },
        "json_load": {
            "name": "json_load",
            "location": 378,
            "return": [],
            "arguments": {
                "fname": [
                    "str"
                ]
            }
        },
        "json_dump": {
            "name": "json_dump",
            "location": 393,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "dict[, ]",
                    "dict[str, object]",
                    "int"
                ],
                "fname": [
                    "str"
                ]
            }
        },
        "timethis.timethis_inner": {
            "name": "timethis_inner",
            "location": 181,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "suppress_print.func_wrapper": {
            "name": "func_wrapper",
            "location": 222,
            "return": [],
            "arguments": {}
        },
        "timethis.timethis_inner.timed": {
            "name": "timed",
            "location": 185,
            "return": [],
            "arguments": {}
        }
    },
    "slp-master/slp/util/tuning.py": {
        "_extract_wandb_config": {
            "name": "_extract_wandb_config",
            "location": 14,
            "return": [
                "dict",
                "Optional[dict]",
                "app.config.MQConfig",
                "str",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "config": [
                    "Dict[str,str]",
                    "pyramid.config.Configurator",
                    "sphinx.config.Config",
                    "config.Config",
                    "Dict[str,Any]"
                ]
            }
        },
        "run_tuning": {
            "name": "run_tuning",
            "location": 64,
            "return": [
                "dict",
                "bool",
                "int",
                "revlibs.connections.config.Config",
                "qutebrowser.config.config.Config"
            ],
            "arguments": {
                "config": [
                    "str",
                    "Dict",
                    "Optional[pyramid.config.Configurator]",
                    "None"
                ],
                "output_config_file": [
                    "str",
                    "bool"
                ],
                "train_fn": [
                    "Sequence[str]",
                    "str"
                ],
                "config_fn": [
                    "Dict[str,Any]",
                    "Dict",
                    "alembic.config.Config"
                ],
                "train": [
                    "Sequence[str]",
                    "str",
                    "None"
                ],
                "val": [
                    "Sequence[str]",
                    "str",
                    "None"
                ]
            }
        }
    },
    "slp-master/slp/util/types.py": {
        "dir_path": {
            "name": "dir_path",
            "location": 34,
            "return": [
                "str",
                "bool",
                "List[int]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "slp-master/slp/util/__init__.py": {},
    "slp-master/tests/test_transformer.py": {
        "create_model": {
            "name": "create_model",
            "location": 50,
            "return": [
                "Transformer",
                "bool",
                "str",
                "Type",
                "bytes",
                "Tuple[float,float,float]",
                "Set"
            ],
            "arguments": {
                "hidden_size": [
                    "int",
                    "Tuple[int,int]",
                    "str"
                ]
            }
        },
        "test_transformer_output_size": {
            "name": "test_transformer_output_size",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_inner_layers_output_size": {
            "name": "test_inner_layers_output_size",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DummyDataset.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DummyDataset.__len__": {
            "name": "__len__",
            "location": 38,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DummyDataset.__getitem__": {
            "name": "__getitem__",
            "location": 41,
            "return": [
                "Tuple",
                "Dict",
                "str",
                "float",
                "bool",
                "Dict[str,Any]",
                "List"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "float",
                    "str",
                    "Callable[[int],str]",
                    "Callable[int,str]"
                ]
            }
        }
    },
    "slp-master/tools/average_calculation.py": {
        "average_column": {
            "name": "average_column",
            "location": 8,
            "return": [
                "Tuple[(Dict[(str, Any)], Dict[(str, Any)])]"
            ],
            "arguments": {
                "csv_filepath": [
                    "str"
                ]
            }
        }
    },
    "slp-master/tools/mp4list2frames.py": {
        "safe_mkdirs": {
            "name": "safe_mkdirs",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "suppress_print": {
            "name": "suppress_print",
            "location": 27,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[...,None]"
                ]
            }
        },
        "run_cmd": {
            "name": "run_cmd",
            "location": 44,
            "return": [
                "Tuple[Text]",
                "str",
                "int",
                "bool",
                "List"
            ],
            "arguments": {
                "command": [
                    "str"
                ]
            }
        },
        "run_cmd_async": {
            "name": "run_cmd_async",
            "location": 69,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "command": [
                    "str"
                ]
            }
        },
        "run_cmd_silent": {
            "name": "run_cmd_silent",
            "location": 87,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "command": [
                    "int",
                    "str",
                    "Iterable[str]",
                    "Awaitable",
                    "collections.abc.Awaitable"
                ],
                "sync": [
                    "bool",
                    "Coroutine",
                    "int"
                ]
            }
        },
        "read_file_list": {
            "name": "read_file_list",
            "location": 101,
            "return": [
                "str",
                "List"
            ],
            "arguments": {
                "flist": [
                    "str",
                    "int",
                    "complex",
                    "List[str]"
                ]
            }
        },
        "process_file": {
            "name": "process_file",
            "location": 107,
            "return": [
                "str",
                "int",
                "Dict[str,Any]",
                "range",
                "float"
            ],
            "arguments": {
                "f": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "bool",
                    "Optional[int]"
                ],
                "output_folder": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "fps": [
                    "int",
                    "Tuple[int]"
                ],
                "width": [
                    "int",
                    "Optional[int]",
                    "Optional[bool]"
                ],
                "height": [
                    "int",
                    "Optional[int]",
                    "Optional[bool]"
                ],
                "quality": [
                    "int",
                    "Tuple[int]"
                ],
                "sync": [
                    "bool",
                    "int",
                    "Tuple[int]"
                ]
            }
        },
        "parse_args": {
            "name": "parse_args",
            "location": 125,
            "return": [
                "List[str]",
                "Iterable[str]",
                "Optional[Iterable[str]]",
                "Callable[[None], None]",
                "str",
                "Tuple[str]"
            ],
            "arguments": {}
        },
        "suppress_print.func_wrapper": {
            "name": "func_wrapper",
            "location": 34,
            "return": [
                "List[str]",
                "bool",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        }
    },
    "slp-master/tools/mp4list2wavs.py": {
        "safe_mkdirs": {
            "name": "safe_mkdirs",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "suppress_print": {
            "name": "suppress_print",
            "location": 28,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[...,None]"
                ]
            }
        },
        "run_cmd": {
            "name": "run_cmd",
            "location": 45,
            "return": [
                "Tuple[Text]",
                "str",
                "int",
                "bool",
                "List"
            ],
            "arguments": {
                "command": [
                    "str"
                ]
            }
        },
        "run_cmd_async": {
            "name": "run_cmd_async",
            "location": 70,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "command": [
                    "str"
                ]
            }
        },
        "run_cmd_silent": {
            "name": "run_cmd_silent",
            "location": 88,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "command": [
                    "int",
                    "str",
                    "Iterable[str]",
                    "Awaitable",
                    "collections.abc.Awaitable"
                ],
                "sync": [
                    "bool",
                    "Coroutine",
                    "int"
                ]
            }
        },
        "read_file_list": {
            "name": "read_file_list",
            "location": 102,
            "return": [
                "str",
                "List"
            ],
            "arguments": {
                "flist": [
                    "str",
                    "int",
                    "complex",
                    "List[str]"
                ]
            }
        },
        "process_file": {
            "name": "process_file",
            "location": 108,
            "return": [
                "str",
                "Dict[str,Any]",
                "None",
                "int",
                "RuntimeError"
            ],
            "arguments": {
                "f": [
                    "str"
                ],
                "output_folder": [
                    "str",
                    "int"
                ],
                "sync": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "parse_args": {
            "name": "parse_args",
            "location": 118,
            "return": [
                "List[str]",
                "Tuple",
                "Iterable[str]",
                "Optional[Iterable[str]]",
                "Callable[[None],None]",
                "str",
                "Tuple[str]"
            ],
            "arguments": {}
        },
        "suppress_print.func_wrapper": {
            "name": "func_wrapper",
            "location": 35,
            "return": [
                "List[str]",
                "bool",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        }
    },
    "slp-master/tools/normalize.py": {
        "_is_punctuation": {
            "name": "_is_punctuation",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {
                "char": [
                    "str"
                ]
            }
        },
        "_run_split_on_punc": {
            "name": "_run_split_on_punc",
            "location": 53,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str",
                    "List",
                    "int"
                ]
            }
        },
        "strip_accents_and_lowercase": {
            "name": "strip_accents_and_lowercase",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "normalize": {
            "name": "normalize",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "process_file": {
            "name": "process_file",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "bool"
                ]
            }
        },
        "ProgressParallel.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "use_tqdm": [
                    "bool",
                    "Optional[Dict]",
                    "str"
                ],
                "total": [
                    "int",
                    "None",
                    "bool"
                ]
            }
        },
        "ProgressParallel.__call__": {
            "name": "__call__",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProgressParallel.print_progress": {
            "name": "print_progress",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slp-master/tools/poor-mans-video-editor.py": {
        "run_cmd": {
            "name": "run_cmd",
            "location": 15,
            "return": [
                "tuple[typing.Text]"
            ],
            "arguments": {
                "command": []
            }
        },
        "out_video": {
            "name": "out_video",
            "location": 43,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "segment": [],
                "greek": [
                    "bool"
                ]
            }
        },
        "input_video": {
            "name": "input_video",
            "location": 51,
            "return": [],
            "arguments": {
                "segment": []
            }
        },
        "manage_timestamps": {
            "name": "manage_timestamps",
            "location": 55,
            "return": [
                "list[]"
            ],
            "arguments": {
                "segment": []
            }
        },
        "to_cut_fmt": {
            "name": "to_cut_fmt",
            "location": 83,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "timestamp": []
            }
        },
        "to_cut_yaml": {
            "name": "to_cut_yaml",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "inmp4": [],
                "outmp4": [],
                "ymlname": [],
                "timestamps": []
            }
        },
        "format_timestamp_args": {
            "name": "format_timestamp_args",
            "location": 123,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "timestamps": []
            }
        },
        "ffmpeg": {
            "name": "ffmpeg",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "inp": [],
                "out": [],
                "timestamps_args": []
            }
        },
        "read_split_tsv": {
            "name": "read_split_tsv",
            "location": 160,
            "return": [
                "list[]"
            ],
            "arguments": {
                "timestamp_file": []
            }
        },
        "main": {
            "name": "main",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main1": {
            "name": "main1",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "to_cut_yaml.pairwise": {
            "name": "pairwise",
            "location": 99,
            "return": [
                "list[]"
            ],
            "arguments": {
                "iterable": []
            }
        },
        "format_timestamp_args.pairwise": {
            "name": "pairwise",
            "location": 127,
            "return": [
                "list[]"
            ],
            "arguments": {
                "iterable": []
            }
        }
    },
    "slp-master/tools/significance.py": {
        "_ztest": {
            "name": "_ztest",
            "location": 5,
            "return": [
                "str",
                "int",
                "List[None]",
                "Callable[[Mapping],T]",
                "Tuple[tuple[Union[Any,Any]]]",
                "List[int]",
                "List"
            ],
            "arguments": {
                "mean_scores": [
                    "bool",
                    "float",
                    "int"
                ],
                "null_hyp": [
                    "bool",
                    "float",
                    "int"
                ],
                "std_error": [
                    "bool",
                    "float",
                    "int"
                ],
                "delta": [
                    "float",
                    "bool",
                    "int"
                ],
                "mode": [
                    "Text",
                    "int",
                    "float",
                    "Tuple[int]",
                    "Union[float,int]"
                ]
            }
        },
        "_ttest": {
            "name": "_ttest",
            "location": 39,
            "return": [
                "str",
                "int",
                "List[None]",
                "Callable[[Mapping],T]",
                "Tuple[tuple[Union[Any,Any]]]",
                "List[int]",
                "List"
            ],
            "arguments": {
                "mean_scores": [
                    "bool",
                    "float",
                    "int",
                    "Union[float,Tuple[float,float]]"
                ],
                "null_hyp": [
                    "bool",
                    "float",
                    "int",
                    "Union[float,Tuple[float,float]]"
                ],
                "std_error": [
                    "bool",
                    "float",
                    "int",
                    "Union[float,Tuple[float,float]]"
                ],
                "dof": [
                    "int",
                    "float",
                    "str",
                    "bytes"
                ],
                "delta": [
                    "float",
                    "bool",
                    "int",
                    "Union[float,Tuple[float,float]]"
                ],
                "mode": [
                    "Text",
                    "int",
                    "float"
                ]
            }
        },
        "ztest_single": {
            "name": "ztest_single",
            "location": 74,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "samples": [
                    "int",
                    "bytes",
                    "Dict[int, str]",
                    "Optional[bytes]",
                    "List[str]",
                    "bool"
                ],
                "null_hyp": [
                    "int",
                    "float"
                ],
                "mode": [
                    "Text",
                    "int",
                    "float"
                ]
            }
        },
        "ztest_unpaired": {
            "name": "ztest_unpaired",
            "location": 93,
            "return": [
                "int",
                "bytes",
                "str"
            ],
            "arguments": {
                "samples_b": [
                    "str",
                    "int",
                    "Optional[float]",
                    "bool"
                ],
                "samples_null": [
                    "int",
                    "Dict[str, object]",
                    "bool",
                    "Callable",
                    "list"
                ],
                "mode": [
                    "Text",
                    "int",
                    "str",
                    "float",
                    "bool",
                    "Optional[int]",
                    "Dict"
                ]
            }
        },
        "ttest_single": {
            "name": "ttest_single",
            "location": 116,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "samples": [
                    "Dict[int, str]",
                    "List[str]",
                    "int",
                    "Union[float, str]",
                    "Optional[bytes]"
                ],
                "null_hyp": [
                    "int",
                    "float"
                ],
                "mode": [
                    "Text",
                    "int",
                    "float"
                ]
            }
        },
        "ttest_unpaired": {
            "name": "ttest_unpaired",
            "location": 136,
            "return": [
                "int",
                "bytes",
                "str"
            ],
            "arguments": {
                "samples_b": [
                    "Optional[int]",
                    "int",
                    "bool",
                    "str",
                    "numpy.ndarray"
                ],
                "samples_null": [
                    "bytes",
                    "int",
                    "List[Tuple[Any, Any]]",
                    "numpy.ndarray"
                ],
                "mode": [
                    "Text",
                    "int",
                    "str",
                    "float",
                    "bool",
                    "Optional[int]",
                    "Dict"
                ]
            }
        },
        "significance_test": {
            "name": "significance_test",
            "location": 166,
            "return": [
                "int",
                "str",
                "Dict[str, int]"
            ],
            "arguments": {
                "samples": [
                    "Tuple[int]",
                    "bool",
                    "List[List[float]]"
                ],
                "null_hypothesis": [
                    "int",
                    "Union[bytes, str, SupportsFloat]",
                    "Optional[int]",
                    "bool"
                ],
                "test": [
                    "None",
                    "Optional[str]",
                    "bool",
                    "str",
                    "float",
                    "Optional[int]",
                    "Callable[str,bool]",
                    "Optional[Callable[[str],bool]]",
                    "Optional[bool]"
                ],
                "p_thres": [
                    "float",
                    "int",
                    "Optional[float]"
                ],
                "mode": [
                    "Text",
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        }
    }
}
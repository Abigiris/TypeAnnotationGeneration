{
    "sls-flask-master/app.py": {},
    "sls-flask-master/doc/conf.py": {},
    "sls-flask-master/migrations/env.py": {
        "run_migrations_offline": {
            "name": "run_migrations_offline",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_migrations_online": {
            "name": "run_migrations_online",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_migrations_online.process_revision_directives": {
            "name": "process_revision_directives",
            "location": 70,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "context": [
                    "bool",
                    "List[str]",
                    "int"
                ],
                "revision": [
                    "bool",
                    "List[str]",
                    "int"
                ],
                "directives": [
                    "Callable[[Mapping], T]",
                    "list",
                    "List[List[str]]",
                    "int",
                    "str",
                    "tuple"
                ]
            }
        }
    },
    "sls-flask-master/migrations/versions/e1e763cb595b_user.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sls-flask-master/TEMPLATE/app.py": {},
    "sls-flask-master/TEMPLATE/commands.py": {
        "drop_all_tables": {
            "name": "drop_all_tables",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "app.App"
                ]
            }
        },
        "init_cli": {
            "name": "init_cli",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "int",
                    "dict[, ]",
                    "bool",
                    "app.AppT",
                    "dict"
                ],
                "manager": [
                    "Optional[str]",
                    "float",
                    "str",
                    "None"
                ]
            }
        },
        "init_handler": {
            "name": "init_handler",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "event": [
                    "list",
                    "list[]"
                ],
                "context": [
                    "list",
                    "list[]"
                ]
            }
        },
        "seed_handler": {
            "name": "seed_handler",
            "location": 66,
            "return": [
                "str"
            ],
            "arguments": {
                "event": [
                    "str"
                ],
                "context": [
                    "str"
                ]
            }
        },
        "migrate_handler": {
            "name": "migrate_handler",
            "location": 81,
            "return": [
                "str"
            ],
            "arguments": {
                "event": [
                    "str"
                ],
                "context": [
                    "str"
                ]
            }
        },
        "init_cli.seed_db_cmd": {
            "name": "seed_db_cmd",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "init_cli.init_db_cmd": {
            "name": "init_db_cmd",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "init_cli.drop_db_cmd": {
            "name": "drop_db_cmd",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "init_cli.config_cmd": {
            "name": "config_cmd",
            "location": 47,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "sls-flask-master/TEMPLATE/config.py": {
        "check_valid": {
            "name": "check_valid",
            "location": 106,
            "return": [
                "bool"
            ],
            "arguments": {
                "conf": [
                    "str",
                    "int"
                ]
            }
        },
        "check_valid_handler": {
            "name": "check_valid_handler",
            "location": 119,
            "return": [
                "dict"
            ],
            "arguments": {
                "event": [
                    "dict[, ]",
                    "dict",
                    "dict[str, typing.Any]",
                    "tuple",
                    "Dict[str, Any]"
                ],
                "context": [
                    "list",
                    "list[]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "ConfigurationInvalidError.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        },
        "ConfigurationInvalidError.__str__": {
            "name": "__str__",
            "location": 92,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigurationKeyMissingError.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "ConfigurationValueMissingError.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "check_valid.need_key": {
            "name": "need_key",
            "location": 109,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "k": [
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ]
            }
        }
    },
    "sls-flask-master/TEMPLATE/create_app.py": {
        "create_app": {
            "name": "create_app",
            "location": 28,
            "return": [
                "TEMPLATE.flaskapp.App"
            ],
            "arguments": {
                "test_config": [
                    "Optional[dict]"
                ]
            }
        },
        "init_auth": {
            "name": "init_auth",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "TEMPLATE.flaskapp.App"
                ]
            }
        },
        "configure_database": {
            "name": "configure_database",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "TEMPLATE.flaskapp.App"
                ]
            }
        },
        "test_db": {
            "name": "test_db",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "TEMPLATE.flaskapp.App"
                ]
            }
        },
        "configure_class": {
            "name": "configure_class",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "TEMPLATE.flaskapp.App"
                ]
            }
        },
        "configure_secrets": {
            "name": "configure_secrets",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "TEMPLATE.flaskapp.App"
                ]
            }
        },
        "configure_instance": {
            "name": "configure_instance",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "TEMPLATE.flaskapp.App"
                ]
            }
        },
        "configure": {
            "name": "configure",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "TEMPLATE.flaskapp.App"
                ],
                "test_config": [
                    "None",
                    "dict",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "pricemonitor.config.Config",
                    "sphinx.config.Config",
                    "evtstrd.config.Config"
                ]
            }
        },
        "init_xray": {
            "name": "init_xray",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "TEMPLATE.flaskapp.App"
                ]
            }
        },
        "init_auth.user_loader_callback": {
            "name": "user_loader_callback",
            "location": 55,
            "return": [
                "None",
                "Optional[str]",
                "Optional[bool]",
                "Optional[Type[Exception]]"
            ],
            "arguments": {
                "identity": [
                    "int",
                    "Dict[str, Any]",
                    "bytes",
                    "str"
                ]
            }
        },
        "init_auth.custom_user_loader_error": {
            "name": "custom_user_loader_error",
            "location": 64,
            "return": [
                "tuple[int]",
                "Dict[str, int]",
                "float"
            ],
            "arguments": {
                "identity": [
                    "str"
                ]
            }
        },
        "init_auth.user_identity_lookup": {
            "name": "user_identity_lookup",
            "location": 69,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "user": []
            }
        },
        "configure_database.shutdown_session": {
            "name": "shutdown_session",
            "location": 98,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "exception": [
                    "None",
                    "List[dict]",
                    "django.db.backends.postgresql_psycopg2.schema.DatabaseSchemaEditor",
                    "List[str]",
                    "str"
                ]
            }
        }
    },
    "sls-flask-master/TEMPLATE/flaskapp.py": {
        "App.get_config_value_or_raise": {
            "name": "get_config_value_or_raise",
            "location": 11,
            "return": [
                "str",
                "bool",
                "typing.Type",
                "list",
                "list[]",
                "bytes",
                "dict[typing.Any, typing.Type]",
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "dict[str, str]",
                    "Union[str, int]",
                    "None",
                    "Dict[str, str]",
                    "Optional[str]"
                ]
            }
        }
    },
    "sls-flask-master/TEMPLATE/secret.py": {
        "get_secret": {
            "name": "get_secret",
            "location": 10,
            "return": [
                "str",
                "bytes",
                "Optional[bytes]"
            ],
            "arguments": {
                "secret_name": [
                    "str"
                ]
            }
        },
        "update_app_config": {
            "name": "update_app_config",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "str",
                    "Union[Literal, str]"
                ],
                "secret_name": [
                    "str"
                ]
            }
        },
        "db_secret_to_url": {
            "name": "db_secret_to_url",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "secrets": [
                    "dict[, ]",
                    "str",
                    "Literal",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "sls-flask-master/TEMPLATE/__init__.py": {},
    "sls-flask-master/TEMPLATE/api/monitor.py": {
        "Monitoring.get": {
            "name": "get",
            "location": 17,
            "return": [
                "dict[typing.Text, bool]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sls-flask-master/TEMPLATE/api/__init__.py": {
        "init_views": {
            "name": "init_views",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sls-flask-master/TEMPLATE/api/auth/schema.py": {},
    "sls-flask-master/TEMPLATE/api/auth/__init__.py": {},
    "sls-flask-master/TEMPLATE/db/fixtures.py": {
        "seed_db": {
            "name": "seed_db",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sls-flask-master/TEMPLATE/db/__init__.py": {},
    "sls-flask-master/TEMPLATE/model/user.py": {},
    "sls-flask-master/TEMPLATE/model/__init__.py": {},
    "sls-flask-master/TEMPLATE/test/conftest.py": {
        "database": {
            "name": "database",
            "location": 26,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "request": [
                    "bool"
                ]
            }
        },
        "app": {
            "name": "app",
            "location": 38,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "database": []
            }
        },
        "_db": {
            "name": "_db",
            "location": 49,
            "return": [
                "Callable"
            ],
            "arguments": {
                "app": [
                    "Exception",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "client_unauthenticated": {
            "name": "client_unauthenticated",
            "location": 60,
            "return": [],
            "arguments": {
                "app": [
                    "str"
                ]
            }
        },
        "client": {
            "name": "client",
            "location": 65,
            "return": [],
            "arguments": {
                "app": [
                    "sqlalchemy.orm.Session"
                ],
                "user": [
                    "list[str]",
                    "List[str]",
                    "raiden.api.resAPIServer"
                ]
            }
        },
        "faker": {
            "name": "faker",
            "location": 78,
            "return": [
                "Faker",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "user": {
            "name": "user",
            "location": 83,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "normal_user_factory": [
                    "bool",
                    "Dict[str, List[str]]",
                    "Callable"
                ],
                "db_session": [
                    "Optional[str]",
                    "sqlalchemy.orm.Session",
                    "dict",
                    "str"
                ]
            }
        }
    },
    "sls-flask-master/TEMPLATE/test/test_app.py": {
        "test_config": {
            "name": "test_config",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_db": {
            "name": "test_db",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "db_session": []
            }
        }
    },
    "sls-flask-master/TEMPLATE/test/test_auth.py": {
        "test_login": {
            "name": "test_login",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "client_unauthenticated": [
                    "dict[, ]",
                    "str",
                    "dict"
                ],
                "user": [
                    "dict",
                    "dict[, ]"
                ],
                "db_session": []
            }
        }
    },
    "sls-flask-master/TEMPLATE/test/test_db_seed.py": {
        "test_db_init_seed": {
            "name": "test_db_init_seed",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "test_db_migrate_seed": {
            "name": "test_db_migrate_seed",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sls-flask-master/TEMPLATE/test/__init__.py": {}
}
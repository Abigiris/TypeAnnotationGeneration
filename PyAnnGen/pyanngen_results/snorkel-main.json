{
    "snorkel-main/setup.py": {},
    "snorkel-main/docs/conf.py": {
        "linkcode_resolve": {
            "name": "linkcode_resolve",
            "location": 115,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "domain": [
                    "int",
                    "str",
                    "torch.Tensor",
                    "T"
                ],
                "info": [
                    "str",
                    "List",
                    "bytes",
                    "Set[str]"
                ]
            }
        },
        "skip_torch_module_member": {
            "name": "skip_torch_module_member",
            "location": 130,
            "return": [
                "Union[(bool, _T4)]"
            ],
            "arguments": {
                "app": [
                    "bool",
                    "List[str]",
                    "int",
                    "str",
                    "Union[str,os.PathLike]"
                ],
                "what": [
                    "bool",
                    "List[str]",
                    "int",
                    "str",
                    "Union[str,os.PathLike]"
                ],
                "name": [
                    "str",
                    "Dict[str,Any]"
                ],
                "obj": [
                    "str",
                    "Dict[str,Any]"
                ],
                "skip": [
                    "str",
                    "Optional[str]",
                    "int",
                    "float",
                    "None",
                    "Sequence"
                ],
                "options": [
                    "bool",
                    "List[str]",
                    "int",
                    "str",
                    "Union[str,os.PathLike]"
                ]
            }
        },
        "setup": {
            "name": "setup",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        }
    },
    "snorkel-main/scripts/check_requirements.py": {
        "parse_section_name": {
            "name": "parse_section_name",
            "location": 22,
            "return": [
                "Any"
            ],
            "arguments": {
                "line": []
            }
        },
        "parse_package": {
            "name": "parse_package",
            "location": 26,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "line": []
            }
        },
        "parse_requirements": {
            "name": "parse_requirements",
            "location": 33,
            "return": [
                "Tuple[(dict, Dict[(Any, str)], set)]"
            ],
            "arguments": {}
        },
        "parse_setup": {
            "name": "parse_setup",
            "location": 64,
            "return": [
                "Tuple[(dict, dict, set, set)]"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 103,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "snorkel-main/scripts/sync_api_docs.py": {
        "get_title_and_underscore": {
            "name": "get_title_and_underscore",
            "location": 35,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {
                "package_name": [
                    "str"
                ]
            }
        },
        "get_package_members": {
            "name": "get_package_members",
            "location": 41,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "package": [
                    "str",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "check": [
                    "List[str]",
                    "bool",
                    "Optional[Sequence[str]]",
                    "Sequence[str]",
                    "Optional[List[str]]",
                    "None"
                ]
            }
        }
    },
    "snorkel-main/snorkel/version.py": {},
    "snorkel-main/snorkel/__init__.py": {},
    "snorkel-main/snorkel/analysis/error_analysis.py": {
        "get_label_buckets": {
            "name": "get_label_buckets",
            "location": 10,
            "return": [
                "Dict[(Any, np.ndarray)]"
            ],
            "arguments": {}
        },
        "get_label_instances": {
            "name": "get_label_instances",
            "location": 61,
            "return": [
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "bucket": [
                    "Tuple[int]",
                    "str",
                    "float"
                ],
                "x": [
                    "Sequence[T]",
                    "str",
                    "int",
                    "numpy.ndarray"
                ]
            }
        }
    },
    "snorkel-main/snorkel/analysis/metrics.py": {
        "metric_score": {
            "name": "metric_score",
            "location": 16,
            "return": [
                "numpy.array",
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "golds": [
                    "Dict[str,Any]",
                    "None",
                    "Optional[str]",
                    "Dict[int,int]",
                    "Optional[Dict[str,int]]",
                    "str",
                    "bool",
                    "Optional[Dict[str,float]]",
                    "Dict[str,int]",
                    "Dict[str,float]",
                    "Optional[dict]",
                    "Dict"
                ],
                "preds": [
                    "Dict[str,Any]",
                    "None",
                    "Optional[str]",
                    "Dict[int,int]",
                    "Optional[Dict[str,int]]",
                    "str",
                    "bool",
                    "Optional[Dict[str,float]]",
                    "Dict[str,int]",
                    "Dict[str,float]",
                    "Optional[dict]",
                    "Dict"
                ],
                "probs": [
                    "int",
                    "None",
                    "Dict[str,Any]",
                    "str",
                    "Optional[float]",
                    "bool",
                    "float"
                ],
                "metric": [
                    "Text",
                    "numpy.ndarray",
                    "Optional[List[Any]]",
                    "str",
                    "int",
                    "Optional[bool]",
                    "bool"
                ],
                "filter_dict": [
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "Dict",
                    "Dict[str,list[str]]",
                    "Dict[str,float]",
                    "int",
                    "Dict[str,List[str]]",
                    "Tuple[str,list]"
                ]
            }
        },
        "_coverage_score": {
            "name": "_coverage_score",
            "location": 85,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "preds": [
                    "List[int]",
                    "List[str]",
                    "numpy.ndarray",
                    "list",
                    "int",
                    "Sequence[T]"
                ]
            }
        },
        "_roc_auc_score": {
            "name": "_roc_auc_score",
            "location": 89,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "golds": [
                    "int",
                    "Callable",
                    "str"
                ],
                "probs": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "_f1_score": {
            "name": "_f1_score",
            "location": 97,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "golds": [
                    "bool",
                    "bytes",
                    "numpy.ndarray",
                    "int"
                ],
                "preds": [
                    "float",
                    "numpy.ndarray"
                ]
            }
        },
        "_f1_micro_score": {
            "name": "_f1_micro_score",
            "location": 106,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "golds": [
                    "float",
                    "numpy.ndarray"
                ],
                "preds": [
                    "float",
                    "numpy.ndarray"
                ]
            }
        },
        "_f1_macro_score": {
            "name": "_f1_macro_score",
            "location": 110,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "golds": [
                    "float",
                    "numpy.ndarray"
                ],
                "preds": [
                    "float",
                    "numpy.ndarray"
                ]
            }
        }
    },
    "snorkel-main/snorkel/analysis/scorer.py": {
        "Scorer.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metrics": [
                    "str",
                    "Iterable[str]",
                    "Dict[str,Any]",
                    "bool"
                ],
                "custom_metric_funcs": [
                    "Optional[Mapping[str,Any]]",
                    "None",
                    "Optional[numpy.ndarray]",
                    "Mapping"
                ],
                "abstain_label": [
                    "int",
                    "bool",
                    "Callable"
                ]
            }
        },
        "Scorer.score": {
            "name": "score",
            "location": 71,
            "return": [
                "Dict",
                "Dict[str,Any]",
                "Dict[str,Dict[str,str]]"
            ],
            "arguments": {
                "self": [],
                "golds": [
                    "int",
                    "Callable",
                    "str"
                ],
                "preds": [
                    "int",
                    "Callable",
                    "None",
                    "str"
                ],
                "probs": [
                    "int",
                    "Callable",
                    "None",
                    "str"
                ]
            }
        },
        "Scorer.score_slices": {
            "name": "score_slices",
            "location": 116,
            "return": [
                "Dict[Text,]",
                "numpy.ndarray",
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "S": [
                    "int",
                    "Sequence[int]",
                    "List[int]",
                    "numpy.ndarray"
                ],
                "golds": [
                    "int",
                    "Union[int, str]",
                    "List[float]",
                    "List[int]",
                    "pandas.DataFrame"
                ],
                "preds": [
                    "int",
                    "Union[int, str]",
                    "List[float]",
                    "List[int]",
                    "pandas.DataFrame"
                ],
                "probs": [
                    "int",
                    "Union[int, str]",
                    "List[float]",
                    "List[int]",
                    "pandas.DataFrame"
                ],
                "as_dataframe": [
                    "bool",
                    "int"
                ]
            }
        }
    },
    "snorkel-main/snorkel/analysis/__init__.py": {},
    "snorkel-main/snorkel/augmentation/tf.py": {},
    "snorkel-main/snorkel/augmentation/__init__.py": {},
    "snorkel-main/snorkel/augmentation/apply/core.py": {
        "BaseTFApplier.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tfs": [
                    "str",
                    "Dict[str,Any]",
                    "core.models.Grouping",
                    "core.models.Registration"
                ],
                "policy": [
                    "int",
                    "float",
                    "bool",
                    "apistar.types.RouteConfig"
                ]
            }
        },
        "BaseTFApplier._apply_policy_to_data_point": {
            "name": "_apply_policy_to_data_point",
            "location": 38,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "Callable",
                    "float",
                    "snorkel.types.DataPoint",
                    "zerver.lib.types.ViewFuncT",
                    "CPSTransformerContext",
                    "Callable[[bytes],bytes]"
                ]
            }
        },
        "BaseTFApplier.__repr__": {
            "name": "__repr__",
            "location": 57,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TFApplier.apply_generator": {
            "name": "apply_generator",
            "location": 69,
            "return": [
                "Generator[(list, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "data_points": [
                    "int",
                    "snorkel.types.DataPoins",
                    "Sequence",
                    "str",
                    "Tuple[int]"
                ],
                "batch_size": [
                    "int",
                    "Sequence",
                    "str",
                    "Tuple[int]",
                    "snorkel.types.DataPoins"
                ]
            }
        },
        "TFApplier.apply": {
            "name": "apply",
            "location": 98,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "data_points": [
                    "int",
                    "str",
                    "bool",
                    "snorkel.types.DataPoins"
                ],
                "progress_bar": [
                    "bool",
                    "int",
                    "snorkel.types.DataPoins",
                    "str"
                ]
            }
        }
    },
    "snorkel-main/snorkel/augmentation/apply/pandas.py": {
        "PandasTFApplier.apply_generator": {
            "name": "apply_generator",
            "location": 18,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "int",
                    "Iterable[List[str]]",
                    "Tuple[int]",
                    "pandas.DataFrame"
                ],
                "batch_size": [
                    "int",
                    "Tuple[int]",
                    "pandas.DataFrame"
                ]
            }
        },
        "PandasTFApplier.apply": {
            "name": "apply",
            "location": 47,
            "return": [
                "str",
                "pandas.DataFrame",
                "Optional[int]",
                "pandas.Series"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "int",
                    "pandas.DataFrame",
                    "bool"
                ],
                "progress_bar": [
                    "bool",
                    "int",
                    "pandas.DataFrame"
                ]
            }
        }
    },
    "snorkel-main/snorkel/augmentation/apply/__init__.py": {},
    "snorkel-main/snorkel/augmentation/policy/core.py": {
        "Policy.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_tfs": [
                    "int",
                    "str"
                ],
                "n_per_original": [
                    "int",
                    "str"
                ],
                "keep_original": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "Policy.generate_for_example": {
            "name": "generate_for_example",
            "location": 44,
            "return": [
                "List[List[nothing]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Policy.generate": {
            "name": "generate",
            "location": 63,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApplyAllPolicy.generate": {
            "name": "generate",
            "location": 113,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApplyOnePolicy.__init__": {
            "name": "__init__",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_per_original": [
                    "int",
                    "bool"
                ],
                "keep_original": [
                    "bool",
                    "int"
                ]
            }
        },
        "ApplyEachPolicy.__init__": {
            "name": "__init__",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_tfs": [
                    "int",
                    "bool"
                ],
                "keep_original": [
                    "bool",
                    "int"
                ]
            }
        },
        "ApplyEachPolicy.generate_for_example": {
            "name": "generate_for_example",
            "location": 168,
            "return": [
                "List[List[int]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "snorkel-main/snorkel/augmentation/policy/sampling.py": {
        "MeanFieldPolicy.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_tfs": [
                    "int",
                    "bool"
                ],
                "sequence_length": [
                    "int",
                    "str"
                ],
                "p": [
                    "int",
                    "str",
                    "None"
                ],
                "n_per_original": [
                    "int",
                    "bool"
                ],
                "keep_original": [
                    "bool",
                    "int"
                ]
            }
        },
        "MeanFieldPolicy.generate": {
            "name": "generate",
            "location": 59,
            "return": [
                "str",
                "bytes",
                "int",
                "List[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RandomPolicy.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_tfs": [
                    "int",
                    "None",
                    "bool",
                    "Optional[int]"
                ],
                "sequence_length": [
                    "int",
                    "bool",
                    "Optional[int]"
                ],
                "n_per_original": [
                    "int",
                    "bool",
                    "Optional[int]"
                ],
                "keep_original": [
                    "bool",
                    "int",
                    "Optional[int]"
                ]
            }
        }
    },
    "snorkel-main/snorkel/augmentation/policy/__init__.py": {},
    "snorkel-main/snorkel/classification/data.py": {
        "collate_dicts": {
            "name": "collate_dicts",
            "location": 122,
            "return": [
                "Tuple[(dict, dict)]"
            ],
            "arguments": {
                "batch": [
                    "str",
                    "int",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "DictDataset.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ],
                "split": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "X_dict": [
                    "bool",
                    "Dict",
                    "Dict[str,str]",
                    "Tuple[bool]",
                    "Union[int,float]",
                    "float"
                ],
                "Y_dict": [
                    "str",
                    "Dict",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "DictDataset.__getitem__": {
            "name": "__getitem__",
            "location": 63,
            "return": [
                "Tuple[(dict, dict)]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str"
                ]
            }
        },
        "DictDataset.__len__": {
            "name": "__len__",
            "location": 68,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictDataset.__repr__": {
            "name": "__repr__",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictDataset.from_tensors": {
            "name": "from_tensors",
            "location": 83,
            "return": [
                "DictDataset"
            ],
            "arguments": {
                "cls": [
                    "Type[_TDictDataset]"
                ],
                "X_tensor": [
                    "str",
                    "List"
                ],
                "Y_tensor": [
                    "str",
                    "List"
                ],
                "split": [
                    "str",
                    "List"
                ],
                "input_data_key": [
                    "Text",
                    "str",
                    "List"
                ],
                "task_name": [
                    "Text",
                    "str",
                    "List"
                ],
                "dataset_name": [
                    "Text",
                    "str",
                    "List"
                ]
            }
        },
        "DictDataLoader.__init__": {
            "name": "__init__",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "collate_fn": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        }
    },
    "snorkel-main/snorkel/classification/loss.py": {
        "cross_entropy_with_probs": {
            "name": "cross_entropy_with_probs",
            "location": 9,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "input": [
                    "str",
                    "torch.Tensor"
                ],
                "target": [
                    "torch.Tensor",
                    "str",
                    "List[int]",
                    "bool",
                    "int"
                ],
                "weight": [
                    "int",
                    "torch.Tensor",
                    "Optional[str]"
                ],
                "reduction": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "snorkel-main/snorkel/classification/multitask_classifier.py": {
        "MultitaskClassifier.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tasks": [],
                "name": []
            }
        },
        "MultitaskClassifier.__repr__": {
            "name": "__repr__",
            "location": 114,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultitaskClassifier._build_network": {
            "name": "_build_network",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tasks": []
            }
        },
        "MultitaskClassifier.add_task": {
            "name": "add_task",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": []
            }
        },
        "MultitaskClassifier.forward": {
            "name": "forward",
            "location": 165,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "X_dict": [],
                "task_names": []
            }
        },
        "MultitaskClassifier.calculate_loss": {
            "name": "calculate_loss",
            "location": 232,
            "return": [
                "Tuple[(dict, dict)]"
            ],
            "arguments": {
                "self": [],
                "X_dict": [],
                "Y_dict": []
            }
        },
        "MultitaskClassifier._calculate_probs": {
            "name": "_calculate_probs",
            "location": 286,
            "return": [],
            "arguments": {
                "self": [],
                "X_dict": [],
                "task_names": []
            }
        },
        "MultitaskClassifier.predict": {
            "name": "predict",
            "location": 318,
            "return": [],
            "arguments": {
                "self": [],
                "dataloader": [],
                "return_preds": [],
                "remap_labels": []
            }
        },
        "MultitaskClassifier.score": {
            "name": "score",
            "location": 383,
            "return": [],
            "arguments": {
                "self": [],
                "dataloaders": [],
                "remap_labels": [],
                "as_dataframe": []
            }
        },
        "MultitaskClassifier._get_labels_to_tasks": {
            "name": "_get_labels_to_tasks",
            "location": 458,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "label_names": [],
                "remap_labels": []
            }
        },
        "MultitaskClassifier._move_to_device": {
            "name": "_move_to_device",
            "location": 481,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultitaskClassifier.save": {
            "name": "save",
            "location": 491,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_path": []
            }
        },
        "MultitaskClassifier.load": {
            "name": "load",
            "location": 514,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_path": []
            }
        }
    },
    "snorkel-main/snorkel/classification/task.py": {
        "Operation.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "module_name": [
                    "str",
                    "List[str]",
                    "Dict[str,str]",
                    "Optional[str]",
                    "None"
                ],
                "inputs": [
                    "int",
                    "Sequence",
                    "Set[str]",
                    "str",
                    "bool"
                ],
                "name": [
                    "str",
                    "None",
                    "List[str]",
                    "Union[str,List[str]]"
                ]
            }
        },
        "Operation.__repr__": {
            "name": "__repr__",
            "location": 58,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None"
                ],
                "module_pool": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "Optional[List[Any]]",
                    "List[Any]"
                ],
                "op_sequence": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "Optional[List[Any]]",
                    "List[Any]"
                ],
                "scorer": [
                    "Scorer",
                    "Optional[str]",
                    "bool",
                    "str",
                    "Optional[List[Any]]"
                ],
                "loss_func": [
                    "Tuple[str]",
                    "None",
                    "bool",
                    "List[str]",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ],
                "output_func": [
                    "bytes",
                    "None",
                    "int",
                    "List[bytes]",
                    "List[str]",
                    "bool",
                    "Any",
                    "Optional[int]",
                    "Optional[Any]"
                ]
            }
        },
        "Task.__repr__": {
            "name": "__repr__",
            "location": 123,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "snorkel-main/snorkel/classification/utils.py": {
        "list_to_tensor": {
            "name": "list_to_tensor",
            "location": 10,
            "return": [
                "List",
                "Dict[str,Dict[str,int]]",
                "Dict[str,Any]",
                "bool",
                "Iterable[str]",
                "pandas.DataFrame"
            ],
            "arguments": {
                "item_list": [
                    "List[torch.Tensor]",
                    "Union[int, str]",
                    "int",
                    "pandas.DataFrame",
                    "str"
                ]
            }
        },
        "pad_batch": {
            "name": "pad_batch",
            "location": 29,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "batch": [
                    "int",
                    "Optional[int]",
                    "torch.Tensor",
                    "bytes"
                ],
                "max_len": [
                    "int",
                    "Optional[int]",
                    "Tuple[float,float]"
                ],
                "pad_value": [
                    "int",
                    "Sequence",
                    "Tuple[int,int]",
                    "numpy.random.RandomState",
                    "str",
                    "Mapping",
                    "float"
                ],
                "left_padded": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "move_to_device": {
            "name": "move_to_device",
            "location": 76,
            "return": [
                "str",
                "int",
                "bytearray",
                "Optional[str]",
                "List[dict]",
                "Dict",
                "List",
                "Tuple"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "List[dict]",
                    "Dict",
                    "List[Dict]",
                    "numpy.ndarray",
                    "bool",
                    "Union[bool,numpy.ndarray]",
                    "pandas.DataFrame"
                ],
                "device": [
                    "int",
                    "Union[bool,numpy.ndarray]",
                    "str",
                    "Union[pandas.DataFrame,pandas.Series]"
                ]
            }
        },
        "collect_flow_outputs_by_suffix": {
            "name": "collect_flow_outputs_by_suffix",
            "location": 111,
            "return": [
                "list"
            ],
            "arguments": {
                "output_dict": [
                    "str",
                    "Dict[str, torch.Tensor]",
                    "dict",
                    "Callable[[], None]"
                ],
                "suffix": [
                    "str",
                    "Dict[str,torch.Tensor]",
                    "Dict",
                    "Callable[,None]"
                ]
            }
        },
        "metrics_dict_to_dataframe": {
            "name": "metrics_dict_to_dataframe",
            "location": 122,
            "return": [
                "int"
            ],
            "arguments": {
                "metrics_dict": [
                    "Dict[str,float]",
                    "Dict",
                    "Dict[str,Any]",
                    "Mapping[qcodes.datasedescriptions.param_spec.ParamSpec.Base,numpy.ndarray]"
                ]
            }
        }
    },
    "snorkel-main/snorkel/classification/__init__.py": {},
    "snorkel-main/snorkel/classification/training/trainer.py": {
        "Trainer.__init__": {
            "name": "__init__",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "None",
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "Trainer.fit": {
            "name": "fit",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "dataloaders": [
                    "str"
                ]
            }
        },
        "Trainer._check_dataloaders": {
            "name": "_check_dataloaders",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataloaders": [
                    "list[D]",
                    "str"
                ]
            }
        },
        "Trainer._set_log_writer": {
            "name": "_set_log_writer",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Trainer._set_checkpointer": {
            "name": "_set_checkpointer",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Trainer._set_log_manager": {
            "name": "_set_log_manager",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Trainer._set_optimizer": {
            "name": "_set_optimizer",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": []
            }
        },
        "Trainer._set_lr_scheduler": {
            "name": "_set_lr_scheduler",
            "location": 337,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Trainer._set_warmup_scheduler": {
            "name": "_set_warmup_scheduler",
            "location": 369,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Trainer._update_lr_scheduler": {
            "name": "_update_lr_scheduler",
            "location": 406,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "step": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "Trainer._set_batch_scheduler": {
            "name": "_set_batch_scheduler",
            "location": 415,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Trainer._evaluate": {
            "name": "_evaluate",
            "location": 422,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "dataloaders": [
                    "str"
                ],
                "split": [
                    "str",
                    "int"
                ]
            }
        },
        "Trainer._logging": {
            "name": "_logging",
            "location": 432,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "dataloaders": [
                    "dict[str, typing.Any]",
                    "None",
                    "dict[int, int]",
                    "bool",
                    "str"
                ],
                "batch_size": [
                    "int",
                    "str"
                ]
            }
        },
        "Trainer._log_metrics": {
            "name": "_log_metrics",
            "location": 468,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metric_dict": [
                    "dict[, ]",
                    "dict[str, float]",
                    "dict[str, dict[, ]]",
                    "dict[str, str]"
                ]
            }
        },
        "Trainer._checkpoint_model": {
            "name": "_checkpoint_model",
            "location": 475,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "typing.Callable[, ]"
                ],
                "metric_dict": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "Trainer._aggregate_losses": {
            "name": "_aggregate_losses",
            "location": 484,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Trainer._reset_losses": {
            "name": "_reset_losses",
            "location": 509,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Trainer.save": {
            "name": "save",
            "location": 514,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trainer_path": [
                    "str"
                ]
            }
        },
        "Trainer.load": {
            "name": "load",
            "location": 540,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trainer_path": [
                    "str"
                ],
                "model": [
                    "str"
                ]
            }
        }
    },
    "snorkel-main/snorkel/classification/training/__init__.py": {},
    "snorkel-main/snorkel/classification/training/loggers/checkpointer.py": {
        "Checkpointer.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "counter_unit": [
                    "int",
                    "float",
                    "bool",
                    "apistar.types.RouteConfig"
                ],
                "evaluation_freq": [
                    "int",
                    "float",
                    "bool",
                    "apistar.types.RouteConfig"
                ]
            }
        },
        "Checkpointer.checkpoint": {
            "name": "checkpoint",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iteration": [
                    "str"
                ],
                "model": [
                    "snorkel.classification.multitask_classifier.MultitaskClassifier",
                    "str",
                    "Optional[str]",
                    "list",
                    "bool"
                ],
                "metric_dict": [
                    "Dict",
                    "Dict[str,str]",
                    "Mapping[str,Any]",
                    "Dict[str,Any]"
                ]
            }
        },
        "Checkpointer._is_new_best": {
            "name": "_is_new_best",
            "location": 153,
            "return": [
                "set"
            ],
            "arguments": {
                "self": [],
                "metric_dict": [
                    "Dict"
                ]
            }
        },
        "Checkpointer.clear": {
            "name": "clear",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Checkpointer.load_best_model": {
            "name": "load_best_model",
            "location": 186,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "snorkel.classification.multitask_classifier.MultitaskClassifier",
                    "str",
                    "int"
                ]
            }
        },
        "Checkpointer._validate_config": {
            "name": "_validate_config",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Checkpointer._make_metric_map": {
            "name": "_make_metric_map",
            "location": 214,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "metric_mode_iter": [
                    "Iterable[str]",
                    "str",
                    "Optional[Iterable[str]]",
                    "Callable",
                    "Optional[Iterable[Any]]"
                ]
            }
        }
    },
    "snorkel-main/snorkel/classification/training/loggers/log_manager.py": {
        "LogManager.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_batches_per_epoch": [
                    "int",
                    "float",
                    "List[int]"
                ],
                "log_writer": [
                    "int",
                    "None",
                    "str",
                    "bytes",
                    "Optional[str]"
                ],
                "checkpointer": [
                    "int",
                    "float",
                    "None",
                    "List[int]"
                ]
            }
        },
        "LogManager.update": {
            "name": "update",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "batch_size": [
                    "int",
                    "List"
                ]
            }
        },
        "LogManager.trigger_evaluation": {
            "name": "trigger_evaluation",
            "location": 106,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogManager.trigger_checkpointing": {
            "name": "trigger_checkpointing",
            "location": 114,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogManager.reset": {
            "name": "reset",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogManager.cleanup": {
            "name": "cleanup",
            "location": 130,
            "return": [
                "str",
                "float",
                "int",
                "Optional[str]",
                "None",
                "Tuple"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Union[Contributor,Coverage]",
                    "float",
                    "Optional[float]",
                    "None"
                ]
            }
        }
    },
    "snorkel-main/snorkel/classification/training/loggers/log_writer.py": {
        "LogWriter.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogWriter.add_scalar": {
            "name": "add_scalar",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict",
                    "Optional[str]",
                    "None"
                ],
                "value": [
                    "str",
                    "Dict",
                    "Optional[str]",
                    "None"
                ],
                "step": [
                    "str",
                    "Dict",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "LogWriter.write_config": {
            "name": "write_config",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "str",
                    "Config",
                    "Dict[str, Any]",
                    "bool",
                    "Optional[dict]",
                    "sphinx.config.Config"
                ],
                "config_filename": [
                    "Text",
                    "str",
                    "Config",
                    "Dict[str,Any]",
                    "bool",
                    "Optional[dict]",
                    "sphinx.config.Config"
                ]
            }
        },
        "LogWriter.write_log": {
            "name": "write_log",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "log_filename": [
                    "int",
                    "str",
                    "None",
                    "bool",
                    "Optional[Literal]",
                    "Optional[int]"
                ]
            }
        },
        "LogWriter.write_text": {
            "name": "write_text",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Union[None,bytes]",
                    "None",
                    "bytes"
                ],
                "filename": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "LogWriter.write_json": {
            "name": "write_json",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dict_to_write": [
                    "Sequence[int]",
                    "Dict[str,int]",
                    "Dict",
                    "List",
                    "Dict[str,Any]"
                ],
                "filename": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "LogWriter.cleanup": {
            "name": "cleanup",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "snorkel-main/snorkel/classification/training/loggers/tensorboard_writer.py": {
        "TensorBoardWriter.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TensorBoardWriter.add_scalar": {
            "name": "add_scalar",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "float",
                    "str",
                    "int"
                ],
                "value": [
                    "float",
                    "str",
                    "int"
                ],
                "step": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "TensorBoardWriter.write_config": {
            "name": "write_config",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict",
                    "Dict[str,Any]",
                    "sphinx.config.Config",
                    "revlibs.connections.config.Config"
                ],
                "config_filename": [
                    "Text",
                    "str",
                    "Dict[str,Any]",
                    "Config",
                    "List[Tuple[str,str,str,str,str,str,str]]",
                    "sphinx.config.Config",
                    "Sequence",
                    "bool"
                ]
            }
        },
        "TensorBoardWriter.cleanup": {
            "name": "cleanup",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "snorkel-main/snorkel/classification/training/loggers/__init__.py": {},
    "snorkel-main/snorkel/classification/training/schedulers/scheduler.py": {
        "Scheduler.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scheduler.get_batches": {
            "name": "get_batches",
            "location": 20,
            "return": [
                "BatchIterator",
                "None"
            ],
            "arguments": {
                "self": [],
                "dataloaders": [
                    "bool",
                    "str",
                    "Dict",
                    "T"
                ]
            }
        }
    },
    "snorkel-main/snorkel/classification/training/schedulers/sequential_scheduler.py": {
        "SequentialScheduler.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SequentialScheduler.get_batches": {
            "name": "get_batches",
            "location": 14,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "self": [],
                "dataloaders": [
                    "str",
                    "Dict",
                    "bool",
                    "T"
                ]
            }
        }
    },
    "snorkel-main/snorkel/classification/training/schedulers/shuffled_scheduler.py": {
        "ShuffledScheduler.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShuffledScheduler.get_batches": {
            "name": "get_batches",
            "location": 15,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "self": [],
                "dataloaders": [
                    "List",
                    "List[list[int]]",
                    "int",
                    "str",
                    "List[List[int]]",
                    "Sequence[str]"
                ]
            }
        }
    },
    "snorkel-main/snorkel/classification/training/schedulers/__init__.py": {},
    "snorkel-main/snorkel/contrib/__init__.py": {},
    "snorkel-main/snorkel/labeling/analysis.py": {
        "LFAnalysis.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "L": [
                    "int",
                    "float"
                ],
                "lfs": [
                    "None"
                ]
            }
        },
        "LFAnalysis._covered_data_points": {
            "name": "_covered_data_points",
            "location": 51,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "LFAnalysis._overlapped_data_points": {
            "name": "_overlapped_data_points",
            "location": 55,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "LFAnalysis._conflicted_data_points": {
            "name": "_conflicted_data_points",
            "location": 59,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "LFAnalysis.label_coverage": {
            "name": "label_coverage",
            "location": 68,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "LFAnalysis.label_overlap": {
            "name": "label_overlap",
            "location": 90,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "LFAnalysis.label_conflict": {
            "name": "label_conflict",
            "location": 112,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "LFAnalysis.lf_polarities": {
            "name": "lf_polarities",
            "location": 134,
            "return": [
                "List[list]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LFAnalysis.lf_coverages": {
            "name": "lf_coverages",
            "location": 159,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "LFAnalysis.lf_overlaps": {
            "name": "lf_overlaps",
            "location": 181,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "normalize_by_coverage": [
                    "bool"
                ]
            }
        },
        "LFAnalysis.lf_conflicts": {
            "name": "lf_conflicts",
            "location": 224,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "normalize_by_overlaps": [
                    "bool"
                ]
            }
        },
        "LFAnalysis.lf_empirical_accuracies": {
            "name": "lf_empirical_accuracies",
            "location": 267,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "Y": [
                    "tuple[]",
                    "float",
                    "list[int]",
                    "tuple[str]"
                ]
            }
        },
        "LFAnalysis.lf_empirical_probs": {
            "name": "lf_empirical_probs",
            "location": 291,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "Y": [
                    "int",
                    "dict[tuple[typing.Union[int,int]], int]",
                    "float"
                ],
                "k": [
                    "int"
                ]
            }
        },
        "LFAnalysis.lf_summary": {
            "name": "lf_summary",
            "location": 323,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "Y": [
                    "None"
                ],
                "est_weights": [
                    "None",
                    "str",
                    "typing.Callable[, ]",
                    "int"
                ]
            }
        }
    },
    "snorkel-main/snorkel/labeling/utils.py": {
        "filter_unlabeled_dataframe": {
            "name": "filter_unlabeled_dataframe",
            "location": 7,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "X": [
                    "numpy.ndarray",
                    "pandas.DataFrame",
                    "int",
                    "float",
                    "numpy.array"
                ],
                "y": [
                    "numpy.ndarray",
                    "pandas.DataFrame",
                    "int",
                    "float",
                    "numpy.array"
                ],
                "L": [
                    "numpy.ndarray",
                    "pandas.DataFrame",
                    "float",
                    "numpy.array",
                    "Optional[Union[str, Any]]"
                ]
            }
        }
    },
    "snorkel-main/snorkel/labeling/__init__.py": {},
    "snorkel-main/snorkel/labeling/apply/core.py": {
        "apply_lfs_to_data_point": {
            "name": "apply_lfs_to_data_point",
            "location": 84,
            "return": [
                "List[Tuple[(_T1, int, Any)]]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "None",
                    "Union[None,float,int]",
                    "numpy.ndarray"
                ],
                "index": [
                    "int",
                    "List",
                    "T",
                    "List[float]",
                    "List[tuple[Union[str,int]]]",
                    "List[Tuple[str,int]]",
                    "Dict[str,set[str]]",
                    "List[list[T]]",
                    "Dict[str,Set[str]]",
                    "List[List[T]]"
                ],
                "lfs": [
                    "List[snorkel.labeling.lf.LabelingFunction]",
                    "List[str]",
                    "int",
                    "Callable"
                ],
                "f_caller": [
                    "int",
                    "float",
                    "None",
                    "Union[None,float,int]",
                    "numpy.ndarray"
                ]
            }
        },
        "_FunctionCaller.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fault_tolerant": [
                    "int",
                    "float",
                    "bool",
                    "apistar.types.RouteConfig"
                ]
            }
        },
        "_FunctionCaller.__call__": {
            "name": "__call__",
            "location": 26,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Dict",
                    "Callable[numpy.ndarray,numpy.ndarray]",
                    "snorkel.types.DataPoint",
                    "numpy.ndarray",
                    "nevergrad.common.Callable[[numpy.ndarray],numpy.ndarray]",
                    "Callable[[numpy.ndarray],numpy.ndarray]",
                    "Callable[[numpy.ndarray],float]"
                ],
                "x": [
                    "Dict",
                    "snorkel.types.DataPoint"
                ]
            }
        },
        "BaseLFApplier.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lfs": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "BaseLFApplier._numpy_from_row_data": {
            "name": "_numpy_from_row_data",
            "location": 62,
            "return": [
                "List[str]",
                "str",
                "CollectionList",
                "Dict[str,Any]",
                "BinaryIO"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "list",
                    "DefaultDict[int, List[Any]]",
                    "raiden.utils.List[uuid.UUID]",
                    "List[str]",
                    "List[Tuple[int, int]]",
                    "int",
                    "numpy.ndarray",
                    "Callable"
                ]
            }
        },
        "BaseLFApplier.__repr__": {
            "name": "__repr__",
            "location": 80,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LFApplier.apply": {
            "name": "apply",
            "location": 140,
            "return": [
                "Tuple[Union[dict,ApplierMetadata]]",
                "mypy.types.Type",
                "Dict",
                "bool",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "data_points": [
                    "str",
                    "bool",
                    "Tuple[Union[int,int]]",
                    "Optional[str]",
                    "int",
                    "Union[int,Tuple[int,int]]"
                ],
                "progress_bar": [
                    "bool",
                    "Optional[str]",
                    "int",
                    "Union[int,Tuple[int,int]]"
                ],
                "fault_tolerant": [
                    "bool",
                    "Optional[int]",
                    "float",
                    "int"
                ],
                "return_meta": [
                    "bool",
                    "Optional[Sequence[cirq.Qid]]",
                    "Optional[str]",
                    "Dict",
                    "int"
                ]
            }
        }
    },
    "snorkel-main/snorkel/labeling/apply/dask.py": {
        "DaskLFApplier.apply": {
            "name": "apply",
            "location": 23,
            "return": [
                "int",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "float",
                    "str"
                ],
                "scheduler": [
                    "Text",
                    "int",
                    "Callable",
                    "str"
                ],
                "fault_tolerant": [
                    "bool",
                    "Dict",
                    "int",
                    "str",
                    "List"
                ]
            }
        },
        "PandasParallelLFApplier.apply": {
            "name": "apply",
            "location": 62,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "int",
                    "str",
                    "List[int]",
                    "bool"
                ],
                "n_parallel": [
                    "int",
                    "bool",
                    "Iterable[T]"
                ],
                "scheduler": [
                    "Text",
                    "int",
                    "bool",
                    "Iterable[T]"
                ],
                "fault_tolerant": [
                    "bool",
                    "int",
                    "Iterable[T]"
                ]
            }
        }
    },
    "snorkel-main/snorkel/labeling/apply/pandas.py": {
        "apply_lfs_to_data_point": {
            "name": "apply_lfs_to_data_point",
            "location": 16,
            "return": [
                "List[Tuple[(int, Any)]]"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "lfs": [
                    "List[snorkel.labeling.lf.LabelingFunction]",
                    "str",
                    "Callable",
                    "Type"
                ],
                "f_caller": [
                    "int"
                ]
            }
        },
        "rows_to_triplets": {
            "name": "rows_to_triplets",
            "location": 43,
            "return": [
                "list"
            ],
            "arguments": {
                "labels": [
                    "str",
                    "jgikbase.idmapping.core.tokens.HashedToken",
                    "pandas.DataFrame"
                ]
            }
        },
        "PandasLFApplier.apply": {
            "name": "apply",
            "location": 75,
            "return": [
                "Tuple[ApplierMetadata]",
                "mypy.types.Type",
                "bool",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "int",
                    "pandas.DataFrame",
                    "float",
                    "Union[float,Tuple[float,float]]",
                    "Tuple[Union[float,float]]",
                    "Optional[Callable[[Any],None]]",
                    "Callable[Any,None]",
                    "None"
                ],
                "progress_bar": [
                    "bool"
                ],
                "fault_tolerant": [
                    "bool",
                    "float",
                    "Type[BaseException]"
                ],
                "return_meta": [
                    "bool"
                ]
            }
        }
    },
    "snorkel-main/snorkel/labeling/apply/spark.py": {
        "SparkLFApplier.apply": {
            "name": "apply",
            "location": 21,
            "return": [
                "int",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "data_points": [
                    "bytes",
                    "Tuple[Union[int,_,int,_]]",
                    "numpy.ndarray",
                    "bool",
                    "Tuple[Union[int,slice],Union[int,slice]]",
                    "Project",
                    "slp.util.types.NdTensor",
                    "int"
                ],
                "fault_tolerant": [
                    "bool",
                    "int",
                    "bytes",
                    "Dict"
                ]
            }
        },
        "SparkLFApplier.apply.map_fn": {
            "name": "map_fn",
            "location": 38,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "snorkel-main/snorkel/labeling/apply/__init__.py": {},
    "snorkel-main/snorkel/labeling/lf/core.py": {
        "LabelingFunction.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "f": [
                    "str",
                    "List[str]",
                    "bool",
                    "Sequence[str]",
                    "Optional[Sequence[str]]",
                    "None",
                    "Iterable[str]",
                    "int"
                ],
                "resources": [
                    "bool",
                    "None",
                    "str",
                    "Sequence",
                    "int",
                    "Optional[str]"
                ],
                "pre": [
                    "bool",
                    "None",
                    "str",
                    "Sequence",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "LabelingFunction._preprocess_data_point": {
            "name": "_preprocess_data_point",
            "location": 54,
            "return": [
                "List[int]",
                "float",
                "bool",
                "int",
                "T",
                "List[str]",
                "None",
                "Dict[str,float]",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "List[str]",
                    "int",
                    "Dict[str,float]",
                    "Dict"
                ]
            }
        },
        "LabelingFunction.__call__": {
            "name": "__call__",
            "location": 61,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "Tuple"
                ]
            }
        },
        "LabelingFunction.__repr__": {
            "name": "__repr__",
            "location": 79,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "labeling_function.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None",
                    "bool",
                    "int"
                ],
                "resources": [
                    "int",
                    "None",
                    "str",
                    "Sequence",
                    "bool",
                    "Optional[str]"
                ],
                "pre": [
                    "int",
                    "None",
                    "str",
                    "Sequence",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "labeling_function.__call__": {
            "name": "__call__",
            "location": 127,
            "return": [
                "LabelingFunction"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Mapping[Any,Any]",
                    "Mapping"
                ]
            }
        }
    },
    "snorkel-main/snorkel/labeling/lf/nlp.py": {
        "BaseNLPLabelingFunction._create_preprocessor": {
            "name": "_create_preprocessor",
            "location": 39,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Callable"
                ],
                "parameters": [
                    "bool",
                    "Callable"
                ]
            }
        },
        "BaseNLPLabelingFunction._create_or_check_preprocessor": {
            "name": "_create_or_check_preprocessor",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "type"
                ],
                "text_field": [
                    "bytes",
                    "int",
                    "str",
                    "IO[bytes]",
                    "IO"
                ],
                "doc_field": [
                    "bytes",
                    "int",
                    "str",
                    "IO[bytes]",
                    "IO"
                ],
                "language": [
                    "bytes",
                    "int",
                    "str",
                    "IO[bytes]",
                    "IO"
                ],
                "disable": [
                    "bytes",
                    "int",
                    "str",
                    "IO[bytes]",
                    "IO"
                ],
                "pre": [
                    "bytes",
                    "int",
                    "str",
                    "IO[bytes]",
                    "IO"
                ],
                "memoize": [
                    "bytes",
                    "int",
                    "str",
                    "IO[bytes]",
                    "IO"
                ],
                "memoize_key": [
                    "bytes",
                    "int",
                    "str",
                    "IO[bytes]",
                    "IO"
                ],
                "gpu": [
                    "bytes",
                    "int",
                    "str",
                    "IO[bytes]",
                    "IO"
                ]
            }
        },
        "BaseNLPLabelingFunction.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str,Any]",
                    "bool"
                ],
                "f": [
                    "str",
                    "Dict[str,Any]",
                    "bool"
                ],
                "resources": [
                    "str",
                    "Dict[str,Any]",
                    "None",
                    "bool"
                ],
                "pre": [
                    "str",
                    "None",
                    "int",
                    "bytes",
                    "Callable[[str],str]",
                    "Callable[str,str]",
                    "Optional[int]",
                    "bool"
                ],
                "text_field": [
                    "Text",
                    "str",
                    "Callable[[str],str]",
                    "bool",
                    "int",
                    "Tuple"
                ],
                "doc_field": [
                    "Text",
                    "str",
                    "Callable[[str],str]",
                    "bool",
                    "int",
                    "Tuple"
                ],
                "language": [
                    "str",
                    "Callable[[str], str]",
                    "bool",
                    "int",
                    "tuple"
                ],
                "disable": [
                    "str",
                    "None",
                    "bool",
                    "Callable[[str],str]",
                    "Tuple",
                    "Callable[str,str]",
                    "int"
                ],
                "memoize": [
                    "bool",
                    "str",
                    "Callable[[str],str]",
                    "int",
                    "Tuple"
                ],
                "memoize_key": [
                    "str",
                    "None",
                    "bool",
                    "Callable[[str],str]",
                    "Tuple",
                    "Callable[str,str]",
                    "int"
                ],
                "gpu": [
                    "bool",
                    "str",
                    "Callable[[str],str]",
                    "int",
                    "Tuple"
                ]
            }
        },
        "NLPLabelingFunction._create_preprocessor": {
            "name": "_create_preprocessor",
            "location": 178,
            "return": [
                "snorkel.preprocess.nlp.SpacyPreprocessor"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Callable"
                ],
                "parameters": []
            }
        },
        "base_nlp_labeling_function.__init__": {
            "name": "__init__",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None",
                    "Optional[InstrumentBase]"
                ],
                "resources": [
                    "str",
                    "None",
                    "Optional[InstrumentBase]"
                ],
                "pre": [
                    "str",
                    "None",
                    "Optional[InstrumentBase]"
                ],
                "text_field": [
                    "Text",
                    "bool",
                    "Optional[str]",
                    "str",
                    "IO[str]",
                    "Callable[[str],str]"
                ],
                "doc_field": [
                    "Text",
                    "Optional[str]",
                    "List[List[str]]",
                    "bool",
                    "Optional[Mapping]",
                    "int"
                ],
                "language": [
                    "Optional[str]",
                    "List[List[str]]",
                    "bool",
                    "Optional[Mapping]",
                    "int"
                ],
                "disable": [
                    "Optional[str]",
                    "None",
                    "bool",
                    "List[List[str]]",
                    "str",
                    "List[list[str]]",
                    "Optional[Mapping]",
                    "int",
                    "Mapping"
                ],
                "memoize": [
                    "bool",
                    "Optional[str]",
                    "List[List[str]]",
                    "Optional[Mapping]",
                    "int"
                ],
                "memoize_key": [
                    "str",
                    "None",
                    "bool",
                    "Dict[str,str]",
                    "List[dict[str,Any]]",
                    "List[Dict[str,Any]]",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "Optional[List[Any]]"
                ],
                "gpu": [
                    "bool",
                    "Optional[str]",
                    "List[List[str]]",
                    "Optional[Mapping]",
                    "int"
                ]
            }
        },
        "base_nlp_labeling_function.__call__": {
            "name": "__call__",
            "location": 211,
            "return": [
                "mypy.types.Type"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Mapping",
                    "Mapping[Any,Any]",
                    "T"
                ]
            }
        }
    },
    "snorkel-main/snorkel/labeling/lf/nlp_spark.py": {
        "SparkNLPLabelingFunction._create_preprocessor": {
            "name": "_create_preprocessor",
            "location": 56,
            "return": [
                "snorkel.preprocess.nlp.SpacyPreprocessor"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Callable"
                ],
                "parameters": [
                    "Dict[str, Any]",
                    "float"
                ]
            }
        }
    },
    "snorkel-main/snorkel/labeling/lf/__init__.py": {},
    "snorkel-main/snorkel/labeling/model/baselines.py": {
        "RandomVoter.predict_proba": {
            "name": "predict_proba",
            "location": 18,
            "return": [
                "int",
                "str",
                "Callable",
                "Type",
                "List[float]"
            ],
            "arguments": {
                "self": [],
                "L": [
                    "Sized",
                    "int",
                    "float",
                    "Callable[...,bool]",
                    "str"
                ]
            }
        },
        "MajorityClassVoter.fit": {
            "name": "fit",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "balance": [
                    "int",
                    "str"
                ]
            }
        },
        "MajorityClassVoter.predict_proba": {
            "name": "predict_proba",
            "location": 61,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "L": [
                    "Sized",
                    "int",
                    "float",
                    "Callable[...,bool]",
                    "str"
                ]
            }
        },
        "MajorityLabelVoter.predict_proba": {
            "name": "predict_proba",
            "location": 100,
            "return": [
                "int",
                "Callable",
                "str",
                "DefaultDict",
                "bytes",
                "float",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "L": [
                    "numpy.ndarray",
                    "int",
                    "gluonts.model.common.Tensor"
                ]
            }
        }
    },
    "snorkel-main/snorkel/labeling/model/base_labeler.py": {
        "BaseLabeler.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cardinality": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "BaseLabeler.predict_proba": {
            "name": "predict_proba",
            "location": 19,
            "return": [
                "numpy.ndarray",
                "None"
            ],
            "arguments": {
                "self": [],
                "L": [
                    "List[T]",
                    "List[str]",
                    "float",
                    "Dict",
                    "List",
                    "Union[int,float]",
                    "int"
                ]
            }
        },
        "BaseLabeler.predict": {
            "name": "predict",
            "location": 34,
            "return": [
                "int",
                "Callable",
                "Tuple[Union[int,dict,list[int],list[list[int]],str,tuple[Union[Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal,Literal]],Type]]",
                "str",
                "Dict",
                "List[int]",
                "List[list[int]]"
            ],
            "arguments": {
                "self": [],
                "L": [
                    "bool",
                    "snorkel.types.DataPoint",
                    "str",
                    "List[list]",
                    "List[List]"
                ],
                "return_probs": [
                    "bool",
                    "List[str]",
                    "int",
                    "str"
                ],
                "tie_break_policy": [
                    "Text",
                    "snorkel.types.DataPoint",
                    "bool",
                    "List[List]",
                    "str"
                ]
            }
        },
        "BaseLabeler.score": {
            "name": "score",
            "location": 74,
            "return": [
                "bool",
                "Optional[Union[str,Any]]",
                "Iterator",
                "str",
                "float",
                "frozenset",
                "Tuple[Union[int,int,int,int]]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "L": [
                    "Dict[str,float]",
                    "bytes",
                    "int",
                    "Union[int,float]",
                    "float"
                ],
                "Y": [
                    "bool",
                    "int"
                ],
                "metrics": [
                    "List[Text]",
                    "Sized",
                    "int",
                    "float",
                    "Callable[...,bool]",
                    "str"
                ],
                "tie_break_policy": [
                    "Text",
                    "Dict[str,float]",
                    "bytes",
                    "Union[int,float]",
                    "int"
                ]
            }
        },
        "BaseLabeler.save": {
            "name": "save",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "destination": [
                    "str",
                    "cmk.utils.type_defs.HostName",
                    "int",
                    "Union[str,IO[bytes]]"
                ]
            }
        },
        "BaseLabeler.load": {
            "name": "load",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "Iterable[str]"
                ]
            }
        }
    },
    "snorkel-main/snorkel/labeling/model/graph_utils.py": {
        "get_clique_tree": {
            "name": "get_clique_tree",
            "location": 6,
            "return": [
                "slice"
            ],
            "arguments": {
                "nodes": [
                    "float"
                ],
                "edges": [
                    "List[Tuple[int,int]]",
                    "str",
                    "List[tuple[Union[int,int]]]",
                    "bytes"
                ]
            }
        }
    },
    "snorkel-main/snorkel/labeling/model/label_model.py": {
        "LabelModel.__init__": {
            "name": "__init__",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cardinality": [
                    "int"
                ]
            }
        },
        "LabelModel._create_L_ind": {
            "name": "_create_L_ind",
            "location": 148,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "L": [
                    "bytes",
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "LabelModel._get_augmented_label_matrix": {
            "name": "_get_augmented_label_matrix",
            "location": 168,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "L": [
                    "str",
                    "int"
                ],
                "higher_order": [
                    "bool"
                ]
            }
        },
        "LabelModel._build_mask": {
            "name": "_build_mask",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LabelModel._generate_O": {
            "name": "_generate_O",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "L": [
                    "str"
                ],
                "higher_order": [
                    "bool"
                ]
            }
        },
        "LabelModel._init_params": {
            "name": "_init_params",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LabelModel._get_conditional_probs": {
            "name": "_get_conditional_probs",
            "location": 315,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "mu": [
                    "str",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "LabelModel.get_conditional_probs": {
            "name": "get_conditional_probs",
            "location": 349,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "LabelModel.get_weights": {
            "name": "get_weights",
            "location": 367,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "LabelModel.predict_proba": {
            "name": "predict_proba",
            "location": 389,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "L": [
                    "int",
                    "float"
                ]
            }
        },
        "LabelModel.predict": {
            "name": "predict",
            "location": 423,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "L": [
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "return_probs": [
                    "bool"
                ],
                "tie_break_policy": [
                    "typing.Text"
                ]
            }
        },
        "LabelModel.score": {
            "name": "score",
            "location": 469,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "L": [
                    "float",
                    "str",
                    "list[str]",
                    "None",
                    "int"
                ],
                "Y": [
                    "float",
                    "str",
                    "list[str]",
                    "None",
                    "int"
                ],
                "metrics": [
                    "list[typing.Text]"
                ],
                "tie_break_policy": [
                    "typing.Text"
                ]
            }
        },
        "LabelModel._loss_l2": {
            "name": "_loss_l2",
            "location": 515,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "l2": [
                    "int"
                ]
            }
        },
        "LabelModel._loss_mu": {
            "name": "_loss_mu",
            "location": 541,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "l2": [
                    "int"
                ]
            }
        },
        "LabelModel._set_class_balance": {
            "name": "_set_class_balance",
            "location": 559,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "class_balance": [
                    "list[float]",
                    "None",
                    "int",
                    "list[str]"
                ],
                "Y_dev": [
                    "None",
                    "dict[str, typing.Any]",
                    "str",
                    "int",
                    "list[float]"
                ]
            }
        },
        "LabelModel._set_constants": {
            "name": "_set_constants",
            "location": 594,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "L": [
                    "str",
                    "float"
                ]
            }
        },
        "LabelModel._create_tree": {
            "name": "_create_tree",
            "location": 600,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LabelModel._execute_logging": {
            "name": "_execute_logging",
            "location": 604,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "loss": []
            }
        },
        "LabelModel._set_logger": {
            "name": "_set_logger",
            "location": 625,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LabelModel._set_optimizer": {
            "name": "_set_optimizer",
            "location": 630,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LabelModel._set_lr_scheduler": {
            "name": "_set_lr_scheduler",
            "location": 663,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LabelModel._set_warmup_scheduler": {
            "name": "_set_warmup_scheduler",
            "location": 695,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LabelModel._update_lr_scheduler": {
            "name": "_update_lr_scheduler",
            "location": 733,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "step": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "LabelModel._clamp_params": {
            "name": "_clamp_params",
            "location": 742,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LabelModel._break_col_permutation_symmetry": {
            "name": "_break_col_permutation_symmetry",
            "location": 763,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LabelModel.fit": {
            "name": "fit",
            "location": 812,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "L_train": [
                    "float",
                    "int",
                    "list[L]"
                ],
                "Y_dev": [
                    "None",
                    "str",
                    "bool"
                ],
                "class_balance": [
                    "None",
                    "str",
                    "bool"
                ],
                "progress_bar": [
                    "bool"
                ]
            }
        }
    },
    "snorkel-main/snorkel/labeling/model/logger.py": {
        "Logger.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "log_freq": [
                    "str",
                    "float",
                    "Dict",
                    "bytes",
                    "Optional[MutableMapping]",
                    "MutableMapping",
                    "None"
                ]
            }
        },
        "Logger.check": {
            "name": "check",
            "location": 26,
            "return": [
                "bool",
                "str",
                "Dict[str,Any]",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Logger.log": {
            "name": "log",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metrics_dict": [
                    "Dict",
                    "Dict[str,float]",
                    "Dict[str,dict]",
                    "Dict[str,str]",
                    "Dict[str,Any]",
                    "Mapping[str,Mapping[str,Any]]"
                ]
            }
        }
    },
    "snorkel-main/snorkel/labeling/model/__init__.py": {},
    "snorkel-main/snorkel/map/core.py": {
        "get_parameters": {
            "name": "get_parameters",
            "location": 15,
            "return": [
                "Any"
            ],
            "arguments": {
                "f": [
                    "bytes",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "list[tuple[typing.Union[str,numpy.generic]]]"
                ],
                "allow_args": [
                    "bool"
                ],
                "allow_kwargs": [
                    "bool"
                ]
            }
        },
        "is_hashable": {
            "name": "is_hashable",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj": []
            }
        },
        "get_hashable": {
            "name": "get_hashable",
            "location": 41,
            "return": [
                "str",
                "set[]",
                "tuple[]"
            ],
            "arguments": {
                "obj": [
                    "str"
                ]
            }
        },
        "BaseMapper.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "pre": [
                    "str",
                    "int",
                    "None",
                    "typing.Mapping",
                    "list[typing.Any]"
                ],
                "memoize": [
                    "str",
                    "int",
                    "None",
                    "typing.Mapping",
                    "list[typing.Any]"
                ],
                "memoize_key": [
                    "None",
                    "str",
                    "bool",
                    "typing.AnyStr"
                ]
            }
        },
        "BaseMapper.reset_cache": {
            "name": "reset_cache",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMapper._generate_mapped_data_point": {
            "name": "_generate_mapped_data_point",
            "location": 130,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "bytes",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "BaseMapper.__call__": {
            "name": "__call__",
            "location": 133,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "dict[str, typing.Any]",
                    "dict[str, int]"
                ]
            }
        },
        "BaseMapper.__repr__": {
            "name": "__repr__",
            "location": 168,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mapper.__init__": {
            "name": "__init__",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "bool",
                    "str",
                    "None",
                    "typing.Mapping"
                ],
                "field_names": [
                    "None",
                    "str",
                    "typing.Sequence[typing.Any]",
                    "bool"
                ],
                "mapped_field_names": [
                    "None",
                    "str"
                ],
                "pre": [
                    "None",
                    "bool",
                    "str",
                    "typing.Mapping"
                ],
                "memoize": [
                    "bool"
                ],
                "memoize_key": [
                    "None",
                    "bool",
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "Mapper.run": {
            "name": "run",
            "location": 247,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mapper._update_fields": {
            "name": "_update_fields",
            "location": 267,
            "return": [
                "str",
                "typing.Type",
                "list[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "typing.Type",
                    "list[str]",
                    "int"
                ],
                "mapped_fields": [
                    "dict[, ]",
                    "dict[str, str]"
                ]
            }
        },
        "Mapper._generate_mapped_data_point": {
            "name": "_generate_mapped_data_point",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "dict[str, set[str]]",
                    "dict[, ]"
                ]
            }
        },
        "LambdaMapper.__init__": {
            "name": "__init__",
            "location": 309,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "bool",
                    "str",
                    "None"
                ],
                "f": [
                    "bool",
                    "str",
                    "list[str]"
                ],
                "pre": [
                    "None",
                    "bool",
                    "str"
                ],
                "memoize": [
                    "bool"
                ],
                "memoize_key": [
                    "None",
                    "bool",
                    "str"
                ]
            }
        },
        "LambdaMapper._generate_mapped_data_point": {
            "name": "_generate_mapped_data_point",
            "location": 320,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str"
                ]
            }
        },
        "lambda_mapper.__init__": {
            "name": "__init__",
            "location": 357,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "None",
                    "str",
                    "bool"
                ],
                "pre": [
                    "None",
                    "str",
                    "int",
                    "typing.Mapping",
                    "list[typing.Any]"
                ],
                "memoize": [
                    "bool"
                ],
                "memoize_key": [
                    "None",
                    "bool",
                    "str",
                    "dict[str, str]",
                    "list[typing.Any]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "lambda_mapper.__call__": {
            "name": "__call__",
            "location": 371,
            "return": [
                "LambdaMapper"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "typing.Mapping",
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        }
    },
    "snorkel-main/snorkel/map/spark.py": {
        "_update_fields": {
            "name": "_update_fields",
            "location": 8,
            "return": [
                "Row",
                "OrderedDict",
                "str"
            ],
            "arguments": {
                "x": [
                    "float",
                    "Set[str]",
                    "List[superseutils.core.DatasourceName]"
                ],
                "mapped_fields": [
                    "Dict[str,str]",
                    "Dict",
                    "snorkel.types.FieldMap",
                    "bool",
                    "Dict[str,list[Callable]]",
                    "Tuple[bytes]",
                    "Dict[str,List[Callable]]",
                    "T"
                ]
            }
        },
        "make_spark_mapper": {
            "name": "make_spark_mapper",
            "location": 16,
            "return": [
                "int",
                "Dict[str,list[int]]",
                "Callable",
                "str",
                "IO",
                "bytes",
                "Dict[str,list[str]]"
            ],
            "arguments": {
                "mapper": [
                    "Dict[str,List[int]]",
                    "Dict[str,list[int]]",
                    "bytes",
                    "IO[bytes]",
                    "IO",
                    "int",
                    "Dict[str,List[str]]",
                    "Dict[str,list[str]]"
                ]
            }
        }
    },
    "snorkel-main/snorkel/map/__init__.py": {},
    "snorkel-main/snorkel/preprocess/core.py": {},
    "snorkel-main/snorkel/preprocess/nlp.py": {
        "SpacyPreprocessor.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text_field": [
                    "str",
                    "bool",
                    "Optional[snorkel.types.HashingFunction]",
                    "None"
                ],
                "doc_field": [
                    "str",
                    "bool",
                    "Optional[snorkel.types.HashingFunction]",
                    "None"
                ],
                "language": [
                    "Text",
                    "Optional[bool]",
                    "bool",
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "disable": [
                    "None",
                    "bool",
                    "Optional[bool]",
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "pre": [
                    "str",
                    "None",
                    "bool",
                    "Optional[snorkel.types.HashingFunction]"
                ],
                "memoize": [
                    "bool",
                    "str",
                    "Optional[snorkel.types.HashingFunction]"
                ],
                "memoize_key": [
                    "str",
                    "None",
                    "bool",
                    "Optional[snorkel.types.HashingFunction]"
                ],
                "gpu": [
                    "bool",
                    "Optional[bool]",
                    "str"
                ]
            }
        },
        "SpacyPreprocessor.run": {
            "name": "run",
            "location": 74,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        }
    },
    "snorkel-main/snorkel/preprocess/spark.py": {},
    "snorkel-main/snorkel/preprocess/__init__.py": {},
    "snorkel-main/snorkel/slicing/monitor.py": {
        "slice_dataframe": {
            "name": "slice_dataframe",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "df": [
                    "int",
                    "Callable[,None]",
                    "pandas.DataFrame",
                    "bool",
                    "Callable"
                ],
                "slicing_function": [
                    "List[str]"
                ]
            }
        }
    },
    "snorkel-main/snorkel/slicing/sliceaware_classifier.py": {
        "SliceAwareClassifier.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_architecture": [],
                "head_dim": [],
                "slice_names": [],
                "input_data_key": [],
                "task_name": [],
                "scorer": [
                    "Scorer"
                ]
            }
        },
        "SliceAwareClassifier.make_slice_dataloader": {
            "name": "make_slice_dataloader",
            "location": 94,
            "return": [
                "snorkel.classification.data.DictDataLoader"
            ],
            "arguments": {
                "self": [],
                "dataset": [],
                "S": []
            }
        },
        "SliceAwareClassifier.score_slices": {
            "name": "score_slices",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "dataloaders": [],
                "as_dataframe": [
                    "bool"
                ]
            }
        }
    },
    "snorkel-main/snorkel/slicing/utils.py": {
        "add_slice_labels": {
            "name": "add_slice_labels",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "dataloader": [
                    "str",
                    "int",
                    "List[str]",
                    "Set[str]",
                    "bool",
                    "Dict[int,dict[str,str]]",
                    "Dict[int,Dict[str,str]]"
                ],
                "base_task": [
                    "str",
                    "Dict",
                    "MutableMapping[str,Any]",
                    "MutableMapping"
                ],
                "S": [
                    "str"
                ]
            }
        },
        "convert_to_slice_tasks": {
            "name": "convert_to_slice_tasks",
            "location": 58,
            "return": [
                "List[snorkel.classification.task.Task]"
            ],
            "arguments": {
                "base_task": [
                    "str",
                    "Dict[str,Any]",
                    "Dict",
                    "bool"
                ],
                "slice_names": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "snorkel-main/snorkel/slicing/__init__.py": {},
    "snorkel-main/snorkel/slicing/apply/core.py": {},
    "snorkel-main/snorkel/slicing/apply/dask.py": {},
    "snorkel-main/snorkel/slicing/apply/spark.py": {},
    "snorkel-main/snorkel/slicing/apply/__init__.py": {},
    "snorkel-main/snorkel/slicing/modules/slice_combiner.py": {
        "SliceCombinerModule.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "slice_ind_key": [
                    "Text",
                    "bytes",
                    "Tuple[int,int]"
                ],
                "slice_pred_key": [
                    "Text",
                    "bytes",
                    "Tuple[int,int]"
                ],
                "slice_pred_feat_key": [
                    "Text",
                    "bytes",
                    "int"
                ],
                "temperature": [
                    "float",
                    "bytes",
                    "str",
                    "int",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "SliceCombinerModule.forward": {
            "name": "forward",
            "location": 56,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "output_dict": [
                    "bytes",
                    "str",
                    "List[tuple]",
                    "Tuple[str]",
                    "T",
                    "int",
                    "cmk.utils.type_defs.AgentRawData"
                ]
            }
        }
    },
    "snorkel-main/snorkel/slicing/modules/__init__.py": {},
    "snorkel-main/snorkel/slicing/sf/core.py": {
        "slicing_function.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None",
                    "bool",
                    "int"
                ],
                "resources": [
                    "int",
                    "None",
                    "str",
                    "Sequence",
                    "bool",
                    "Optional[str]"
                ],
                "pre": [
                    "int",
                    "None",
                    "str",
                    "Sequence",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "slicing_function.__call__": {
            "name": "__call__",
            "location": 59,
            "return": [
                "SlicingFunction"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Mapping[Any,Any]",
                    "Mapping"
                ]
            }
        }
    },
    "snorkel-main/snorkel/slicing/sf/nlp.py": {
        "NLPSlicingFunction._create_preprocessor": {
            "name": "_create_preprocessor",
            "location": 81,
            "return": [
                "snorkel.preprocess.nlp.SpacyPreprocessor"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Callable"
                ],
                "parameters": []
            }
        }
    },
    "snorkel-main/snorkel/slicing/sf/__init__.py": {},
    "snorkel-main/snorkel/synthetic/synthetic_data.py": {
        "generate_simple_label_matrix": {
            "name": "generate_simple_label_matrix",
            "location": 6,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "n": [
                    "int",
                    "float"
                ],
                "m": [
                    "int"
                ],
                "cardinality": [
                    "int",
                    "float",
                    "bool",
                    "str",
                    "Tuple[int,int]"
                ],
                "abstain_multiplier": [
                    "float",
                    "int"
                ]
            }
        }
    },
    "snorkel-main/snorkel/synthetic/__init__.py": {},
    "snorkel-main/snorkel/types/classifier.py": {},
    "snorkel-main/snorkel/types/data.py": {},
    "snorkel-main/snorkel/types/hashing.py": {},
    "snorkel-main/snorkel/types/__init__.py": {},
    "snorkel-main/snorkel/utils/config_utils.py": {
        "merge_config": {
            "name": "merge_config",
            "location": 6,
            "return": [
                "neuromation.api.Config",
                "_vendor.traitlets.config.Config",
                "Dict[str, Any]",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "dict"
                ],
                "config_updates": [
                    "Dict[str,Any]",
                    "Dict",
                    "_pytesconfig.Config"
                ]
            }
        }
    },
    "snorkel-main/snorkel/utils/core.py": {
        "_hash": {
            "name": "_hash",
            "location": 7,
            "return": [
                "int"
            ],
            "arguments": {
                "i": [
                    "int"
                ]
            }
        },
        "probs_to_preds": {
            "name": "probs_to_preds",
            "location": 13,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "probs": [
                    "str",
                    "List[int]"
                ],
                "tie_break_policy": [
                    "Text",
                    "str",
                    "int",
                    "float",
                    "Union[float,int]"
                ],
                "tol": [
                    "float",
                    "numpy.ndarray",
                    "str"
                ]
            }
        },
        "preds_to_probs": {
            "name": "preds_to_probs",
            "location": 75,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "preds": [
                    "numpy.ndarray",
                    "bool",
                    "float",
                    "int"
                ],
                "num_classes": [
                    "int",
                    "bool"
                ]
            }
        },
        "to_int_label_array": {
            "name": "to_int_label_array",
            "location": 94,
            "return": [
                "str",
                "int",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "X": [
                    "numpy.ndarray"
                ],
                "flatten_vector": [
                    "bool",
                    "str",
                    "Exception",
                    "numpy.ndarray",
                    "int",
                    "T"
                ]
            }
        },
        "filter_labels": {
            "name": "filter_labels",
            "location": 131,
            "return": [
                "dict"
            ],
            "arguments": {
                "label_dict": [],
                "filter_dict": [
                    "Dict[str,list[int]]",
                    "Dict[str,str]",
                    "Dict[str,List[int]]",
                    "Dict",
                    "Dict[bool,str]",
                    "Dict[str,int]",
                    "Dict[str,Any]",
                    "DefaultDict[Any,int]"
                ]
            }
        },
        "_get_mask": {
            "name": "_get_mask",
            "location": 185,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "label_array": [
                    "float",
                    "str",
                    "Tuple",
                    "numpy.ndarray"
                ],
                "filter_values": [
                    "List[int]",
                    "bool",
                    "Optional[int]"
                ]
            }
        }
    },
    "snorkel-main/snorkel/utils/data_operators.py": {
        "check_unique_names": {
            "name": "check_unique_names",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "names": [
                    "str",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "snorkel-main/snorkel/utils/lr_schedulers.py": {},
    "snorkel-main/snorkel/utils/optimizers.py": {},
    "snorkel-main/snorkel/utils/__init__.py": {},
    "snorkel-main/test/__init__.py": {},
    "snorkel-main/test/analysis/test_error_analysis.py": {
        "ErrorAnalysisTest.test_get_label_buckets": {
            "name": "test_get_label_buckets",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ErrorAnalysisTest.test_get_label_buckets_multi": {
            "name": "test_get_label_buckets_multi",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ErrorAnalysisTest.test_get_label_buckets_bad_shape": {
            "name": "test_get_label_buckets_bad_shape",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ErrorAnalysisTest.test_get_label_instances": {
            "name": "test_get_label_instances",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ErrorAnalysisTest.test_get_label_instances_exceptions": {
            "name": "test_get_label_instances_exceptions",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "snorkel-main/test/analysis/test_metrics.py": {
        "MetricsTest.test_accuracy_basic": {
            "name": "test_accuracy_basic",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricsTest.test_bad_inputs": {
            "name": "test_bad_inputs",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricsTest.test_ignores": {
            "name": "test_ignores",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricsTest.test_coverage": {
            "name": "test_coverage",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricsTest.test_precision": {
            "name": "test_precision",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricsTest.test_recall": {
            "name": "test_recall",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricsTest.test_f1": {
            "name": "test_f1",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricsTest.test_f1_multiclass": {
            "name": "test_f1_multiclass",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricsTest.test_fbeta": {
            "name": "test_fbeta",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricsTest.test_matthews": {
            "name": "test_matthews",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricsTest.test_roc_auc": {
            "name": "test_roc_auc",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricsTest.test_missing_preds": {
            "name": "test_missing_preds",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "snorkel-main/test/analysis/test_scorer.py": {
        "ScorerTest._get_labels": {
            "name": "_get_labels",
            "location": 14,
            "return": [
                "Tuple[(np.ndarray, np.ndarray, np.ndarray)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScorerTest.test_scorer": {
            "name": "test_scorer",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScorerTest.test_dict_metric": {
            "name": "test_dict_metric",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScorerTest.test_invalid_metric": {
            "name": "test_invalid_metric",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScorerTest.test_no_metrics": {
            "name": "test_no_metrics",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScorerTest.test_no_labels": {
            "name": "test_no_labels",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScorerTest.test_no_probs": {
            "name": "test_no_probs",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScorerTest.test_abstain_labels": {
            "name": "test_abstain_labels",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScorerTest.test_score_slices": {
            "name": "test_score_slices",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScorerTest.test_scorer.pred_sum": {
            "name": "pred_sum",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "golds": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "preds": [
                    "int",
                    "Callable",
                    "str"
                ],
                "probs": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "ScorerTest.test_dict_metric.dict_metric": {
            "name": "dict_metric",
            "location": 33,
            "return": [
                "dict",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "golds": [
                    "Iterable[Any]",
                    "dict",
                    "Dict[str, Any]",
                    "Exception"
                ],
                "preds": [
                    "Iterable[Any]",
                    "dict",
                    "Dict[str, Any]",
                    "Exception"
                ],
                "probs": [
                    "Iterable[Any]",
                    "dict",
                    "Dict[str, Any]",
                    "Exception"
                ]
            }
        },
        "ScorerTest.test_score_slices.sf": {
            "name": "sf",
            "location": 98,
            "return": [
                "bool",
                "Dict",
                "Dict[str,int]",
                "pandas.DataFrame"
            ],
            "arguments": {
                "x": [
                    "numpy.ndarray",
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        }
    },
    "snorkel-main/test/augmentation/__init__.py": {},
    "snorkel-main/test/augmentation/apply/test_tf_applier.py": {
        "square": {
            "name": "square",
            "location": 18,
            "return": [
                "float",
                "list[]"
            ],
            "arguments": {
                "x": [
                    "float",
                    "list[]"
                ]
            }
        },
        "square_returns_none": {
            "name": "square_returns_none",
            "location": 24,
            "return": [
                "None",
                "tuple[]",
                "float",
                "typing.Callable[int, int]",
                "list[tuple[]]"
            ],
            "arguments": {
                "x": [
                    "tuple[]",
                    "float",
                    "typing.Callable[int, int]",
                    "list[tuple[]]"
                ]
            }
        },
        "modify_in_place": {
            "name": "modify_in_place",
            "location": 32,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "make_df": {
            "name": "make_df",
            "location": 42,
            "return": [
                "Any"
            ],
            "arguments": {
                "values": [
                    "list[]",
                    "str",
                    "bool",
                    "typing.Sequence[str]",
                    "dict[, ]"
                ],
                "index": [
                    "list[]",
                    "str",
                    "bool",
                    "typing.Sequence[str]",
                    "dict[, ]"
                ],
                "key": [
                    "typing.Text"
                ]
            }
        },
        "get_data_dict": {
            "name": "get_data_dict",
            "location": 47,
            "return": [
                "List[dict]"
            ],
            "arguments": {
                "data": [
                    "list[int]"
                ]
            }
        },
        "TestTFApplier._get_x_namespace": {
            "name": "_get_x_namespace",
            "location": 52,
            "return": [
                "List[types.SimpleNamespace]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "list[int]"
                ]
            }
        },
        "TestTFApplier._get_x_namespace_dict": {
            "name": "_get_x_namespace_dict",
            "location": 55,
            "return": [
                "List[types.SimpleNamespace]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "list[int]"
                ]
            }
        },
        "TestTFApplier.test_tf_applier": {
            "name": "test_tf_applier",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTFApplier.test_tf_applier_keep_original": {
            "name": "test_tf_applier_keep_original",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTFApplier.test_tf_applier_returns_none": {
            "name": "test_tf_applier_returns_none",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTFApplier.test_tf_applier_keep_original_modify_in_place": {
            "name": "test_tf_applier_keep_original_modify_in_place",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTFApplier.test_tf_applier_generator": {
            "name": "test_tf_applier_generator",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTFApplier.test_tf_applier_keep_original_generator": {
            "name": "test_tf_applier_keep_original_generator",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTFApplier.test_tf_applier_returns_none_generator": {
            "name": "test_tf_applier_returns_none_generator",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTFApplier.test_tf_applier_keep_original_modify_in_place_generator": {
            "name": "test_tf_applier_keep_original_modify_in_place_generator",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPandasTFApplier._get_x_df": {
            "name": "_get_x_df",
            "location": 152,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPandasTFApplier._get_x_df_with_str": {
            "name": "_get_x_df_with_str",
            "location": 155,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPandasTFApplier._get_x_df_dict": {
            "name": "_get_x_df_dict",
            "location": 158,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPandasTFApplier.test_tf_applier_pandas": {
            "name": "test_tf_applier_pandas",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPandasTFApplier.test_tf_applier_pandas_keep_original": {
            "name": "test_tf_applier_pandas_keep_original",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPandasTFApplier.test_tf_applier_returns_none": {
            "name": "test_tf_applier_returns_none",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPandasTFApplier.test_tf_applier_pandas_modify_in_place": {
            "name": "test_tf_applier_pandas_modify_in_place",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPandasTFApplier.test_tf_applier_pandas_generator": {
            "name": "test_tf_applier_pandas_generator",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPandasTFApplier.test_tf_applier_pandas_keep_original_generator": {
            "name": "test_tf_applier_pandas_keep_original_generator",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPandasTFApplier.test_tf_applier_returns_none_generator": {
            "name": "test_tf_applier_returns_none_generator",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPandasTFApplier.test_tf_applier_pandas_modify_in_place_generator": {
            "name": "test_tf_applier_pandas_modify_in_place_generator",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "snorkel-main/test/augmentation/apply/__init__.py": {},
    "snorkel-main/test/augmentation/policy/test_core.py": {
        "TestPolicy.test_apply_each_policy": {
            "name": "test_apply_each_policy",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPolicy.test_apply_all_policy": {
            "name": "test_apply_all_policy",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "snorkel-main/test/augmentation/policy/test_sampling.py": {
        "TestSamplingPolicy.test_random_policy": {
            "name": "test_random_policy",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSamplingPolicy.test_mean_field_policy": {
            "name": "test_mean_field_policy",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "snorkel-main/test/augmentation/policy/__init__.py": {},
    "snorkel-main/test/classification/test_classifier_convergence.py": {
        "create_data": {
            "name": "create_data",
            "location": 78,
            "return": [
                "bool",
                "str",
                "List[str]",
                "Generator"
            ],
            "arguments": {
                "n": [
                    "int",
                    "float"
                ],
                "offset": [
                    "int",
                    "numpy.ndarray",
                    "List[list]"
                ]
            }
        },
        "create_dataloader": {
            "name": "create_dataloader",
            "location": 90,
            "return": [
                "snorkel.classification.data.DictDataLoader"
            ],
            "arguments": {
                "df": [
                    "str",
                    "Dict[str,Any]"
                ],
                "split": [
                    "str",
                    "Dict[str,Any]"
                ],
                "task_name": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "create_task": {
            "name": "create_task",
            "location": 108,
            "return": [
                "snorkel.classification.task.Task"
            ],
            "arguments": {
                "task_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "module_suffixes": [
                    "str"
                ]
            }
        },
        "ClassifierConvergenceTest.setUpClass": {
            "name": "setUpClass",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Type[Any]",
                    "List[str]",
                    "Type",
                    "str",
                    "bool",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        },
        "ClassifierConvergenceTest.test_convergence": {
            "name": "test_convergence",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "snorkel-main/test/classification/test_data.py": {
        "DatasetTest.test_classifier_dataset": {
            "name": "test_classifier_dataset",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasetTest.test_classifier_dataloader": {
            "name": "test_classifier_dataloader",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "snorkel-main/test/classification/test_loss.py": {
        "SoftCrossEntropyTest.test_sce_equals_ce": {
            "name": "test_sce_equals_ce",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SoftCrossEntropyTest.test_perfect_predictions": {
            "name": "test_perfect_predictions",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SoftCrossEntropyTest.test_lower_loss": {
            "name": "test_lower_loss",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SoftCrossEntropyTest.test_equal_loss": {
            "name": "test_equal_loss",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SoftCrossEntropyTest.test_invalid_reduction": {
            "name": "test_invalid_reduction",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SoftCrossEntropyTest.test_loss_weights": {
            "name": "test_loss_weights",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "snorkel-main/test/classification/test_multitask_classifier.py": {
        "create_dataloader": {
            "name": "create_dataloader",
            "location": 249,
            "return": [
                "snorkel.classification.data.DictDataLoader"
            ],
            "arguments": {
                "task_name": [
                    "typing.Text"
                ],
                "split": [
                    "typing.Text"
                ]
            }
        },
        "create_task": {
            "name": "create_task",
            "location": 261,
            "return": [
                "snorkel.classification.task.Task"
            ],
            "arguments": {
                "task_name": [
                    "str",
                    "None"
                ],
                "module_suffixes": [
                    "tuple[typing.Text]"
                ]
            }
        },
        "ClassifierTest.setUpClass": {
            "name": "setUpClass",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "set[str]",
                    "typing.Type"
                ]
            }
        },
        "ClassifierTest.setUp": {
            "name": "setUp",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClassifierTest.test_onetask_model": {
            "name": "test_onetask_model",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClassifierTest.test_twotask_none_overlap_model": {
            "name": "test_twotask_none_overlap_model",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClassifierTest.test_twotask_all_overlap_model": {
            "name": "test_twotask_all_overlap_model",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClassifierTest.test_twotask_partial_overlap_model": {
            "name": "test_twotask_partial_overlap_model",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClassifierTest.test_bad_tasks": {
            "name": "test_bad_tasks",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClassifierTest.test_no_data_parallel": {
            "name": "test_no_data_parallel",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClassifierTest.test_no_input_spec": {
            "name": "test_no_input_spec",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClassifierTest.test_predict": {
            "name": "test_predict",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClassifierTest.test_empty_batch": {
            "name": "test_empty_batch",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClassifierTest.test_partially_empty_batch": {
            "name": "test_partially_empty_batch",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClassifierTest.test_remapped_labels": {
            "name": "test_remapped_labels",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClassifierTest.test_score": {
            "name": "test_score",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClassifierTest.test_score_shuffled": {
            "name": "test_score_shuffled",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClassifierTest.test_save_load": {
            "name": "test_save_load",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClassifierTest.test_score_shuffled.SimpleVoter.forward": {
            "name": "forward",
            "location": 177,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        }
    },
    "snorkel-main/test/classification/test_task.py": {
        "TaskTest.test_task_creation": {
            "name": "test_task_creation",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "snorkel-main/test/classification/test_utils.py": {
        "UtilsTest.test_pad_batch": {
            "name": "test_pad_batch",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilsTest.test_list_to_tensor": {
            "name": "test_list_to_tensor",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilsTest.test_collect_flow_outputs_by_suffix": {
            "name": "test_collect_flow_outputs_by_suffix",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "snorkel-main/test/classification/__init__.py": {},
    "snorkel-main/test/classification/training/test_trainer.py": {
        "create_dataloader": {
            "name": "create_dataloader",
            "location": 29,
            "return": [
                "snorkel.classification.data.DictDataLoader"
            ],
            "arguments": {
                "task_name": [
                    "Text",
                    "str",
                    "int",
                    "Callable[...,T]"
                ],
                "split": [
                    "Text",
                    "str",
                    "int",
                    "Callable[...,T]"
                ]
            }
        },
        "create_task": {
            "name": "create_task",
            "location": 41,
            "return": [
                "snorkel.classification.task.Task"
            ],
            "arguments": {
                "task_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "module_suffixes": [
                    "str",
                    "Tuple[Text]"
                ]
            }
        },
        "TrainerTest.test_trainer_onetask": {
            "name": "test_trainer_onetask",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainerTest.test_trainer_twotask": {
            "name": "test_trainer_twotask",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainerTest.test_trainer_errors": {
            "name": "test_trainer_errors",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainerTest.test_checkpointer_init": {
            "name": "test_checkpointer_init",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainerTest.test_log_writer_init": {
            "name": "test_log_writer_init",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainerTest.test_log_writer_json": {
            "name": "test_log_writer_json",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainerTest.test_optimizer_init": {
            "name": "test_optimizer_init",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainerTest.test_scheduler_init": {
            "name": "test_scheduler_init",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainerTest.test_warmup": {
            "name": "test_warmup",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainerTest.test_save_load": {
            "name": "test_save_load",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainerTest.dict_check": {
            "name": "dict_check",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dict1": [
                    "Mapping[str, Any]",
                    "dict",
                    "Dict[str, object]",
                    "str"
                ],
                "dict2": [
                    "Mapping[str, Any]",
                    "Dict[str, Any]",
                    "Dict[str, object]"
                ]
            }
        }
    },
    "snorkel-main/test/classification/training/loggers/test_checkpointer.py": {
        "TestLogManager.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogManager.tearDown": {
            "name": "tearDown",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogManager.test_checkpointer": {
            "name": "test_checkpointer",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogManager.test_checkpointer_min": {
            "name": "test_checkpointer_min",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogManager.test_checkpointer_clear": {
            "name": "test_checkpointer_clear",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogManager.test_checkpointer_load_best": {
            "name": "test_checkpointer_load_best",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogManager.test_bad_checkpoint_runway": {
            "name": "test_bad_checkpoint_runway",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogManager.test_no_zero_frequency": {
            "name": "test_no_zero_frequency",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogManager.test_bad_metric_name": {
            "name": "test_bad_metric_name",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "snorkel-main/test/classification/training/loggers/test_log_manager.py": {
        "TestLogManager.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogManager.tearDown": {
            "name": "tearDown",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogManager.test_log_manager_points": {
            "name": "test_log_manager_points",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogManager.test_log_manager_batch": {
            "name": "test_log_manager_batch",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogManager.test_log_manager_epoch": {
            "name": "test_log_manager_epoch",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogManager.test_load_on_cleanup": {
            "name": "test_load_on_cleanup",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogManager.test_bad_unit": {
            "name": "test_bad_unit",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "snorkel-main/test/classification/training/loggers/test_log_writer.py": {
        "TestLogWriter.setUp": {
            "name": "setUp",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogWriter.tearDown": {
            "name": "tearDown",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogWriter.test_log_writer": {
            "name": "test_log_writer",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogWriter.test_write_text": {
            "name": "test_write_text",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogWriter.test_write_config": {
            "name": "test_write_config",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "snorkel-main/test/classification/training/loggers/test_tensorboard_writer.py": {
        "TestTensorBoardWriter.setUp": {
            "name": "setUp",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorBoardWriter.tearDown": {
            "name": "tearDown",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorBoardWriter.test_tensorboard_writer": {
            "name": "test_tensorboard_writer",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "snorkel-main/test/classification/training/loggers/__init__.py": {},
    "snorkel-main/test/classification/training/schedulers/test_schedulers.py": {
        "SequentialTest.test_sequential": {
            "name": "test_sequential",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SequentialTest.test_shuffled": {
            "name": "test_shuffled",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "snorkel-main/test/labeling/test_analysis.py": {
        "f": {
            "name": "f",
            "location": 29,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "List[T]",
                    "Tuple[int]"
                ]
            }
        },
        "TestAnalysis.setUp": {
            "name": "setUp",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnalysis.test_label_coverage": {
            "name": "test_label_coverage",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnalysis.test_label_overlap": {
            "name": "test_label_overlap",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnalysis.test_label_conflict": {
            "name": "test_label_conflict",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnalysis.test_lf_polarities": {
            "name": "test_lf_polarities",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnalysis.test_lf_coverages": {
            "name": "test_lf_coverages",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnalysis.test_lf_overlaps": {
            "name": "test_lf_overlaps",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnalysis.test_lf_conflicts": {
            "name": "test_lf_conflicts",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnalysis.test_lf_empirical_accuracies": {
            "name": "test_lf_empirical_accuracies",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnalysis.test_lf_empirical_probs": {
            "name": "test_lf_empirical_probs",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnalysis.test_lf_summary": {
            "name": "test_lf_summary",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnalysis.test_wrong_number_of_lfs": {
            "name": "test_wrong_number_of_lfs",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnalysis.test_lf_summary_without_abstain": {
            "name": "test_lf_summary_without_abstain",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "snorkel-main/test/labeling/test_convergence.py": {
        "create_data": {
            "name": "create_data",
            "location": 15,
            "return": [
                "bool",
                "str",
                "List[str]",
                "Generator"
            ],
            "arguments": {
                "n": [
                    "int",
                    "List[int]",
                    "None",
                    "bool",
                    "Optional[int]",
                    "Tuple[Union[int,int]]",
                    "float",
                    "Tuple[int,int]",
                    "Optional[float]"
                ]
            }
        },
        "get_positive_labeling_function": {
            "name": "get_positive_labeling_function",
            "location": 26,
            "return": [
                "snorkel.labeling.lf.core.LabelingFunction"
            ],
            "arguments": {
                "divisor": [
                    "int",
                    "str",
                    "bytes",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "get_negative_labeling_function": {
            "name": "get_negative_labeling_function",
            "location": 35,
            "return": [
                "snorkel.labeling.lf.core.LabelingFunction"
            ],
            "arguments": {
                "divisor": [
                    "int",
                    "str",
                    "bytes",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "copy_features": {
            "name": "copy_features",
            "location": 45,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "x": [
                    "float",
                    "numpy.ndarray",
                    "snorkel.types.DataPoint",
                    "torch.Tensor"
                ]
            }
        },
        "f": {
            "name": "f",
            "location": 52,
            "return": [
                "int",
                "numpy.ndarray",
                "List[int]",
                "bool",
                "float",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "str",
                    "float",
                    "snorkel.types.DataPoint",
                    "numpy.ndarray",
                    "Union[numpy.ndarray,pandas.DataFrame]"
                ],
                "divisor": [
                    "int",
                    "snorkel.types.DataPoint",
                    "str",
                    "numpy.ndarray",
                    "float",
                    "Union[numpy.ndarray, pandas.DataFrame]"
                ]
            }
        },
        "get_positive_labeling_function.f": {
            "name": "f",
            "location": 29,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "get_negative_labeling_function.f": {
            "name": "f",
            "location": 38,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "LabelingConvergenceTest.setUpClass": {
            "name": "setUpClass",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "int",
                    "str",
                    "Type[Any]"
                ]
            }
        },
        "LabelingConvergenceTest.test_labeling_convergence": {
            "name": "test_labeling_convergence",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "snorkel-main/test/labeling/test_utils.py": {
        "TestAnalysis.test_filter_unlabeled_dataframe": {
            "name": "test_filter_unlabeled_dataframe",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "snorkel-main/test/labeling/__init__.py": {},
    "snorkel-main/test/labeling/apply/lf_applier_spark_test_script.py": {
        "f": {
            "name": "f",
            "location": 45,
            "return": [
                "int",
                "str",
                "bool",
                "Tuple[str]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "List[T]",
                    "Tuple[int]"
                ]
            }
        },
        "g": {
            "name": "g",
            "location": 50,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "x": [
                    "List[int]",
                    "int",
                    "snorkel.types.DataPoint",
                    "float",
                    "bool",
                    "Union[int,float]",
                    "numpy.ndarray"
                ],
                "db": [
                    "List[int]",
                    "snorkel.types.DataPoint",
                    "int",
                    "bool",
                    "Union[int,float]",
                    "numpy.ndarray"
                ]
            }
        },
        "build_lf_matrix": {
            "name": "build_lf_matrix",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "snorkel-main/test/labeling/apply/test_lf_applier.py": {
        "square": {
            "name": "square",
            "location": 19,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int"
                ]
            }
        },
        "f": {
            "name": "f",
            "location": 34,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [
                    "float"
                ]
            }
        },
        "fp": {
            "name": "fp",
            "location": 39,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        },
        "g": {
            "name": "g",
            "location": 44,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [
                    "list[int]",
                    "int"
                ],
                "db": [
                    "list[int]",
                    "int"
                ]
            }
        },
        "h": {
            "name": "h",
            "location": 49,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "typing.Iterable[typing.Iterable[float]]",
                    "str",
                    "bytes"
                ]
            }
        },
        "f_np": {
            "name": "f_np",
            "location": 54,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [
                    "list[T]",
                    "tuple[int]"
                ]
            }
        },
        "g_np": {
            "name": "g_np",
            "location": 59,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [
                    "list[int]"
                ],
                "db": [
                    "list[int]"
                ]
            }
        },
        "f_bad": {
            "name": "f_bad",
            "location": 64,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [
                    "float"
                ]
            }
        },
        "SquareHitTracker.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SquareHitTracker.__call__": {
            "name": "__call__",
            "location": 28,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "bool"
                ]
            }
        },
        "TestLFApplier.test_lf_applier": {
            "name": "test_lf_applier",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLFApplier.test_lf_applier_fault": {
            "name": "test_lf_applier_fault",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLFApplier.test_lf_applier_preprocessor": {
            "name": "test_lf_applier_preprocessor",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLFApplier.test_lf_applier_preprocessor_memoized": {
            "name": "test_lf_applier_preprocessor_memoized",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLFApplier.test_lf_applier_no_labels": {
            "name": "test_lf_applier_no_labels",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLFApplier.test_lf_applier_numpy": {
            "name": "test_lf_applier_numpy",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPandasApplier.test_lf_applier_pandas": {
            "name": "test_lf_applier_pandas",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPandasApplier.test_lf_applier_pandas_fault": {
            "name": "test_lf_applier_pandas_fault",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPandasApplier.test_lf_applier_pandas_preprocessor": {
            "name": "test_lf_applier_pandas_preprocessor",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPandasApplier.test_lf_applier_pandas_preprocessor_memoized": {
            "name": "test_lf_applier_pandas_preprocessor_memoized",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPandasApplier.test_lf_applier_pandas_spacy_preprocessor": {
            "name": "test_lf_applier_pandas_spacy_preprocessor",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPandasApplier.test_lf_applier_pandas_spacy_preprocessor_memoized": {
            "name": "test_lf_applier_pandas_spacy_preprocessor_memoized",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDaskApplier.test_lf_applier_dask": {
            "name": "test_lf_applier_dask",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDaskApplier.test_lf_applier_dask_fault": {
            "name": "test_lf_applier_dask_fault",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDaskApplier.test_lf_applier_dask_preprocessor": {
            "name": "test_lf_applier_dask_preprocessor",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDaskApplier.test_lf_applier_pandas_preprocessor_memoized": {
            "name": "test_lf_applier_pandas_preprocessor_memoized",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDaskApplier.test_lf_applier_dask_spacy_preprocessor": {
            "name": "test_lf_applier_dask_spacy_preprocessor",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDaskApplier.test_lf_applier_pandas_spacy_preprocessor_memoized": {
            "name": "test_lf_applier_pandas_spacy_preprocessor_memoized",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDaskApplier.test_lf_applier_pandas_parallel": {
            "name": "test_lf_applier_pandas_parallel",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDaskApplier.test_lf_applier_pandas_parallel_raises": {
            "name": "test_lf_applier_pandas_parallel_raises",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLFApplier.test_lf_applier_preprocessor_memoized.square_memoize": {
            "name": "square_memoize",
            "location": 113,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "TestLFApplier.test_lf_applier_preprocessor_memoized.fp_memoized": {
            "name": "fp_memoized",
            "location": 118,
            "return": [
                "int"
            ],
            "arguments": {
                "x": []
            }
        },
        "TestPandasApplier.test_lf_applier_pandas_preprocessor_memoized.square_memoize": {
            "name": "square_memoize",
            "location": 174,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "TestPandasApplier.test_lf_applier_pandas_preprocessor_memoized.fp_memoized": {
            "name": "fp_memoized",
            "location": 179,
            "return": [
                "int"
            ],
            "arguments": {
                "x": []
            }
        },
        "TestPandasApplier.test_lf_applier_pandas_spacy_preprocessor.first_is_name": {
            "name": "first_is_name",
            "location": 192,
            "return": [
                "int"
            ],
            "arguments": {
                "x": []
            }
        },
        "TestPandasApplier.test_lf_applier_pandas_spacy_preprocessor.has_verb": {
            "name": "has_verb",
            "location": 196,
            "return": [
                "int"
            ],
            "arguments": {
                "x": []
            }
        },
        "TestPandasApplier.test_lf_applier_pandas_spacy_preprocessor_memoized.first_is_name": {
            "name": "first_is_name",
            "location": 209,
            "return": [
                "int"
            ],
            "arguments": {
                "x": []
            }
        },
        "TestPandasApplier.test_lf_applier_pandas_spacy_preprocessor_memoized.has_verb": {
            "name": "has_verb",
            "location": 213,
            "return": [
                "int"
            ],
            "arguments": {
                "x": []
            }
        },
        "TestDaskApplier.test_lf_applier_pandas_preprocessor_memoized.square_memoize": {
            "name": "square_memoize",
            "location": 249,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "TestDaskApplier.test_lf_applier_pandas_preprocessor_memoized.fp_memoized": {
            "name": "fp_memoized",
            "location": 254,
            "return": [
                "int"
            ],
            "arguments": {
                "x": []
            }
        },
        "TestDaskApplier.test_lf_applier_dask_spacy_preprocessor.first_is_name": {
            "name": "first_is_name",
            "location": 268,
            "return": [
                "int"
            ],
            "arguments": {
                "x": []
            }
        },
        "TestDaskApplier.test_lf_applier_dask_spacy_preprocessor.has_verb": {
            "name": "has_verb",
            "location": 272,
            "return": [
                "int"
            ],
            "arguments": {
                "x": []
            }
        },
        "TestDaskApplier.test_lf_applier_pandas_spacy_preprocessor_memoized.first_is_name": {
            "name": "first_is_name",
            "location": 287,
            "return": [
                "int"
            ],
            "arguments": {
                "x": []
            }
        },
        "TestDaskApplier.test_lf_applier_pandas_spacy_preprocessor_memoized.has_verb": {
            "name": "has_verb",
            "location": 291,
            "return": [
                "int"
            ],
            "arguments": {
                "x": []
            }
        }
    },
    "snorkel-main/test/labeling/apply/test_spark.py": {
        "square": {
            "name": "square",
            "location": 17,
            "return": [
                "Row",
                "bool",
                "Dict[str,Any]",
                "Dict",
                "Optional[int]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "snorkel.types.DataPoint",
                    "numpy.ndarray"
                ]
            }
        },
        "f": {
            "name": "f",
            "location": 22,
            "return": [
                "int",
                "List[int]",
                "str",
                "List[dict]"
            ],
            "arguments": {
                "x": [
                    "float",
                    "snorkel.types.DataPoint",
                    "numpy.ndarray"
                ]
            }
        },
        "fp": {
            "name": "fp",
            "location": 27,
            "return": [
                "int",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "x": [
                    "int",
                    "snorkel.types.DataPoint",
                    "Tuple[Union[float,float]]",
                    "Tuple[float,float]"
                ]
            }
        },
        "g": {
            "name": "g",
            "location": 32,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "x": [
                    "List[int]",
                    "int",
                    "snorkel.types.DataPoint",
                    "T"
                ],
                "db": [
                    "List[int]",
                    "int",
                    "snorkel.types.DataPoint",
                    "T"
                ]
            }
        },
        "f_bad": {
            "name": "f_bad",
            "location": 37,
            "return": [
                "int",
                "str",
                "bool",
                "pandas.DataFrame",
                "Tuple[str]"
            ],
            "arguments": {
                "x": [
                    "float",
                    "snorkel.types.DataPoint",
                    "numpy.ndarray"
                ]
            }
        },
        "TestSparkApplier.test_lf_applier_spark": {
            "name": "test_lf_applier_spark",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSparkApplier.test_lf_applier_spark_fault": {
            "name": "test_lf_applier_spark_fault",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSparkApplier.test_lf_applier_spark_preprocessor": {
            "name": "test_lf_applier_spark_preprocessor",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSparkApplier.test_lf_applier_spark_preprocessor_memoized": {
            "name": "test_lf_applier_spark_preprocessor_memoized",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSparkApplier.test_lf_applier_spark_preprocessor_memoized.square_memoize": {
            "name": "square_memoize",
            "location": 93,
            "return": [
                "Row",
                "bool",
                "Dict[str,Any]",
                "Dict",
                "Optional[int]"
            ],
            "arguments": {
                "x": [
                    "snorkel.types.DataPoint",
                    "numpy.ndarray",
                    "int"
                ]
            }
        },
        "TestSparkApplier.test_lf_applier_spark_preprocessor_memoized.fp_memoized": {
            "name": "fp_memoized",
            "location": 97,
            "return": [
                "int",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "x": [
                    "snorkel.types.DataPoint",
                    "int",
                    "Tuple[float, float]"
                ]
            }
        }
    },
    "snorkel-main/test/labeling/apply/__init__.py": {},
    "snorkel-main/test/labeling/lf/test_core.py": {
        "square": {
            "name": "square",
            "location": 12,
            "return": [
                "str",
                "float",
                "List"
            ],
            "arguments": {
                "x": [
                    "float",
                    "List",
                    "snorkel.types.DataPoint"
                ]
            }
        },
        "returns_none": {
            "name": "returns_none",
            "location": 18,
            "return": [
                "None",
                "Type",
                "Optional[T]",
                "List"
            ],
            "arguments": {
                "x": [
                    "int",
                    "snorkel.types.DataPoint",
                    "T"
                ]
            }
        },
        "f": {
            "name": "f",
            "location": 22,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [
                    "float",
                    "snorkel.types.DataPoint"
                ]
            }
        },
        "g": {
            "name": "g",
            "location": 26,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [
                    "List[int]",
                    "int",
                    "snorkel.types.DataPoint",
                    "T"
                ],
                "db": [
                    "List[int]",
                    "int",
                    "snorkel.types.DataPoint",
                    "T"
                ]
            }
        },
        "TestLabelingFunction._run_lf": {
            "name": "_run_lf",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lf": []
            }
        },
        "TestLabelingFunction.test_labeling_function": {
            "name": "test_labeling_function",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLabelingFunction.test_labeling_function_resources": {
            "name": "test_labeling_function_resources",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLabelingFunction.test_labeling_function_preprocessor": {
            "name": "test_labeling_function_preprocessor",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLabelingFunction.test_labeling_function_returns_none": {
            "name": "test_labeling_function_returns_none",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLabelingFunction.test_labeling_function_serialize": {
            "name": "test_labeling_function_serialize",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLabelingFunction.test_labeling_function_decorator": {
            "name": "test_labeling_function_decorator",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLabelingFunction.test_labeling_function_decorator_args": {
            "name": "test_labeling_function_decorator_args",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLabelingFunction.test_labeling_function_decorator_no_parens": {
            "name": "test_labeling_function_decorator_no_parens",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLabelingFunction.test_labeling_function_decorator.lf": {
            "name": "lf",
            "location": 69,
            "return": [
                "int"
            ],
            "arguments": {
                "x": []
            }
        },
        "TestLabelingFunction.test_labeling_function_decorator_args.lf": {
            "name": "lf",
            "location": 80,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [],
                "db": []
            }
        },
        "TestLabelingFunction.test_labeling_function_decorator_no_parens.lf": {
            "name": "lf",
            "location": 91,
            "return": [
                "int",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        }
    },
    "snorkel-main/test/labeling/lf/test_nlp.py": {
        "combine_text": {
            "name": "combine_text",
            "location": 13,
            "return": [
                "int",
                "List[apps.monero.xmr.types.Sc25519]",
                "str",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "x": [
                    "int",
                    "List[apps.monero.xmr.types.Sc25519]",
                    "snorkel.types.DataPoint"
                ]
            }
        },
        "has_person_mention": {
            "name": "has_person_mention",
            "location": 18,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [
                    "float"
                ]
            }
        },
        "TestNLPLabelingFunction._run_lf": {
            "name": "_run_lf",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lf": []
            }
        },
        "TestNLPLabelingFunction.test_nlp_labeling_function": {
            "name": "test_nlp_labeling_function",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNLPLabelingFunction.test_nlp_labeling_function_memoized": {
            "name": "test_nlp_labeling_function_memoized",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNLPLabelingFunction.test_labeling_function_serialize": {
            "name": "test_labeling_function_serialize",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNLPLabelingFunction.test_nlp_labeling_function_decorator": {
            "name": "test_nlp_labeling_function_decorator",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNLPLabelingFunction.test_nlp_labeling_function_decorator_no_parens": {
            "name": "test_nlp_labeling_function_decorator_no_parens",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNLPLabelingFunction.test_nlp_labeling_function_shared_cache": {
            "name": "test_nlp_labeling_function_shared_cache",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNLPLabelingFunction.test_nlp_labeling_function_raises": {
            "name": "test_nlp_labeling_function_raises",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNLPLabelingFunction.test_nlp_labeling_function_decorator.has_person_mention": {
            "name": "has_person_mention",
            "location": 53,
            "return": [
                "int"
            ],
            "arguments": {
                "x": []
            }
        },
        "TestNLPLabelingFunction.test_nlp_labeling_function_shared_cache.lf2": {
            "name": "lf2",
            "location": 73,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "int"
                ]
            }
        },
        "TestNLPLabelingFunction.test_nlp_labeling_function_decorator_no_parens.has_person_mention": {
            "name": "has_person_mention",
            "location": 65,
            "return": [
                "int"
            ],
            "arguments": {
                "x": []
            }
        },
        "TestNLPLabelingFunction.test_nlp_labeling_function_raises.has_person_mention": {
            "name": "has_person_mention",
            "location": 91,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [
                    "float"
                ]
            }
        }
    },
    "snorkel-main/test/labeling/lf/test_nlp_spark.py": {
        "has_person_mention": {
            "name": "has_person_mention",
            "location": 15,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [
                    "float"
                ]
            }
        },
        "TestNLPLabelingFunction._run_lf": {
            "name": "_run_lf",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lf": []
            }
        },
        "TestNLPLabelingFunction.test_nlp_labeling_function": {
            "name": "test_nlp_labeling_function",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNLPLabelingFunction.test_nlp_labeling_function_decorator": {
            "name": "test_nlp_labeling_function_decorator",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNLPLabelingFunction.test_spark_nlp_labeling_function_with_nlp_labeling_function": {
            "name": "test_spark_nlp_labeling_function_with_nlp_labeling_function",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNLPLabelingFunction.test_nlp_labeling_function_decorator.has_person_mention": {
            "name": "has_person_mention",
            "location": 34,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [
                    "float"
                ]
            }
        }
    },
    "snorkel-main/test/labeling/model/test_baseline.py": {
        "BaselineModelTest.test_random_vote": {
            "name": "test_random_vote",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaselineModelTest.test_majority_class_vote": {
            "name": "test_majority_class_vote",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaselineModelTest.test_majority_label_vote": {
            "name": "test_majority_label_vote",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "snorkel-main/test/labeling/model/test_label_model.py": {
        "LabelModelTest._set_up_model": {
            "name": "_set_up_model",
            "location": 18,
            "return": [
                "snorkel.labeling.model.label_model.LabelModel"
            ],
            "arguments": {
                "self": [],
                "L": [
                    "float",
                    "int"
                ],
                "class_balance": [
                    "list[float]"
                ]
            }
        },
        "LabelModelTest.test_L_form": {
            "name": "test_L_form",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LabelModelTest.test_mv_default": {
            "name": "test_mv_default",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LabelModelTest.test_prec_init": {
            "name": "test_prec_init",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LabelModelTest.test_class_balance": {
            "name": "test_class_balance",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LabelModelTest.test_generate_O": {
            "name": "test_generate_O",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LabelModelTest.test_augmented_L_construction": {
            "name": "test_augmented_L_construction",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LabelModelTest.test_conditional_probs": {
            "name": "test_conditional_probs",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LabelModelTest.test_get_weight": {
            "name": "test_get_weight",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LabelModelTest.test_build_mask": {
            "name": "test_build_mask",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LabelModelTest.test_init_params": {
            "name": "test_init_params",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LabelModelTest.test_predict_proba": {
            "name": "test_predict_proba",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LabelModelTest.test_predict": {
            "name": "test_predict",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LabelModelTest.test_score": {
            "name": "test_score",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LabelModelTest.test_progress_bar": {
            "name": "test_progress_bar",
            "location": 342,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LabelModelTest.test_loss": {
            "name": "test_loss",
            "location": 355,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LabelModelTest.test_model_loss": {
            "name": "test_model_loss",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LabelModelTest.test_optimizer": {
            "name": "test_optimizer",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LabelModelTest.test_lr_scheduler": {
            "name": "test_lr_scheduler",
            "location": 392,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LabelModelTest.test_save_and_load": {
            "name": "test_save_and_load",
            "location": 403,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LabelModelTest.test_optimizer_init": {
            "name": "test_optimizer_init",
            "location": 420,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LabelModelTest.test_scheduler_init": {
            "name": "test_scheduler_init",
            "location": 436,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LabelModelTest.test_warmup": {
            "name": "test_warmup",
            "location": 454,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LabelModelTest.test_set_mu_eps": {
            "name": "test_set_mu_eps",
            "location": 470,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LabelModelTest.test_symmetry_breaking": {
            "name": "test_symmetry_breaking",
            "location": 480,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LabelModelTest.test_symmetry_breaking_multiclass": {
            "name": "test_symmetry_breaking_multiclass",
            "location": 513,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLabelModelAdvanced.setUp": {
            "name": "setUp",
            "location": 556,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLabelModelAdvanced.test_label_model_basic": {
            "name": "test_label_model_basic",
            "location": 562,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLabelModelAdvanced.test_label_model_sparse": {
            "name": "test_label_model_sparse",
            "location": 582,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "snorkel-main/test/labeling/model/test_logger.py": {
        "LoggerTest.test_basic": {
            "name": "test_basic",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoggerTest.test_bad_metrics_dict": {
            "name": "test_bad_metrics_dict",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoggerTest.test_valid_metrics_dict": {
            "name": "test_valid_metrics_dict",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "snorkel-main/test/labeling/model/__init__.py": {},
    "snorkel-main/test/labeling/preprocess/test_nlp.py": {
        "TestSpacyPreprocessor.test_spacy_preprocessor": {
            "name": "test_spacy_preprocessor",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "snorkel-main/test/labeling/preprocess/__init__.py": {},
    "snorkel-main/test/map/test_core.py": {
        "square": {
            "name": "square",
            "location": 66,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int"
                ]
            }
        },
        "modify_in_place": {
            "name": "modify_in_place",
            "location": 72,
            "return": [
                "tuple[typing.Union[float,float,float,float]]",
                "float"
            ],
            "arguments": {
                "x": [
                    "tuple[typing.Union[float,float,float,float]]",
                    "float"
                ]
            }
        },
        "SplitWordsMapper.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "text_field": [
                    "str"
                ],
                "lower_field": [
                    "str"
                ],
                "words_field": [
                    "str"
                ]
            }
        },
        "SplitWordsMapper.run": {
            "name": "run",
            "location": 22,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "SplitWordsMapperDefaultArgs.run": {
            "name": "run",
            "location": 27,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "MapperReturnsNone.run": {
            "name": "run",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "set[str]",
                    "list[str]",
                    "bool"
                ]
            }
        },
        "MapperWithArgs.run": {
            "name": "run",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "set[str]",
                    "list[str]",
                    "bool"
                ]
            }
        },
        "MapperWithKwargs.run": {
            "name": "run",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "set[str]",
                    "list[str]",
                    "bool"
                ]
            }
        },
        "MapperWithPre.run": {
            "name": "run",
            "location": 47,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "num_squared": [
                    "float",
                    "int"
                ]
            }
        },
        "MapperWithPre2.run": {
            "name": "run",
            "location": 52,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "double_num_squared": [
                    "float",
                    "int"
                ]
            }
        },
        "SquareHitTracker.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SquareHitTracker.__call__": {
            "name": "__call__",
            "location": 60,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "bool"
                ]
            }
        },
        "TestMapperCore._get_x": {
            "name": "_get_x",
            "location": 79,
            "return": [
                "types.SimpleNamespace"
            ],
            "arguments": {
                "self": [],
                "num": [
                    "int"
                ],
                "text": [
                    "typing.Text"
                ]
            }
        },
        "TestMapperCore._get_x_dict": {
            "name": "_get_x_dict",
            "location": 82,
            "return": [
                "types.SimpleNamespace"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapperCore.test_numeric_mapper": {
            "name": "test_numeric_mapper",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapperCore.test_text_mapper": {
            "name": "test_text_mapper",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapperCore.test_mapper_same_field": {
            "name": "test_mapper_same_field",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapperCore.test_mapper_default_args": {
            "name": "test_mapper_default_args",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapperCore.test_mapper_in_place": {
            "name": "test_mapper_in_place",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapperCore.test_mapper_returns_none": {
            "name": "test_mapper_returns_none",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapperCore.test_mapper_pre": {
            "name": "test_mapper_pre",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapperCore.test_mapper_pre_decorator": {
            "name": "test_mapper_pre_decorator",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapperCore.test_decorator_mapper_memoized": {
            "name": "test_decorator_mapper_memoized",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapperCore.test_decorator_mapper_memoized_none": {
            "name": "test_decorator_mapper_memoized_none",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapperCore.test_decorator_mapper_memoized_use_memoize_key": {
            "name": "test_decorator_mapper_memoized_use_memoize_key",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapperCore.test_decorator_mapper_not_memoized": {
            "name": "test_decorator_mapper_not_memoized",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapperCore.test_mapper_pre_memoized": {
            "name": "test_mapper_pre_memoized",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapperCore.test_mapper_decorator_no_parens": {
            "name": "test_mapper_decorator_no_parens",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapperCore.test_mapper_with_args_kwargs": {
            "name": "test_mapper_with_args_kwargs",
            "location": 362,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetHashable.test_get_hashable_hashable": {
            "name": "test_get_hashable_hashable",
            "location": 371,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetHashable.test_get_hashable_dict": {
            "name": "test_get_hashable_dict",
            "location": 376,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetHashable.test_get_hashable_list": {
            "name": "test_get_hashable_list",
            "location": 384,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetHashable.test_get_hashable_series": {
            "name": "test_get_hashable_series",
            "location": 391,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetHashable.test_get_hashable_series_with_doc": {
            "name": "test_get_hashable_series_with_doc",
            "location": 399,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetHashable.test_get_hashable_ndarray": {
            "name": "test_get_hashable_ndarray",
            "location": 408,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetHashable.test_get_hashable_unhashable": {
            "name": "test_get_hashable_unhashable",
            "location": 415,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapperCore.test_mapper_pre_decorator.mapper_no_pre": {
            "name": "mapper_no_pre",
            "location": 175,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "TestMapperCore.test_mapper_pre_decorator.mapper_pre": {
            "name": "mapper_pre",
            "location": 184,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "TestMapperCore.test_mapper_pre_decorator.mapper_pre_2": {
            "name": "mapper_pre_2",
            "location": 198,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "TestMapperCore.test_decorator_mapper_memoized.square": {
            "name": "square",
            "location": 219,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "TestMapperCore.test_decorator_mapper_memoized_none.square": {
            "name": "square",
            "location": 252,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "TestMapperCore.test_decorator_mapper_memoized_use_memoize_key.square": {
            "name": "square",
            "location": 270,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "TestMapperCore.test_decorator_mapper_not_memoized.square": {
            "name": "square",
            "location": 293,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "TestMapperCore.test_mapper_pre_memoized.square": {
            "name": "square",
            "location": 320,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "TestMapperCore.test_mapper_pre_memoized.mapper_pre": {
            "name": "mapper_pre",
            "location": 325,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "TestMapperCore.test_mapper_decorator_no_parens.square": {
            "name": "square",
            "location": 358,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "snorkel-main/test/map/test_spark.py": {
        "square": {
            "name": "square",
            "location": 44,
            "return": [
                "Row",
                "int",
                "Optional[Iterable[str]]",
                "bool",
                "Tuple[str]",
                "Union[int,slice]"
            ],
            "arguments": {
                "x": [
                    "snorkel.types.DataPoint",
                    "list"
                ]
            }
        },
        "modify_in_place": {
            "name": "modify_in_place",
            "location": 51,
            "return": [
                "Row",
                "bool",
                "Task",
                "Optional[str]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "List[float]",
                    "snorkel.types.DataPoint"
                ]
            }
        },
        "SplitWordsMapper.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "text_field": [
                    "str"
                ],
                "lower_field": [
                    "str"
                ],
                "words_field": [
                    "str"
                ]
            }
        },
        "SplitWordsMapper.run": {
            "name": "run",
            "location": 20,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "SplitWordsMapperDefaultArgs.run": {
            "name": "run",
            "location": 25,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "MapperReturnsNone.run": {
            "name": "run",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "SquareHitTracker.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SquareHitTracker.__call__": {
            "name": "__call__",
            "location": 38,
            "return": [
                "float",
                "int",
                "str",
                "Union[bool,List[bool]]",
                "bool",
                "types.signals.SignalHandlerT",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "bool",
                    "T",
                    "List[mypy.types.Type.VarId]"
                ]
            }
        },
        "TestMapperCore._get_x": {
            "name": "_get_x",
            "location": 57,
            "return": [
                "Row",
                "str",
                "Optional[str]",
                "Dict",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "num": [
                    "str",
                    "int"
                ],
                "text": [
                    "str",
                    "Text"
                ]
            }
        },
        "TestMapperCore._get_x_dict": {
            "name": "_get_x_dict",
            "location": 60,
            "return": [
                "Row",
                "Dict",
                "List"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapperCore.test_numeric_mapper": {
            "name": "test_numeric_mapper",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapperCore.test_text_mapper": {
            "name": "test_text_mapper",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapperCore.test_mapper_same_field": {
            "name": "test_mapper_same_field",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapperCore.test_mapper_default_args": {
            "name": "test_mapper_default_args",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapperCore.test_mapper_in_place": {
            "name": "test_mapper_in_place",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapperCore.test_mapper_returns_none": {
            "name": "test_mapper_returns_none",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapperCore.test_decorator_mapper_memoized": {
            "name": "test_decorator_mapper_memoized",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapperCore.test_decorator_mapper_memoized_none": {
            "name": "test_decorator_mapper_memoized_none",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapperCore.test_decorator_mapper_not_memoized": {
            "name": "test_decorator_mapper_not_memoized",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapperCore.test_decorator_mapper_memoized.square": {
            "name": "square",
            "location": 135,
            "return": [
                "Row"
            ],
            "arguments": {
                "x": []
            }
        },
        "TestMapperCore.test_decorator_mapper_memoized_none.square": {
            "name": "square",
            "location": 170,
            "return": [
                "Row"
            ],
            "arguments": {
                "x": []
            }
        },
        "TestMapperCore.test_decorator_mapper_not_memoized.square": {
            "name": "square",
            "location": 190,
            "return": [
                "Row",
                "int",
                "Optional[Iterable[str]]",
                "bool",
                "Tuple[str]",
                "Union[int,slice]"
            ],
            "arguments": {
                "x": [
                    "Awaitable[T]",
                    "snorkel.types.DataPoint"
                ]
            }
        }
    },
    "snorkel-main/test/map/__init__.py": {},
    "snorkel-main/test/slicing/test_convergence.py": {
        "f": {
            "name": "f",
            "location": 31,
            "return": [
                "bool",
                "pandas.DataFrame",
                "torch.FloatTensor",
                "Optional[int]",
                "Optional[List[int]]",
                "Collection[T]"
            ],
            "arguments": {
                "x": [
                    "List",
                    "snorkel.types.DataPoint",
                    "int",
                    "str",
                    "torch.Tensor",
                    "Union[pandas.DataFrame,numpy.ndarray]",
                    "Union[int,str]",
                    "Union[numpy.ndarray,pandas.DataFrame]"
                ]
            }
        },
        "g": {
            "name": "g",
            "location": 39,
            "return": [
                "bool",
                "pandas.DataFrame",
                "Optional[int]",
                "numpy.ndarray",
                "Optional[List[int]]"
            ],
            "arguments": {
                "x": [
                    "List",
                    "int",
                    "snorkel.types.DataPoint",
                    "Union[pandas.DataFrame,numpy.ndarray]"
                ]
            }
        },
        "h": {
            "name": "h",
            "location": 47,
            "return": [
                "bool",
                "pandas.DataFrame",
                "Optional[int]",
                "numpy.ndarray",
                "Optional[List[int]]"
            ],
            "arguments": {
                "x": [
                    "List",
                    "int",
                    "snorkel.types.DataPoint",
                    "Union[pandas.DataFrame,numpy.ndarray]"
                ]
            }
        },
        "create_data": {
            "name": "create_data",
            "location": 177,
            "return": [
                "bool",
                "str",
                "List[str]",
                "Generator"
            ],
            "arguments": {
                "n": [
                    "int",
                    "float"
                ]
            }
        },
        "create_dataloader": {
            "name": "create_dataloader",
            "location": 185,
            "return": [
                "snorkel.classification.data.DictDataLoader"
            ],
            "arguments": {
                "df": [
                    "str",
                    "Union[str,bytes]",
                    "bytes"
                ],
                "split": [
                    "str",
                    "Union[str,bytes]",
                    "bytes"
                ]
            }
        },
        "create_task": {
            "name": "create_task",
            "location": 203,
            "return": [
                "snorkel.classification.task.Task"
            ],
            "arguments": {
                "task_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "module_suffixes": [
                    "str"
                ]
            }
        },
        "SlicingConvergenceTest.setUpClass": {
            "name": "setUpClass",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "str",
                    "Dict",
                    "int"
                ]
            }
        },
        "SlicingConvergenceTest.test_convergence": {
            "name": "test_convergence",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SlicingConvergenceTest.test_performance": {
            "name": "test_performance",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "snorkel-main/test/slicing/test_monitor.py": {
        "sf": {
            "name": "sf",
            "location": 12,
            "return": [
                "bool",
                "Dict",
                "Dict[str,int]",
                "pandas.DataFrame"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "PandasSlicerTest.setUpClass": {
            "name": "setUpClass",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Set[str]",
                    "Dict[str,Any]",
                    "Dict[str,float]"
                ]
            }
        },
        "PandasSlicerTest.test_slice": {
            "name": "test_slice",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "snorkel-main/test/slicing/test_sliceaware_classifier.py": {
        "f": {
            "name": "f",
            "location": 13,
            "return": [
                "bool",
                "Dict",
                "List[str]"
            ],
            "arguments": {
                "x": [
                    "float",
                    "snorkel.types.DataPoint"
                ]
            }
        },
        "g": {
            "name": "g",
            "location": 18,
            "return": [
                "bool",
                "Dict",
                "Dict[str,int]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "create_dataset": {
            "name": "create_dataset",
            "location": 26,
            "return": [
                "snorkel.classification.data.DictDataset"
            ],
            "arguments": {
                "X": [
                    "str",
                    "Dict[str,str]",
                    "bool",
                    "List",
                    "Type",
                    "Type[Callable[Any,str]]",
                    "Dict[str,Any]"
                ],
                "Y": [
                    "str",
                    "Dict[str,str]",
                    "bool",
                    "List",
                    "Type",
                    "Type[Callable[Any,str]]",
                    "Dict[str,Any]"
                ],
                "split": [
                    "str",
                    "Dict[str,str]",
                    "bool",
                    "List",
                    "Type",
                    "Type[Callable[Any,str]]",
                    "Dict[str,Any]"
                ],
                "dataset_name": [
                    "str",
                    "Dict[str,str]",
                    "bool",
                    "List",
                    "Type",
                    "Type[Callable[Any,str]]",
                    "Dict[str,Any]"
                ],
                "input_name": [
                    "str",
                    "Dict[str,str]",
                    "bool",
                    "List",
                    "Type",
                    "Type[Callable[Any,str]]",
                    "Dict[str,Any]"
                ],
                "task_name": [
                    "str",
                    "Dict[str,str]",
                    "bool",
                    "List",
                    "Type",
                    "Type[Callable[Any,str]]",
                    "Dict[str,Any]"
                ]
            }
        },
        "SliceCombinerTest.setUp": {
            "name": "setUp",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SliceCombinerTest.test_slice_tasks": {
            "name": "test_slice_tasks",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SliceCombinerTest.test_make_slice_dataloader": {
            "name": "test_make_slice_dataloader",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SliceCombinerTest.test_scores_pipeline": {
            "name": "test_scores_pipeline",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "snorkel-main/test/slicing/test_slice_combiner.py": {
        "SliceCombinerTest.setUpClass": {
            "name": "setUpClass",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "list[str]",
                    "dict[str, typing.Any]",
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "SliceCombinerTest.test_forward_shape": {
            "name": "test_forward_shape",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SliceCombinerTest.test_average_reweighting": {
            "name": "test_average_reweighting",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SliceCombinerTest.test_average_reweighting_by_ind": {
            "name": "test_average_reweighting_by_ind",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SliceCombinerTest.test_average_reweighting_by_pred_confidence": {
            "name": "test_average_reweighting_by_pred_confidence",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SliceCombinerTest.test_many_slices": {
            "name": "test_many_slices",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SliceCombinerTest.test_combiner_multiclass": {
            "name": "test_combiner_multiclass",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SliceCombinerTest.test_temperature": {
            "name": "test_temperature",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "snorkel-main/test/slicing/test_utils.py": {
        "f": {
            "name": "f",
            "location": 17,
            "return": [
                "bool",
                "float",
                "str",
                "T"
            ],
            "arguments": {
                "x": [
                    "float",
                    "snorkel.types.DataPoint"
                ]
            }
        },
        "create_dummy_task": {
            "name": "create_dummy_task",
            "location": 112,
            "return": [
                "snorkel.classification.task.Task"
            ],
            "arguments": {
                "task_name": [
                    "str"
                ]
            }
        },
        "UtilsTest.test_add_slice_labels": {
            "name": "test_add_slice_labels",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilsTest.test_convert_to_slice_tasks": {
            "name": "test_convert_to_slice_tasks",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "snorkel-main/test/slicing/__init__.py": {},
    "snorkel-main/test/slicing/apply/test_sf_applier.py": {
        "square": {
            "name": "square",
            "location": 11,
            "return": [
                "str",
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "snorkel.types.DataPoint"
                ]
            }
        },
        "f": {
            "name": "f",
            "location": 26,
            "return": [
                "bool",
                "Dict",
                "List[str]"
            ],
            "arguments": {
                "x": [
                    "float",
                    "snorkel.types.DataPoint"
                ]
            }
        },
        "fp": {
            "name": "fp",
            "location": 31,
            "return": [
                "bool",
                "Dict",
                "Dict[str,int]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "snorkel.types.DataPoint",
                    "Tuple[Union[float,float]]",
                    "Tuple[float,float]"
                ]
            }
        },
        "g": {
            "name": "g",
            "location": 36,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "List[int]",
                    "int",
                    "snorkel.types.DataPoint",
                    "T"
                ],
                "db": [
                    "List[int]",
                    "int",
                    "snorkel.types.DataPoint",
                    "T"
                ]
            }
        },
        "SquareHitTracker.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SquareHitTracker.__call__": {
            "name": "__call__",
            "location": 20,
            "return": [
                "float",
                "int",
                "str",
                "Union[bool,List[bool]]",
                "bool",
                "types.signals.SignalHandlerT",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "bool",
                    "T",
                    "List[mypy.types.Type.VarId]"
                ]
            }
        },
        "TestSFApplier.test_sf_applier": {
            "name": "test_sf_applier",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSFApplier.test_sf_applier_preprocessor": {
            "name": "test_sf_applier_preprocessor",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "snorkel-main/test/slicing/apply/__init__.py": {},
    "snorkel-main/test/slicing/sf/test_core.py": {
        "TestSlicingFunction._run_sf": {
            "name": "_run_sf",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sf": [
                    "int"
                ]
            }
        },
        "TestSlicingFunction._run_sf_raise": {
            "name": "_run_sf_raise",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sf": [
                    "str",
                    "int",
                    "List",
                    "bool"
                ]
            }
        },
        "TestSlicingFunction.test_slicing_function_decorator": {
            "name": "test_slicing_function_decorator",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSlicingFunction.test_slicing_function_decorator_no_parens": {
            "name": "test_slicing_function_decorator_no_parens",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSlicingFunction.test_slicing_function_decorator.sf": {
            "name": "sf",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": []
            }
        },
        "TestSlicingFunction.test_slicing_function_decorator_no_parens.sf": {
            "name": "sf",
            "location": 33,
            "return": [
                "bool",
                "int",
                "List[int]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        }
    },
    "snorkel-main/test/slicing/sf/test_nlp.py": {
        "combine_text": {
            "name": "combine_text",
            "location": 10,
            "return": [
                "int",
                "List[apps.monero.xmr.types.Sc25519]",
                "str",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "x": [
                    "int",
                    "List[apps.monero.xmr.types.Sc25519]",
                    "snorkel.types.DataPoint"
                ]
            }
        },
        "has_person_mention": {
            "name": "has_person_mention",
            "location": 15,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [
                    "float"
                ]
            }
        },
        "TestNLPSlicingFunction._run_sf": {
            "name": "_run_sf",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sf": []
            }
        },
        "TestNLPSlicingFunction.test_nlp_slicing_function": {
            "name": "test_nlp_slicing_function",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNLPSlicingFunction.test_nlp_slicing_function_decorator": {
            "name": "test_nlp_slicing_function_decorator",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNLPSlicingFunction.test_nlp_slicing_function_decorator.has_person_mention": {
            "name": "has_person_mention",
            "location": 35,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [
                    "float"
                ]
            }
        }
    },
    "snorkel-main/test/slicing/sf/__init__.py": {},
    "snorkel-main/test/synthetic/test_synthetic_data.py": {
        "TestGenerateSimpleLabelMatrix.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenerateSimpleLabelMatrix._test_generate_L": {
            "name": "_test_generate_L",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "float",
                    "str",
                    "bool",
                    "None",
                    "int",
                    "Optional[str]"
                ],
                "decimal": [
                    "int",
                    "Optional[int]",
                    "List[float]",
                    "numpy.ndarray"
                ]
            }
        },
        "TestGenerateSimpleLabelMatrix.test_generate_L": {
            "name": "test_generate_L",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenerateSimpleLabelMatrix.test_generate_L_multiclass": {
            "name": "test_generate_L_multiclass",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "snorkel-main/test/synthetic/__init__.py": {},
    "snorkel-main/test/utils/test_config_utils.py": {
        "UtilsTest.test_merge_config": {
            "name": "test_merge_config",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "snorkel-main/test/utils/test_core.py": {
        "UtilsTest.test_to_int_label_array": {
            "name": "test_to_int_label_array",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilsTest.test_preds_to_probs": {
            "name": "test_preds_to_probs",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilsTest.test_probs_to_preds": {
            "name": "test_probs_to_preds",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilsTest.test_filter_labels": {
            "name": "test_filter_labels",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilsTest.test_filter_labels_probs": {
            "name": "test_filter_labels_probs",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "snorkel-main/test/utils/test_data_operators.py": {
        "DataOperatorsTest.test_check_unique_names": {
            "name": "test_check_unique_names",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "snorkel-main/test/utils/__init__.py": {}
}
{
    "spark-test-master/setup.py": {
        "readme": {
            "name": "readme",
            "location": 4,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "spark-test-master/spark_test/helpers.py": {
        "create_dataframe": {
            "name": "create_dataframe",
            "location": 8,
            "return": [
                "List[Row]",
                "bool",
                "pandas.DataFrame",
                "str",
                "Optional[dict]",
                "bytes"
            ],
            "arguments": {
                "data": [
                    "Dict",
                    "Dict[str,Any]",
                    "List[int]",
                    "pandas.DataFrame",
                    "None",
                    "Union[None,int,str]",
                    "int",
                    "str"
                ],
                "schema": [
                    "pyspark.sql.types.StructType",
                    "Dict",
                    "None",
                    "bytes",
                    "bool",
                    "Union[str,Dict[str,Any]]",
                    "str",
                    "pandas.DataFrame",
                    "Dict[str,Any]"
                ],
                "spark": [
                    "pyspark.sql.SparkSession",
                    "Dict[str,Any]",
                    "None",
                    "Optional[str]",
                    "str",
                    "Mapping[str,str]",
                    "Mapping"
                ]
            }
        },
        "is_empty": {
            "name": "is_empty",
            "location": 55,
            "return": [
                "bool",
                "int",
                "Dict[str,Dict[str,int]]"
            ],
            "arguments": {
                "df": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "spark-test-master/spark_test/testing.py": {
        "assert_rdd_equal": {
            "name": "assert_rdd_equal",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "expected": [
                    "List",
                    "int",
                    "str",
                    "Optional[List]",
                    "None"
                ],
                "result": [
                    "list",
                    "pandas.DataFrame",
                    "List[bytes]",
                    "List[Tuple[str, ...]]",
                    "bytes",
                    "List[str]"
                ],
                "check_order": [
                    "bool",
                    "Sequence[str]"
                ]
            }
        },
        "assert_dataframe_equal": {
            "name": "assert_dataframe_equal",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "expected": [
                    "str",
                    "pandas.DataFrame",
                    "Dict",
                    "None",
                    "Optional[str]",
                    "List[list[Any]]",
                    "List[List[Any]]"
                ],
                "result": [
                    "List[str]",
                    "pyspark.sql.DataFrame",
                    "str",
                    "List[List[Any]]",
                    "list"
                ],
                "check_order": [
                    "bool",
                    "Sequence[str]"
                ],
                "check_schema": [
                    "bool",
                    "Sequence[str]"
                ],
                "schema": [
                    "pyspark.sql.types.StructType",
                    "str",
                    "None",
                    "bytes"
                ],
                "spark": [
                    "None",
                    "int",
                    "pyspark.sql.SparkSession",
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "assert_row_equal": {
            "name": "assert_row_equal",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "left": [
                    "bool",
                    "str",
                    "Callable",
                    "Optional[str]",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ],
                "right": [
                    "bool",
                    "str",
                    "Callable",
                    "Optional[str]",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ],
                "check_field_order": [
                    "bool",
                    "Optional[int]",
                    "Container[Taxon]",
                    "str",
                    "Type[T]",
                    "List[str]"
                ]
            }
        },
        "assert_schema_equal": {
            "name": "assert_schema_equal",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "left": [
                    "pyspark.sql.types.StructType",
                    "str",
                    "bytes"
                ],
                "right": [
                    "pyspark.sql.types.StructType",
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "spark-test-master/spark_test/__init__.py": {},
    "spark-test-master/tests/conftest.py": {
        "spark": {
            "name": "spark",
            "location": 6,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        }
    },
    "spark-test-master/tests/example.py": {
        "transform": {
            "name": "transform",
            "location": 6,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "df": [
                    "List",
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "bugged_transform": {
            "name": "bugged_transform",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "df": [
                    "List",
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "test_transform": {
            "name": "test_transform",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "spark": [
                    "bool",
                    "int"
                ],
                "transform": [
                    "Callable"
                ]
            }
        }
    },
    "spark-test-master/tests/test_helpers.py": {
        "test_create_dataframe": {
            "name": "test_create_dataframe",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "spark": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_is_empty": {
            "name": "test_is_empty",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "spark": [
                    "str"
                ]
            }
        }
    },
    "spark-test-master/tests/test_spark_test.py": {
        "test_assert_schema_equal": {
            "name": "test_assert_schema_equal",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "spark": [
                    "str",
                    "tests.basilisp.helpers.CompileFn",
                    "Mapping",
                    "Mapping[str,Any]"
                ]
            }
        },
        "test_assert_rdd_equal": {
            "name": "test_assert_rdd_equal",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "spark": [
                    "str",
                    "Type",
                    "int",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_assert_frame_equal": {
            "name": "test_assert_frame_equal",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "spark": []
            }
        },
        "test_assert_row_equal": {
            "name": "test_assert_row_equal",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "spark-test-master/tests/__init__.py": {}
}
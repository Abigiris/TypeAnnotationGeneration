{
    "spnaughts-master/game_runner.py": {},
    "spnaughts-master/rabbit_worker.py": {
        "consume": {
            "name": "consume",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "consume.rabbit_process_job": {
            "name": "rabbit_process_job",
            "location": 30,
            "return": [
                "Iterator",
                "None"
            ],
            "arguments": {
                "ch": [
                    "bool"
                ],
                "method": [
                    "Dict[str, str]",
                    "dict",
                    "Callable",
                    "Type[T]",
                    "Dict[str, Any]",
                    "Iterable[Dict[str, Any]]"
                ],
                "properties": [
                    "bool"
                ],
                "body": [
                    "str",
                    "Dict[str, Dict[str, str]]",
                    "Optional[int]",
                    "bytes"
                ]
            }
        }
    },
    "spnaughts-master/bots/__init__.py": {},
    "spnaughts-master/bots/firstbot/firstbot.py": {
        "FirstBot.process": {
            "name": "process",
            "location": 12,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "List[float]"
                ],
                "available_moves": [
                    "List[float]"
                ]
            }
        }
    },
    "spnaughts-master/bots/firstbot/__init__.py": {},
    "spnaughts-master/bots/genbot3/genbot3.py": {
        "GenBot3.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenBot3.get_recipe": {
            "name": "get_recipe",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenBot3.get_state": {
            "name": "get_state",
            "location": 37,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenBot3.set_state": {
            "name": "set_state",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "GenBot3.create": {
            "name": "create",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_info": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "GenBot3.create_from_recipe": {
            "name": "create_from_recipe",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "recipe": [
                    "str",
                    "Callable[[T], bool]",
                    "Callable",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "GenBot3.mutate": {
            "name": "mutate",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenBot3.get_random_node_instance": {
            "name": "get_random_node_instance",
            "location": 135,
            "return": [
                "int",
                "List[str]",
                "str",
                "dict[, ]",
                "list[int]",
                "mypy.nodes.AssignmentStmt",
                "list[list[int]]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenBot3.process": {
            "name": "process",
            "location": 144,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "List[float]"
                ],
                "available_moves": [
                    "List[float]"
                ]
            }
        }
    },
    "spnaughts-master/bots/genbot3/nodebase.py": {
        "NodeBase.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeBase.add_input_node": {
            "name": "add_input_node",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[str]",
                    "list[str]",
                    "int",
                    "list",
                    "list[]"
                ]
            }
        },
        "NodeBase.process": {
            "name": "process",
            "location": 20,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "NodeBase.update": {
            "name": "update",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeBase2.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "spnaughts-master/bots/genbot3/nodes.py": {
        "NODE_INPUT.set_value": {
            "name": "set_value",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bytes",
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "Iterable[Any]"
                ]
            }
        },
        "NODE_NOT.process": {
            "name": "process",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "str",
                    "int",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "NODE_AND.process": {
            "name": "process",
            "location": 38,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "NODE_OR.process": {
            "name": "process",
            "location": 46,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "NODE_XOR.process": {
            "name": "process",
            "location": 54,
            "return": [
                "int",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "NODE_NAND.process": {
            "name": "process",
            "location": 65,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "NODE_NOR.process": {
            "name": "process",
            "location": 76,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "NODE_XNOR.process": {
            "name": "process",
            "location": 87,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "NODE_OUTPUT.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NODE_OUTPUT.process": {
            "name": "process",
            "location": 112,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "spnaughts-master/bots/genbot3/__init__.py": {},
    "spnaughts-master/bots/nbot1/nbot1.py": {
        "NBot1.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NBot1.recipe": {
            "name": "recipe",
            "location": 27,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NBot1.get_state": {
            "name": "get_state",
            "location": 32,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NBot1.set_state": {
            "name": "set_state",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "NBot1.create": {
            "name": "create",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_info": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "NBot1.create_from_recipe": {
            "name": "create_from_recipe",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_count": [
                    "int"
                ]
            }
        },
        "NBot1.mutate": {
            "name": "mutate",
            "location": 96,
            "return": [
                "NBot1"
            ],
            "arguments": {
                "self": [
                    "_TNBot1"
                ]
            }
        },
        "NBot1.process": {
            "name": "process",
            "location": 109,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "List[float]"
                ],
                "available_moves": [
                    "List[float]"
                ]
            }
        }
    },
    "spnaughts-master/bots/nbot1/neurons.py": {
        "sigmoid": {
            "name": "sigmoid",
            "location": 7,
            "return": [
                "float",
                "bool",
                "Optional[Any]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "InputNeuron.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InputNeuron.process": {
            "name": "process",
            "location": 19,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Neuron.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Neuron.generate": {
            "name": "generate",
            "location": 36,
            "return": [
                "Neuron"
            ],
            "arguments": {
                "parent_nodes": [
                    "int",
                    "Optional[List[str]]",
                    "Sequence[int]",
                    "List[int]",
                    "Sequence[T]"
                ]
            }
        },
        "Neuron.from_dict": {
            "name": "from_dict",
            "location": 48,
            "return": [
                "Neuron"
            ],
            "arguments": {
                "d": [
                    "dict[, ]",
                    "dict",
                    "str",
                    "type"
                ],
                "parent_nodes": [
                    "list[typing.Union[int,str,str,str,str,str,str,str]]",
                    "str",
                    "int",
                    "List[int]",
                    "T"
                ]
            }
        },
        "Neuron.to_dict": {
            "name": "to_dict",
            "location": 59,
            "return": [
                "Dict[(str, Union[(int, List[nothing])])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Neuron.process": {
            "name": "process",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NeuronLayer.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NeuronLayer.generate": {
            "name": "generate",
            "location": 81,
            "return": [
                "NeuronLayer"
            ],
            "arguments": {
                "num_nodes": [
                    "int",
                    "str"
                ],
                "parent_nodes": [
                    "bool",
                    "typing.Match",
                    "int",
                    "list[str]",
                    "Match",
                    "List[str]"
                ]
            }
        },
        "NeuronLayer.from_dict": {
            "name": "from_dict",
            "location": 89,
            "return": [
                "NeuronLayer"
            ],
            "arguments": {
                "d": [
                    "dict[, ]",
                    "T",
                    "float",
                    "dict",
                    "list",
                    "str"
                ],
                "parent_nodes": [
                    "float",
                    "T",
                    "dict[, ]",
                    "str",
                    "list[]",
                    "dict",
                    "list"
                ]
            }
        },
        "NeuronLayer.to_dict": {
            "name": "to_dict",
            "location": 95,
            "return": [
                "Dict[(str, List[nothing])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NeuronLayer.process": {
            "name": "process",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "spnaughts-master/bots/nbot1/__init__.py": {},
    "spnaughts-master/bots/omnibot/omnibot.py": {
        "OmniBot.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OmniBot.process_magic": {
            "name": "process_magic",
            "location": 23,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "List[float]"
                ],
                "available_moves": [
                    "List[float]"
                ]
            }
        }
    },
    "spnaughts-master/bots/omnibot/__init__.py": {},
    "spnaughts-master/bots/randombot/randombot.py": {
        "RandomBot.process": {
            "name": "process",
            "location": 18,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "List[float]"
                ],
                "available_moves": [
                    "List[float]"
                ]
            }
        }
    },
    "spnaughts-master/bots/randombot/__init__.py": {},
    "spnaughts-master/doc/conf.py": {},
    "spnaughts-master/games/connect4/singlegame.py": {
        "SingleGame.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None",
                "Dict[str, Dict[str, int]]",
                "str",
                "Dict[str, Any]",
                "Union[tuple, list]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SingleGame.set_initial_state": {
            "name": "set_initial_state",
            "location": 24,
            "return": [
                "None",
                "str",
                "dict",
                "Optional[Union[Any, str]]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SingleGame.set_state": {
            "name": "set_state",
            "location": 29,
            "return": [
                "None",
                "Iterable[Mapping[str, Any]]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "dict[, ]",
                    "dict",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "T"
                ]
            }
        },
        "SingleGame.get_state": {
            "name": "get_state",
            "location": 35,
            "return": [
                "dict[typing.Text, ]",
                "int",
                "bool",
                "List[str]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SingleGame.get_inputs": {
            "name": "get_inputs",
            "location": 40,
            "return": [
                "tuple[list[float]]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "identity": [
                    "str"
                ]
            }
        },
        "SingleGame.update": {
            "name": "update",
            "location": 61,
            "return": [
                "None",
                "str",
                "Set[str]",
                "DefaultDict"
            ],
            "arguments": {
                "self": [],
                "identity": [
                    "float",
                    "str",
                    "bytes"
                ],
                "output": [
                    "List[str]",
                    "list[str]",
                    "str",
                    "IO",
                    "typing.IO",
                    "Optional[bool]",
                    "bool",
                    "None"
                ]
            }
        },
        "SingleGame.is_ended": {
            "name": "is_ended",
            "location": 84,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SingleGame.get_result": {
            "name": "get_result",
            "location": 89,
            "return": [
                "GameResult",
                "str",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SingleGame.calculate_score": {
            "name": "calculate_score",
            "location": 120,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "num_turns": [
                    "int",
                    "Optional[int]"
                ],
                "outcome": [
                    "int",
                    "float",
                    "Optional[int]",
                    "List[float]"
                ]
            }
        }
    },
    "spnaughts-master/games/connect4/world.py": {
        "World.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "World.to_dict": {
            "name": "to_dict",
            "location": 22,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "World.from_dict": {
            "name": "from_dict",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "World.copy": {
            "name": "copy",
            "location": 31,
            "return": [
                "World"
            ],
            "arguments": {
                "self": [
                    "_TWorld"
                ]
            }
        },
        "World.getat": {
            "name": "getat",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "col": [
                    "int"
                ],
                "row": [
                    "int"
                ]
            }
        },
        "World.setat_raw": {
            "name": "setat_raw",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "col": [
                    "int"
                ],
                "row": [
                    "int"
                ],
                "turn": [
                    "str"
                ]
            }
        },
        "World.setat": {
            "name": "setat",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "col": [
                    "int"
                ],
                "turn": [
                    "str"
                ]
            }
        },
        "World.show": {
            "name": "show",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "indent": [
                    "int"
                ]
            }
        },
        "World.get_game_state": {
            "name": "get_game_state",
            "location": 91,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "World.is_ended": {
            "name": "is_ended",
            "location": 148,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "World.get_winner": {
            "name": "get_winner",
            "location": 152,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "World.get_possible_moves": {
            "name": "get_possible_moves",
            "location": 163,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "spnaughts-master/games/connect4/__init__.py": {},
    "spnaughts-master/games/connect4/bots/connect4bot.py": {
        "Connect4Bot.other_identity": {
            "name": "other_identity",
            "location": 23,
            "return": [
                "typing.Text",
                "int",
                "bool",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Connect4Bot.process": {
            "name": "process",
            "location": 29,
            "return": [
                "float",
                "str",
                "List[List[str]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "List[float]"
                ],
                "available_moves": [
                    "List[float]"
                ]
            }
        },
        "Connect4Bot.do_turn": {
            "name": "do_turn",
            "location": 50,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "current_world": [
                    "games.connect4.world.World"
                ]
            }
        },
        "Connect4Bot.show_result": {
            "name": "show_result",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Optional[dict]",
                    "dict[, ]",
                    "bytes",
                    "bool",
                    "None",
                    "Set[str]",
                    "set[str]"
                ]
            }
        }
    },
    "spnaughts-master/games/connect4/bots/__init__.py": {},
    "spnaughts-master/games/connect4/bots/human/human.py": {
        "Human.do_turn": {
            "name": "do_turn",
            "location": 17,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "current_world": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "Human.show_result": {
            "name": "show_result",
            "location": 38,
            "return": [
                "None",
                "Optional[bool]",
                "Dict[str, Any]",
                "Set[VT]",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "T",
                    "dict[, ]",
                    "list[str]",
                    "dict",
                    "List[str]"
                ]
            }
        }
    },
    "spnaughts-master/games/connect4/bots/human/__init__.py": {},
    "spnaughts-master/games/naughts/board.py": {
        "Board.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Board.to_dict": {
            "name": "to_dict",
            "location": 20,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Board.from_dict": {
            "name": "from_dict",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "Board.copy": {
            "name": "copy",
            "location": 29,
            "return": [
                "Board"
            ],
            "arguments": {
                "self": [
                    "_TBoard"
                ]
            }
        },
        "Board.getat": {
            "name": "getat",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "int"
                ]
            }
        },
        "Board.setat": {
            "name": "setat",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "int"
                ],
                "turn": [
                    "str"
                ]
            }
        },
        "Board.show": {
            "name": "show",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "indent": [
                    "int"
                ]
            }
        },
        "Board.get_game_state": {
            "name": "get_game_state",
            "location": 104,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Board.is_ended": {
            "name": "is_ended",
            "location": 136,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Board.get_winner": {
            "name": "get_winner",
            "location": 140,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Board.getat_multi": {
            "name": "getat_multi",
            "location": 155,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "pos_str": [
                    "str"
                ]
            }
        },
        "Board.get_rotated_board": {
            "name": "get_rotated_board",
            "location": 170,
            "return": [
                "Board"
            ],
            "arguments": {
                "self": [
                    "_TBoard"
                ],
                "rotations": [
                    "int"
                ]
            }
        },
        "Board.get_first_empty_space": {
            "name": "get_first_empty_space",
            "location": 200,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "positions": [
                    "str"
                ]
            }
        },
        "Board.get_possible_moves": {
            "name": "get_possible_moves",
            "location": 209,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "spnaughts-master/games/naughts/singlegame.py": {
        "SingleGame.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None",
                "Dict[str, Dict[str, int]]",
                "str",
                "Dict[str, Any]",
                "Union[tuple, list]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SingleGame.set_initial_state": {
            "name": "set_initial_state",
            "location": 24,
            "return": [
                "None",
                "str",
                "dict",
                "Optional[Union[Any, str]]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SingleGame.set_state": {
            "name": "set_state",
            "location": 29,
            "return": [
                "None",
                "Iterable[Mapping[str, Any]]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "dict[, ]",
                    "dict",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "SingleGame.get_state": {
            "name": "get_state",
            "location": 35,
            "return": [
                "dict[typing.Text, ]",
                "Callable",
                "Optional[int]",
                "T"
            ],
            "arguments": {
                "self": []
            }
        },
        "SingleGame.get_inputs": {
            "name": "get_inputs",
            "location": 39,
            "return": [
                "tuple[list[float]]",
                "str",
                "TextIO",
                "bool"
            ],
            "arguments": {
                "self": [],
                "identity": [
                    "str"
                ]
            }
        },
        "SingleGame.update": {
            "name": "update",
            "location": 57,
            "return": [
                "None",
                "str",
                "Set[str]",
                "DefaultDict"
            ],
            "arguments": {
                "self": [],
                "identity": [
                    "bytes",
                    "int",
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]",
                    "bool"
                ],
                "output": [
                    "bool",
                    "List[str]",
                    "IO",
                    "str",
                    "Optional[bool]"
                ]
            }
        },
        "SingleGame.is_ended": {
            "name": "is_ended",
            "location": 79,
            "return": [
                "str",
                "bool",
                "Iterable[str]",
                "int",
                "T"
            ],
            "arguments": {
                "self": []
            }
        },
        "SingleGame.get_result": {
            "name": "get_result",
            "location": 84,
            "return": [
                "GameResult",
                "str",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SingleGame.calculate_score": {
            "name": "calculate_score",
            "location": 114,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "num_turns": [
                    "int",
                    "Optional[int]"
                ],
                "outcome": [
                    "int",
                    "float",
                    "Optional[int]",
                    "List[float]"
                ]
            }
        }
    },
    "spnaughts-master/games/naughts/__init__.py": {},
    "spnaughts-master/games/naughts/bots/naughtsbot.py": {
        "NaughtsBot.other_identity": {
            "name": "other_identity",
            "location": 23,
            "return": [
                "typing.Text",
                "int",
                "bool",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NaughtsBot.process": {
            "name": "process",
            "location": 29,
            "return": [
                "float",
                "str",
                "List[List[str]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "List[float]"
                ],
                "available_moves": [
                    "List[float]"
                ]
            }
        },
        "NaughtsBot.do_turn": {
            "name": "do_turn",
            "location": 46,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "current_board": [
                    "games.naughts.board.Board"
                ]
            }
        },
        "NaughtsBot.show_result": {
            "name": "show_result",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Optional[dict]",
                    "dict[, ]",
                    "bytes",
                    "bool",
                    "None",
                    "Set[str]",
                    "set[str]"
                ]
            }
        },
        "NaughtsBot.get_sequence_info": {
            "name": "get_sequence_info",
            "location": 59,
            "return": [
                "Tuple[(List[int], List[int], List[int])]"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "games.naughts.board.Board"
                ],
                "sequence": [
                    "str"
                ]
            }
        },
        "NaughtsBot.get_unrotated_move": {
            "name": "get_unrotated_move",
            "location": 90,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "move": [
                    "int"
                ],
                "rotations": [
                    "int"
                ]
            }
        }
    },
    "spnaughts-master/games/naughts/bots/__init__.py": {},
    "spnaughts-master/games/naughts/bots/genbot1/genbot1.py": {
        "GenBot1.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenBot1.get_recipe": {
            "name": "get_recipe",
            "location": 88,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenBot1.get_state": {
            "name": "get_state",
            "location": 104,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenBot1.set_state": {
            "name": "set_state",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "GenBot1.create": {
            "name": "create",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_info": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "GenBot1.create_from_recipe": {
            "name": "create_from_recipe",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "recipe": [
                    "str"
                ]
            }
        },
        "GenBot1.mutate": {
            "name": "mutate",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenBot1.get_random_node_instance": {
            "name": "get_random_node_instance",
            "location": 193,
            "return": [
                "int",
                "List[str]",
                "str",
                "dict[, ]",
                "list[int]",
                "mypy.nodes.AssignmentStmt",
                "list[list[int]]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenBot1.do_turn": {
            "name": "do_turn",
            "location": 202,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "current_board": [
                    "games.naughts.board.Board"
                ]
            }
        }
    },
    "spnaughts-master/games/naughts/bots/genbot1/nodebase.py": {
        "NodeBase.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None",
                "Dict[str, Dict[str, int]]",
                "str",
                "Dict[str, Any]",
                "Union[tuple, list]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeBase.add_input_node": {
            "name": "add_input_node",
            "location": 15,
            "return": [
                "None",
                "str",
                "Sequence[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[str]",
                    "list[str]",
                    "int",
                    "list",
                    "list[]"
                ]
            }
        },
        "NodeBase.process": {
            "name": "process",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "NodeBase.update": {
            "name": "update",
            "location": 24,
            "return": [
                "None",
                "str",
                "Set[str]",
                "DefaultDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeBase2.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None",
                "Dict[str, Dict[str, int]]",
                "str",
                "Dict[str, Any]",
                "Union[tuple, list]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "spnaughts-master/games/naughts/bots/genbot1/nodes.py": {
        "NODE_INPUT.set_value": {
            "name": "set_value",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bytes",
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "Iterable[Any]"
                ]
            }
        },
        "NODE_NOT.process": {
            "name": "process",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "str",
                    "int",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "NODE_AND.process": {
            "name": "process",
            "location": 42,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "NODE_OR.process": {
            "name": "process",
            "location": 50,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "NODE_XOR.process": {
            "name": "process",
            "location": 58,
            "return": [
                "int",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "NODE_NAND.process": {
            "name": "process",
            "location": 69,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "NODE_NOR.process": {
            "name": "process",
            "location": 80,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "NODE_XNOR.process": {
            "name": "process",
            "location": 91,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "NODE_OUTPUT.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NODE_OUTPUT.process": {
            "name": "process",
            "location": 116,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "spnaughts-master/games/naughts/bots/genbot1/__init__.py": {},
    "spnaughts-master/games/naughts/bots/genbot2/genbot2.py": {
        "GenBot2.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenBot2.get_recipe": {
            "name": "get_recipe",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenBot2.get_state": {
            "name": "get_state",
            "location": 38,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenBot2.set_state": {
            "name": "set_state",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "GenBot2.create": {
            "name": "create",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_info": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "GenBot2.create_from_recipe": {
            "name": "create_from_recipe",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "recipe": [
                    "str",
                    "Callable[[T], bool]",
                    "Callable",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "GenBot2.mutate": {
            "name": "mutate",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenBot2.get_random_node_instance": {
            "name": "get_random_node_instance",
            "location": 139,
            "return": [
                "int",
                "List[str]",
                "str",
                "dict[, ]",
                "list[int]",
                "mypy.nodes.AssignmentStmt",
                "list[list[int]]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenBot2.do_turn": {
            "name": "do_turn",
            "location": 148,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "current_board": [
                    "games.naughts.board.Board"
                ]
            }
        }
    },
    "spnaughts-master/games/naughts/bots/genbot2/nodebase.py": {
        "NodeBase.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeBase.add_input_node": {
            "name": "add_input_node",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[str]",
                    "list[str]",
                    "int",
                    "list",
                    "list[]"
                ]
            }
        },
        "NodeBase.process": {
            "name": "process",
            "location": 20,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "NodeBase.update": {
            "name": "update",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeBase2.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "spnaughts-master/games/naughts/bots/genbot2/nodes.py": {
        "NODE_INPUT.set_value": {
            "name": "set_value",
            "location": 21,
            "return": [
                "None",
                "int",
                "Set[str]",
                "Set[VT]",
                "tuple",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bytes",
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "Iterable[Any]"
                ]
            }
        },
        "NODE_NOT.process": {
            "name": "process",
            "location": 30,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "str",
                    "int",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "NODE_AND.process": {
            "name": "process",
            "location": 38,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "NODE_OR.process": {
            "name": "process",
            "location": 46,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "NODE_XOR.process": {
            "name": "process",
            "location": 54,
            "return": [
                "int",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "NODE_NAND.process": {
            "name": "process",
            "location": 65,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "NODE_NOR.process": {
            "name": "process",
            "location": 76,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "NODE_XNOR.process": {
            "name": "process",
            "location": 87,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "NODE_OUTPUT.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [
                "None",
                "Dict[str, Dict[str, int]]",
                "str",
                "Dict[str, Any]",
                "Union[tuple, list]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NODE_OUTPUT.process": {
            "name": "process",
            "location": 112,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "spnaughts-master/games/naughts/bots/genbot2/__init__.py": {},
    "spnaughts-master/games/naughts/bots/genbotcontrol/genbotcontrol.py": {
        "GenBotControl.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenBotControl.do_turn": {
            "name": "do_turn",
            "location": 30,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "current_board": [
                    "games.naughts.board.Board"
                ]
            }
        }
    },
    "spnaughts-master/games/naughts/bots/genbotcontrol/__init__.py": {},
    "spnaughts-master/games/naughts/bots/human/human.py": {
        "HUMAN.do_turn": {
            "name": "do_turn",
            "location": 17,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "current_board": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "HUMAN.show_result": {
            "name": "show_result",
            "location": 38,
            "return": [
                "None",
                "Optional[bool]",
                "Dict[str, Any]",
                "Set[VT]",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "T",
                    "dict[, ]",
                    "list[str]",
                    "dict",
                    "List[str]"
                ]
            }
        }
    },
    "spnaughts-master/games/naughts/bots/human/__init__.py": {},
    "spnaughts-master/games/naughts/bots/minimaxbot/minimaxbot.py": {
        "MinimaxBot.do_turn": {
            "name": "do_turn",
            "location": 22,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "current_board": [
                    "games.naughts.board.Board"
                ]
            }
        },
        "MinimaxBot.get_board_score": {
            "name": "get_board_score",
            "location": 74,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "test_board": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "MinimaxBot.alphabeta": {
            "name": "alphabeta",
            "location": 87,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "node_board": [
                    "Type"
                ],
                "turn": [
                    "int",
                    "bytes"
                ],
                "alpha": [
                    "int",
                    "typing.Iterable[typing.Any]",
                    "Iterable[Any]",
                    "Set[str]",
                    "set",
                    "bool",
                    "bytearray"
                ],
                "beta": [
                    "int",
                    "typing.Iterable[typing.Any]",
                    "Iterable[Any]",
                    "Set[str]",
                    "set",
                    "deque"
                ],
                "depth": [
                    "int",
                    "Set[str]",
                    "Iterable[Any]"
                ]
            }
        },
        "MinimaxBot.get_opponent": {
            "name": "get_opponent",
            "location": 126,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "me": [
                    "str"
                ]
            }
        }
    },
    "spnaughts-master/games/naughts/bots/minimaxbot/__init__.py": {},
    "spnaughts-master/games/naughts/bots/perfectbot/perfectbot.py": {
        "PerfectBot.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PerfectBot.setup": {
            "name": "setup",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PerfectBot.do_turn": {
            "name": "do_turn",
            "location": 69,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "current_board": [
                    "games.naughts.board.Board"
                ]
            }
        }
    },
    "spnaughts-master/games/naughts/bots/perfectbot/__init__.py": {},
    "spnaughts-master/games/naughts/bots/simplebot/simplebot.py": {
        "SimpleBot.do_turn": {
            "name": "do_turn",
            "location": 16,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "current_board": [
                    "games.naughts.board.Board"
                ]
            }
        }
    },
    "spnaughts-master/games/naughts/bots/simplebot/__init__.py": {},
    "spnaughts-master/lib/batch.py": {
        "Batch.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bots": [
                    "List[lib.gameplayer.GamePlayer]"
                ],
                "batch_config": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "Batch.run_batch": {
            "name": "run_batch",
            "location": 56,
            "return": [
                "lib.gameresult.GameResult"
            ],
            "arguments": {
                "self": []
            }
        },
        "Batch.start_batch": {
            "name": "start_batch",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Batch.process_game_result": {
            "name": "process_game_result",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "lib.gameresult.GameResult"
                ]
            }
        },
        "Batch.process_batch_result": {
            "name": "process_batch_result",
            "location": 91,
            "return": [
                "lib.gameresult.GameResult"
            ],
            "arguments": {
                "self": []
            }
        },
        "Batch.run_normal_batch": {
            "name": "run_normal_batch",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Batch.run_magic_batch": {
            "name": "run_magic_batch",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "spnaughts-master/lib/botfactory.py": {
        "BotFactory.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "lib.gamecontext.GameContext"
                ],
                "bot_config": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "BotFactory._get_bot_class": {
            "name": "_get_bot_class",
            "location": 39,
            "return": [
                "Optional[Callable]"
            ],
            "arguments": {
                "self": [],
                "module_name": [
                    "str"
                ]
            }
        },
        "BotFactory.create_bot": {
            "name": "create_bot",
            "location": 70,
            "return": [
                "lib.gameplayer.GamePlayer"
            ],
            "arguments": {
                "self": [],
                "module_name": [
                    "str"
                ]
            }
        },
        "BotFactory.create_bot_from_class": {
            "name": "create_bot_from_class",
            "location": 78,
            "return": [
                "lib.gameplayer.GamePlayer"
            ],
            "arguments": {
                "self": [],
                "class_type": [
                    "Callable"
                ]
            }
        },
        "BotFactory.create_bots": {
            "name": "create_bots",
            "location": 83,
            "return": [
                "List[lib.gameplayer.GamePlayer]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BotFactory.clone_bots": {
            "name": "clone_bots",
            "location": 112,
            "return": [
                "List[lib.gameplayer.GamePlayer]"
            ],
            "arguments": {
                "self": [],
                "existing_bots": [
                    "List[lib.gameplayer.GamePlayer]"
                ]
            }
        }
    },
    "spnaughts-master/lib/errors.py": {},
    "spnaughts-master/lib/gamebase.py": {
        "GameBase.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameBase.get_game_info": {
            "name": "get_game_info",
            "location": 34,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "GameBase.current_identity": {
            "name": "current_identity",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameBase.set_bots": {
            "name": "set_bots",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bots": [
                    "List[lib.gameplayer.GamePlayer]"
                ]
            }
        },
        "GameBase.start": {
            "name": "start",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bots": [
                    "List[lib.gameplayer.GamePlayer]"
                ]
            }
        },
        "GameBase.load_from_state": {
            "name": "load_from_state",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bots": [
                    "List[lib.gameplayer.GamePlayer]"
                ],
                "state": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "GameBase.do_turn": {
            "name": "do_turn",
            "location": 77,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameBase.process_result": {
            "name": "process_result",
            "location": 112,
            "return": [
                "lib.gameresult.GameResult"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameBase.run": {
            "name": "run",
            "location": 120,
            "return": [
                "lib.gameresult.GameResult"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameBase.to_dict": {
            "name": "to_dict",
            "location": 126,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "include_bots": [
                    "bool"
                ]
            }
        },
        "GameBase.from_dict": {
            "name": "from_dict",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "Dict[(str, Any)]"
                ],
                "include_bots": [
                    "bool"
                ]
            }
        },
        "GameBase.set_initial_state": {
            "name": "set_initial_state",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameBase.set_state": {
            "name": "set_state",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "GameBase.get_state": {
            "name": "get_state",
            "location": 166,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameBase.get_inputs": {
            "name": "get_inputs",
            "location": 170,
            "return": [
                "Tuple[(List[float], List[float])]"
            ],
            "arguments": {
                "self": [],
                "identity": [
                    "str"
                ]
            }
        },
        "GameBase.update": {
            "name": "update",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identity": [
                    "str"
                ],
                "output": [
                    "float"
                ]
            }
        },
        "GameBase.is_ended": {
            "name": "is_ended",
            "location": 178,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameBase.get_result": {
            "name": "get_result",
            "location": 182,
            "return": [
                "lib.gameresult.GameResult"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "spnaughts-master/lib/gameconfig.py": {
        "quit_game": {
            "name": "quit_game",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "str"
                ]
            }
        },
        "check_int1plus": {
            "name": "check_int1plus",
            "location": 29,
            "return": [
                "int"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        },
        "check_int0plus": {
            "name": "check_int0plus",
            "location": 42,
            "return": [
                "int"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        },
        "GameConfig.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_path": [
                    "str"
                ]
            }
        },
        "GameConfig.bot_names": {
            "name": "bot_names",
            "location": 88,
            "return": [
                "list[]",
                "str",
                "int",
                "Dict[str, Any]",
                "Container[str]",
                "bool",
                "Union[List, Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameConfig.define_args": {
            "name": "define_args",
            "location": 93,
            "return": [
                "argparse.Namespace"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameConfig.parse_args": {
            "name": "parse_args",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [
                    "argparse.Namespace"
                ]
            }
        },
        "GameConfig.init_logging": {
            "name": "init_logging",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameConfig.get_batch_config": {
            "name": "get_batch_config",
            "location": 225,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameConfig.get_bot_config": {
            "name": "get_bot_config",
            "location": 235,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "spnaughts-master/lib/gamecontext.py": {
        "GameContext.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameContext.log": {
            "name": "log",
            "location": 32,
            "return": [
                "LogHandler",
                "str",
                "list",
                "float",
                "Dict[str, Any]",
                "tuple",
                "Callable[..., None]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "spnaughts-master/lib/gamefactory.py": {
        "GameFactory.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "lib.gamecontext.GameContext"
                ]
            }
        },
        "GameFactory.get_game_class": {
            "name": "get_game_class",
            "location": 26,
            "return": [
                "Type[lib.gamebase.GameBase]"
            ],
            "arguments": {
                "self": [],
                "game": [
                    "str"
                ]
            }
        },
        "GameFactory.get_game_obj": {
            "name": "get_game_obj",
            "location": 39,
            "return": [
                "lib.gamebase.GameBase"
            ],
            "arguments": {
                "self": [],
                "game": [
                    "str"
                ]
            }
        }
    },
    "spnaughts-master/lib/gameplayer.py": {
        "GamePlayer.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GamePlayer.clone_from": {
            "name": "clone_from",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "GamePlayer"
                ]
            }
        },
        "GamePlayer.score": {
            "name": "score",
            "location": 44,
            "return": [
                "Union[tuple, list]",
                "int",
                "str",
                "List[int]",
                "Dict[str, Any]",
                "set[str]",
                "dict[str, list[str]]",
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "GamePlayer.clear_score": {
            "name": "clear_score",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GamePlayer.label": {
            "name": "label",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GamePlayer.set_data": {
            "name": "set_data",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "str",
                    "VT",
                    "KT"
                ]
            }
        },
        "GamePlayer.get_data": {
            "name": "get_data",
            "location": 64,
            "return": [
                "str",
                "Dict[str, Any]",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "default": [
                    "str",
                    "None",
                    "KT",
                    "T"
                ]
            }
        },
        "GamePlayer.to_dict": {
            "name": "to_dict",
            "location": 68,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GamePlayer.from_dict": {
            "name": "from_dict",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "GamePlayer.get_state": {
            "name": "get_state",
            "location": 81,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GamePlayer.set_state": {
            "name": "set_state",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "GamePlayer.create": {
            "name": "create",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_info": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "GamePlayer.mutate": {
            "name": "mutate",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GamePlayer.setup": {
            "name": "setup",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GamePlayer.process": {
            "name": "process",
            "location": 102,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "List[float]"
                ],
                "available_moves": [
                    "List[float]"
                ]
            }
        },
        "GamePlayer.process_magic": {
            "name": "process_magic",
            "location": 106,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "List[float]"
                ],
                "available_moves": [
                    "List[float]"
                ]
            }
        },
        "GamePlayer.show_result": {
            "name": "show_result",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Optional[dict]",
                    "dict[, ]",
                    "bytes",
                    "bool",
                    "None",
                    "Set[str]",
                    "set[str]"
                ]
            }
        }
    },
    "spnaughts-master/lib/gameresult.py": {
        "GameResult.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameResult.__repr__": {
            "name": "__repr__",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameResult.__str__": {
            "name": "__str__",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameResult.set_score": {
            "name": "set_score",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identity": [
                    "str"
                ],
                "score": [
                    "float"
                ]
            }
        },
        "GameResult.get_score": {
            "name": "get_score",
            "location": 42,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "identity": [
                    "str"
                ]
            }
        },
        "GameResult.get_winner": {
            "name": "get_winner",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameResult.set_win": {
            "name": "set_win",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameResult.set_tie": {
            "name": "set_tie",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameResult.set_batch": {
            "name": "set_batch",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameResult.is_win": {
            "name": "is_win",
            "location": 71,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameResult.is_tie": {
            "name": "is_tie",
            "location": 75,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameResult.is_batch": {
            "name": "is_batch",
            "location": 79,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "spnaughts-master/lib/globals.py": {
        "set_default_log": {
            "name": "set_default_log",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "log_handler": [
                    "lib.log.LogHandler"
                ]
            }
        },
        "log_trace": {
            "name": "log_trace",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "log_debug": {
            "name": "log_debug",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "log_info": {
            "name": "log_info",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "log_warning": {
            "name": "log_warning",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "log_error": {
            "name": "log_error",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "log_critical": {
            "name": "log_critical",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "time_this": {
            "name": "time_this",
            "location": 66,
            "return": [
                "Callable"
            ],
            "arguments": {
                "func": [
                    "Callable"
                ]
            }
        },
        "timer": {
            "name": "timer",
            "location": 79,
            "return": [
                "typing.Generator[]",
                "Union[tuple, list]",
                "None",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "label": [
                    "str"
                ]
            }
        },
        "time_this.inner": {
            "name": "inner",
            "location": 67,
            "return": [
                "bool",
                "List[str]",
                "Set[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        }
    },
    "spnaughts-master/lib/log.py": {
        "get_lines": {
            "name": "get_lines",
            "location": 29,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "Union[(str, List[str])]"
                ]
            }
        },
        "LogHandler.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogHandler.is_enabled": {
            "name": "is_enabled",
            "location": 66,
            "return": [
                "bool",
                "str",
                "int",
                "Optional[int]",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogHandler.log_to_file": {
            "name": "log_to_file",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "LogHandler.log_to_console": {
            "name": "log_to_console",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogHandler.set_as_default": {
            "name": "set_as_default",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogHandler.get_log_obj": {
            "name": "get_log_obj",
            "location": 114,
            "return": [
                "Optional[logging.Logger]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogHandler.log_it": {
            "name": "log_it",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "loglevel": [
                    "str"
                ]
            }
        },
        "LogHandler.trace": {
            "name": "trace",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "LogHandler.debug": {
            "name": "debug",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "LogHandler.info": {
            "name": "info",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "LogHandler.warning": {
            "name": "warning",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "LogHandler.error": {
            "name": "error",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "LogHandler.critical": {
            "name": "critical",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        }
    },
    "spnaughts-master/lib/__init__.py": {},
    "spnaughts-master/lib/runners/batchrunner.py": {
        "BatchRunner.run": {
            "name": "run",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "spnaughts-master/lib/runners/gamerunnerbase.py": {
        "GameRunnerBase.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "lib.gameconfig.GameConfig"
                ]
            }
        },
        "GameRunnerBase.run": {
            "name": "run",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "spnaughts-master/lib/runners/geneticrunner.py": {
        "GeneticRunner.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "lib.gameconfig.GameConfig"
                ]
            }
        },
        "GeneticRunner.setup": {
            "name": "setup",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeneticRunner.run": {
            "name": "run",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeneticRunner.generate_samples": {
            "name": "generate_samples",
            "location": 183,
            "return": [
                "Iterator[lib.gameplayer.GamePlayer]"
            ],
            "arguments": {
                "self": [],
                "input_samples": [
                    "List[lib.gameplayer.GamePlayer]"
                ],
                "generation": [
                    "int"
                ]
            }
        },
        "GeneticRunner.generate_original_samples": {
            "name": "generate_original_samples",
            "location": 213,
            "return": [
                "Iterator[lib.gameplayer.GamePlayer]"
            ],
            "arguments": {
                "self": [],
                "generation": [
                    "int"
                ],
                "count": [
                    "int"
                ]
            }
        },
        "GeneticRunner.select_samples": {
            "name": "select_samples",
            "location": 229,
            "return": [
                "List[lib.gameplayer.GamePlayer]"
            ],
            "arguments": {
                "self": [],
                "sorted_pool": [
                    "List[lib.gameplayer.GamePlayer]"
                ]
            }
        }
    },
    "spnaughts-master/lib/runners/singlerunner.py": {
        "SingleRunner.run": {
            "name": "run",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "spnaughts-master/lib/runners/__init__.py": {},
    "spnaughts-master/lib/runners/genetic/batchworker.py": {
        "BatchWorker.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_batches": [
                    "List[lib.batch.Batch]"
                ],
                "q_out": [
                    "multiprocessing.queues.Queue"
                ],
                "score_threshold": [
                    "float"
                ]
            }
        },
        "BatchWorker.run": {
            "name": "run",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BatchWorkerIsolated.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_batch_data": [
                    "List[Dict[(str, Any)]]"
                ],
                "q_out": [
                    "multiprocessing.queues.Queue"
                ],
                "score_threshold": [
                    "float"
                ]
            }
        },
        "BatchWorkerIsolated.run": {
            "name": "run",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "spnaughts-master/lib/runners/genetic/processor.py": {
        "Processor.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "lib.gamecontext.GameContext"
                ],
                "other_bot": [
                    "lib.gameplayer.GamePlayer"
                ],
                "genetic_index": [
                    "int"
                ],
                "batch_config": [
                    "Dict[(str, Any)]"
                ],
                "rabbit": [
                    "Optional[lib.runners.genetic.rabbit.RabbitManager]"
                ]
            }
        },
        "Processor.run": {
            "name": "run",
            "location": 33,
            "return": [
                "Iterator[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "samples": [
                    "Iterable[lib.gameplayer.GamePlayer]"
                ],
                "generation_index": [
                    "int"
                ],
                "score_threshold": [
                    "float"
                ]
            }
        },
        "ProcessorMP.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "lib.gamecontext.GameContext"
                ],
                "other_bot": [
                    "lib.gameplayer.GamePlayer"
                ],
                "genetic_index": [
                    "int"
                ],
                "batch_config": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "ProcessorMP.run": {
            "name": "run",
            "location": 90,
            "return": [
                "Iterator[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "samples": [
                    "Iterable[lib.gameplayer.GamePlayer]"
                ],
                "generation_index": [
                    "int"
                ],
                "score_threshold": [
                    "float"
                ]
            }
        },
        "ProcessorRabbit.run": {
            "name": "run",
            "location": 153,
            "return": [
                "Iterator[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "samples": [
                    "Iterable[lib.gameplayer.GamePlayer]"
                ],
                "generation_index": [
                    "int"
                ],
                "score_threshold": [
                    "float"
                ]
            }
        }
    },
    "spnaughts-master/lib/runners/genetic/rabbit.py": {
        "RabbitManager.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str"
                ],
                "username": [
                    "str"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "RabbitManager.connection": {
            "name": "connection",
            "location": 41,
            "return": [
                "int",
                "str",
                "Callable",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "RabbitManager.channel": {
            "name": "channel",
            "location": 56,
            "return": [
                "str",
                "tuple[]",
                "typing.Generator[typing.Union[typing.Any,None,None]]",
                "float",
                "dict[str, typing.Any]",
                "list[tuple[typing.Union[str,typing.Any]]]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "RabbitManager.init_queues": {
            "name": "init_queues",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RabbitManager.consume_batch_queue": {
            "name": "consume_batch_queue",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable"
                ]
            }
        },
        "RabbitManager.get_from_output_queue": {
            "name": "get_from_output_queue",
            "location": 87,
            "return": [
                "Optional[Tuple[(str, Dict[(str, Any)])]]"
            ],
            "arguments": {
                "self": [],
                "qid": [
                    "str"
                ]
            }
        },
        "RabbitManager.done_message": {
            "name": "done_message",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "delivery_tag": [
                    "str"
                ]
            }
        },
        "RabbitManager.put_on_batch_queue": {
            "name": "put_on_batch_queue",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "body": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "RabbitManager.put_on_output_exchange": {
            "name": "put_on_output_exchange",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qid": [
                    "str"
                ],
                "body": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "RabbitManager.create_output_queue": {
            "name": "create_output_queue",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qid": [
                    "str"
                ]
            }
        },
        "RabbitManager.delete_output_queue": {
            "name": "delete_output_queue",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qid": [
                    "str"
                ]
            }
        }
    },
    "spnaughts-master/lib/runners/genetic/rabbitbatchworker.py": {
        "run_one_batch": {
            "name": "run_one_batch",
            "location": 10,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "batch_data": [
                    "Dict[(str, Any)]"
                ]
            }
        }
    },
    "spnaughts-master/lib/runners/genetic/__init__.py": {},
    "spnaughts-master/lib/support/botdb.py": {
        "BotDB.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BotDB.insert_bot": {
            "name": "insert_bot",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "bot_name": [
                    "str"
                ],
                "bot_dict": [
                    "Dict[(str, Any)]"
                ],
                "score": [
                    "float"
                ]
            }
        },
        "BotDB.load_bot": {
            "name": "load_bot",
            "location": 31,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "bot_id": [
                    "str"
                ]
            }
        },
        "BotDB.get_top": {
            "name": "get_top",
            "location": 38,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "bot_name": [
                    "str"
                ],
                "count": [
                    "int"
                ]
            }
        },
        "BotDB.clear_bots": {
            "name": "clear_bots",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bot_name": [
                    "str"
                ]
            }
        }
    },
    "spnaughts-master/lib/support/pathmaker.py": {
        "prefix_datetime": {
            "name": "prefix_datetime",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "prefix": [
                    "str"
                ],
                "add_date": [
                    "bool"
                ],
                "add_time": [
                    "bool"
                ]
            }
        },
        "get_unique_dir": {
            "name": "get_unique_dir",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "base_path": [
                    "str"
                ],
                "prefix": [
                    "str"
                ],
                "add_date": [
                    "bool"
                ],
                "add_time": [
                    "bool"
                ],
                "suffix": [
                    "Optional[str]"
                ]
            }
        },
        "get_unique_filename": {
            "name": "get_unique_filename",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "base_path": [
                    "str"
                ],
                "prefix": [
                    "str"
                ],
                "add_date": [
                    "bool"
                ],
                "add_time": [
                    "bool"
                ],
                "suffix": [
                    "Optional[str]"
                ],
                "text": [
                    "bool"
                ]
            }
        }
    },
    "spnaughts-master/lib/support/__init__.py": {},
    "spnaughts-master/unit_tests/test_board.py": {
        "BoardTest.test_board": {
            "name": "test_board",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
{
    "sprig-master/setup.py": {},
    "sprig-master/docs/conf.py": {},
    "sprig-master/experiments/test_comb_benchmark.py": {
        "test_comb_benchmark": {
            "name": "test_comb_benchmark",
            "location": 7,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "k": [
                    "int",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "sprig-master/experiments/test_sorted_merge.py": {
        "_imerge_recusive": {
            "name": "_imerge_recusive",
            "location": 18,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "iterables": [
                    "str"
                ],
                "key": [
                    "bytes",
                    "str",
                    "int",
                    "memoryview"
                ]
            }
        },
        "imerge_recursive": {
            "name": "imerge_recursive",
            "location": 57,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "iterables": [
                    "str",
                    "int"
                ],
                "key": [
                    "typing.Callable[, ]",
                    "str",
                    "int"
                ]
            }
        },
        "imerge_concat_sort": {
            "name": "imerge_concat_sort",
            "location": 61,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "iterables": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "key": [
                    "typing.Callable[, ]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "test_performance_eager": {
            "name": "test_performance_eager",
            "location": 122,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "func": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]",
                    "bool",
                    "tuple",
                    "tuple[]",
                    "List[Dict[str, str]]",
                    "list[dict[str, str]]"
                ],
                "iterables": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]",
                    "bool",
                    "tuple",
                    "tuple[]",
                    "List[Dict[str, str]]",
                    "list[dict[str, str]]"
                ]
            }
        },
        "test_performance_lazy": {
            "name": "test_performance_lazy",
            "location": 128,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "func": [
                    "typing.Iterable[typing.Any]",
                    "Iterable[Any]",
                    "typing.Callable[, ]",
                    "Callable",
                    "Tuple[str, Any]"
                ],
                "iterables": [
                    "typing.Iterable[typing.Any]",
                    "Iterable[Any]",
                    "typing.Callable[, ]",
                    "Callable",
                    "Tuple[str, Any]"
                ]
            }
        },
        "test_performance_lazy_custom_cpu_bound": {
            "name": "test_performance_lazy_custom_cpu_bound",
            "location": 134,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "str",
                    "typing.Callable[, ]",
                    "bool"
                ],
                "iterables": [
                    "Callable",
                    "str",
                    "typing.Callable[, ]",
                    "bool"
                ]
            }
        },
        "test_performance_lazy_custom_io_bound": {
            "name": "test_performance_lazy_custom_io_bound",
            "location": 140,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "typing.Callable[, ]",
                    "Tuple[str, Any]",
                    "tuple[typing.Union[str,typing.Any]]"
                ],
                "iterables": [
                    "Callable",
                    "typing.Callable[, ]",
                    "Tuple[str, Any]",
                    "tuple[typing.Union[str,typing.Any]]"
                ]
            }
        },
        "List.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "xs": [
                    "int",
                    "Iterable[str]",
                    "Sequence[T]"
                ],
                "io_bound": [
                    "int",
                    "tuple[typing.Union[float,float]]",
                    "Tuple[float, float]",
                    "tuple[int]",
                    "Iterable[List[str]]",
                    "Tuple[int]"
                ]
            }
        },
        "List.__iter__": {
            "name": "__iter__",
            "location": 70,
            "return": [
                "Union[(ListIterCPU, ListIterIO)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListIterIO.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "xs": [
                    "float",
                    "int"
                ]
            }
        },
        "ListIterIO.__next__": {
            "name": "__next__",
            "location": 81,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListIterCPU.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "xs": [
                    "float",
                    "int"
                ]
            }
        },
        "ListIterCPU.__next__": {
            "name": "__next__",
            "location": 90,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sprig-master/src/sprig/comb.py": {
        "comb": {
            "name": "comb",
            "location": 23,
            "return": [
                "int"
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "k": [
                    "int"
                ]
            }
        },
        "IntervalCache.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntervalCache.get": {
            "name": "get",
            "location": 41,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "float"
                ]
            }
        },
        "IntervalCache.set": {
            "name": "set",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lower": [
                    "float"
                ],
                "upper": [
                    "float"
                ],
                "value": [
                    "T"
                ]
            }
        },
        "Combinations.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "Iterable[T]"
                ],
                "k": [
                    "int"
                ]
            }
        },
        "Combinations.__len__": {
            "name": "__len__",
            "location": 75,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Combinations.__str__": {
            "name": "__str__",
            "location": 78,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Combinations.__iter__": {
            "name": "__iter__",
            "location": 96,
            "return": [
                "Iterator[Tuple[(T, ...)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Combinations.__getitem__": {
            "name": "__getitem__",
            "location": 107,
            "return": [
                "Iterable[Tuple[(T, ...)]]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "slice"
                ]
            }
        },
        "Combinations.__contains__": {
            "name": "__contains__",
            "location": 146,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "selection": [
                    "Tuple[(T, ...)]"
                ]
            }
        },
        "Combinations.gen_combinadic": {
            "name": "gen_combinadic",
            "location": 156,
            "return": [
                "Iterator[int]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int"
                ]
            }
        },
        "Combinations.max_n_choose_k_below_limit": {
            "name": "max_n_choose_k_below_limit",
            "location": 178,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "k": [
                    "int"
                ],
                "limit": [
                    "int"
                ]
            }
        },
        "Combinations.clear_cache": {
            "name": "clear_cache",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sprig-master/src/sprig/dictutils.py": {
        "inflate": {
            "name": "inflate",
            "location": 13,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "deflated": [
                    "Dict[(str, Any)]"
                ],
                "sep": [
                    "str"
                ]
            }
        },
        "_set": {
            "name": "_set",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "tree": [
                    "dict",
                    "List[Dict[str, Any]]"
                ],
                "path": [
                    "str",
                    "Dict[str, Any]"
                ],
                "value": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]",
                    "Callable",
                    "typing.Callable[, ]",
                    "OrderedDict",
                    "typing.OrderedDict"
                ]
            }
        },
        "deflate": {
            "name": "deflate",
            "location": 115,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "inflated": [
                    "Dict[(str, Any)]"
                ],
                "sep": [
                    "str"
                ]
            }
        },
        "_walk": {
            "name": "_walk",
            "location": 189,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "tree": [
                    "dict[str, str]",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ],
                "root": [
                    "tuple[typing.Union[int,str]]",
                    "Tuple[int, str]",
                    "dict"
                ],
                "sep": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "group_by": {
            "name": "group_by",
            "location": 212,
            "return": [
                "Dict[(V, List[T])]"
            ],
            "arguments": {
                "iterable": [
                    "Iterable[T]"
                ],
                "keyfunc": [
                    "Callable[([T], V)]"
                ]
            }
        },
        "invert": {
            "name": "invert",
            "location": 230,
            "return": [
                "Dict[(V, T)]"
            ],
            "arguments": {
                "mapping": [
                    "Dict[(T, V)]"
                ]
            }
        }
    },
    "sprig-master/src/sprig/intervals.py": {
        "_subsets": {
            "name": "_subsets",
            "location": 38,
            "return": [
                "Iterator[Tuple[(T, ...)]]"
            ],
            "arguments": {
                "items": [
                    "Collection[T]"
                ]
            }
        },
        "_intersection": {
            "name": "_intersection",
            "location": 56,
            "return": [
                "Tuple[(SupportsLessThanT, SupportsLessThanT)]"
            ],
            "arguments": {
                "intervals": [
                    "Iterable[Tuple[(SupportsLessThanT, SupportsLessThanT)]]"
                ]
            }
        },
        "_endpoints": {
            "name": "_endpoints",
            "location": 73,
            "return": [
                "Iterator[Tuple[(SupportsLessThanT, int, HashableT, Literal[('L', 'R')])]]"
            ],
            "arguments": {
                "intervals": [
                    "Iterable[Tuple[(HashableT, Tuple[(SupportsLessThanT, SupportsLessThanT)])]]"
                ]
            }
        },
        "_intervals": {
            "name": "_intervals",
            "location": 81,
            "return": [
                "Iterator[Tuple[(HashableT, Tuple[(SupportsLessThanT, SupportsLessThanT)])]]"
            ],
            "arguments": {
                "endpoints": [
                    "Iterable[Tuple[(SupportsLessThanT, int, HashableT, Literal[('L', 'R')])]]"
                ]
            }
        },
        "_intersecting_subsets": {
            "name": "_intersecting_subsets",
            "location": 92,
            "return": [
                "Iterator[Tuple[(SupportsLessThanT, int, FrozenSet[HashableT], Literal[('L', 'R')])]]"
            ],
            "arguments": {
                "endpoints": [
                    "Iterable[Tuple[(SupportsLessThanT, int, HashableT, Literal[('L', 'R')])]]"
                ]
            }
        },
        "intersecting_subsets": {
            "name": "intersecting_subsets",
            "location": 108,
            "return": [
                "Dict[(FrozenSet[HashableT], Tuple[(SupportsLessThanT, SupportsLessThanT)])]"
            ],
            "arguments": {
                "intervals": [
                    "Mapping[(HashableT, Tuple[(SupportsLessThanT, SupportsLessThanT)])]"
                ]
            }
        },
        "_intersecting_combinations": {
            "name": "_intersecting_combinations",
            "location": 121,
            "return": [
                "Iterator[Tuple[(SupportsLessThanT, int, FrozenSet[HashableT], Literal[('L', 'R')])]]"
            ],
            "arguments": {
                "endpoints": [
                    "Iterable[Tuple[(SupportsLessThanT, int, HashableT, Literal[('L', 'R')])]]"
                ],
                "k": [
                    "int"
                ]
            }
        },
        "intersecting_combinations": {
            "name": "intersecting_combinations",
            "location": 136,
            "return": [
                "Dict[(FrozenSet[HashableT], Tuple[(SupportsLessThanT, SupportsLessThanT)])]"
            ],
            "arguments": {
                "intervals": [
                    "Mapping[(HashableT, Tuple[(SupportsLessThanT, SupportsLessThanT)])]"
                ],
                "k": [
                    "int"
                ]
            }
        },
        "_intersecting_products": {
            "name": "_intersecting_products",
            "location": 149,
            "return": [
                "Iterator[Tuple[(SupportsLessThanT, int, Tuple[(HashableT, ...)], Literal[('L', 'R')])]]"
            ],
            "arguments": {
                "factored_endpoints": [
                    "Iterable[Tuple[(SupportsLessThanT, int, Tuple[(int, HashableT)], Literal[('L', 'R')])]]"
                ],
                "num_factor": [
                    "int"
                ]
            }
        },
        "intersecting_products": {
            "name": "intersecting_products",
            "location": 169,
            "return": [
                "Mapping[(Sequence[HashableT], Tuple[(SupportsLessThanT, SupportsLessThanT)])]"
            ],
            "arguments": {
                "factors": [
                    "Sequence[Mapping[(HashableT, Tuple[(SupportsLessThanT, SupportsLessThanT)])]]"
                ]
            }
        },
        "auto_intersections": {
            "name": "auto_intersections",
            "location": 194,
            "return": [
                "Dict[(FrozenSet[HashableT], Tuple[(SupportsLessThanT, SupportsLessThanT)])]"
            ],
            "arguments": {
                "intervals": [
                    "Mapping[(HashableT, Tuple[(SupportsLessThanT, SupportsLessThanT)])]"
                ]
            }
        },
        "without_degenerate": {
            "name": "without_degenerate",
            "location": 205,
            "return": [
                "Dict[(HashableT, Tuple[(SupportsLessThanT, SupportsLessThanT)])]"
            ],
            "arguments": {
                "intervals": [
                    "Mapping[(HashableT, Tuple[(SupportsLessThanT, SupportsLessThanT)])]"
                ]
            }
        },
        "SupportsLessThan.__lt__": {
            "name": "__lt__",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "__other": [
                    "SupportsFloat",
                    "list[str]",
                    "List[str]",
                    "int",
                    "Union[int, float]",
                    "float",
                    "AbstractSet[T]",
                    "typing.AbstractSet"
                ]
            }
        }
    },
    "sprig-master/src/sprig/intervals_naive.py": {
        "_intersecting_subsets_naive": {
            "name": "_intersecting_subsets_naive",
            "location": 7,
            "return": [
                "Generator[(Tuple[(frozenset, Tuple[(Any, Any)])], Any, None)]"
            ],
            "arguments": {
                "intervals": [
                    "dict",
                    "dict[, ]",
                    "Dict[Tuple[int, ...], float]",
                    "dict[tuple[typing.Union[int,...]], float]"
                ]
            }
        },
        "intersecting_subsets_naive": {
            "name": "intersecting_subsets_naive",
            "location": 15,
            "return": [
                "Dict[(frozenset, Tuple[(Any, Any)])]"
            ],
            "arguments": {
                "intervals": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "_intersecting_combinations_naive": {
            "name": "_intersecting_combinations_naive",
            "location": 19,
            "return": [
                "Generator[(Tuple[(frozenset, Tuple[(Any, Any)])], Any, None)]"
            ],
            "arguments": {
                "intervals": [
                    "dict[str, float]",
                    "str",
                    "bool",
                    "Mapping[str, str]",
                    "complex",
                    "bytes",
                    "int",
                    "Dict[str, float]"
                ],
                "k": [
                    "str",
                    "bool",
                    "complex",
                    "bytes",
                    "typing.Mapping",
                    "Mapping[str, str]",
                    "dict[str, float]",
                    "int",
                    "Dict[str, float]"
                ]
            }
        },
        "intersecting_combinations_naive": {
            "name": "intersecting_combinations_naive",
            "location": 27,
            "return": [
                "Dict[(frozenset, Tuple[(Any, Any)])]"
            ],
            "arguments": {
                "intervals": [
                    "int",
                    "float",
                    "Iterable[T]",
                    "typing.Iterable[T]"
                ],
                "k": [
                    "int",
                    "float",
                    "Iterable[T]",
                    "typing.Iterable[T]"
                ]
            }
        },
        "_intersecting_products_naive": {
            "name": "_intersecting_products_naive",
            "location": 31,
            "return": [
                "Generator[(Tuple[(Any, Tuple[(Any, Any)])], Any, None)]"
            ],
            "arguments": {
                "factors": [
                    "Dict[str, List[str]]",
                    "dict[str, list[str]]",
                    "Sequence[Sequence[T]]",
                    "typing.Sequence[typing.Sequence[T]]",
                    "bool",
                    "Union[bytes, bytearray]",
                    "bytes",
                    "Dict[int, int]",
                    "bytearray",
                    "dict[int, int]"
                ]
            }
        },
        "intersecting_products_naive": {
            "name": "intersecting_products_naive",
            "location": 39,
            "return": [
                "Dict[(Any, Tuple[(Any, Any)])]"
            ],
            "arguments": {
                "factors": [
                    "dict[, ]",
                    "int",
                    "str",
                    "Callable",
                    "dict",
                    "Mapping[str, Any]"
                ]
            }
        },
        "_intersecting_products_pruning": {
            "name": "_intersecting_products_pruning",
            "location": 43,
            "return": [
                "Generator[(Tuple[(tuple, Tuple[(Any, Any)])], Any, None)]"
            ],
            "arguments": {
                "aggregate": [
                    "dict[str, str]",
                    "Dict[str, str]",
                    "dict[str, int]",
                    "Dict[str, int]",
                    "dict[str, float]",
                    "Dict[str, float]",
                    "dict[str, object]",
                    "Dict[str, object]",
                    "Dict[str, Any]"
                ],
                "marginal": [
                    "dict[str, str]",
                    "Dict[str, str]",
                    "dict[str, int]",
                    "Dict[str, int]",
                    "dict[str, float]",
                    "Dict[str, float]",
                    "dict[str, object]",
                    "Dict[str, object]",
                    "Dict[str, Any]"
                ]
            }
        },
        "intersecting_products_pruning": {
            "name": "intersecting_products_pruning",
            "location": 52,
            "return": [
                "Dict[(tuple, Any)]"
            ],
            "arguments": {
                "factors": [
                    "int",
                    "Optional[str]",
                    "bytearray",
                    "str",
                    "Tuple[str, int]",
                    "None",
                    "tuple[typing.Union[str,int]]"
                ]
            }
        }
    },
    "sprig-master/src/sprig/iterutils.py": {
        "imerge": {
            "name": "imerge",
            "location": 13,
            "return": [
                "Iterator[T]"
            ],
            "arguments": {
                "iterables": [
                    "Iterable[Iterable[T]]"
                ],
                "key": [
                    "Callable[([T], Any)]"
                ]
            }
        },
        "bucket_merge": {
            "name": "bucket_merge",
            "location": 61,
            "return": [
                "Iterator[T]"
            ],
            "arguments": {
                "iterable": [
                    "Iterable[T]"
                ],
                "sort_key": [
                    "Callable[([T], Any)]"
                ],
                "bucket_key": [
                    "Callable[([T], U)]"
                ],
                "buckets": [
                    "Iterable[U]"
                ]
            }
        },
        "split": {
            "name": "split",
            "location": 77,
            "return": [
                "Iterator[List[T]]"
            ],
            "arguments": {
                "iterable": [
                    "Iterable[T]"
                ],
                "edges": [
                    "Iterable[U]"
                ],
                "cmp": [
                    "Optional[Callable[([T, U], bool)]]"
                ]
            }
        },
        "split_annotated": {
            "name": "split_annotated",
            "location": 141,
            "return": [
                "Iterator[Tuple[(Optional[U], Optional[U], List[T])]]"
            ],
            "arguments": {
                "iterable": [
                    "Iterable[T]"
                ],
                "edges": [
                    "Iterable[U]"
                ],
                "cmp": [
                    "Optional[Callable[([T, U], bool)]]"
                ]
            }
        },
        "split.before": {
            "name": "before",
            "location": 106,
            "return": [
                "bool",
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "item": [
                    "str",
                    "List[float]",
                    "bool"
                ],
                "edge": [
                    "str",
                    "List[float]",
                    "bool"
                ]
            }
        }
    },
    "sprig-master/src/sprig/streamutils.py": {
        "_SupportsSort.__lt__": {
            "name": "__lt__",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "SupportsFloat",
                    "list[str]",
                    "List[str]",
                    "int",
                    "Union[int, float]",
                    "float",
                    "AbstractSet[T]",
                    "typing.AbstractSet"
                ]
            }
        },
        "ManagedMerger.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "Callable[([_T], Any)]"
                ]
            }
        },
        "ManagedMerger.register": {
            "name": "register",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sender": [
                    "_HashableT"
                ]
            }
        },
        "ManagedMerger.unregister": {
            "name": "unregister",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sender": [
                    "_HashableT"
                ]
            }
        },
        "ManagedMerger.put": {
            "name": "put",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "_T"
                ],
                "sender": [
                    "_HashableT"
                ],
                "time": [
                    "_SortableT"
                ]
            }
        },
        "ManagedMerger._flush": {
            "name": "_flush",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagedMerger.close": {
            "name": "close",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BucketMerger.__init__": {
            "name": "__init__",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sort_key": [
                    "Callable[([_T], _SortableT)]"
                ],
                "bucket_key": [
                    "Callable[([_T], _HashableT)]"
                ],
                "callback": [
                    "Callable[([_T], Any)]"
                ]
            }
        },
        "BucketMerger.register": {
            "name": "register",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "_HashableT"
                ]
            }
        },
        "BucketMerger.unregister": {
            "name": "unregister",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "_HashableT"
                ]
            }
        },
        "BucketMerger.put": {
            "name": "put",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "_T"
                ]
            }
        },
        "BucketMerger.close": {
            "name": "close",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeoutMerger.__init__": {
            "name": "__init__",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "Callable[([_T], Any)]"
                ],
                "timeout": [
                    "imeT"
                ]
            }
        },
        "TimeoutMerger.put": {
            "name": "put",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "_T"
                ],
                "sender": [
                    "_HashableT"
                ],
                "time": [
                    "imeT"
                ]
            }
        },
        "TimeoutMerger._touch": {
            "name": "_touch",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sender": [
                    "_HashableT"
                ],
                "timeout_end": [
                    "imeT"
                ]
            }
        },
        "TimeoutMerger._flush": {
            "name": "_flush",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "time": [
                    "imeT"
                ]
            }
        },
        "TimeoutMerger.senders": {
            "name": "senders",
            "location": 206,
            "return": [
                "set[]",
                "str",
                "int",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Bucket.__init__": {
            "name": "__init__",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Bucket.append": {
            "name": "append",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "int",
                    "str",
                    "list[typing.Deque]",
                    "T",
                    "List[deque]",
                    "typing.Callable[, ]",
                    "Callable"
                ]
            }
        },
        "_Bucket.__len__": {
            "name": "__len__",
            "location": 217,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Bucket.__iter__": {
            "name": "__iter__",
            "location": 220,
            "return": [
                "Bucket"
            ],
            "arguments": {
                "self": [
                    "_T_Bucket"
                ]
            }
        },
        "_Bucket.__next__": {
            "name": "__next__",
            "location": 223,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleBucketMerger.__init__": {
            "name": "__init__",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sort_key": [
                    "Callable[([_T], _SupportsSort)]"
                ],
                "bucket_key": [
                    "Callable[([_T], _HashableT)]"
                ],
                "bucket_keys": [
                    "Iterable[_HashableT]"
                ],
                "callback": [
                    "Callable[([_T], Any)]"
                ]
            }
        },
        "SimpleBucketMerger.put": {
            "name": "put",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "_T"
                ]
            }
        },
        "SimpleBucketMerger.close": {
            "name": "close",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sprig-master/src/sprig/__init__.py": {},
    "sprig-master/tests/test_bucket_merge.py": {
        "_conjure_msg": {
            "name": "_conjure_msg",
            "location": 11,
            "return": [
                "Tuple[(_T0, int)]"
            ],
            "arguments": {
                "label": [
                    "_T0"
                ],
                "random": [
                    "List[int]",
                    "str",
                    "list[int]",
                    "Tuple[Sequence[Any], Sequence[Any]]",
                    "tuple[typing.Union[typing.Sequence[typing.Any],typing.Sequence[typing.Any]]]",
                    "List[str]",
                    "list[str]",
                    "Set[str]",
                    "set[str]"
                ],
                "timestamp": [
                    "int",
                    "str",
                    "List[str]",
                    "Union[int, str]"
                ]
            }
        },
        "_conjure_mminf": {
            "name": "_conjure_mminf",
            "location": 15,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "get_one": [
                    "str",
                    "int",
                    "bytes",
                    "Pattern[str]",
                    "typing.Pattern"
                ],
                "time_between_arrival": [
                    "float"
                ],
                "num": [
                    "int",
                    "str",
                    "list[str]",
                    "List[str]",
                    "bool"
                ],
                "random": [
                    "random.Random"
                ]
            }
        },
        "_random_interleave": {
            "name": "_random_interleave",
            "location": 27,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "iterables": [
                    "str",
                    "float",
                    "list[]",
                    "list"
                ],
                "random": [
                    "int"
                ]
            }
        },
        "test_unregistering_source_unblocks": {
            "name": "test_unregistering_source_unblocks",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_putting_greater_unblocks_all_previous": {
            "name": "test_putting_greater_unblocks_all_previous",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_putting_equal_unblocks_all": {
            "name": "test_putting_equal_unblocks_all",
            "location": 62,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_sorting_stable": {
            "name": "test_sorting_stable",
            "location": 76,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_sorting_stable_within_bucket": {
            "name": "test_sorting_stable_within_bucket",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_workflow_and_result_by_fuzzing": {
            "name": "test_workflow_and_result_by_fuzzing",
            "location": 101,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "num_src": [],
                "max_event": []
            }
        },
        "_eager_bucket_merger_adaptor": {
            "name": "_eager_bucket_merger_adaptor",
            "location": 154,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "iterable": [
                    "str",
                    "bool",
                    "float",
                    "Iterable[str]"
                ],
                "sort_key": [
                    "bytes",
                    "str"
                ],
                "bucket_key": [
                    "bytes",
                    "str"
                ],
                "buckets": [
                    "str",
                    "bool",
                    "float",
                    "Iterable[str]"
                ]
            }
        },
        "_eager_simple_bucket_merger_adaptor": {
            "name": "_eager_simple_bucket_merger_adaptor",
            "location": 165,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "iterable": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "float"
                ],
                "sort_key": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "bucket_key": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "buckets": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "_eager_bucket_merge_adaptor": {
            "name": "_eager_bucket_merge_adaptor",
            "location": 176,
            "return": [
                "list"
            ],
            "arguments": {
                "iterable": [
                    "Union[bytes, str]",
                    "str",
                    "bytes"
                ],
                "sort_key": [
                    "Union[bytes, str]",
                    "str",
                    "bytes"
                ],
                "bucket_key": [
                    "Union[bytes, str]",
                    "str",
                    "bytes"
                ],
                "buckets": [
                    "Union[bytes, str]",
                    "str",
                    "bytes"
                ]
            }
        },
        "test_result_is_sorted_by_example": {
            "name": "test_result_is_sorted_by_example",
            "location": 201,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "eager_bucket_merge": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "msgs": [
                    "str",
                    "float",
                    "Union[int, float]"
                ]
            }
        },
        "test_result_is_sorted_by_fuzzing": {
            "name": "test_result_is_sorted_by_fuzzing",
            "location": 225,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "eager_bucket_merge": [
                    "str",
                    "int",
                    "dict",
                    "dict[, ]"
                ],
                "num_src": [
                    "int",
                    "list[str]",
                    "List[str]",
                    "bool"
                ],
                "max_event": [
                    "int",
                    "list[str]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "test_timeout_merger_by_example": {
            "name": "test_timeout_merger_by_example",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_workflow_and_result_by_fuzzing.get_time": {
            "name": "get_time",
            "location": 119,
            "return": [],
            "arguments": {
                "msg": []
            }
        },
        "test_workflow_and_result_by_fuzzing.get_src": {
            "name": "get_src",
            "location": 122,
            "return": [],
            "arguments": {
                "msg": []
            }
        },
        "test_result_is_sorted_by_example.get_src": {
            "name": "get_src",
            "location": 202,
            "return": [],
            "arguments": {
                "msg": []
            }
        },
        "test_result_is_sorted_by_example.get_time": {
            "name": "get_time",
            "location": 205,
            "return": [],
            "arguments": {
                "msg": []
            }
        },
        "test_result_is_sorted_by_fuzzing.get_time": {
            "name": "get_time",
            "location": 243,
            "return": [
                "str",
                "int",
                "Tuple[int, int]"
            ],
            "arguments": {
                "msg": [
                    "int",
                    "bool",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "List[str]",
                    "List[Tuple[str, ...]]"
                ]
            }
        },
        "test_result_is_sorted_by_fuzzing.get_src": {
            "name": "get_src",
            "location": 246,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "bool",
                    "list"
                ]
            }
        },
        "test_timeout_merger_by_example.put": {
            "name": "put",
            "location": 258,
            "return": [
                "tuple[]",
                "int",
                "Dict[str, bool]",
                "bool",
                "Iterable[Any]",
                "str"
            ],
            "arguments": {
                "msg": [
                    "int",
                    "str",
                    "Sequence[str]"
                ]
            }
        }
    },
    "sprig-master/tests/test_comb.py": {
        "assert_equivalent_behaviour": {
            "name": "assert_equivalent_behaviour",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "func_a": [
                    "float",
                    "list",
                    "list[]",
                    "Union[int, float]",
                    "int"
                ],
                "func_b": [
                    "int",
                    "float"
                ]
            }
        },
        "test_len_agrees_with_itertools": {
            "name": "test_len_agrees_with_itertools",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "s": [
                    "Callable",
                    "bool",
                    "typing.Callable[, ]"
                ],
                "k": [
                    "Callable",
                    "bool",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_getitem_agrees_with_itertools": {
            "name": "test_getitem_agrees_with_itertools",
            "location": 52,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "s": [
                    "Callable",
                    "bool",
                    "typing.Callable[, ]"
                ],
                "k": [
                    "Callable",
                    "bool",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_str_does_not_raise": {
            "name": "test_str_does_not_raise",
            "location": 63,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "s": [
                    "str",
                    "Optional[int]",
                    "int",
                    "List[str]",
                    "None",
                    "list[str]"
                ],
                "k": [
                    "str",
                    "Optional[int]",
                    "int",
                    "List[str]",
                    "None",
                    "list[str]"
                ]
            }
        },
        "test_contains_by_example": {
            "name": "test_contains_by_example",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_contains_agrees_with_itertools": {
            "name": "test_contains_agrees_with_itertools",
            "location": 78,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "s": [
                    "int",
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "k": [
                    "int",
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "test_contains_ignores_order": {
            "name": "test_contains_ignores_order",
            "location": 85,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bool"
                ],
                "k": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_iter_agrees_with_itertools": {
            "name": "test_iter_agrees_with_itertools",
            "location": 92,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "k": [
                    "str",
                    "int",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_interval_cache": {
            "name": "test_interval_cache",
            "location": 99,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "values": [
                    "dict",
                    "Dict[str, float]",
                    "Callable",
                    "Union['AbstractSetIntStr', 'MappingIntStrAny']",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "sprig-master/tests/test_dictutils.py": {
        "test_deflate_reverses_inflate": {
            "name": "test_deflate_reverses_inflate",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "deflated_before": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "sprig-master/tests/test_intervals.py": {
        "_rng": {
            "name": "_rng",
            "location": 8,
            "return": [
                "Union[(random.Random, _T0)]"
            ],
            "arguments": {
                "seed": [
                    "_T0"
                ]
            }
        },
        "_rand_intervals": {
            "name": "_rand_intervals",
            "location": 15,
            "return": [
                "Dict[(int, Tuple[(Any, Any)])]"
            ],
            "arguments": {
                "seed": [
                    "int",
                    "float",
                    "List[List[int]]",
                    "list[list[int]]"
                ],
                "num_interval": [
                    "int",
                    "float",
                    "Optional[int]",
                    "None",
                    "Optional[float]",
                    "Union[int, None]"
                ],
                "min_pitch": [
                    "str",
                    "bool",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "_rand_factors": {
            "name": "_rand_factors",
            "location": 31,
            "return": [
                "list"
            ],
            "arguments": {
                "seed": [
                    "int",
                    "float",
                    "Optional[List[Any]]",
                    "list[typing.Any]",
                    "None"
                ],
                "num_factor": [
                    "int",
                    "None",
                    "Optional[int]"
                ],
                "num_interval": [
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "min_pitch": [
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        },
        "test_intersecting_subsets_by_example": {
            "name": "test_intersecting_subsets_by_example",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "example": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "test_intersecting_combinations_by_example": {
            "name": "test_intersecting_combinations_by_example",
            "location": 60,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "example": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "test_intersecting_products_by_example": {
            "name": "test_intersecting_products_by_example",
            "location": 82,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "example": [
                    "str"
                ]
            }
        },
        "test_intersecting_products_equivalent_to_naive": {
            "name": "test_intersecting_products_equivalent_to_naive",
            "location": 90,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "factors": []
            }
        }
    },
    "sprig-master/tests/test_iterutils.py": {
        "_merge": {
            "name": "_merge",
            "location": 10,
            "return": [
                "list"
            ],
            "arguments": {
                "iterables": [
                    "bytes",
                    "str",
                    "int",
                    "typing.Iterator",
                    "T",
                    "Iterator[str]"
                ],
                "key": [
                    "typing.Callable[, ]",
                    "bytes",
                    "str",
                    "T",
                    "Iterator[str]",
                    "int"
                ]
            }
        },
        "test_imerge_handles_empty_input": {
            "name": "test_imerge_handles_empty_input",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_imerge_handles_empty_iterator": {
            "name": "test_imerge_handles_empty_iterator",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_imerge_handles_shallow_iterators": {
            "name": "test_imerge_handles_shallow_iterators",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_imerge_handles_ties_of_uncomparable_items": {
            "name": "test_imerge_handles_ties_of_uncomparable_items",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_imerge_is_not_eager": {
            "name": "test_imerge_is_not_eager",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_split_by_example": {
            "name": "test_split_by_example",
            "location": 60,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "iterable": [
                    "str"
                ],
                "edges": [
                    "str"
                ],
                "expected": [
                    "str"
                ]
            }
        },
        "test_split_yields_correct_number_of_buckets": {
            "name": "test_split_yields_correct_number_of_buckets",
            "location": 66,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "iterable": [],
                "edges": []
            }
        },
        "test_split_is_not_eager": {
            "name": "test_split_is_not_eager",
            "location": 71,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "sprig-master/tests/test_versions.py": {
        "_get_msg": {
            "name": "_get_msg",
            "location": 5,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "test_version_coverage": {
            "name": "test_version_coverage",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
{
    "sqlalchemy-stubs-master/conftest.py": {},
    "sqlalchemy-stubs-master/setup.py": {
        "find_stub_files": {
            "name": "find_stub_files",
            "location": 32,
            "return": [
                "List[str]"
            ],
            "arguments": {}
        }
    },
    "sqlalchemy-stubs-master/sqlmypy.py": {
        "fullname": {
            "name": "fullname",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "Union[mypy.nodes.FuncBase, mypy.nodes.SymbolNode]",
                    "int"
                ]
            }
        },
        "shortname": {
            "name": "shortname",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "str",
                    "int",
                    "Union[mypy.nodes.FuncBase, mypy.nodes.SymbolNode]"
                ]
            }
        },
        "is_declarative": {
            "name": "is_declarative",
            "location": 55,
            "return": [
                "bool"
            ],
            "arguments": {
                "info": [
                    "mypy.nodes.TypeInfo",
                    "list[str]",
                    "List[str]",
                    "typing.Mapping",
                    "Optional[Mapping[str, Any]]",
                    "None",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "set_declarative": {
            "name": "set_declarative",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "info": [
                    "bool",
                    "mypy.nodes.TypeInfo"
                ]
            }
        },
        "add_var_to_class": {
            "name": "add_var_to_class",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "typ": [
                    "str",
                    "mypy.types.Type",
                    "tuple[typing.Type]",
                    "typing.Type",
                    "mypy.types.Instance",
                    "Tuple[type]",
                    "Type"
                ],
                "info": [
                    "typing.Callable[, ]",
                    "mypy.nodes.TypeInfo",
                    "str",
                    "bool",
                    "Callable",
                    "tuple[]",
                    "typing.Type",
                    "tuple",
                    "tuple[typing.Union[typing.Type,...]]",
                    "Type",
                    "Union[Type, Tuple[Type, ...]]",
                    "Type['Model']"
                ]
            }
        },
        "add_model_init_hook": {
            "name": "add_model_init_hook",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "mypy.plugin.ClassDefContext"
                ]
            }
        },
        "add_metadata_var": {
            "name": "add_metadata_var",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [
                    "Optional[str]",
                    "dict",
                    "str"
                ],
                "info": [
                    "bool",
                    "mypy.nodes.TypeInfo",
                    "list[str]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "decl_deco_hook": {
            "name": "decl_deco_hook",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "mypy.plugin.ClassDefContext"
                ]
            }
        },
        "decl_info_hook": {
            "name": "decl_info_hook",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "mypy.plugin.FunctionContext",
                    "mypy.plugin.AnalyzeTypeContext",
                    "mypy.plugin.ClassDefContext"
                ]
            }
        },
        "model_hook": {
            "name": "model_hook",
            "location": 221,
            "return": [
                "mypy.types.Type",
                "mypy.nodes.FuncItem",
                "mypy.nodes.RefExpr"
            ],
            "arguments": {
                "ctx": [
                    "list[dict[str, typing.Any]]",
                    "mypy.plugin.FunctionContext",
                    "FunctionContext",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "get_argument_by_name": {
            "name": "get_argument_by_name",
            "location": 267,
            "return": [
                "None",
                "Optional[float]",
                "bool",
                "dict",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "mypy.nodes.Context"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "get_argtype_by_name": {
            "name": "get_argtype_by_name",
            "location": 282,
            "return": [
                "None",
                "dict",
                "bool",
                "Tuple[List[str], Optional[str]]",
                "Optional[str]"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "mypy.nodes.Context"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "column_hook": {
            "name": "column_hook",
            "location": 294,
            "return": [
                "Instance",
                "mypy.nodes.ClassDef",
                "Optional[mypy.types.Type]",
                "Type"
            ],
            "arguments": {
                "ctx": [
                    "mypy.plugin.FunctionContext"
                ]
            }
        },
        "grouping_hook": {
            "name": "grouping_hook",
            "location": 330,
            "return": [
                "Optional[mypy.types.Type]",
                "Type",
                "int",
                "bool"
            ],
            "arguments": {
                "ctx": [
                    "mypy.plugin.FunctionContext",
                    "mypy.plugin.ClassDefContext"
                ]
            }
        },
        "relationship_hook": {
            "name": "relationship_hook",
            "location": 349,
            "return": [
                "Instance",
                "mypy.types.Type",
                "mypy.nodes.ClassDef",
                "mypy.nodes.Context"
            ],
            "arguments": {
                "ctx": [
                    "mypy.plugin.FunctionContext",
                    "mypy.plugin.MethodSigContext"
                ]
            }
        },
        "parse_bool": {
            "name": "parse_bool",
            "location": 417,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "expr": [
                    "mypy.nodes.Expression"
                ]
            }
        },
        "plugin": {
            "name": "plugin",
            "location": 426,
            "return": [
                "BasicSQLAlchemyPlugin",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "version": [
                    "str"
                ]
            }
        },
        "BasicSQLAlchemyPlugin.get_function_hook": {
            "name": "get_function_hook",
            "location": 79,
            "return": [
                "Optional[Callable[([typing.Any], typing.Any)]]"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "str"
                ]
            }
        },
        "BasicSQLAlchemyPlugin.get_dynamic_class_hook": {
            "name": "get_dynamic_class_hook",
            "location": 93,
            "return": [
                "Optional[Callable[([typing.Any], None)]]"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "str"
                ]
            }
        },
        "BasicSQLAlchemyPlugin.get_class_decorator_hook": {
            "name": "get_class_decorator_hook",
            "location": 98,
            "return": [
                "Optional[Callable[([typing.Any], None)]]"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "str"
                ]
            }
        },
        "BasicSQLAlchemyPlugin.get_base_class_hook": {
            "name": "get_base_class_hook",
            "location": 103,
            "return": [
                "Optional[Callable[([typing.Any], None)]]"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "str"
                ]
            }
        }
    },
    "sqlalchemy-stubs-master/sqltyping.py": {},
    "sqlalchemy-stubs-master/sqlalchemy-stubs/events.py": {
        "DDLEvents.before_create": {
            "name": "before_create",
            "location": 4,
            "return": [],
            "arguments": {
                "self": [],
                "target": [],
                "connection": []
            }
        },
        "DDLEvents.after_create": {
            "name": "after_create",
            "location": 5,
            "return": [],
            "arguments": {
                "self": [],
                "target": [],
                "connection": []
            }
        },
        "DDLEvents.before_drop": {
            "name": "before_drop",
            "location": 6,
            "return": [],
            "arguments": {
                "self": [],
                "target": [],
                "connection": []
            }
        },
        "DDLEvents.after_drop": {
            "name": "after_drop",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "target": [],
                "connection": []
            }
        },
        "DDLEvents.before_parent_attach": {
            "name": "before_parent_attach",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "target": [],
                "parent": []
            }
        },
        "DDLEvents.after_parent_attach": {
            "name": "after_parent_attach",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "target": [],
                "parent": []
            }
        },
        "DDLEvents.column_reflect": {
            "name": "column_reflect",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "inspector": [],
                "table": [],
                "column_info": []
            }
        },
        "PoolEvents.connect": {
            "name": "connect",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "dbapi_connection": [],
                "connection_record": []
            }
        },
        "PoolEvents.first_connect": {
            "name": "first_connect",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "dbapi_connection": [],
                "connection_record": []
            }
        },
        "PoolEvents.checkout": {
            "name": "checkout",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "dbapi_connection": [],
                "connection_record": [],
                "connection_proxy": []
            }
        },
        "PoolEvents.checkin": {
            "name": "checkin",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "dbapi_connection": [],
                "connection_record": []
            }
        },
        "PoolEvents.reset": {
            "name": "reset",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "dbapi_connection": [],
                "connection_record": []
            }
        },
        "PoolEvents.invalidate": {
            "name": "invalidate",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "dbapi_connection": [],
                "connection_record": [],
                "exception": []
            }
        },
        "PoolEvents.soft_invalidate": {
            "name": "soft_invalidate",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "dbapi_connection": [],
                "connection_record": [],
                "exception": []
            }
        },
        "PoolEvents.close": {
            "name": "close",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "dbapi_connection": [],
                "connection_record": []
            }
        },
        "PoolEvents.detach": {
            "name": "detach",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "dbapi_connection": [],
                "connection_record": []
            }
        },
        "PoolEvents.close_detached": {
            "name": "close_detached",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "dbapi_connection": []
            }
        },
        "ConnectionEvents.before_execute": {
            "name": "before_execute",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "conn": [],
                "clauseelement": [],
                "multiparams": [],
                "params": []
            }
        },
        "ConnectionEvents.after_execute": {
            "name": "after_execute",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "conn": [],
                "clauseelement": [],
                "multiparams": [],
                "params": [],
                "result": []
            }
        },
        "ConnectionEvents.before_cursor_execute": {
            "name": "before_cursor_execute",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "conn": [],
                "cursor": [],
                "statement": [],
                "parameters": [],
                "context": [],
                "executemany": []
            }
        },
        "ConnectionEvents.after_cursor_execute": {
            "name": "after_cursor_execute",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "conn": [],
                "cursor": [],
                "statement": [],
                "parameters": [],
                "context": [],
                "executemany": []
            }
        },
        "ConnectionEvents.dbapi_error": {
            "name": "dbapi_error",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "conn": [],
                "cursor": [],
                "statement": [],
                "parameters": [],
                "context": [],
                "exception": []
            }
        },
        "ConnectionEvents.handle_error": {
            "name": "handle_error",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "exception_context": []
            }
        },
        "ConnectionEvents.engine_connect": {
            "name": "engine_connect",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "conn": [],
                "branch": []
            }
        },
        "ConnectionEvents.set_connection_execution_options": {
            "name": "set_connection_execution_options",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "conn": [],
                "opts": []
            }
        },
        "ConnectionEvents.set_engine_execution_options": {
            "name": "set_engine_execution_options",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "engine": [],
                "opts": []
            }
        },
        "ConnectionEvents.engine_disposed": {
            "name": "engine_disposed",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "engine": []
            }
        },
        "ConnectionEvents.begin": {
            "name": "begin",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "conn": []
            }
        },
        "ConnectionEvents.rollback": {
            "name": "rollback",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "conn": []
            }
        },
        "ConnectionEvents.commit": {
            "name": "commit",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "conn": []
            }
        },
        "ConnectionEvents.savepoint": {
            "name": "savepoint",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "conn": [],
                "name": []
            }
        },
        "ConnectionEvents.rollback_savepoint": {
            "name": "rollback_savepoint",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "conn": [],
                "name": [],
                "context": []
            }
        },
        "ConnectionEvents.release_savepoint": {
            "name": "release_savepoint",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "conn": [],
                "name": [],
                "context": []
            }
        },
        "ConnectionEvents.begin_twophase": {
            "name": "begin_twophase",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "conn": [],
                "xid": []
            }
        },
        "ConnectionEvents.prepare_twophase": {
            "name": "prepare_twophase",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "conn": [],
                "xid": []
            }
        },
        "ConnectionEvents.rollback_twophase": {
            "name": "rollback_twophase",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "conn": [],
                "xid": [],
                "is_prepared": []
            }
        },
        "ConnectionEvents.commit_twophase": {
            "name": "commit_twophase",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "conn": [],
                "xid": [],
                "is_prepared": []
            }
        },
        "DialectEvents.do_connect": {
            "name": "do_connect",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": [],
                "conn_rec": [],
                "cargs": [],
                "cparams": []
            }
        },
        "DialectEvents.do_executemany": {
            "name": "do_executemany",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "cursor": [],
                "statement": [],
                "parameters": [],
                "context": []
            }
        },
        "DialectEvents.do_execute_no_params": {
            "name": "do_execute_no_params",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "cursor": [],
                "statement": [],
                "context": []
            }
        },
        "DialectEvents.do_execute": {
            "name": "do_execute",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "cursor": [],
                "statement": [],
                "parameters": [],
                "context": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/exc.py": {
        "ObjectNotExecutableError.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "target": []
            }
        },
        "CircularDependencyError.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "cycles": [],
                "edges": [],
                "msg": []
            }
        },
        "CircularDependencyError.__reduce__": {
            "name": "__reduce__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnsupportedCompilationError.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": [],
                "element_type": []
            }
        },
        "NoReferencedTableError.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "tname": []
            }
        },
        "NoReferencedTableError.__reduce__": {
            "name": "__reduce__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NoReferencedColumnError.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "tname": [],
                "cname": []
            }
        },
        "NoReferencedColumnError.__reduce__": {
            "name": "__reduce__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StatementError.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "statement": [],
                "params": [],
                "orig": []
            }
        },
        "StatementError.add_detail": {
            "name": "add_detail",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "StatementError.__reduce__": {
            "name": "__reduce__",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StatementError.__unicode__": {
            "name": "__unicode__",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DBAPIError.instance": {
            "name": "instance",
            "location": 65,
            "return": [],
            "arguments": {
                "cls": [],
                "statement": [],
                "params": [],
                "orig": [],
                "dbapi_base_err": [],
                "connection_invalidated": [],
                "dialect": []
            }
        },
        "DBAPIError.__reduce__": {
            "name": "__reduce__",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DBAPIError.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "statement": [],
                "params": [],
                "orig": [],
                "connection_invalidated": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/inspection.py": {
        "inspect": {
            "name": "inspect",
            "location": 3,
            "return": [],
            "arguments": {
                "subject": [],
                "raiseerr": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/interfaces.py": {
        "PoolListener.connect": {
            "name": "connect",
            "location": 4,
            "return": [],
            "arguments": {
                "self": [],
                "dbapi_con": [],
                "con_record": []
            }
        },
        "PoolListener.first_connect": {
            "name": "first_connect",
            "location": 5,
            "return": [],
            "arguments": {
                "self": [],
                "dbapi_con": [],
                "con_record": []
            }
        },
        "PoolListener.checkout": {
            "name": "checkout",
            "location": 6,
            "return": [],
            "arguments": {
                "self": [],
                "dbapi_con": [],
                "con_record": [],
                "con_proxy": []
            }
        },
        "PoolListener.checkin": {
            "name": "checkin",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "dbapi_con": [],
                "con_record": []
            }
        },
        "ConnectionProxy.execute": {
            "name": "execute",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "conn": [],
                "execute": [],
                "clauseelement": []
            }
        },
        "ConnectionProxy.cursor_execute": {
            "name": "cursor_execute",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "execute": [],
                "cursor": [],
                "statement": [],
                "parameters": [],
                "context": [],
                "executemany": []
            }
        },
        "ConnectionProxy.begin": {
            "name": "begin",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "conn": [],
                "begin": []
            }
        },
        "ConnectionProxy.rollback": {
            "name": "rollback",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "conn": [],
                "rollback": []
            }
        },
        "ConnectionProxy.commit": {
            "name": "commit",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "conn": [],
                "commit": []
            }
        },
        "ConnectionProxy.savepoint": {
            "name": "savepoint",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "conn": [],
                "savepoint": [],
                "name": []
            }
        },
        "ConnectionProxy.rollback_savepoint": {
            "name": "rollback_savepoint",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "conn": [],
                "rollback_savepoint": [],
                "name": [],
                "context": []
            }
        },
        "ConnectionProxy.release_savepoint": {
            "name": "release_savepoint",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "conn": [],
                "release_savepoint": [],
                "name": [],
                "context": []
            }
        },
        "ConnectionProxy.begin_twophase": {
            "name": "begin_twophase",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "conn": [],
                "begin_twophase": [],
                "xid": []
            }
        },
        "ConnectionProxy.prepare_twophase": {
            "name": "prepare_twophase",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "conn": [],
                "prepare_twophase": [],
                "xid": []
            }
        },
        "ConnectionProxy.rollback_twophase": {
            "name": "rollback_twophase",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "conn": [],
                "rollback_twophase": [],
                "xid": [],
                "is_prepared": []
            }
        },
        "ConnectionProxy.commit_twophase": {
            "name": "commit_twophase",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "conn": [],
                "commit_twophase": [],
                "xid": [],
                "is_prepared": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/log.py": {
        "class_logger": {
            "name": "class_logger",
            "location": 5,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "instance_logger": {
            "name": "instance_logger",
            "location": 27,
            "return": [],
            "arguments": {
                "instance": [],
                "echoflag": []
            }
        },
        "Identified._should_log_debug": {
            "name": "_should_log_debug",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Identified._should_log_info": {
            "name": "_should_log_info",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InstanceLogger.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "echo": [],
                "name": []
            }
        },
        "InstanceLogger.debug": {
            "name": "debug",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "InstanceLogger.info": {
            "name": "info",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "InstanceLogger.warning": {
            "name": "warning",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "InstanceLogger.warn": {
            "name": "warn",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "InstanceLogger.error": {
            "name": "error",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "InstanceLogger.exception": {
            "name": "exception",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "InstanceLogger.critical": {
            "name": "critical",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "InstanceLogger.log": {
            "name": "log",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "level": [],
                "msg": []
            }
        },
        "InstanceLogger.isEnabledFor": {
            "name": "isEnabledFor",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "level": []
            }
        },
        "InstanceLogger.getEffectiveLevel": {
            "name": "getEffectiveLevel",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "echo_property.__get__": {
            "name": "__get__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "owner": []
            }
        },
        "echo_property.__set__": {
            "name": "__set__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "value": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/pool.py": {
        "manage": {
            "name": "manage",
            "location": 6,
            "return": [],
            "arguments": {
                "module": []
            }
        },
        "clear_managers": {
            "name": "clear_managers",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "Pool.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "creator": [],
                "recycle": [],
                "echo": [],
                "use_threadlocal": [],
                "logging_name": [],
                "reset_on_return": [],
                "listeners": [],
                "events": [],
                "dialect": [],
                "_dispatch": []
            }
        },
        "Pool.add_listener": {
            "name": "add_listener",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "listener": []
            }
        },
        "Pool.unique_connection": {
            "name": "unique_connection",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Pool.recreate": {
            "name": "recreate",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Pool.dispose": {
            "name": "dispose",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Pool.connect": {
            "name": "connect",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Pool.status": {
            "name": "status",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SingletonThreadPool.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "creator": [],
                "pool_size": []
            }
        },
        "SingletonThreadPool.recreate": {
            "name": "recreate",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SingletonThreadPool.dispose": {
            "name": "dispose",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SingletonThreadPool.status": {
            "name": "status",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueuePool.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "creator": [],
                "pool_size": [],
                "max_overflow": [],
                "timeout": []
            }
        },
        "QueuePool.recreate": {
            "name": "recreate",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueuePool.dispose": {
            "name": "dispose",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueuePool.status": {
            "name": "status",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueuePool.size": {
            "name": "size",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueuePool.checkedin": {
            "name": "checkedin",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueuePool.overflow": {
            "name": "overflow",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueuePool.checkedout": {
            "name": "checkedout",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NullPool.status": {
            "name": "status",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NullPool.recreate": {
            "name": "recreate",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NullPool.dispose": {
            "name": "dispose",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StaticPool.connection": {
            "name": "connection",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StaticPool.status": {
            "name": "status",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StaticPool.dispose": {
            "name": "dispose",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StaticPool.recreate": {
            "name": "recreate",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AssertionPool.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AssertionPool.status": {
            "name": "status",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AssertionPool.dispose": {
            "name": "dispose",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AssertionPool.recreate": {
            "name": "recreate",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/processors.py": {
        "str_to_datetime_processor_factory": {
            "name": "str_to_datetime_processor_factory",
            "location": 3,
            "return": [],
            "arguments": {
                "regexp": [],
                "type_": []
            }
        },
        "boolean_to_int": {
            "name": "boolean_to_int",
            "location": 4,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "py_fallback": {
            "name": "py_fallback",
            "location": 5,
            "return": [],
            "arguments": {}
        },
        "to_unicode_processor_factory": {
            "name": "to_unicode_processor_factory",
            "location": 6,
            "return": [],
            "arguments": {
                "encoding": [],
                "errors": []
            }
        },
        "to_conditional_unicode_processor_factory": {
            "name": "to_conditional_unicode_processor_factory",
            "location": 7,
            "return": [],
            "arguments": {
                "encoding": [],
                "errors": []
            }
        },
        "to_decimal_processor_factory": {
            "name": "to_decimal_processor_factory",
            "location": 8,
            "return": [],
            "arguments": {
                "target_class": [],
                "scale": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/schema.py": {},
    "sqlalchemy-stubs-master/sqlalchemy-stubs/types.py": {},
    "sqlalchemy-stubs-master/sqlalchemy-stubs/__init__.py": {},
    "sqlalchemy-stubs-master/sqlalchemy-stubs/connectors/__init__.py": {
        "__getattr__": {
            "name": "__getattr__",
            "location": 5,
            "return": [],
            "arguments": {
                "attr": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/databases/__init__.py": {},
    "sqlalchemy-stubs-master/sqlalchemy-stubs/dialects/__init__.py": {},
    "sqlalchemy-stubs-master/sqlalchemy-stubs/dialects/firebird/__init__.py": {
        "__getattr__": {
            "name": "__getattr__",
            "location": 3,
            "return": [],
            "arguments": {
                "attr": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/dialects/mssql/base.py": {
        "DATETIMEOFFSET.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "precision": []
            }
        },
        "TIMESTAMP.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "convert_int": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/dialects/mssql/__init__.py": {},
    "sqlalchemy-stubs-master/sqlalchemy-stubs/dialects/mysql/base.py": {
        "MySQLExecutionContext.should_autocommit_text": {
            "name": "should_autocommit_text",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "statement": []
            }
        },
        "MySQLExecutionContext.create_server_side_cursor": {
            "name": "create_server_side_cursor",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MySQLCompiler.visit_random_func": {
            "name": "visit_random_func",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "fn": []
            }
        },
        "MySQLCompiler.visit_utc_timestamp_func": {
            "name": "visit_utc_timestamp_func",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "fn": []
            }
        },
        "MySQLCompiler.visit_sysdate_func": {
            "name": "visit_sysdate_func",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "fn": []
            }
        },
        "MySQLCompiler.visit_json_getitem_op_binary": {
            "name": "visit_json_getitem_op_binary",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "binary": [],
                "operator": []
            }
        },
        "MySQLCompiler.visit_json_path_getitem_op_binary": {
            "name": "visit_json_path_getitem_op_binary",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "binary": [],
                "operator": []
            }
        },
        "MySQLCompiler.visit_concat_op_binary": {
            "name": "visit_concat_op_binary",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "binary": [],
                "operator": []
            }
        },
        "MySQLCompiler.visit_match_op_binary": {
            "name": "visit_match_op_binary",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "binary": [],
                "operator": []
            }
        },
        "MySQLCompiler.get_from_hint_text": {
            "name": "get_from_hint_text",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "table": [],
                "text": []
            }
        },
        "MySQLCompiler.visit_typeclause": {
            "name": "visit_typeclause",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MySQLCompiler.visit_cast": {
            "name": "visit_cast",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "cast": []
            }
        },
        "MySQLCompiler.render_literal_value": {
            "name": "render_literal_value",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "type_": []
            }
        },
        "MySQLCompiler.visit_true": {
            "name": "visit_true",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "element": []
            }
        },
        "MySQLCompiler.visit_false": {
            "name": "visit_false",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "element": []
            }
        },
        "MySQLCompiler.get_select_precolumns": {
            "name": "get_select_precolumns",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "select": []
            }
        },
        "MySQLCompiler.visit_join": {
            "name": "visit_join",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "join": [],
                "asfrom": []
            }
        },
        "MySQLCompiler.for_update_clause": {
            "name": "for_update_clause",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "select": []
            }
        },
        "MySQLCompiler.limit_clause": {
            "name": "limit_clause",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "select": []
            }
        },
        "MySQLCompiler.update_limit_clause": {
            "name": "update_limit_clause",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "update_stmt": []
            }
        },
        "MySQLCompiler.update_tables_clause": {
            "name": "update_tables_clause",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "update_stmt": [],
                "from_table": [],
                "extra_froms": []
            }
        },
        "MySQLCompiler.update_from_clause": {
            "name": "update_from_clause",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "update_stmt": [],
                "from_table": [],
                "extra_froms": [],
                "from_hints": []
            }
        },
        "MySQLDDLCompiler.get_column_specification": {
            "name": "get_column_specification",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "column": []
            }
        },
        "MySQLDDLCompiler.post_create_table": {
            "name": "post_create_table",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "table": []
            }
        },
        "MySQLDDLCompiler.visit_create_index": {
            "name": "visit_create_index",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "create": []
            }
        },
        "MySQLDDLCompiler.visit_primary_key_constraint": {
            "name": "visit_primary_key_constraint",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "constraint": []
            }
        },
        "MySQLDDLCompiler.visit_drop_index": {
            "name": "visit_drop_index",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "drop": []
            }
        },
        "MySQLDDLCompiler.visit_drop_constraint": {
            "name": "visit_drop_constraint",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "drop": []
            }
        },
        "MySQLDDLCompiler.define_constraint_match": {
            "name": "define_constraint_match",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "constraint": []
            }
        },
        "MySQLTypeCompiler.visit_NUMERIC": {
            "name": "visit_NUMERIC",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "MySQLTypeCompiler.visit_DECIMAL": {
            "name": "visit_DECIMAL",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "MySQLTypeCompiler.visit_DOUBLE": {
            "name": "visit_DOUBLE",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "MySQLTypeCompiler.visit_REAL": {
            "name": "visit_REAL",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "MySQLTypeCompiler.visit_FLOAT": {
            "name": "visit_FLOAT",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "MySQLTypeCompiler.visit_INTEGER": {
            "name": "visit_INTEGER",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "MySQLTypeCompiler.visit_BIGINT": {
            "name": "visit_BIGINT",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "MySQLTypeCompiler.visit_MEDIUMINT": {
            "name": "visit_MEDIUMINT",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "MySQLTypeCompiler.visit_TINYINT": {
            "name": "visit_TINYINT",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "MySQLTypeCompiler.visit_SMALLINT": {
            "name": "visit_SMALLINT",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "MySQLTypeCompiler.visit_BIT": {
            "name": "visit_BIT",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "MySQLTypeCompiler.visit_DATETIME": {
            "name": "visit_DATETIME",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "MySQLTypeCompiler.visit_DATE": {
            "name": "visit_DATE",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "MySQLTypeCompiler.visit_TIME": {
            "name": "visit_TIME",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "MySQLTypeCompiler.visit_TIMESTAMP": {
            "name": "visit_TIMESTAMP",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "MySQLTypeCompiler.visit_YEAR": {
            "name": "visit_YEAR",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "MySQLTypeCompiler.visit_TEXT": {
            "name": "visit_TEXT",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "MySQLTypeCompiler.visit_TINYTEXT": {
            "name": "visit_TINYTEXT",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "MySQLTypeCompiler.visit_MEDIUMTEXT": {
            "name": "visit_MEDIUMTEXT",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "MySQLTypeCompiler.visit_LONGTEXT": {
            "name": "visit_LONGTEXT",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "MySQLTypeCompiler.visit_VARCHAR": {
            "name": "visit_VARCHAR",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "MySQLTypeCompiler.visit_CHAR": {
            "name": "visit_CHAR",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "MySQLTypeCompiler.visit_NVARCHAR": {
            "name": "visit_NVARCHAR",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "MySQLTypeCompiler.visit_NCHAR": {
            "name": "visit_NCHAR",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "MySQLTypeCompiler.visit_VARBINARY": {
            "name": "visit_VARBINARY",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "MySQLTypeCompiler.visit_JSON": {
            "name": "visit_JSON",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "MySQLTypeCompiler.visit_large_binary": {
            "name": "visit_large_binary",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "MySQLTypeCompiler.visit_enum": {
            "name": "visit_enum",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "MySQLTypeCompiler.visit_BLOB": {
            "name": "visit_BLOB",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "MySQLTypeCompiler.visit_TINYBLOB": {
            "name": "visit_TINYBLOB",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "MySQLTypeCompiler.visit_MEDIUMBLOB": {
            "name": "visit_MEDIUMBLOB",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "MySQLTypeCompiler.visit_LONGBLOB": {
            "name": "visit_LONGBLOB",
            "location": 137,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "MySQLTypeCompiler.visit_ENUM": {
            "name": "visit_ENUM",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "MySQLTypeCompiler.visit_SET": {
            "name": "visit_SET",
            "location": 139,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "MySQLTypeCompiler.visit_BOOLEAN": {
            "name": "visit_BOOLEAN",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "type": []
            }
        },
        "MySQLIdentifierPreparer.__init__": {
            "name": "__init__",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": [],
                "server_ansiquotes": []
            }
        },
        "MySQLDialect.__init__": {
            "name": "__init__",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "isolation_level": [],
                "json_serializer": [],
                "json_deserializer": []
            }
        },
        "MySQLDialect.on_connect": {
            "name": "on_connect",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MySQLDialect.set_isolation_level": {
            "name": "set_isolation_level",
            "location": 168,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "level": []
            }
        },
        "MySQLDialect.get_isolation_level": {
            "name": "get_isolation_level",
            "location": 169,
            "return": [],
            "arguments": {
                "self": [],
                "connection": []
            }
        },
        "MySQLDialect.do_commit": {
            "name": "do_commit",
            "location": 170,
            "return": [],
            "arguments": {
                "self": [],
                "dbapi_connection": []
            }
        },
        "MySQLDialect.do_rollback": {
            "name": "do_rollback",
            "location": 171,
            "return": [],
            "arguments": {
                "self": [],
                "dbapi_connection": []
            }
        },
        "MySQLDialect.do_begin_twophase": {
            "name": "do_begin_twophase",
            "location": 172,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "xid": []
            }
        },
        "MySQLDialect.do_prepare_twophase": {
            "name": "do_prepare_twophase",
            "location": 173,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "xid": []
            }
        },
        "MySQLDialect.do_rollback_twophase": {
            "name": "do_rollback_twophase",
            "location": 174,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "xid": [],
                "is_prepared": [],
                "recover": []
            }
        },
        "MySQLDialect.do_commit_twophase": {
            "name": "do_commit_twophase",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "xid": [],
                "is_prepared": [],
                "recover": []
            }
        },
        "MySQLDialect.do_recover_twophase": {
            "name": "do_recover_twophase",
            "location": 176,
            "return": [],
            "arguments": {
                "self": [],
                "connection": []
            }
        },
        "MySQLDialect.is_disconnect": {
            "name": "is_disconnect",
            "location": 177,
            "return": [],
            "arguments": {
                "self": [],
                "e": [],
                "connection": [],
                "cursor": []
            }
        },
        "MySQLDialect.has_table": {
            "name": "has_table",
            "location": 178,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "table_name": [],
                "schema": []
            }
        },
        "MySQLDialect.initialize": {
            "name": "initialize",
            "location": 180,
            "return": [],
            "arguments": {
                "self": [],
                "connection": []
            }
        },
        "MySQLDialect.get_schema_names": {
            "name": "get_schema_names",
            "location": 181,
            "return": [],
            "arguments": {
                "self": [],
                "connection": []
            }
        },
        "MySQLDialect.get_table_names": {
            "name": "get_table_names",
            "location": 182,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "schema": []
            }
        },
        "MySQLDialect.get_view_names": {
            "name": "get_view_names",
            "location": 183,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "schema": []
            }
        },
        "MySQLDialect.get_table_options": {
            "name": "get_table_options",
            "location": 184,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "table_name": [],
                "schema": []
            }
        },
        "MySQLDialect.get_columns": {
            "name": "get_columns",
            "location": 185,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "table_name": [],
                "schema": []
            }
        },
        "MySQLDialect.get_pk_constraint": {
            "name": "get_pk_constraint",
            "location": 186,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "table_name": [],
                "schema": []
            }
        },
        "MySQLDialect.get_foreign_keys": {
            "name": "get_foreign_keys",
            "location": 187,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "table_name": [],
                "schema": []
            }
        },
        "MySQLDialect.get_indexes": {
            "name": "get_indexes",
            "location": 188,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "table_name": [],
                "schema": []
            }
        },
        "MySQLDialect.get_unique_constraints": {
            "name": "get_unique_constraints",
            "location": 189,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "table_name": [],
                "schema": []
            }
        },
        "MySQLDialect.get_view_definition": {
            "name": "get_view_definition",
            "location": 190,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "view_name": [],
                "schema": []
            }
        },
        "_DecodingRowProxy.__init__": {
            "name": "__init__",
            "location": 195,
            "return": [],
            "arguments": {
                "self": [],
                "rowproxy": [],
                "charset": []
            }
        },
        "_DecodingRowProxy.__getitem__": {
            "name": "__getitem__",
            "location": 196,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "_DecodingRowProxy.__getattr__": {
            "name": "__getattr__",
            "location": 197,
            "return": [],
            "arguments": {
                "self": [],
                "attr": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/dialects/mysql/cymysql.py": {
        "_cymysqlBIT.result_processor": {
            "name": "result_processor",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": [],
                "coltype": []
            }
        },
        "MySQLDialect_cymysql.dbapi": {
            "name": "dbapi",
            "location": 20,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "MySQLDialect_cymysql.is_disconnect": {
            "name": "is_disconnect",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "e": [],
                "connection": [],
                "cursor": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/dialects/mysql/enumerated.py": {
        "ENUM.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ENUM.adapt": {
            "name": "adapt",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "cls": []
            }
        },
        "SET.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SET.column_expression": {
            "name": "column_expression",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "colexpr": []
            }
        },
        "SET.result_processor": {
            "name": "result_processor",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": [],
                "coltype": []
            }
        },
        "SET.bind_processor": {
            "name": "bind_processor",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": []
            }
        },
        "SET.adapt": {
            "name": "adapt",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "impltype": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/dialects/mysql/gaerdbms.py": {
        "MySQLDialect_gaerdbms.dbapi": {
            "name": "dbapi",
            "location": 10,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "MySQLDialect_gaerdbms.get_pool_class": {
            "name": "get_pool_class",
            "location": 12,
            "return": [],
            "arguments": {
                "cls": [],
                "url": []
            }
        },
        "MySQLDialect_gaerdbms.create_connect_args": {
            "name": "create_connect_args",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "url": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/dialects/mysql/json.py": {
        "_FormatTypeMixin.bind_processor": {
            "name": "bind_processor",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": []
            }
        },
        "_FormatTypeMixin.literal_processor": {
            "name": "literal_processor",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/dialects/mysql/mysqlconnector.py": {
        "MySQLExecutionContext_mysqlconnector.get_lastrowid": {
            "name": "get_lastrowid",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MySQLCompiler_mysqlconnector.visit_mod_binary": {
            "name": "visit_mod_binary",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "binary": [],
                "operator": []
            }
        },
        "MySQLCompiler_mysqlconnector.post_process_text": {
            "name": "post_process_text",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "MySQLCompiler_mysqlconnector.escape_literal_column": {
            "name": "escape_literal_column",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "_myconnpyBIT.result_processor": {
            "name": "result_processor",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": [],
                "coltype": []
            }
        },
        "MySQLDialect_mysqlconnector.supports_unicode_statements": {
            "name": "supports_unicode_statements",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MySQLDialect_mysqlconnector.dbapi": {
            "name": "dbapi",
            "location": 38,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "MySQLDialect_mysqlconnector.create_connect_args": {
            "name": "create_connect_args",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "MySQLDialect_mysqlconnector.is_disconnect": {
            "name": "is_disconnect",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "e": [],
                "connection": [],
                "cursor": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/dialects/mysql/mysqldb.py": {
        "MySQLExecutionContext_mysqldb.rowcount": {
            "name": "rowcount",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MySQLCompiler_mysqldb.visit_mod_binary": {
            "name": "visit_mod_binary",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "binary": [],
                "operator": []
            }
        },
        "MySQLCompiler_mysqldb.post_process_text": {
            "name": "post_process_text",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "MySQLDialect_mysqldb.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "server_side_cursors": []
            }
        },
        "MySQLDialect_mysqldb.supports_server_side_cursors": {
            "name": "supports_server_side_cursors",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MySQLDialect_mysqldb.dbapi": {
            "name": "dbapi",
            "location": 32,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "MySQLDialect_mysqldb.do_executemany": {
            "name": "do_executemany",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "cursor": [],
                "statement": [],
                "parameters": [],
                "context": []
            }
        },
        "MySQLDialect_mysqldb.create_connect_args": {
            "name": "create_connect_args",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "url": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/dialects/mysql/oursql.py": {
        "_oursqlBIT.result_processor": {
            "name": "result_processor",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": [],
                "coltype": []
            }
        },
        "MySQLExecutionContext_oursql.plain_query": {
            "name": "plain_query",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MySQLDialect_oursql.dbapi": {
            "name": "dbapi",
            "location": 25,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "MySQLDialect_oursql.do_execute": {
            "name": "do_execute",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "cursor": [],
                "statement": [],
                "parameters": [],
                "context": []
            }
        },
        "MySQLDialect_oursql.do_begin": {
            "name": "do_begin",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "connection": []
            }
        },
        "MySQLDialect_oursql.do_begin_twophase": {
            "name": "do_begin_twophase",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "xid": []
            }
        },
        "MySQLDialect_oursql.do_prepare_twophase": {
            "name": "do_prepare_twophase",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "xid": []
            }
        },
        "MySQLDialect_oursql.do_rollback_twophase": {
            "name": "do_rollback_twophase",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "xid": [],
                "is_prepared": [],
                "recover": []
            }
        },
        "MySQLDialect_oursql.do_commit_twophase": {
            "name": "do_commit_twophase",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "xid": [],
                "is_prepared": [],
                "recover": []
            }
        },
        "MySQLDialect_oursql.has_table": {
            "name": "has_table",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "table_name": [],
                "schema": []
            }
        },
        "MySQLDialect_oursql.get_table_options": {
            "name": "get_table_options",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "table_name": [],
                "schema": []
            }
        },
        "MySQLDialect_oursql.get_columns": {
            "name": "get_columns",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "table_name": [],
                "schema": []
            }
        },
        "MySQLDialect_oursql.get_view_names": {
            "name": "get_view_names",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "schema": []
            }
        },
        "MySQLDialect_oursql.get_table_names": {
            "name": "get_table_names",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "schema": []
            }
        },
        "MySQLDialect_oursql.get_schema_names": {
            "name": "get_schema_names",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "connection": []
            }
        },
        "MySQLDialect_oursql.initialize": {
            "name": "initialize",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "connection": []
            }
        },
        "MySQLDialect_oursql.is_disconnect": {
            "name": "is_disconnect",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "e": [],
                "connection": [],
                "cursor": []
            }
        },
        "MySQLDialect_oursql.create_connect_args": {
            "name": "create_connect_args",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "url": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/dialects/mysql/pymysql.py": {
        "MySQLDialect_pymysql.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "server_side_cursors": []
            }
        },
        "MySQLDialect_pymysql.supports_server_side_cursors": {
            "name": "supports_server_side_cursors",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MySQLDialect_pymysql.dbapi": {
            "name": "dbapi",
            "location": 17,
            "return": [],
            "arguments": {
                "cls": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/dialects/mysql/pyodbc.py": {
        "MySQLExecutionContext_pyodbc.get_lastrowid": {
            "name": "get_lastrowid",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MySQLDialect_pyodbc.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/dialects/mysql/reflection.py": {
        "ReflectedState.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MySQLTableDefinitionParser.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": [],
                "preparer": []
            }
        },
        "MySQLTableDefinitionParser.parse": {
            "name": "parse",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "show_create": [],
                "charset": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/dialects/mysql/types.py": {
        "_NumericType.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "unsigned": [],
                "zerofill": []
            }
        },
        "_FloatType.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "precision": [],
                "scale": [],
                "asdecimal": []
            }
        },
        "_IntegerType.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "display_width": []
            }
        },
        "_StringType.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "charset": [],
                "collation": [],
                "ascii": [],
                "binary": [],
                "unicode": [],
                "national": []
            }
        },
        "_MatchType.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NUMERIC.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "precision": [],
                "scale": [],
                "asdecimal": []
            }
        },
        "DECIMAL.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "precision": [],
                "scale": [],
                "asdecimal": []
            }
        },
        "DOUBLE.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "precision": [],
                "scale": [],
                "asdecimal": []
            }
        },
        "REAL.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "precision": [],
                "scale": [],
                "asdecimal": []
            }
        },
        "FLOAT.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "precision": [],
                "scale": [],
                "asdecimal": []
            }
        },
        "FLOAT.bind_processor": {
            "name": "bind_processor",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": []
            }
        },
        "INTEGER.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "display_width": []
            }
        },
        "BIGINT.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "display_width": []
            }
        },
        "MEDIUMINT.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "display_width": []
            }
        },
        "TINYINT.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "display_width": []
            }
        },
        "SMALLINT.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "display_width": []
            }
        },
        "BIT.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "length": []
            }
        },
        "BIT.result_processor": {
            "name": "result_processor",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": [],
                "coltype": []
            }
        },
        "TIME.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "timezone": [],
                "fsp": []
            }
        },
        "TIME.result_processor": {
            "name": "result_processor",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": [],
                "coltype": []
            }
        },
        "TIMESTAMP.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "timezone": [],
                "fsp": []
            }
        },
        "DATETIME.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "timezone": [],
                "fsp": []
            }
        },
        "YEAR.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "display_width": []
            }
        },
        "TEXT.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "length": []
            }
        },
        "TINYTEXT.__init__": {
            "name": "__init__",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MEDIUMTEXT.__init__": {
            "name": "__init__",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LONGTEXT.__init__": {
            "name": "__init__",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VARCHAR.__init__": {
            "name": "__init__",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "length": []
            }
        },
        "CHAR.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "length": []
            }
        },
        "NVARCHAR.__init__": {
            "name": "__init__",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "length": []
            }
        },
        "NCHAR.__init__": {
            "name": "__init__",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "length": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/dialects/mysql/zxjdbc.py": {
        "_ZxJDBCBit.result_processor": {
            "name": "result_processor",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": [],
                "coltype": []
            }
        },
        "MySQLExecutionContext_zxjdbc.get_lastrowid": {
            "name": "get_lastrowid",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/dialects/mysql/__init__.py": {
        "__getattr__": {
            "name": "__getattr__",
            "location": 46,
            "return": [],
            "arguments": {
                "attr": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/dialects/oracle/__init__.py": {
        "__getattr__": {
            "name": "__getattr__",
            "location": 3,
            "return": [],
            "arguments": {
                "attr": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/dialects/postgresql/array.py": {
        "Any": {
            "name": "Any",
            "location": 8,
            "return": [],
            "arguments": {
                "other": [],
                "arrexpr": [],
                "operator": []
            }
        },
        "All": {
            "name": "All",
            "location": 9,
            "return": [],
            "arguments": {
                "other": [],
                "arrexpr": [],
                "operator": []
            }
        },
        "ARRAY.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "item_type": [],
                "as_tuple": [],
                "dimensions": [],
                "zero_indexes": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/dialects/postgresql/base.py": {
        "TIMESTAMP.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "timezone": [],
                "precision": []
            }
        },
        "TIME.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "timezone": [],
                "precision": []
            }
        },
        "INTERVAL.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "precision": [],
                "fields": []
            }
        },
        "INTERVAL.adapt_emulated_to_native": {
            "name": "adapt_emulated_to_native",
            "location": 57,
            "return": [],
            "arguments": {
                "cls": [],
                "interval": []
            }
        },
        "INTERVAL.python_type": {
            "name": "python_type",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BIT.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "length": [],
                "varying": []
            }
        },
        "UUID.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "as_uuid": []
            }
        },
        "UUID.bind_processor": {
            "name": "bind_processor",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": []
            }
        },
        "UUID.result_processor": {
            "name": "result_processor",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": [],
                "coltype": []
            }
        },
        "ENUM.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ENUM.adapt_emulated_to_native": {
            "name": "adapt_emulated_to_native",
            "location": 85,
            "return": [],
            "arguments": {
                "cls": [],
                "impl": []
            }
        },
        "ENUM.create": {
            "name": "create",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "bind": [],
                "checkfirst": []
            }
        },
        "ENUM.drop": {
            "name": "drop",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "bind": [],
                "checkfirst": []
            }
        },
        "PGCompiler.visit_array": {
            "name": "visit_array",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "element": []
            }
        },
        "PGCompiler.visit_slice": {
            "name": "visit_slice",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "element": []
            }
        },
        "PGCompiler.visit_json_getitem_op_binary": {
            "name": "visit_json_getitem_op_binary",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "binary": [],
                "operator": []
            }
        },
        "PGCompiler.visit_json_path_getitem_op_binary": {
            "name": "visit_json_path_getitem_op_binary",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "binary": [],
                "operator": []
            }
        },
        "PGCompiler.visit_getitem_binary": {
            "name": "visit_getitem_binary",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "binary": [],
                "operator": []
            }
        },
        "PGCompiler.visit_aggregate_order_by": {
            "name": "visit_aggregate_order_by",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "element": []
            }
        },
        "PGCompiler.visit_match_op_binary": {
            "name": "visit_match_op_binary",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "binary": [],
                "operator": []
            }
        },
        "PGCompiler.visit_ilike_op_binary": {
            "name": "visit_ilike_op_binary",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "binary": [],
                "operator": []
            }
        },
        "PGCompiler.visit_notilike_op_binary": {
            "name": "visit_notilike_op_binary",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "binary": [],
                "operator": []
            }
        },
        "PGCompiler.render_literal_value": {
            "name": "render_literal_value",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "type_": []
            }
        },
        "PGCompiler.visit_sequence": {
            "name": "visit_sequence",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "sequence": []
            }
        },
        "PGCompiler.limit_clause": {
            "name": "limit_clause",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "select": []
            }
        },
        "PGCompiler.format_from_hint_text": {
            "name": "format_from_hint_text",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "sqltext": [],
                "table": [],
                "hint": [],
                "iscrud": []
            }
        },
        "PGCompiler.get_select_precolumns": {
            "name": "get_select_precolumns",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "select": []
            }
        },
        "PGCompiler.for_update_clause": {
            "name": "for_update_clause",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "select": []
            }
        },
        "PGCompiler.returning_clause": {
            "name": "returning_clause",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "stmt": [],
                "returning_cols": []
            }
        },
        "PGCompiler.visit_substring_func": {
            "name": "visit_substring_func",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "PGCompiler.visit_on_conflict_do_nothing": {
            "name": "visit_on_conflict_do_nothing",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "on_conflict": []
            }
        },
        "PGCompiler.visit_on_conflict_do_update": {
            "name": "visit_on_conflict_do_update",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "on_conflict": []
            }
        },
        "PGCompiler.update_from_clause": {
            "name": "update_from_clause",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "update_stmt": [],
                "from_table": [],
                "extra_froms": [],
                "from_hints": []
            }
        },
        "PGCompiler.delete_extra_from_clause": {
            "name": "delete_extra_from_clause",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "update_stmt": [],
                "from_table": [],
                "extra_froms": [],
                "from_hints": []
            }
        },
        "PGDDLCompiler.get_column_specification": {
            "name": "get_column_specification",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "column": []
            }
        },
        "PGDDLCompiler.visit_create_enum_type": {
            "name": "visit_create_enum_type",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "create": []
            }
        },
        "PGDDLCompiler.visit_drop_enum_type": {
            "name": "visit_drop_enum_type",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "drop": []
            }
        },
        "PGDDLCompiler.visit_create_index": {
            "name": "visit_create_index",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "create": []
            }
        },
        "PGDDLCompiler.visit_drop_index": {
            "name": "visit_drop_index",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "drop": []
            }
        },
        "PGDDLCompiler.visit_exclude_constraint": {
            "name": "visit_exclude_constraint",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "constraint": []
            }
        },
        "PGDDLCompiler.post_create_table": {
            "name": "post_create_table",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "table": []
            }
        },
        "PGTypeCompiler.visit_TSVECTOR": {
            "name": "visit_TSVECTOR",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "type": []
            }
        },
        "PGTypeCompiler.visit_INET": {
            "name": "visit_INET",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "PGTypeCompiler.visit_CIDR": {
            "name": "visit_CIDR",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "PGTypeCompiler.visit_MACADDR": {
            "name": "visit_MACADDR",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "PGTypeCompiler.visit_MONEY": {
            "name": "visit_MONEY",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "PGTypeCompiler.visit_OID": {
            "name": "visit_OID",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "PGTypeCompiler.visit_REGCLASS": {
            "name": "visit_REGCLASS",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "PGTypeCompiler.visit_FLOAT": {
            "name": "visit_FLOAT",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "PGTypeCompiler.visit_DOUBLE_PRECISION": {
            "name": "visit_DOUBLE_PRECISION",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "PGTypeCompiler.visit_BIGINT": {
            "name": "visit_BIGINT",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "PGTypeCompiler.visit_HSTORE": {
            "name": "visit_HSTORE",
            "location": 137,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "PGTypeCompiler.visit_JSON": {
            "name": "visit_JSON",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "PGTypeCompiler.visit_JSONB": {
            "name": "visit_JSONB",
            "location": 139,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "PGTypeCompiler.visit_INT4RANGE": {
            "name": "visit_INT4RANGE",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "PGTypeCompiler.visit_INT8RANGE": {
            "name": "visit_INT8RANGE",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "PGTypeCompiler.visit_NUMRANGE": {
            "name": "visit_NUMRANGE",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "PGTypeCompiler.visit_DATERANGE": {
            "name": "visit_DATERANGE",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "PGTypeCompiler.visit_TSRANGE": {
            "name": "visit_TSRANGE",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "PGTypeCompiler.visit_TSTZRANGE": {
            "name": "visit_TSTZRANGE",
            "location": 145,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "PGTypeCompiler.visit_datetime": {
            "name": "visit_datetime",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "PGTypeCompiler.visit_enum": {
            "name": "visit_enum",
            "location": 147,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "PGTypeCompiler.visit_ENUM": {
            "name": "visit_ENUM",
            "location": 148,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "PGTypeCompiler.visit_TIMESTAMP": {
            "name": "visit_TIMESTAMP",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "PGTypeCompiler.visit_TIME": {
            "name": "visit_TIME",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "PGTypeCompiler.visit_INTERVAL": {
            "name": "visit_INTERVAL",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "PGTypeCompiler.visit_BIT": {
            "name": "visit_BIT",
            "location": 152,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "PGTypeCompiler.visit_UUID": {
            "name": "visit_UUID",
            "location": 153,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "PGTypeCompiler.visit_large_binary": {
            "name": "visit_large_binary",
            "location": 154,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "PGTypeCompiler.visit_BYTEA": {
            "name": "visit_BYTEA",
            "location": 155,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "PGTypeCompiler.visit_ARRAY": {
            "name": "visit_ARRAY",
            "location": 156,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "PGIdentifierPreparer.format_type": {
            "name": "format_type",
            "location": 160,
            "return": [],
            "arguments": {
                "self": [],
                "type_": [],
                "use_schema": []
            }
        },
        "PGInspector.__init__": {
            "name": "__init__",
            "location": 163,
            "return": [],
            "arguments": {
                "self": [],
                "conn": []
            }
        },
        "PGInspector.get_table_oid": {
            "name": "get_table_oid",
            "location": 164,
            "return": [],
            "arguments": {
                "self": [],
                "table_name": [],
                "schema": []
            }
        },
        "PGInspector.get_enums": {
            "name": "get_enums",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "schema": []
            }
        },
        "PGInspector.get_foreign_table_names": {
            "name": "get_foreign_table_names",
            "location": 166,
            "return": [],
            "arguments": {
                "self": [],
                "schema": []
            }
        },
        "PGInspector.get_view_names": {
            "name": "get_view_names",
            "location": 167,
            "return": [],
            "arguments": {
                "self": [],
                "schema": [],
                "include": []
            }
        },
        "PGExecutionContext.fire_sequence": {
            "name": "fire_sequence",
            "location": 176,
            "return": [],
            "arguments": {
                "self": [],
                "seq": [],
                "type_": []
            }
        },
        "PGExecutionContext.get_insert_default": {
            "name": "get_insert_default",
            "location": 177,
            "return": [],
            "arguments": {
                "self": [],
                "column": []
            }
        },
        "PGExecutionContext.should_autocommit_text": {
            "name": "should_autocommit_text",
            "location": 178,
            "return": [],
            "arguments": {
                "self": [],
                "statement": []
            }
        },
        "PGDialect.__init__": {
            "name": "__init__",
            "location": 208,
            "return": [],
            "arguments": {
                "self": [],
                "isolation_level": [],
                "json_serializer": [],
                "json_deserializer": []
            }
        },
        "PGDialect.initialize": {
            "name": "initialize",
            "location": 211,
            "return": [],
            "arguments": {
                "self": [],
                "connection": []
            }
        },
        "PGDialect.on_connect": {
            "name": "on_connect",
            "location": 212,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PGDialect.set_isolation_level": {
            "name": "set_isolation_level",
            "location": 213,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "level": []
            }
        },
        "PGDialect.get_isolation_level": {
            "name": "get_isolation_level",
            "location": 214,
            "return": [],
            "arguments": {
                "self": [],
                "connection": []
            }
        },
        "PGDialect.do_begin_twophase": {
            "name": "do_begin_twophase",
            "location": 215,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "xid": []
            }
        },
        "PGDialect.do_prepare_twophase": {
            "name": "do_prepare_twophase",
            "location": 216,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "xid": []
            }
        },
        "PGDialect.do_rollback_twophase": {
            "name": "do_rollback_twophase",
            "location": 217,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "xid": [],
                "is_prepared": [],
                "recover": []
            }
        },
        "PGDialect.do_commit_twophase": {
            "name": "do_commit_twophase",
            "location": 218,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "xid": [],
                "is_prepared": [],
                "recover": []
            }
        },
        "PGDialect.do_recover_twophase": {
            "name": "do_recover_twophase",
            "location": 219,
            "return": [],
            "arguments": {
                "self": [],
                "connection": []
            }
        },
        "PGDialect.has_schema": {
            "name": "has_schema",
            "location": 220,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "schema": []
            }
        },
        "PGDialect.has_table": {
            "name": "has_table",
            "location": 221,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "table_name": [],
                "schema": []
            }
        },
        "PGDialect.has_sequence": {
            "name": "has_sequence",
            "location": 222,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "sequence_name": [],
                "schema": []
            }
        },
        "PGDialect.has_type": {
            "name": "has_type",
            "location": 223,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "type_name": [],
                "schema": []
            }
        },
        "PGDialect.get_table_oid": {
            "name": "get_table_oid",
            "location": 224,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "table_name": [],
                "schema": []
            }
        },
        "PGDialect.get_schema_names": {
            "name": "get_schema_names",
            "location": 225,
            "return": [],
            "arguments": {
                "self": [],
                "connection": []
            }
        },
        "PGDialect.get_table_names": {
            "name": "get_table_names",
            "location": 226,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "schema": []
            }
        },
        "PGDialect.get_view_names": {
            "name": "get_view_names",
            "location": 227,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "schema": [],
                "include": []
            }
        },
        "PGDialect.get_view_definition": {
            "name": "get_view_definition",
            "location": 228,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "view_name": [],
                "schema": []
            }
        },
        "PGDialect.get_columns": {
            "name": "get_columns",
            "location": 229,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "table_name": [],
                "schema": []
            }
        },
        "PGDialect.get_pk_constraint": {
            "name": "get_pk_constraint",
            "location": 230,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "table_name": [],
                "schema": []
            }
        },
        "PGDialect.get_foreign_keys": {
            "name": "get_foreign_keys",
            "location": 231,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "table_name": [],
                "schema": [],
                "postgresql_ignore_search_path": []
            }
        },
        "PGDialect.get_indexes": {
            "name": "get_indexes",
            "location": 233,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "table_name": [],
                "schema": []
            }
        },
        "PGDialect.get_unique_constraints": {
            "name": "get_unique_constraints",
            "location": 234,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "table_name": [],
                "schema": []
            }
        },
        "PGDialect.get_table_comment": {
            "name": "get_table_comment",
            "location": 235,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "table_name": [],
                "schema": []
            }
        },
        "PGDialect.get_check_constraints": {
            "name": "get_check_constraints",
            "location": 236,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "table_name": [],
                "schema": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/dialects/postgresql/dml.py": {
        "Insert.excluded": {
            "name": "excluded",
            "location": 6,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Insert.on_conflict_do_update": {
            "name": "on_conflict_do_update",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "constraint": [],
                "index_elements": [],
                "index_where": [],
                "set_": [],
                "where": []
            }
        },
        "Insert.on_conflict_do_nothing": {
            "name": "on_conflict_do_nothing",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "constraint": [],
                "index_elements": [],
                "index_where": []
            }
        },
        "OnConflictClause.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "constraint": [],
                "index_elements": [],
                "index_where": []
            }
        },
        "OnConflictDoUpdate.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "constraint": [],
                "index_elements": [],
                "index_where": [],
                "set_": [],
                "where": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/dialects/postgresql/ext.py": {
        "array_agg": {
            "name": "array_agg",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "aggregate_order_by.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "target": []
            }
        },
        "aggregate_order_by.self_group": {
            "name": "self_group",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "against": []
            }
        },
        "aggregate_order_by.get_children": {
            "name": "get_children",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExcludeConstraint.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExcludeConstraint.copy": {
            "name": "copy",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/dialects/postgresql/hstore.py": {
        "HSTORE.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "text_type": []
            }
        },
        "HSTORE.bind_processor": {
            "name": "bind_processor",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": []
            }
        },
        "HSTORE.result_processor": {
            "name": "result_processor",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": [],
                "coltype": []
            }
        },
        "HSTORE.Comparator.has_key": {
            "name": "has_key",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "HSTORE.Comparator.has_all": {
            "name": "has_all",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "HSTORE.Comparator.has_any": {
            "name": "has_any",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "HSTORE.Comparator.contains": {
            "name": "contains",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "HSTORE.Comparator.contained_by": {
            "name": "contained_by",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "HSTORE.Comparator.defined": {
            "name": "defined",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "HSTORE.Comparator.delete": {
            "name": "delete",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "HSTORE.Comparator.slice": {
            "name": "slice",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "array": []
            }
        },
        "HSTORE.Comparator.keys": {
            "name": "keys",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HSTORE.Comparator.vals": {
            "name": "vals",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HSTORE.Comparator.array": {
            "name": "array",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HSTORE.Comparator.matrix": {
            "name": "matrix",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/dialects/postgresql/json.py": {},
    "sqlalchemy-stubs-master/sqlalchemy-stubs/dialects/postgresql/ranges.py": {
        "RangeOperators.comparator_factory.__ne__": {
            "name": "__ne__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RangeOperators.comparator_factory.contains": {
            "name": "contains",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RangeOperators.comparator_factory.contained_by": {
            "name": "contained_by",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RangeOperators.comparator_factory.overlaps": {
            "name": "overlaps",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RangeOperators.comparator_factory.strictly_left_of": {
            "name": "strictly_left_of",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RangeOperators.comparator_factory.strictly_right_of": {
            "name": "strictly_right_of",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RangeOperators.comparator_factory.not_extend_right_of": {
            "name": "not_extend_right_of",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RangeOperators.comparator_factory.not_extend_left_of": {
            "name": "not_extend_left_of",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RangeOperators.comparator_factory.adjacent_to": {
            "name": "adjacent_to",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RangeOperators.comparator_factory.__add__": {
            "name": "__add__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/dialects/postgresql/__init__.py": {
        "__getattr__": {
            "name": "__getattr__",
            "location": 25,
            "return": [],
            "arguments": {
                "attr": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/dialects/sqlite/__init__.py": {
        "__getattr__": {
            "name": "__getattr__",
            "location": 3,
            "return": [],
            "arguments": {
                "attr": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/dialects/sybase/__init__.py": {
        "__getattr__": {
            "name": "__getattr__",
            "location": 3,
            "return": [],
            "arguments": {
                "attr": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/engine/base.py": {
        "Transaction.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "parent": []
            }
        },
        "Transaction.close": {
            "name": "close",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Transaction.rollback": {
            "name": "rollback",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Transaction.commit": {
            "name": "commit",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Transaction.__enter__": {
            "name": "__enter__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Transaction.__exit__": {
            "name": "__exit__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "type": [],
                "value": [],
                "traceback": []
            }
        },
        "RootTransaction.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "connection": []
            }
        },
        "NestedTransaction.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "parent": []
            }
        },
        "TwoPhaseTransaction.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "xid": []
            }
        },
        "TwoPhaseTransaction.prepare": {
            "name": "prepare",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Connection.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "engine": [],
                "connection": [],
                "close_with_result": [],
                "_branch_from": [],
                "_execution_options": [],
                "_dispatch": [],
                "_has_events": []
            }
        },
        "Connection.__enter__": {
            "name": "__enter__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Connection.__exit__": {
            "name": "__exit__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "type": [],
                "value": [],
                "traceback": []
            }
        },
        "Connection.execution_options": {
            "name": "execution_options",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Connection.closed": {
            "name": "closed",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Connection.invalidated": {
            "name": "invalidated",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Connection.connection": {
            "name": "connection",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Connection.get_isolation_level": {
            "name": "get_isolation_level",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Connection.default_isolation_level": {
            "name": "default_isolation_level",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Connection.info": {
            "name": "info",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Connection.connect": {
            "name": "connect",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Connection.contextual_connect": {
            "name": "contextual_connect",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Connection.invalidate": {
            "name": "invalidate",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "exception": []
            }
        },
        "Connection.detach": {
            "name": "detach",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Connection.begin": {
            "name": "begin",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Connection.begin_nested": {
            "name": "begin_nested",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Connection.begin_twophase": {
            "name": "begin_twophase",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "xid": []
            }
        },
        "Connection.recover_twophase": {
            "name": "recover_twophase",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Connection.rollback_prepared": {
            "name": "rollback_prepared",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "xid": [],
                "recover": []
            }
        },
        "Connection.commit_prepared": {
            "name": "commit_prepared",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "xid": [],
                "recover": []
            }
        },
        "Connection.in_transaction": {
            "name": "in_transaction",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Connection.close": {
            "name": "close",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Connection.scalar": {
            "name": "scalar",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "object": []
            }
        },
        "Connection.execute": {
            "name": "execute",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "object": []
            }
        },
        "Connection.transaction": {
            "name": "transaction",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "callable_": []
            }
        },
        "Connection.run_callable": {
            "name": "run_callable",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "callable_": []
            }
        },
        "ExceptionContextImpl.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "exception": [],
                "sqlalchemy_exception": [],
                "engine": [],
                "connection": [],
                "cursor": [],
                "statement": [],
                "parameters": [],
                "context": [],
                "is_disconnect": [],
                "invalidate_pool_on_disconnect": []
            }
        },
        "Engine.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "pool": [],
                "dialect": [],
                "url": [],
                "logging_name": [],
                "echo": [],
                "proxy": [],
                "execution_options": []
            }
        },
        "Engine.update_execution_options": {
            "name": "update_execution_options",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Engine.execution_options": {
            "name": "execution_options",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Engine.name": {
            "name": "name",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Engine.driver": {
            "name": "driver",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Engine.dispose": {
            "name": "dispose",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Engine.begin": {
            "name": "begin",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "close_with_result": []
            }
        },
        "Engine.transaction": {
            "name": "transaction",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "callable_": []
            }
        },
        "Engine.run_callable": {
            "name": "run_callable",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "callable_": []
            }
        },
        "Engine.execute": {
            "name": "execute",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "object": []
            }
        },
        "Engine.scalar": {
            "name": "scalar",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "statement": []
            }
        },
        "Engine.connect": {
            "name": "connect",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Engine.contextual_connect": {
            "name": "contextual_connect",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "close_with_result": []
            }
        },
        "Engine.table_names": {
            "name": "table_names",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "schema": [],
                "connection": []
            }
        },
        "Engine.has_table": {
            "name": "has_table",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "table_name": [],
                "schema": []
            }
        },
        "Engine.raw_connection": {
            "name": "raw_connection",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "_connection": []
            }
        },
        "OptionEngine.__init__": {
            "name": "__init__",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "proxied": [],
                "execution_options": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/engine/default.py": {
        "DefaultDialect.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "convert_unicode": [],
                "encoding": [],
                "paramstyle": [],
                "dbapi": [],
                "implicit_returning": [],
                "supports_right_nested_joins": [],
                "case_sensitive": [],
                "supports_native_boolean": [],
                "label_length": []
            }
        },
        "DefaultDialect.dialect_description": {
            "name": "dialect_description",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DefaultDialect.get_pool_class": {
            "name": "get_pool_class",
            "location": 64,
            "return": [],
            "arguments": {
                "cls": [],
                "url": []
            }
        },
        "DefaultDialect.initialize": {
            "name": "initialize",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "connection": []
            }
        },
        "DefaultDialect.on_connect": {
            "name": "on_connect",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DefaultDialect.type_descriptor": {
            "name": "type_descriptor",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "typeobj": []
            }
        },
        "DefaultDialect.reflecttable": {
            "name": "reflecttable",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "table": [],
                "include_columns": [],
                "exclude_columns": []
            }
        },
        "DefaultDialect.get_pk_constraint": {
            "name": "get_pk_constraint",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "table_name": [],
                "schema": []
            }
        },
        "DefaultDialect.validate_identifier": {
            "name": "validate_identifier",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "ident": []
            }
        },
        "DefaultDialect.connect": {
            "name": "connect",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DefaultDialect.create_connect_args": {
            "name": "create_connect_args",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "DefaultDialect.set_engine_execution_options": {
            "name": "set_engine_execution_options",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "engine": [],
                "opts": []
            }
        },
        "DefaultDialect.set_connection_execution_options": {
            "name": "set_connection_execution_options",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "opts": []
            }
        },
        "DefaultDialect.do_begin": {
            "name": "do_begin",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "dbapi_connection": []
            }
        },
        "DefaultDialect.do_rollback": {
            "name": "do_rollback",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "dbapi_connection": []
            }
        },
        "DefaultDialect.do_commit": {
            "name": "do_commit",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "dbapi_connection": []
            }
        },
        "DefaultDialect.do_close": {
            "name": "do_close",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "dbapi_connection": []
            }
        },
        "DefaultDialect.create_xid": {
            "name": "create_xid",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DefaultDialect.do_savepoint": {
            "name": "do_savepoint",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "name": []
            }
        },
        "DefaultDialect.do_rollback_to_savepoint": {
            "name": "do_rollback_to_savepoint",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "name": []
            }
        },
        "DefaultDialect.do_release_savepoint": {
            "name": "do_release_savepoint",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "name": []
            }
        },
        "DefaultDialect.do_executemany": {
            "name": "do_executemany",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "cursor": [],
                "statement": [],
                "parameters": [],
                "context": []
            }
        },
        "DefaultDialect.do_execute": {
            "name": "do_execute",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "cursor": [],
                "statement": [],
                "parameters": [],
                "context": []
            }
        },
        "DefaultDialect.do_execute_no_params": {
            "name": "do_execute_no_params",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DefaultDialect.is_disconnect": {
            "name": "is_disconnect",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "e": [],
                "connection": [],
                "cursor": []
            }
        },
        "DefaultDialect.reset_isolation_level": {
            "name": "reset_isolation_level",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "dbapi_conn": []
            }
        },
        "DefaultExecutionContext.engine": {
            "name": "engine",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DefaultExecutionContext.postfetch_cols": {
            "name": "postfetch_cols",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DefaultExecutionContext.prefetch_cols": {
            "name": "prefetch_cols",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DefaultExecutionContext.returning_cols": {
            "name": "returning_cols",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DefaultExecutionContext.no_parameters": {
            "name": "no_parameters",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DefaultExecutionContext.should_autocommit": {
            "name": "should_autocommit",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DefaultExecutionContext.connection": {
            "name": "connection",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DefaultExecutionContext.should_autocommit_text": {
            "name": "should_autocommit_text",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "statement": []
            }
        },
        "DefaultExecutionContext.create_cursor": {
            "name": "create_cursor",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DefaultExecutionContext.create_server_side_cursor": {
            "name": "create_server_side_cursor",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DefaultExecutionContext.pre_exec": {
            "name": "pre_exec",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DefaultExecutionContext.post_exec": {
            "name": "post_exec",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DefaultExecutionContext.get_result_processor": {
            "name": "get_result_processor",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "type_": [],
                "colname": [],
                "coltype": []
            }
        },
        "DefaultExecutionContext.get_lastrowid": {
            "name": "get_lastrowid",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DefaultExecutionContext.handle_dbapi_exception": {
            "name": "handle_dbapi_exception",
            "location": 137,
            "return": [],
            "arguments": {
                "self": [],
                "e": []
            }
        },
        "DefaultExecutionContext.get_result_proxy": {
            "name": "get_result_proxy",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DefaultExecutionContext.rowcount": {
            "name": "rowcount",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DefaultExecutionContext.supports_sane_rowcount": {
            "name": "supports_sane_rowcount",
            "location": 141,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DefaultExecutionContext.supports_sane_multi_rowcount": {
            "name": "supports_sane_multi_rowcount",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DefaultExecutionContext.lastrow_has_defaults": {
            "name": "lastrow_has_defaults",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DefaultExecutionContext.set_input_sizes": {
            "name": "set_input_sizes",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "translate": [],
                "exclude_types": []
            }
        },
        "DefaultExecutionContext.get_insert_default": {
            "name": "get_insert_default",
            "location": 145,
            "return": [],
            "arguments": {
                "self": [],
                "column": []
            }
        },
        "DefaultExecutionContext.get_update_default": {
            "name": "get_update_default",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "column": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/engine/interfaces.py": {
        "Dialect.name": {
            "name": "name",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dialect.create_connect_args": {
            "name": "create_connect_args",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "Dialect.type_descriptor": {
            "name": "type_descriptor",
            "location": 14,
            "return": [],
            "arguments": {
                "cls": [],
                "typeobj": []
            }
        },
        "Dialect.initialize": {
            "name": "initialize",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "connection": []
            }
        },
        "Dialect.reflecttable": {
            "name": "reflecttable",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "table": [],
                "include_columns": [],
                "exclude_columns": []
            }
        },
        "Dialect.get_columns": {
            "name": "get_columns",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "table_name": [],
                "schema": []
            }
        },
        "Dialect.get_primary_keys": {
            "name": "get_primary_keys",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "table_name": [],
                "schema": []
            }
        },
        "Dialect.get_pk_constraint": {
            "name": "get_pk_constraint",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "table_name": [],
                "schema": []
            }
        },
        "Dialect.get_foreign_keys": {
            "name": "get_foreign_keys",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "table_name": [],
                "schema": []
            }
        },
        "Dialect.get_table_names": {
            "name": "get_table_names",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "schema": []
            }
        },
        "Dialect.get_temp_table_names": {
            "name": "get_temp_table_names",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "schema": []
            }
        },
        "Dialect.get_view_names": {
            "name": "get_view_names",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "schema": []
            }
        },
        "Dialect.get_temp_view_names": {
            "name": "get_temp_view_names",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "schema": []
            }
        },
        "Dialect.get_view_definition": {
            "name": "get_view_definition",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "view_name": [],
                "schema": []
            }
        },
        "Dialect.get_indexes": {
            "name": "get_indexes",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "table_name": [],
                "schema": []
            }
        },
        "Dialect.get_unique_constraints": {
            "name": "get_unique_constraints",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "table_name": [],
                "schema": []
            }
        },
        "Dialect.get_check_constraints": {
            "name": "get_check_constraints",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "table_name": [],
                "schema": []
            }
        },
        "Dialect.normalize_name": {
            "name": "normalize_name",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Dialect.denormalize_name": {
            "name": "denormalize_name",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Dialect.has_table": {
            "name": "has_table",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "table_name": [],
                "schema": []
            }
        },
        "Dialect.has_sequence": {
            "name": "has_sequence",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "sequence_name": [],
                "schema": []
            }
        },
        "Dialect.do_begin": {
            "name": "do_begin",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "dbapi_connection": []
            }
        },
        "Dialect.do_rollback": {
            "name": "do_rollback",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "dbapi_connection": []
            }
        },
        "Dialect.do_commit": {
            "name": "do_commit",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "dbapi_connection": []
            }
        },
        "Dialect.do_close": {
            "name": "do_close",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "dbapi_connection": []
            }
        },
        "Dialect.create_xid": {
            "name": "create_xid",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dialect.do_savepoint": {
            "name": "do_savepoint",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "name": []
            }
        },
        "Dialect.do_rollback_to_savepoint": {
            "name": "do_rollback_to_savepoint",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "name": []
            }
        },
        "Dialect.do_release_savepoint": {
            "name": "do_release_savepoint",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "name": []
            }
        },
        "Dialect.do_begin_twophase": {
            "name": "do_begin_twophase",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "xid": []
            }
        },
        "Dialect.do_prepare_twophase": {
            "name": "do_prepare_twophase",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "xid": []
            }
        },
        "Dialect.do_rollback_twophase": {
            "name": "do_rollback_twophase",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "xid": [],
                "is_prepared": [],
                "recover": []
            }
        },
        "Dialect.do_commit_twophase": {
            "name": "do_commit_twophase",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "xid": [],
                "is_prepared": [],
                "recover": []
            }
        },
        "Dialect.do_recover_twophase": {
            "name": "do_recover_twophase",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "connection": []
            }
        },
        "Dialect.do_executemany": {
            "name": "do_executemany",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "cursor": [],
                "statement": [],
                "parameters": [],
                "context": []
            }
        },
        "Dialect.do_execute": {
            "name": "do_execute",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "cursor": [],
                "statement": [],
                "parameters": [],
                "context": []
            }
        },
        "Dialect.do_execute_no_params": {
            "name": "do_execute_no_params",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "cursor": [],
                "statement": [],
                "parameters": [],
                "context": []
            }
        },
        "Dialect.is_disconnect": {
            "name": "is_disconnect",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "e": [],
                "connection": [],
                "cursor": []
            }
        },
        "Dialect.connect": {
            "name": "connect",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dialect.reset_isolation_level": {
            "name": "reset_isolation_level",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "dbapi_conn": []
            }
        },
        "Dialect.set_isolation_level": {
            "name": "set_isolation_level",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "dbapi_conn": [],
                "level": []
            }
        },
        "Dialect.get_isolation_level": {
            "name": "get_isolation_level",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "dbapi_conn": []
            }
        },
        "Dialect.get_dialect_cls": {
            "name": "get_dialect_cls",
            "location": 55,
            "return": [],
            "arguments": {
                "cls": [],
                "url": []
            }
        },
        "Dialect.engine_created": {
            "name": "engine_created",
            "location": 57,
            "return": [],
            "arguments": {
                "cls": [],
                "engine": []
            }
        },
        "CreateEnginePlugin.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "url": [],
                "kwargs": []
            }
        },
        "CreateEnginePlugin.handle_dialect_kwargs": {
            "name": "handle_dialect_kwargs",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "dialect_cls": [],
                "dialect_args": []
            }
        },
        "CreateEnginePlugin.handle_pool_kwargs": {
            "name": "handle_pool_kwargs",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "pool_cls": [],
                "pool_args": []
            }
        },
        "CreateEnginePlugin.engine_created": {
            "name": "engine_created",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "engine": []
            }
        },
        "ExecutionContext.create_cursor": {
            "name": "create_cursor",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExecutionContext.pre_exec": {
            "name": "pre_exec",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExecutionContext.post_exec": {
            "name": "post_exec",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExecutionContext.result": {
            "name": "result",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExecutionContext.handle_dbapi_exception": {
            "name": "handle_dbapi_exception",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "e": []
            }
        },
        "ExecutionContext.should_autocommit_text": {
            "name": "should_autocommit_text",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "statement": []
            }
        },
        "ExecutionContext.lastrow_has_defaults": {
            "name": "lastrow_has_defaults",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExecutionContext.get_rowcount": {
            "name": "get_rowcount",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Connectable.connect": {
            "name": "connect",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Connectable.contextual_connect": {
            "name": "contextual_connect",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Connectable.create": {
            "name": "create",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "entity": []
            }
        },
        "Connectable.drop": {
            "name": "drop",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "entity": []
            }
        },
        "Connectable.execute": {
            "name": "execute",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "object": []
            }
        },
        "Connectable.scalar": {
            "name": "scalar",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "object": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/engine/reflection.py": {
        "cache": {
            "name": "cache",
            "location": 3,
            "return": [],
            "arguments": {
                "fn": [],
                "self": [],
                "con": []
            }
        },
        "Inspector.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "bind": []
            }
        },
        "Inspector.from_engine": {
            "name": "from_engine",
            "location": 12,
            "return": [],
            "arguments": {
                "cls": [],
                "bind": []
            }
        },
        "Inspector.default_schema_name": {
            "name": "default_schema_name",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Inspector.get_schema_names": {
            "name": "get_schema_names",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Inspector.get_table_names": {
            "name": "get_table_names",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "schema": [],
                "order_by": []
            }
        },
        "Inspector.get_sorted_table_and_fkc_names": {
            "name": "get_sorted_table_and_fkc_names",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "schema": []
            }
        },
        "Inspector.get_temp_table_names": {
            "name": "get_temp_table_names",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Inspector.get_temp_view_names": {
            "name": "get_temp_view_names",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Inspector.get_table_options": {
            "name": "get_table_options",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "table_name": [],
                "schema": []
            }
        },
        "Inspector.get_view_names": {
            "name": "get_view_names",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "schema": []
            }
        },
        "Inspector.get_view_definition": {
            "name": "get_view_definition",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "view_name": [],
                "schema": []
            }
        },
        "Inspector.get_columns": {
            "name": "get_columns",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "table_name": [],
                "schema": []
            }
        },
        "Inspector.get_primary_keys": {
            "name": "get_primary_keys",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "table_name": [],
                "schema": []
            }
        },
        "Inspector.get_pk_constraint": {
            "name": "get_pk_constraint",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "table_name": [],
                "schema": []
            }
        },
        "Inspector.get_foreign_keys": {
            "name": "get_foreign_keys",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "table_name": [],
                "schema": []
            }
        },
        "Inspector.get_indexes": {
            "name": "get_indexes",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "table_name": [],
                "schema": []
            }
        },
        "Inspector.get_unique_constraints": {
            "name": "get_unique_constraints",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "table_name": [],
                "schema": []
            }
        },
        "Inspector.get_check_constraints": {
            "name": "get_check_constraints",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "table_name": [],
                "schema": []
            }
        },
        "Inspector.reflecttable": {
            "name": "reflecttable",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "table": [],
                "include_columns": [],
                "exclude_columns": [],
                "_extend_on": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/engine/result.py": {
        "rowproxy_reconstructor": {
            "name": "rowproxy_reconstructor",
            "location": 11,
            "return": [],
            "arguments": {
                "cls": [],
                "state": []
            }
        },
        "BaseRowProxy.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "parent": [],
                "row": [],
                "processors": [],
                "keymap": []
            }
        },
        "BaseRowProxy.__reduce__": {
            "name": "__reduce__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseRowProxy.values": {
            "name": "values",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseRowProxy.__iter__": {
            "name": "__iter__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseRowProxy.__len__": {
            "name": "__len__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseRowProxy.__getitem__": {
            "name": "__getitem__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "BaseRowProxy.__getattr__": {
            "name": "__getattr__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "RowProxy.__contains__": {
            "name": "__contains__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "RowProxy.__lt__": {
            "name": "__lt__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RowProxy.__le__": {
            "name": "__le__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RowProxy.__ge__": {
            "name": "__ge__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RowProxy.__gt__": {
            "name": "__gt__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RowProxy.__eq__": {
            "name": "__eq__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RowProxy.__ne__": {
            "name": "__ne__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RowProxy.has_key": {
            "name": "has_key",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "RowProxy.items": {
            "name": "items",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RowProxy.keys": {
            "name": "keys",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RowProxy.iterkeys": {
            "name": "iterkeys",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RowProxy.itervalues": {
            "name": "itervalues",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ResultMetaData.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "parent": [],
                "cursor_description": []
            }
        },
        "ResultProxy.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "context": []
            }
        },
        "ResultProxy.keys": {
            "name": "keys",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ResultProxy.rowcount": {
            "name": "rowcount",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ResultProxy.lastrowid": {
            "name": "lastrowid",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ResultProxy.returns_rows": {
            "name": "returns_rows",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ResultProxy.is_insert": {
            "name": "is_insert",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ResultProxy.close": {
            "name": "close",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ResultProxy.__iter__": {
            "name": "__iter__",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ResultProxy.__next__": {
            "name": "__next__",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ResultProxy.next": {
            "name": "next",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ResultProxy.inserted_primary_key": {
            "name": "inserted_primary_key",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ResultProxy.last_updated_params": {
            "name": "last_updated_params",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ResultProxy.last_inserted_params": {
            "name": "last_inserted_params",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ResultProxy.returned_defaults": {
            "name": "returned_defaults",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ResultProxy.lastrow_has_defaults": {
            "name": "lastrow_has_defaults",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ResultProxy.postfetch_cols": {
            "name": "postfetch_cols",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ResultProxy.prefetch_cols": {
            "name": "prefetch_cols",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ResultProxy.supports_sane_rowcount": {
            "name": "supports_sane_rowcount",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ResultProxy.supports_sane_multi_rowcount": {
            "name": "supports_sane_multi_rowcount",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ResultProxy.process_rows": {
            "name": "process_rows",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "rows": []
            }
        },
        "ResultProxy.fetchall": {
            "name": "fetchall",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ResultProxy.fetchmany": {
            "name": "fetchmany",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "ResultProxy.fetchone": {
            "name": "fetchone",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ResultProxy.first": {
            "name": "first",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ResultProxy.scalar": {
            "name": "scalar",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BufferedColumnRow.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "parent": [],
                "row": [],
                "processors": [],
                "keymap": []
            }
        },
        "BufferedColumnResultProxy.fetchall": {
            "name": "fetchall",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BufferedColumnResultProxy.fetchmany": {
            "name": "fetchmany",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "size": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/engine/strategies.py": {
        "EngineStrategy.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EngineStrategy.create": {
            "name": "create",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DefaultEngineStrategy.create": {
            "name": "create",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "name_or_url": []
            }
        },
        "MockEngineStrategy.create": {
            "name": "create",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "name_or_url": [],
                "executor": []
            }
        },
        "MockEngineStrategy.MockConnection.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": [],
                "execute": []
            }
        },
        "MockEngineStrategy.MockConnection.contextual_connect": {
            "name": "contextual_connect",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockEngineStrategy.MockConnection.execution_options": {
            "name": "execution_options",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockEngineStrategy.MockConnection.compiler": {
            "name": "compiler",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "statement": [],
                "parameters": []
            }
        },
        "MockEngineStrategy.MockConnection.create": {
            "name": "create",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "entity": []
            }
        },
        "MockEngineStrategy.MockConnection.drop": {
            "name": "drop",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "entity": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/engine/threadlocal.py": {
        "TLConnection.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TLConnection.close": {
            "name": "close",
            "location": 6,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TLEngine.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TLEngine.contextual_connect": {
            "name": "contextual_connect",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TLEngine.begin_twophase": {
            "name": "begin_twophase",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "xid": []
            }
        },
        "TLEngine.begin_nested": {
            "name": "begin_nested",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TLEngine.begin": {
            "name": "begin",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TLEngine.__enter__": {
            "name": "__enter__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TLEngine.__exit__": {
            "name": "__exit__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "type": [],
                "value": [],
                "traceback": []
            }
        },
        "TLEngine.prepare": {
            "name": "prepare",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TLEngine.commit": {
            "name": "commit",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TLEngine.rollback": {
            "name": "rollback",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TLEngine.dispose": {
            "name": "dispose",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TLEngine.closed": {
            "name": "closed",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TLEngine.close": {
            "name": "close",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/engine/url.py": {
        "make_url": {
            "name": "make_url",
            "location": 22,
            "return": [],
            "arguments": {
                "name_or_url": []
            }
        },
        "URL.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "drivername": [],
                "username": [],
                "password": [],
                "host": [],
                "port": [],
                "database": [],
                "query": []
            }
        },
        "URL.__to_string__": {
            "name": "__to_string__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "hide_password": []
            }
        },
        "URL.__hash__": {
            "name": "__hash__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URL.__eq__": {
            "name": "__eq__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "URL.get_backend_name": {
            "name": "get_backend_name",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URL.get_driver_name": {
            "name": "get_driver_name",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URL.get_dialect": {
            "name": "get_dialect",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URL.translate_connect_args": {
            "name": "translate_connect_args",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "names": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/engine/util.py": {
        "connection_memoize": {
            "name": "connection_memoize",
            "location": 1,
            "return": [],
            "arguments": {
                "key": []
            }
        },
        "py_fallback": {
            "name": "py_fallback",
            "location": 2,
            "return": [],
            "arguments": {}
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/engine/__init__.py": {
        "create_engine": {
            "name": "create_engine",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "engine_from_config": {
            "name": "engine_from_config",
            "location": 34,
            "return": [],
            "arguments": {
                "configuration": [],
                "prefix": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/event/api.py": {
        "listen": {
            "name": "listen",
            "location": 6,
            "return": [],
            "arguments": {
                "target": [],
                "identifier": [],
                "fn": []
            }
        },
        "listens_for": {
            "name": "listens_for",
            "location": 7,
            "return": [],
            "arguments": {
                "target": [],
                "identifier": []
            }
        },
        "remove": {
            "name": "remove",
            "location": 8,
            "return": [],
            "arguments": {
                "target": [],
                "identifier": [],
                "fn": []
            }
        },
        "contains": {
            "name": "contains",
            "location": 9,
            "return": [],
            "arguments": {
                "target": [],
                "identifier": [],
                "fn": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/event/attr.py": {},
    "sqlalchemy-stubs-master/sqlalchemy-stubs/event/base.py": {
        "_EventMeta.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [],
            "arguments": {
                "cls": [],
                "classname": [],
                "bases": [],
                "dict_": []
            }
        },
        "dispatcher.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "events": []
            }
        },
        "dispatcher.__get__": {
            "name": "__get__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [],
                "cls": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/event/registry.py": {},
    "sqlalchemy-stubs-master/sqlalchemy-stubs/event/__init__.py": {},
    "sqlalchemy-stubs-master/sqlalchemy-stubs/ext/associationproxy.py": {
        "association_proxy": {
            "name": "association_proxy",
            "location": 4,
            "return": [],
            "arguments": {
                "target_collection": [],
                "attr": []
            }
        },
        "AssociationProxy.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "target_collection": [],
                "attr": [],
                "creator": [],
                "getset_factory": [],
                "proxy_factory": [],
                "proxy_bulk_set": [],
                "info": []
            }
        },
        "AssociationProxy.remote_attr": {
            "name": "remote_attr",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AssociationProxy.local_attr": {
            "name": "local_attr",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AssociationProxy.attr": {
            "name": "attr",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AssociationProxy.target_class": {
            "name": "target_class",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AssociationProxy.scalar": {
            "name": "scalar",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AssociationProxy.__get__": {
            "name": "__get__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [],
                "class_": []
            }
        },
        "AssociationProxy.__set__": {
            "name": "__set__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [],
                "values": []
            }
        },
        "AssociationProxy.__delete__": {
            "name": "__delete__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "AssociationProxy.any": {
            "name": "any",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "criterion": []
            }
        },
        "AssociationProxy.has": {
            "name": "has",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "criterion": []
            }
        },
        "AssociationProxy.contains": {
            "name": "contains",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "AssociationProxy.__eq__": {
            "name": "__eq__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "AssociationProxy.__ne__": {
            "name": "__ne__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "_lazy_collection.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [],
                "target": []
            }
        },
        "_lazy_collection.__call__": {
            "name": "__call__",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_AssociationCollection.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "lazy_collection": [],
                "creator": [],
                "getter": [],
                "setter": [],
                "parent": []
            }
        },
        "_AssociationCollection.__len__": {
            "name": "__len__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_AssociationCollection.__bool__": {
            "name": "__bool__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_AssociationList.__getitem__": {
            "name": "__getitem__",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "_AssociationList.__setitem__": {
            "name": "__setitem__",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "index": [],
                "value": []
            }
        },
        "_AssociationList.__delitem__": {
            "name": "__delitem__",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "_AssociationList.__contains__": {
            "name": "__contains__",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_AssociationList.__getslice__": {
            "name": "__getslice__",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "start": [],
                "end": []
            }
        },
        "_AssociationList.__setslice__": {
            "name": "__setslice__",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "start": [],
                "end": [],
                "values": []
            }
        },
        "_AssociationList.__delslice__": {
            "name": "__delslice__",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "start": [],
                "end": []
            }
        },
        "_AssociationList.__iter__": {
            "name": "__iter__",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_AssociationList.append": {
            "name": "append",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_AssociationList.count": {
            "name": "count",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_AssociationList.extend": {
            "name": "extend",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "values": []
            }
        },
        "_AssociationList.insert": {
            "name": "insert",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "index": [],
                "value": []
            }
        },
        "_AssociationList.pop": {
            "name": "pop",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "_AssociationList.remove": {
            "name": "remove",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_AssociationList.reverse": {
            "name": "reverse",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_AssociationList.sort": {
            "name": "sort",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_AssociationList.clear": {
            "name": "clear",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_AssociationList.__eq__": {
            "name": "__eq__",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_AssociationList.__ne__": {
            "name": "__ne__",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_AssociationList.__lt__": {
            "name": "__lt__",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_AssociationList.__le__": {
            "name": "__le__",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_AssociationList.__gt__": {
            "name": "__gt__",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_AssociationList.__ge__": {
            "name": "__ge__",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_AssociationList.__cmp__": {
            "name": "__cmp__",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_AssociationList.__add__": {
            "name": "__add__",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "iterable": []
            }
        },
        "_AssociationList.__radd__": {
            "name": "__radd__",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "iterable": []
            }
        },
        "_AssociationList.__mul__": {
            "name": "__mul__",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "_AssociationList.__iadd__": {
            "name": "__iadd__",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "iterable": []
            }
        },
        "_AssociationList.__imul__": {
            "name": "__imul__",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "_AssociationList.copy": {
            "name": "copy",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_AssociationList.__hash__": {
            "name": "__hash__",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_AssociationDict.__getitem__": {
            "name": "__getitem__",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "_AssociationDict.__setitem__": {
            "name": "__setitem__",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "_AssociationDict.__delitem__": {
            "name": "__delitem__",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "_AssociationDict.__contains__": {
            "name": "__contains__",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "_AssociationDict.has_key": {
            "name": "has_key",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "_AssociationDict.__iter__": {
            "name": "__iter__",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_AssociationDict.clear": {
            "name": "clear",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_AssociationDict.__eq__": {
            "name": "__eq__",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_AssociationDict.__ne__": {
            "name": "__ne__",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_AssociationDict.__lt__": {
            "name": "__lt__",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_AssociationDict.__le__": {
            "name": "__le__",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_AssociationDict.__gt__": {
            "name": "__gt__",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_AssociationDict.__ge__": {
            "name": "__ge__",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_AssociationDict.__cmp__": {
            "name": "__cmp__",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_AssociationDict.get": {
            "name": "get",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "default": []
            }
        },
        "_AssociationDict.setdefault": {
            "name": "setdefault",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "default": []
            }
        },
        "_AssociationDict.keys": {
            "name": "keys",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_AssociationDict.iteritems": {
            "name": "iteritems",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_AssociationDict.itervalues": {
            "name": "itervalues",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_AssociationDict.iterkeys": {
            "name": "iterkeys",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_AssociationDict.values": {
            "name": "values",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_AssociationDict.items": {
            "name": "items",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_AssociationDict.pop": {
            "name": "pop",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "default": []
            }
        },
        "_AssociationDict.popitem": {
            "name": "popitem",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_AssociationDict.update": {
            "name": "update",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_AssociationDict.copy": {
            "name": "copy",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_AssociationDict.__hash__": {
            "name": "__hash__",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_AssociationSet.__len__": {
            "name": "__len__",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_AssociationSet.__bool__": {
            "name": "__bool__",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_AssociationSet.__nonzero__": {
            "name": "__nonzero__",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_AssociationSet.__contains__": {
            "name": "__contains__",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_AssociationSet.__iter__": {
            "name": "__iter__",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_AssociationSet.add": {
            "name": "add",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_AssociationSet.discard": {
            "name": "discard",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_AssociationSet.remove": {
            "name": "remove",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_AssociationSet.pop": {
            "name": "pop",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_AssociationSet.update": {
            "name": "update",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_AssociationSet.__ior__": {
            "name": "__ior__",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_AssociationSet.union": {
            "name": "union",
            "location": 137,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_AssociationSet.__or__": {
            "name": "__or__",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_AssociationSet.difference": {
            "name": "difference",
            "location": 139,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_AssociationSet.__sub__": {
            "name": "__sub__",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_AssociationSet.difference_update": {
            "name": "difference_update",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_AssociationSet.__isub__": {
            "name": "__isub__",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_AssociationSet.intersection": {
            "name": "intersection",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_AssociationSet.__and__": {
            "name": "__and__",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_AssociationSet.intersection_update": {
            "name": "intersection_update",
            "location": 145,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_AssociationSet.__iand__": {
            "name": "__iand__",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_AssociationSet.symmetric_difference": {
            "name": "symmetric_difference",
            "location": 147,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_AssociationSet.__xor__": {
            "name": "__xor__",
            "location": 148,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_AssociationSet.symmetric_difference_update": {
            "name": "symmetric_difference_update",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_AssociationSet.__ixor__": {
            "name": "__ixor__",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_AssociationSet.issubset": {
            "name": "issubset",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_AssociationSet.issuperset": {
            "name": "issuperset",
            "location": 152,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_AssociationSet.clear": {
            "name": "clear",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_AssociationSet.copy": {
            "name": "copy",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_AssociationSet.__eq__": {
            "name": "__eq__",
            "location": 155,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_AssociationSet.__ne__": {
            "name": "__ne__",
            "location": 156,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_AssociationSet.__lt__": {
            "name": "__lt__",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_AssociationSet.__le__": {
            "name": "__le__",
            "location": 158,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_AssociationSet.__gt__": {
            "name": "__gt__",
            "location": 159,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_AssociationSet.__ge__": {
            "name": "__ge__",
            "location": 160,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_AssociationSet.__hash__": {
            "name": "__hash__",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/ext/automap.py": {
        "classname_for_table": {
            "name": "classname_for_table",
            "location": 3,
            "return": [],
            "arguments": {
                "base": [],
                "tablename": [],
                "table": []
            }
        },
        "name_for_scalar_relationship": {
            "name": "name_for_scalar_relationship",
            "location": 4,
            "return": [],
            "arguments": {
                "base": [],
                "local_cls": [],
                "referred_cls": [],
                "constraint": []
            }
        },
        "name_for_collection_relationship": {
            "name": "name_for_collection_relationship",
            "location": 5,
            "return": [],
            "arguments": {
                "base": [],
                "local_cls": [],
                "referred_cls": [],
                "constraint": []
            }
        },
        "generate_relationship": {
            "name": "generate_relationship",
            "location": 6,
            "return": [],
            "arguments": {
                "base": [],
                "direction": [],
                "return_fn": [],
                "attrname": [],
                "local_cls": [],
                "referred_cls": []
            }
        },
        "automap_base": {
            "name": "automap_base",
            "location": 17,
            "return": [],
            "arguments": {
                "declarative_base": []
            }
        },
        "AutomapBase.prepare": {
            "name": "prepare",
            "location": 12,
            "return": [],
            "arguments": {
                "cls": [],
                "engine": [],
                "reflect": [],
                "schema": [],
                "classname_for_table": [],
                "collection_class": [],
                "name_for_scalar_relationship": [],
                "name_for_collection_relationship": [],
                "generate_relationship": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/ext/baked.py": {
        "bake_lazy_loaders": {
            "name": "bake_lazy_loaders",
            "location": 39,
            "return": [],
            "arguments": {}
        },
        "unbake_lazy_loaders": {
            "name": "unbake_lazy_loaders",
            "location": 40,
            "return": [],
            "arguments": {}
        },
        "baked_lazyload": {
            "name": "baked_lazyload",
            "location": 44,
            "return": [],
            "arguments": {
                "loadopt": [],
                "attr": []
            }
        },
        "baked_lazyload_all": {
            "name": "baked_lazyload_all",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "Bakery.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "cls_": [],
                "cache": []
            }
        },
        "Bakery.__call__": {
            "name": "__call__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "initial_fn": []
            }
        },
        "BakedQuery.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "bakery": [],
                "initial_fn": [],
                "args": []
            }
        },
        "BakedQuery.bakery": {
            "name": "bakery",
            "location": 16,
            "return": [],
            "arguments": {
                "cls": [],
                "size": []
            }
        },
        "BakedQuery.__iadd__": {
            "name": "__iadd__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BakedQuery.__add__": {
            "name": "__add__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BakedQuery.add_criteria": {
            "name": "add_criteria",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "fn": []
            }
        },
        "BakedQuery.with_criteria": {
            "name": "with_criteria",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "fn": []
            }
        },
        "BakedQuery.for_session": {
            "name": "for_session",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "session": []
            }
        },
        "BakedQuery.__call__": {
            "name": "__call__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "session": []
            }
        },
        "BakedQuery.spoil": {
            "name": "spoil",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "full": []
            }
        },
        "Result.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "bq": [],
                "session": []
            }
        },
        "Result.params": {
            "name": "params",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Result.__iter__": {
            "name": "__iter__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Result.count": {
            "name": "count",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Result.scalar": {
            "name": "scalar",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Result.first": {
            "name": "first",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Result.one": {
            "name": "one",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Result.one_or_none": {
            "name": "one_or_none",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Result.all": {
            "name": "all",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Result.get": {
            "name": "get",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "ident": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/ext/compiler.py": {
        "compiles": {
            "name": "compiles",
            "location": 5,
            "return": [],
            "arguments": {
                "class_": []
            }
        },
        "deregister": {
            "name": "deregister",
            "location": 6,
            "return": [],
            "arguments": {
                "class_": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/ext/horizontal_shard.py": {
        "ShardedQuery.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ShardedQuery.set_shard": {
            "name": "set_shard",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "shard_id": []
            }
        },
        "ShardedQuery.get": {
            "name": "get",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "ident": []
            }
        },
        "ShardedSession.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "shard_chooser": [],
                "id_chooser": [],
                "query_chooser": [],
                "shards": [],
                "query_cls": []
            }
        },
        "ShardedSession.connection": {
            "name": "connection",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ShardedSession.get_bind": {
            "name": "get_bind",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ShardedSession.bind_shard": {
            "name": "bind_shard",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "shard_id": [],
                "bind": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/ext/hybrid.py": {
        "hybrid_method.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "func": [],
                "expr": []
            }
        },
        "hybrid_method.__get__": {
            "name": "__get__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "owner": []
            }
        },
        "hybrid_method.expression": {
            "name": "expression",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "expr": []
            }
        },
        "hybrid_property.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "fget": [],
                "fset": [],
                "fdel": [],
                "expr": [],
                "custom_comparator": [],
                "update_expr": []
            }
        },
        "hybrid_property.__get__": {
            "name": "__get__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "owner": []
            }
        },
        "hybrid_property.__set__": {
            "name": "__set__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "value": []
            }
        },
        "hybrid_property.__delete__": {
            "name": "__delete__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "instance": []
            }
        },
        "hybrid_property.getter": {
            "name": "getter",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "fget": []
            }
        },
        "hybrid_property.setter": {
            "name": "setter",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "fset": []
            }
        },
        "hybrid_property.deleter": {
            "name": "deleter",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "fdel": []
            }
        },
        "hybrid_property.expression": {
            "name": "expression",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "expr": []
            }
        },
        "hybrid_property.comparator": {
            "name": "comparator",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "comparator": []
            }
        },
        "hybrid_property.update_expression": {
            "name": "update_expression",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "meth": []
            }
        },
        "hybrid_property._copy": {
            "name": "_copy",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "hybrid_property._expr_comparator": {
            "name": "_expr_comparator",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "hybrid_property._get_expr": {
            "name": "_get_expr",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "expr": []
            }
        },
        "hybrid_property._get_comparator": {
            "name": "_get_comparator",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "comparator": []
            }
        },
        "hybrid_property.overrides": {
            "name": "overrides",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Comparator.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "expression": []
            }
        },
        "Comparator.__clause_element__": {
            "name": "__clause_element__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Comparator.adapt_to_entity": {
            "name": "adapt_to_entity",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "adapt_to_entity": []
            }
        },
        "ExprComparator.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "expression": [],
                "hybrid": []
            }
        },
        "ExprComparator.__getattr__": {
            "name": "__getattr__",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "ExprComparator.info": {
            "name": "info",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExprComparator.property": {
            "name": "property",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExprComparator.operate": {
            "name": "operate",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "op": []
            }
        },
        "ExprComparator.reverse_operate": {
            "name": "reverse_operate",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "op": [],
                "other": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/ext/indexable.py": {
        "index_property.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "attr_name": [],
                "index": [],
                "default": [],
                "datatype": [],
                "mutable": [],
                "onebased": []
            }
        },
        "index_property.fget": {
            "name": "fget",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "instance": []
            }
        },
        "index_property.fset": {
            "name": "fset",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "value": []
            }
        },
        "index_property.fdel": {
            "name": "fdel",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "instance": []
            }
        },
        "index_property.expr": {
            "name": "expr",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "model": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/ext/instrumentation.py": {
        "find_native_user_instrumentation_hook": {
            "name": "find_native_user_instrumentation_hook",
            "location": 6,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "ExtendedInstrumentationRegistry.unregister": {
            "name": "unregister",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "class_": []
            }
        },
        "ExtendedInstrumentationRegistry.manager_of_class": {
            "name": "manager_of_class",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "cls": []
            }
        },
        "ExtendedInstrumentationRegistry.state_of": {
            "name": "state_of",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "instance": []
            }
        },
        "ExtendedInstrumentationRegistry.dict_of": {
            "name": "dict_of",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "instance": []
            }
        },
        "InstrumentationManager.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "class_": []
            }
        },
        "InstrumentationManager.manage": {
            "name": "manage",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "class_": [],
                "manager": []
            }
        },
        "InstrumentationManager.dispose": {
            "name": "dispose",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "class_": [],
                "manager": []
            }
        },
        "InstrumentationManager.manager_getter": {
            "name": "manager_getter",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "class_": []
            }
        },
        "InstrumentationManager.instrument_attribute": {
            "name": "instrument_attribute",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "class_": [],
                "key": [],
                "inst": []
            }
        },
        "InstrumentationManager.post_configure_attribute": {
            "name": "post_configure_attribute",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "class_": [],
                "key": [],
                "inst": []
            }
        },
        "InstrumentationManager.install_descriptor": {
            "name": "install_descriptor",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "class_": [],
                "key": [],
                "inst": []
            }
        },
        "InstrumentationManager.uninstall_descriptor": {
            "name": "uninstall_descriptor",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "class_": [],
                "key": []
            }
        },
        "InstrumentationManager.install_member": {
            "name": "install_member",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "class_": [],
                "key": [],
                "implementation": []
            }
        },
        "InstrumentationManager.uninstall_member": {
            "name": "uninstall_member",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "class_": [],
                "key": []
            }
        },
        "InstrumentationManager.instrument_collection_class": {
            "name": "instrument_collection_class",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "class_": [],
                "key": [],
                "collection_class": []
            }
        },
        "InstrumentationManager.get_instance_dict": {
            "name": "get_instance_dict",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "class_": [],
                "instance": []
            }
        },
        "InstrumentationManager.initialize_instance_dict": {
            "name": "initialize_instance_dict",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "class_": [],
                "instance": []
            }
        },
        "InstrumentationManager.install_state": {
            "name": "install_state",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "class_": [],
                "instance": [],
                "state": []
            }
        },
        "InstrumentationManager.remove_state": {
            "name": "remove_state",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "class_": [],
                "instance": []
            }
        },
        "InstrumentationManager.state_getter": {
            "name": "state_getter",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "class_": []
            }
        },
        "InstrumentationManager.dict_getter": {
            "name": "dict_getter",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "class_": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/ext/mutable.py": {
        "MutableBase.coerce": {
            "name": "coerce",
            "location": 3,
            "return": [],
            "arguments": {
                "cls": [],
                "key": [],
                "value": []
            }
        },
        "Mutable.changed": {
            "name": "changed",
            "location": 6,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mutable.associate_with_attribute": {
            "name": "associate_with_attribute",
            "location": 8,
            "return": [],
            "arguments": {
                "cls": [],
                "attribute": []
            }
        },
        "Mutable.associate_with": {
            "name": "associate_with",
            "location": 10,
            "return": [],
            "arguments": {
                "cls": [],
                "sqltype": []
            }
        },
        "Mutable.as_mutable": {
            "name": "as_mutable",
            "location": 12,
            "return": [],
            "arguments": {
                "cls": [],
                "sqltype": []
            }
        },
        "MutableComposite.changed": {
            "name": "changed",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MutableDict.__setitem__": {
            "name": "__setitem__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "MutableDict.setdefault": {
            "name": "setdefault",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "MutableDict.__delitem__": {
            "name": "__delitem__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "MutableDict.update": {
            "name": "update",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MutableDict.pop": {
            "name": "pop",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MutableDict.popitem": {
            "name": "popitem",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MutableDict.clear": {
            "name": "clear",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MutableDict.coerce": {
            "name": "coerce",
            "location": 26,
            "return": [],
            "arguments": {
                "cls": [],
                "key": [],
                "value": []
            }
        },
        "MutableList.__setitem__": {
            "name": "__setitem__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "index": [],
                "value": []
            }
        },
        "MutableList.__setslice__": {
            "name": "__setslice__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "start": [],
                "end": [],
                "value": []
            }
        },
        "MutableList.__delitem__": {
            "name": "__delitem__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "MutableList.__delslice__": {
            "name": "__delslice__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "start": [],
                "end": []
            }
        },
        "MutableList.pop": {
            "name": "pop",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MutableList.append": {
            "name": "append",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "MutableList.extend": {
            "name": "extend",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "MutableList.insert": {
            "name": "insert",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "i": [],
                "x": []
            }
        },
        "MutableList.remove": {
            "name": "remove",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "i": []
            }
        },
        "MutableList.clear": {
            "name": "clear",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MutableList.sort": {
            "name": "sort",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MutableList.reverse": {
            "name": "reverse",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MutableList.coerce": {
            "name": "coerce",
            "location": 42,
            "return": [],
            "arguments": {
                "cls": [],
                "index": [],
                "value": []
            }
        },
        "MutableSet.update": {
            "name": "update",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MutableSet.intersection_update": {
            "name": "intersection_update",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MutableSet.difference_update": {
            "name": "difference_update",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MutableSet.symmetric_difference_update": {
            "name": "symmetric_difference_update",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MutableSet.add": {
            "name": "add",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "elem": []
            }
        },
        "MutableSet.remove": {
            "name": "remove",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "elem": []
            }
        },
        "MutableSet.discard": {
            "name": "discard",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "elem": []
            }
        },
        "MutableSet.pop": {
            "name": "pop",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MutableSet.clear": {
            "name": "clear",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MutableSet.coerce": {
            "name": "coerce",
            "location": 55,
            "return": [],
            "arguments": {
                "cls": [],
                "index": [],
                "value": []
            }
        },
        "MutableSet.__reduce_ex__": {
            "name": "__reduce_ex__",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "proto": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/ext/orderinglist.py": {
        "ordering_list": {
            "name": "ordering_list",
            "location": 3,
            "return": [],
            "arguments": {
                "attr": [],
                "count_from": []
            }
        },
        "OrderingList.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "ordering_attr": [],
                "ordering_func": [],
                "reorder_on_append": []
            }
        },
        "OrderingList.reorder": {
            "name": "reorder",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OrderingList.append": {
            "name": "append",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "entity": []
            }
        },
        "OrderingList.insert": {
            "name": "insert",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "index": [],
                "entity": []
            }
        },
        "OrderingList.remove": {
            "name": "remove",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "entity": []
            }
        },
        "OrderingList.__setitem__": {
            "name": "__setitem__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "index": [],
                "entity": []
            }
        },
        "OrderingList.__delitem__": {
            "name": "__delitem__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "OrderingList.__setslice__": {
            "name": "__setslice__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "start": [],
                "end": [],
                "values": []
            }
        },
        "OrderingList.__delslice__": {
            "name": "__delslice__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "start": [],
                "end": []
            }
        },
        "OrderingList.__reduce__": {
            "name": "__reduce__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/ext/serializer.py": {
        "Serializer": {
            "name": "Serializer",
            "location": 4,
            "return": [],
            "arguments": {}
        },
        "Deserializer": {
            "name": "Deserializer",
            "location": 5,
            "return": [],
            "arguments": {
                "file": [],
                "metadata": [],
                "scoped_session": [],
                "engine": []
            }
        },
        "dumps": {
            "name": "dumps",
            "location": 7,
            "return": [],
            "arguments": {
                "obj": [],
                "protocol": []
            }
        },
        "loads": {
            "name": "loads",
            "location": 8,
            "return": [],
            "arguments": {
                "data": [],
                "metadata": [],
                "scoped_session": [],
                "engine": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/ext/__init__.py": {},
    "sqlalchemy-stubs-master/sqlalchemy-stubs/ext/declarative/api.py": {
        "instrument_declarative": {
            "name": "instrument_declarative",
            "location": 4,
            "return": [],
            "arguments": {
                "cls": [],
                "registry": [],
                "metadata": []
            }
        },
        "has_inherited_table": {
            "name": "has_inherited_table",
            "location": 5,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "synonym_for": {
            "name": "synonym_for",
            "location": 11,
            "return": [],
            "arguments": {
                "name": [],
                "map_column": []
            }
        },
        "comparable_using": {
            "name": "comparable_using",
            "location": 12,
            "return": [],
            "arguments": {
                "comparator_factory": []
            }
        },
        "declarative_base": {
            "name": "declarative_base",
            "location": 25,
            "return": [],
            "arguments": {
                "bind": [],
                "metadata": [],
                "mapper": [],
                "cls": [],
                "name": [],
                "constructor": [],
                "class_registry": [],
                "metaclass": []
            }
        },
        "as_declarative": {
            "name": "as_declarative",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "DeclarativeMeta.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [],
            "arguments": {
                "cls": [],
                "classname": [],
                "bases": [],
                "dict_": []
            }
        },
        "DeclarativeMeta.__setattr__": {
            "name": "__setattr__",
            "location": 9,
            "return": [],
            "arguments": {
                "cls": [],
                "key": [],
                "value": []
            }
        },
        "declared_attr.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "fget": [],
                "cascading": []
            }
        },
        "declared_attr.__get__": {
            "name": "__get__",
            "location": 17,
            "return": [],
            "arguments": {
                "desc": [],
                "self": [],
                "cls": []
            }
        },
        "declared_attr.cascading": {
            "name": "cascading",
            "location": 18,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "_stateful_declared_attr.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_stateful_declared_attr.__call__": {
            "name": "__call__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "fn": []
            }
        },
        "ConcreteBase.__declare_first__": {
            "name": "__declare_first__",
            "location": 32,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "AbstractConcreteBase.__declare_first__": {
            "name": "__declare_first__",
            "location": 37,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "DeferredReflection.prepare": {
            "name": "prepare",
            "location": 41,
            "return": [],
            "arguments": {
                "cls": [],
                "engine": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/ext/declarative/base.py": {},
    "sqlalchemy-stubs-master/sqlalchemy-stubs/ext/declarative/clsregistry.py": {
        "add_class": {
            "name": "add_class",
            "location": 1,
            "return": [],
            "arguments": {
                "classname": [],
                "cls": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/ext/declarative/__init__.py": {},
    "sqlalchemy-stubs-master/sqlalchemy-stubs/orm/attributes.py": {
        "create_proxied_attribute": {
            "name": "create_proxied_attribute",
            "location": 59,
            "return": [],
            "arguments": {
                "descriptor": []
            }
        },
        "backref_listeners": {
            "name": "backref_listeners",
            "location": 156,
            "return": [],
            "arguments": {
                "attribute": [],
                "key": [],
                "uselist": []
            }
        },
        "get_history": {
            "name": "get_history",
            "location": 178,
            "return": [],
            "arguments": {
                "obj": [],
                "key": [],
                "passive": []
            }
        },
        "get_state_history": {
            "name": "get_state_history",
            "location": 179,
            "return": [],
            "arguments": {
                "state": [],
                "key": [],
                "passive": []
            }
        },
        "has_parent": {
            "name": "has_parent",
            "location": 180,
            "return": [],
            "arguments": {
                "cls": [],
                "obj": [],
                "key": [],
                "optimistic": []
            }
        },
        "register_attribute": {
            "name": "register_attribute",
            "location": 181,
            "return": [],
            "arguments": {
                "class_": [],
                "key": []
            }
        },
        "register_attribute_impl": {
            "name": "register_attribute_impl",
            "location": 182,
            "return": [],
            "arguments": {
                "class_": [],
                "key": [],
                "uselist": [],
                "callable_": [],
                "useobject": [],
                "impl_class": [],
                "backref": []
            }
        },
        "register_descriptor": {
            "name": "register_descriptor",
            "location": 185,
            "return": [],
            "arguments": {
                "class_": [],
                "key": [],
                "comparator": [],
                "parententity": [],
                "doc": []
            }
        },
        "unregister_attribute": {
            "name": "unregister_attribute",
            "location": 187,
            "return": [],
            "arguments": {
                "class_": [],
                "key": []
            }
        },
        "init_collection": {
            "name": "init_collection",
            "location": 188,
            "return": [],
            "arguments": {
                "obj": [],
                "key": []
            }
        },
        "init_state_collection": {
            "name": "init_state_collection",
            "location": 189,
            "return": [],
            "arguments": {
                "state": [],
                "dict_": [],
                "key": []
            }
        },
        "set_committed_value": {
            "name": "set_committed_value",
            "location": 190,
            "return": [],
            "arguments": {
                "instance": [],
                "key": [],
                "value": []
            }
        },
        "set_attribute": {
            "name": "set_attribute",
            "location": 191,
            "return": [],
            "arguments": {
                "instance": [],
                "key": [],
                "value": []
            }
        },
        "get_attribute": {
            "name": "get_attribute",
            "location": 192,
            "return": [],
            "arguments": {
                "instance": [],
                "key": []
            }
        },
        "del_attribute": {
            "name": "del_attribute",
            "location": 193,
            "return": [],
            "arguments": {
                "instance": [],
                "key": []
            }
        },
        "flag_modified": {
            "name": "flag_modified",
            "location": 194,
            "return": [],
            "arguments": {
                "instance": [],
                "key": []
            }
        },
        "QueryableAttribute.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "class_": [],
                "key": [],
                "impl": [],
                "comparator": [],
                "parententity": [],
                "of_type": []
            }
        },
        "QueryableAttribute.get_history": {
            "name": "get_history",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "passive": []
            }
        },
        "QueryableAttribute.__selectable__": {
            "name": "__selectable__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryableAttribute.info": {
            "name": "info",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryableAttribute.parent": {
            "name": "parent",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryableAttribute.expression": {
            "name": "expression",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryableAttribute.__clause_element__": {
            "name": "__clause_element__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryableAttribute.adapt_to_entity": {
            "name": "adapt_to_entity",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "adapt_to_entity": []
            }
        },
        "QueryableAttribute.of_type": {
            "name": "of_type",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "cls": []
            }
        },
        "QueryableAttribute.label": {
            "name": "label",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "QueryableAttribute.operate": {
            "name": "operate",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "op": []
            }
        },
        "QueryableAttribute.reverse_operate": {
            "name": "reverse_operate",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "op": [],
                "other": []
            }
        },
        "QueryableAttribute.hasparent": {
            "name": "hasparent",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "optimistic": []
            }
        },
        "QueryableAttribute.__getattr__": {
            "name": "__getattr__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "QueryableAttribute.property": {
            "name": "property",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InstrumentedAttribute.__set__": {
            "name": "__set__",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "value": []
            }
        },
        "InstrumentedAttribute.__delete__": {
            "name": "__delete__",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "instance": []
            }
        },
        "InstrumentedAttribute.__get__": {
            "name": "__get__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "owner": []
            }
        },
        "Event.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "attribute_impl": [],
                "op": []
            }
        },
        "Event.__eq__": {
            "name": "__eq__",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Event.key": {
            "name": "key",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Event.hasparent": {
            "name": "hasparent",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "AttributeImpl.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "class_": [],
                "key": [],
                "callable_": [],
                "dispatch": [],
                "trackparent": [],
                "extension": [],
                "compare_function": [],
                "active_history": [],
                "parent_token": [],
                "expire_missing": [],
                "send_modified_events": []
            }
        },
        "AttributeImpl.hasparent": {
            "name": "hasparent",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "optimistic": []
            }
        },
        "AttributeImpl.sethasparent": {
            "name": "sethasparent",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "parent_state": [],
                "value": []
            }
        },
        "AttributeImpl.get_history": {
            "name": "get_history",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "dict_": [],
                "passive": []
            }
        },
        "AttributeImpl.get_all_pending": {
            "name": "get_all_pending",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "dict_": [],
                "passive": []
            }
        },
        "AttributeImpl.initialize": {
            "name": "initialize",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "dict_": []
            }
        },
        "AttributeImpl.get": {
            "name": "get",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "dict_": [],
                "passive": []
            }
        },
        "AttributeImpl.append": {
            "name": "append",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "dict_": [],
                "value": [],
                "initiator": [],
                "passive": []
            }
        },
        "AttributeImpl.remove": {
            "name": "remove",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "dict_": [],
                "value": [],
                "initiator": [],
                "passive": []
            }
        },
        "AttributeImpl.pop": {
            "name": "pop",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "dict_": [],
                "value": [],
                "initiator": [],
                "passive": []
            }
        },
        "AttributeImpl.set": {
            "name": "set",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "dict_": [],
                "value": [],
                "initiator": [],
                "passive": [],
                "check_old": [],
                "pop": []
            }
        },
        "AttributeImpl.get_committed_value": {
            "name": "get_committed_value",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "dict_": [],
                "passive": []
            }
        },
        "AttributeImpl.set_committed_value": {
            "name": "set_committed_value",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "dict_": [],
                "value": []
            }
        },
        "ScalarAttributeImpl.__init__": {
            "name": "__init__",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScalarAttributeImpl.delete": {
            "name": "delete",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "dict_": []
            }
        },
        "ScalarAttributeImpl.get_history": {
            "name": "get_history",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "dict_": [],
                "passive": []
            }
        },
        "ScalarAttributeImpl.set": {
            "name": "set",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "dict_": [],
                "value": [],
                "initiator": [],
                "passive": [],
                "check_old": [],
                "pop": []
            }
        },
        "ScalarAttributeImpl.fire_replace_event": {
            "name": "fire_replace_event",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "dict_": [],
                "value": [],
                "previous": [],
                "initiator": []
            }
        },
        "ScalarAttributeImpl.fire_remove_event": {
            "name": "fire_remove_event",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "dict_": [],
                "value": [],
                "initiator": []
            }
        },
        "ScalarAttributeImpl.type": {
            "name": "type",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScalarObjectAttributeImpl.delete": {
            "name": "delete",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "dict_": []
            }
        },
        "ScalarObjectAttributeImpl.get_history": {
            "name": "get_history",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "dict_": [],
                "passive": []
            }
        },
        "ScalarObjectAttributeImpl.get_all_pending": {
            "name": "get_all_pending",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "dict_": [],
                "passive": []
            }
        },
        "ScalarObjectAttributeImpl.set": {
            "name": "set",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "dict_": [],
                "value": [],
                "initiator": [],
                "passive": [],
                "check_old": [],
                "pop": []
            }
        },
        "ScalarObjectAttributeImpl.fire_remove_event": {
            "name": "fire_remove_event",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "dict_": [],
                "value": [],
                "initiator": []
            }
        },
        "ScalarObjectAttributeImpl.fire_replace_event": {
            "name": "fire_replace_event",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "dict_": [],
                "value": [],
                "previous": [],
                "initiator": []
            }
        },
        "CollectionAttributeImpl.__init__": {
            "name": "__init__",
            "location": 139,
            "return": [],
            "arguments": {
                "self": [],
                "class_": [],
                "key": [],
                "callable_": [],
                "dispatch": [],
                "typecallable": [],
                "trackparent": [],
                "extension": [],
                "copy_function": [],
                "compare_function": []
            }
        },
        "CollectionAttributeImpl.get_history": {
            "name": "get_history",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "dict_": [],
                "passive": []
            }
        },
        "CollectionAttributeImpl.get_all_pending": {
            "name": "get_all_pending",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "dict_": [],
                "passive": []
            }
        },
        "CollectionAttributeImpl.fire_append_event": {
            "name": "fire_append_event",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "dict_": [],
                "value": [],
                "initiator": []
            }
        },
        "CollectionAttributeImpl.fire_pre_remove_event": {
            "name": "fire_pre_remove_event",
            "location": 145,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "dict_": [],
                "initiator": []
            }
        },
        "CollectionAttributeImpl.fire_remove_event": {
            "name": "fire_remove_event",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "dict_": [],
                "value": [],
                "initiator": []
            }
        },
        "CollectionAttributeImpl.delete": {
            "name": "delete",
            "location": 147,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "dict_": []
            }
        },
        "CollectionAttributeImpl.initialize": {
            "name": "initialize",
            "location": 148,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "dict_": []
            }
        },
        "CollectionAttributeImpl.append": {
            "name": "append",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "dict_": [],
                "value": [],
                "initiator": [],
                "passive": []
            }
        },
        "CollectionAttributeImpl.remove": {
            "name": "remove",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "dict_": [],
                "value": [],
                "initiator": [],
                "passive": []
            }
        },
        "CollectionAttributeImpl.pop": {
            "name": "pop",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "dict_": [],
                "value": [],
                "initiator": [],
                "passive": []
            }
        },
        "CollectionAttributeImpl.set": {
            "name": "set",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CollectionAttributeImpl.set_committed_value": {
            "name": "set_committed_value",
            "location": 153,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "dict_": [],
                "value": []
            }
        },
        "CollectionAttributeImpl.get_collection": {
            "name": "get_collection",
            "location": 154,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "dict_": [],
                "user_data": [],
                "passive": []
            }
        },
        "History.__bool__": {
            "name": "__bool__",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "History.empty": {
            "name": "empty",
            "location": 163,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "History.sum": {
            "name": "sum",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "History.non_deleted": {
            "name": "non_deleted",
            "location": 165,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "History.non_added": {
            "name": "non_added",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "History.has_changes": {
            "name": "has_changes",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "History.as_state": {
            "name": "as_state",
            "location": 168,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "History.from_scalar_attribute": {
            "name": "from_scalar_attribute",
            "location": 170,
            "return": [],
            "arguments": {
                "cls": [],
                "attribute": [],
                "state": [],
                "current": []
            }
        },
        "History.from_object_attribute": {
            "name": "from_object_attribute",
            "location": 172,
            "return": [],
            "arguments": {
                "cls": [],
                "attribute": [],
                "state": [],
                "current": []
            }
        },
        "History.from_collection": {
            "name": "from_collection",
            "location": 174,
            "return": [],
            "arguments": {
                "cls": [],
                "attribute": [],
                "state": [],
                "current": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/orm/base.py": {
        "manager_of_class": {
            "name": "manager_of_class",
            "location": 31,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "instance_str": {
            "name": "instance_str",
            "location": 36,
            "return": [],
            "arguments": {
                "instance": []
            }
        },
        "state_str": {
            "name": "state_str",
            "location": 37,
            "return": [],
            "arguments": {
                "state": []
            }
        },
        "state_class_str": {
            "name": "state_class_str",
            "location": 38,
            "return": [],
            "arguments": {
                "state": []
            }
        },
        "attribute_str": {
            "name": "attribute_str",
            "location": 39,
            "return": [],
            "arguments": {
                "instance": [],
                "attribute": []
            }
        },
        "state_attribute_str": {
            "name": "state_attribute_str",
            "location": 40,
            "return": [],
            "arguments": {
                "state": [],
                "attribute": []
            }
        },
        "object_mapper": {
            "name": "object_mapper",
            "location": 41,
            "return": [],
            "arguments": {
                "instance": []
            }
        },
        "object_state": {
            "name": "object_state",
            "location": 42,
            "return": [],
            "arguments": {
                "instance": []
            }
        },
        "class_mapper": {
            "name": "class_mapper",
            "location": 43,
            "return": [],
            "arguments": {
                "class_": [],
                "configure": []
            }
        },
        "InspectionAttrInfo.info": {
            "name": "info",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/orm/collections.py": {
        "column_mapped_collection": {
            "name": "column_mapped_collection",
            "location": 3,
            "return": [],
            "arguments": {
                "mapping_spec": []
            }
        },
        "attribute_mapped_collection": {
            "name": "attribute_mapped_collection",
            "location": 4,
            "return": [],
            "arguments": {
                "attr_name": []
            }
        },
        "mapped_collection": {
            "name": "mapped_collection",
            "location": 5,
            "return": [],
            "arguments": {
                "keyfunc": []
            }
        },
        "collection.appender": {
            "name": "appender",
            "location": 9,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "collection.remover": {
            "name": "remover",
            "location": 11,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "collection.iterator": {
            "name": "iterator",
            "location": 13,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "collection.internally_instrumented": {
            "name": "internally_instrumented",
            "location": 15,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "collection.linker": {
            "name": "linker",
            "location": 17,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "collection.converter": {
            "name": "converter",
            "location": 20,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "collection.adds": {
            "name": "adds",
            "location": 22,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "collection.replaces": {
            "name": "replaces",
            "location": 24,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "collection.removes": {
            "name": "removes",
            "location": 26,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "collection.removes_return": {
            "name": "removes_return",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "CollectionAdapter.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "attr": [],
                "owner_state": [],
                "data": []
            }
        },
        "CollectionAdapter.data": {
            "name": "data",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CollectionAdapter.bulk_appender": {
            "name": "bulk_appender",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CollectionAdapter.append_with_event": {
            "name": "append_with_event",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "item": [],
                "initiator": []
            }
        },
        "CollectionAdapter.append_without_event": {
            "name": "append_without_event",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "CollectionAdapter.append_multiple_without_event": {
            "name": "append_multiple_without_event",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "items": []
            }
        },
        "CollectionAdapter.bulk_remover": {
            "name": "bulk_remover",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CollectionAdapter.remove_with_event": {
            "name": "remove_with_event",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "item": [],
                "initiator": []
            }
        },
        "CollectionAdapter.remove_without_event": {
            "name": "remove_without_event",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "CollectionAdapter.clear_with_event": {
            "name": "clear_with_event",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "initiator": []
            }
        },
        "CollectionAdapter.clear_without_event": {
            "name": "clear_without_event",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CollectionAdapter.__iter__": {
            "name": "__iter__",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CollectionAdapter.__len__": {
            "name": "__len__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CollectionAdapter.__bool__": {
            "name": "__bool__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CollectionAdapter.fire_append_event": {
            "name": "fire_append_event",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "item": [],
                "initiator": []
            }
        },
        "CollectionAdapter.fire_remove_event": {
            "name": "fire_remove_event",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "item": [],
                "initiator": []
            }
        },
        "CollectionAdapter.fire_pre_remove_event": {
            "name": "fire_pre_remove_event",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "initiator": []
            }
        },
        "MappedCollection.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "keyfunc": []
            }
        },
        "MappedCollection.set": {
            "name": "set",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "_sa_initiator": []
            }
        },
        "MappedCollection.remove": {
            "name": "remove",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "_sa_initiator": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/orm/dependency.py": {
        "DependencyProcessor.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "prop": []
            }
        },
        "DependencyProcessor.from_relationship": {
            "name": "from_relationship",
            "location": 24,
            "return": [],
            "arguments": {
                "cls": [],
                "prop": []
            }
        },
        "DependencyProcessor.hasparent": {
            "name": "hasparent",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "DependencyProcessor.per_property_preprocessors": {
            "name": "per_property_preprocessors",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "uow": []
            }
        },
        "DependencyProcessor.per_property_flush_actions": {
            "name": "per_property_flush_actions",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "uow": []
            }
        },
        "DependencyProcessor.per_state_flush_actions": {
            "name": "per_state_flush_actions",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "uow": [],
                "states": [],
                "isdelete": []
            }
        },
        "DependencyProcessor.presort_deletes": {
            "name": "presort_deletes",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "uowcommit": [],
                "states": []
            }
        },
        "DependencyProcessor.presort_saves": {
            "name": "presort_saves",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "uowcommit": [],
                "states": []
            }
        },
        "DependencyProcessor.process_deletes": {
            "name": "process_deletes",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "uowcommit": [],
                "states": []
            }
        },
        "DependencyProcessor.process_saves": {
            "name": "process_saves",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "uowcommit": [],
                "states": []
            }
        },
        "DependencyProcessor.prop_has_changes": {
            "name": "prop_has_changes",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "uowcommit": [],
                "states": [],
                "isdelete": []
            }
        },
        "OneToManyDP.per_property_dependencies": {
            "name": "per_property_dependencies",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "uow": [],
                "parent_saves": [],
                "child_saves": [],
                "parent_deletes": [],
                "child_deletes": [],
                "after_save": [],
                "before_delete": []
            }
        },
        "OneToManyDP.per_state_dependencies": {
            "name": "per_state_dependencies",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "uow": [],
                "save_parent": [],
                "delete_parent": [],
                "child_action": [],
                "after_save": [],
                "before_delete": [],
                "isdelete": [],
                "childisdelete": []
            }
        },
        "OneToManyDP.presort_deletes": {
            "name": "presort_deletes",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "uowcommit": [],
                "states": []
            }
        },
        "OneToManyDP.presort_saves": {
            "name": "presort_saves",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "uowcommit": [],
                "states": []
            }
        },
        "OneToManyDP.process_deletes": {
            "name": "process_deletes",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "uowcommit": [],
                "states": []
            }
        },
        "OneToManyDP.process_saves": {
            "name": "process_saves",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "uowcommit": [],
                "states": []
            }
        },
        "ManyToOneDP.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "prop": []
            }
        },
        "ManyToOneDP.per_property_dependencies": {
            "name": "per_property_dependencies",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "uow": [],
                "parent_saves": [],
                "child_saves": [],
                "parent_deletes": [],
                "child_deletes": [],
                "after_save": [],
                "before_delete": []
            }
        },
        "ManyToOneDP.per_state_dependencies": {
            "name": "per_state_dependencies",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "uow": [],
                "save_parent": [],
                "delete_parent": [],
                "child_action": [],
                "after_save": [],
                "before_delete": [],
                "isdelete": [],
                "childisdelete": []
            }
        },
        "ManyToOneDP.presort_deletes": {
            "name": "presort_deletes",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "uowcommit": [],
                "states": []
            }
        },
        "ManyToOneDP.presort_saves": {
            "name": "presort_saves",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "uowcommit": [],
                "states": []
            }
        },
        "ManyToOneDP.process_deletes": {
            "name": "process_deletes",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "uowcommit": [],
                "states": []
            }
        },
        "ManyToOneDP.process_saves": {
            "name": "process_saves",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "uowcommit": [],
                "states": []
            }
        },
        "DetectKeySwitch.per_property_preprocessors": {
            "name": "per_property_preprocessors",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "uow": []
            }
        },
        "DetectKeySwitch.per_property_flush_actions": {
            "name": "per_property_flush_actions",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "uow": []
            }
        },
        "DetectKeySwitch.per_state_flush_actions": {
            "name": "per_state_flush_actions",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "uow": [],
                "states": [],
                "isdelete": []
            }
        },
        "DetectKeySwitch.presort_deletes": {
            "name": "presort_deletes",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "uowcommit": [],
                "states": []
            }
        },
        "DetectKeySwitch.presort_saves": {
            "name": "presort_saves",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "uow": [],
                "states": []
            }
        },
        "DetectKeySwitch.prop_has_changes": {
            "name": "prop_has_changes",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "uow": [],
                "states": [],
                "isdelete": []
            }
        },
        "DetectKeySwitch.process_deletes": {
            "name": "process_deletes",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "uowcommit": [],
                "states": []
            }
        },
        "DetectKeySwitch.process_saves": {
            "name": "process_saves",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "uowcommit": [],
                "states": []
            }
        },
        "ManyToManyDP.per_property_dependencies": {
            "name": "per_property_dependencies",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "uow": [],
                "parent_saves": [],
                "child_saves": [],
                "parent_deletes": [],
                "child_deletes": [],
                "after_save": [],
                "before_delete": []
            }
        },
        "ManyToManyDP.per_state_dependencies": {
            "name": "per_state_dependencies",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "uow": [],
                "save_parent": [],
                "delete_parent": [],
                "child_action": [],
                "after_save": [],
                "before_delete": [],
                "isdelete": [],
                "childisdelete": []
            }
        },
        "ManyToManyDP.presort_deletes": {
            "name": "presort_deletes",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "uowcommit": [],
                "states": []
            }
        },
        "ManyToManyDP.presort_saves": {
            "name": "presort_saves",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "uowcommit": [],
                "states": []
            }
        },
        "ManyToManyDP.process_deletes": {
            "name": "process_deletes",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "uowcommit": [],
                "states": []
            }
        },
        "ManyToManyDP.process_saves": {
            "name": "process_saves",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "uowcommit": [],
                "states": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/orm/descriptor_props.py": {
        "DescriptorProperty.instrument_class": {
            "name": "instrument_class",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "mapper": []
            }
        },
        "CompositeProperty.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "class_": []
            }
        },
        "CompositeProperty.instrument_class": {
            "name": "instrument_class",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "mapper": []
            }
        },
        "CompositeProperty.do_init": {
            "name": "do_init",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CompositeProperty.props": {
            "name": "props",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CompositeProperty.columns": {
            "name": "columns",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CompositeProperty.get_history": {
            "name": "get_history",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "dict_": [],
                "passive": []
            }
        },
        "ConcreteInheritedProperty.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SynonymProperty.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "map_column": [],
                "descriptor": [],
                "comparator_factory": [],
                "doc": [],
                "info": []
            }
        },
        "SynonymProperty.set_parent": {
            "name": "set_parent",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "parent": [],
                "init": []
            }
        },
        "ComparableProperty.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "comparator_factory": [],
                "descriptor": [],
                "doc": [],
                "info": []
            }
        },
        "CompositeProperty.CompositeBundle.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "property": [],
                "expr": []
            }
        },
        "CompositeProperty.CompositeBundle.create_row_processor": {
            "name": "create_row_processor",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "procs": [],
                "labels": []
            }
        },
        "CompositeProperty.Comparator.clauses": {
            "name": "clauses",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CompositeProperty.Comparator.__clause_element__": {
            "name": "__clause_element__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CompositeProperty.Comparator.__eq__": {
            "name": "__eq__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "CompositeProperty.Comparator.__ne__": {
            "name": "__ne__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/orm/dynamic.py": {
        "mixin_user_query": {
            "name": "mixin_user_query",
            "location": 49,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "DynaLoader.init_class_attribute": {
            "name": "init_class_attribute",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "mapper": []
            }
        },
        "DynamicAttributeImpl.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "class_": [],
                "key": [],
                "typecallable": [],
                "dispatch": [],
                "target_mapper": [],
                "order_by": [],
                "query_class": []
            }
        },
        "DynamicAttributeImpl.get": {
            "name": "get",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "dict_": [],
                "passive": []
            }
        },
        "DynamicAttributeImpl.get_collection": {
            "name": "get_collection",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "dict_": [],
                "user_data": [],
                "passive": []
            }
        },
        "DynamicAttributeImpl.fire_append_event": {
            "name": "fire_append_event",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "dict_": [],
                "value": [],
                "initiator": [],
                "collection_history": []
            }
        },
        "DynamicAttributeImpl.fire_remove_event": {
            "name": "fire_remove_event",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "dict_": [],
                "value": [],
                "initiator": [],
                "collection_history": []
            }
        },
        "DynamicAttributeImpl.set": {
            "name": "set",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "dict_": [],
                "value": [],
                "initiator": [],
                "passive": [],
                "check_old": [],
                "pop": [],
                "_adapt": []
            }
        },
        "DynamicAttributeImpl.delete": {
            "name": "delete",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DynamicAttributeImpl.set_committed_value": {
            "name": "set_committed_value",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "dict_": [],
                "value": []
            }
        },
        "DynamicAttributeImpl.get_history": {
            "name": "get_history",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "dict_": [],
                "passive": []
            }
        },
        "DynamicAttributeImpl.get_all_pending": {
            "name": "get_all_pending",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "dict_": [],
                "passive": []
            }
        },
        "DynamicAttributeImpl.append": {
            "name": "append",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "dict_": [],
                "value": [],
                "initiator": [],
                "passive": []
            }
        },
        "DynamicAttributeImpl.remove": {
            "name": "remove",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "dict_": [],
                "value": [],
                "initiator": [],
                "passive": []
            }
        },
        "DynamicAttributeImpl.pop": {
            "name": "pop",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "dict_": [],
                "value": [],
                "initiator": [],
                "passive": []
            }
        },
        "AppenderMixin.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "attr": [],
                "state": []
            }
        },
        "AppenderMixin.__iter__": {
            "name": "__iter__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AppenderMixin.__getitem__": {
            "name": "__getitem__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "AppenderMixin.count": {
            "name": "count",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AppenderMixin.extend": {
            "name": "extend",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "iterator": []
            }
        },
        "AppenderMixin.append": {
            "name": "append",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "AppenderMixin.remove": {
            "name": "remove",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "CollectionHistory.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "attr": [],
                "state": [],
                "apply_to": []
            }
        },
        "CollectionHistory.added_plus_unchanged": {
            "name": "added_plus_unchanged",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CollectionHistory.all_items": {
            "name": "all_items",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CollectionHistory.as_history": {
            "name": "as_history",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CollectionHistory.indexed": {
            "name": "indexed",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "CollectionHistory.add_added": {
            "name": "add_added",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "CollectionHistory.add_removed": {
            "name": "add_removed",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/orm/evaluator.py": {
        "EvaluatorCompiler.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "target_cls": []
            }
        },
        "EvaluatorCompiler.process": {
            "name": "process",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "clause": []
            }
        },
        "EvaluatorCompiler.visit_grouping": {
            "name": "visit_grouping",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "clause": []
            }
        },
        "EvaluatorCompiler.visit_null": {
            "name": "visit_null",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "clause": []
            }
        },
        "EvaluatorCompiler.visit_false": {
            "name": "visit_false",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "clause": []
            }
        },
        "EvaluatorCompiler.visit_true": {
            "name": "visit_true",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "clause": []
            }
        },
        "EvaluatorCompiler.visit_column": {
            "name": "visit_column",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "clause": []
            }
        },
        "EvaluatorCompiler.visit_clauselist": {
            "name": "visit_clauselist",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "clause": []
            }
        },
        "EvaluatorCompiler.visit_binary": {
            "name": "visit_binary",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "clause": []
            }
        },
        "EvaluatorCompiler.visit_unary": {
            "name": "visit_unary",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "clause": []
            }
        },
        "EvaluatorCompiler.visit_bindparam": {
            "name": "visit_bindparam",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "clause": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/orm/events.py": {
        "InstrumentationEvents.class_instrument": {
            "name": "class_instrument",
            "location": 5,
            "return": [],
            "arguments": {
                "self": [],
                "cls": []
            }
        },
        "InstrumentationEvents.class_uninstrument": {
            "name": "class_uninstrument",
            "location": 6,
            "return": [],
            "arguments": {
                "self": [],
                "cls": []
            }
        },
        "InstrumentationEvents.attribute_instrument": {
            "name": "attribute_instrument",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "cls": [],
                "key": [],
                "inst": []
            }
        },
        "_InstrumentationEventsHold.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "class_": []
            }
        },
        "InstanceEvents.first_init": {
            "name": "first_init",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "manager": [],
                "cls": []
            }
        },
        "InstanceEvents.init": {
            "name": "init",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "target": [],
                "args": [],
                "kwargs": []
            }
        },
        "InstanceEvents.init_failure": {
            "name": "init_failure",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "target": [],
                "args": [],
                "kwargs": []
            }
        },
        "InstanceEvents.load": {
            "name": "load",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "target": [],
                "context": []
            }
        },
        "InstanceEvents.refresh": {
            "name": "refresh",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "target": [],
                "context": [],
                "attrs": []
            }
        },
        "InstanceEvents.refresh_flush": {
            "name": "refresh_flush",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "target": [],
                "flush_context": [],
                "attrs": []
            }
        },
        "InstanceEvents.expire": {
            "name": "expire",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "target": [],
                "attrs": []
            }
        },
        "InstanceEvents.pickle": {
            "name": "pickle",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "target": [],
                "state_dict": []
            }
        },
        "InstanceEvents.unpickle": {
            "name": "unpickle",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "target": [],
                "state_dict": []
            }
        },
        "_EventsHold.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "class_": []
            }
        },
        "_EventsHold.remove": {
            "name": "remove",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "event_key": []
            }
        },
        "_EventsHold.populate": {
            "name": "populate",
            "location": 31,
            "return": [],
            "arguments": {
                "cls": [],
                "class_": [],
                "subject": []
            }
        },
        "_InstanceEventsHold.resolve": {
            "name": "resolve",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "class_": []
            }
        },
        "MapperEvents.instrument_class": {
            "name": "instrument_class",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "mapper": [],
                "class_": []
            }
        },
        "MapperEvents.mapper_configured": {
            "name": "mapper_configured",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "mapper": [],
                "class_": []
            }
        },
        "MapperEvents.before_configured": {
            "name": "before_configured",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MapperEvents.after_configured": {
            "name": "after_configured",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MapperEvents.before_insert": {
            "name": "before_insert",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "mapper": [],
                "connection": [],
                "target": []
            }
        },
        "MapperEvents.after_insert": {
            "name": "after_insert",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "mapper": [],
                "connection": [],
                "target": []
            }
        },
        "MapperEvents.before_update": {
            "name": "before_update",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "mapper": [],
                "connection": [],
                "target": []
            }
        },
        "MapperEvents.after_update": {
            "name": "after_update",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "mapper": [],
                "connection": [],
                "target": []
            }
        },
        "MapperEvents.before_delete": {
            "name": "before_delete",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "mapper": [],
                "connection": [],
                "target": []
            }
        },
        "MapperEvents.after_delete": {
            "name": "after_delete",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "mapper": [],
                "connection": [],
                "target": []
            }
        },
        "_MapperEventsHold.resolve": {
            "name": "resolve",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "class_": []
            }
        },
        "SessionEvents.after_transaction_create": {
            "name": "after_transaction_create",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "session": [],
                "transaction": []
            }
        },
        "SessionEvents.after_transaction_end": {
            "name": "after_transaction_end",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "session": [],
                "transaction": []
            }
        },
        "SessionEvents.before_commit": {
            "name": "before_commit",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "session": []
            }
        },
        "SessionEvents.after_commit": {
            "name": "after_commit",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "session": []
            }
        },
        "SessionEvents.after_rollback": {
            "name": "after_rollback",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "session": []
            }
        },
        "SessionEvents.after_soft_rollback": {
            "name": "after_soft_rollback",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "session": [],
                "previous_transaction": []
            }
        },
        "SessionEvents.before_flush": {
            "name": "before_flush",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "session": [],
                "flush_context": [],
                "instances": []
            }
        },
        "SessionEvents.after_flush": {
            "name": "after_flush",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "session": [],
                "flush_context": []
            }
        },
        "SessionEvents.after_flush_postexec": {
            "name": "after_flush_postexec",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "session": [],
                "flush_context": []
            }
        },
        "SessionEvents.after_begin": {
            "name": "after_begin",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "session": [],
                "transaction": [],
                "connection": []
            }
        },
        "SessionEvents.before_attach": {
            "name": "before_attach",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "session": [],
                "instance": []
            }
        },
        "SessionEvents.after_attach": {
            "name": "after_attach",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "session": [],
                "instance": []
            }
        },
        "SessionEvents.after_bulk_update": {
            "name": "after_bulk_update",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "update_context": []
            }
        },
        "SessionEvents.after_bulk_delete": {
            "name": "after_bulk_delete",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "delete_context": []
            }
        },
        "SessionEvents.transient_to_pending": {
            "name": "transient_to_pending",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "session": [],
                "instance": []
            }
        },
        "SessionEvents.pending_to_transient": {
            "name": "pending_to_transient",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "session": [],
                "instance": []
            }
        },
        "SessionEvents.persistent_to_transient": {
            "name": "persistent_to_transient",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "session": [],
                "instance": []
            }
        },
        "SessionEvents.pending_to_persistent": {
            "name": "pending_to_persistent",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "session": [],
                "instance": []
            }
        },
        "SessionEvents.detached_to_persistent": {
            "name": "detached_to_persistent",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "session": [],
                "instance": []
            }
        },
        "SessionEvents.loaded_as_persistent": {
            "name": "loaded_as_persistent",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "session": [],
                "instance": []
            }
        },
        "SessionEvents.persistent_to_deleted": {
            "name": "persistent_to_deleted",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "session": [],
                "instance": []
            }
        },
        "SessionEvents.deleted_to_persistent": {
            "name": "deleted_to_persistent",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "session": [],
                "instance": []
            }
        },
        "SessionEvents.deleted_to_detached": {
            "name": "deleted_to_detached",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "session": [],
                "instance": []
            }
        },
        "SessionEvents.persistent_to_detached": {
            "name": "persistent_to_detached",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "session": [],
                "instance": []
            }
        },
        "AttributeEvents.append": {
            "name": "append",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "target": [],
                "value": [],
                "initiator": []
            }
        },
        "AttributeEvents.remove": {
            "name": "remove",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "target": [],
                "value": [],
                "initiator": []
            }
        },
        "AttributeEvents.set": {
            "name": "set",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "target": [],
                "value": [],
                "oldvalue": [],
                "initiator": []
            }
        },
        "AttributeEvents.init_scalar": {
            "name": "init_scalar",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "target": [],
                "value": [],
                "dict_": []
            }
        },
        "AttributeEvents.init_collection": {
            "name": "init_collection",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "target": [],
                "collection": [],
                "collection_adapter": []
            }
        },
        "AttributeEvents.dispose_collection": {
            "name": "dispose_collection",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "target": [],
                "collection": [],
                "collection_adpater": []
            }
        },
        "QueryEvents.before_compile": {
            "name": "before_compile",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "query": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/orm/exc.py": {
        "UnmappedInstanceError.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [],
                "msg": []
            }
        },
        "UnmappedInstanceError.__reduce__": {
            "name": "__reduce__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnmappedClassError.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "cls": [],
                "msg": []
            }
        },
        "UnmappedClassError.__reduce__": {
            "name": "__reduce__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ObjectDeletedError.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "msg": []
            }
        },
        "ObjectDeletedError.__reduce__": {
            "name": "__reduce__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/orm/identity.py": {
        "IdentityMap.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IdentityMap.keys": {
            "name": "keys",
            "location": 5,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IdentityMap.replace": {
            "name": "replace",
            "location": 6,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "IdentityMap.add": {
            "name": "add",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "IdentityMap.update": {
            "name": "update",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "dict": []
            }
        },
        "IdentityMap.clear": {
            "name": "clear",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IdentityMap.check_modified": {
            "name": "check_modified",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IdentityMap.has_key": {
            "name": "has_key",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "IdentityMap.popitem": {
            "name": "popitem",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IdentityMap.pop": {
            "name": "pop",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "IdentityMap.setdefault": {
            "name": "setdefault",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "default": []
            }
        },
        "IdentityMap.__len__": {
            "name": "__len__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IdentityMap.copy": {
            "name": "copy",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IdentityMap.__setitem__": {
            "name": "__setitem__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "IdentityMap.__delitem__": {
            "name": "__delitem__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "WeakInstanceDict.__getitem__": {
            "name": "__getitem__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "WeakInstanceDict.__contains__": {
            "name": "__contains__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "WeakInstanceDict.contains_state": {
            "name": "contains_state",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "WeakInstanceDict.replace": {
            "name": "replace",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "WeakInstanceDict.add": {
            "name": "add",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "WeakInstanceDict.get": {
            "name": "get",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "default": []
            }
        },
        "WeakInstanceDict.items": {
            "name": "items",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WeakInstanceDict.values": {
            "name": "values",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WeakInstanceDict.__iter__": {
            "name": "__iter__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WeakInstanceDict.iteritems": {
            "name": "iteritems",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WeakInstanceDict.itervalues": {
            "name": "itervalues",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WeakInstanceDict.all_states": {
            "name": "all_states",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WeakInstanceDict.discard": {
            "name": "discard",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "WeakInstanceDict.safe_discard": {
            "name": "safe_discard",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "WeakInstanceDict.prune": {
            "name": "prune",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StrongInstanceDict.itervalues": {
            "name": "itervalues",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StrongInstanceDict.iteritems": {
            "name": "iteritems",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StrongInstanceDict.__iter__": {
            "name": "__iter__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StrongInstanceDict.__getitem__": {
            "name": "__getitem__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "StrongInstanceDict.__contains__": {
            "name": "__contains__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "StrongInstanceDict.get": {
            "name": "get",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "default": []
            }
        },
        "StrongInstanceDict.values": {
            "name": "values",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StrongInstanceDict.items": {
            "name": "items",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StrongInstanceDict.all_states": {
            "name": "all_states",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StrongInstanceDict.contains_state": {
            "name": "contains_state",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "StrongInstanceDict.replace": {
            "name": "replace",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "StrongInstanceDict.add": {
            "name": "add",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "StrongInstanceDict.discard": {
            "name": "discard",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "StrongInstanceDict.safe_discard": {
            "name": "safe_discard",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "StrongInstanceDict.prune": {
            "name": "prune",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/orm/instrumentation.py": {
        "register_class": {
            "name": "register_class",
            "location": 56,
            "return": [],
            "arguments": {
                "class_": []
            }
        },
        "unregister_class": {
            "name": "unregister_class",
            "location": 57,
            "return": [],
            "arguments": {
                "class_": []
            }
        },
        "is_instrumented": {
            "name": "is_instrumented",
            "location": 58,
            "return": [],
            "arguments": {
                "instance": [],
                "key": []
            }
        },
        "ClassManager.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "class_": []
            }
        },
        "ClassManager.__hash__": {
            "name": "__hash__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassManager.__eq__": {
            "name": "__eq__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ClassManager.is_mapped": {
            "name": "is_mapped",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassManager.manage": {
            "name": "manage",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassManager.dispose": {
            "name": "dispose",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassManager.manager_getter": {
            "name": "manager_getter",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassManager.state_getter": {
            "name": "state_getter",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassManager.dict_getter": {
            "name": "dict_getter",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassManager.instrument_attribute": {
            "name": "instrument_attribute",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "inst": [],
                "propagated": []
            }
        },
        "ClassManager.subclass_managers": {
            "name": "subclass_managers",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "recursive": []
            }
        },
        "ClassManager.post_configure_attribute": {
            "name": "post_configure_attribute",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "ClassManager.uninstrument_attribute": {
            "name": "uninstrument_attribute",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "propagated": []
            }
        },
        "ClassManager.unregister": {
            "name": "unregister",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassManager.install_descriptor": {
            "name": "install_descriptor",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "inst": []
            }
        },
        "ClassManager.uninstall_descriptor": {
            "name": "uninstall_descriptor",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "ClassManager.install_member": {
            "name": "install_member",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "implementation": []
            }
        },
        "ClassManager.uninstall_member": {
            "name": "uninstall_member",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "ClassManager.instrument_collection_class": {
            "name": "instrument_collection_class",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "collection_class": []
            }
        },
        "ClassManager.initialize_collection": {
            "name": "initialize_collection",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "state": [],
                "factory": []
            }
        },
        "ClassManager.is_instrumented": {
            "name": "is_instrumented",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "search": []
            }
        },
        "ClassManager.get_impl": {
            "name": "get_impl",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "ClassManager.attributes": {
            "name": "attributes",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassManager.new_instance": {
            "name": "new_instance",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "ClassManager.setup_instance": {
            "name": "setup_instance",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "state": []
            }
        },
        "ClassManager.teardown_instance": {
            "name": "teardown_instance",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "instance": []
            }
        },
        "ClassManager.has_state": {
            "name": "has_state",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "instance": []
            }
        },
        "ClassManager.has_parent": {
            "name": "has_parent",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "key": [],
                "optimistic": []
            }
        },
        "ClassManager.__bool__": {
            "name": "__bool__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InstrumentationFactory.create_manager_for_cls": {
            "name": "create_manager_for_cls",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "class_": []
            }
        },
        "InstrumentationFactory.unregister": {
            "name": "unregister",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "class_": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/orm/interfaces.py": {
        "MapperProperty.setup": {
            "name": "setup",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "context": [],
                "entity": [],
                "path": [],
                "adapter": []
            }
        },
        "MapperProperty.create_row_processor": {
            "name": "create_row_processor",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "context": [],
                "path": [],
                "mapper": [],
                "result": [],
                "adapter": [],
                "populators": []
            }
        },
        "MapperProperty.cascade_iterator": {
            "name": "cascade_iterator",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "type_": [],
                "state": [],
                "visited_instances": [],
                "halt_on": []
            }
        },
        "MapperProperty.set_parent": {
            "name": "set_parent",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "parent": [],
                "init": []
            }
        },
        "MapperProperty.instrument_class": {
            "name": "instrument_class",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "mapper": []
            }
        },
        "MapperProperty.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MapperProperty.init": {
            "name": "init",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MapperProperty.class_attribute": {
            "name": "class_attribute",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MapperProperty.do_init": {
            "name": "do_init",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MapperProperty.post_instrument_class": {
            "name": "post_instrument_class",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "mapper": []
            }
        },
        "MapperProperty.merge": {
            "name": "merge",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "session": [],
                "source_state": [],
                "source_dict": [],
                "dest_state": [],
                "dest_dict": [],
                "load": [],
                "_recursive": [],
                "_resolve_conflict_map": []
            }
        },
        "PropComparator.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "prop": [],
                "parentmapper": [],
                "adapt_to_entity": []
            }
        },
        "PropComparator.__clause_element__": {
            "name": "__clause_element__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PropComparator.adapt_to_entity": {
            "name": "adapt_to_entity",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "adapt_to_entity": []
            }
        },
        "PropComparator.adapter": {
            "name": "adapter",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PropComparator.info": {
            "name": "info",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PropComparator.any_op": {
            "name": "any_op",
            "location": 48,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "PropComparator.has_op": {
            "name": "has_op",
            "location": 50,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "PropComparator.of_type_op": {
            "name": "of_type_op",
            "location": 52,
            "return": [],
            "arguments": {
                "a": [],
                "class_": []
            }
        },
        "PropComparator.of_type": {
            "name": "of_type",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "class_": []
            }
        },
        "PropComparator.any": {
            "name": "any",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "criterion": []
            }
        },
        "PropComparator.has": {
            "name": "has",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "criterion": []
            }
        },
        "StrategizedProperty.setup": {
            "name": "setup",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "context": [],
                "entity": [],
                "path": [],
                "adapter": []
            }
        },
        "StrategizedProperty.create_row_processor": {
            "name": "create_row_processor",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "context": [],
                "path": [],
                "mapper": [],
                "result": [],
                "adapter": [],
                "populators": []
            }
        },
        "StrategizedProperty.do_init": {
            "name": "do_init",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StrategizedProperty.post_instrument_class": {
            "name": "post_instrument_class",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "mapper": []
            }
        },
        "StrategizedProperty.strategy_for": {
            "name": "strategy_for",
            "location": 65,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "MapperOption.process_query": {
            "name": "process_query",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "query": []
            }
        },
        "MapperOption.process_query_conditionally": {
            "name": "process_query_conditionally",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "query": []
            }
        },
        "LoaderStrategy.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "parent": [],
                "strategy_key": []
            }
        },
        "LoaderStrategy.init_class_attribute": {
            "name": "init_class_attribute",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "mapper": []
            }
        },
        "LoaderStrategy.setup_query": {
            "name": "setup_query",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "context": [],
                "entity": [],
                "path": [],
                "loadopt": [],
                "adapter": []
            }
        },
        "LoaderStrategy.create_row_processor": {
            "name": "create_row_processor",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "context": [],
                "path": [],
                "loadopt": [],
                "mapper": [],
                "result": [],
                "adapter": [],
                "populators": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/orm/loading.py": {
        "instances": {
            "name": "instances",
            "location": 3,
            "return": [],
            "arguments": {
                "query": [],
                "cursor": [],
                "context": []
            }
        },
        "merge_result": {
            "name": "merge_result",
            "location": 4,
            "return": [],
            "arguments": {
                "query": [],
                "iterator": [],
                "load": []
            }
        },
        "get_from_identity": {
            "name": "get_from_identity",
            "location": 5,
            "return": [],
            "arguments": {
                "session": [],
                "key": [],
                "passive": []
            }
        },
        "load_on_ident": {
            "name": "load_on_ident",
            "location": 6,
            "return": [],
            "arguments": {
                "query": [],
                "key": [],
                "refresh_state": [],
                "lockmode": [],
                "only_load_props": []
            }
        },
        "load_scalar_attributes": {
            "name": "load_scalar_attributes",
            "location": 8,
            "return": [],
            "arguments": {
                "mapper": [],
                "state": [],
                "attribute_names": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/orm/mapper.py": {
        "configure_mappers": {
            "name": "configure_mappers",
            "location": 95,
            "return": [],
            "arguments": {}
        },
        "reconstructor": {
            "name": "reconstructor",
            "location": 96,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "validates": {
            "name": "validates",
            "location": 97,
            "return": [],
            "arguments": {}
        },
        "Mapper.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "class_": [],
                "local_table": [],
                "properties": [],
                "primary_key": [],
                "non_primary": [],
                "inherits": [],
                "inherit_condition": [],
                "inherit_foreign_keys": [],
                "extension": [],
                "order_by": [],
                "always_refresh": [],
                "version_id_col": [],
                "version_id_generator": [],
                "polymorphic_on": [],
                "_polymorphic_map": [],
                "polymorphic_identity": [],
                "concrete": [],
                "with_polymorphic": [],
                "allow_partial_pks": [],
                "batch": [],
                "column_prefix": [],
                "include_properties": [],
                "exclude_properties": [],
                "passive_updates": [],
                "passive_deletes": [],
                "confirm_deleted_rows": [],
                "eager_defaults": [],
                "legacy_is_orphan": [],
                "_compiled_cache_size": []
            }
        },
        "Mapper.mapper": {
            "name": "mapper",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mapper.entity": {
            "name": "entity",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mapper.dispose": {
            "name": "dispose",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mapper.add_properties": {
            "name": "add_properties",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "dict_of_properties": []
            }
        },
        "Mapper.add_property": {
            "name": "add_property",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "prop": []
            }
        },
        "Mapper.has_property": {
            "name": "has_property",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Mapper.get_property": {
            "name": "get_property",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "_configure_mappers": []
            }
        },
        "Mapper.get_property_by_column": {
            "name": "get_property_by_column",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "column": []
            }
        },
        "Mapper.iterate_properties": {
            "name": "iterate_properties",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mapper.selectable": {
            "name": "selectable",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mapper.attrs": {
            "name": "attrs",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mapper.all_orm_descriptors": {
            "name": "all_orm_descriptors",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mapper.synonyms": {
            "name": "synonyms",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mapper.column_attrs": {
            "name": "column_attrs",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mapper.relationships": {
            "name": "relationships",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mapper.composites": {
            "name": "composites",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mapper.common_parent": {
            "name": "common_parent",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Mapper.isa": {
            "name": "isa",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Mapper.iterate_to_root": {
            "name": "iterate_to_root",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mapper.self_and_descendants": {
            "name": "self_and_descendants",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mapper.polymorphic_iterator": {
            "name": "polymorphic_iterator",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mapper.primary_mapper": {
            "name": "primary_mapper",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mapper.primary_base_mapper": {
            "name": "primary_base_mapper",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mapper.identity_key_from_row": {
            "name": "identity_key_from_row",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "row": [],
                "adapter": []
            }
        },
        "Mapper.identity_key_from_primary_key": {
            "name": "identity_key_from_primary_key",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "primary_key": []
            }
        },
        "Mapper.identity_key_from_instance": {
            "name": "identity_key_from_instance",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "instance": []
            }
        },
        "Mapper.primary_key_from_instance": {
            "name": "primary_key_from_instance",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "instance": []
            }
        },
        "Mapper.cascade_iterator": {
            "name": "cascade_iterator",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "type_": [],
                "state": [],
                "halt_on": []
            }
        },
        "_ColumnMapping.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "mapper": []
            }
        },
        "_ColumnMapping.__missing__": {
            "name": "__missing__",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "column": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/orm/path_registry.py": {
        "PathRegistry.__eq__": {
            "name": "__eq__",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "PathRegistry.set": {
            "name": "set",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "attributes": [],
                "key": [],
                "value": []
            }
        },
        "PathRegistry.setdefault": {
            "name": "setdefault",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathRegistry.get": {
            "name": "get",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathRegistry.__len__": {
            "name": "__len__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathRegistry.length": {
            "name": "length",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathRegistry.pairs": {
            "name": "pairs",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathRegistry.contains_mapper": {
            "name": "contains_mapper",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "mapper": []
            }
        },
        "PathRegistry.contains": {
            "name": "contains",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "attributes": [],
                "key": []
            }
        },
        "PathRegistry.__reduce__": {
            "name": "__reduce__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathRegistry.serialize": {
            "name": "serialize",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathRegistry.deserialize": {
            "name": "deserialize",
            "location": 21,
            "return": [],
            "arguments": {
                "cls": [],
                "path": []
            }
        },
        "PathRegistry.per_mapper": {
            "name": "per_mapper",
            "location": 23,
            "return": [],
            "arguments": {
                "cls": [],
                "mapper": []
            }
        },
        "PathRegistry.coerce": {
            "name": "coerce",
            "location": 25,
            "return": [],
            "arguments": {
                "cls": [],
                "raw": []
            }
        },
        "PathRegistry.token": {
            "name": "token",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "token": []
            }
        },
        "PathRegistry.__add__": {
            "name": "__add__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RootRegistry.__getitem__": {
            "name": "__getitem__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "entity": []
            }
        },
        "TokenRegistry.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "parent": [],
                "token": []
            }
        },
        "TokenRegistry.generate_for_superclasses": {
            "name": "generate_for_superclasses",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TokenRegistry.__getitem__": {
            "name": "__getitem__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "entity": []
            }
        },
        "PropRegistry.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "parent": [],
                "prop": []
            }
        },
        "PropRegistry.has_entity": {
            "name": "has_entity",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PropRegistry.entity": {
            "name": "entity",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PropRegistry.mapper": {
            "name": "mapper",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PropRegistry.entity_path": {
            "name": "entity_path",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PropRegistry.__getitem__": {
            "name": "__getitem__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "entity": []
            }
        },
        "EntityRegistry.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "parent": [],
                "entity": []
            }
        },
        "EntityRegistry.mapper": {
            "name": "mapper",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EntityRegistry.__bool__": {
            "name": "__bool__",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EntityRegistry.__getitem__": {
            "name": "__getitem__",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "entity": []
            }
        },
        "EntityRegistry.__missing__": {
            "name": "__missing__",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/orm/persistence.py": {
        "save_obj": {
            "name": "save_obj",
            "location": 3,
            "return": [],
            "arguments": {
                "base_mapper": [],
                "states": [],
                "uowtransaction": [],
                "single": []
            }
        },
        "post_update": {
            "name": "post_update",
            "location": 4,
            "return": [],
            "arguments": {
                "base_mapper": [],
                "states": [],
                "uowtransaction": [],
                "post_update_cols": []
            }
        },
        "delete_obj": {
            "name": "delete_obj",
            "location": 5,
            "return": [],
            "arguments": {
                "base_mapper": [],
                "states": [],
                "uowtransaction": []
            }
        },
        "BulkUD.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "query": []
            }
        },
        "BulkUD.session": {
            "name": "session",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BulkUD.exec_": {
            "name": "exec_",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BulkUpdate.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "values": [],
                "update_kwargs": []
            }
        },
        "BulkUpdate.factory": {
            "name": "factory",
            "location": 23,
            "return": [],
            "arguments": {
                "cls": [],
                "query": [],
                "synchronize_session": [],
                "values": [],
                "update_kwargs": []
            }
        },
        "BulkDelete.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "query": []
            }
        },
        "BulkDelete.factory": {
            "name": "factory",
            "location": 28,
            "return": [],
            "arguments": {
                "cls": [],
                "query": [],
                "synchronize_session": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/orm/properties.py": {
        "ColumnProperty.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ColumnProperty.expression": {
            "name": "expression",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ColumnProperty.instrument_class": {
            "name": "instrument_class",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "mapper": []
            }
        },
        "ColumnProperty.do_init": {
            "name": "do_init",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ColumnProperty.copy": {
            "name": "copy",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ColumnProperty.merge": {
            "name": "merge",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "session": [],
                "source_state": [],
                "source_dict": [],
                "dest_state": [],
                "dest_dict": [],
                "load": [],
                "_recursive": [],
                "_resolve_conflict_map": []
            }
        },
        "ColumnProperty.Comparator._memoized_method___clause_element__": {
            "name": "_memoized_method___clause_element__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ColumnProperty.Comparator.operate": {
            "name": "operate",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "op": []
            }
        },
        "ColumnProperty.Comparator.reverse_operate": {
            "name": "reverse_operate",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "op": [],
                "other": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/orm/query.py": {
        "Query.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "entities": [],
                "session": []
            }
        },
        "Query.statement": {
            "name": "statement",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.subquery": {
            "name": "subquery",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "with_labels": [],
                "reduce_columns": []
            }
        },
        "Query.cte": {
            "name": "cte",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "recursive": []
            }
        },
        "Query.label": {
            "name": "label",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Query.as_scalar": {
            "name": "as_scalar",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.selectable": {
            "name": "selectable",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.__clause_element__": {
            "name": "__clause_element__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.enable_eagerloads": {
            "name": "enable_eagerloads",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Query.with_labels": {
            "name": "with_labels",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.enable_assertions": {
            "name": "enable_assertions",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Query.whereclause": {
            "name": "whereclause",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.with_polymorphic": {
            "name": "with_polymorphic",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "cls_or_mappers": [],
                "selectable": [],
                "polymorphic_on": []
            }
        },
        "Query.yield_per": {
            "name": "yield_per",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "count": []
            }
        },
        "Query.get": {
            "name": "get",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "ident": []
            }
        },
        "Query.correlate": {
            "name": "correlate",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.autoflush": {
            "name": "autoflush",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "setting": []
            }
        },
        "Query.populate_existing": {
            "name": "populate_existing",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.with_parent": {
            "name": "with_parent",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "property": []
            }
        },
        "Query.add_entity": {
            "name": "add_entity",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "entity": [],
                "alias": []
            }
        },
        "Query.with_session": {
            "name": "with_session",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "session": []
            }
        },
        "Query.from_self": {
            "name": "from_self",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.values": {
            "name": "values",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.value": {
            "name": "value",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "column": []
            }
        },
        "Query.with_entities": {
            "name": "with_entities",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.add_columns": {
            "name": "add_columns",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.add_column": {
            "name": "add_column",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "column": []
            }
        },
        "Query.options": {
            "name": "options",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.with_transformation": {
            "name": "with_transformation",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "fn": []
            }
        },
        "Query.with_hint": {
            "name": "with_hint",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "selectable": [],
                "text": [],
                "dialect_name": []
            }
        },
        "Query.with_statement_hint": {
            "name": "with_statement_hint",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "text": [],
                "dialect_name": []
            }
        },
        "Query.execution_options": {
            "name": "execution_options",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.with_lockmode": {
            "name": "with_lockmode",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "mode": []
            }
        },
        "Query.with_for_update": {
            "name": "with_for_update",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "read": [],
                "nowait": [],
                "of": [],
                "skip_locked": [],
                "key_share": []
            }
        },
        "Query.params": {
            "name": "params",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.filter": {
            "name": "filter",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.filter_by": {
            "name": "filter_by",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.order_by": {
            "name": "order_by",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.group_by": {
            "name": "group_by",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.having": {
            "name": "having",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "criterion": []
            }
        },
        "Query.union": {
            "name": "union",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.union_all": {
            "name": "union_all",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.intersect": {
            "name": "intersect",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.intersect_all": {
            "name": "intersect_all",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.except_": {
            "name": "except_",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.except_all": {
            "name": "except_all",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.join": {
            "name": "join",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.outerjoin": {
            "name": "outerjoin",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.reset_joinpoint": {
            "name": "reset_joinpoint",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.select_from": {
            "name": "select_from",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.select_entity_from": {
            "name": "select_entity_from",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "from_obj": []
            }
        },
        "Query.__getitem__": {
            "name": "__getitem__",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "Query.slice": {
            "name": "slice",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "start": [],
                "stop": []
            }
        },
        "Query.limit": {
            "name": "limit",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "limit": []
            }
        },
        "Query.offset": {
            "name": "offset",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "offset": []
            }
        },
        "Query.distinct": {
            "name": "distinct",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.prefix_with": {
            "name": "prefix_with",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.suffix_with": {
            "name": "suffix_with",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.all": {
            "name": "all",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.from_statement": {
            "name": "from_statement",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "statement": []
            }
        },
        "Query.first": {
            "name": "first",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.one_or_none": {
            "name": "one_or_none",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.one": {
            "name": "one",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.scalar": {
            "name": "scalar",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.__iter__": {
            "name": "__iter__",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.column_descriptions": {
            "name": "column_descriptions",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.instances": {
            "name": "instances",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "cursor": [],
                "__context": []
            }
        },
        "Query.merge_result": {
            "name": "merge_result",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "iterator": [],
                "load": []
            }
        },
        "Query.exists": {
            "name": "exists",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.count": {
            "name": "count",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.delete": {
            "name": "delete",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "synchronize_session": []
            }
        },
        "Query.update": {
            "name": "update",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "values": [],
                "synchronize_session": [],
                "update_args": []
            }
        },
        "LockmodeArg.parse_legacy_query": {
            "name": "parse_legacy_query",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "mode": []
            }
        },
        "_QueryEntity.__new__": {
            "name": "__new__",
            "location": 101,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "_MapperEntity.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "entity": []
            }
        },
        "_MapperEntity.setup_entity": {
            "name": "setup_entity",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "ext_info": [],
                "aliased_adapter": []
            }
        },
        "_MapperEntity.set_with_polymorphic": {
            "name": "set_with_polymorphic",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "cls_or_mappers": [],
                "selectable": [],
                "polymorphic_on": []
            }
        },
        "_MapperEntity.type": {
            "name": "type",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_MapperEntity.entity_zero_or_selectable": {
            "name": "entity_zero_or_selectable",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_MapperEntity.corresponds_to": {
            "name": "corresponds_to",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "entity": []
            }
        },
        "_MapperEntity.adapt_to_selectable": {
            "name": "adapt_to_selectable",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "sel": []
            }
        },
        "_MapperEntity.row_processor": {
            "name": "row_processor",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "context": [],
                "result": []
            }
        },
        "_MapperEntity.setup_context": {
            "name": "setup_context",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "context": []
            }
        },
        "Bundle.__init__": {
            "name": "__init__",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Bundle.__clause_element__": {
            "name": "__clause_element__",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bundle.clauses": {
            "name": "clauses",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bundle.label": {
            "name": "label",
            "location": 139,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Bundle.create_row_processor": {
            "name": "create_row_processor",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "procs": [],
                "labels": []
            }
        },
        "_BundleEntity.__init__": {
            "name": "__init__",
            "location": 147,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "bundle": [],
                "setup_entities": []
            }
        },
        "_BundleEntity.entities": {
            "name": "entities",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_BundleEntity.entity_zero": {
            "name": "entity_zero",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_BundleEntity.corresponds_to": {
            "name": "corresponds_to",
            "location": 152,
            "return": [],
            "arguments": {
                "self": [],
                "entity": []
            }
        },
        "_BundleEntity.entity_zero_or_selectable": {
            "name": "entity_zero_or_selectable",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_BundleEntity.adapt_to_selectable": {
            "name": "adapt_to_selectable",
            "location": 155,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "sel": []
            }
        },
        "_BundleEntity.setup_entity": {
            "name": "setup_entity",
            "location": 156,
            "return": [],
            "arguments": {
                "self": [],
                "ext_info": [],
                "aliased_adapter": []
            }
        },
        "_BundleEntity.setup_context": {
            "name": "setup_context",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "context": []
            }
        },
        "_BundleEntity.row_processor": {
            "name": "row_processor",
            "location": 158,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "context": [],
                "result": []
            }
        },
        "_ColumnEntity.__init__": {
            "name": "__init__",
            "location": 171,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "column": [],
                "namespace": []
            }
        },
        "_ColumnEntity.entity_zero_or_selectable": {
            "name": "entity_zero_or_selectable",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ColumnEntity.adapt_to_selectable": {
            "name": "adapt_to_selectable",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "sel": []
            }
        },
        "_ColumnEntity.setup_entity": {
            "name": "setup_entity",
            "location": 177,
            "return": [],
            "arguments": {
                "self": [],
                "ext_info": [],
                "aliased_adapter": []
            }
        },
        "_ColumnEntity.corresponds_to": {
            "name": "corresponds_to",
            "location": 178,
            "return": [],
            "arguments": {
                "self": [],
                "entity": []
            }
        },
        "_ColumnEntity.row_processor": {
            "name": "row_processor",
            "location": 179,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "context": [],
                "result": []
            }
        },
        "_ColumnEntity.setup_context": {
            "name": "setup_context",
            "location": 180,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "context": []
            }
        },
        "QueryContext.__init__": {
            "name": "__init__",
            "location": 205,
            "return": [],
            "arguments": {
                "self": [],
                "query": []
            }
        },
        "AliasOption.__init__": {
            "name": "__init__",
            "location": 209,
            "return": [],
            "arguments": {
                "self": [],
                "alias": []
            }
        },
        "AliasOption.process_query": {
            "name": "process_query",
            "location": 210,
            "return": [],
            "arguments": {
                "self": [],
                "query": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/orm/relationships.py": {
        "remote": {
            "name": "remote",
            "location": 10,
            "return": [],
            "arguments": {
                "expr": []
            }
        },
        "foreign": {
            "name": "foreign",
            "location": 11,
            "return": [],
            "arguments": {
                "expr": []
            }
        },
        "RelationshipProperty.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "argument": [],
                "secondary": [],
                "primaryjoin": [],
                "secondaryjoin": [],
                "foreign_keys": [],
                "uselist": [],
                "order_by": [],
                "backref": [],
                "back_populates": [],
                "post_update": [],
                "cascade": [],
                "extension": [],
                "viewonly": [],
                "lazy": [],
                "collection_class": [],
                "passive_deletes": [],
                "passive_updates": [],
                "remote_side": [],
                "enable_typechecks": [],
                "join_depth": [],
                "comparator_factory": [],
                "single_parent": [],
                "innerjoin": [],
                "distinct_target_key": [],
                "doc": [],
                "active_history": [],
                "cascade_backrefs": [],
                "load_on_pending": [],
                "bake_queries": [],
                "_local_remote_pairs": [],
                "query_class": [],
                "info": []
            }
        },
        "RelationshipProperty.instrument_class": {
            "name": "instrument_class",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "mapper": []
            }
        },
        "RelationshipProperty.__eq__": {
            "name": "__eq__",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RelationshipProperty.merge": {
            "name": "merge",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "session": [],
                "source_state": [],
                "source_dict": [],
                "dest_state": [],
                "dest_dict": [],
                "load": [],
                "_recursive": [],
                "_resolve_conflict_map": []
            }
        },
        "RelationshipProperty.cascade_iterator": {
            "name": "cascade_iterator",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RelationshipProperty.mapper": {
            "name": "mapper",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RelationshipProperty.table": {
            "name": "table",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RelationshipProperty.do_init": {
            "name": "do_init",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RelationshipProperty.__get__": {
            "name": "__get__",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "owner": []
            }
        },
        "JoinCondition.__init__": {
            "name": "__init__",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "parent_selectable": [],
                "child_selectable": [],
                "parent_local_selectable": [],
                "child_local_selectable": [],
                "primaryjoin": [],
                "secondary": [],
                "secondaryjoin": [],
                "parent_equivalents": [],
                "child_equivalents": [],
                "consider_as_foreign_keys": [],
                "local_remote_pairs": [],
                "remote_side": [],
                "self_referential": [],
                "prop": [],
                "support_sync": [],
                "can_be_synced_fn": []
            }
        },
        "JoinCondition.primaryjoin_minus_local": {
            "name": "primaryjoin_minus_local",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JoinCondition.secondaryjoin_minus_local": {
            "name": "secondaryjoin_minus_local",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JoinCondition.primaryjoin_reverse_remote": {
            "name": "primaryjoin_reverse_remote",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JoinCondition.remote_columns": {
            "name": "remote_columns",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JoinCondition.local_columns": {
            "name": "local_columns",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JoinCondition.foreign_key_columns": {
            "name": "foreign_key_columns",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JoinCondition.deannotated_primaryjoin": {
            "name": "deannotated_primaryjoin",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JoinCondition.deannotated_secondaryjoin": {
            "name": "deannotated_secondaryjoin",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JoinCondition.join_targets": {
            "name": "join_targets",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "source_selectable": [],
                "dest_selectable": [],
                "aliased": [],
                "single_crit": []
            }
        },
        "JoinCondition.create_lazy_clause": {
            "name": "create_lazy_clause",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "reverse_direction": []
            }
        },
        "RelationshipProperty.Comparator.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "prop": [],
                "parentmapper": [],
                "adapt_to_entity": [],
                "of_type": []
            }
        },
        "RelationshipProperty.Comparator.adapt_to_entity": {
            "name": "adapt_to_entity",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "adapt_to_entity": []
            }
        },
        "RelationshipProperty.Comparator.mapper": {
            "name": "mapper",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RelationshipProperty.Comparator.__clause_element__": {
            "name": "__clause_element__",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RelationshipProperty.Comparator.of_type": {
            "name": "of_type",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "cls": []
            }
        },
        "RelationshipProperty.Comparator.in_": {
            "name": "in_",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RelationshipProperty.Comparator.__eq__": {
            "name": "__eq__",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RelationshipProperty.Comparator.any": {
            "name": "any",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "criterion": []
            }
        },
        "RelationshipProperty.Comparator.has": {
            "name": "has",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "criterion": []
            }
        },
        "RelationshipProperty.Comparator.contains": {
            "name": "contains",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RelationshipProperty.Comparator.__ne__": {
            "name": "__ne__",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RelationshipProperty.Comparator.property": {
            "name": "property",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/orm/scoping.py": {
        "scoped_session.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "session_factory": [],
                "scopefunc": []
            }
        },
        "scoped_session.__call__": {
            "name": "__call__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "scoped_session.remove": {
            "name": "remove",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "scoped_session.configure": {
            "name": "configure",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "scoped_session.query_property": {
            "name": "query_property",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "query_cls": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/orm/session.py": {
        "make_transient": {
            "name": "make_transient",
            "location": 111,
            "return": [],
            "arguments": {
                "instance": []
            }
        },
        "make_transient_to_detached": {
            "name": "make_transient_to_detached",
            "location": 112,
            "return": [],
            "arguments": {
                "instance": []
            }
        },
        "object_session": {
            "name": "object_session",
            "location": 113,
            "return": [],
            "arguments": {
                "instance": []
            }
        },
        "close_all_sessions": {
            "name": "close_all_sessions",
            "location": 114,
            "return": [],
            "arguments": {}
        },
        "_SessionClassMethods.close_all": {
            "name": "close_all",
            "location": 8,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "_SessionClassMethods.identity_key": {
            "name": "identity_key",
            "location": 10,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "_SessionClassMethods.object_session": {
            "name": "object_session",
            "location": 12,
            "return": [],
            "arguments": {
                "cls": [],
                "instance": []
            }
        },
        "SessionTransaction.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "session": [],
                "parent": [],
                "nested": []
            }
        },
        "SessionTransaction.parent": {
            "name": "parent",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SessionTransaction.is_active": {
            "name": "is_active",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SessionTransaction.connection": {
            "name": "connection",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "bindkey": [],
                "execution_options": []
            }
        },
        "SessionTransaction.prepare": {
            "name": "prepare",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SessionTransaction.commit": {
            "name": "commit",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SessionTransaction.rollback": {
            "name": "rollback",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "_capture_exception": []
            }
        },
        "SessionTransaction.close": {
            "name": "close",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "invalidate": []
            }
        },
        "SessionTransaction.__enter__": {
            "name": "__enter__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SessionTransaction.__exit__": {
            "name": "__exit__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "type": [],
                "value": [],
                "traceback": []
            }
        },
        "Session.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "bind": [],
                "autoflush": [],
                "expire_on_commit": [],
                "_enable_transaction_accounting": [],
                "autocommit": [],
                "twophase": [],
                "weak_identity_map": [],
                "binds": [],
                "extension": [],
                "info": [],
                "query_cls": []
            }
        },
        "Session.info": {
            "name": "info",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.begin": {
            "name": "begin",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "subtransactions": [],
                "nested": []
            }
        },
        "Session.begin_nested": {
            "name": "begin_nested",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.rollback": {
            "name": "rollback",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.commit": {
            "name": "commit",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.prepare": {
            "name": "prepare",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.connection": {
            "name": "connection",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "mapper": [],
                "clause": [],
                "bind": [],
                "close_with_result": [],
                "execution_options": []
            }
        },
        "Session.execute": {
            "name": "execute",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "clause": [],
                "params": [],
                "mapper": [],
                "bind": []
            }
        },
        "Session.scalar": {
            "name": "scalar",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "clause": [],
                "params": [],
                "mapper": [],
                "bind": []
            }
        },
        "Session.close": {
            "name": "close",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.invalidate": {
            "name": "invalidate",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.expunge_all": {
            "name": "expunge_all",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.bind_mapper": {
            "name": "bind_mapper",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "mapper": [],
                "bind": []
            }
        },
        "Session.bind_table": {
            "name": "bind_table",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "table": [],
                "bind": []
            }
        },
        "Session.get_bind": {
            "name": "get_bind",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "mapper": [],
                "clause": []
            }
        },
        "Session.query": {
            "name": "query",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.no_autoflush": {
            "name": "no_autoflush",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.refresh": {
            "name": "refresh",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "attribute_names": [],
                "lockmode": []
            }
        },
        "Session.expire_all": {
            "name": "expire_all",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.expire": {
            "name": "expire",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "attribute_names": []
            }
        },
        "Session.prune": {
            "name": "prune",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.expunge": {
            "name": "expunge",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "instance": []
            }
        },
        "Session.add": {
            "name": "add",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "_warn": []
            }
        },
        "Session.add_all": {
            "name": "add_all",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "instances": []
            }
        },
        "Session.delete": {
            "name": "delete",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "instance": []
            }
        },
        "Session.merge": {
            "name": "merge",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "load": []
            }
        },
        "Session.enable_relationship_loading": {
            "name": "enable_relationship_loading",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "Session.__contains__": {
            "name": "__contains__",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "instance": []
            }
        },
        "Session.__iter__": {
            "name": "__iter__",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.flush": {
            "name": "flush",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "objects": []
            }
        },
        "Session.bulk_save_objects": {
            "name": "bulk_save_objects",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "objects": [],
                "return_defaults": [],
                "update_changed_only": []
            }
        },
        "Session.bulk_insert_mappings": {
            "name": "bulk_insert_mappings",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "mapper": [],
                "mappings": [],
                "return_defaults": [],
                "render_nulls": []
            }
        },
        "Session.bulk_update_mappings": {
            "name": "bulk_update_mappings",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "mapper": [],
                "mappings": []
            }
        },
        "Session.is_modified": {
            "name": "is_modified",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "include_collections": [],
                "passive": []
            }
        },
        "Session.is_active": {
            "name": "is_active",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.dirty": {
            "name": "dirty",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.deleted": {
            "name": "deleted",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.new": {
            "name": "new",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "sessionmaker.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "bind": [],
                "class_": [],
                "autoflush": [],
                "autocommit": [],
                "expire_on_commit": [],
                "info": []
            }
        },
        "sessionmaker.__call__": {
            "name": "__call__",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "sessionmaker.configure": {
            "name": "configure",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/orm/state.py": {
        "InstanceState.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [],
                "manager": []
            }
        },
        "InstanceState.attrs": {
            "name": "attrs",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InstanceState.transient": {
            "name": "transient",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InstanceState.pending": {
            "name": "pending",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InstanceState.deleted": {
            "name": "deleted",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InstanceState.was_deleted": {
            "name": "was_deleted",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InstanceState.persistent": {
            "name": "persistent",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InstanceState.detached": {
            "name": "detached",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InstanceState.session": {
            "name": "session",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InstanceState.object": {
            "name": "object",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InstanceState.identity": {
            "name": "identity",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InstanceState.identity_key": {
            "name": "identity_key",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InstanceState.parents": {
            "name": "parents",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InstanceState.mapper": {
            "name": "mapper",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InstanceState.has_identity": {
            "name": "has_identity",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InstanceState.dict": {
            "name": "dict",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InstanceState.get_history": {
            "name": "get_history",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "passive": []
            }
        },
        "InstanceState.get_impl": {
            "name": "get_impl",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "InstanceState.unmodified": {
            "name": "unmodified",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InstanceState.unmodified_intersection": {
            "name": "unmodified_intersection",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "keys": []
            }
        },
        "InstanceState.unloaded": {
            "name": "unloaded",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AttributeState.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "key": []
            }
        },
        "AttributeState.loaded_value": {
            "name": "loaded_value",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AttributeState.value": {
            "name": "value",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AttributeState.history": {
            "name": "history",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AttributeState.load_history": {
            "name": "load_history",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PendingCollection.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PendingCollection.append": {
            "name": "append",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "PendingCollection.remove": {
            "name": "remove",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/orm/strategies.py": {
        "single_parent_validator": {
            "name": "single_parent_validator",
            "location": 87,
            "return": [],
            "arguments": {
                "desc": [],
                "prop": []
            }
        },
        "UninstrumentedColumnLoader.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "parent": [],
                "strategy_key": []
            }
        },
        "UninstrumentedColumnLoader.setup_query": {
            "name": "setup_query",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "context": [],
                "entity": [],
                "path": [],
                "loadopt": [],
                "adapter": [],
                "column_collection": []
            }
        },
        "UninstrumentedColumnLoader.create_row_processor": {
            "name": "create_row_processor",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "context": [],
                "path": [],
                "loadopt": [],
                "mapper": [],
                "result": [],
                "adapter": [],
                "populators": []
            }
        },
        "ColumnLoader.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "parent": [],
                "strategy_key": []
            }
        },
        "ColumnLoader.setup_query": {
            "name": "setup_query",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "context": [],
                "entity": [],
                "path": [],
                "loadopt": [],
                "adapter": [],
                "column_collection": [],
                "memoized_populators": []
            }
        },
        "ColumnLoader.init_class_attribute": {
            "name": "init_class_attribute",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "mapper": []
            }
        },
        "ColumnLoader.create_row_processor": {
            "name": "create_row_processor",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "context": [],
                "path": [],
                "loadopt": [],
                "mapper": [],
                "result": [],
                "adapter": [],
                "populators": []
            }
        },
        "DeferredColumnLoader.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "parent": [],
                "strategy_key": []
            }
        },
        "DeferredColumnLoader.create_row_processor": {
            "name": "create_row_processor",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "context": [],
                "path": [],
                "loadopt": [],
                "mapper": [],
                "result": [],
                "adapter": [],
                "populators": []
            }
        },
        "DeferredColumnLoader.init_class_attribute": {
            "name": "init_class_attribute",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "mapper": []
            }
        },
        "DeferredColumnLoader.setup_query": {
            "name": "setup_query",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoadDeferredColumns.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "LoadDeferredColumns.__call__": {
            "name": "__call__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "passive": []
            }
        },
        "AbstractRelationshipLoader.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "parent": [],
                "strategy_key": []
            }
        },
        "NoLoader.init_class_attribute": {
            "name": "init_class_attribute",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "mapper": []
            }
        },
        "NoLoader.create_row_processor": {
            "name": "create_row_processor",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "context": [],
                "path": [],
                "loadopt": [],
                "mapper": [],
                "result": [],
                "adapter": [],
                "populators": []
            }
        },
        "LazyLoader.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "parent": [],
                "strategy_key": []
            }
        },
        "LazyLoader.init_class_attribute": {
            "name": "init_class_attribute",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "mapper": []
            }
        },
        "LazyLoader.create_row_processor": {
            "name": "create_row_processor",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "context": [],
                "path": [],
                "loadopt": [],
                "mapper": [],
                "result": [],
                "adapter": [],
                "populators": []
            }
        },
        "LoadLazyAttribute.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "initiating_strategy": []
            }
        },
        "LoadLazyAttribute.__call__": {
            "name": "__call__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "passive": []
            }
        },
        "ImmediateLoader.init_class_attribute": {
            "name": "init_class_attribute",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "mapper": []
            }
        },
        "ImmediateLoader.setup_query": {
            "name": "setup_query",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "context": [],
                "entity": [],
                "path": [],
                "loadopt": [],
                "adapter": [],
                "column_collection": [],
                "parentmapper": []
            }
        },
        "ImmediateLoader.create_row_processor": {
            "name": "create_row_processor",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "context": [],
                "path": [],
                "loadopt": [],
                "mapper": [],
                "result": [],
                "adapter": [],
                "populators": []
            }
        },
        "SubqueryLoader.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "parent": [],
                "strategy_key": []
            }
        },
        "SubqueryLoader.init_class_attribute": {
            "name": "init_class_attribute",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "mapper": []
            }
        },
        "SubqueryLoader.setup_query": {
            "name": "setup_query",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "context": [],
                "entity": [],
                "path": [],
                "loadopt": [],
                "adapter": [],
                "column_collection": [],
                "parentmapper": []
            }
        },
        "SubqueryLoader.create_row_processor": {
            "name": "create_row_processor",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "context": [],
                "path": [],
                "loadopt": [],
                "mapper": [],
                "result": [],
                "adapter": [],
                "populators": []
            }
        },
        "JoinedLoader.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "parent": [],
                "strategy_key": []
            }
        },
        "JoinedLoader.init_class_attribute": {
            "name": "init_class_attribute",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "mapper": []
            }
        },
        "JoinedLoader.setup_query": {
            "name": "setup_query",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "context": [],
                "entity": [],
                "path": [],
                "loadopt": [],
                "adapter": [],
                "column_collection": [],
                "parentmapper": [],
                "chained_from_outerjoin": []
            }
        },
        "JoinedLoader.create_row_processor": {
            "name": "create_row_processor",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "context": [],
                "path": [],
                "loadopt": [],
                "mapper": [],
                "result": [],
                "adapter": [],
                "populators": []
            }
        },
        "SubqueryLoader._SubqCollections.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "subq": []
            }
        },
        "SubqueryLoader._SubqCollections.get": {
            "name": "get",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "default": []
            }
        },
        "SubqueryLoader._SubqCollections.loader": {
            "name": "loader",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "dict_": [],
                "row": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/orm/strategy_options.py": {
        "contains_eager": {
            "name": "contains_eager",
            "location": 31,
            "return": [],
            "arguments": {
                "loadopt": [],
                "attr": [],
                "alias": []
            }
        },
        "load_only": {
            "name": "load_only",
            "location": 32,
            "return": [],
            "arguments": {
                "loadopt": []
            }
        },
        "joinedload": {
            "name": "joinedload",
            "location": 33,
            "return": [],
            "arguments": {
                "loadopt": [],
                "attr": [],
                "innerjoin": []
            }
        },
        "joinedload_all": {
            "name": "joinedload_all",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "subqueryload": {
            "name": "subqueryload",
            "location": 35,
            "return": [],
            "arguments": {
                "loadopt": [],
                "attr": []
            }
        },
        "subqueryload_all": {
            "name": "subqueryload_all",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "lazyload": {
            "name": "lazyload",
            "location": 37,
            "return": [],
            "arguments": {
                "loadopt": [],
                "attr": []
            }
        },
        "lazyload_all": {
            "name": "lazyload_all",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "immediateload": {
            "name": "immediateload",
            "location": 39,
            "return": [],
            "arguments": {
                "loadopt": [],
                "attr": []
            }
        },
        "noload": {
            "name": "noload",
            "location": 40,
            "return": [],
            "arguments": {
                "loadopt": [],
                "attr": []
            }
        },
        "raiseload": {
            "name": "raiseload",
            "location": 41,
            "return": [],
            "arguments": {
                "loadopt": [],
                "attr": [],
                "sql_only": []
            }
        },
        "defaultload": {
            "name": "defaultload",
            "location": 42,
            "return": [],
            "arguments": {
                "loadopt": [],
                "attr": []
            }
        },
        "defer": {
            "name": "defer",
            "location": 43,
            "return": [],
            "arguments": {
                "loadopt": [],
                "key": []
            }
        },
        "undefer": {
            "name": "undefer",
            "location": 44,
            "return": [],
            "arguments": {
                "loadopt": [],
                "key": []
            }
        },
        "undefer_group": {
            "name": "undefer_group",
            "location": 45,
            "return": [],
            "arguments": {
                "loadopt": [],
                "name": []
            }
        },
        "Load.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "entity": []
            }
        },
        "Load.for_existing_path": {
            "name": "for_existing_path",
            "location": 11,
            "return": [],
            "arguments": {
                "cls": [],
                "path": []
            }
        },
        "Load.process_query": {
            "name": "process_query",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "query": []
            }
        },
        "Load.process_query_conditionally": {
            "name": "process_query_conditionally",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "query": []
            }
        },
        "Load.set_relationship_strategy": {
            "name": "set_relationship_strategy",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "attr": [],
                "strategy": [],
                "propagate_to_loaders": []
            }
        },
        "Load.set_column_strategy": {
            "name": "set_column_strategy",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "attrs": [],
                "strategy": [],
                "opts": [],
                "opts_only": []
            }
        },
        "_UnboundLoad.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "loader_option.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "loader_option.__call__": {
            "name": "__call__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "fn": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/orm/sync.py": {
        "populate": {
            "name": "populate",
            "location": 1,
            "return": [],
            "arguments": {
                "source": [],
                "source_mapper": [],
                "dest": [],
                "dest_mapper": [],
                "synchronize_pairs": [],
                "uowcommit": [],
                "flag_cascaded_pks": []
            }
        },
        "bulk_populate_inherit_keys": {
            "name": "bulk_populate_inherit_keys",
            "location": 2,
            "return": [],
            "arguments": {
                "source_dict": [],
                "source_mapper": [],
                "synchronize_pairs": []
            }
        },
        "clear": {
            "name": "clear",
            "location": 3,
            "return": [],
            "arguments": {
                "dest": [],
                "dest_mapper": [],
                "synchronize_pairs": []
            }
        },
        "update": {
            "name": "update",
            "location": 4,
            "return": [],
            "arguments": {
                "source": [],
                "source_mapper": [],
                "dest": [],
                "old_prefix": [],
                "synchronize_pairs": []
            }
        },
        "populate_dict": {
            "name": "populate_dict",
            "location": 5,
            "return": [],
            "arguments": {
                "source": [],
                "source_mapper": [],
                "dict_": [],
                "synchronize_pairs": []
            }
        },
        "source_modified": {
            "name": "source_modified",
            "location": 6,
            "return": [],
            "arguments": {
                "uowcommit": [],
                "source": [],
                "source_mapper": [],
                "synchronize_pairs": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/orm/unitofwork.py": {
        "track_cascade_events": {
            "name": "track_cascade_events",
            "location": 3,
            "return": [],
            "arguments": {
                "descriptor": [],
                "prop": []
            }
        },
        "UOWTransaction.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "session": []
            }
        },
        "UOWTransaction.has_work": {
            "name": "has_work",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UOWTransaction.was_already_deleted": {
            "name": "was_already_deleted",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "UOWTransaction.is_deleted": {
            "name": "is_deleted",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "UOWTransaction.memo": {
            "name": "memo",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "callable_": []
            }
        },
        "UOWTransaction.remove_state_actions": {
            "name": "remove_state_actions",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "UOWTransaction.get_attribute_history": {
            "name": "get_attribute_history",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "key": [],
                "passive": []
            }
        },
        "UOWTransaction.has_dep": {
            "name": "has_dep",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "processor": []
            }
        },
        "UOWTransaction.register_preprocessor": {
            "name": "register_preprocessor",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "processor": [],
                "fromparent": []
            }
        },
        "UOWTransaction.register_object": {
            "name": "register_object",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "isdelete": [],
                "listonly": [],
                "cancel_delete": [],
                "operation": [],
                "prop": []
            }
        },
        "UOWTransaction.issue_post_update": {
            "name": "issue_post_update",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "post_update_cols": []
            }
        },
        "UOWTransaction.filter_states_for_dep": {
            "name": "filter_states_for_dep",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "dep": [],
                "states": []
            }
        },
        "UOWTransaction.states_for_mapper_hierarchy": {
            "name": "states_for_mapper_hierarchy",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "mapper": [],
                "isdelete": [],
                "listonly": []
            }
        },
        "UOWTransaction.execute": {
            "name": "execute",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UOWTransaction.finalize_flush_changes": {
            "name": "finalize_flush_changes",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Preprocess.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "dependency_processor": [],
                "fromparent": []
            }
        },
        "Preprocess.execute": {
            "name": "execute",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "uow": []
            }
        },
        "PostSortRec.__new__": {
            "name": "__new__",
            "location": 46,
            "return": [],
            "arguments": {
                "cls": [],
                "uow": []
            }
        },
        "PostSortRec.execute_aggregate": {
            "name": "execute_aggregate",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "uow": [],
                "recs": []
            }
        },
        "ProcessAll.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "uow": [],
                "dependency_processor": [],
                "delete": [],
                "fromparent": []
            }
        },
        "ProcessAll.execute": {
            "name": "execute",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "uow": []
            }
        },
        "ProcessAll.per_state_flush_actions": {
            "name": "per_state_flush_actions",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "uow": []
            }
        },
        "IssuePostUpdate.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "uow": [],
                "mapper": [],
                "isdelete": []
            }
        },
        "IssuePostUpdate.execute": {
            "name": "execute",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "uow": []
            }
        },
        "SaveUpdateAll.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "uow": [],
                "mapper": []
            }
        },
        "SaveUpdateAll.execute": {
            "name": "execute",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "uow": []
            }
        },
        "SaveUpdateAll.per_state_flush_actions": {
            "name": "per_state_flush_actions",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "uow": []
            }
        },
        "DeleteAll.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "uow": [],
                "mapper": []
            }
        },
        "DeleteAll.execute": {
            "name": "execute",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "uow": []
            }
        },
        "DeleteAll.per_state_flush_actions": {
            "name": "per_state_flush_actions",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "uow": []
            }
        },
        "ProcessState.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "uow": [],
                "dependency_processor": [],
                "delete": [],
                "state": []
            }
        },
        "ProcessState.execute_aggregate": {
            "name": "execute_aggregate",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "uow": [],
                "recs": []
            }
        },
        "SaveUpdateState.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "uow": [],
                "state": [],
                "mapper": []
            }
        },
        "SaveUpdateState.execute_aggregate": {
            "name": "execute_aggregate",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "uow": [],
                "recs": []
            }
        },
        "DeleteState.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "uow": [],
                "state": [],
                "mapper": []
            }
        },
        "DeleteState.execute_aggregate": {
            "name": "execute_aggregate",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "uow": [],
                "recs": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/orm/util.py": {
        "polymorphic_union": {
            "name": "polymorphic_union",
            "location": 21,
            "return": [],
            "arguments": {
                "table_map": [],
                "typecolname": [],
                "aliasname": [],
                "cast_nulls": []
            }
        },
        "identity_key": {
            "name": "identity_key",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "aliased": {
            "name": "aliased",
            "location": 53,
            "return": [],
            "arguments": {
                "element": [],
                "alias": [],
                "name": [],
                "flat": [],
                "adapt_on_names": []
            }
        },
        "with_polymorphic": {
            "name": "with_polymorphic",
            "location": 55,
            "return": [],
            "arguments": {
                "base": [],
                "classes": [],
                "selectable": [],
                "flat": [],
                "polymorphic_on": [],
                "aliased": [],
                "innerjoin": [],
                "_use_mapper_path": [],
                "_existing_alias": []
            }
        },
        "join": {
            "name": "join",
            "location": 71,
            "return": [],
            "arguments": {
                "left": [],
                "right": [],
                "onclause": [],
                "isouter": [],
                "full": [],
                "join_to_left": []
            }
        },
        "outerjoin": {
            "name": "outerjoin",
            "location": 73,
            "return": [],
            "arguments": {
                "left": [],
                "right": [],
                "onclause": [],
                "full": [],
                "join_to_left": []
            }
        },
        "with_parent": {
            "name": "with_parent",
            "location": 75,
            "return": [],
            "arguments": {
                "instance": [],
                "prop": []
            }
        },
        "has_identity": {
            "name": "has_identity",
            "location": 76,
            "return": [],
            "arguments": {
                "object": []
            }
        },
        "was_deleted": {
            "name": "was_deleted",
            "location": 77,
            "return": [],
            "arguments": {
                "object": []
            }
        },
        "randomize_unitofwork": {
            "name": "randomize_unitofwork",
            "location": 78,
            "return": [],
            "arguments": {}
        },
        "CascadeOptions.__new__": {
            "name": "__new__",
            "location": 17,
            "return": [],
            "arguments": {
                "cls": [],
                "value_list": []
            }
        },
        "CascadeOptions.from_string": {
            "name": "from_string",
            "location": 19,
            "return": [],
            "arguments": {
                "cls": [],
                "arg": []
            }
        },
        "ORMAdapter.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "entity": [],
                "equivalents": [],
                "adapt_required": [],
                "chain_to": [],
                "allow_label_resolve": [],
                "anonymize_labels": []
            }
        },
        "AliasedClass.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "cls": [],
                "alias": [],
                "name": [],
                "flat": [],
                "adapt_on_names": [],
                "with_polymorphic_mappers": [],
                "with_polymorphic_discriminator": [],
                "base_alias": [],
                "use_mapper_path": []
            }
        },
        "AliasedClass.__getattr__": {
            "name": "__getattr__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "AliasedInsp.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "entity": [],
                "mapper": [],
                "selectable": [],
                "name": [],
                "with_polymorphic_mappers": [],
                "polymorphic_on": [],
                "_base_alias": [],
                "_use_mapper_path": [],
                "adapt_on_names": []
            }
        },
        "AliasedInsp.class_": {
            "name": "class_",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ORMJoin.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "left": [],
                "right": [],
                "onclause": [],
                "isouter": [],
                "full": [],
                "_left_memo": [],
                "_right_memo": []
            }
        },
        "_ORMJoin.join": {
            "name": "join",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "right": [],
                "onclause": [],
                "isouter": [],
                "full": [],
                "join_to_left": []
            }
        },
        "_ORMJoin.outerjoin": {
            "name": "outerjoin",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "right": [],
                "onclause": [],
                "full": [],
                "join_to_left": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/orm/__init__.py": {
        "create_session": {
            "name": "create_session",
            "location": 45,
            "return": [],
            "arguments": {
                "bind": []
            }
        },
        "relation": {
            "name": "relation",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "dynamic_loader": {
            "name": "dynamic_loader",
            "location": 50,
            "return": [],
            "arguments": {
                "argument": []
            }
        },
        "query_expression": {
            "name": "query_expression",
            "location": 55,
            "return": [],
            "arguments": {}
        },
        "backref": {
            "name": "backref",
            "location": 57,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "deferred": {
            "name": "deferred",
            "location": 58,
            "return": [],
            "arguments": {}
        },
        "compile_mappers": {
            "name": "compile_mappers",
            "location": 64,
            "return": [],
            "arguments": {}
        },
        "clear_mappers": {
            "name": "clear_mappers",
            "location": 65,
            "return": [],
            "arguments": {}
        },
        "eagerload": {
            "name": "eagerload",
            "location": 88,
            "return": [],
            "arguments": {}
        },
        "eagerload_all": {
            "name": "eagerload_all",
            "location": 89,
            "return": [],
            "arguments": {}
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/sql/annotation.py": {
        "Annotated.__new__": {
            "name": "__new__",
            "location": 7,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Annotated.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "element": [],
                "values": []
            }
        },
        "Annotated.__hash__": {
            "name": "__hash__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Annotated.__eq__": {
            "name": "__eq__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Annotated._annotate": {
            "name": "_annotate",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "values": []
            }
        },
        "Annotated._with_annotations": {
            "name": "_with_annotations",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "values": []
            }
        },
        "Annotated._deannotate": {
            "name": "_deannotate",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "values": [],
                "clone": []
            }
        },
        "Annotated._compiler_dispatch": {
            "name": "_compiler_dispatch",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "visitor": []
            }
        },
        "Annotated._constructor": {
            "name": "_constructor",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Annotated._clone": {
            "name": "_clone",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/sql/base.py": {
        "Immutable.unique_params": {
            "name": "unique_params",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Immutable.params": {
            "name": "params",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Immutable._clone": {
            "name": "_clone",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_DialectArgView.__getitem__": {
            "name": "__getitem__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "_DialectArgView.__setitem__": {
            "name": "__setitem__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "_DialectArgView.__delitem__": {
            "name": "__delitem__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "_DialectArgView.__len__": {
            "name": "__len__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_DialectArgView.__iter__": {
            "name": "__iter__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DialectKWArgs.argument_for": {
            "name": "argument_for",
            "location": 30,
            "return": [],
            "arguments": {
                "cls": [],
                "dialect_name": [],
                "argument_name": [],
                "default": []
            }
        },
        "DialectKWArgs.dialect_kwargs": {
            "name": "dialect_kwargs",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DialectKWArgs.kwargs": {
            "name": "kwargs",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DialectKWArgs.dialect_options": {
            "name": "dialect_options",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Executable.execution_options": {
            "name": "execution_options",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Executable.execute": {
            "name": "execute",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Executable.scalar": {
            "name": "scalar",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Executable.bind": {
            "name": "bind",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ColumnCollection.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ColumnCollection.__str__": {
            "name": "__str__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ColumnCollection.replace": {
            "name": "replace",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "column": []
            }
        },
        "ColumnCollection.add": {
            "name": "add",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "column": []
            }
        },
        "ColumnCollection.__delitem__": {
            "name": "__delitem__",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "ColumnCollection.__setattr__": {
            "name": "__setattr__",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "object": []
            }
        },
        "ColumnCollection.__setitem__": {
            "name": "__setitem__",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "ColumnCollection.clear": {
            "name": "clear",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ColumnCollection.remove": {
            "name": "remove",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "column": []
            }
        },
        "ColumnCollection.update": {
            "name": "update",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "iter": []
            }
        },
        "ColumnCollection.extend": {
            "name": "extend",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "iter": []
            }
        },
        "ColumnCollection.__eq__": {
            "name": "__eq__",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnCollection.__contains__": {
            "name": "__contains__",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnCollection.contains_column": {
            "name": "contains_column",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "col": []
            }
        },
        "ColumnCollection.as_immutable": {
            "name": "as_immutable",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ImmutableColumnCollection.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "all_columns": []
            }
        },
        "ColumnSet.contains_column": {
            "name": "contains_column",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "col": []
            }
        },
        "ColumnSet.extend": {
            "name": "extend",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "cols": []
            }
        },
        "ColumnSet.__add__": {
            "name": "__add__",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnSet.__eq__": {
            "name": "__eq__",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnSet.__hash__": {
            "name": "__hash__",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/sql/compiler.py": {
        "Compiled.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": [],
                "statement": [],
                "bind": [],
                "schema_translate_map": [],
                "compile_kwargs": []
            }
        },
        "Compiled.compile": {
            "name": "compile",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Compiled.sql_compiler": {
            "name": "sql_compiler",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Compiled.process": {
            "name": "process",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "Compiled.__str__": {
            "name": "__str__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Compiled.construct_params": {
            "name": "construct_params",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "params": []
            }
        },
        "Compiled.params": {
            "name": "params",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Compiled.execute": {
            "name": "execute",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Compiled.scalar": {
            "name": "scalar",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TypeCompiler.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": []
            }
        },
        "TypeCompiler.process": {
            "name": "process",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "SQLCompiler.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": [],
                "statement": [],
                "column_keys": [],
                "inline": []
            }
        },
        "SQLCompiler.prefetch": {
            "name": "prefetch",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SQLCompiler.is_subquery": {
            "name": "is_subquery",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SQLCompiler.sql_compiler": {
            "name": "sql_compiler",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SQLCompiler.construct_params": {
            "name": "construct_params",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "params": [],
                "_group_number": [],
                "_check": []
            }
        },
        "SQLCompiler.params": {
            "name": "params",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SQLCompiler.default_from": {
            "name": "default_from",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SQLCompiler.visit_grouping": {
            "name": "visit_grouping",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "grouping": [],
                "asfrom": []
            }
        },
        "SQLCompiler.visit_label_reference": {
            "name": "visit_label_reference",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "element": [],
                "within_columns_clause": []
            }
        },
        "SQLCompiler.visit_textual_label_reference": {
            "name": "visit_textual_label_reference",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "element": [],
                "within_columns_clause": []
            }
        },
        "SQLCompiler.visit_label": {
            "name": "visit_label",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "label": [],
                "add_to_result_map": [],
                "within_label_clause": [],
                "within_columns_clause": [],
                "render_label_as_label": []
            }
        },
        "SQLCompiler.visit_column": {
            "name": "visit_column",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "column": [],
                "add_to_result_map": [],
                "include_table": []
            }
        },
        "SQLCompiler.escape_literal_column": {
            "name": "escape_literal_column",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "SQLCompiler.visit_collation": {
            "name": "visit_collation",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "element": []
            }
        },
        "SQLCompiler.visit_fromclause": {
            "name": "visit_fromclause",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "fromclause": []
            }
        },
        "SQLCompiler.visit_index": {
            "name": "visit_index",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "SQLCompiler.visit_typeclause": {
            "name": "visit_typeclause",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "typeclause": []
            }
        },
        "SQLCompiler.post_process_text": {
            "name": "post_process_text",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "SQLCompiler.visit_textclause": {
            "name": "visit_textclause",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "textclause": []
            }
        },
        "SQLCompiler.visit_text_as_from": {
            "name": "visit_text_as_from",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "taf": [],
                "compound_index": [],
                "asfrom": [],
                "parens": []
            }
        },
        "SQLCompiler.visit_null": {
            "name": "visit_null",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "expr": []
            }
        },
        "SQLCompiler.visit_true": {
            "name": "visit_true",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "expr": []
            }
        },
        "SQLCompiler.visit_false": {
            "name": "visit_false",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "expr": []
            }
        },
        "SQLCompiler.visit_clauselist": {
            "name": "visit_clauselist",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "clauselist": []
            }
        },
        "SQLCompiler.visit_case": {
            "name": "visit_case",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "clause": []
            }
        },
        "SQLCompiler.visit_type_coerce": {
            "name": "visit_type_coerce",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "type_coerce": []
            }
        },
        "SQLCompiler.visit_cast": {
            "name": "visit_cast",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "cast": []
            }
        },
        "SQLCompiler.visit_over": {
            "name": "visit_over",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "over": []
            }
        },
        "SQLCompiler.visit_withingroup": {
            "name": "visit_withingroup",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "withingroup": []
            }
        },
        "SQLCompiler.visit_funcfilter": {
            "name": "visit_funcfilter",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "funcfilter": []
            }
        },
        "SQLCompiler.visit_extract": {
            "name": "visit_extract",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "extract": []
            }
        },
        "SQLCompiler.visit_function": {
            "name": "visit_function",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "func": [],
                "add_to_result_map": []
            }
        },
        "SQLCompiler.visit_next_value_func": {
            "name": "visit_next_value_func",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "next_value": []
            }
        },
        "SQLCompiler.visit_sequence": {
            "name": "visit_sequence",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "sequence": []
            }
        },
        "SQLCompiler.function_argspec": {
            "name": "function_argspec",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "SQLCompiler.visit_compound_select": {
            "name": "visit_compound_select",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "cs": [],
                "asfrom": [],
                "parens": [],
                "compound_index": []
            }
        },
        "SQLCompiler.visit_unary": {
            "name": "visit_unary",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "unary": []
            }
        },
        "SQLCompiler.visit_istrue_unary_operator": {
            "name": "visit_istrue_unary_operator",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "element": [],
                "operator": []
            }
        },
        "SQLCompiler.visit_isfalse_unary_operator": {
            "name": "visit_isfalse_unary_operator",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "element": [],
                "operator": []
            }
        },
        "SQLCompiler.visit_notmatch_op_binary": {
            "name": "visit_notmatch_op_binary",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "binary": [],
                "operator": []
            }
        },
        "SQLCompiler.visit_binary": {
            "name": "visit_binary",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "binary": [],
                "override_operator": [],
                "eager_grouping": []
            }
        },
        "SQLCompiler.visit_mod_binary": {
            "name": "visit_mod_binary",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "binary": [],
                "operator": []
            }
        },
        "SQLCompiler.visit_custom_op_binary": {
            "name": "visit_custom_op_binary",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "element": [],
                "operator": []
            }
        },
        "SQLCompiler.visit_custom_op_unary_operator": {
            "name": "visit_custom_op_unary_operator",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "element": [],
                "operator": []
            }
        },
        "SQLCompiler.visit_custom_op_unary_modifier": {
            "name": "visit_custom_op_unary_modifier",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "element": [],
                "operator": []
            }
        },
        "SQLCompiler.visit_contains_op_binary": {
            "name": "visit_contains_op_binary",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "binary": [],
                "operator": []
            }
        },
        "SQLCompiler.visit_notcontains_op_binary": {
            "name": "visit_notcontains_op_binary",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "binary": [],
                "operator": []
            }
        },
        "SQLCompiler.visit_startswith_op_binary": {
            "name": "visit_startswith_op_binary",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "binary": [],
                "operator": []
            }
        },
        "SQLCompiler.visit_notstartswith_op_binary": {
            "name": "visit_notstartswith_op_binary",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "binary": [],
                "operator": []
            }
        },
        "SQLCompiler.visit_endswith_op_binary": {
            "name": "visit_endswith_op_binary",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "binary": [],
                "operator": []
            }
        },
        "SQLCompiler.visit_notendswith_op_binary": {
            "name": "visit_notendswith_op_binary",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "binary": [],
                "operator": []
            }
        },
        "SQLCompiler.visit_like_op_binary": {
            "name": "visit_like_op_binary",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "binary": [],
                "operator": []
            }
        },
        "SQLCompiler.visit_notlike_op_binary": {
            "name": "visit_notlike_op_binary",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "binary": [],
                "operator": []
            }
        },
        "SQLCompiler.visit_ilike_op_binary": {
            "name": "visit_ilike_op_binary",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "binary": [],
                "operator": []
            }
        },
        "SQLCompiler.visit_notilike_op_binary": {
            "name": "visit_notilike_op_binary",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "binary": [],
                "operator": []
            }
        },
        "SQLCompiler.visit_between_op_binary": {
            "name": "visit_between_op_binary",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "binary": [],
                "operator": []
            }
        },
        "SQLCompiler.visit_notbetween_op_binary": {
            "name": "visit_notbetween_op_binary",
            "location": 137,
            "return": [],
            "arguments": {
                "self": [],
                "binary": [],
                "operator": []
            }
        },
        "SQLCompiler.visit_bindparam": {
            "name": "visit_bindparam",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "bindparam": [],
                "within_columns_clause": [],
                "literal_binds": [],
                "skip_bind_expression": []
            }
        },
        "SQLCompiler.render_literal_bindparam": {
            "name": "render_literal_bindparam",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "bindparam": []
            }
        },
        "SQLCompiler.render_literal_value": {
            "name": "render_literal_value",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "type_": []
            }
        },
        "SQLCompiler.bindparam_string": {
            "name": "bindparam_string",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "positional_names": []
            }
        },
        "SQLCompiler.visit_cte": {
            "name": "visit_cte",
            "location": 145,
            "return": [],
            "arguments": {
                "self": [],
                "cte": [],
                "asfrom": [],
                "ashint": [],
                "fromhints": []
            }
        },
        "SQLCompiler.visit_alias": {
            "name": "visit_alias",
            "location": 147,
            "return": [],
            "arguments": {
                "self": [],
                "alias": [],
                "asfrom": [],
                "ashint": [],
                "iscrud": [],
                "fromhints": []
            }
        },
        "SQLCompiler.visit_lateral": {
            "name": "visit_lateral",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "lateral": []
            }
        },
        "SQLCompiler.visit_tablesample": {
            "name": "visit_tablesample",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "tablesample": [],
                "asfrom": []
            }
        },
        "SQLCompiler.get_render_as_alias_suffix": {
            "name": "get_render_as_alias_suffix",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "alias_name_text": []
            }
        },
        "SQLCompiler.format_from_hint_text": {
            "name": "format_from_hint_text",
            "location": 152,
            "return": [],
            "arguments": {
                "self": [],
                "sqltext": [],
                "table": [],
                "hint": [],
                "iscrud": []
            }
        },
        "SQLCompiler.get_select_hint_text": {
            "name": "get_select_hint_text",
            "location": 153,
            "return": [],
            "arguments": {
                "self": [],
                "byfroms": []
            }
        },
        "SQLCompiler.get_from_hint_text": {
            "name": "get_from_hint_text",
            "location": 154,
            "return": [],
            "arguments": {
                "self": [],
                "table": [],
                "text": []
            }
        },
        "SQLCompiler.get_crud_hint_text": {
            "name": "get_crud_hint_text",
            "location": 155,
            "return": [],
            "arguments": {
                "self": [],
                "table": [],
                "text": []
            }
        },
        "SQLCompiler.get_statement_hint_text": {
            "name": "get_statement_hint_text",
            "location": 156,
            "return": [],
            "arguments": {
                "self": [],
                "hint_texts": []
            }
        },
        "SQLCompiler.visit_select": {
            "name": "visit_select",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "select": [],
                "asfrom": [],
                "parens": [],
                "fromhints": [],
                "compound_index": [],
                "nested_join_translation": [],
                "select_wraps_for": [],
                "lateral": []
            }
        },
        "SQLCompiler.get_cte_preamble": {
            "name": "get_cte_preamble",
            "location": 160,
            "return": [],
            "arguments": {
                "self": [],
                "recursive": []
            }
        },
        "SQLCompiler.get_select_precolumns": {
            "name": "get_select_precolumns",
            "location": 161,
            "return": [],
            "arguments": {
                "self": [],
                "select": []
            }
        },
        "SQLCompiler.order_by_clause": {
            "name": "order_by_clause",
            "location": 162,
            "return": [],
            "arguments": {
                "self": [],
                "select": []
            }
        },
        "SQLCompiler.for_update_clause": {
            "name": "for_update_clause",
            "location": 163,
            "return": [],
            "arguments": {
                "self": [],
                "select": []
            }
        },
        "SQLCompiler.returning_clause": {
            "name": "returning_clause",
            "location": 164,
            "return": [],
            "arguments": {
                "self": [],
                "stmt": [],
                "returning_cols": []
            }
        },
        "SQLCompiler.limit_clause": {
            "name": "limit_clause",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "select": []
            }
        },
        "SQLCompiler.visit_table": {
            "name": "visit_table",
            "location": 166,
            "return": [],
            "arguments": {
                "self": [],
                "table": [],
                "asfrom": [],
                "iscrud": [],
                "ashint": [],
                "fromhints": [],
                "use_schema": []
            }
        },
        "SQLCompiler.visit_join": {
            "name": "visit_join",
            "location": 168,
            "return": [],
            "arguments": {
                "self": [],
                "join": [],
                "asfrom": []
            }
        },
        "SQLCompiler.visit_insert": {
            "name": "visit_insert",
            "location": 169,
            "return": [],
            "arguments": {
                "self": [],
                "insert_stmt": [],
                "asfrom": []
            }
        },
        "SQLCompiler.update_limit_clause": {
            "name": "update_limit_clause",
            "location": 170,
            "return": [],
            "arguments": {
                "self": [],
                "update_stmt": []
            }
        },
        "SQLCompiler.update_tables_clause": {
            "name": "update_tables_clause",
            "location": 171,
            "return": [],
            "arguments": {
                "self": [],
                "update_stmt": [],
                "from_table": [],
                "extra_froms": []
            }
        },
        "SQLCompiler.update_from_clause": {
            "name": "update_from_clause",
            "location": 172,
            "return": [],
            "arguments": {
                "self": [],
                "update_stmt": [],
                "from_table": [],
                "extra_froms": [],
                "from_hints": []
            }
        },
        "SQLCompiler.visit_update": {
            "name": "visit_update",
            "location": 173,
            "return": [],
            "arguments": {
                "self": [],
                "update_stmt": [],
                "asfrom": []
            }
        },
        "SQLCompiler.delete_extra_from_clause": {
            "name": "delete_extra_from_clause",
            "location": 174,
            "return": [],
            "arguments": {
                "self": [],
                "update_stmt": [],
                "from_table": [],
                "extra_froms": [],
                "from_hints": []
            }
        },
        "SQLCompiler.delete_table_clause": {
            "name": "delete_table_clause",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "delete_stmt": [],
                "from_table": [],
                "extra_froms": []
            }
        },
        "SQLCompiler.visit_delete": {
            "name": "visit_delete",
            "location": 176,
            "return": [],
            "arguments": {
                "self": [],
                "delete_stmt": [],
                "asfrom": []
            }
        },
        "SQLCompiler.visit_savepoint": {
            "name": "visit_savepoint",
            "location": 177,
            "return": [],
            "arguments": {
                "self": [],
                "savepoint_stmt": []
            }
        },
        "SQLCompiler.visit_rollback_to_savepoint": {
            "name": "visit_rollback_to_savepoint",
            "location": 178,
            "return": [],
            "arguments": {
                "self": [],
                "savepoint_stmt": []
            }
        },
        "SQLCompiler.visit_release_savepoint": {
            "name": "visit_release_savepoint",
            "location": 179,
            "return": [],
            "arguments": {
                "self": [],
                "savepoint_stmt": []
            }
        },
        "StrSQLCompiler.visit_getitem_binary": {
            "name": "visit_getitem_binary",
            "location": 182,
            "return": [],
            "arguments": {
                "self": [],
                "binary": [],
                "operator": []
            }
        },
        "StrSQLCompiler.visit_json_getitem_op_binary": {
            "name": "visit_json_getitem_op_binary",
            "location": 183,
            "return": [],
            "arguments": {
                "self": [],
                "binary": [],
                "operator": []
            }
        },
        "StrSQLCompiler.visit_json_path_getitem_op_binary": {
            "name": "visit_json_path_getitem_op_binary",
            "location": 184,
            "return": [],
            "arguments": {
                "self": [],
                "binary": [],
                "operator": []
            }
        },
        "StrSQLCompiler.returning_clause": {
            "name": "returning_clause",
            "location": 185,
            "return": [],
            "arguments": {
                "self": [],
                "stmt": [],
                "returning_cols": []
            }
        },
        "StrSQLCompiler.update_from_clause": {
            "name": "update_from_clause",
            "location": 186,
            "return": [],
            "arguments": {
                "self": [],
                "update_stmt": [],
                "from_table": [],
                "extra_froms": [],
                "from_hints": []
            }
        },
        "StrSQLCompiler.delete_extra_from_clause": {
            "name": "delete_extra_from_clause",
            "location": 187,
            "return": [],
            "arguments": {
                "self": [],
                "update_stmt": [],
                "from_table": [],
                "extra_froms": [],
                "from_hints": []
            }
        },
        "DDLCompiler.sql_compiler": {
            "name": "sql_compiler",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DDLCompiler.type_compiler": {
            "name": "type_compiler",
            "location": 193,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DDLCompiler.construct_params": {
            "name": "construct_params",
            "location": 194,
            "return": [],
            "arguments": {
                "self": [],
                "params": []
            }
        },
        "DDLCompiler.visit_ddl": {
            "name": "visit_ddl",
            "location": 195,
            "return": [],
            "arguments": {
                "self": [],
                "ddl": []
            }
        },
        "DDLCompiler.visit_create_schema": {
            "name": "visit_create_schema",
            "location": 196,
            "return": [],
            "arguments": {
                "self": [],
                "create": []
            }
        },
        "DDLCompiler.visit_drop_schema": {
            "name": "visit_drop_schema",
            "location": 197,
            "return": [],
            "arguments": {
                "self": [],
                "drop": []
            }
        },
        "DDLCompiler.visit_create_table": {
            "name": "visit_create_table",
            "location": 198,
            "return": [],
            "arguments": {
                "self": [],
                "create": []
            }
        },
        "DDLCompiler.visit_create_column": {
            "name": "visit_create_column",
            "location": 199,
            "return": [],
            "arguments": {
                "self": [],
                "create": [],
                "first_pk": []
            }
        },
        "DDLCompiler.create_table_constraints": {
            "name": "create_table_constraints",
            "location": 200,
            "return": [],
            "arguments": {
                "self": [],
                "table": [],
                "_include_foreign_key_constraints": []
            }
        },
        "DDLCompiler.visit_drop_table": {
            "name": "visit_drop_table",
            "location": 201,
            "return": [],
            "arguments": {
                "self": [],
                "drop": []
            }
        },
        "DDLCompiler.visit_drop_view": {
            "name": "visit_drop_view",
            "location": 202,
            "return": [],
            "arguments": {
                "self": [],
                "drop": []
            }
        },
        "DDLCompiler.visit_create_index": {
            "name": "visit_create_index",
            "location": 203,
            "return": [],
            "arguments": {
                "self": [],
                "create": [],
                "include_schema": [],
                "include_table_schema": []
            }
        },
        "DDLCompiler.visit_drop_index": {
            "name": "visit_drop_index",
            "location": 204,
            "return": [],
            "arguments": {
                "self": [],
                "drop": []
            }
        },
        "DDLCompiler.visit_add_constraint": {
            "name": "visit_add_constraint",
            "location": 205,
            "return": [],
            "arguments": {
                "self": [],
                "create": []
            }
        },
        "DDLCompiler.visit_set_table_comment": {
            "name": "visit_set_table_comment",
            "location": 206,
            "return": [],
            "arguments": {
                "self": [],
                "create": []
            }
        },
        "DDLCompiler.visit_drop_table_comment": {
            "name": "visit_drop_table_comment",
            "location": 207,
            "return": [],
            "arguments": {
                "self": [],
                "drop": []
            }
        },
        "DDLCompiler.visit_set_column_comment": {
            "name": "visit_set_column_comment",
            "location": 208,
            "return": [],
            "arguments": {
                "self": [],
                "create": []
            }
        },
        "DDLCompiler.visit_drop_column_comment": {
            "name": "visit_drop_column_comment",
            "location": 209,
            "return": [],
            "arguments": {
                "self": [],
                "drop": []
            }
        },
        "DDLCompiler.visit_create_sequence": {
            "name": "visit_create_sequence",
            "location": 210,
            "return": [],
            "arguments": {
                "self": [],
                "create": []
            }
        },
        "DDLCompiler.visit_drop_sequence": {
            "name": "visit_drop_sequence",
            "location": 211,
            "return": [],
            "arguments": {
                "self": [],
                "drop": []
            }
        },
        "DDLCompiler.visit_drop_constraint": {
            "name": "visit_drop_constraint",
            "location": 212,
            "return": [],
            "arguments": {
                "self": [],
                "drop": []
            }
        },
        "DDLCompiler.get_column_specification": {
            "name": "get_column_specification",
            "location": 213,
            "return": [],
            "arguments": {
                "self": [],
                "column": []
            }
        },
        "DDLCompiler.create_table_suffix": {
            "name": "create_table_suffix",
            "location": 214,
            "return": [],
            "arguments": {
                "self": [],
                "table": []
            }
        },
        "DDLCompiler.post_create_table": {
            "name": "post_create_table",
            "location": 215,
            "return": [],
            "arguments": {
                "self": [],
                "table": []
            }
        },
        "DDLCompiler.get_column_default_string": {
            "name": "get_column_default_string",
            "location": 216,
            "return": [],
            "arguments": {
                "self": [],
                "column": []
            }
        },
        "DDLCompiler.visit_check_constraint": {
            "name": "visit_check_constraint",
            "location": 217,
            "return": [],
            "arguments": {
                "self": [],
                "constraint": []
            }
        },
        "DDLCompiler.visit_column_check_constraint": {
            "name": "visit_column_check_constraint",
            "location": 218,
            "return": [],
            "arguments": {
                "self": [],
                "constraint": []
            }
        },
        "DDLCompiler.visit_primary_key_constraint": {
            "name": "visit_primary_key_constraint",
            "location": 219,
            "return": [],
            "arguments": {
                "self": [],
                "constraint": []
            }
        },
        "DDLCompiler.visit_foreign_key_constraint": {
            "name": "visit_foreign_key_constraint",
            "location": 220,
            "return": [],
            "arguments": {
                "self": [],
                "constraint": []
            }
        },
        "DDLCompiler.define_constraint_remote_table": {
            "name": "define_constraint_remote_table",
            "location": 221,
            "return": [],
            "arguments": {
                "self": [],
                "constraint": [],
                "table": [],
                "preparer": []
            }
        },
        "DDLCompiler.visit_unique_constraint": {
            "name": "visit_unique_constraint",
            "location": 222,
            "return": [],
            "arguments": {
                "self": [],
                "constraint": []
            }
        },
        "DDLCompiler.define_constraint_cascades": {
            "name": "define_constraint_cascades",
            "location": 223,
            "return": [],
            "arguments": {
                "self": [],
                "constraint": []
            }
        },
        "DDLCompiler.define_constraint_deferrability": {
            "name": "define_constraint_deferrability",
            "location": 224,
            "return": [],
            "arguments": {
                "self": [],
                "constraint": []
            }
        },
        "DDLCompiler.define_constraint_match": {
            "name": "define_constraint_match",
            "location": 225,
            "return": [],
            "arguments": {
                "self": [],
                "constraint": []
            }
        },
        "GenericTypeCompiler.visit_FLOAT": {
            "name": "visit_FLOAT",
            "location": 228,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "GenericTypeCompiler.visit_REAL": {
            "name": "visit_REAL",
            "location": 229,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "GenericTypeCompiler.visit_NUMERIC": {
            "name": "visit_NUMERIC",
            "location": 230,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "GenericTypeCompiler.visit_DECIMAL": {
            "name": "visit_DECIMAL",
            "location": 231,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "GenericTypeCompiler.visit_INTEGER": {
            "name": "visit_INTEGER",
            "location": 232,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "GenericTypeCompiler.visit_SMALLINT": {
            "name": "visit_SMALLINT",
            "location": 233,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "GenericTypeCompiler.visit_BIGINT": {
            "name": "visit_BIGINT",
            "location": 234,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "GenericTypeCompiler.visit_TIMESTAMP": {
            "name": "visit_TIMESTAMP",
            "location": 235,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "GenericTypeCompiler.visit_DATETIME": {
            "name": "visit_DATETIME",
            "location": 236,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "GenericTypeCompiler.visit_DATE": {
            "name": "visit_DATE",
            "location": 237,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "GenericTypeCompiler.visit_TIME": {
            "name": "visit_TIME",
            "location": 238,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "GenericTypeCompiler.visit_CLOB": {
            "name": "visit_CLOB",
            "location": 239,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "GenericTypeCompiler.visit_NCLOB": {
            "name": "visit_NCLOB",
            "location": 240,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "GenericTypeCompiler.visit_CHAR": {
            "name": "visit_CHAR",
            "location": 241,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "GenericTypeCompiler.visit_NCHAR": {
            "name": "visit_NCHAR",
            "location": 242,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "GenericTypeCompiler.visit_VARCHAR": {
            "name": "visit_VARCHAR",
            "location": 243,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "GenericTypeCompiler.visit_NVARCHAR": {
            "name": "visit_NVARCHAR",
            "location": 244,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "GenericTypeCompiler.visit_TEXT": {
            "name": "visit_TEXT",
            "location": 245,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "GenericTypeCompiler.visit_BLOB": {
            "name": "visit_BLOB",
            "location": 246,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "GenericTypeCompiler.visit_BINARY": {
            "name": "visit_BINARY",
            "location": 247,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "GenericTypeCompiler.visit_VARBINARY": {
            "name": "visit_VARBINARY",
            "location": 248,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "GenericTypeCompiler.visit_BOOLEAN": {
            "name": "visit_BOOLEAN",
            "location": 249,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "GenericTypeCompiler.visit_large_binary": {
            "name": "visit_large_binary",
            "location": 250,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "GenericTypeCompiler.visit_boolean": {
            "name": "visit_boolean",
            "location": 251,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "GenericTypeCompiler.visit_time": {
            "name": "visit_time",
            "location": 252,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "GenericTypeCompiler.visit_datetime": {
            "name": "visit_datetime",
            "location": 253,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "GenericTypeCompiler.visit_date": {
            "name": "visit_date",
            "location": 254,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "GenericTypeCompiler.visit_big_integer": {
            "name": "visit_big_integer",
            "location": 255,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "GenericTypeCompiler.visit_small_integer": {
            "name": "visit_small_integer",
            "location": 256,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "GenericTypeCompiler.visit_integer": {
            "name": "visit_integer",
            "location": 257,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "GenericTypeCompiler.visit_real": {
            "name": "visit_real",
            "location": 258,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "GenericTypeCompiler.visit_float": {
            "name": "visit_float",
            "location": 259,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "GenericTypeCompiler.visit_numeric": {
            "name": "visit_numeric",
            "location": 260,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "GenericTypeCompiler.visit_string": {
            "name": "visit_string",
            "location": 261,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "GenericTypeCompiler.visit_unicode": {
            "name": "visit_unicode",
            "location": 262,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "GenericTypeCompiler.visit_text": {
            "name": "visit_text",
            "location": 263,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "GenericTypeCompiler.visit_unicode_text": {
            "name": "visit_unicode_text",
            "location": 264,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "GenericTypeCompiler.visit_enum": {
            "name": "visit_enum",
            "location": 265,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "GenericTypeCompiler.visit_null": {
            "name": "visit_null",
            "location": 266,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "GenericTypeCompiler.visit_type_decorator": {
            "name": "visit_type_decorator",
            "location": 267,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "GenericTypeCompiler.visit_user_defined": {
            "name": "visit_user_defined",
            "location": 268,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "StrSQLTypeCompiler.__getattr__": {
            "name": "__getattr__",
            "location": 271,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "IdentifierPreparer.__init__": {
            "name": "__init__",
            "location": 285,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": [],
                "initial_quote": [],
                "final_quote": [],
                "escape_quote": [],
                "omit_schema": []
            }
        },
        "IdentifierPreparer.quote_identifier": {
            "name": "quote_identifier",
            "location": 287,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "IdentifierPreparer.quote_schema": {
            "name": "quote_schema",
            "location": 288,
            "return": [],
            "arguments": {
                "self": [],
                "schema": [],
                "force": []
            }
        },
        "IdentifierPreparer.quote": {
            "name": "quote",
            "location": 289,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "force": []
            }
        },
        "IdentifierPreparer.format_collation": {
            "name": "format_collation",
            "location": 290,
            "return": [],
            "arguments": {
                "self": [],
                "collation_name": []
            }
        },
        "IdentifierPreparer.format_sequence": {
            "name": "format_sequence",
            "location": 291,
            "return": [],
            "arguments": {
                "self": [],
                "sequence": [],
                "use_schema": []
            }
        },
        "IdentifierPreparer.format_label": {
            "name": "format_label",
            "location": 292,
            "return": [],
            "arguments": {
                "self": [],
                "label": [],
                "name": []
            }
        },
        "IdentifierPreparer.format_alias": {
            "name": "format_alias",
            "location": 293,
            "return": [],
            "arguments": {
                "self": [],
                "alias": [],
                "name": []
            }
        },
        "IdentifierPreparer.format_savepoint": {
            "name": "format_savepoint",
            "location": 294,
            "return": [],
            "arguments": {
                "self": [],
                "savepoint": [],
                "name": []
            }
        },
        "IdentifierPreparer.format_constraint": {
            "name": "format_constraint",
            "location": 295,
            "return": [],
            "arguments": {
                "self": [],
                "constraint": []
            }
        },
        "IdentifierPreparer.format_table": {
            "name": "format_table",
            "location": 296,
            "return": [],
            "arguments": {
                "self": [],
                "table": [],
                "use_schema": [],
                "name": []
            }
        },
        "IdentifierPreparer.format_schema": {
            "name": "format_schema",
            "location": 297,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "quote": []
            }
        },
        "IdentifierPreparer.format_column": {
            "name": "format_column",
            "location": 298,
            "return": [],
            "arguments": {
                "self": [],
                "column": [],
                "use_table": [],
                "name": [],
                "table_name": []
            }
        },
        "IdentifierPreparer.format_table_seq": {
            "name": "format_table_seq",
            "location": 300,
            "return": [],
            "arguments": {
                "self": [],
                "table": [],
                "use_schema": []
            }
        },
        "IdentifierPreparer.unformat_identifiers": {
            "name": "unformat_identifiers",
            "location": 301,
            "return": [],
            "arguments": {
                "self": [],
                "identifiers": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/sql/crud.py": {},
    "sqlalchemy-stubs-master/sqlalchemy-stubs/sql/ddl.py": {
        "sort_tables": {
            "name": "sort_tables",
            "location": 139,
            "return": [],
            "arguments": {
                "tables": [],
                "skip_fn": [],
                "extra_dependencies": []
            }
        },
        "sort_tables_and_constraints": {
            "name": "sort_tables_and_constraints",
            "location": 145,
            "return": [],
            "arguments": {
                "tables": [],
                "filter_fn": [],
                "extra_dependencies": []
            }
        },
        "_DDLCallable.__call__": {
            "name": "__call__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "ddl": [],
                "target": [],
                "bind": [],
                "tables": [],
                "state": [],
                "checkfirst": []
            }
        },
        "_DDLOnCallback.__call__": {
            "name": "__call__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "ddl": [],
                "event": [],
                "target": [],
                "connection": [],
                "tables": []
            }
        },
        "DDLElement.execute": {
            "name": "execute",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "bind": [],
                "target": []
            }
        },
        "DDLElement.execute_at": {
            "name": "execute_at",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "event_name": [],
                "target": []
            }
        },
        "DDLElement.against": {
            "name": "against",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "target": []
            }
        },
        "DDLElement.execute_if": {
            "name": "execute_if",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": [],
                "callable_": [],
                "state": []
            }
        },
        "DDLElement.__call__": {
            "name": "__call__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "target": [],
                "bind": []
            }
        },
        "DDL.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "statement": [],
                "on": [],
                "context": [],
                "bind": []
            }
        },
        "_CreateDropBase.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "element": [],
                "on": [],
                "bind": []
            }
        },
        "CreateSchema.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "quote": []
            }
        },
        "DropSchema.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "quote": [],
                "cascade": []
            }
        },
        "CreateTable.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "element": [],
                "on": [],
                "bind": [],
                "include_foreign_key_constraints": []
            }
        },
        "CreateColumn.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "element": []
            }
        },
        "AddConstraint.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "element": []
            }
        },
        "DropConstraint.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "element": [],
                "cascade": []
            }
        },
        "DDLBase.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "connection": []
            }
        },
        "SchemaGenerator.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": [],
                "connection": [],
                "checkfirst": [],
                "tables": []
            }
        },
        "SchemaGenerator.visit_metadata": {
            "name": "visit_metadata",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "metadata": []
            }
        },
        "SchemaGenerator.visit_table": {
            "name": "visit_table",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "table": [],
                "create_ok": [],
                "include_foreign_key_constraints": [],
                "_is_metadata_operation": []
            }
        },
        "SchemaGenerator.visit_foreign_key_constraint": {
            "name": "visit_foreign_key_constraint",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "constraint": []
            }
        },
        "SchemaGenerator.visit_sequence": {
            "name": "visit_sequence",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "sequence": [],
                "create_ok": []
            }
        },
        "SchemaGenerator.visit_index": {
            "name": "visit_index",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "SchemaDropper.__init__": {
            "name": "__init__",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": [],
                "connection": [],
                "checkfirst": [],
                "tables": []
            }
        },
        "SchemaDropper.visit_metadata": {
            "name": "visit_metadata",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "metadata": []
            }
        },
        "SchemaDropper.visit_index": {
            "name": "visit_index",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "SchemaDropper.visit_table": {
            "name": "visit_table",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "table": [],
                "drop_ok": [],
                "_is_metadata_operation": []
            }
        },
        "SchemaDropper.visit_foreign_key_constraint": {
            "name": "visit_foreign_key_constraint",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "constraint": []
            }
        },
        "SchemaDropper.visit_sequence": {
            "name": "visit_sequence",
            "location": 137,
            "return": [],
            "arguments": {
                "self": [],
                "sequence": [],
                "drop_ok": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/sql/dml.py": {
        "UpdateBase.params": {
            "name": "params",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UpdateBase.returning": {
            "name": "returning",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UpdateBase.with_hint": {
            "name": "with_hint",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "text": [],
                "selectable": [],
                "dialect_name": []
            }
        },
        "ValuesBase.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "table": [],
                "values": [],
                "prefixes": []
            }
        },
        "ValuesBase.values": {
            "name": "values",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ValuesBase.return_defaults": {
            "name": "return_defaults",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Insert.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "table": [],
                "values": [],
                "inline": [],
                "bind": [],
                "prefixes": [],
                "returning": [],
                "return_defaults": []
            }
        },
        "Insert.get_children": {
            "name": "get_children",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Insert.from_select": {
            "name": "from_select",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "names": [],
                "select": [],
                "include_defaults": []
            }
        },
        "Update.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "table": [],
                "whereclause": [],
                "values": [],
                "inline": [],
                "bind": [],
                "prefixes": [],
                "returning": [],
                "return_defaults": [],
                "preserve_parameter_order": []
            }
        },
        "Update.get_children": {
            "name": "get_children",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Update.where": {
            "name": "where",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "whereclause": []
            }
        },
        "Delete.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "table": [],
                "whereclause": [],
                "bind": [],
                "returning": [],
                "prefixes": []
            }
        },
        "Delete.get_children": {
            "name": "get_children",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Delete.where": {
            "name": "where",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "whereclause": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/sql/elements.py": {
        "collate": {
            "name": "collate",
            "location": 23,
            "return": [],
            "arguments": {
                "expression": [],
                "collation": []
            }
        },
        "between": {
            "name": "between",
            "location": 24,
            "return": [],
            "arguments": {
                "expr": [],
                "lower_bound": [],
                "upper_bound": [],
                "symmetric": []
            }
        },
        "literal": {
            "name": "literal",
            "location": 25,
            "return": [],
            "arguments": {
                "value": [],
                "type_": []
            }
        },
        "outparam": {
            "name": "outparam",
            "location": 26,
            "return": [],
            "arguments": {
                "key": [],
                "type_": []
            }
        },
        "not_": {
            "name": "not_",
            "location": 27,
            "return": [],
            "arguments": {
                "clause": []
            }
        },
        "literal_column": {
            "name": "literal_column",
            "location": 216,
            "return": [],
            "arguments": {
                "text": [],
                "type_": []
            }
        },
        "ClauseElement.unique_params": {
            "name": "unique_params",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClauseElement.params": {
            "name": "params",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClauseElement.compare": {
            "name": "compare",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ClauseElement.get_children": {
            "name": "get_children",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClauseElement.self_group": {
            "name": "self_group",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "against": []
            }
        },
        "ClauseElement.compile": {
            "name": "compile",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "bind": [],
                "dialect": []
            }
        },
        "ClauseElement.__and__": {
            "name": "__and__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ClauseElement.__or__": {
            "name": "__or__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ClauseElement.__invert__": {
            "name": "__invert__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClauseElement.__bool__": {
            "name": "__bool__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ColumnElement.self_group": {
            "name": "self_group",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "against": []
            }
        },
        "ColumnElement.type": {
            "name": "type",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ColumnElement.comparator": {
            "name": "comparator",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ColumnElement.operate": {
            "name": "operate",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "op": []
            }
        },
        "ColumnElement.reverse_operate": {
            "name": "reverse_operate",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "op": [],
                "other": []
            }
        },
        "ColumnElement.expression": {
            "name": "expression",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ColumnElement.base_columns": {
            "name": "base_columns",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ColumnElement.proxy_set": {
            "name": "proxy_set",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ColumnElement.shares_lineage": {
            "name": "shares_lineage",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "othercolumn": []
            }
        },
        "ColumnElement.compare": {
            "name": "compare",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "use_proxies": [],
                "equivalents": []
            }
        },
        "ColumnElement.cast": {
            "name": "cast",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "ColumnElement.label": {
            "name": "label",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "ColumnElement.anon_label": {
            "name": "anon_label",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BindParameter.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": [],
                "type_": [],
                "unique": [],
                "required": [],
                "quote": [],
                "callable_": [],
                "expanding": [],
                "isoutparam": [],
                "_compared_to_operator": [],
                "_compared_to_type": []
            }
        },
        "BindParameter.effective_value": {
            "name": "effective_value",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BindParameter.compare": {
            "name": "compare",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "TypeClause.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "type": []
            }
        },
        "TextClause.selectable": {
            "name": "selectable",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TextClause.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "text": [],
                "bind": []
            }
        },
        "TextClause.bindparams": {
            "name": "bindparams",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TextClause.columns": {
            "name": "columns",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TextClause.type": {
            "name": "type",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TextClause.comparator": {
            "name": "comparator",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TextClause.self_group": {
            "name": "self_group",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "against": []
            }
        },
        "TextClause.get_children": {
            "name": "get_children",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TextClause.compare": {
            "name": "compare",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "TextClause._create_text": {
            "name": "_create_text",
            "location": 122,
            "return": [],
            "arguments": {
                "cls": [],
                "text": [],
                "bind": [],
                "bindparams": [],
                "typemap": [],
                "autocommit": []
            }
        },
        "Null.type": {
            "name": "type",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Null.compare": {
            "name": "compare",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Null._instance": {
            "name": "_instance",
            "location": 133,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "False_.type": {
            "name": "type",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "False_.compare": {
            "name": "compare",
            "location": 139,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "False_._instance": {
            "name": "_instance",
            "location": 141,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "True_.type": {
            "name": "type",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "True_.compare": {
            "name": "compare",
            "location": 147,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "True_._instance": {
            "name": "_instance",
            "location": 149,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "_LiteralAsTextCallback.__call__": {
            "name": "__call__",
            "location": 154,
            "return": [],
            "arguments": {
                "self": [],
                "clause": []
            }
        },
        "ClauseList.__init__": {
            "name": "__init__",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClauseList.__iter__": {
            "name": "__iter__",
            "location": 168,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClauseList.__len__": {
            "name": "__len__",
            "location": 169,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClauseList.append": {
            "name": "append",
            "location": 170,
            "return": [],
            "arguments": {
                "self": [],
                "clause": []
            }
        },
        "ClauseList.get_children": {
            "name": "get_children",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClauseList.self_group": {
            "name": "self_group",
            "location": 172,
            "return": [],
            "arguments": {
                "self": [],
                "against": []
            }
        },
        "ClauseList.compare": {
            "name": "compare",
            "location": 173,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BooleanClauseList.and_": {
            "name": "and_",
            "location": 182,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "BooleanClauseList.or_": {
            "name": "or_",
            "location": 184,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "BooleanClauseList.self_group": {
            "name": "self_group",
            "location": 185,
            "return": [],
            "arguments": {
                "self": [],
                "against": []
            }
        },
        "Tuple.__init__": {
            "name": "__init__",
            "location": 198,
            "return": [],
            "arguments": {
                "self": [],
                "clause": []
            }
        },
        "Case.__init__": {
            "name": "__init__",
            "location": 210,
            "return": [],
            "arguments": {
                "self": [],
                "whens": [],
                "value": [],
                "else_": []
            }
        },
        "Case.get_children": {
            "name": "get_children",
            "location": 211,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Cast.__init__": {
            "name": "__init__",
            "location": 226,
            "return": [],
            "arguments": {
                "self": [],
                "expression": [],
                "type_": []
            }
        },
        "Cast.get_children": {
            "name": "get_children",
            "location": 227,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TypeCoerce.__init__": {
            "name": "__init__",
            "location": 240,
            "return": [],
            "arguments": {
                "self": [],
                "expression": [],
                "type_": []
            }
        },
        "TypeCoerce.get_children": {
            "name": "get_children",
            "location": 241,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TypeCoerce.typed_expression": {
            "name": "typed_expression",
            "location": 243,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Extract.__init__": {
            "name": "__init__",
            "location": 250,
            "return": [],
            "arguments": {
                "self": [],
                "field": [],
                "expr": []
            }
        },
        "Extract.get_children": {
            "name": "get_children",
            "location": 251,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnaryExpression.__init__": {
            "name": "__init__",
            "location": 268,
            "return": [],
            "arguments": {
                "self": [],
                "element": [],
                "operator": [],
                "modifier": [],
                "type_": [],
                "negate": [],
                "wraps_column_expression": []
            }
        },
        "UnaryExpression.get_children": {
            "name": "get_children",
            "location": 271,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnaryExpression.compare": {
            "name": "compare",
            "location": 273,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "UnaryExpression.self_group": {
            "name": "self_group",
            "location": 274,
            "return": [],
            "arguments": {
                "self": [],
                "against": []
            }
        },
        "UnaryExpression._create_nullsfirst": {
            "name": "_create_nullsfirst",
            "location": 276,
            "return": [],
            "arguments": {
                "cls": [],
                "column": []
            }
        },
        "UnaryExpression._create_nullslast": {
            "name": "_create_nullslast",
            "location": 278,
            "return": [],
            "arguments": {
                "cls": [],
                "column": []
            }
        },
        "UnaryExpression._create_desc": {
            "name": "_create_desc",
            "location": 280,
            "return": [],
            "arguments": {
                "cls": [],
                "column": []
            }
        },
        "UnaryExpression._create_asc": {
            "name": "_create_asc",
            "location": 282,
            "return": [],
            "arguments": {
                "cls": [],
                "column": []
            }
        },
        "UnaryExpression._create_distinct": {
            "name": "_create_distinct",
            "location": 284,
            "return": [],
            "arguments": {
                "cls": [],
                "expr": []
            }
        },
        "CollectionAggregate.operate": {
            "name": "operate",
            "location": 287,
            "return": [],
            "arguments": {
                "self": [],
                "op": []
            }
        },
        "CollectionAggregate.reverse_operate": {
            "name": "reverse_operate",
            "location": 288,
            "return": [],
            "arguments": {
                "self": [],
                "op": [],
                "other": []
            }
        },
        "CollectionAggregate._create_all": {
            "name": "_create_all",
            "location": 294,
            "return": [],
            "arguments": {
                "cls": [],
                "expr": []
            }
        },
        "CollectionAggregate._create_any": {
            "name": "_create_any",
            "location": 300,
            "return": [],
            "arguments": {
                "cls": [],
                "expr": []
            }
        },
        "AsBoolean.__init__": {
            "name": "__init__",
            "location": 311,
            "return": [],
            "arguments": {
                "self": [],
                "element": [],
                "operator": [],
                "negate": []
            }
        },
        "AsBoolean.self_group": {
            "name": "self_group",
            "location": 312,
            "return": [],
            "arguments": {
                "self": [],
                "against": []
            }
        },
        "BinaryExpression.__init__": {
            "name": "__init__",
            "location": 329,
            "return": [],
            "arguments": {
                "self": [],
                "left": [],
                "right": [],
                "operator": [],
                "type_": [],
                "negate": [],
                "modifiers": []
            }
        },
        "BinaryExpression.__bool__": {
            "name": "__bool__",
            "location": 331,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinaryExpression.is_comparison": {
            "name": "is_comparison",
            "location": 334,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinaryExpression.get_children": {
            "name": "get_children",
            "location": 335,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinaryExpression.compare": {
            "name": "compare",
            "location": 337,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BinaryExpression.self_group": {
            "name": "self_group",
            "location": 338,
            "return": [],
            "arguments": {
                "self": [],
                "against": []
            }
        },
        "Slice.__init__": {
            "name": "__init__",
            "location": 348,
            "return": [],
            "arguments": {
                "self": [],
                "start": [],
                "stop": [],
                "step": []
            }
        },
        "Slice.self_group": {
            "name": "self_group",
            "location": 349,
            "return": [],
            "arguments": {
                "self": [],
                "against": []
            }
        },
        "Grouping.__init__": {
            "name": "__init__",
            "location": 363,
            "return": [],
            "arguments": {
                "self": [],
                "element": []
            }
        },
        "Grouping.self_group": {
            "name": "self_group",
            "location": 364,
            "return": [],
            "arguments": {
                "self": [],
                "against": []
            }
        },
        "Grouping.get_children": {
            "name": "get_children",
            "location": 365,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Grouping.__getattr__": {
            "name": "__getattr__",
            "location": 366,
            "return": [],
            "arguments": {
                "self": [],
                "attr": []
            }
        },
        "Grouping.compare": {
            "name": "compare",
            "location": 368,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Over.__init__": {
            "name": "__init__",
            "location": 396,
            "return": [],
            "arguments": {
                "self": [],
                "element": [],
                "partition_by": [],
                "order_by": [],
                "rows": []
            }
        },
        "Over.func": {
            "name": "func",
            "location": 401,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Over.type": {
            "name": "type",
            "location": 403,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Over.get_children": {
            "name": "get_children",
            "location": 404,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WithinGroup.__init__": {
            "name": "__init__",
            "location": 410,
            "return": [],
            "arguments": {
                "self": [],
                "element": []
            }
        },
        "WithinGroup.over": {
            "name": "over",
            "location": 411,
            "return": [],
            "arguments": {
                "self": [],
                "partition_by": [],
                "order_by": []
            }
        },
        "WithinGroup.type": {
            "name": "type",
            "location": 414,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WithinGroup.get_children": {
            "name": "get_children",
            "location": 415,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionFilter.__init__": {
            "name": "__init__",
            "location": 421,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "FunctionFilter.filter": {
            "name": "filter",
            "location": 422,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionFilter.over": {
            "name": "over",
            "location": 423,
            "return": [],
            "arguments": {
                "self": [],
                "partition_by": [],
                "order_by": []
            }
        },
        "FunctionFilter.type": {
            "name": "type",
            "location": 426,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionFilter.get_children": {
            "name": "get_children",
            "location": 427,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Label.__init__": {
            "name": "__init__",
            "location": 440,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "element": [],
                "type_": []
            }
        },
        "Label.__reduce__": {
            "name": "__reduce__",
            "location": 441,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Label.type": {
            "name": "type",
            "location": 443,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Label.element": {
            "name": "element",
            "location": 445,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Label.self_group": {
            "name": "self_group",
            "location": 446,
            "return": [],
            "arguments": {
                "self": [],
                "against": []
            }
        },
        "Label.primary_key": {
            "name": "primary_key",
            "location": 449,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Label.foreign_keys": {
            "name": "foreign_keys",
            "location": 452,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Label.get_children": {
            "name": "get_children",
            "location": 453,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ColumnClause.__init__": {
            "name": "__init__",
            "location": 470,
            "return": [],
            "arguments": {
                "self": [],
                "text": [],
                "type_": [],
                "is_literal": [],
                "_selectable": []
            }
        },
        "ColumnClause.description": {
            "name": "description",
            "location": 473,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_IdentifiedClause.__init__": {
            "name": "__init__",
            "location": 478,
            "return": [],
            "arguments": {
                "self": [],
                "ident": []
            }
        },
        "quoted_name.__new__": {
            "name": "__new__",
            "location": 491,
            "return": [],
            "arguments": {
                "cls": [],
                "value": [],
                "quote": []
            }
        },
        "quoted_name.__reduce__": {
            "name": "__reduce__",
            "location": 492,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_truncated_label.__new__": {
            "name": "__new__",
            "location": 495,
            "return": [],
            "arguments": {
                "cls": [],
                "value": [],
                "quote": []
            }
        },
        "_truncated_label.__reduce__": {
            "name": "__reduce__",
            "location": 496,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_truncated_label.apply_map": {
            "name": "apply_map",
            "location": 497,
            "return": [],
            "arguments": {
                "self": [],
                "map_": []
            }
        },
        "AnnotatedColumnElement.__init__": {
            "name": "__init__",
            "location": 504,
            "return": [],
            "arguments": {
                "self": [],
                "element": [],
                "values": []
            }
        },
        "AnnotatedColumnElement.name": {
            "name": "name",
            "location": 506,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AnnotatedColumnElement.table": {
            "name": "table",
            "location": 508,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AnnotatedColumnElement.key": {
            "name": "key",
            "location": 510,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AnnotatedColumnElement.info": {
            "name": "info",
            "location": 512,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AnnotatedColumnElement.anon_label": {
            "name": "anon_label",
            "location": 514,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/sql/expression.py": {},
    "sqlalchemy-stubs-master/sqlalchemy-stubs/sql/functions.py": {
        "register_function": {
            "name": "register_function",
            "location": 18,
            "return": [],
            "arguments": {
                "identifier": [],
                "fn": [],
                "package": []
            }
        },
        "FunctionElement.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionElement.columns": {
            "name": "columns",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionElement.clauses": {
            "name": "clauses",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionElement.over": {
            "name": "over",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "partition_by": [],
                "order_by": [],
                "rows": []
            }
        },
        "FunctionElement.within_group": {
            "name": "within_group",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionElement.filter": {
            "name": "filter",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "criteria": []
            }
        },
        "FunctionElement.get_children": {
            "name": "get_children",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionElement.within_group_type": {
            "name": "within_group_type",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "within_group": []
            }
        },
        "FunctionElement.alias": {
            "name": "alias",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "flat": []
            }
        },
        "FunctionElement.select": {
            "name": "select",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionElement.scalar": {
            "name": "scalar",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionElement.execute": {
            "name": "execute",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionElement.self_group": {
            "name": "self_group",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "against": []
            }
        },
        "_FunctionGenerator.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_FunctionGenerator.__getattr__": {
            "name": "__getattr__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "_FunctionGenerator.__call__": {
            "name": "__call__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Function.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "_GenericMeta.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [],
            "arguments": {
                "cls": [],
                "clsname": [],
                "bases": [],
                "clsdict": []
            }
        },
        "GenericFunction.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "next_value.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "seq": []
            }
        },
        "AnsiFunction.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReturnTypeFromArgs.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "count.__init__": {
            "name": "__init__",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "expression": []
            }
        },
        "array_agg.__init__": {
            "name": "__init__",
            "location": 158,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OrderedSetAgg.within_group_type": {
            "name": "within_group_type",
            "location": 163,
            "return": [],
            "arguments": {
                "self": [],
                "within_group": []
            }
        },
        "mode.within_group_type": {
            "name": "within_group_type",
            "location": 166,
            "return": [],
            "arguments": {
                "self": [],
                "within_group": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/sql/naming.py": {
        "ConventionDict.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "const": [],
                "table": [],
                "convention": []
            }
        },
        "ConventionDict.__getitem__": {
            "name": "__getitem__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/sql/operators.py": {
        "from_": {
            "name": "from_",
            "location": 77,
            "return": [],
            "arguments": {}
        },
        "as_": {
            "name": "as_",
            "location": 78,
            "return": [],
            "arguments": {}
        },
        "exists": {
            "name": "exists",
            "location": 79,
            "return": [],
            "arguments": {}
        },
        "istrue": {
            "name": "istrue",
            "location": 80,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "isfalse": {
            "name": "isfalse",
            "location": 81,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "is_distinct_from": {
            "name": "is_distinct_from",
            "location": 82,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "isnot_distinct_from": {
            "name": "isnot_distinct_from",
            "location": 83,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "is_": {
            "name": "is_",
            "location": 84,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "isnot": {
            "name": "isnot",
            "location": 85,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "collate": {
            "name": "collate",
            "location": 86,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "op": {
            "name": "op",
            "location": 87,
            "return": [],
            "arguments": {
                "a": [],
                "opstring": [],
                "b": []
            }
        },
        "like_op": {
            "name": "like_op",
            "location": 88,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "escape": []
            }
        },
        "notlike_op": {
            "name": "notlike_op",
            "location": 89,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "escape": []
            }
        },
        "ilike_op": {
            "name": "ilike_op",
            "location": 90,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "escape": []
            }
        },
        "notilike_op": {
            "name": "notilike_op",
            "location": 91,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "escape": []
            }
        },
        "between_op": {
            "name": "between_op",
            "location": 92,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "c": [],
                "symmetric": []
            }
        },
        "notbetween_op": {
            "name": "notbetween_op",
            "location": 93,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "c": [],
                "symmetric": []
            }
        },
        "in_op": {
            "name": "in_op",
            "location": 94,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "notin_op": {
            "name": "notin_op",
            "location": 95,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "distinct_op": {
            "name": "distinct_op",
            "location": 96,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "any_op": {
            "name": "any_op",
            "location": 97,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "all_op": {
            "name": "all_op",
            "location": 98,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "startswith_op": {
            "name": "startswith_op",
            "location": 99,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "escape": []
            }
        },
        "notstartswith_op": {
            "name": "notstartswith_op",
            "location": 100,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "escape": []
            }
        },
        "endswith_op": {
            "name": "endswith_op",
            "location": 101,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "escape": []
            }
        },
        "notendswith_op": {
            "name": "notendswith_op",
            "location": 102,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "escape": []
            }
        },
        "contains_op": {
            "name": "contains_op",
            "location": 103,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "escape": []
            }
        },
        "notcontains_op": {
            "name": "notcontains_op",
            "location": 104,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "escape": []
            }
        },
        "match_op": {
            "name": "match_op",
            "location": 105,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "notmatch_op": {
            "name": "notmatch_op",
            "location": 106,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "comma_op": {
            "name": "comma_op",
            "location": 107,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "concat_op": {
            "name": "concat_op",
            "location": 108,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "desc_op": {
            "name": "desc_op",
            "location": 109,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "asc_op": {
            "name": "asc_op",
            "location": 110,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "nullsfirst_op": {
            "name": "nullsfirst_op",
            "location": 111,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "nullslast_op": {
            "name": "nullslast_op",
            "location": 112,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "json_getitem_op": {
            "name": "json_getitem_op",
            "location": 113,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "json_path_getitem_op": {
            "name": "json_path_getitem_op",
            "location": 114,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "is_comparison": {
            "name": "is_comparison",
            "location": 115,
            "return": [],
            "arguments": {
                "op": []
            }
        },
        "is_commutative": {
            "name": "is_commutative",
            "location": 116,
            "return": [],
            "arguments": {
                "op": []
            }
        },
        "is_ordering_modifier": {
            "name": "is_ordering_modifier",
            "location": 117,
            "return": [],
            "arguments": {
                "op": []
            }
        },
        "is_natural_self_precedent": {
            "name": "is_natural_self_precedent",
            "location": 118,
            "return": [],
            "arguments": {
                "op": []
            }
        },
        "mirror": {
            "name": "mirror",
            "location": 119,
            "return": [],
            "arguments": {
                "op": []
            }
        },
        "is_precedent": {
            "name": "is_precedent",
            "location": 120,
            "return": [],
            "arguments": {
                "operator": [],
                "against": []
            }
        },
        "Operators.__and__": {
            "name": "__and__",
            "location": 6,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Operators.__or__": {
            "name": "__or__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Operators.__invert__": {
            "name": "__invert__",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Operators.op": {
            "name": "op",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "opstring": [],
                "precedence": [],
                "is_comparison": []
            }
        },
        "Operators.operate": {
            "name": "operate",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "op": []
            }
        },
        "Operators.reverse_operate": {
            "name": "reverse_operate",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "op": [],
                "other": []
            }
        },
        "custom_op.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "opstring": [],
                "precedence": [],
                "is_comparison": [],
                "natural_self_precedent": [],
                "eager_grouping": []
            }
        },
        "custom_op.__eq__": {
            "name": "__eq__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "custom_op.__hash__": {
            "name": "__hash__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "custom_op.__call__": {
            "name": "__call__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "left": [],
                "right": []
            }
        },
        "ColumnOperators.__lt__": {
            "name": "__lt__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnOperators.__le__": {
            "name": "__le__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnOperators.__eq__": {
            "name": "__eq__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnOperators.__ne__": {
            "name": "__ne__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnOperators.is_distinct_from": {
            "name": "is_distinct_from",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnOperators.isnot_distinct_from": {
            "name": "isnot_distinct_from",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnOperators.__gt__": {
            "name": "__gt__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnOperators.__ge__": {
            "name": "__ge__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnOperators.__neg__": {
            "name": "__neg__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ColumnOperators.__contains__": {
            "name": "__contains__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnOperators.__getitem__": {
            "name": "__getitem__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "ColumnOperators.__lshift__": {
            "name": "__lshift__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnOperators.__rshift__": {
            "name": "__rshift__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnOperators.concat": {
            "name": "concat",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnOperators.like": {
            "name": "like",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "escape": []
            }
        },
        "ColumnOperators.ilike": {
            "name": "ilike",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "escape": []
            }
        },
        "ColumnOperators.in_": {
            "name": "in_",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnOperators.notin_": {
            "name": "notin_",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnOperators.notlike": {
            "name": "notlike",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "escape": []
            }
        },
        "ColumnOperators.notilike": {
            "name": "notilike",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "escape": []
            }
        },
        "ColumnOperators.is_": {
            "name": "is_",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnOperators.isnot": {
            "name": "isnot",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnOperators.startswith": {
            "name": "startswith",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnOperators.endswith": {
            "name": "endswith",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnOperators.contains": {
            "name": "contains",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnOperators.match": {
            "name": "match",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnOperators.desc": {
            "name": "desc",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ColumnOperators.asc": {
            "name": "asc",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ColumnOperators.nullsfirst": {
            "name": "nullsfirst",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ColumnOperators.nullslast": {
            "name": "nullslast",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ColumnOperators.collate": {
            "name": "collate",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "collation": []
            }
        },
        "ColumnOperators.__radd__": {
            "name": "__radd__",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnOperators.__rsub__": {
            "name": "__rsub__",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnOperators.__rmul__": {
            "name": "__rmul__",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnOperators.__rdiv__": {
            "name": "__rdiv__",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnOperators.__rmod__": {
            "name": "__rmod__",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnOperators.between": {
            "name": "between",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "cleft": [],
                "cright": [],
                "symmetric": []
            }
        },
        "ColumnOperators.distinct": {
            "name": "distinct",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ColumnOperators.any_": {
            "name": "any_",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ColumnOperators.all_": {
            "name": "all_",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ColumnOperators.__add__": {
            "name": "__add__",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnOperators.__sub__": {
            "name": "__sub__",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnOperators.__mul__": {
            "name": "__mul__",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnOperators.__div__": {
            "name": "__div__",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnOperators.__mod__": {
            "name": "__mod__",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnOperators.__truediv__": {
            "name": "__truediv__",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnOperators.__rtruediv__": {
            "name": "__rtruediv__",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/sql/schema.py": {
        "SchemaItem.get_children": {
            "name": "get_children",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SchemaItem.quote": {
            "name": "quote",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SchemaItem.info": {
            "name": "info",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table.__new__": {
            "name": "__new__",
            "location": 42,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Table.quote_schema": {
            "name": "quote_schema",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "metadata": []
            }
        },
        "Table.foreign_key_constraints": {
            "name": "foreign_key_constraints",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table.key": {
            "name": "key",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table.bind": {
            "name": "bind",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table.add_is_dependent_on": {
            "name": "add_is_dependent_on",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "table": []
            }
        },
        "Table.append_column": {
            "name": "append_column",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "column": []
            }
        },
        "Table.append_constraint": {
            "name": "append_constraint",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "constraint": []
            }
        },
        "Table.append_ddl_listener": {
            "name": "append_ddl_listener",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "event_name": [],
                "listener": []
            }
        },
        "Table.get_children": {
            "name": "get_children",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "column_collections": [],
                "schema_visitor": []
            }
        },
        "Table.exists": {
            "name": "exists",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "bind": []
            }
        },
        "Table.create": {
            "name": "create",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "bind": [],
                "checkfirst": []
            }
        },
        "Table.drop": {
            "name": "drop",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "bind": [],
                "checkfirst": []
            }
        },
        "Table.tometadata": {
            "name": "tometadata",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "metadata": [],
                "schema": [],
                "referred_schema_fn": [],
                "name": []
            }
        },
        "Column.__init__": {
            "name": "__init__",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "Column.references": {
            "name": "references",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "column": []
            }
        },
        "Column.append_foreign_key": {
            "name": "append_foreign_key",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "fk": []
            }
        },
        "Column.copy": {
            "name": "copy",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Column.get_children": {
            "name": "get_children",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "schema_visitor": []
            }
        },
        "Column.__get__": {
            "name": "__get__",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "owner": []
            }
        },
        "ForeignKey.__init__": {
            "name": "__init__",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "column": [],
                "_constraint": [],
                "use_alter": [],
                "name": [],
                "onupdate": [],
                "ondelete": [],
                "deferrable": [],
                "initially": [],
                "link_to_name": [],
                "match": [],
                "info": []
            }
        },
        "ForeignKey.copy": {
            "name": "copy",
            "location": 153,
            "return": [],
            "arguments": {
                "self": [],
                "schema": []
            }
        },
        "ForeignKey.references": {
            "name": "references",
            "location": 155,
            "return": [],
            "arguments": {
                "self": [],
                "table": []
            }
        },
        "ForeignKey.get_referent": {
            "name": "get_referent",
            "location": 156,
            "return": [],
            "arguments": {
                "self": [],
                "table": []
            }
        },
        "ForeignKey.column": {
            "name": "column",
            "location": 158,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DefaultGenerator.__init__": {
            "name": "__init__",
            "location": 170,
            "return": [],
            "arguments": {
                "self": [],
                "for_update": []
            }
        },
        "DefaultGenerator.execute": {
            "name": "execute",
            "location": 171,
            "return": [],
            "arguments": {
                "self": [],
                "bind": []
            }
        },
        "DefaultGenerator.bind": {
            "name": "bind",
            "location": 173,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ColumnDefault.__init__": {
            "name": "__init__",
            "location": 177,
            "return": [],
            "arguments": {
                "self": [],
                "arg": []
            }
        },
        "ColumnDefault.is_callable": {
            "name": "is_callable",
            "location": 179,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ColumnDefault.is_clause_element": {
            "name": "is_clause_element",
            "location": 181,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ColumnDefault.is_scalar": {
            "name": "is_scalar",
            "location": 183,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Sequence.__init__": {
            "name": "__init__",
            "location": 200,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "start": [],
                "increment": [],
                "minvalue": [],
                "maxvalue": [],
                "nominvalue": [],
                "nomaxvalue": [],
                "cycle": [],
                "schema": [],
                "optional": [],
                "quote": [],
                "metadata": [],
                "quote_schema": [],
                "for_update": []
            }
        },
        "Sequence.is_callable": {
            "name": "is_callable",
            "location": 206,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Sequence.is_clause_element": {
            "name": "is_clause_element",
            "location": 208,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Sequence.next_value": {
            "name": "next_value",
            "location": 209,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Sequence.bind": {
            "name": "bind",
            "location": 211,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Sequence.create": {
            "name": "create",
            "location": 212,
            "return": [],
            "arguments": {
                "self": [],
                "bind": [],
                "checkfirst": []
            }
        },
        "Sequence.drop": {
            "name": "drop",
            "location": 213,
            "return": [],
            "arguments": {
                "self": [],
                "bind": [],
                "checkfirst": []
            }
        },
        "FetchedValue.__init__": {
            "name": "__init__",
            "location": 220,
            "return": [],
            "arguments": {
                "self": [],
                "for_update": []
            }
        },
        "DefaultClause.__init__": {
            "name": "__init__",
            "location": 226,
            "return": [],
            "arguments": {
                "self": [],
                "arg": [],
                "for_update": [],
                "_reflected": []
            }
        },
        "PassiveDefault.__init__": {
            "name": "__init__",
            "location": 229,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Constraint.__init__": {
            "name": "__init__",
            "location": 237,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "deferrable": [],
                "initially": [],
                "_create_rule": [],
                "info": [],
                "_type_bound": []
            }
        },
        "Constraint.table": {
            "name": "table",
            "location": 241,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Constraint.copy": {
            "name": "copy",
            "location": 242,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ColumnCollectionMixin.__init__": {
            "name": "__init__",
            "location": 246,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ColumnCollectionConstraint.__init__": {
            "name": "__init__",
            "location": 251,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ColumnCollectionConstraint.__contains__": {
            "name": "__contains__",
            "location": 254,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "ColumnCollectionConstraint.copy": {
            "name": "copy",
            "location": 255,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ColumnCollectionConstraint.contains_column": {
            "name": "contains_column",
            "location": 256,
            "return": [],
            "arguments": {
                "self": [],
                "col": []
            }
        },
        "ColumnCollectionConstraint.__iter__": {
            "name": "__iter__",
            "location": 257,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ColumnCollectionConstraint.__len__": {
            "name": "__len__",
            "location": 258,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CheckConstraint.__init__": {
            "name": "__init__",
            "location": 262,
            "return": [],
            "arguments": {
                "self": [],
                "sqltext": [],
                "name": [],
                "deferrable": [],
                "initially": [],
                "table": [],
                "info": [],
                "_create_rule": [],
                "_autoattach": [],
                "_type_bound": []
            }
        },
        "CheckConstraint.copy": {
            "name": "copy",
            "location": 267,
            "return": [],
            "arguments": {
                "self": [],
                "target_table": []
            }
        },
        "ForeignKeyConstraint.__init__": {
            "name": "__init__",
            "location": 277,
            "return": [],
            "arguments": {
                "self": [],
                "columns": [],
                "refcolumns": [],
                "name": [],
                "onupdate": [],
                "ondelete": [],
                "deferrable": [],
                "initially": [],
                "use_alter": [],
                "link_to_name": [],
                "match": [],
                "table": [],
                "info": []
            }
        },
        "ForeignKeyConstraint.referred_table": {
            "name": "referred_table",
            "location": 282,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForeignKeyConstraint.column_keys": {
            "name": "column_keys",
            "location": 284,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForeignKeyConstraint.copy": {
            "name": "copy",
            "location": 285,
            "return": [],
            "arguments": {
                "self": [],
                "schema": [],
                "target_table": []
            }
        },
        "PrimaryKeyConstraint.__init__": {
            "name": "__init__",
            "location": 289,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PrimaryKeyConstraint.columns_autoinc_first": {
            "name": "columns_autoinc_first",
            "location": 293,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Index.__init__": {
            "name": "__init__",
            "location": 307,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Index.bind": {
            "name": "bind",
            "location": 310,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Index.create": {
            "name": "create",
            "location": 311,
            "return": [],
            "arguments": {
                "self": [],
                "bind": []
            }
        },
        "Index.drop": {
            "name": "drop",
            "location": 312,
            "return": [],
            "arguments": {
                "self": [],
                "bind": []
            }
        },
        "_MetaDataBind.__get__": {
            "name": "__get__",
            "location": 320,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "owner": []
            }
        },
        "_MetaDataBind.__set__": {
            "name": "__set__",
            "location": 321,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "value": []
            }
        },
        "MetaData.__init__": {
            "name": "__init__",
            "location": 332,
            "return": [],
            "arguments": {
                "self": [],
                "bind": [],
                "reflect": [],
                "schema": [],
                "quote_schema": [],
                "naming_convention": [],
                "info": []
            }
        },
        "MetaData.__contains__": {
            "name": "__contains__",
            "location": 335,
            "return": [],
            "arguments": {
                "self": [],
                "table_or_key": []
            }
        },
        "MetaData.is_bound": {
            "name": "is_bound",
            "location": 336,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MetaData.clear": {
            "name": "clear",
            "location": 337,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MetaData.remove": {
            "name": "remove",
            "location": 338,
            "return": [],
            "arguments": {
                "self": [],
                "table": []
            }
        },
        "MetaData.sorted_tables": {
            "name": "sorted_tables",
            "location": 340,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MetaData.reflect": {
            "name": "reflect",
            "location": 341,
            "return": [],
            "arguments": {
                "self": [],
                "bind": [],
                "schema": [],
                "views": [],
                "only": [],
                "extend_existing": [],
                "autoload_replace": []
            }
        },
        "MetaData.append_ddl_listener": {
            "name": "append_ddl_listener",
            "location": 344,
            "return": [],
            "arguments": {
                "self": [],
                "event_name": [],
                "listener": []
            }
        },
        "MetaData.create_all": {
            "name": "create_all",
            "location": 345,
            "return": [],
            "arguments": {
                "self": [],
                "bind": [],
                "tables": [],
                "checkfirst": []
            }
        },
        "MetaData.drop_all": {
            "name": "drop_all",
            "location": 347,
            "return": [],
            "arguments": {
                "self": [],
                "bind": [],
                "tables": [],
                "checkfirst": []
            }
        },
        "ThreadLocalMetaData.__init__": {
            "name": "__init__",
            "location": 354,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ThreadLocalMetaData.is_bound": {
            "name": "is_bound",
            "location": 355,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ThreadLocalMetaData.dispose": {
            "name": "dispose",
            "location": 356,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/sql/selectable.py": {
        "subquery": {
            "name": "subquery",
            "location": 18,
            "return": [],
            "arguments": {
                "alias": []
            }
        },
        "alias": {
            "name": "alias",
            "location": 19,
            "return": [],
            "arguments": {
                "selectable": [],
                "name": [],
                "flat": []
            }
        },
        "lateral": {
            "name": "lateral",
            "location": 20,
            "return": [],
            "arguments": {
                "selectable": [],
                "name": []
            }
        },
        "tablesample": {
            "name": "tablesample",
            "location": 21,
            "return": [],
            "arguments": {
                "selectable": [],
                "sampling": [],
                "name": [],
                "seed": []
            }
        },
        "Selectable.selectable": {
            "name": "selectable",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HasPrefixes.prefix_with": {
            "name": "prefix_with",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HasSuffixes.suffix_with": {
            "name": "suffix_with",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FromClause.count": {
            "name": "count",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "whereclause": []
            }
        },
        "FromClause.select": {
            "name": "select",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "whereclause": []
            }
        },
        "FromClause.join": {
            "name": "join",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "right": [],
                "onclause": [],
                "isouter": [],
                "full": []
            }
        },
        "FromClause.outerjoin": {
            "name": "outerjoin",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "right": [],
                "onclause": [],
                "full": []
            }
        },
        "FromClause.alias": {
            "name": "alias",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "flat": []
            }
        },
        "FromClause.lateral": {
            "name": "lateral",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "FromClause.tablesample": {
            "name": "tablesample",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "sampling": [],
                "name": [],
                "seed": []
            }
        },
        "FromClause.is_derived_from": {
            "name": "is_derived_from",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "fromclause": []
            }
        },
        "FromClause.replace_selectable": {
            "name": "replace_selectable",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "old": [],
                "alias": []
            }
        },
        "FromClause.correspond_on_equivalents": {
            "name": "correspond_on_equivalents",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "column": [],
                "equivalents": []
            }
        },
        "FromClause.corresponding_column": {
            "name": "corresponding_column",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "column": [],
                "require_embedded": []
            }
        },
        "FromClause.description": {
            "name": "description",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FromClause.columns": {
            "name": "columns",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FromClause.primary_key": {
            "name": "primary_key",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FromClause.foreign_keys": {
            "name": "foreign_keys",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Join.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "left": [],
                "right": [],
                "onclause": [],
                "isouter": [],
                "full": []
            }
        },
        "Join.description": {
            "name": "description",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Join.is_derived_from": {
            "name": "is_derived_from",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "fromclause": []
            }
        },
        "Join.self_group": {
            "name": "self_group",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "against": []
            }
        },
        "Join.get_children": {
            "name": "get_children",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Join.select": {
            "name": "select",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "whereclause": []
            }
        },
        "Join.bind": {
            "name": "bind",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Join.alias": {
            "name": "alias",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "flat": []
            }
        },
        "Join._create_outerjoin": {
            "name": "_create_outerjoin",
            "location": 90,
            "return": [],
            "arguments": {
                "cls": [],
                "left": [],
                "right": [],
                "onclause": [],
                "full": []
            }
        },
        "Join._create_join": {
            "name": "_create_join",
            "location": 93,
            "return": [],
            "arguments": {
                "cls": [],
                "left": [],
                "right": [],
                "onclause": [],
                "isouter": [],
                "full": []
            }
        },
        "Alias.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "selectable": [],
                "name": []
            }
        },
        "Alias.self_group": {
            "name": "self_group",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "against": []
            }
        },
        "Alias.description": {
            "name": "description",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Alias.as_scalar": {
            "name": "as_scalar",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Alias.is_derived_from": {
            "name": "is_derived_from",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "fromclause": []
            }
        },
        "Alias.get_children": {
            "name": "get_children",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "column_collections": []
            }
        },
        "Alias.bind": {
            "name": "bind",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TableSample.__init__": {
            "name": "__init__",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "selectable": [],
                "sampling": [],
                "name": [],
                "seed": []
            }
        },
        "CTE.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "selectable": [],
                "name": [],
                "recursive": [],
                "_cte_alias": [],
                "_restates": [],
                "_prefixes": [],
                "_suffixes": []
            }
        },
        "CTE.alias": {
            "name": "alias",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "flat": []
            }
        },
        "CTE.union": {
            "name": "union",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "CTE.union_all": {
            "name": "union_all",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "HasCTE.cte": {
            "name": "cte",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "recursive": []
            }
        },
        "FromGrouping.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "element": []
            }
        },
        "FromGrouping.columns": {
            "name": "columns",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FromGrouping.primary_key": {
            "name": "primary_key",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FromGrouping.foreign_keys": {
            "name": "foreign_keys",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FromGrouping.is_derived_from": {
            "name": "is_derived_from",
            "location": 148,
            "return": [],
            "arguments": {
                "self": [],
                "element": []
            }
        },
        "FromGrouping.alias": {
            "name": "alias",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "flat": []
            }
        },
        "FromGrouping.get_children": {
            "name": "get_children",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FromGrouping.__getattr__": {
            "name": "__getattr__",
            "location": 152,
            "return": [],
            "arguments": {
                "self": [],
                "attr": []
            }
        },
        "TableClause.__init__": {
            "name": "__init__",
            "location": 161,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "TableClause.description": {
            "name": "description",
            "location": 163,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TableClause.append_column": {
            "name": "append_column",
            "location": 164,
            "return": [],
            "arguments": {
                "self": [],
                "c": []
            }
        },
        "TableClause.get_children": {
            "name": "get_children",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "column_collections": []
            }
        },
        "TableClause.insert": {
            "name": "insert",
            "location": 168,
            "return": [],
            "arguments": {
                "self": [],
                "values": [],
                "inline": []
            }
        },
        "TableClause.update": {
            "name": "update",
            "location": 169,
            "return": [],
            "arguments": {
                "self": [],
                "whereclause": [],
                "values": [],
                "inline": []
            }
        },
        "TableClause.delete": {
            "name": "delete",
            "location": 172,
            "return": [],
            "arguments": {
                "self": [],
                "whereclause": []
            }
        },
        "ForUpdateArg.parse_legacy_select": {
            "name": "parse_legacy_select",
            "location": 176,
            "return": [],
            "arguments": {
                "self": [],
                "arg": []
            }
        },
        "ForUpdateArg.legacy_for_update_value": {
            "name": "legacy_for_update_value",
            "location": 178,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForUpdateArg.__init__": {
            "name": "__init__",
            "location": 184,
            "return": [],
            "arguments": {
                "self": [],
                "nowait": [],
                "read": [],
                "of": [],
                "skip_locked": [],
                "key_share": []
            }
        },
        "SelectBase.as_scalar": {
            "name": "as_scalar",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SelectBase.label": {
            "name": "label",
            "location": 191,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "SelectBase.autocommit": {
            "name": "autocommit",
            "location": 192,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GenerativeSelect.__init__": {
            "name": "__init__",
            "location": 199,
            "return": [],
            "arguments": {
                "self": [],
                "use_labels": [],
                "for_update": [],
                "limit": [],
                "offset": [],
                "order_by": [],
                "group_by": [],
                "bind": [],
                "autocommit": []
            }
        },
        "GenerativeSelect.with_for_update": {
            "name": "with_for_update",
            "location": 205,
            "return": [],
            "arguments": {
                "self": [],
                "nowait": [],
                "read": [],
                "of": [],
                "skip_locked": [],
                "key_share": []
            }
        },
        "GenerativeSelect.apply_labels": {
            "name": "apply_labels",
            "location": 208,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GenerativeSelect.limit": {
            "name": "limit",
            "location": 209,
            "return": [],
            "arguments": {
                "self": [],
                "limit": []
            }
        },
        "GenerativeSelect.offset": {
            "name": "offset",
            "location": 210,
            "return": [],
            "arguments": {
                "self": [],
                "offset": []
            }
        },
        "GenerativeSelect.order_by": {
            "name": "order_by",
            "location": 211,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GenerativeSelect.group_by": {
            "name": "group_by",
            "location": 212,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GenerativeSelect.append_order_by": {
            "name": "append_order_by",
            "location": 213,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GenerativeSelect.append_group_by": {
            "name": "append_group_by",
            "location": 214,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CompoundSelect.__init__": {
            "name": "__init__",
            "location": 226,
            "return": [],
            "arguments": {
                "self": [],
                "keyword": []
            }
        },
        "CompoundSelect.self_group": {
            "name": "self_group",
            "location": 227,
            "return": [],
            "arguments": {
                "self": [],
                "against": []
            }
        },
        "CompoundSelect.is_derived_from": {
            "name": "is_derived_from",
            "location": 228,
            "return": [],
            "arguments": {
                "self": [],
                "fromclause": []
            }
        },
        "CompoundSelect.get_children": {
            "name": "get_children",
            "location": 229,
            "return": [],
            "arguments": {
                "self": [],
                "column_collections": []
            }
        },
        "CompoundSelect.bind": {
            "name": "bind",
            "location": 231,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CompoundSelect._create_union": {
            "name": "_create_union",
            "location": 233,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "CompoundSelect._create_union_all": {
            "name": "_create_union_all",
            "location": 235,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "CompoundSelect._create_except": {
            "name": "_create_except",
            "location": 237,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "CompoundSelect._create_except_all": {
            "name": "_create_except_all",
            "location": 239,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "CompoundSelect._create_intersect": {
            "name": "_create_intersect",
            "location": 241,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "CompoundSelect._create_intersect_all": {
            "name": "_create_intersect_all",
            "location": 243,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Select.__init__": {
            "name": "__init__",
            "location": 249,
            "return": [],
            "arguments": {
                "self": [],
                "columns": [],
                "whereclause": [],
                "from_obj": [],
                "group_by": [],
                "having": [],
                "order_by": [],
                "distinct": [],
                "correlate": [],
                "limit": [],
                "offset": [],
                "use_labels": [],
                "autocommit": [],
                "bind": [],
                "prefixes": [],
                "suffixes": []
            }
        },
        "Select.froms": {
            "name": "froms",
            "location": 260,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Select.with_statement_hint": {
            "name": "with_statement_hint",
            "location": 261,
            "return": [],
            "arguments": {
                "self": [],
                "text": [],
                "dialect_name": []
            }
        },
        "Select.with_hint": {
            "name": "with_hint",
            "location": 262,
            "return": [],
            "arguments": {
                "self": [],
                "selectable": [],
                "text": [],
                "dialect_name": []
            }
        },
        "Select.type": {
            "name": "type",
            "location": 264,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Select.locate_all_froms": {
            "name": "locate_all_froms",
            "location": 266,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Select.inner_columns": {
            "name": "inner_columns",
            "location": 268,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Select.is_derived_from": {
            "name": "is_derived_from",
            "location": 269,
            "return": [],
            "arguments": {
                "self": [],
                "fromclause": []
            }
        },
        "Select.get_children": {
            "name": "get_children",
            "location": 270,
            "return": [],
            "arguments": {
                "self": [],
                "column_collections": []
            }
        },
        "Select.column": {
            "name": "column",
            "location": 271,
            "return": [],
            "arguments": {
                "self": [],
                "column": []
            }
        },
        "Select.reduce_columns": {
            "name": "reduce_columns",
            "location": 272,
            "return": [],
            "arguments": {
                "self": [],
                "only_synonyms": []
            }
        },
        "Select.with_only_columns": {
            "name": "with_only_columns",
            "location": 273,
            "return": [],
            "arguments": {
                "self": [],
                "columns": []
            }
        },
        "Select.where": {
            "name": "where",
            "location": 274,
            "return": [],
            "arguments": {
                "self": [],
                "whereclause": []
            }
        },
        "Select.having": {
            "name": "having",
            "location": 275,
            "return": [],
            "arguments": {
                "self": [],
                "having": []
            }
        },
        "Select.distinct": {
            "name": "distinct",
            "location": 276,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Select.select_from": {
            "name": "select_from",
            "location": 277,
            "return": [],
            "arguments": {
                "self": [],
                "fromclause": []
            }
        },
        "Select.correlate": {
            "name": "correlate",
            "location": 278,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Select.correlate_except": {
            "name": "correlate_except",
            "location": 279,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Select.append_correlation": {
            "name": "append_correlation",
            "location": 280,
            "return": [],
            "arguments": {
                "self": [],
                "fromclause": []
            }
        },
        "Select.append_column": {
            "name": "append_column",
            "location": 281,
            "return": [],
            "arguments": {
                "self": [],
                "column": []
            }
        },
        "Select.append_prefix": {
            "name": "append_prefix",
            "location": 282,
            "return": [],
            "arguments": {
                "self": [],
                "clause": []
            }
        },
        "Select.append_whereclause": {
            "name": "append_whereclause",
            "location": 283,
            "return": [],
            "arguments": {
                "self": [],
                "whereclause": []
            }
        },
        "Select.append_having": {
            "name": "append_having",
            "location": 284,
            "return": [],
            "arguments": {
                "self": [],
                "having": []
            }
        },
        "Select.append_from": {
            "name": "append_from",
            "location": 285,
            "return": [],
            "arguments": {
                "self": [],
                "fromclause": []
            }
        },
        "Select.self_group": {
            "name": "self_group",
            "location": 286,
            "return": [],
            "arguments": {
                "self": [],
                "against": []
            }
        },
        "Select.union": {
            "name": "union",
            "location": 287,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Select.union_all": {
            "name": "union_all",
            "location": 288,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Select.except_": {
            "name": "except_",
            "location": 289,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Select.except_all": {
            "name": "except_all",
            "location": 290,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Select.intersect": {
            "name": "intersect",
            "location": 291,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Select.intersect_all": {
            "name": "intersect_all",
            "location": 292,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Select.bind": {
            "name": "bind",
            "location": 293,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScalarSelect.__init__": {
            "name": "__init__",
            "location": 300,
            "return": [],
            "arguments": {
                "self": [],
                "element": []
            }
        },
        "ScalarSelect.columns": {
            "name": "columns",
            "location": 302,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScalarSelect.where": {
            "name": "where",
            "location": 304,
            "return": [],
            "arguments": {
                "self": [],
                "crit": []
            }
        },
        "ScalarSelect.self_group": {
            "name": "self_group",
            "location": 305,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Exists.__init__": {
            "name": "__init__",
            "location": 309,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Exists.select": {
            "name": "select",
            "location": 310,
            "return": [],
            "arguments": {
                "self": [],
                "whereclause": []
            }
        },
        "Exists.correlate": {
            "name": "correlate",
            "location": 311,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Exists.correlate_except": {
            "name": "correlate_except",
            "location": 312,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Exists.select_from": {
            "name": "select_from",
            "location": 313,
            "return": [],
            "arguments": {
                "self": [],
                "clause": []
            }
        },
        "Exists.where": {
            "name": "where",
            "location": 314,
            "return": [],
            "arguments": {
                "self": [],
                "clause": []
            }
        },
        "TextAsFrom.__init__": {
            "name": "__init__",
            "location": 323,
            "return": [],
            "arguments": {
                "self": [],
                "text": [],
                "columns": [],
                "positional": []
            }
        },
        "TextAsFrom.bindparams": {
            "name": "bindparams",
            "location": 324,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AnnotatedFromClause.__init__": {
            "name": "__init__",
            "location": 327,
            "return": [],
            "arguments": {
                "self": [],
                "element": [],
                "values": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/sql/sqltypes.py": {
        "String.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "length": [],
                "collation": [],
                "convert_unicode": [],
                "unicode_error": [],
                "_warn_on_bytestring": []
            }
        },
        "String.literal_processor": {
            "name": "literal_processor",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": []
            }
        },
        "String.bind_processor": {
            "name": "bind_processor",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": []
            }
        },
        "String.result_processor": {
            "name": "result_processor",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": [],
                "coltype": []
            }
        },
        "String.python_type": {
            "name": "python_type",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "String.get_dbapi_type": {
            "name": "get_dbapi_type",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "dbapi": []
            }
        },
        "Unicode.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "length": [],
                "collation": [],
                "convert_unicode": [],
                "unicode_error": [],
                "_warn_on_bytestring": []
            }
        },
        "UnicodeText.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "length": [],
                "collation": [],
                "convert_unicode": [],
                "unicode_error": [],
                "_warn_on_bytestring": []
            }
        },
        "Integer.get_dbapi_type": {
            "name": "get_dbapi_type",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "dbapi": []
            }
        },
        "Integer.python_type": {
            "name": "python_type",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Integer.literal_processor": {
            "name": "literal_processor",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": []
            }
        },
        "Numeric.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "precision": [],
                "scale": [],
                "decimal_return_scale": [],
                "asdecimal": []
            }
        },
        "Numeric.get_dbapi_type": {
            "name": "get_dbapi_type",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "dbapi": []
            }
        },
        "Numeric.literal_processor": {
            "name": "literal_processor",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": []
            }
        },
        "Numeric.python_type": {
            "name": "python_type",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Numeric.bind_processor": {
            "name": "bind_processor",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": []
            }
        },
        "Numeric.result_processor": {
            "name": "result_processor",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": [],
                "coltype": []
            }
        },
        "Float.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "precision": [],
                "asdecimal": [],
                "decimal_return_scale": []
            }
        },
        "Float.result_processor": {
            "name": "result_processor",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": [],
                "coltype": []
            }
        },
        "DateTime.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "timezone": []
            }
        },
        "DateTime.get_dbapi_type": {
            "name": "get_dbapi_type",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "dbapi": []
            }
        },
        "DateTime.python_type": {
            "name": "python_type",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Date.get_dbapi_type": {
            "name": "get_dbapi_type",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "dbapi": []
            }
        },
        "Date.python_type": {
            "name": "python_type",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Time.__init__": {
            "name": "__init__",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "timezone": []
            }
        },
        "Time.get_dbapi_type": {
            "name": "get_dbapi_type",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "dbapi": []
            }
        },
        "Time.python_type": {
            "name": "python_type",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_Binary.__init__": {
            "name": "__init__",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "length": []
            }
        },
        "_Binary.literal_processor": {
            "name": "literal_processor",
            "location": 139,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": []
            }
        },
        "_Binary.python_type": {
            "name": "python_type",
            "location": 141,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_Binary.bind_processor": {
            "name": "bind_processor",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": []
            }
        },
        "_Binary.result_processor": {
            "name": "result_processor",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": [],
                "coltype": []
            }
        },
        "_Binary.coerce_compared_value": {
            "name": "coerce_compared_value",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "op": [],
                "value": []
            }
        },
        "_Binary.get_dbapi_type": {
            "name": "get_dbapi_type",
            "location": 145,
            "return": [],
            "arguments": {
                "self": [],
                "dbapi": []
            }
        },
        "LargeBinary.__init__": {
            "name": "__init__",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "length": []
            }
        },
        "Binary.__init__": {
            "name": "__init__",
            "location": 152,
            "return": [],
            "arguments": {
                "self": [],
                "length": []
            }
        },
        "SchemaType.__init__": {
            "name": "__init__",
            "location": 159,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "schema": [],
                "metadata": [],
                "inherit_schema": [],
                "quote": [],
                "_create_events": []
            }
        },
        "SchemaType.copy": {
            "name": "copy",
            "location": 162,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SchemaType.adapt": {
            "name": "adapt",
            "location": 163,
            "return": [],
            "arguments": {
                "self": [],
                "cls": []
            }
        },
        "SchemaType.bind": {
            "name": "bind",
            "location": 165,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SchemaType.create": {
            "name": "create",
            "location": 166,
            "return": [],
            "arguments": {
                "self": [],
                "bind": [],
                "checkfirst": []
            }
        },
        "SchemaType.drop": {
            "name": "drop",
            "location": 167,
            "return": [],
            "arguments": {
                "self": [],
                "bind": [],
                "checkfirst": []
            }
        },
        "Enum.__init__": {
            "name": "__init__",
            "location": 177,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Enum.native": {
            "name": "native",
            "location": 179,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Enum.adapt_to_emulated": {
            "name": "adapt_to_emulated",
            "location": 181,
            "return": [],
            "arguments": {
                "self": [],
                "impltype": []
            }
        },
        "Enum.adapt": {
            "name": "adapt",
            "location": 182,
            "return": [],
            "arguments": {
                "self": [],
                "cls": []
            }
        },
        "Enum.literal_processor": {
            "name": "literal_processor",
            "location": 183,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": []
            }
        },
        "Enum.bind_processor": {
            "name": "bind_processor",
            "location": 184,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": []
            }
        },
        "Enum.result_processor": {
            "name": "result_processor",
            "location": 185,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": [],
                "coltype": []
            }
        },
        "Enum.copy": {
            "name": "copy",
            "location": 186,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Enum.python_type": {
            "name": "python_type",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PickleType.__init__": {
            "name": "__init__",
            "location": 211,
            "return": [],
            "arguments": {
                "self": [],
                "protocol": [],
                "pickler": [],
                "comparator": []
            }
        },
        "PickleType.__reduce__": {
            "name": "__reduce__",
            "location": 213,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PickleType.bind_processor": {
            "name": "bind_processor",
            "location": 214,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": []
            }
        },
        "PickleType.result_processor": {
            "name": "result_processor",
            "location": 215,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": [],
                "coltype": []
            }
        },
        "PickleType.compare_values": {
            "name": "compare_values",
            "location": 216,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "Boolean.__init__": {
            "name": "__init__",
            "location": 222,
            "return": [],
            "arguments": {
                "self": [],
                "create_constraint": [],
                "name": [],
                "_create_events": []
            }
        },
        "Boolean.python_type": {
            "name": "python_type",
            "location": 225,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Boolean.literal_processor": {
            "name": "literal_processor",
            "location": 226,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": []
            }
        },
        "Boolean.bind_processor": {
            "name": "bind_processor",
            "location": 227,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": []
            }
        },
        "Boolean.result_processor": {
            "name": "result_processor",
            "location": 228,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": [],
                "coltype": []
            }
        },
        "_AbstractInterval.coerce_compared_value": {
            "name": "coerce_compared_value",
            "location": 231,
            "return": [],
            "arguments": {
                "self": [],
                "op": [],
                "value": []
            }
        },
        "Interval.__init__": {
            "name": "__init__",
            "location": 240,
            "return": [],
            "arguments": {
                "self": [],
                "native": [],
                "second_precision": [],
                "day_precision": []
            }
        },
        "Interval.adapt_to_emulated": {
            "name": "adapt_to_emulated",
            "location": 242,
            "return": [],
            "arguments": {
                "self": [],
                "impltype": []
            }
        },
        "Interval.python_type": {
            "name": "python_type",
            "location": 244,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Interval.bind_processor": {
            "name": "bind_processor",
            "location": 245,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": []
            }
        },
        "Interval.result_processor": {
            "name": "result_processor",
            "location": 246,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": [],
                "coltype": []
            }
        },
        "JSON.__init__": {
            "name": "__init__",
            "location": 255,
            "return": [],
            "arguments": {
                "self": [],
                "none_as_null": []
            }
        },
        "JSON.python_type": {
            "name": "python_type",
            "location": 266,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSON.should_evaluate_none": {
            "name": "should_evaluate_none",
            "location": 268,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSON.bind_processor": {
            "name": "bind_processor",
            "location": 269,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": []
            }
        },
        "JSON.result_processor": {
            "name": "result_processor",
            "location": 270,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": [],
                "coltype": []
            }
        },
        "ARRAY.__init__": {
            "name": "__init__",
            "location": 283,
            "return": [],
            "arguments": {
                "self": [],
                "item_type": [],
                "as_tuple": [],
                "dimensions": [],
                "zero_indexes": []
            }
        },
        "ARRAY.hashable": {
            "name": "hashable",
            "location": 286,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ARRAY.python_type": {
            "name": "python_type",
            "location": 288,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ARRAY.compare_values": {
            "name": "compare_values",
            "location": 289,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "TIMESTAMP.__init__": {
            "name": "__init__",
            "location": 316,
            "return": [],
            "arguments": {
                "self": [],
                "timezone": []
            }
        },
        "TIMESTAMP.get_dbapi_type": {
            "name": "get_dbapi_type",
            "location": 317,
            "return": [],
            "arguments": {
                "self": [],
                "dbapi": []
            }
        },
        "NullType.literal_processor": {
            "name": "literal_processor",
            "location": 361,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": []
            }
        },
        "_Pickler.dump": {
            "name": "dump",
            "location": 201,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [],
                "file": [],
                "protocol": []
            }
        },
        "_Pickler.dumps": {
            "name": "dumps",
            "location": 202,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [],
                "protocol": []
            }
        },
        "_Pickler.loads": {
            "name": "loads",
            "location": 204,
            "return": [],
            "arguments": {
                "self": [],
                "string": []
            }
        },
        "_Pickler.load": {
            "name": "load",
            "location": 203,
            "return": [],
            "arguments": {
                "self": [],
                "file": []
            }
        },
        "JSON.JSONElementType.string_bind_processor": {
            "name": "string_bind_processor",
            "location": 257,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": []
            }
        },
        "JSON.JSONElementType.string_literal_processor": {
            "name": "string_literal_processor",
            "location": 258,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": []
            }
        },
        "JSON.JSONElementType.bind_processor": {
            "name": "bind_processor",
            "location": 259,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": []
            }
        },
        "JSON.JSONElementType.literal_processor": {
            "name": "literal_processor",
            "location": 260,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/sql/type_api.py": {
        "to_instance": {
            "name": "to_instance",
            "location": 120,
            "return": [],
            "arguments": {
                "typeobj": []
            }
        },
        "adapt_type": {
            "name": "adapt_type",
            "location": 121,
            "return": [],
            "arguments": {
                "typeobj": [],
                "colspecs": []
            }
        },
        "TypeEngine.evaluates_none": {
            "name": "evaluates_none",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TypeEngine.copy": {
            "name": "copy",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TypeEngine.compare_against_backend": {
            "name": "compare_against_backend",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": [],
                "conn_type": []
            }
        },
        "TypeEngine.copy_value": {
            "name": "copy_value",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "TypeEngine.literal_processor": {
            "name": "literal_processor",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": []
            }
        },
        "TypeEngine.bind_processor": {
            "name": "bind_processor",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": []
            }
        },
        "TypeEngine.result_processor": {
            "name": "result_processor",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": [],
                "coltype": []
            }
        },
        "TypeEngine.column_expression": {
            "name": "column_expression",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "colexpr": []
            }
        },
        "TypeEngine.bind_expression": {
            "name": "bind_expression",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "bindvalue": []
            }
        },
        "TypeEngine.compare_values": {
            "name": "compare_values",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "TypeEngine.get_dbapi_type": {
            "name": "get_dbapi_type",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "dbapi": []
            }
        },
        "TypeEngine.python_type": {
            "name": "python_type",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TypeEngine.with_variant": {
            "name": "with_variant",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "type_": [],
                "dialect_name": []
            }
        },
        "TypeEngine.dialect_impl": {
            "name": "dialect_impl",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": []
            }
        },
        "TypeEngine.adapt": {
            "name": "adapt",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "cls": []
            }
        },
        "TypeEngine.coerce_compared_value": {
            "name": "coerce_compared_value",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "op": [],
                "value": []
            }
        },
        "TypeEngine.compile": {
            "name": "compile",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": []
            }
        },
        "UserDefinedType.coerce_compared_value": {
            "name": "coerce_compared_value",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "op": [],
                "value": []
            }
        },
        "Emulated.adapt_to_emulated": {
            "name": "adapt_to_emulated",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "impltype": []
            }
        },
        "Emulated.adapt": {
            "name": "adapt",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "cls": []
            }
        },
        "NativeForEmulated.adapt_emulated_to_native": {
            "name": "adapt_emulated_to_native",
            "location": 76,
            "return": [],
            "arguments": {
                "cls": [],
                "impl": []
            }
        },
        "TypeDecorator.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TypeDecorator.comparator_factory": {
            "name": "comparator_factory",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TypeDecorator.type_engine": {
            "name": "type_engine",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": []
            }
        },
        "TypeDecorator.load_dialect_impl": {
            "name": "load_dialect_impl",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": []
            }
        },
        "TypeDecorator.__getattr__": {
            "name": "__getattr__",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "TypeDecorator.process_literal_param": {
            "name": "process_literal_param",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "dialect": []
            }
        },
        "TypeDecorator.process_bind_param": {
            "name": "process_bind_param",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "dialect": []
            }
        },
        "TypeDecorator.process_result_value": {
            "name": "process_result_value",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "dialect": []
            }
        },
        "TypeDecorator.literal_processor": {
            "name": "literal_processor",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": []
            }
        },
        "TypeDecorator.bind_processor": {
            "name": "bind_processor",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": []
            }
        },
        "TypeDecorator.result_processor": {
            "name": "result_processor",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": [],
                "coltype": []
            }
        },
        "TypeDecorator.coerce_compared_value": {
            "name": "coerce_compared_value",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "op": [],
                "value": []
            }
        },
        "TypeDecorator.copy": {
            "name": "copy",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TypeDecorator.get_dbapi_type": {
            "name": "get_dbapi_type",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "dbapi": []
            }
        },
        "TypeDecorator.compare_values": {
            "name": "compare_values",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "Variant.__init__": {
            "name": "__init__",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "base": [],
                "mapping": []
            }
        },
        "Variant.coerce_compared_value": {
            "name": "coerce_compared_value",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "operator": [],
                "value": []
            }
        },
        "Variant.load_dialect_impl": {
            "name": "load_dialect_impl",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": []
            }
        },
        "Variant.with_variant": {
            "name": "with_variant",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "type_": [],
                "dialect_name": []
            }
        },
        "Variant.comparator_factory": {
            "name": "comparator_factory",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TypeEngine.Comparator.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "expr": []
            }
        },
        "TypeEngine.Comparator.operate": {
            "name": "operate",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "op": []
            }
        },
        "TypeEngine.Comparator.reverse_operate": {
            "name": "reverse_operate",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "op": [],
                "other": []
            }
        },
        "TypeEngine.Comparator.__reduce__": {
            "name": "__reduce__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TypeDecorator.Comparator.operate": {
            "name": "operate",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "op": []
            }
        },
        "TypeDecorator.Comparator.reverse_operate": {
            "name": "reverse_operate",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "op": [],
                "other": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/sql/util.py": {
        "find_join_source": {
            "name": "find_join_source",
            "location": 6,
            "return": [],
            "arguments": {
                "clauses": [],
                "join_to": []
            }
        },
        "visit_binary_product": {
            "name": "visit_binary_product",
            "location": 7,
            "return": [],
            "arguments": {
                "fn": [],
                "expr": []
            }
        },
        "find_tables": {
            "name": "find_tables",
            "location": 8,
            "return": [],
            "arguments": {
                "clause": [],
                "check_columns": [],
                "include_aliases": [],
                "include_joins": [],
                "include_selects": [],
                "include_crud": []
            }
        },
        "unwrap_order_by": {
            "name": "unwrap_order_by",
            "location": 10,
            "return": [],
            "arguments": {
                "clause": []
            }
        },
        "unwrap_label_reference": {
            "name": "unwrap_label_reference",
            "location": 11,
            "return": [],
            "arguments": {
                "element": []
            }
        },
        "expand_column_list_from_order_by": {
            "name": "expand_column_list_from_order_by",
            "location": 12,
            "return": [],
            "arguments": {
                "collist": [],
                "order_by": []
            }
        },
        "clause_is_present": {
            "name": "clause_is_present",
            "location": 13,
            "return": [],
            "arguments": {
                "clause": [],
                "search": []
            }
        },
        "surface_selectables": {
            "name": "surface_selectables",
            "location": 14,
            "return": [],
            "arguments": {
                "clause": []
            }
        },
        "surface_column_elements": {
            "name": "surface_column_elements",
            "location": 15,
            "return": [],
            "arguments": {
                "clause": []
            }
        },
        "selectables_overlap": {
            "name": "selectables_overlap",
            "location": 16,
            "return": [],
            "arguments": {
                "left": [],
                "right": []
            }
        },
        "bind_values": {
            "name": "bind_values",
            "location": 17,
            "return": [],
            "arguments": {
                "clause": []
            }
        },
        "adapt_criterion_to_null": {
            "name": "adapt_criterion_to_null",
            "location": 19,
            "return": [],
            "arguments": {
                "crit": [],
                "nulls": []
            }
        },
        "splice_joins": {
            "name": "splice_joins",
            "location": 20,
            "return": [],
            "arguments": {
                "left": [],
                "right": [],
                "stop_on": []
            }
        },
        "reduce_columns": {
            "name": "reduce_columns",
            "location": 21,
            "return": [],
            "arguments": {
                "columns": []
            }
        },
        "criterion_as_pairs": {
            "name": "criterion_as_pairs",
            "location": 22,
            "return": [],
            "arguments": {
                "expression": [],
                "consider_as_foreign_keys": [],
                "consider_as_referenced_keys": [],
                "any_operator": []
            }
        },
        "ClauseAdapter.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "selectable": [],
                "equivalents": [],
                "include_fn": [],
                "exclude_fn": [],
                "adapt_on_names": [],
                "anonymize_labels": []
            }
        },
        "ClauseAdapter.replace": {
            "name": "replace",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "col": []
            }
        },
        "ColumnAdapter.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "selectable": [],
                "equivalents": [],
                "chain_to": [],
                "adapt_required": [],
                "include_fn": [],
                "exclude_fn": [],
                "adapt_on_names": [],
                "allow_label_resolve": [],
                "anonymize_labels": []
            }
        },
        "ColumnAdapter.wrap": {
            "name": "wrap",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "adapter": []
            }
        },
        "ColumnAdapter.traverse": {
            "name": "traverse",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/sql/visitors.py": {
        "iterate": {
            "name": "iterate",
            "location": 23,
            "return": [],
            "arguments": {
                "obj": [],
                "opts": []
            }
        },
        "iterate_depthfirst": {
            "name": "iterate_depthfirst",
            "location": 24,
            "return": [],
            "arguments": {
                "obj": [],
                "opts": []
            }
        },
        "traverse_using": {
            "name": "traverse_using",
            "location": 25,
            "return": [],
            "arguments": {
                "iterator": [],
                "obj": [],
                "visitors": []
            }
        },
        "traverse": {
            "name": "traverse",
            "location": 26,
            "return": [],
            "arguments": {
                "obj": [],
                "opts": [],
                "visitors": []
            }
        },
        "traverse_depthfirst": {
            "name": "traverse_depthfirst",
            "location": 27,
            "return": [],
            "arguments": {
                "obj": [],
                "opts": [],
                "visitors": []
            }
        },
        "cloned_traverse": {
            "name": "cloned_traverse",
            "location": 28,
            "return": [],
            "arguments": {
                "obj": [],
                "opts": [],
                "visitors": []
            }
        },
        "replacement_traverse": {
            "name": "replacement_traverse",
            "location": 29,
            "return": [],
            "arguments": {
                "obj": [],
                "opts": [],
                "replace": []
            }
        },
        "VisitableType.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [],
            "arguments": {
                "cls": [],
                "clsname": [],
                "bases": [],
                "clsdict": []
            }
        },
        "ClauseVisitor.traverse_single": {
            "name": "traverse_single",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "ClauseVisitor.iterate": {
            "name": "iterate",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "ClauseVisitor.traverse": {
            "name": "traverse",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "ClauseVisitor.chain": {
            "name": "chain",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "visitor": []
            }
        },
        "CloningVisitor.copy_and_process": {
            "name": "copy_and_process",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "list_": []
            }
        },
        "CloningVisitor.traverse": {
            "name": "traverse",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "ReplacingCloningVisitor.replace": {
            "name": "replace",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "elem": []
            }
        },
        "ReplacingCloningVisitor.traverse": {
            "name": "traverse",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/sql/__init__.py": {},
    "sqlalchemy-stubs-master/sqlalchemy-stubs/util/compat.py": {
        "inspect_getargspec": {
            "name": "inspect_getargspec",
            "location": 42,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "u": {
            "name": "u",
            "location": 51,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "ue": {
            "name": "ue",
            "location": 52,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "b": {
            "name": "b",
            "location": 53,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "cmp": {
            "name": "cmp",
            "location": 57,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "b64encode": {
            "name": "b64encode",
            "location": 65,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "b64decode": {
            "name": "b64decode",
            "location": 66,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "reraise": {
            "name": "reraise",
            "location": 71,
            "return": [],
            "arguments": {
                "tp": [],
                "value": [],
                "tb": [],
                "cause": []
            }
        },
        "raise_from_cause": {
            "name": "raise_from_cause",
            "location": 72,
            "return": [],
            "arguments": {
                "exception": [],
                "exc_info": []
            }
        },
        "with_metaclass": {
            "name": "with_metaclass",
            "location": 76,
            "return": [],
            "arguments": {
                "meta": []
            }
        },
        "nested": {
            "name": "nested",
            "location": 77,
            "return": [],
            "arguments": {}
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/util/deprecations.py": {
        "warn_deprecated": {
            "name": "warn_deprecated",
            "location": 3,
            "return": [],
            "arguments": {
                "msg": [],
                "stacklevel": []
            }
        },
        "warn_pending_deprecation": {
            "name": "warn_pending_deprecation",
            "location": 4,
            "return": [],
            "arguments": {
                "msg": [],
                "stacklevel": []
            }
        },
        "deprecated": {
            "name": "deprecated",
            "location": 5,
            "return": [],
            "arguments": {
                "version": [],
                "message": [],
                "add_deprecation_to_docstring": []
            }
        },
        "pending_deprecation": {
            "name": "pending_deprecation",
            "location": 6,
            "return": [],
            "arguments": {
                "version": [],
                "message": [],
                "add_deprecation_to_docstring": []
            }
        },
        "inject_docstring_text": {
            "name": "inject_docstring_text",
            "location": 7,
            "return": [],
            "arguments": {
                "doctext": [],
                "injecttext": [],
                "pos": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/util/langhelpers.py": {
        "md5_hex": {
            "name": "md5_hex",
            "location": 3,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "decode_slice": {
            "name": "decode_slice",
            "location": 9,
            "return": [],
            "arguments": {
                "slc": []
            }
        },
        "map_bits": {
            "name": "map_bits",
            "location": 10,
            "return": [],
            "arguments": {
                "fn": [],
                "n": []
            }
        },
        "decorator": {
            "name": "decorator",
            "location": 11,
            "return": [],
            "arguments": {
                "target": []
            }
        },
        "public_factory": {
            "name": "public_factory",
            "location": 12,
            "return": [],
            "arguments": {
                "target": [],
                "location": []
            }
        },
        "get_cls_kwargs": {
            "name": "get_cls_kwargs",
            "location": 22,
            "return": [],
            "arguments": {
                "cls": [],
                "_set": []
            }
        },
        "inspect_func_args": {
            "name": "inspect_func_args",
            "location": 23,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "get_func_kwargs": {
            "name": "get_func_kwargs",
            "location": 24,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "get_callable_argspec": {
            "name": "get_callable_argspec",
            "location": 25,
            "return": [],
            "arguments": {
                "fn": [],
                "no_self": [],
                "_is_init": []
            }
        },
        "format_argspec_plus": {
            "name": "format_argspec_plus",
            "location": 26,
            "return": [],
            "arguments": {
                "fn": [],
                "grouped": []
            }
        },
        "format_argspec_init": {
            "name": "format_argspec_init",
            "location": 27,
            "return": [],
            "arguments": {
                "method": [],
                "grouped": []
            }
        },
        "getargspec_init": {
            "name": "getargspec_init",
            "location": 28,
            "return": [],
            "arguments": {
                "method": []
            }
        },
        "unbound_method_to_callable": {
            "name": "unbound_method_to_callable",
            "location": 29,
            "return": [],
            "arguments": {
                "func_or_cls": []
            }
        },
        "generic_repr": {
            "name": "generic_repr",
            "location": 30,
            "return": [],
            "arguments": {
                "obj": [],
                "additional_kw": [],
                "to_inspect": [],
                "omit_kwarg": []
            }
        },
        "class_hierarchy": {
            "name": "class_hierarchy",
            "location": 38,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "iterate_attributes": {
            "name": "iterate_attributes",
            "location": 39,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "monkeypatch_proxied_specials": {
            "name": "monkeypatch_proxied_specials",
            "location": 40,
            "return": [],
            "arguments": {
                "into_cls": [],
                "from_cls": [],
                "skip": [],
                "only": [],
                "name": [],
                "from_instance": []
            }
        },
        "methods_equivalent": {
            "name": "methods_equivalent",
            "location": 42,
            "return": [],
            "arguments": {
                "meth1": [],
                "meth2": []
            }
        },
        "as_interface": {
            "name": "as_interface",
            "location": 43,
            "return": [],
            "arguments": {
                "obj": [],
                "cls": [],
                "methods": [],
                "required": []
            }
        },
        "memoized_instancemethod": {
            "name": "memoized_instancemethod",
            "location": 54,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "dependency_for": {
            "name": "dependency_for",
            "location": 66,
            "return": [],
            "arguments": {
                "modulename": []
            }
        },
        "asbool": {
            "name": "asbool",
            "location": 75,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "bool_or_str": {
            "name": "bool_or_str",
            "location": 76,
            "return": [],
            "arguments": {}
        },
        "asint": {
            "name": "asint",
            "location": 77,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "coerce_kw_type": {
            "name": "coerce_kw_type",
            "location": 78,
            "return": [],
            "arguments": {
                "kw": [],
                "key": [],
                "type_": [],
                "flexi_bool": []
            }
        },
        "constructor_copy": {
            "name": "constructor_copy",
            "location": 79,
            "return": [],
            "arguments": {
                "obj": [],
                "cls": []
            }
        },
        "counter": {
            "name": "counter",
            "location": 80,
            "return": [],
            "arguments": {}
        },
        "duck_type_collection": {
            "name": "duck_type_collection",
            "location": 81,
            "return": [],
            "arguments": {
                "specimen": [],
                "default": []
            }
        },
        "assert_arg_type": {
            "name": "assert_arg_type",
            "location": 82,
            "return": [],
            "arguments": {
                "arg": [],
                "argtype": [],
                "name": []
            }
        },
        "dictlike_iteritems": {
            "name": "dictlike_iteritems",
            "location": 83,
            "return": [],
            "arguments": {
                "dictlike": []
            }
        },
        "set_creation_order": {
            "name": "set_creation_order",
            "location": 104,
            "return": [],
            "arguments": {
                "instance": []
            }
        },
        "warn_exception": {
            "name": "warn_exception",
            "location": 105,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "ellipses_string": {
            "name": "ellipses_string",
            "location": 106,
            "return": [],
            "arguments": {
                "value": [],
                "len_": []
            }
        },
        "warn": {
            "name": "warn",
            "location": 108,
            "return": [],
            "arguments": {
                "msg": []
            }
        },
        "warn_limited": {
            "name": "warn_limited",
            "location": 109,
            "return": [],
            "arguments": {
                "msg": [],
                "args": []
            }
        },
        "only_once": {
            "name": "only_once",
            "location": 110,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "chop_traceback": {
            "name": "chop_traceback",
            "location": 111,
            "return": [],
            "arguments": {
                "tb": [],
                "exclude_prefix": [],
                "exclude_suffix": []
            }
        },
        "attrsetter": {
            "name": "attrsetter",
            "location": 115,
            "return": [],
            "arguments": {
                "attrname": []
            }
        },
        "wrap_callable": {
            "name": "wrap_callable",
            "location": 120,
            "return": [],
            "arguments": {
                "wrapper": [],
                "fn": []
            }
        },
        "safe_reraise.__enter__": {
            "name": "__enter__",
            "location": 6,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "safe_reraise.__exit__": {
            "name": "__exit__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "type_": [],
                "value": [],
                "traceback": []
            }
        },
        "PluginLoader.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "group": [],
                "auto_fn": []
            }
        },
        "PluginLoader.load": {
            "name": "load",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "PluginLoader.register": {
            "name": "register",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "modulepath": [],
                "objname": []
            }
        },
        "portable_instancemethod.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "meth": []
            }
        },
        "portable_instancemethod.__call__": {
            "name": "__call__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "memoized_property.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "fget": [],
                "doc": []
            }
        },
        "memoized_property.__get__": {
            "name": "__get__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [],
                "cls": []
            }
        },
        "memoized_property.reset": {
            "name": "reset",
            "location": 52,
            "return": [],
            "arguments": {
                "cls": [],
                "obj": [],
                "name": []
            }
        },
        "group_expirable_memoized_property.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "attributes": []
            }
        },
        "group_expirable_memoized_property.expire_instance": {
            "name": "expire_instance",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "instance": []
            }
        },
        "group_expirable_memoized_property.__call__": {
            "name": "__call__",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "fn": []
            }
        },
        "group_expirable_memoized_property.method": {
            "name": "method",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "fn": []
            }
        },
        "MemoizedSlots.__getattr__": {
            "name": "__getattr__",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "dependencies.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "dependencies.__call__": {
            "name": "__call__",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "fn": []
            }
        },
        "dependencies.resolve_all": {
            "name": "resolve_all",
            "location": 73,
            "return": [],
            "arguments": {
                "cls": [],
                "path": []
            }
        },
        "classproperty.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "fget": []
            }
        },
        "classproperty.__get__": {
            "name": "__get__",
            "location": 88,
            "return": [],
            "arguments": {
                "desc": [],
                "self": [],
                "cls": []
            }
        },
        "hybridproperty.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "hybridproperty.__get__": {
            "name": "__get__",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "owner": []
            }
        },
        "hybridmethod.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "hybridmethod.__get__": {
            "name": "__get__",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "owner": []
            }
        },
        "symbol.__new__": {
            "name": "__new__",
            "location": 102,
            "return": [],
            "arguments": {
                "cls": [],
                "name": [],
                "doc": [],
                "canonical": []
            }
        },
        "EnsureKWArgType.__init__": {
            "name": "__init__",
            "location": 118,
            "return": [],
            "arguments": {
                "cls": [],
                "clsname": [],
                "bases": [],
                "clsdict": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/util/queue.py": {
        "Queue.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "maxsize": []
            }
        },
        "Queue.qsize": {
            "name": "qsize",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Queue.empty": {
            "name": "empty",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Queue.full": {
            "name": "full",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Queue.put": {
            "name": "put",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "item": [],
                "block": [],
                "timeout": []
            }
        },
        "Queue.put_nowait": {
            "name": "put_nowait",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "Queue.get": {
            "name": "get",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "block": [],
                "timeout": []
            }
        },
        "Queue.get_nowait": {
            "name": "get_nowait",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/util/topological.py": {
        "sort_as_subsets": {
            "name": "sort_as_subsets",
            "location": 1,
            "return": [],
            "arguments": {
                "tuples": [],
                "allitems": [],
                "deterministic_order": []
            }
        },
        "sort": {
            "name": "sort",
            "location": 2,
            "return": [],
            "arguments": {
                "tuples": [],
                "allitems": [],
                "deterministic_order": []
            }
        },
        "find_cycles": {
            "name": "find_cycles",
            "location": 3,
            "return": [],
            "arguments": {
                "tuples": [],
                "allitems": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/util/_collections.py": {
        "unique_list": {
            "name": "unique_list",
            "location": 202,
            "return": [],
            "arguments": {
                "seq": [],
                "hashfunc": []
            }
        },
        "coerce_generator_arg": {
            "name": "coerce_generator_arg",
            "location": 210,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "to_list": {
            "name": "to_list",
            "location": 211,
            "return": [],
            "arguments": {
                "x": [],
                "default": []
            }
        },
        "has_intersection": {
            "name": "has_intersection",
            "location": 212,
            "return": [],
            "arguments": {
                "set_": [],
                "iterable": []
            }
        },
        "to_set": {
            "name": "to_set",
            "location": 213,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "to_column_set": {
            "name": "to_column_set",
            "location": 214,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "update_copy": {
            "name": "update_copy",
            "location": 215,
            "return": [],
            "arguments": {
                "d": [],
                "_new": []
            }
        },
        "flatten_iterator": {
            "name": "flatten_iterator",
            "location": 216,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "lightweight_named_tuple": {
            "name": "lightweight_named_tuple",
            "location": 228,
            "return": [],
            "arguments": {
                "name": [],
                "fields": []
            }
        },
        "AbstractKeyedTuple.keys": {
            "name": "keys",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KeyedTuple.__new__": {
            "name": "__new__",
            "location": 19,
            "return": [],
            "arguments": {
                "cls": [],
                "vals": [],
                "labels": []
            }
        },
        "KeyedTuple.__setattr__": {
            "name": "__setattr__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "immutabledict.__new__": {
            "name": "__new__",
            "location": 30,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "immutabledict.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "iterable": []
            }
        },
        "immutabledict.__reduce__": {
            "name": "__reduce__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "immutabledict.union": {
            "name": "union",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "d": []
            }
        },
        "Properties.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Properties.__len__": {
            "name": "__len__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Properties.__iter__": {
            "name": "__iter__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Properties.__add__": {
            "name": "__add__",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Properties.__setitem__": {
            "name": "__setitem__",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "object": []
            }
        },
        "Properties.__getitem__": {
            "name": "__getitem__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Properties.__delitem__": {
            "name": "__delitem__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Properties.__setattr__": {
            "name": "__setattr__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "obj": []
            }
        },
        "Properties.__getattr__": {
            "name": "__getattr__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Properties.__contains__": {
            "name": "__contains__",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Properties.as_immutable": {
            "name": "as_immutable",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Properties.update": {
            "name": "update",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Properties.get": {
            "name": "get",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "k": [],
                "default": []
            }
        },
        "Properties.keys": {
            "name": "keys",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Properties.values": {
            "name": "values",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Properties.items": {
            "name": "items",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Properties.has_key": {
            "name": "has_key",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Properties.clear": {
            "name": "clear",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OrderedProperties.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OrderedDict.__reduce__": {
            "name": "__reduce__",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OrderedDict.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "____sequence": []
            }
        },
        "OrderedDict.clear": {
            "name": "clear",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OrderedDict.copy": {
            "name": "copy",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OrderedDict.__copy__": {
            "name": "__copy__",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OrderedDict.update": {
            "name": "update",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OrderedDict.setdefault": {
            "name": "setdefault",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "OrderedDict.__iter__": {
            "name": "__iter__",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OrderedDict.keys": {
            "name": "keys",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OrderedDict.values": {
            "name": "values",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OrderedDict.items": {
            "name": "items",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OrderedDict.__setitem__": {
            "name": "__setitem__",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "object": []
            }
        },
        "OrderedDict.__delitem__": {
            "name": "__delitem__",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "OrderedDict.pop": {
            "name": "pop",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "OrderedDict.popitem": {
            "name": "popitem",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OrderedSet.__init__": {
            "name": "__init__",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "d": []
            }
        },
        "OrderedSet.add": {
            "name": "add",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "element": []
            }
        },
        "OrderedSet.remove": {
            "name": "remove",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "element": []
            }
        },
        "OrderedSet.insert": {
            "name": "insert",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "pos": [],
                "element": []
            }
        },
        "OrderedSet.discard": {
            "name": "discard",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "element": []
            }
        },
        "OrderedSet.clear": {
            "name": "clear",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OrderedSet.__getitem__": {
            "name": "__getitem__",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "OrderedSet.__iter__": {
            "name": "__iter__",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OrderedSet.__add__": {
            "name": "__add__",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "OrderedSet.update": {
            "name": "update",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "iterable": []
            }
        },
        "OrderedSet.__ior__": {
            "name": "__ior__",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "iterable": []
            }
        },
        "OrderedSet.union": {
            "name": "union",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "OrderedSet.__or__": {
            "name": "__or__",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "OrderedSet.intersection": {
            "name": "intersection",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "OrderedSet.__and__": {
            "name": "__and__",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "OrderedSet.symmetric_difference": {
            "name": "symmetric_difference",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "OrderedSet.__xor__": {
            "name": "__xor__",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "OrderedSet.difference": {
            "name": "difference",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "OrderedSet.__sub__": {
            "name": "__sub__",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "OrderedSet.intersection_update": {
            "name": "intersection_update",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "OrderedSet.__iand__": {
            "name": "__iand__",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "OrderedSet.symmetric_difference_update": {
            "name": "symmetric_difference_update",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "OrderedSet.__ixor__": {
            "name": "__ixor__",
            "location": 139,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "OrderedSet.difference_update": {
            "name": "difference_update",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "OrderedSet.__isub__": {
            "name": "__isub__",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "IdentitySet.__init__": {
            "name": "__init__",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "iterable": []
            }
        },
        "IdentitySet.add": {
            "name": "add",
            "location": 145,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "IdentitySet.__contains__": {
            "name": "__contains__",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "IdentitySet.remove": {
            "name": "remove",
            "location": 147,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "IdentitySet.discard": {
            "name": "discard",
            "location": 148,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "IdentitySet.pop": {
            "name": "pop",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IdentitySet.clear": {
            "name": "clear",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IdentitySet.__cmp__": {
            "name": "__cmp__",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "IdentitySet.__eq__": {
            "name": "__eq__",
            "location": 152,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "IdentitySet.__ne__": {
            "name": "__ne__",
            "location": 153,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "IdentitySet.issubset": {
            "name": "issubset",
            "location": 154,
            "return": [],
            "arguments": {
                "self": [],
                "iterable": []
            }
        },
        "IdentitySet.__le__": {
            "name": "__le__",
            "location": 155,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "IdentitySet.__lt__": {
            "name": "__lt__",
            "location": 156,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "IdentitySet.issuperset": {
            "name": "issuperset",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "iterable": []
            }
        },
        "IdentitySet.__ge__": {
            "name": "__ge__",
            "location": 158,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "IdentitySet.__gt__": {
            "name": "__gt__",
            "location": 159,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "IdentitySet.union": {
            "name": "union",
            "location": 160,
            "return": [],
            "arguments": {
                "self": [],
                "iterable": []
            }
        },
        "IdentitySet.__or__": {
            "name": "__or__",
            "location": 161,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "IdentitySet.update": {
            "name": "update",
            "location": 162,
            "return": [],
            "arguments": {
                "self": [],
                "iterable": []
            }
        },
        "IdentitySet.__ior__": {
            "name": "__ior__",
            "location": 163,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "IdentitySet.difference": {
            "name": "difference",
            "location": 164,
            "return": [],
            "arguments": {
                "self": [],
                "iterable": []
            }
        },
        "IdentitySet.__sub__": {
            "name": "__sub__",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "IdentitySet.difference_update": {
            "name": "difference_update",
            "location": 166,
            "return": [],
            "arguments": {
                "self": [],
                "iterable": []
            }
        },
        "IdentitySet.__isub__": {
            "name": "__isub__",
            "location": 167,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "IdentitySet.intersection": {
            "name": "intersection",
            "location": 168,
            "return": [],
            "arguments": {
                "self": [],
                "iterable": []
            }
        },
        "IdentitySet.__and__": {
            "name": "__and__",
            "location": 169,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "IdentitySet.intersection_update": {
            "name": "intersection_update",
            "location": 170,
            "return": [],
            "arguments": {
                "self": [],
                "iterable": []
            }
        },
        "IdentitySet.__iand__": {
            "name": "__iand__",
            "location": 171,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "IdentitySet.symmetric_difference": {
            "name": "symmetric_difference",
            "location": 172,
            "return": [],
            "arguments": {
                "self": [],
                "iterable": []
            }
        },
        "IdentitySet.__xor__": {
            "name": "__xor__",
            "location": 173,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "IdentitySet.symmetric_difference_update": {
            "name": "symmetric_difference_update",
            "location": 174,
            "return": [],
            "arguments": {
                "self": [],
                "iterable": []
            }
        },
        "IdentitySet.__ixor__": {
            "name": "__ixor__",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "IdentitySet.copy": {
            "name": "copy",
            "location": 176,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IdentitySet.__len__": {
            "name": "__len__",
            "location": 178,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IdentitySet.__iter__": {
            "name": "__iter__",
            "location": 179,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IdentitySet.__hash__": {
            "name": "__hash__",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WeakSequence.__init__": {
            "name": "__init__",
            "location": 183,
            "return": [],
            "arguments": {
                "self": [],
                "__elements": []
            }
        },
        "WeakSequence.append": {
            "name": "append",
            "location": 184,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "WeakSequence.__len__": {
            "name": "__len__",
            "location": 185,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WeakSequence.__iter__": {
            "name": "__iter__",
            "location": 186,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WeakSequence.__getitem__": {
            "name": "__getitem__",
            "location": 187,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "OrderedIdentitySet.__init__": {
            "name": "__init__",
            "location": 190,
            "return": [],
            "arguments": {
                "self": [],
                "iterable": []
            }
        },
        "PopulateDict.__init__": {
            "name": "__init__",
            "location": 194,
            "return": [],
            "arguments": {
                "self": [],
                "creator": []
            }
        },
        "PopulateDict.__missing__": {
            "name": "__missing__",
            "location": 195,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "UniqueAppender.__init__": {
            "name": "__init__",
            "location": 206,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "via": []
            }
        },
        "UniqueAppender.append": {
            "name": "append",
            "location": 207,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "UniqueAppender.__iter__": {
            "name": "__iter__",
            "location": 208,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LRUCache.__init__": {
            "name": "__init__",
            "location": 221,
            "return": [],
            "arguments": {
                "self": [],
                "capacity": [],
                "threshold": []
            }
        },
        "LRUCache.get": {
            "name": "get",
            "location": 222,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "default": []
            }
        },
        "LRUCache.__getitem__": {
            "name": "__getitem__",
            "location": 223,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "LRUCache.values": {
            "name": "values",
            "location": 224,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LRUCache.setdefault": {
            "name": "setdefault",
            "location": 225,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "LRUCache.__setitem__": {
            "name": "__setitem__",
            "location": 226,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "ScopedRegistry.__init__": {
            "name": "__init__",
            "location": 234,
            "return": [],
            "arguments": {
                "self": [],
                "createfunc": [],
                "scopefunc": []
            }
        },
        "ScopedRegistry.__call__": {
            "name": "__call__",
            "location": 235,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScopedRegistry.has": {
            "name": "has",
            "location": 236,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScopedRegistry.set": {
            "name": "set",
            "location": 237,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "ScopedRegistry.clear": {
            "name": "clear",
            "location": 238,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ThreadLocalRegistry.__init__": {
            "name": "__init__",
            "location": 243,
            "return": [],
            "arguments": {
                "self": [],
                "createfunc": []
            }
        },
        "ThreadLocalRegistry.__call__": {
            "name": "__call__",
            "location": 244,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ThreadLocalRegistry.has": {
            "name": "has",
            "location": 245,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ThreadLocalRegistry.set": {
            "name": "set",
            "location": 246,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "ThreadLocalRegistry.clear": {
            "name": "clear",
            "location": 247,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OrderedDict.sort": {
            "name": "sort",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OrderedDict.itervalues": {
            "name": "itervalues",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OrderedDict.iterkeys": {
            "name": "iterkeys",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OrderedDict.iteritems": {
            "name": "iteritems",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sqlalchemy-stubs-master/sqlalchemy-stubs/util/__init__.py": {},
    "sqlalchemy-stubs-master/test/testsql.py": {
        "SQLDataSuite.run_case": {
            "name": "run_case",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "testcase": [
                    "Iterable['cirq.Qid']",
                    "typing.Iterable['cirq.Qid']"
                ]
            }
        }
    },
    "sqlalchemy-stubs-master/test/__init__.py": {}
}
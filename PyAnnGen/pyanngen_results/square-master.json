{
    "square-master/runme.py": {},
    "square-master/examples/as_library.py": {
        "main": {
            "name": "main",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "square-master/square/cfgfile.py": {
        "valid": {
            "name": "valid",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "filters": [
                    "List[str]",
                    "Union[List,Dict]",
                    "List",
                    "Callable[...,Coroutine[Any,Any,Any]]",
                    "Dict"
                ]
            }
        },
        "merge": {
            "name": "merge",
            "location": 53,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "src": [
                    "str",
                    "List"
                ],
                "dst": [
                    "str",
                    "List"
                ]
            }
        },
        "load": {
            "name": "load",
            "location": 92,
            "return": [
                "Tuple[(square.dtypes.Config, bool)]"
            ],
            "arguments": {
                "fname": [
                    "str",
                    "Dict"
                ]
            }
        },
        "merge.find_dict": {
            "name": "find_dict",
            "location": 58,
            "return": [
                "str",
                "int",
                "float",
                "bool"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "Tuple[Literal, Literal]"
                ],
                "key": [
                    "dict",
                    "Tuple[Literal, Literal]"
                ]
            }
        },
        "merge._update": {
            "name": "_update",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "src": [
                    "str",
                    "bytes",
                    "Union[int, slice]",
                    "int"
                ],
                "dst": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "square-master/square/dotdict.py": {
        "make": {
            "name": "make",
            "location": 38,
            "return": [
                "Union[(DotDict, list, _T0)]"
            ],
            "arguments": {
                "data": [
                    "Dict",
                    "Dict[AbstractSet,set[Any]]",
                    "Dict[str,Any]",
                    "Dict[AbstractSet[str],Set[Any]]",
                    "List[List[Any]]",
                    "Union[None,Dict[str,Any],List[Any]]",
                    "List"
                ]
            }
        },
        "undo": {
            "name": "undo",
            "location": 57,
            "return": [
                "Union[(dict, list, _T0)]"
            ],
            "arguments": {
                "data": [
                    "Dict",
                    "Dict[AbstractSet,set[Any]]",
                    "Dict[str,Any]",
                    "Dict[AbstractSet[str],Set[Any]]",
                    "Union[None,Dict[str,Any],List[Any]]",
                    "List[List[Any]]"
                ]
            }
        },
        "DotDict.__getattr__": {
            "name": "__getattr__",
            "location": 25,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "bytes",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "DotDict.__deepcopy__": {
            "name": "__deepcopy__",
            "location": 28,
            "return": [
                "DotDict"
            ],
            "arguments": {
                "self": [
                    "_TDotDict@@DotDict@@"
                ]
            }
        },
        "DotDict.__copy__": {
            "name": "__copy__",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "square-master/square/dtypes.py": {
        "_factory": {
            "name": "_factory",
            "location": 159,
            "return": [
                "list",
                "int",
                "List[Dict[str, Any]]",
                "Callable",
                "Tuple[str, str]"
            ],
            "arguments": {
                "ret": [
                    "int",
                    "Dict",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        }
    },
    "square-master/square/k8s.py": {
        "load_kubeconfig": {
            "name": "load_kubeconfig",
            "location": 32,
            "return": [
                "Tuple[(Any, dict, dict, bool)]"
            ],
            "arguments": {
                "fname": [
                    "str",
                    "Optional[float]",
                    "Dict[str,pathlib.Path]",
                    "Dict[str,object]"
                ],
                "context": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Callable[str,None]",
                    "Callable[[str],None]",
                    "Callable"
                ]
            }
        },
        "load_incluster_config": {
            "name": "load_incluster_config",
            "location": 93,
            "return": [
                "Tuple[(Any, bool)]"
            ],
            "arguments": {
                "fname_token": [
                    "square.dtypes.Filepath",
                    "pathlib.Path",
                    "Union[pathlib.Path, str]",
                    "str"
                ],
                "fname_cert": [
                    "square.dtypes.Filepath",
                    "pathlib.Path",
                    "Union[pathlib.Path, str]",
                    "str"
                ]
            }
        },
        "load_gke_config": {
            "name": "load_gke_config",
            "location": 135,
            "return": [
                "Tuple[(Any, bool)]"
            ],
            "arguments": {
                "fname": [
                    "square.dtypes.Filepath",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "context": [
                    "square.dtypes.Filepath",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "disable_warnings": [
                    "bool",
                    "str",
                    "int",
                    "Dict[str,Any]"
                ]
            }
        },
        "load_eks_config": {
            "name": "load_eks_config",
            "location": 198,
            "return": [
                "Tuple[(Any, bool)]"
            ],
            "arguments": {
                "fname": [
                    "str",
                    "square.dtypes.Filepath",
                    "None",
                    "Optional[str]",
                    "pathlib.Path"
                ],
                "context": [
                    "str",
                    "square.dtypes.Filepath",
                    "None",
                    "Optional[str]",
                    "pathlib.Path"
                ],
                "disable_warnings": [
                    "bool",
                    "Dict[str,Any]",
                    "str"
                ]
            }
        },
        "load_minikube_config": {
            "name": "load_minikube_config",
            "location": 287,
            "return": [
                "Tuple[(Any, bool)]"
            ],
            "arguments": {
                "fname": [
                    "square.dtypes.Filepath",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "context": [
                    "square.dtypes.Filepath",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "load_kind_config": {
            "name": "load_kind_config",
            "location": 331,
            "return": [
                "Tuple[(Any, bool)]"
            ],
            "arguments": {
                "fname": [
                    "square.dtypes.Filepath",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "context": [
                    "square.dtypes.Filepath",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "load_auto_config": {
            "name": "load_auto_config",
            "location": 387,
            "return": [
                "Tuple[(Any, bool)]"
            ],
            "arguments": {
                "fname": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "square.dtypes.Filepath",
                    "Dict",
                    "Optional[dict]",
                    "pathlib.Path"
                ],
                "context": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "square.dtypes.Filepath",
                    "Dict",
                    "Optional[dict]",
                    "pathlib.Path"
                ],
                "disable_warnings": [
                    "bool",
                    "Optional[str]",
                    "square.dtypes.Filepath",
                    "Optional[dict]"
                ]
            }
        },
        "session": {
            "name": "session",
            "location": 440,
            "return": [
                "requests.sessions.Session"
            ],
            "arguments": {
                "k8sconfig": [
                    "int",
                    "square.dtypes.K8sConfig",
                    "Dict[str,Any]",
                    "None",
                    "str",
                    "Optional[ModelOrDc]"
                ]
            }
        },
        "resource": {
            "name": "resource",
            "location": 460,
            "return": [
                "Tuple[(Any, bool)]"
            ],
            "arguments": {
                "k8sconfig": [
                    "List",
                    "float",
                    "int"
                ],
                "meta": [
                    "str",
                    "bool"
                ]
            }
        },
        "request": {
            "name": "request",
            "location": 543,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "client": [
                    "bool",
                    "bytes",
                    "int",
                    "str",
                    "Optional[str]",
                    "None",
                    "Iterable[Tuple[str,int]]",
                    "Iterable[tuple[Union[str,int]]]"
                ],
                "method": [
                    "str",
                    "None",
                    "Optional[str]",
                    "logging.Logger"
                ],
                "url": [
                    "str",
                    "None",
                    "Optional[str]",
                    "logging.Logger"
                ],
                "payload": [
                    "Optional[dict]",
                    "Dict",
                    "str",
                    "Dict[str,str]",
                    "bool",
                    "None"
                ],
                "headers": [
                    "Optional[dict]",
                    "Dict",
                    "str",
                    "Dict[str,str]",
                    "bool",
                    "None"
                ]
            }
        },
        "delete": {
            "name": "delete",
            "location": 621,
            "return": [
                "Tuple[(Any, bool)]"
            ],
            "arguments": {
                "client": [
                    "Dict",
                    "str"
                ],
                "url": [
                    "str",
                    "Dict"
                ],
                "payload": [
                    "Dict",
                    "str"
                ]
            }
        },
        "get": {
            "name": "get",
            "location": 630,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "client": [
                    "str",
                    "Dict",
                    "Mapping[str,str]",
                    "Mapping"
                ],
                "url": [
                    "str",
                    "Dict"
                ]
            }
        },
        "patch": {
            "name": "patch",
            "location": 639,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "client": [
                    "Dict",
                    "str"
                ],
                "url": [
                    "str",
                    "Dict"
                ],
                "payload": [
                    "Dict",
                    "str"
                ]
            }
        },
        "post": {
            "name": "post",
            "location": 649,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "client": [
                    "Dict",
                    "str",
                    "bytes"
                ],
                "url": [
                    "str",
                    "Dict"
                ],
                "payload": [
                    "Dict",
                    "str",
                    "bytes"
                ]
            }
        },
        "version": {
            "name": "version",
            "location": 658,
            "return": [
                "Tuple[(Any, bool)]"
            ],
            "arguments": {
                "k8sconfig": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "type",
                    "dict"
                ]
            }
        },
        "cluster_config": {
            "name": "cluster_config",
            "location": 694,
            "return": [
                "Tuple[(Any, bool)]"
            ],
            "arguments": {
                "kubeconfig": [
                    "Optional[str]",
                    "bool",
                    "square.dtypes.Filepath"
                ],
                "context": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Dict[str,str]",
                    "None",
                    "square.dtypes.Filepath"
                ]
            }
        },
        "parse_api_group": {
            "name": "parse_api_group",
            "location": 741,
            "return": [
                "Tuple[(list, dict)]"
            ],
            "arguments": {
                "api_version": [
                    "str",
                    "Pattern",
                    "Pattern[bytes]"
                ],
                "url": [
                    "str",
                    "Pattern",
                    "Pattern[bytes]"
                ],
                "resp": [
                    "str",
                    "List[dict]",
                    "bool",
                    "Optional[int]",
                    "Container[Taxon]",
                    "Type[T]",
                    "List[Dict]"
                ]
            }
        },
        "compile_api_endpoints": {
            "name": "compile_api_endpoints",
            "location": 797,
            "return": [
                "bool"
            ],
            "arguments": {
                "k8sconfig": [
                    "str",
                    "square.dtypes.K8sConfig",
                    "float",
                    "Any",
                    "Dict",
                    "Optional[Any]",
                    "None"
                ]
            }
        },
        "request.on_backoff": {
            "name": "on_backoff",
            "location": 569,
            "return": [
                "None"
            ],
            "arguments": {
                "details": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "request._call": {
            "name": "_call",
            "location": 591,
            "return": [
                "Callable",
                "BaseException"
            ],
            "arguments": {}
        },
        "parse_api_group.valid": {
            "name": "valid",
            "location": 755,
            "return": [
                "bool"
            ],
            "arguments": {
                "_res": [
                    "str",
                    "Type[T]",
                    "List[str]",
                    "Optional[List[Any]]"
                ]
            }
        }
    },
    "square-master/square/main.py": {
        "parse_commandline_args": {
            "name": "parse_commandline_args",
            "location": 17,
            "return": [
                "argparse.Namespace"
            ],
            "arguments": {}
        },
        "user_confirmed": {
            "name": "user_confirmed",
            "location": 138,
            "return": [
                "bool"
            ],
            "arguments": {
                "answer": [
                    "bool"
                ]
            }
        },
        "compile_config": {
            "name": "compile_config",
            "location": 157,
            "return": [
                "Tuple[(square.dtypes.Config, bool)]"
            ],
            "arguments": {
                "cmdline_param": [
                    "int",
                    "str",
                    "bytes",
                    "List[int]"
                ]
            }
        },
        "apply_plan": {
            "name": "apply_plan",
            "location": 304,
            "return": [
                "bool"
            ],
            "arguments": {
                "cfg": [
                    "int",
                    "float",
                    "str"
                ],
                "confirm_string": [
                    "float",
                    "str",
                    "List[List[str]]"
                ]
            }
        },
        "expand_all_kinds": {
            "name": "expand_all_kinds",
            "location": 346,
            "return": [
                "Tuple[(_T0, bool)]"
            ],
            "arguments": {
                "cfg": [
                    "dict",
                    "str",
                    "square.dtypes.Filepath"
                ]
            }
        },
        "show_info": {
            "name": "show_info",
            "location": 369,
            "return": [
                "bool"
            ],
            "arguments": {
                "cfg": [
                    "int",
                    "str",
                    "List[List[str]]",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 382,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "parse_commandline_args._validate_label": {
            "name": "_validate_label",
            "location": 19,
            "return": [
                "int",
                "bool",
                "str",
                "Iterable[str]",
                "List[List[str]]"
            ],
            "arguments": {
                "label": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "square-master/square/manio.py": {
        "make_meta": {
            "name": "make_meta",
            "location": 42,
            "return": [
                "MetaManifest",
                "str",
                "int",
                "pathlib.Path",
                "float"
            ],
            "arguments": {
                "manifest": [
                    "bytes",
                    "List[dict]",
                    "Dict",
                    "Dict[str,Any]",
                    "bool"
                ]
            }
        },
        "select": {
            "name": "select",
            "location": 66,
            "return": [
                "bool"
            ],
            "arguments": {
                "manifest": [
                    "Dict",
                    "Dict[str,Any]",
                    "Mapping[str,Any]"
                ],
                "selectors": [
                    "str",
                    "Exception"
                ]
            }
        },
        "unpack_list": {
            "name": "unpack_list",
            "location": 143,
            "return": [
                "Tuple[(dict, bool)]"
            ],
            "arguments": {
                "manifest_list": [
                    "list",
                    "dict",
                    "Dict[str, str]",
                    "str"
                ],
                "selectors": [
                    "Iterable[str]",
                    "str",
                    "int",
                    "List[str]",
                    "List[int]"
                ]
            }
        },
        "_parse_worker": {
            "name": "_parse_worker",
            "location": 196,
            "return": [
                "Tuple[(list, bool)]"
            ],
            "arguments": {
                "fname": [
                    "Callable",
                    "int",
                    "bool",
                    "logging.Logger"
                ],
                "yaml_str": [
                    "str",
                    "bool",
                    "Dict[str,str]"
                ]
            }
        },
        "parse": {
            "name": "parse",
            "location": 214,
            "return": [
                "Tuple[(Dict[(nothing, List[Tuple[(Any, nothing)]])], bool)]"
            ],
            "arguments": {
                "file_yaml": [
                    "str",
                    "pathlib.Path",
                    "Callable[[str], str]"
                ],
                "selectors": [
                    "str",
                    "Tuple[int]",
                    "Dict[str,str]",
                    "Tuple[float,float,float,float]",
                    "Tuple[Union[float,float,float,float]]"
                ]
            }
        },
        "unpack": {
            "name": "unpack",
            "location": 273,
            "return": [
                "Tuple[(dict, bool)]"
            ],
            "arguments": {
                "manifests": [
                    "bytes",
                    "List[list[int]]",
                    "int",
                    "Dict",
                    "str",
                    "Dict[str,Any]",
                    "Set[str]",
                    "List[List[int]]"
                ]
            }
        },
        "sync": {
            "name": "sync",
            "location": 317,
            "return": [
                "Tuple[(Dict[(Any, List[Tuple[(Any, Any)]])], bool)]"
            ],
            "arguments": {
                "local_manifests": [
                    "Optional[List[str]]",
                    "dict",
                    "Dict[str, Any]"
                ],
                "server_manifests": [
                    "int",
                    "Dict[str,str]"
                ],
                "selectors": [
                    "List",
                    "str",
                    "float",
                    "Dict[str,float]",
                    "Mapping[str,Any]",
                    "Mapping"
                ],
                "groupby": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "filename_for_manifest": {
            "name": "filename_for_manifest",
            "location": 399,
            "return": [
                "Tuple[(pathlib.Path, bool)]"
            ],
            "arguments": {
                "meta": [
                    "Dict",
                    "List[str]",
                    "str",
                    "int",
                    "T",
                    "None",
                    "Optional[str]"
                ],
                "manifest": [
                    "str",
                    "Dict[str,bool]",
                    "int",
                    "Dict"
                ],
                "grouping": [
                    "str"
                ]
            }
        },
        "diff": {
            "name": "diff",
            "location": 454,
            "return": [
                "Tuple[(str, bool)]"
            ],
            "arguments": {
                "config": [
                    "str",
                    "List",
                    "square.dtypes.Config"
                ],
                "k8sconfig": [
                    "str",
                    "List",
                    "square.dtypes.Config"
                ],
                "local": [
                    "Dict",
                    "Dict[str,Any]",
                    "str",
                    "Tuple[List,List,List]",
                    "Tuple[Union[list,list,list]]"
                ],
                "server": [
                    "Dict",
                    "Dict[str,Any]",
                    "str",
                    "Tuple[List,List,List]",
                    "Tuple[Union[list,list,list]]"
                ]
            }
        },
        "strip": {
            "name": "strip",
            "location": 487,
            "return": [
                "Tuple[(Union[(list, square.dotdict.DotDict, Dict[(nothing, nothing)], _T1)], Any, bool)]"
            ],
            "arguments": {
                "k8sconfig": [
                    "bool",
                    "str"
                ],
                "manifest": [
                    "str",
                    "Dict",
                    "int",
                    "Dict[str,Any]"
                ],
                "manifest_filters": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "align_serviceaccount": {
            "name": "align_serviceaccount",
            "location": 587,
            "return": [
                "Tuple[(_T0, bool)]"
            ],
            "arguments": {
                "local_manifests": [
                    "int",
                    "Dict",
                    "Optional[bool]",
                    "None"
                ],
                "server_manifests": [
                    "T",
                    "Set[int]",
                    "Set[str]",
                    "Callable"
                ]
            }
        },
        "save_files": {
            "name": "save_files",
            "location": 709,
            "return": [
                "bool"
            ],
            "arguments": {
                "folder": [
                    "pathlib.Path"
                ],
                "file_data": [
                    "Dict[str,Any]",
                    "Dict",
                    "str",
                    "int",
                    "Optional[Dict[str,Any]]",
                    "Iterable[str]",
                    "bytes"
                ]
            }
        },
        "load_files": {
            "name": "load_files",
            "location": 758,
            "return": [
                "Tuple[(Dict[(Any, str)], bool)]"
            ],
            "arguments": {
                "folder": [
                    "pathlib.Path"
                ],
                "fnames": [
                    "List[str]",
                    "bool",
                    "Tuple[Union[str,str]]",
                    "Tuple[tuple[Union[str,str]]]",
                    "Tuple[str,str]",
                    "Collection[str]",
                    "Tuple[Tuple[str,str]]"
                ]
            }
        },
        "load": {
            "name": "load",
            "location": 801,
            "return": [
                "Tuple[(Any, Any, bool)]"
            ],
            "arguments": {
                "folder": [
                    "int",
                    "str",
                    "pathlib.Path",
                    "Union[pathlib.Path,str]",
                    "square.dtypes.Filepath",
                    "Union[str,pathlib.Path]"
                ],
                "selectors": [
                    "str",
                    "List[str]",
                    "BinaryIO",
                    "bool",
                    "pathlib.Path"
                ]
            }
        },
        "sort_manifests": {
            "name": "sort_manifests",
            "location": 849,
            "return": [
                "Tuple[(Dict[(Any, list)], bool)]"
            ],
            "arguments": {
                "file_manifests": [
                    "Dict[str,str]",
                    "Dict",
                    "bool",
                    "List[str]"
                ],
                "priority": [
                    "str",
                    "List[pathlib.Path]",
                    "List[str]",
                    "List",
                    "IO[str]",
                    "BinaryIO",
                    "bool"
                ]
            }
        },
        "save": {
            "name": "save",
            "location": 903,
            "return": [
                "bool"
            ],
            "arguments": {
                "folder": [
                    "str",
                    "bool",
                    "IO[Any]",
                    "IO"
                ],
                "manifests": [
                    "int",
                    "str",
                    "Iterable"
                ],
                "priority": [
                    "int",
                    "str",
                    "Iterable"
                ]
            }
        },
        "download": {
            "name": "download",
            "location": 952,
            "return": [
                "Tuple[(dict, bool)]"
            ],
            "arguments": {
                "config": [
                    "Dict[str,Any]",
                    "Dict"
                ],
                "k8sconfig": [
                    "Dict",
                    "square.dtypes.K8sConfig",
                    "logging.Logger"
                ]
            }
        },
        "download_single": {
            "name": "download_single",
            "location": 1023,
            "return": [
                "Tuple[(Any, Any, bool)]"
            ],
            "arguments": {
                "k8sconfig": [
                    "str"
                ],
                "resource": [
                    "str",
                    "int"
                ]
            }
        },
        "strip._update": {
            "name": "_update",
            "location": 518,
            "return": [
                "Dict",
                "Dict[int,Dict[int,Any]]",
                "Dict[str,str]",
                "Dict[str,int]"
            ],
            "arguments": {
                "filters": [],
                "manifest": [
                    "str"
                ]
            }
        },
        "align_serviceaccount._get_token": {
            "name": "_get_token",
            "location": 621,
            "return": [
                "Tuple[Union[None,list,bool]]",
                "Optional[str]",
                "Tuple[Optional[bool]]",
                "Optional[List[str]]",
                "Tuple[Union[list[dict[Text,]],bool]]",
                "Dict[str,str]",
                "Optional[Dict[str,str]]"
            ],
            "arguments": {
                "meta": [
                    "dict",
                    "Dict[str, str]",
                    "Callable",
                    "str"
                ],
                "manifests": [
                    "str",
                    "Exception",
                    "Sequence",
                    "bool",
                    "List[str]",
                    "List[dict]"
                ]
            }
        }
    },
    "square-master/square/square.py": {
        "translate_resource_kinds": {
            "name": "translate_resource_kinds",
            "location": 28,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cfg": [
                    "bool"
                ],
                "k8sconfig": [
                    "Dict"
                ]
            }
        },
        "make_patch": {
            "name": "make_patch",
            "location": 55,
            "return": [
                "Tuple[(Any, bool)]"
            ],
            "arguments": {
                "config": [
                    "str",
                    "List",
                    "square.dtypes.Config"
                ],
                "k8sconfig": [
                    "square.dtypes.K8sConfig"
                ],
                "local": [
                    "Dict",
                    "int",
                    "Mapping",
                    "IO",
                    "config.Config",
                    "IO[str]"
                ],
                "server": [
                    "Dict",
                    "Dict[str,Any]",
                    "str",
                    "Tuple[List,List,List]",
                    "Tuple[Union[list,list,list]]"
                ]
            }
        },
        "partition_manifests": {
            "name": "partition_manifests",
            "location": 108,
            "return": [
                "Tuple[(Any, bool)]"
            ],
            "arguments": {
                "local": [
                    "List[Tuple[int, int, str]]",
                    "int"
                ],
                "server": [
                    "Dict[str,float]",
                    "Set[str]",
                    "Union[tuple,list]"
                ]
            }
        },
        "match_api_version": {
            "name": "match_api_version",
            "location": 151,
            "return": [
                "Tuple[(_T2, bool)]"
            ],
            "arguments": {
                "k8sconfig": [
                    "Type",
                    "Dict[str,int]",
                    "square.dtypes.K8sConfig",
                    "T"
                ],
                "local": [
                    "str"
                ],
                "server": [
                    "str",
                    "List[str]",
                    "Dict"
                ]
            }
        },
        "run_user_callback": {
            "name": "run_user_callback",
            "location": 225,
            "return": [
                "bool"
            ],
            "arguments": {
                "config": [
                    "Optional[Iterable[str]]",
                    "Iterable[str]",
                    "str",
                    "None",
                    "Dict[str,str]"
                ],
                "plan_patch": [
                    "Dict[str,Any]",
                    "bool",
                    "Config",
                    "core.Config",
                    "revlibs.connections.config.Config"
                ],
                "local": [
                    "str",
                    "Optional[Iterable[str]]",
                    "sphinx.config.Config",
                    "Dict",
                    "Dict[str,str]"
                ],
                "server": [
                    "str",
                    "Optional[Iterable[str]]",
                    "sphinx.config.Config",
                    "Dict",
                    "Dict[str,str]"
                ]
            }
        },
        "compile_plan": {
            "name": "compile_plan",
            "location": 271,
            "return": [
                "Tuple[(Any, bool)]"
            ],
            "arguments": {
                "config": [
                    "Dict",
                    "square.dtypes.Config",
                    "str",
                    "None",
                    "Optional[models.LTI1p3Provider]"
                ],
                "k8sconfig": [
                    "float",
                    "Callable[...,None]",
                    "square.dtypes.K8sConfig",
                    "square.dtypes.ServerManifests"
                ],
                "local": [
                    "square.dtypes.ServerManifests",
                    "square.dtypes.K8sConfig",
                    "float",
                    "Callable[..., None]"
                ],
                "server": [
                    "Dict",
                    "square.dtypes.ServerManifests",
                    "Dict[str,str]",
                    "Optional[Dict[str,str]]",
                    "None"
                ]
            }
        },
        "show_plan": {
            "name": "show_plan",
            "location": 402,
            "return": [
                "bool"
            ],
            "arguments": {
                "plan": [
                    "int"
                ]
            }
        },
        "find_namespace_orphans": {
            "name": "find_namespace_orphans",
            "location": 486,
            "return": [
                "Tuple[(set, bool)]"
            ],
            "arguments": {
                "meta_manifests": [
                    "int",
                    "Callable",
                    "float",
                    "Iterator[T]"
                ]
            }
        },
        "setup_logging": {
            "name": "setup_logging",
            "location": 522,
            "return": [
                "None"
            ],
            "arguments": {
                "log_level": [
                    "Dict",
                    "Optional[dict]",
                    "int",
                    "None"
                ]
            }
        },
        "sort_plan": {
            "name": "sort_plan",
            "location": 566,
            "return": [
                "Tuple[(Any, bool)]"
            ],
            "arguments": {
                "cfg": [
                    "List[float]",
                    "Tuple",
                    "List[dict]",
                    "int",
                    "Set",
                    "float",
                    "List[Tuple[int,int]]",
                    "List[tuple[Union[int,int]]]"
                ],
                "plan": [
                    "Union[int,float]",
                    "int",
                    "float"
                ]
            }
        },
        "valid_label": {
            "name": "valid_label",
            "location": 626,
            "return": [
                "bool"
            ],
            "arguments": {
                "label": [
                    "str",
                    "bool"
                ]
            }
        },
        "apply_plan": {
            "name": "apply_plan",
            "location": 666,
            "return": [
                "bool"
            ],
            "arguments": {
                "cfg": [
                    "square.dtypes.Config"
                ],
                "plan": [
                    "str",
                    "int"
                ]
            }
        },
        "make_plan": {
            "name": "make_plan",
            "location": 727,
            "return": [
                "Tuple[(Any, bool)]"
            ],
            "arguments": {
                "cfg": [
                    "BaseException",
                    "square.dtypes.Config"
                ]
            }
        },
        "get_resources": {
            "name": "get_resources",
            "location": 769,
            "return": [
                "bool"
            ],
            "arguments": {
                "cfg": [
                    "Callable[dict,None]",
                    "bool",
                    "square.dtypes.Config",
                    "Tuple",
                    "Callable[[dict],None]",
                    "int"
                ]
            }
        }
    },
    "square-master/square/__init__.py": {},
    "square-master/square/__main__.py": {},
    "square-master/tests/conftest.py": {
        "pytest_configure": {
            "name": "pytest_configure",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "kube_creds": {
            "name": "kube_creds",
            "location": 26,
            "return": [
                "Generator[square.dtypes.K8sConfig,None,None]",
                "Generator"
            ],
            "arguments": {
                "request": [
                    "bool",
                    "str",
                    "Counter"
                ],
                "k8sconfig": []
            }
        },
        "k8sconfig": {
            "name": "k8sconfig",
            "location": 33,
            "return": [
                "Generator[square.dtypes.K8sConfig,None,None]",
                "Generator[K8sConfig]"
            ],
            "arguments": {}
        },
        "config": {
            "name": "config",
            "location": 58,
            "return": [
                "Generator[square.dtypes.Config,None,None]",
                "Generator"
            ],
            "arguments": {
                "k8sconfig": [
                    "bool",
                    "List[int]",
                    "Sequence[str]",
                    "List[pathlib.Path]",
                    "List[str]",
                    "str"
                ],
                "tmp_path": [
                    "Optional[pathlib.Path]",
                    "Optional[str]",
                    "pathlib.Path"
                ]
            }
        }
    },
    "square-master/tests/test_cfgfile.py": {
        "TestLoadConfig.test_load": {
            "name": "test_load",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoadConfig.test_load_folder_paths": {
            "name": "test_load_folder_paths",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmp_path": []
            }
        },
        "TestLoadConfig.test_common_filters": {
            "name": "test_common_filters",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "str"
                ]
            }
        },
        "TestLoadConfig.test_load_err": {
            "name": "test_load_err",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmp_path": []
            }
        },
        "TestMainGet.test_sane_filter": {
            "name": "test_sane_filter",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMainGet.test_merge": {
            "name": "test_merge",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "square-master/tests/test_dotdict.py": {
        "TestBasic.test_make": {
            "name": "test_make",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBasic.test_undo": {
            "name": "test_undo",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBasic.test_make_deepcopy": {
            "name": "test_make_deepcopy",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "square-master/tests/test_helpers.py": {
        "kind_available": {
            "name": "kind_available",
            "location": 12,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "k8s_apis": {
            "name": "k8s_apis",
            "location": 27,
            "return": [
                "Dict[(Tuple[(str, str)], Any)]"
            ],
            "arguments": {
                "config": [
                    "Mapping",
                    "square.dtypes.K8sConfig",
                    "Dict[str,Any]",
                    "Dict"
                ]
            }
        },
        "make_manifest": {
            "name": "make_manifest",
            "location": 438,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "kind": [
                    "int",
                    "List",
                    "Optional[int]",
                    "None"
                ],
                "namespace": [
                    "str",
                    "Callable",
                    "Optional[str]",
                    "bool",
                    "None",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]"
                ],
                "name": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "labels": [
                    "Dict",
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "mk_deploy": {
            "name": "mk_deploy",
            "location": 473,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Tuple",
                    "int"
                ],
                "ns": [
                    "Text",
                    "str",
                    "Tuple",
                    "int"
                ]
            }
        }
    },
    "square-master/tests/test_integration.py": {
        "TestBasic.test_cluster_config": {
            "name": "test_cluster_config",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMainGet.setup_method": {
            "name": "setup_method",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMainGet.test_main_get": {
            "name": "test_main_get",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "TestMainGet.test_main_get_single_namespace": {
            "name": "test_main_get_single_namespace",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "List[pathlib.Path]",
                    "pathlib.Path"
                ]
            }
        },
        "TestMainGet.test_main_get_both_namespaces": {
            "name": "test_main_get_both_namespaces",
            "location": 173,
            "return": [],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "List[pathlib.Path]",
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "TestMainGet.test_nonpreferred_api": {
            "name": "test_nonpreferred_api",
            "location": 273,
            "return": [],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "Callable"
                ]
            }
        },
        "TestMainPlan.test_main_plan": {
            "name": "test_main_plan",
            "location": 319,
            "return": [],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path"
                ]
            }
        },
        "TestMainPlan.test_workflow": {
            "name": "test_workflow",
            "location": 332,
            "return": [],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "Callable",
                    "dict"
                ]
            }
        },
        "TestMainPlan.test_nondefault_resources": {
            "name": "test_nondefault_resources",
            "location": 422,
            "return": [],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "Callable"
                ]
            }
        },
        "TestMainGet.test_main_get_both_namespaces.load_manifests": {
            "name": "load_manifests",
            "location": 179,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path",
                    "str"
                ]
            }
        }
    },
    "square-master/tests/test_k8s.py": {
        "m_requests": {
            "name": "m_requests",
            "location": 22,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "request": [
                    "Dict"
                ]
            }
        },
        "nosleep": {
            "name": "nosleep",
            "location": 28,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "TestK8sDeleteGetPatchPost.test_session": {
            "name": "test_session",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k8sconfig": [
                    "str"
                ]
            }
        },
        "TestK8sDeleteGetPatchPost.test_request_ok": {
            "name": "test_request_ok",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "Dict",
                    "requests_mock.response._Context"
                ],
                "m_requests": [
                    "str",
                    "Optional[str]",
                    "Dict",
                    "bool",
                    "None",
                    "Dict[str,Any]",
                    "int"
                ]
            }
        },
        "TestK8sDeleteGetPatchPost.test_request_err_json": {
            "name": "test_request_err_json",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "Mapping[str,str]",
                    "Mapping"
                ],
                "m_requests": [
                    "str",
                    "Callable",
                    "dict"
                ]
            }
        },
        "TestK8sDeleteGetPatchPost.test_request_connection_err": {
            "name": "test_request_connection_err",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "Dict"
                ],
                "m_requests": [
                    "str",
                    "int",
                    "bytes"
                ],
                "nosleep": [
                    "Literal",
                    "bool"
                ]
            }
        },
        "TestK8sDeleteGetPatchPost.test_request_retries": {
            "name": "test_request_retries",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nosleep": [
                    "str",
                    "bool"
                ],
                "method": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "TestK8sDeleteGetPatchPost.test_request_invalid": {
            "name": "test_request_invalid",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nosleep": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "method": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "TestK8sDeleteGetPatchPost.test_delete_get_patch_post_ok": {
            "name": "test_delete_get_patch_post_ok",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m_req": [
                    "requests_mock.Mocker"
                ]
            }
        },
        "TestK8sDeleteGetPatchPost.test_delete_get_patch_post_err": {
            "name": "test_delete_get_patch_post_err",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m_req": [
                    "requests_mock.Mocker"
                ]
            }
        },
        "TestK8sVersion.test_version_auto_ok": {
            "name": "test_version_auto_ok",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m_get": [
                    "bool",
                    "Dict[str,Any]"
                ],
                "k8sconfig": [
                    "str"
                ]
            }
        },
        "TestK8sVersion.test_version_auto_err": {
            "name": "test_version_auto_err",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m_get": [],
                "k8sconfig": []
            }
        },
        "TestUrlPathBuilder.k8sconfig": {
            "name": "k8sconfig",
            "location": 302,
            "return": [
                "Dict",
                "str",
                "Optional[int]",
                "Optional[List[Callable]]"
            ],
            "arguments": {
                "self": [],
                "integrationtest": [
                    "Dict"
                ],
                "ref_config": [
                    "Dict"
                ]
            }
        },
        "TestUrlPathBuilder.test_resource_service": {
            "name": "test_resource_service",
            "location": 324,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "integrationtest": [
                    "bool",
                    "str"
                ],
                "k8sconfig": [
                    "nucypher.types.Period.Delta",
                    "nucypher.types.NuNits",
                    "slice"
                ]
            }
        },
        "TestUrlPathBuilder.test_resource_statefulset": {
            "name": "test_resource_statefulset",
            "location": 374,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "integrationtest": [
                    "bool",
                    "str",
                    "int"
                ],
                "k8sconfig": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "TestUrlPathBuilder.test_resource_namespace": {
            "name": "test_resource_namespace",
            "location": 442,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "integrationtest": [
                    "bool",
                    "str",
                    "int"
                ],
                "k8sconfig": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "TestUrlPathBuilder.test_resource_clusterrole": {
            "name": "test_resource_clusterrole",
            "location": 485,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "integrationtest": [
                    "bool",
                    "str",
                    "int"
                ],
                "k8sconfig": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "TestUrlPathBuilder.test_resource_err": {
            "name": "test_resource_err",
            "location": 538,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "integrationtest": [
                    "bool",
                    "str",
                    "int"
                ],
                "k8sconfig": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "TestUrlPathBuilder.test_compile_api_endpoints": {
            "name": "test_compile_api_endpoints",
            "location": 557,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m_get": [
                    "str",
                    "Callable"
                ],
                "k8sconfig": [
                    "Set",
                    "types.ExistentialTyVar"
                ]
            }
        },
        "TestUrlPathBuilder.test_compile_api_endpoints_resource_kinds": {
            "name": "test_compile_api_endpoints_resource_kinds",
            "location": 592,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "integrationtest": [
                    "bool",
                    "List[str]"
                ],
                "k8sconfig": [
                    "bool",
                    "List[str]"
                ]
            }
        },
        "TestUrlPathBuilder.test_compile_api_endpoints_err": {
            "name": "test_compile_api_endpoints_err",
            "location": 611,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m_get": [
                    "str",
                    "Dict[str,Any]",
                    "bytes"
                ],
                "k8sconfig": [
                    "Callable[[List,bool],None]",
                    "Callable[L,None]",
                    "Optional[Callable]",
                    "None"
                ]
            }
        },
        "TestUrlPathBuilder.test_compile_api_endpoints_integrated": {
            "name": "test_compile_api_endpoints_integrated",
            "location": 637,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "integrationtest": [
                    "bool",
                    "List[str]"
                ],
                "k8sconfig": [
                    "bool",
                    "List[str]"
                ]
            }
        },
        "TestK8sKubeconfig.test_incluster": {
            "name": "test_incluster",
            "location": 744,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m_getenv": [],
                "tmp_path": [
                    "pathlib.Path",
                    "Callable"
                ]
            }
        },
        "TestK8sKubeconfig.test_cluster_config": {
            "name": "test_cluster_config",
            "location": 775,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m_compile_endpoints": [
                    "int",
                    "Dict[str,Any]",
                    "bool"
                ],
                "m_version": [
                    "int",
                    "Dict[str,Any]",
                    "bool"
                ],
                "m_load_auto": [
                    "int",
                    "bool"
                ],
                "k8sconfig": [
                    "int",
                    "List[tuple[Union[str,Any]]]",
                    "bool",
                    "List[Tuple[str,Any]]",
                    "random.Random"
                ]
            }
        },
        "TestK8sKubeconfig.test_load_auto_config": {
            "name": "test_load_auto_config",
            "location": 790,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m_gke": [],
                "m_eks": [],
                "m_kind": [],
                "m_mini": [],
                "m_incluster": [
                    "pathlib.Path"
                ]
            }
        },
        "TestK8sKubeconfig.test_load_minikube_config_ok": {
            "name": "test_load_minikube_config_ok",
            "location": 829,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestK8sKubeconfig.test_load_kind_config_ok": {
            "name": "test_load_kind_config_ok",
            "location": 856,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestK8sKubeconfig.test_load_kind_config_invalid_context_err": {
            "name": "test_load_kind_config_invalid_context_err",
            "location": 883,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "TestK8sKubeconfig.test_load_gke_config_ok": {
            "name": "test_load_gke_config_ok",
            "location": 899,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m_google": []
            }
        },
        "TestK8sKubeconfig.test_load_eks_config_ok": {
            "name": "test_load_eks_config_ok",
            "location": 939,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m_run": []
            }
        },
        "TestK8sKubeconfig.test_load_eks_config_err": {
            "name": "test_load_eks_config_err",
            "location": 985,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m_run": [
                    "IO",
                    "pathlib.Path",
                    "taskiinfrastructure.data.json.repositories.project_repository.JsonProjectRepository",
                    "IO[str]"
                ]
            }
        },
        "TestK8sKubeconfig.test_wrong_conf": {
            "name": "test_wrong_conf",
            "location": 1013,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestK8sDeleteGetPatchPost.test_request_ok.additional_matcher": {
            "name": "additional_matcher",
            "location": 64,
            "return": [
                "bool"
            ],
            "arguments": {
                "req": [
                    "str",
                    "Tuple[str, int]",
                    "float",
                    "bool",
                    "Mapping[str, Any]"
                ]
            }
        },
        "TestUrlPathBuilder.test_compile_api_endpoints.supply_fake_api": {
            "name": "supply_fake_api",
            "location": 568,
            "return": [
                "Tuple[bool]",
                "bool",
                "str"
            ],
            "arguments": {
                "_": [
                    "Dict[str, Union[str, int]]",
                    "str",
                    "Optional[str]"
                ],
                "url": [
                    "str",
                    "Optional[str]",
                    "routemaster_sdk.types.LabelRef",
                    "dict"
                ]
            }
        }
    },
    "square-master/tests/test_main.py": {
        "fname_param_config": {
            "name": "fname_param_config",
            "location": 30,
            "return": [
                "Generator[Tuple[square.dtypes.Filepath,types.SimpleNamespace,square.dtypes.Config],None,None]",
                "Generator[tuple[int]]"
            ],
            "arguments": {
                "tmp_path": [
                    "bool",
                    "str",
                    "pathlib.Path",
                    "Union[pathlib.Path,str]"
                ]
            }
        },
        "TestResourceCleanup.test_expand_all_kinds": {
            "name": "test_expand_all_kinds",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m_cluster": [
                    "List[str]",
                    "Dict"
                ],
                "k8sconfig": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "TestResourceCleanup.test_expand_all_kinds_err_config": {
            "name": "test_expand_all_kinds_err_config",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k8sconfig": [
                    "str",
                    "int",
                    "List[bool]",
                    "Literal"
                ]
            }
        },
        "TestMain.test_boostrap": {
            "name": "test_boostrap",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMain.test_compile_config_basic": {
            "name": "test_compile_config_basic",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fname_param_config": [
                    "bool",
                    "int"
                ]
            }
        },
        "TestMain.test_compile_config_kinds": {
            "name": "test_compile_config_kinds",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fname_param_config": [
                    "bool",
                    "int"
                ]
            }
        },
        "TestMain.test_compile_config_kinds_merge_file": {
            "name": "test_compile_config_kinds_merge_file",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "str",
                    "int"
                ],
                "tmp_path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "TestMain.test_compile_config_default_folder": {
            "name": "test_compile_config_default_folder",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fname_param_config": [
                    "str"
                ]
            }
        },
        "TestMain.test_compile_config_dot_square": {
            "name": "test_compile_config_dot_square",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fname_param_config": [
                    "Dict[str,Dict[str,Any]]",
                    "Dict[scripts.node_integration_tests.playbooks.test_config_base.NodeId,pathlib.Path]",
                    "Dict[str,dict[str,Any]]",
                    "BaseException",
                    "int",
                    "str"
                ]
            }
        },
        "TestMain.test_compile_config_kubeconfig": {
            "name": "test_compile_config_kubeconfig",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fname_param_config": [
                    "str",
                    "bool",
                    "Optional[Callable[[Any],None]]",
                    "Callable[Any,None]",
                    "None"
                ],
                "tmp_path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "TestMain.test_compile_config_kinds_clear_existing": {
            "name": "test_compile_config_kinds_clear_existing",
            "location": 460,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fname_param_config": [
                    "str",
                    "int",
                    "pathlib.Path",
                    "bool"
                ],
                "tmp_path": [
                    "str",
                    "bool",
                    "Optional[Callable[[Any],None]]",
                    "Callable[Any,None]",
                    "None"
                ]
            }
        },
        "TestMain.test_compile_config_missing_config_file": {
            "name": "test_compile_config_missing_config_file",
            "location": 495,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fname_param_config": [
                    "str",
                    "bool",
                    "Dict[str,dict[str,Any]]",
                    "Dict[str,Dict[str,Any]]",
                    "int"
                ]
            }
        },
        "TestMain.test_compile_config_missing_k8s_credentials": {
            "name": "test_compile_config_missing_k8s_credentials",
            "location": 502,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fname_param_config": [
                    "Dict[str,Dict[str,Any]]",
                    "Dict[str,dict[str,Any]]"
                ]
            }
        },
        "TestMain.test_compile_hierarchy_ok": {
            "name": "test_compile_hierarchy_ok",
            "location": 516,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fname_param_config": [
                    "Dict[str,Dict[str,Any]]",
                    "Dict[str,dict[str,Any]]"
                ]
            }
        },
        "TestMain.test_main_valid_options": {
            "name": "test_main_valid_options",
            "location": 568,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m_cluster": [
                    "Dict",
                    "List[str]",
                    "Optional[Game]",
                    "None"
                ],
                "m_apply": [],
                "m_plan": [],
                "m_get": [],
                "tmp_path": [
                    "int",
                    "str"
                ],
                "fname_param_config": [
                    "pathlib.Path"
                ],
                "k8sconfig": [
                    "Dict",
                    "List[str]",
                    "Optional[Game]",
                    "None"
                ]
            }
        },
        "TestMain.test_main_version": {
            "name": "test_main_version",
            "location": 636,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMain.test_main_invalid_option": {
            "name": "test_main_invalid_option",
            "location": 642,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m_k8s": [
                    "Exception",
                    "Callable[,None]",
                    "bool",
                    "Callable[...,None]",
                    "int"
                ]
            }
        },
        "TestMain.test_main_nonzero_exit_on_error": {
            "name": "test_main_nonzero_exit_on_error",
            "location": 664,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m_apply": [
                    "Optional[List[Any]]",
                    "Dict[str,Any]",
                    "List[Any]",
                    "None"
                ],
                "m_plan": [
                    "Optional[List[Any]]",
                    "Dict[str,Any]",
                    "List[Any]",
                    "None"
                ],
                "m_get": [
                    "Optional[List[Any]]",
                    "Dict[str,Any]",
                    "List[Any]",
                    "None"
                ],
                "m_k8s": [
                    "Callable[[List,bool],None]",
                    "Callable[L,None]"
                ],
                "k8sconfig": [
                    "Callable",
                    "bool",
                    "Optional[str]",
                    "str",
                    "Callable[[list],None]",
                    "None"
                ]
            }
        },
        "TestMain.test_main_invalid_option_in_main": {
            "name": "test_main_invalid_option_in_main",
            "location": 690,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m_cluster": [
                    "Dict"
                ],
                "m_cmd": [],
                "k8sconfig": [
                    "Dict"
                ],
                "fname_param_config": [
                    "Union[int,float]",
                    "str",
                    "int",
                    "float",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "TestMain.test_main_version_error": {
            "name": "test_main_version_error",
            "location": 714,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m_k8s": []
            }
        },
        "TestMain.test_main_create_default_config_file": {
            "name": "test_main_create_default_config_file",
            "location": 722,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "int",
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "TestMain.test_parse_commandline_args_labels_valid": {
            "name": "test_parse_commandline_args_labels_valid",
            "location": 732,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMain.test_parse_commandline_args_priority": {
            "name": "test_parse_commandline_args_priority",
            "location": 750,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMain.test_parse_commandline_get_grouping": {
            "name": "test_parse_commandline_get_grouping",
            "location": 764,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path"
                ]
            }
        },
        "TestMain.test_parse_commandline_args_labels_invalid": {
            "name": "test_parse_commandline_args_labels_invalid",
            "location": 821,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMain.test_parse_commandline_args_kubeconfig": {
            "name": "test_parse_commandline_args_kubeconfig",
            "location": 832,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMain.test_parse_commandline_args_folder": {
            "name": "test_parse_commandline_args_folder",
            "location": 856,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMain.test_user_confirmed": {
            "name": "test_user_confirmed",
            "location": 863,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApplyPlan.test_apply_plan": {
            "name": "test_apply_plan",
            "location": 887,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m_apply": [
                    "mock.Mock"
                ],
                "m_plan": [],
                "config": []
            }
        },
        "TestMain.test_compile_config_kubeconfig.reset": {
            "name": "reset",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "square-master/tests/test_manio.py": {
        "TestHelpers.test_make_meta": {
            "name": "test_make_meta",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHelpers.test_select": {
            "name": "test_select",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUnpackParse.test_unpack_list_without_selectors_ok": {
            "name": "test_unpack_list_without_selectors_ok",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUnpackParse.test_unpack_list_with_selectors_ok": {
            "name": "test_unpack_list_with_selectors_ok",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUnpackParse.test_unpack_list_invalid_list_manifest": {
            "name": "test_unpack_list_invalid_list_manifest",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestYamlManifestIO.yamlfy": {
            "name": "yamlfy",
            "location": 307,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict",
                    "Dict[str,str]",
                    "Callable",
                    "Union[Dict,None]",
                    "str"
                ]
            }
        },
        "TestYamlManifestIO.test_sort_manifests": {
            "name": "test_sort_manifests",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestYamlManifestIO.test_sort_manifests_priority": {
            "name": "test_sort_manifests_priority",
            "location": 374,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestYamlManifestIO.test_parse_noselector_ok": {
            "name": "test_parse_noselector_ok",
            "location": 472,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestYamlManifestIO.test_parse_with_selector_ok": {
            "name": "test_parse_with_selector_ok",
            "location": 509,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestYamlManifestIO.test_parse_err": {
            "name": "test_parse_err",
            "location": 557,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestYamlManifestIO.test_parse_worker": {
            "name": "test_parse_worker",
            "location": 578,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestYamlManifestIO.test_unpack_ok": {
            "name": "test_unpack_ok",
            "location": 593,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestYamlManifestIO.test_unpack_err": {
            "name": "test_unpack_err",
            "location": 612,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestYamlManifestIO.test_manifest_lifecycle": {
            "name": "test_manifest_lifecycle",
            "location": 629,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k8sconfig": [
                    "bool",
                    "str"
                ],
                "tmp_path": [
                    "bool",
                    "str",
                    "Dict[str,str]"
                ]
            }
        },
        "TestManifestValidation.test_strip_generic": {
            "name": "test_strip_generic",
            "location": 714,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k8sconfig": []
            }
        },
        "TestManifestValidation.test_strip_ambigous_filters": {
            "name": "test_strip_ambigous_filters",
            "location": 810,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k8sconfig": []
            }
        },
        "TestManifestValidation.test_strip_sub_hierarchies": {
            "name": "test_strip_sub_hierarchies",
            "location": 894,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k8sconfig": []
            }
        },
        "TestManifestValidation.test_strip_lists_simple": {
            "name": "test_strip_lists_simple",
            "location": 924,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k8sconfig": [
                    "str",
                    "bool",
                    "List[Dict]",
                    "List",
                    "List[dict]"
                ]
            }
        },
        "TestManifestValidation.test_strip_lists_service": {
            "name": "test_strip_lists_service",
            "location": 945,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k8sconfig": [
                    "str",
                    "bool",
                    "List[Dict]",
                    "List",
                    "List[dict]"
                ]
            }
        },
        "TestManifestValidation.test_strip_default_filters": {
            "name": "test_strip_default_filters",
            "location": 972,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k8sconfig": []
            }
        },
        "TestManifestValidation.test_strip_invalid_version_kind": {
            "name": "test_strip_invalid_version_kind",
            "location": 993,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k8sconfig": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestManifestValidation.test_strip_namespace": {
            "name": "test_strip_namespace",
            "location": 1021,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k8sconfig": [
                    "str",
                    "List"
                ]
            }
        },
        "TestManifestValidation.test_strip_deployment": {
            "name": "test_strip_deployment",
            "location": 1048,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k8sconfig": [
                    "Optional[Mapping]",
                    "bytes",
                    "Mapping",
                    "None"
                ]
            }
        },
        "TestDiff.test_diff_ok": {
            "name": "test_diff_ok",
            "location": 1117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "str",
                    "Dict"
                ],
                "k8sconfig": [
                    "str",
                    "Dict"
                ]
            }
        },
        "TestYamlManifestIOIntegration.test_load_save_files": {
            "name": "test_load_save_files",
            "location": 1141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "str"
                ]
            }
        },
        "TestYamlManifestIOIntegration.test_load_save_files_empty": {
            "name": "test_load_save_files_empty",
            "location": 1161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "str"
                ]
            }
        },
        "TestYamlManifestIOIntegration.test_save_err_permissions": {
            "name": "test_save_err_permissions",
            "location": 1172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmp_path": []
            }
        },
        "TestYamlManifestIOIntegration.test_save_remove_stale_err_permissions": {
            "name": "test_save_remove_stale_err_permissions",
            "location": 1180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "bool",
                    "str"
                ]
            }
        },
        "TestYamlManifestIOIntegration.test_load_save_ok": {
            "name": "test_load_save_ok",
            "location": 1203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "str"
                ]
            }
        },
        "TestYamlManifestIOIntegration.test_load_save_hidden_ok": {
            "name": "test_load_save_hidden_ok",
            "location": 1233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "str"
                ]
            }
        },
        "TestYamlManifestIOIntegration.test_save_delete_stale_yaml": {
            "name": "test_save_delete_stale_yaml",
            "location": 1265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "str"
                ]
            }
        },
        "TestYamlManifestIOIntegration.test_load_err": {
            "name": "test_load_err",
            "location": 1316,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m_load": [
                    "Iterable"
                ],
                "tmp_path": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestYamlManifestIOIntegration.test_save_invalid_manifest": {
            "name": "test_save_invalid_manifest",
            "location": 1323,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "TestSync.test_filename_for_manifest_ok": {
            "name": "test_filename_for_manifest_ok",
            "location": 1341,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSync.test_filename_for_manifest_namespace": {
            "name": "test_filename_for_manifest_namespace",
            "location": 1366,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSync.test_filename_for_manifest_not_namespaced": {
            "name": "test_filename_for_manifest_not_namespaced",
            "location": 1395,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSync.test_filename_for_manifest_valid_but_no_label": {
            "name": "test_filename_for_manifest_valid_but_no_label",
            "location": 1422,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSync.test_filename_for_manifest_err": {
            "name": "test_filename_for_manifest_err",
            "location": 1442,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSync.test_sync_modify_selective_kind_and_namespace_ok": {
            "name": "test_sync_modify_selective_kind_and_namespace_ok",
            "location": 1459,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k8sconfig": [
                    "bool",
                    "int"
                ]
            }
        },
        "TestSync.test_sync_modify_delete_ok": {
            "name": "test_sync_modify_delete_ok",
            "location": 1627,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m_fname": []
            }
        },
        "TestSync.test_sync_catch_all_files": {
            "name": "test_sync_catch_all_files",
            "location": 1689,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSync.test_sync_filename_err": {
            "name": "test_sync_filename_err",
            "location": 1776,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k8sconfig": [
                    "int",
                    "str",
                    "Callable[...,None]",
                    "Literal",
                    "Callable[[int,int],None]"
                ]
            }
        },
        "TestSync.test_service_account_support_file": {
            "name": "test_service_account_support_file",
            "location": 1798,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSync.test_align_serviceaccount": {
            "name": "test_align_serviceaccount",
            "location": 1824,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDownloadManifests.test_download_ok": {
            "name": "test_download_ok",
            "location": 1953,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m_get": [
                    "k8s.clienK8SAPIClient"
                ],
                "config": [
                    "Dict"
                ],
                "k8sconfig": [
                    "str"
                ]
            }
        },
        "TestDownloadManifests.test_download_err": {
            "name": "test_download_err",
            "location": 2057,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m_get": [
                    "k8s.clienK8SAPIClient"
                ],
                "config": [],
                "k8sconfig": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestDownloadManifests.test_download_single": {
            "name": "test_download_single",
            "location": 2086,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m_get": [
                    "str"
                ],
                "k8sconfig": [
                    "str",
                    "float",
                    "bool",
                    "Union[Tuple[int],Tuple[int,int]]",
                    "Tuple[int]"
                ]
            }
        },
        "TestYamlManifestIO.test_sort_manifests.mm": {
            "name": "mm",
            "location": 318,
            "return": [
                "tuple[]"
            ],
            "arguments": {}
        },
        "TestYamlManifestIO.test_sort_manifests_priority.mm": {
            "name": "mm",
            "location": 380,
            "return": [
                "Tuple",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "TestSync.test_sync_modify_selective_kind_and_namespace_ok.modify": {
            "name": "modify",
            "location": 1468,
            "return": [],
            "arguments": {
                "manifest": []
            }
        },
        "TestSync.test_sync_modify_delete_ok.modify": {
            "name": "modify",
            "location": 1636,
            "return": [],
            "arguments": {
                "manifest": []
            }
        },
        "TestSync.test_sync_catch_all_files.modify": {
            "name": "modify",
            "location": 1696,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "manifest": [
                    "int",
                    "Callable[[], 'Actor']",
                    "bool"
                ]
            }
        }
    },
    "square-master/tests/test_square.py": {
        "TestLogging.test_setup_logging": {
            "name": "test_setup_logging",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBasic.test_config_default": {
            "name": "test_config_default",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "Callable"
                ]
            }
        },
        "TestBasic.test_find_namespace_orphans": {
            "name": "test_find_namespace_orphans",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBasic.test_show_plan": {
            "name": "test_show_plan",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBasic.test_translate_resource_kinds": {
            "name": "test_translate_resource_kinds",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k8sconfig": [
                    "int"
                ]
            }
        },
        "TestBasic.test_valid_label": {
            "name": "test_valid_label",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBasic.test_sanity_check_labels": {
            "name": "test_sanity_check_labels",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "TestPartition.test_partition_manifests_patch": {
            "name": "test_partition_manifests_patch",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPartition.test_partition_manifests_add_delete": {
            "name": "test_partition_manifests_add_delete",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPartition.test_partition_manifests_patch_delete": {
            "name": "test_partition_manifests_patch_delete",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPatchK8s.test_make_patch_empty": {
            "name": "test_make_patch_empty",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict",
                    "backup.config.Config"
                ],
                "k8sconfig": [
                    "Dict"
                ]
            }
        },
        "TestPatchK8s.test_make_patch_incompatible": {
            "name": "test_make_patch_incompatible",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict",
                    "backup.config.Config"
                ],
                "k8sconfig": [
                    "Dict",
                    "backup.config.Config"
                ]
            }
        },
        "TestPatchK8s.test_make_patch_special": {
            "name": "test_make_patch_special",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict",
                    "backup.config.Config"
                ],
                "k8sconfig": [
                    "Dict",
                    "Dict[str,Any]",
                    "sphinx.config.Config",
                    "backup.config.Config"
                ]
            }
        },
        "TestPatchK8s.test_make_patch_error_resource": {
            "name": "test_make_patch_error_resource",
            "location": 349,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m_url": [
                    "k8s.clienK8SAPIClient"
                ],
                "config": [
                    "backup.config.Config"
                ],
                "k8sconfig": [
                    "backup.config.Config"
                ]
            }
        },
        "TestMatchApiVersions.test_match_api_version_basic": {
            "name": "test_match_api_version_basic",
            "location": 361,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m_fetch": [
                    "str"
                ],
                "k8sconfig": [
                    "bool"
                ]
            }
        },
        "TestMatchApiVersions.test_match_api_version_namespace": {
            "name": "test_match_api_version_namespace",
            "location": 397,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m_fetch": [],
                "k8sconfig": [
                    "str",
                    "NamedTuple",
                    "Config"
                ]
            }
        },
        "TestMatchApiVersions.test_match_api_version_multi": {
            "name": "test_match_api_version_multi",
            "location": 436,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m_fetch": [],
                "k8sconfig": [
                    "str",
                    "NamedTuple",
                    "Config"
                ]
            }
        },
        "TestMatchApiVersions.test_match_api_version_nothing_to_do": {
            "name": "test_match_api_version_nothing_to_do",
            "location": 479,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m_fetch": [],
                "k8sconfig": [
                    "Dict[str,Any]",
                    "bool"
                ]
            }
        },
        "TestPlan.test_make_patch_ok": {
            "name": "test_make_patch_ok",
            "location": 534,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "str",
                    "List[str]"
                ],
                "k8sconfig": [
                    "Dict",
                    "Callable",
                    "str"
                ]
            }
        },
        "TestPlan.test_make_patch_err": {
            "name": "test_make_patch_err",
            "location": 567,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict",
                    "backup.config.Config"
                ],
                "k8sconfig": [
                    "Dict",
                    "backup.config.Config"
                ]
            }
        },
        "TestPlan.test_sort_plan": {
            "name": "test_sort_plan",
            "location": 585,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "config.Config",
                    "revlibs.connections.config.Config"
                ]
            }
        },
        "TestPlan.test_sort_plan_err": {
            "name": "test_sort_plan_err",
            "location": 668,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict",
                    "str",
                    "sphinx.config.Config",
                    "entity_embeddings.Config"
                ]
            }
        },
        "TestPlan.test_compile_plan_create_delete_ok": {
            "name": "test_compile_plan_create_delete_ok",
            "location": 677,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict",
                    "config.Config"
                ],
                "k8sconfig": [
                    "str"
                ]
            }
        },
        "TestPlan.test_compile_plan_create_delete_err": {
            "name": "test_compile_plan_create_delete_err",
            "location": 735,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m_part": [],
                "config": [
                    "Dict"
                ],
                "k8sconfig": [
                    "Dict"
                ]
            }
        },
        "TestPlan.test_compile_plan_patch_no_diff": {
            "name": "test_compile_plan_patch_no_diff",
            "location": 766,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict"
                ],
                "k8sconfig": [
                    "Dict"
                ]
            }
        },
        "TestPlan.test_compile_plan_invalid_api_version": {
            "name": "test_compile_plan_invalid_api_version",
            "location": 783,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [],
                "k8sconfig": []
            }
        },
        "TestPlan.test_compile_plan_patch_with_diff": {
            "name": "test_compile_plan_patch_with_diff",
            "location": 803,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict",
                    "Dict[str,Any]"
                ],
                "k8sconfig": [
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "TestPlan.test_compile_plan_err": {
            "name": "test_compile_plan_err",
            "location": 840,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m_apply": [
                    "bool",
                    "str"
                ],
                "m_plan": [
                    "neuromation.api.Config"
                ],
                "m_part": [
                    "Dict[str,Any]",
                    "Config",
                    "Dict[str,str]",
                    "None",
                    "Dict",
                    "Optional[Dict[str,Any]]",
                    "str"
                ],
                "config": [
                    "Dict"
                ],
                "k8sconfig": [
                    "Dict"
                ]
            }
        },
        "TestPlan.test_compile_plan_err_strip": {
            "name": "test_compile_plan_err_strip",
            "location": 868,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict"
                ],
                "k8sconfig": [
                    "Dict"
                ]
            }
        },
        "TestPlan.test_run_user_callback": {
            "name": "test_run_user_callback",
            "location": 891,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "config.Config",
                    "conflow.manager.Config"
                ],
                "k8sconfig": []
            }
        },
        "TestPlan.test_compile_plan_patch_user_callback": {
            "name": "test_compile_plan_patch_user_callback",
            "location": 955,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict"
                ],
                "k8sconfig": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "TestMainOptions.test_apply_plan": {
            "name": "test_apply_plan",
            "location": 1012,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m_delete": [],
                "m_apply": [
                    "str",
                    "backup.config.Config"
                ],
                "m_post": [],
                "config": [
                    "str",
                    "Dict",
                    "tbump.config.Config"
                ],
                "kube_creds": [
                    "str"
                ]
            }
        },
        "TestMainOptions.test_make_plan": {
            "name": "test_make_plan",
            "location": 1099,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m_plan": [
                    "str",
                    "Callable",
                    "float"
                ],
                "m_align": [
                    "Dict[str,Any]"
                ],
                "m_down": [
                    "bool",
                    "neuromation.api.Config"
                ],
                "m_load": [
                    "Dict",
                    "None",
                    "Optional[dict]",
                    "neuromation.api.Config",
                    "robotica.types.Config",
                    "config.Config",
                    "settings.Config"
                ],
                "config": [
                    "config.Config"
                ],
                "kube_creds": [
                    "int",
                    "str"
                ]
            }
        },
        "TestMainOptions.test_get_resources": {
            "name": "test_get_resources",
            "location": 1143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m_save": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ],
                "m_sync": [
                    "str"
                ],
                "m_mapi": [
                    "int",
                    "bool",
                    "str"
                ],
                "m_down": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "m_load": [
                    "str",
                    "bool",
                    "Dict[str,str]",
                    "List[str]"
                ],
                "kube_creds": [
                    "str",
                    "bool",
                    "None",
                    "int",
                    "Dict[str,tuple[Union[str,int,int]]]",
                    "Optional[int]",
                    "Dict[str,Tuple[str,int,int]]"
                ],
                "config": [
                    "bool",
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ]
            }
        },
        "TestPlan.test_run_user_callback.get_dummy_manifests": {
            "name": "get_dummy_manifests",
            "location": 904,
            "return": [
                "Tuple[dict]",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "TestPlan.test_run_user_callback.cb1": {
            "name": "cb1",
            "location": 924,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "_cfg": [],
                "_local": [],
                "_server": []
            }
        },
        "TestPlan.test_run_user_callback.cb2": {
            "name": "cb2",
            "location": 936,
            "return": [
                "None"
            ],
            "arguments": {
                "_cfg": [],
                "_local": [],
                "_server": []
            }
        },
        "TestPlan.test_run_user_callback.cb3": {
            "name": "cb3",
            "location": 947,
            "return": [
                "None"
            ],
            "arguments": {
                "_cfg": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "_local": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "_server": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestPlan.test_compile_plan_patch_user_callback.cb1": {
            "name": "cb1",
            "location": 975,
            "return": [
                "Tuple",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "_cfg": [
                    "int",
                    "Callable",
                    "str"
                ],
                "_local": [
                    "int",
                    "Callable",
                    "str"
                ],
                "_server": []
            }
        },
        "TestPlan.test_compile_plan_patch_user_callback.cb2": {
            "name": "cb2",
            "location": 1000,
            "return": [
                "None"
            ],
            "arguments": {
                "_cfg": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "_local": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "_server": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestMainOptions.test_apply_plan.reset_mocks": {
            "name": "reset_mocks",
            "location": 1040,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "square-master/tests/__init__.py": {}
}
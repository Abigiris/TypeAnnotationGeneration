{
    "squid-master/test.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "squid-master/train.py": {
        "initialize_model": {
            "name": "initialize_model",
            "location": 26,
            "return": [
                "Optional[str]",
                "Callable"
            ],
            "arguments": {
                "args": [],
                "train_dataset": [
                    "int",
                    "str"
                ],
                "vectors": [
                    "float",
                    "int",
                    "frozenset",
                    "bool",
                    "FrozenSet[int]"
                ]
            }
        },
        "get_datasets": {
            "name": "get_datasets",
            "location": 76,
            "return": [
                "Tuple[(model.corpus.TrainDataset, model.corpus.EvalDataset, model.wv.WordVectors)]"
            ],
            "arguments": {
                "args": []
            }
        },
        "get_training_config": {
            "name": "get_training_config",
            "location": 102,
            "return": [
                "model.trainer.Trainer.TrainingConfig"
            ],
            "arguments": {
                "args": []
            }
        },
        "main": {
            "name": "main",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "squid-master/model/batcher.py": {
        "get_collator": {
            "name": "get_collator",
            "location": 103,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "max_question_size": [
                    "int",
                    "str",
                    "Optional[int]"
                ],
                "max_context_size": [
                    "int",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "collate_batch": {
            "name": "collate_batch",
            "location": 115,
            "return": [
                "QABatch"
            ],
            "arguments": {
                "batch": [
                    "int",
                    "numpy.ndarray",
                    "Sequence[T]",
                    "torch.utils.data.Dataset"
                ],
                "max_question_size": [
                    "int",
                    "bool",
                    "float",
                    "busboy.model.Stop",
                    "Optional[int]"
                ],
                "max_context_size": [
                    "int",
                    "bool",
                    "float",
                    "busboy.model.Stop",
                    "Optional[int]"
                ]
            }
        },
        "pad_and_sort": {
            "name": "pad_and_sort",
            "location": 213,
            "return": [
                "Tuple[(Any, Any, Any, Any)]"
            ],
            "arguments": {
                "seq": [
                    "list",
                    "int",
                    "torch.Tensor"
                ],
                "max_sequence_size": [
                    "int",
                    "numpy.ndarray",
                    "Optional[float]"
                ]
            }
        },
        "QABatch.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "question_ids": [
                    "int",
                    "str",
                    "bytes"
                ],
                "question_words": [
                    "str",
                    "Sequence",
                    "Tuple[int,int]",
                    "List",
                    "Tuple[Union[int,int]]"
                ],
                "question_chars": [
                    "int",
                    "List[int]",
                    "Dict[int,str]",
                    "List[str]",
                    "Mapping",
                    "numpy.ndarray",
                    "Mapping[str,Any]"
                ],
                "question_lens": [
                    "str",
                    "Sequence",
                    "Tuple[int,int]",
                    "List",
                    "Tuple[Union[int,int]]"
                ],
                "question_len_idxs": [
                    "str",
                    "Sequence",
                    "Tuple[int,int]",
                    "List",
                    "Tuple[Union[int,int]]"
                ],
                "question_orig_idxs": [
                    "str",
                    "Sequence",
                    "Tuple[int,int]",
                    "List",
                    "Tuple[Union[int,int]]"
                ],
                "question_mask": [
                    "str",
                    "Sequence",
                    "Tuple[int,int]",
                    "List",
                    "Tuple[Union[int,int]]"
                ],
                "context_words": [
                    "str",
                    "Sequence",
                    "Tuple[int,int]",
                    "List",
                    "Tuple[Union[int,int]]"
                ],
                "context_chars": [
                    "int",
                    "List[int]",
                    "Dict[int,str]",
                    "List[str]",
                    "Mapping",
                    "numpy.ndarray",
                    "Mapping[str,Any]"
                ],
                "context_lens": [
                    "str",
                    "Sequence",
                    "Tuple[int,int]",
                    "List",
                    "Tuple[Union[int,int]]"
                ],
                "context_len_idxs": [
                    "str",
                    "Sequence",
                    "Tuple[int,int]",
                    "List",
                    "Tuple[Union[int,int]]"
                ],
                "context_orig_idxs": [
                    "str",
                    "Sequence",
                    "Tuple[int,int]",
                    "List",
                    "Tuple[Union[int,int]]"
                ],
                "context_mask": [
                    "str",
                    "Sequence",
                    "Tuple[int,int]",
                    "List",
                    "Tuple[Union[int,int]]"
                ],
                "answer_span_starts": [
                    "int",
                    "List[tuple[Union[int,int]]]",
                    "bytes",
                    "List[Tuple[int,int]]",
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]",
                    "Iterable[str]"
                ],
                "answer_span_ends": [
                    "str",
                    "Sequence",
                    "Tuple[int,int]",
                    "List",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "QABatch.to": {
            "name": "to",
            "location": 76,
            "return": [
                "QABatch"
            ],
            "arguments": {
                "self": [
                    "_TQABatch@@QABatch@@"
                ],
                "device": [
                    "int",
                    "str",
                    "float",
                    "torch.Tensor"
                ]
            }
        },
        "QABatch.__len__": {
            "name": "__len__",
            "location": 99,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "squid-master/model/bidaf_predictor.py": {
        "BidafConfig.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contextual_encoder_config": [
                    "Dict",
                    "List[Any]",
                    "Optional[List[Any]]",
                    "None",
                    "rnn.RNNConfig",
                    "Optional[ConvolutionalEmbeddingConfig]"
                ],
                "modeling_layer_config": [
                    "Dict",
                    "List[Any]",
                    "Optional[List[Any]]",
                    "None",
                    "rnn.RNNConfig",
                    "Optional[ConvolutionalEmbeddingConfig]"
                ],
                "output_config": [
                    "str",
                    "Dict"
                ]
            }
        },
        "BidafConfig.get_default_bidaf_config": {
            "name": "get_default_bidaf_config",
            "location": 45,
            "return": [
                "BidafConfig"
            ],
            "arguments": {
                "cls": [
                    "Type[_TBidafConfig]"
                ]
            }
        },
        "BidafOutput.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "int",
                    "Dict[str,Any]",
                    "bool"
                ],
                "attended_input_size": [
                    "int",
                    "Union[int,Tuple[int,int]]",
                    "Tuple[Union[int,int]]",
                    "List[str]",
                    "float",
                    "Sequence[cirq.Qid]",
                    "Optional[str]",
                    "Optional[int]",
                    "Dict[str,Any]"
                ],
                "modeled_input_size": [
                    "int",
                    "List",
                    "torch.Tensor"
                ]
            }
        },
        "BidafOutput.forward": {
            "name": "forward",
            "location": 83,
            "return": [
                "model.predictor.ModelPredictions"
            ],
            "arguments": {
                "self": [],
                "attended_context": [
                    "bool",
                    "torch.Tensor",
                    "str",
                    "None",
                    "Optional[bool]"
                ],
                "modeled_context": [
                    "str",
                    "torch.Tensor",
                    "Sequence[int]",
                    "bytes",
                    "int",
                    "None",
                    "Optional[bool]"
                ],
                "context_mask": [
                    "bool",
                    "torch.Tensor",
                    "str",
                    "None",
                    "Optional[bool]"
                ],
                "lengths": [
                    "int",
                    "str",
                    "raiden.utils.TokenAmount",
                    "raiden.utils.BlockNumber"
                ],
                "length_idxs": [
                    "int",
                    "str",
                    "raiden.utils.TokenAmount",
                    "raiden.utils.BlockNumber"
                ],
                "orig_idxs": [
                    "int",
                    "str",
                    "raiden.utils.TokenAmount",
                    "raiden.utils.BlockNumber"
                ]
            }
        },
        "BidafPredictor.__init__": {
            "name": "__init__",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "embeddor": [
                    "Dict",
                    "str",
                    "List"
                ],
                "config": [
                    "Dict[str,Any]",
                    "Dict"
                ]
            }
        },
        "BidafPredictor.forward": {
            "name": "forward",
            "location": 143,
            "return": [
                "model.predictor.ModelPredictions"
            ],
            "arguments": {
                "self": [],
                "batch": [
                    "float",
                    "str",
                    "List[int]",
                    "int",
                    "trezor.utils.Writer"
                ]
            }
        }
    },
    "squid-master/model/corpus.py": {
        "Corpus.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context_qas": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Union[int,float]"
                ],
                "token_mapping": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "char_mapping": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "stats": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "source_file": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Optional[dict]",
                    "Dict"
                ]
            }
        },
        "Corpus.from_disk": {
            "name": "from_disk",
            "location": 72,
            "return": [
                "Corpus"
            ],
            "arguments": {
                "cls": [
                    "Type[_TCorpus]"
                ],
                "serialized_file": [
                    "str"
                ]
            }
        },
        "Corpus.from_raw": {
            "name": "from_raw",
            "location": 82,
            "return": [
                "Corpus"
            ],
            "arguments": {
                "cls": [
                    "Type[_TCorpus]"
                ],
                "data_file": [
                    "str",
                    "Tuple[str]",
                    "raiden.utils.Address",
                    "kata.data.repos.HardCoded.ConfigRepo"
                ],
                "tokenizer": [
                    "bool",
                    "str",
                    "Callable[int,None]",
                    "int",
                    "Callable[[int],None]"
                ],
                "processor": [
                    "bool",
                    "str",
                    "Callable[int,None]",
                    "int",
                    "Callable[[int],None]"
                ],
                "word_vectors": [
                    "int",
                    "str",
                    "Callable[...,None]",
                    "bool"
                ],
                "force_single_answer": [
                    "bool",
                    "str",
                    "int",
                    "Callable[[int],None]"
                ],
                "char_mapping": [
                    "Optional[Any]",
                    "None",
                    "Optional[allennlp.data.token_indexers.TokenIndexer]",
                    "Any",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "Corpus.read_context_qas": {
            "name": "read_context_qas",
            "location": 117,
            "return": [
                "List[model.qa.ContextQuestionAnswer]"
            ],
            "arguments": {
                "data_file": [
                    "str",
                    "bytes",
                    "Optional[str]"
                ],
                "tokenizer": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "processor": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "force_single_answer": [
                    "bool",
                    "Sequence[str]",
                    "Optional[str]",
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "Corpus.compute_char_indices": {
            "name": "compute_char_indices",
            "location": 162,
            "return": [
                "Dict[(Any, int)]"
            ],
            "arguments": {
                "context_qas": [
                    "str",
                    "List[dict[str,Any]]",
                    "List[str]",
                    "List[Dict[str,Any]]",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "Corpus.compute_stats": {
            "name": "compute_stats",
            "location": 183,
            "return": [
                "CorpusStats"
            ],
            "arguments": {
                "context_qas": [
                    "str",
                    "int",
                    "list",
                    "float"
                ],
                "token_mapping": [
                    "Dict",
                    "str",
                    "Tuple",
                    "cmk.utils.type_defs.HostName",
                    "List[List[str]]",
                    "Optional[Dict]"
                ],
                "char_mapping": [
                    "Dict",
                    "str",
                    "Tuple",
                    "cmk.utils.type_defs.HostName",
                    "List[List[str]]",
                    "Optional[Dict]"
                ]
            }
        },
        "Corpus.get_single_answer_text": {
            "name": "get_single_answer_text",
            "location": 231,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": [],
                "qid": [
                    "int",
                    "float",
                    "str",
                    "Dict",
                    "Tuple",
                    "bool"
                ],
                "span_start": [
                    "int",
                    "List",
                    "Sequence[str]",
                    "List[str]"
                ],
                "span_end": [
                    "int",
                    "List[int]",
                    "str"
                ]
            }
        },
        "Corpus.get_answer_texts": {
            "name": "get_answer_texts",
            "location": 260,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "answer_token_idxs": [
                    "Dict[str,Any]",
                    "str",
                    "bool",
                    "Optional[BaseException]",
                    "T"
                ]
            }
        },
        "Corpus.get_gold_answers": {
            "name": "get_gold_answers",
            "location": 277,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Corpus.save": {
            "name": "save",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_name": [
                    "str"
                ]
            }
        },
        "EncodedCorpus.__init__": {
            "name": "__init__",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "bool",
                    "cmk.gui.plugins.metrics.utils.P.erfometer",
                    "cmk.gui.plugins.metrics.utils.TranslatedMetrics"
                ]
            }
        },
        "EncodedCorpus.encode": {
            "name": "encode",
            "location": 318,
            "return": [
                "List[model.qa.EncodedContextQuestionAnswer]"
            ],
            "arguments": {
                "context_qas": [
                    "str",
                    "bool"
                ],
                "token_mapping": [
                    "str",
                    "bool"
                ],
                "char_mapping": [
                    "str",
                    "bool"
                ]
            }
        },
        "SampleCorpus.__init__": {
            "name": "__init__",
            "location": 347,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "bool",
                    "Dict[str,Any]",
                    "Callable[[Any,Any],bool]",
                    "Callable[A,bool]"
                ]
            }
        },
        "SampleCorpus.make_samples": {
            "name": "make_samples",
            "location": 353,
            "return": [
                "List[model.qa.EncodedSample]"
            ],
            "arguments": {
                "context_qas": [
                    "Dict",
                    "int"
                ]
            }
        },
        "QADataset.__init__": {
            "name": "__init__",
            "location": 379,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "QADataset.__len__": {
            "name": "__len__",
            "location": 383,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "QADataset.__getitem__": {
            "name": "__getitem__",
            "location": 386,
            "return": [
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "str",
                    "List[str]",
                    "Dict",
                    "Any"
                ]
            }
        },
        "QADataset.get_gold_answers": {
            "name": "get_gold_answers",
            "location": 389,
            "return": [
                "int",
                "Hashable",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "QADataset.get_answer_texts": {
            "name": "get_answer_texts",
            "location": 392,
            "return": [
                "Optional[object]",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "answer_token_idxs": [
                    "Dict",
                    "Type",
                    "Type[object]"
                ]
            }
        },
        "QADataset.stats": {
            "name": "stats",
            "location": 407,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "QADataset.source_file": {
            "name": "source_file",
            "location": 411,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainDataset.__init__": {
            "name": "__init__",
            "location": 427,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "str",
                    "int",
                    "cmk.gui.plugins.metrics.utils.P.erfometer",
                    "cmk.gui.plugins.metrics.utils.TranslatedMetrics"
                ]
            }
        },
        "TrainDataset.load_dataset": {
            "name": "load_dataset",
            "location": 433,
            "return": [
                "TrainDataset"
            ],
            "arguments": {
                "cls": [
                    "Type[_TTrainDataset]"
                ],
                "filename": [
                    "str",
                    "Dict[str,Any]"
                ],
                "vectors": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "tokenizer": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "processor": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "force_single_answer": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "EvalDataset.__init__": {
            "name": "__init__",
            "location": 472,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "bool",
                    "Dict[str,Any]",
                    "Callable[[Any,Any],bool]",
                    "Callable[A,bool]"
                ]
            }
        },
        "EvalDataset.load_dataset": {
            "name": "load_dataset",
            "location": 476,
            "return": [
                "EvalDataset"
            ],
            "arguments": {
                "cls": [
                    "Type[_TEvalDataset]"
                ],
                "filename": [
                    "str",
                    "int"
                ],
                "vectors": [
                    "str",
                    "int",
                    "List[str]",
                    "None",
                    "Optional[str]",
                    "Optional[int]",
                    "Union[int,str]",
                    "bool"
                ],
                "char_mapping": [
                    "str",
                    "int",
                    "List[str]",
                    "None",
                    "Optional[str]",
                    "Optional[int]",
                    "Union[int,str]",
                    "bool"
                ],
                "tokenizer": [
                    "str",
                    "int",
                    "List[str]",
                    "None",
                    "Optional[str]",
                    "Optional[int]",
                    "Union[int,str]",
                    "bool"
                ],
                "processor": [
                    "str",
                    "int",
                    "List[str]",
                    "None",
                    "Optional[str]",
                    "Optional[int]",
                    "Union[int,str]",
                    "bool"
                ],
                "force_single_answer": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]",
                    "Optional[int]",
                    "List[str]",
                    "Union[int,str]"
                ]
            }
        },
        "Corpus.from_raw.return_one": {
            "name": "return_one",
            "location": 107,
            "return": [
                "int",
                "float",
                "Tuple[int,int]",
                "str"
            ],
            "arguments": {}
        }
    },
    "squid-master/model/docqa_predictor.py": {
        "DocQAConfig.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contextual_encoder_config": [
                    "bool",
                    "Callable",
                    "int"
                ],
                "dropout_prob": [
                    "bool",
                    "List[str]",
                    "str",
                    "int",
                    "float",
                    "Callable[str,bool]",
                    "Callable[[str],bool]"
                ],
                "attention_linear_hidden_size": [
                    "int",
                    "Tuple[int]",
                    "float",
                    "None",
                    "Optional[int]",
                    "bool"
                ],
                "use_self_attention": [
                    "bool"
                ],
                "batch_size": [
                    "int",
                    "Optional[int]",
                    "Tuple[int]",
                    "str",
                    "None",
                    "float",
                    "torch.Tensor"
                ]
            }
        },
        "DocQAOutput.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict",
                    "str",
                    "bool",
                    "Tuple",
                    "Dict[str,int]",
                    "Dict[str,Any]"
                ],
                "input_size": [
                    "Dict",
                    "str"
                ]
            }
        },
        "DocQAOutput.forward": {
            "name": "forward",
            "location": 81,
            "return": [
                "model.predictor.ModelPredictions"
            ],
            "arguments": {
                "self": [],
                "context_encoding": [
                    "str",
                    "int",
                    "Union[int,float]",
                    "timeview.gui.model.View",
                    "Sequence[int]"
                ],
                "context_mask": [
                    "int",
                    "float",
                    "OrderedDict",
                    "torch.Tensor"
                ],
                "lengths": [
                    "int",
                    "Sequence[int]",
                    "float",
                    "str",
                    "Union[int,float]",
                    "timeview.gui.model.View"
                ],
                "length_idxs": [
                    "int",
                    "Union[int,float]",
                    "timeview.gui.model.View",
                    "Sequence[int]",
                    "str"
                ],
                "orig_idxs": [
                    "int",
                    "Sequence[int]",
                    "float",
                    "str",
                    "Union[int,float]",
                    "timeview.gui.model.View"
                ]
            }
        },
        "DocQAPredictor.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "embeddor": [
                    "Dict",
                    "str",
                    "List"
                ],
                "config": [
                    "Dict[str,Any]",
                    "Dict"
                ]
            }
        },
        "DocQAPredictor.forward": {
            "name": "forward",
            "location": 172,
            "return": [
                "model.predictor.ModelPredictions"
            ],
            "arguments": {
                "self": [],
                "batch": [
                    "float",
                    "str",
                    "List[int]",
                    "int",
                    "trezor.utils.Writer"
                ]
            }
        }
    },
    "squid-master/model/evaluator.py": {
        "get_answer_token_idxs": {
            "name": "get_answer_token_idxs",
            "location": 87,
            "return": [
                "Dict[(Any, Tuple[(int, int)])]"
            ],
            "arguments": {
                "batch": [
                    "int",
                    "str",
                    "bool"
                ],
                "model_predictions": [
                    "float",
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "Evaluator.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Evaluator.forward": {
            "name": "forward",
            "location": 26,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "batch": [
                    "int"
                ],
                "model_predictions": [
                    "int"
                ]
            }
        },
        "SingleClassLossEvaluator.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SingleClassLossEvaluator.forward": {
            "name": "forward",
            "location": 45,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "batch": [
                    "int",
                    "str"
                ],
                "model_predictions": [
                    "int",
                    "torch.Tensor"
                ]
            }
        },
        "MultiClassLossEvaluator.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiClassLossEvaluator.forward": {
            "name": "forward",
            "location": 73,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "batch": [
                    "int",
                    "float",
                    "numpy.ndarray"
                ],
                "model_predictions": [
                    "int",
                    "float",
                    "numpy.ndarray"
                ]
            }
        }
    },
    "squid-master/model/predictor.py": {
        "PredictorModel.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PredictorModel.forward": {
            "name": "forward",
            "location": 33,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "batch": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "ContextualEncoderConfig.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hidden_size": [
                    "int",
                    "Tuple[int,int,int]",
                    "Tuple[Union[int,int,int]]"
                ],
                "num_layers": [
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "dropout_input": [
                    "int",
                    "Iterable[Iterable]",
                    "Union[str,float]",
                    "str",
                    "float"
                ],
                "dropout_prob": [
                    "int",
                    "Iterable[Iterable]",
                    "Union[str,float]",
                    "str",
                    "float"
                ]
            }
        },
        "ContextualEncoder.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_dim": [
                    "Dict",
                    "Dict[str,Any]"
                ],
                "config": [
                    "MutableMapping[str,Any]",
                    "Dict",
                    "MutableMapping",
                    "Dict[str,Any]"
                ]
            }
        },
        "ContextualEncoder.forward": {
            "name": "forward",
            "location": 88,
            "return": [
                "str",
                "int",
                "Optional[Union[str,Any]]",
                "Set[str]",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "inpt": [
                    "str"
                ],
                "lengths": [
                    "List",
                    "int",
                    "float"
                ],
                "length_idxs": [
                    "int",
                    "Callable",
                    "str"
                ],
                "orig_idxs": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "Sequence[int]"
                ]
            }
        }
    },
    "squid-master/model/profiler.py": {
        "mem_report": {
            "name": "mem_report",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "print_all": [
                    "bool",
                    "int",
                    "Dict[str,Any]"
                ]
            }
        },
        "memory_profiled": {
            "name": "memory_profiled",
            "location": 75,
            "return": [
                "Callable"
            ],
            "arguments": {
                "op": [
                    "int",
                    "float",
                    "Callable",
                    "Dict",
                    "T"
                ]
            }
        },
        "autograd_profiled": {
            "name": "autograd_profiled",
            "location": 88,
            "return": [
                "Callable"
            ],
            "arguments": {
                "op": [
                    "str",
                    "int",
                    "Exception",
                    "Callable"
                ],
                "use_cuda": [
                    "str",
                    "int",
                    "Exception",
                    "Callable"
                ]
            }
        },
        "mem_report._mem_report": {
            "name": "_mem_report",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "tensors": [
                    "bool",
                    "List[torch.Tensor]",
                    "str"
                ],
                "mem_type": [
                    "str",
                    "List[float]",
                    "int",
                    "Mapping[str, str]"
                ]
            }
        },
        "memory_profiled.profiled_function": {
            "name": "profiled_function",
            "location": 77,
            "return": [],
            "arguments": {}
        },
        "autograd_profiled.profiled_function": {
            "name": "profiled_function",
            "location": 90,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        }
    },
    "squid-master/model/qa.py": {
        "Processed.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "tokenizer": [
                    "bool",
                    "str",
                    "float",
                    "Sequence[dict[str,str]]",
                    "Sequence[Dict[str,str]]",
                    "int"
                ],
                "processor": [
                    "bool",
                    "str",
                    "Sequence[Dict[str, str]]",
                    "float",
                    "int"
                ]
            }
        },
        "Processed.__eq__": {
            "name": "__eq__",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Iterable[Any]",
                    "AbstractSet",
                    "AbstractSet[TemplateObjectVariable]",
                    "AbstractSet[TemplateActionTypeVariable]"
                ]
            }
        },
        "Answer.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "bytes",
                    "Set",
                    "int",
                    "Mapping",
                    "bool",
                    "Mapping[str,Any]"
                ],
                "span_start": [
                    "int"
                ],
                "tokenizer": [
                    "str",
                    "model.tokenizer.Tokenizer",
                    "int",
                    "model.text_processor.TextProcessor",
                    "None",
                    "Optional[int]"
                ],
                "processor": [
                    "str",
                    "model.tokenizer.Tokenizer",
                    "int",
                    "model.text_processor.TextProcessor",
                    "None",
                    "Optional[int]"
                ]
            }
        },
        "Answer.__eq__": {
            "name": "__eq__",
            "location": 59,
            "return": [
                "bool",
                "int",
                "Dict[str,int]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "int"
                ]
            }
        },
        "Answer.__hash__": {
            "name": "__hash__",
            "location": 69,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuestionAnswer.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "question_id": [
                    "str",
                    "int"
                ],
                "text": [
                    "str",
                    "model.text_processor.TextProcessor",
                    "model.tokenizer.Tokenizer",
                    "numpy.ndarray"
                ],
                "answers": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None",
                    "Sequence[Dict[str,str]]",
                    "Sequence[dict[str,str]]"
                ],
                "tokenizer": [
                    "str",
                    "model.text_processor.TextProcessor",
                    "model.tokenizer.Tokenizer",
                    "numpy.ndarray"
                ],
                "processor": [
                    "str",
                    "model.text_processor.TextProcessor",
                    "model.tokenizer.Tokenizer",
                    "numpy.ndarray"
                ]
            }
        },
        "QuestionAnswer.__eq__": {
            "name": "__eq__",
            "location": 97,
            "return": [
                "bool",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Callable[[numpy.ndarray,numpy.ndarray],numpy.ndarray]",
                    "Callable[numpy.ndarray,numpy.ndarray,numpy.ndarray]",
                    "Dict",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]",
                    "None"
                ]
            }
        },
        "ContextQuestionAnswer.__init__": {
            "name": "__init__",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "model.tokenizer.Tokenizer",
                    "model.text_processor.TextProcessor",
                    "numpy.ndarray"
                ],
                "qas": [
                    "bool",
                    "str",
                    "float",
                    "Sequence[dict[str,str]]",
                    "Sequence[Dict[str,str]]",
                    "int"
                ],
                "tokenizer": [
                    "str",
                    "model.tokenizer.Tokenizer",
                    "model.text_processor.TextProcessor",
                    "numpy.ndarray"
                ],
                "processor": [
                    "str",
                    "model.tokenizer.Tokenizer",
                    "model.text_processor.TextProcessor",
                    "numpy.ndarray"
                ]
            }
        },
        "ContextQuestionAnswer.__eq__": {
            "name": "__eq__",
            "location": 123,
            "return": [
                "bool",
                "Optional[int]",
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Tuple[float,float]",
                    "Tuple[Union[float,float]]"
                ]
            }
        },
        "EncodedAnswer.__init__": {
            "name": "__init__",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "answer": [
                    "bytes",
                    "str",
                    "bool",
                    "float",
                    "List"
                ],
                "context_tokens": [
                    "str",
                    "bool",
                    "Callable"
                ]
            }
        },
        "EncodedAnswer.__eq__": {
            "name": "__eq__",
            "location": 147,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Callable"
                ]
            }
        },
        "EncodedQuestionAnswer.__init__": {
            "name": "__init__",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qa": [
                    "str",
                    "int"
                ],
                "token_mapping": [
                    "str",
                    "bool"
                ],
                "char_mapping": [
                    "str"
                ],
                "context_tokens": [
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "EncodedQuestionAnswer.__eq__": {
            "name": "__eq__",
            "location": 185,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Iterable[Any]",
                    "AbstractSet",
                    "AbstractSet[Any]",
                    "AbstractSet[T]"
                ]
            }
        },
        "EncodedContextQuestionAnswer.__init__": {
            "name": "__init__",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "int",
                    "str",
                    "Union[str,Iterable[str]]",
                    "Iterable[str]"
                ],
                "token_mapping": [
                    "int",
                    "str",
                    "bool"
                ],
                "char_mapping": [
                    "int",
                    "str"
                ]
            }
        },
        "EncodedContextQuestionAnswer.__eq__": {
            "name": "__eq__",
            "location": 225,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "EncodedSample.__init__": {
            "name": "__init__",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx_word_encoding": [
                    "str",
                    "bool",
                    "int"
                ],
                "ctx_char_encoding": [
                    "str",
                    "int",
                    "bool"
                ],
                "qa": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "EncodedSample.__eq__": {
            "name": "__eq__",
            "location": 269,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str"
                ]
            }
        }
    },
    "squid-master/model/text_processor.py": {
        "TextProcessor.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "TextProcessor.process": {
            "name": "process",
            "location": 18,
            "return": [
                "str",
                "Type"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Union[str,int]"
                ]
            }
        }
    },
    "squid-master/model/tokenizer.py": {
        "Tokenizer.tokenize": {
            "name": "tokenize",
            "location": 17,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "NltkTokenizer.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NltkTokenizer.tokenize": {
            "name": "tokenize",
            "location": 38,
            "return": [
                "List[Token]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        }
    },
    "squid-master/model/trainer.py": {
        "Trainer.one_train_iteration": {
            "name": "one_train_iteration",
            "location": 77,
            "return": [
                "float"
            ],
            "arguments": {
                "cls": [
                    "Callable",
                    "str",
                    "bool",
                    "Dict",
                    "None",
                    "Callable[...,Awaitable]",
                    "Optional[bool]",
                    "Optional[str]",
                    "Optional[Union[str,int]]"
                ],
                "batch": [
                    "str",
                    "bool",
                    "model.predictor.PredictorModel",
                    "model.batcher.QABatch",
                    "pystork.model.Model"
                ],
                "model": [
                    "model.predictor.PredictorModel",
                    "int",
                    "dict"
                ],
                "parameters": [
                    "Iterable[Any]",
                    "int",
                    "Optional[float]",
                    "float",
                    "None",
                    "List[int]"
                ],
                "evaluator": [
                    "int",
                    "List[str]",
                    "torch.optim.Optimizer",
                    "str",
                    "float",
                    "bool",
                    "Union[int,float]"
                ],
                "optimizer": [
                    "torch.optim.Optimizer",
                    "int",
                    "List[str]",
                    "str",
                    "bool",
                    "Union[int, float]"
                ],
                "ema": [
                    "str",
                    "model.modules.ema.EMA",
                    "int",
                    "bytes"
                ],
                "max_grad_norm": [
                    "Iterable[Any]",
                    "None",
                    "int",
                    "Optional[float]",
                    "float",
                    "List[int]"
                ]
            }
        },
        "Trainer.training_run": {
            "name": "training_run",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str,Any]",
                    "int"
                ],
                "loader": [
                    "torch.utils.data.DataLoader",
                    "str",
                    "bool"
                ],
                "model": [
                    "int",
                    "dict",
                    "str",
                    "Dict[str, List[str]]",
                    "bool"
                ],
                "parameters": [
                    "str",
                    "Dict[str,Any]",
                    "int"
                ],
                "evaluator": [
                    "str",
                    "Dict[str,Any]",
                    "int"
                ],
                "optimizer": [
                    "str",
                    "Dict[str,Any]",
                    "int"
                ],
                "ema": [
                    "str",
                    "Dict[str,Any]",
                    "int"
                ],
                "dev_dataset": [
                    "bool",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "training_config": [
                    "str",
                    "int",
                    "Counter",
                    "Dict[str,Any]"
                ]
            }
        },
        "Trainer.train_model": {
            "name": "train_model",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "Dict"
                ],
                "model": [
                    "model.predictor.PredictorModel",
                    "bool",
                    "int"
                ],
                "train_dataset": [
                    "str",
                    "model.corpus.QADataset"
                ],
                "dev_dataset": [
                    "str",
                    "allennlp.data.DatasetReader",
                    "pystork.model.Model",
                    "kirin.core.model.TripUpdate"
                ],
                "training_config": [],
                "debug": [
                    "bool",
                    "int"
                ]
            }
        },
        "Trainer.validate": {
            "name": "validate",
            "location": 271,
            "return": [
                "Tuple[(Any, float, float)]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "cmk.utils.type_defs.EventRule"
                ],
                "dataset": [
                    "str",
                    "int",
                    "cmk.utils.type_defs.EventRule"
                ],
                "model": [
                    "Dict[str, Any]",
                    "model.evaluator.Evaluator"
                ],
                "evaluator": [
                    "Dict",
                    "str",
                    "Optional[Iterable[int]]",
                    "None",
                    "Optional[bytes]",
                    "bytes"
                ],
                "training_config": [
                    "str",
                    "int",
                    "cmk.utils.type_defs.EventRule"
                ],
                "epoch": [
                    "int",
                    "str"
                ]
            }
        },
        "Trainer.get_dataset_loss": {
            "name": "get_dataset_loss",
            "location": 305,
            "return": [
                "float",
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "int"
                ],
                "dataset": [
                    "model.corpus.QADataset",
                    "str",
                    "int"
                ],
                "model": [
                    "int",
                    "Dict[str,Any]",
                    "model.predictor.PredictorModel",
                    "Dict",
                    "model.batcher.QABatch",
                    "tinycards.model.deck.Deck"
                ],
                "evaluator": [
                    "bool",
                    "str",
                    "model.evaluator.Evaluator",
                    "None",
                    "Optional[int]",
                    "int"
                ],
                "training_config": [
                    "str",
                    "int",
                    "model.corpus.QADataset"
                ]
            }
        },
        "Trainer.answer_dataset": {
            "name": "answer_dataset",
            "location": 336,
            "return": [
                "Optional[str]",
                "Callable[..., None]",
                "Dict[Tuple[int, int], str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Dict",
                    "float",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ],
                "dataset": [
                    "model.corpus.QADataset",
                    "Dict[str, Any]"
                ],
                "model": [
                    "List[dict]",
                    "model.predictor.PredictorModel",
                    "asyncpg_migrate.model.Config",
                    "allennlp.models.model.Model"
                ],
                "training_config": [
                    "Dict[str,Any]",
                    "model.corpus.QADataset"
                ]
            }
        },
        "Trainer.evaluate_on_squad_dataset": {
            "name": "evaluate_on_squad_dataset",
            "location": 363,
            "return": [
                "Iterable[str]",
                "dict",
                "str",
                "IO[str]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "asyncpg_migrate.model.Config",
                    "int"
                ],
                "dataset": [
                    "str"
                ],
                "model": [
                    "bool",
                    "asyncpg_migrate.model.Config",
                    "int"
                ],
                "training_config": [
                    "bool",
                    "asyncpg_migrate.model.Config",
                    "int"
                ]
            }
        }
    },
    "squid-master/model/train_parser.py": {
        "TrainArgs.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arg_dict": [
                    "List[str]",
                    "List[int]",
                    "int",
                    "Dict[int,Any]",
                    "Final",
                    "Dict"
                ]
            }
        },
        "TrainArgs.parse_cli_args": {
            "name": "parse_cli_args",
            "location": 94,
            "return": [
                "argparse.Namespace"
            ],
            "arguments": {}
        },
        "TrainArgs.get_args": {
            "name": "get_args",
            "location": 127,
            "return": [
                "TrainArgs"
            ],
            "arguments": {
                "cls": [
                    "Type[_TTrainArgs]"
                ]
            }
        }
    },
    "squid-master/model/util.py": {
        "get_last_hidden_states": {
            "name": "get_last_hidden_states",
            "location": 8,
            "return": [
                "str",
                "int",
                "Dict[str,Any]",
                "Set[str]",
                "bytes",
                "List[str]",
                "Iterator"
            ],
            "arguments": {
                "states": [
                    "int",
                    "Union[int, float]",
                    "Optional[float]",
                    "bytes"
                ],
                "n_directions": [
                    "bool",
                    "List[int]",
                    "int",
                    "str",
                    "List[float]",
                    "List[List[int]]"
                ],
                "total_hidden_size": [
                    "int",
                    "str",
                    "Dict[str,str]",
                    "Callable[[str],int]",
                    "Callable[str,int]"
                ]
            }
        },
        "get_device": {
            "name": "get_device",
            "location": 40,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "disable_cuda": [
                    "bool",
                    "str",
                    "Dict",
                    "T"
                ]
            }
        }
    },
    "squid-master/model/wv.py": {
        "WordVectors.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vectors": [
                    "float",
                    "int",
                    "None",
                    "Type",
                    "Optional[int]",
                    "Type[T]",
                    "bool",
                    "Union[float,int]"
                ],
                "idx_to_word": [
                    "float",
                    "int",
                    "None",
                    "Type",
                    "Optional[int]",
                    "Type[T]",
                    "bool",
                    "Union[float,int]"
                ],
                "word_to_idx": [
                    "int",
                    "List[str]",
                    "numpy.ndarray"
                ]
            }
        },
        "WordVectors.contains": {
            "name": "contains",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "List[int]",
                    "int",
                    "List[Tuple[str,str]]",
                    "Sequence[T]",
                    "List[tuple[Union[str,str]]]",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "WordVectors.load_vectors": {
            "name": "load_vectors",
            "location": 42,
            "return": [
                "WordVectors"
            ],
            "arguments": {
                "cls": [
                    "Type[_TWordVectors]"
                ],
                "file_name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "WordVectors.from_disk": {
            "name": "from_disk",
            "location": 56,
            "return": [
                "WordVectors"
            ],
            "arguments": {
                "cls": [
                    "Type[_TWordVectors]"
                ],
                "file_name": [
                    "str"
                ]
            }
        },
        "WordVectors.from_text_vectors": {
            "name": "from_text_vectors",
            "location": 72,
            "return": [
                "WordVectors"
            ],
            "arguments": {
                "cls": [
                    "Type[_TWordVectors]"
                ],
                "vector_file": [
                    "str",
                    "bytes",
                    "List",
                    "Optional[int]",
                    "int",
                    "IO[bytes]",
                    "None",
                    "bool",
                    "IO"
                ],
                "consume_first_line": [
                    "bool",
                    "str",
                    "bytes",
                    "List",
                    "Optional[int]",
                    "IO[bytes]"
                ]
            }
        },
        "WordVectors.read_vectors": {
            "name": "read_vectors",
            "location": 88,
            "return": [
                "Tuple[(Any, Dict[(str, int)], Dict[(int, str)])]"
            ],
            "arguments": {
                "vector_file": [
                    "str"
                ],
                "consume_first_line": [
                    "int",
                    "str",
                    "Iterator",
                    "Iterator[int]",
                    "Optional[str]",
                    "None",
                    "Optional[int]"
                ]
            }
        },
        "WordVectors.save": {
            "name": "save",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_name": [
                    "str"
                ]
            }
        }
    },
    "squid-master/model/__init__.py": {},
    "squid-master/model/modules/attention.py": {
        "BaseBidirectionalAttention.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [
                    "int",
                    "List[int]"
                ],
                "linear_layer": [
                    "bool",
                    "int",
                    "float"
                ],
                "linear_hidden_size": [
                    "int",
                    "List[int]",
                    "str"
                ],
                "self_attention": [
                    "int",
                    "bool"
                ]
            }
        },
        "BaseBidirectionalAttention.forward": {
            "name": "forward",
            "location": 66,
            "return": [
                "T",
                "int",
                "Counter",
                "bool",
                "List",
                "Dict[Any,int]",
                "Dict[str,str]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "int",
                    "str",
                    "bool"
                ],
                "question": [
                    "float",
                    "str",
                    "bool",
                    "torch.Tensor"
                ],
                "context_mask": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "BidafBidirectionalAttention.__init__": {
            "name": "__init__",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [
                    "int",
                    "float"
                ]
            }
        },
        "DocQABidirectionalAttention.__init__": {
            "name": "__init__",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [
                    "int",
                    "str",
                    "bool",
                    "None",
                    "Optional[int]"
                ],
                "linear_hidden_size": [
                    "int",
                    "str",
                    "bool",
                    "None",
                    "Optional[int]"
                ]
            }
        },
        "SelfAttention.__init__": {
            "name": "__init__",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [
                    "int",
                    "str",
                    "None",
                    "Optional[int]",
                    "bool"
                ],
                "linear_hidden_size": [
                    "int",
                    "str",
                    "None",
                    "Optional[int]",
                    "bool"
                ]
            }
        }
    },
    "squid-master/model/modules/ema.py": {
        "EMA.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mu": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "EMA.register": {
            "name": "register",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]",
                    "None"
                ],
                "val": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "EMA.forward": {
            "name": "forward",
            "location": 19,
            "return": [
                "Iterable[str]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str,torch.LongTensor]",
                    "Optional[str]",
                    "None",
                    "bool",
                    "Optional[float]",
                    "float"
                ],
                "x": [
                    "bool"
                ]
            }
        }
    },
    "squid-master/model/modules/embeddor.py": {
        "make_embeddor": {
            "name": "make_embeddor",
            "location": 188,
            "return": [
                "ConcatenatingEmbeddor"
            ],
            "arguments": {
                "config": [
                    "Dict",
                    "Mapping[str,Any]",
                    "Mapping"
                ],
                "device": [
                    "Dict",
                    "Dict[str,Any]",
                    "bool",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "Embeddor.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "embedding_dim": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Embeddor.forward": {
            "name": "forward",
            "location": 44,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "words": [
                    "str",
                    "Callable",
                    "torch.LongTensor"
                ],
                "chars": [
                    "str",
                    "Callable",
                    "torch.LongTensor"
                ]
            }
        },
        "WordEmbeddor.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "word_vectors": [
                    "List[int]",
                    "List[Exception]",
                    "int"
                ],
                "train_vecs": [
                    "int",
                    "float",
                    "bool"
                ],
                "device": [
                    "int",
                    "Iterable[str]",
                    "str",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "WordEmbeddor.forward": {
            "name": "forward",
            "location": 73,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "words": [
                    "bool",
                    "str",
                    "int",
                    "List[list[str]]",
                    "List[List[str]]"
                ],
                "chars": [
                    "str",
                    "Callable",
                    "torch.LongTensor"
                ]
            }
        },
        "PoolingCharEmbeddor.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "char_vocab_size": [
                    "int",
                    "float",
                    "allennlp.nn.InitializerApplicator",
                    "Union[int,str]"
                ],
                "embedding_dimension": [
                    "int",
                    "float",
                    "Union[int,str]",
                    "str"
                ],
                "device": [
                    "int",
                    "str",
                    "bool",
                    "Optional[str]",
                    "float"
                ]
            }
        },
        "PoolingCharEmbeddor.forward": {
            "name": "forward",
            "location": 104,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "words": [
                    "str",
                    "Callable",
                    "torch.LongTensor"
                ],
                "chars": [
                    "int",
                    "torch.LongTensor",
                    "List[int]",
                    "str",
                    "bytes"
                ]
            }
        },
        "ConcatenatingEmbeddor.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "embeddors": [
                    "Optional[str]",
                    "Tuple[int]",
                    "str"
                ]
            }
        },
        "ConcatenatingEmbeddor.forward": {
            "name": "forward",
            "location": 134,
            "return": [
                "int",
                "float",
                "bool",
                "Collection[str]"
            ],
            "arguments": {
                "self": [],
                "words": [
                    "str",
                    "int",
                    "torch.LongTensor",
                    "bytes",
                    "bool"
                ],
                "chars": [
                    "str",
                    "int",
                    "torch.LongTensor",
                    "bytes",
                    "bool"
                ]
            }
        },
        "HighwayEmbeddor.__init__": {
            "name": "__init__",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "embeddors": [
                    "int"
                ],
                "n_layers": [
                    "int",
                    "List[int]",
                    "torch.Tensor"
                ]
            }
        },
        "HighwayEmbeddor.forward": {
            "name": "forward",
            "location": 170,
            "return": [
                "int",
                "float",
                "Callable",
                "str",
                "List"
            ],
            "arguments": {
                "self": [],
                "words": [
                    "str",
                    "Dict[str,str]",
                    "torch.LongTensor",
                    "torch.Tensor"
                ],
                "chars": [
                    "str",
                    "Dict[str,str]",
                    "torch.LongTensor",
                    "torch.Tensor"
                ]
            }
        }
    },
    "squid-master/model/modules/masked.py": {
        "mask_sequence": {
            "name": "mask_sequence",
            "location": 14,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "input_batch": [
                    "int",
                    "Callable",
                    "str"
                ],
                "mask_index": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "MaskedOp.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "op": [
                    "str",
                    "int",
                    "bool",
                    "list"
                ],
                "mask_mode": [
                    "bool",
                    "Optional[bool]",
                    "Optional[int]",
                    "Tuple[float, float, float, float]"
                ],
                "mask_time": [
                    "int",
                    "float",
                    "Optional[float]"
                ],
                "mask_value": [
                    "int",
                    "str"
                ]
            }
        },
        "MaskedOp._apply_mask": {
            "name": "_apply_mask",
            "location": 47,
            "return": [
                "int",
                "str",
                "List[int]",
                "Dict[str, Any]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "inpt": [
                    "int",
                    "str"
                ],
                "mask": [
                    "int"
                ]
            }
        },
        "MaskedOp.forward": {
            "name": "forward",
            "location": 70,
            "return": [
                "List[str]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "input_batch": [
                    "bool"
                ]
            }
        },
        "MaskedSoftmax.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dim": [
                    "str"
                ]
            }
        },
        "MaskedLogSoftmax.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dim": []
            }
        },
        "MaskedLinear.__init__": {
            "name": "__init__",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "in_features": [
                    "Optional[str]",
                    "int",
                    "str",
                    "Optional[int]",
                    "Optional[float]",
                    "bool"
                ],
                "out_features": [
                    "Optional[str]",
                    "int",
                    "str",
                    "Optional[int]",
                    "Optional[float]",
                    "bool"
                ],
                "bias": [
                    "Optional[str]",
                    "int",
                    "str",
                    "Optional[int]",
                    "Optional[float]",
                    "bool"
                ]
            }
        }
    },
    "squid-master/model/modules/__init__.py": {},
    "squid-master/scripts/evaluate_v1_1.py": {
        "normalize_answer": {
            "name": "normalize_answer",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "f1_score": {
            "name": "f1_score",
            "location": 30,
            "return": [
                "Union[(float, int)]"
            ],
            "arguments": {
                "prediction": [
                    "str",
                    "float",
                    "List",
                    "List[str]",
                    "Optional[str]",
                    "None"
                ],
                "ground_truth": [
                    "str",
                    "float",
                    "List",
                    "bytes"
                ]
            }
        },
        "exact_match_score": {
            "name": "exact_match_score",
            "location": 43,
            "return": [
                "bool",
                "str",
                "Callable[[str],bool]",
                "re.Match[str]"
            ],
            "arguments": {
                "prediction": [
                    "Callable[[T],bool]",
                    "Iterable[T]",
                    "Callable[T,bool]"
                ],
                "ground_truth": [
                    "Callable[[T],bool]",
                    "Iterable[T]",
                    "Callable[T,bool]"
                ]
            }
        },
        "metric_max_over_ground_truths": {
            "name": "metric_max_over_ground_truths",
            "location": 47,
            "return": [
                "List[list]",
                "bool",
                "str",
                "Union[str,Pattern]",
                "int",
                "Optional[int]",
                "List[str]"
            ],
            "arguments": {
                "metric_fn": [
                    "int",
                    "Callable",
                    "str"
                ],
                "prediction": [
                    "int",
                    "Callable",
                    "str"
                ],
                "ground_truths": [
                    "str",
                    "int",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "evaluate": {
            "name": "evaluate",
            "location": 55,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "dataset": [
                    "str",
                    "int",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "predictions": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "normalize_answer.remove_articles": {
            "name": "remove_articles",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str",
                    "int"
                ]
            }
        },
        "normalize_answer.white_space_fix": {
            "name": "white_space_fix",
            "location": 17,
            "return": [
                "str",
                "bool",
                "List[str]",
                "Exception"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "normalize_answer.remove_punc": {
            "name": "remove_punc",
            "location": 20,
            "return": [
                "str",
                "List",
                "List[str]",
                "Optional[dict]",
                "int",
                "List[Dict[str,Any]]",
                "frozenset"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "normalize_answer.lower": {
            "name": "lower",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        }
    },
    "squid-master/scripts/evaluate_v2_0.py": {
        "parse_args": {
            "name": "parse_args",
            "location": 20,
            "return": [
                "argparse.Namespace"
            ],
            "arguments": {}
        },
        "make_qid_to_has_ans": {
            "name": "make_qid_to_has_ans",
            "location": 59,
            "return": [
                "Dict[(Any, bool)]"
            ],
            "arguments": {
                "dataset": [
                    "bool",
                    "float",
                    "Iterable[Any]"
                ]
            }
        },
        "normalize_answer": {
            "name": "normalize_answer",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "get_tokens": {
            "name": "get_tokens",
            "location": 88,
            "return": [
                "List",
                "str",
                "Dict"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "compute_exact": {
            "name": "compute_exact",
            "location": 94,
            "return": [
                "int"
            ],
            "arguments": {
                "a_gold": [
                    "int",
                    "str",
                    "bool"
                ],
                "a_pred": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "compute_f1": {
            "name": "compute_f1",
            "location": 98,
            "return": [
                "Union[(float, int)]"
            ],
            "arguments": {
                "a_gold": [
                    "Callable[T,T,T]",
                    "int",
                    "Callable[[T,T],T]",
                    "T"
                ],
                "a_pred": [
                    "Callable[T,T,T]",
                    "int",
                    "Callable[[T,T],T]",
                    "T"
                ]
            }
        },
        "get_raw_scores": {
            "name": "get_raw_scores",
            "location": 114,
            "return": [
                "Tuple[(dict, dict)]"
            ],
            "arguments": {
                "dataset": [
                    "str",
                    "Dict",
                    "bool",
                    "T"
                ],
                "preds": [
                    "str",
                    "bool"
                ]
            }
        },
        "apply_no_ans_threshold": {
            "name": "apply_no_ans_threshold",
            "location": 137,
            "return": [
                "dict"
            ],
            "arguments": {
                "scores": [
                    "Union[AsyncIterable[Any], Iterable[Any]]",
                    "Mapping[str, Mapping[str, Any]]",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "dict",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, float]",
                    "Dict[str, Dict[str, float]]",
                    "Dict[str, Dict]"
                ],
                "na_probs": [
                    "float",
                    "int",
                    "str",
                    "Union[float,int]"
                ],
                "qid_to_has_ans": [
                    "int",
                    "numpy.ndarray",
                    "float",
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]"
                ],
                "na_prob_thresh": [
                    "str",
                    "float",
                    "Union[float,int]",
                    "int"
                ]
            }
        },
        "make_eval_dict": {
            "name": "make_eval_dict",
            "location": 148,
            "return": [
                "collections.OrderedDict[(str, Any)]"
            ],
            "arguments": {
                "exact_scores": [
                    "bool",
                    "int",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "Dict[str, str]",
                    "Optional[Sequence[Any]]"
                ],
                "f1_scores": [
                    "bool",
                    "int",
                    "OrderedDict",
                    "List[Dict[str, Any]]",
                    "Optional[str]",
                    "list"
                ],
                "qid_list": [
                    "List[int]",
                    "int",
                    "List[List[int]]",
                    "numpy.array",
                    "Dict[str, List[str]]",
                    "str"
                ]
            }
        },
        "merge_eval": {
            "name": "merge_eval",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "main_eval": [
                    "str",
                    "Optional[str]",
                    "Optional[Dict]"
                ],
                "new_eval": [
                    "str",
                    "Optional[str]",
                    "Optional[Dict]"
                ],
                "prefix": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[Dict]",
                    "Dict"
                ]
            }
        },
        "plot_pr_curve": {
            "name": "plot_pr_curve",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "precisions": [
                    "List[float]",
                    "List[str]",
                    "bool",
                    "str",
                    "None",
                    "Optional[numpy.ndarray]",
                    "numpy.ndarray"
                ],
                "recalls": [
                    "List[float]",
                    "List[str]",
                    "bool",
                    "str",
                    "None",
                    "Optional[numpy.ndarray]",
                    "numpy.ndarray"
                ],
                "out_image": [
                    "List[float]",
                    "bytes",
                    "Tuple[int,int,int]",
                    "List",
                    "Tuple[Union[int,int,int]]"
                ],
                "title": [
                    "List[float]",
                    "bytes",
                    "Tuple[int,int,int]",
                    "List",
                    "Tuple[Union[int,int,int]]"
                ]
            }
        },
        "make_precision_recall_eval": {
            "name": "make_precision_recall_eval",
            "location": 186,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "scores": [
                    "int",
                    "Callable[...,None]",
                    "str",
                    "bool",
                    "List[list[int]]",
                    "List[List[int]]"
                ],
                "na_probs": [
                    "Callable[[], Any]",
                    "Dict[str, str]",
                    "numpy.ndarray"
                ],
                "num_true_pos": [
                    "int",
                    "Optional[float]",
                    "float",
                    "None"
                ],
                "qid_to_has_ans": [
                    "int",
                    "Callable[...,None]",
                    "str",
                    "bool",
                    "List[list[int]]",
                    "List[List[int]]"
                ],
                "out_image": [
                    "Tuple[int]",
                    "None",
                    "int",
                    "str",
                    "float",
                    "List"
                ],
                "title": [
                    "Tuple[int]",
                    "None",
                    "int",
                    "str",
                    "float",
                    "List"
                ]
            }
        },
        "run_precision_recall_analysis": {
            "name": "run_precision_recall_analysis",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "main_eval": [
                    "int",
                    "Callable[...,None]",
                    "str",
                    "Callable"
                ],
                "exact_raw": [
                    "int",
                    "float",
                    "Iterable[Union[int,str]]",
                    "str",
                    "Iterable[str]"
                ],
                "f1_raw": [
                    "int",
                    "float",
                    "bool",
                    "numpy.random.RandomState"
                ],
                "na_probs": [
                    "int",
                    "float",
                    "Iterable[Union[int,str]]",
                    "str",
                    "Iterable[str]"
                ],
                "qid_to_has_ans": [
                    "int",
                    "bool",
                    "Tuple[float, float]",
                    "float",
                    "Optional[Tuple[int, int]]"
                ],
                "out_image_dir": [
                    "str",
                    "int"
                ]
            }
        },
        "histogram_na_prob": {
            "name": "histogram_na_prob",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "na_probs": [
                    "str",
                    "Optional[str]",
                    "int",
                    "bool"
                ],
                "qid_list": [
                    "Optional[str]",
                    "int",
                    "bool",
                    "str"
                ],
                "image_dir": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "name": [
                    "str",
                    "Optional[List]",
                    "List",
                    "None"
                ]
            }
        },
        "find_best_thresh": {
            "name": "find_best_thresh",
            "location": 262,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "preds": [
                    "float",
                    "bool",
                    "str",
                    "Union[float,int]",
                    "int"
                ],
                "scores": [],
                "na_probs": [
                    "Dict[str,Any]",
                    "str",
                    "Optional[Dict[str,Any]]",
                    "List[str]",
                    "numpy.ndarray",
                    "Iterator[Tuple[Any]]"
                ],
                "qid_to_has_ans": [
                    "Union[str, int]",
                    "str"
                ]
            }
        },
        "find_all_best_thresh": {
            "name": "find_all_best_thresh",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "main_eval": [
                    "int"
                ],
                "preds": [
                    "bool",
                    "str",
                    "int"
                ],
                "exact_raw": [
                    "bool",
                    "str",
                    "int"
                ],
                "f1_raw": [
                    "Callable[[float],float]",
                    "float",
                    "Callable[float,float]",
                    "bool",
                    "Tuple[int]"
                ],
                "na_probs": [
                    "bool",
                    "str",
                    "int"
                ],
                "qid_to_has_ans": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "normalize_answer.remove_articles": {
            "name": "remove_articles",
            "location": 71,
            "return": [
                "int",
                "str",
                "List[List[str]]"
            ],
            "arguments": {
                "text": [
                    "str",
                    "int"
                ]
            }
        },
        "normalize_answer.white_space_fix": {
            "name": "white_space_fix",
            "location": 75,
            "return": [
                "str",
                "bool",
                "List[str]",
                "Exception"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "normalize_answer.remove_punc": {
            "name": "remove_punc",
            "location": 78,
            "return": [
                "str",
                "List",
                "List[str]",
                "Optional[dict]",
                "int",
                "List[Dict[str,Any]]",
                "frozenset"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "normalize_answer.lower": {
            "name": "lower",
            "location": 82,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        }
    },
    "squid-master/test/integration.py": {
        "prepare_files": {
            "name": "prepare_files",
            "location": 115,
            "return": [
                "Tuple[(tempfile._TemporaryFileWrapper[bytes], tempfile._TemporaryFileWrapper[bytes], tempfile._TemporaryFileWrapper[bytes])]"
            ],
            "arguments": {}
        },
        "check_dataset": {
            "name": "check_dataset",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "dataset_json": [
                    "bool",
                    "float",
                    "Optional[int]",
                    "None"
                ],
                "dataset_obj": [
                    "bool",
                    "float",
                    "Optional[int]",
                    "None"
                ],
                "loader": [
                    "bool",
                    "Optional[int]",
                    "float"
                ],
                "tokenizer": [
                    "bool",
                    "float",
                    "Optional[int]",
                    "None"
                ],
                "processor": [
                    "bool",
                    "float",
                    "Optional[int]",
                    "None"
                ],
                "multi_answer": [
                    "bool",
                    "float",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "squid-master/test/test_batcher.py": {
        "BatcherTestCase.setUp": {
            "name": "setUp",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BatcherTestCase.make_sample": {
            "name": "make_sample",
            "location": 51,
            "return": [
                "model.qa.EncodedSample"
            ],
            "arguments": {
                "self": [],
                "context_text": [
                    "bytes",
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "answers": [
                    "str",
                    "List[model.qa.Answer]",
                    "Optional[str]"
                ],
                "question_id": [
                    "str",
                    "List[model.qa.Answer]",
                    "Optional[str]",
                    "None"
                ],
                "question_text": [
                    "str",
                    "List[model.qa.Answer]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "BatcherTestCase.test_pad_and_sort_single_seq": {
            "name": "test_pad_and_sort_single_seq",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BatcherTestCase.test_pad_and_sort_regular": {
            "name": "test_pad_and_sort_regular",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BatcherTestCase.test_pad_and_sort_edge_case": {
            "name": "test_pad_and_sort_edge_case",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BatcherTestCase.test_collate_batch_simple_words": {
            "name": "test_collate_batch_simple_words",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BatcherTestCase.test_collate_batch_q_len_sorting": {
            "name": "test_collate_batch_q_len_sorting",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BatcherTestCase.test_collate_batch_ctx_len_sorting": {
            "name": "test_collate_batch_ctx_len_sorting",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BatcherTestCase.test_collate_batch_idxs": {
            "name": "test_collate_batch_idxs",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BatcherTestCase.test_collate_batch_question_chars": {
            "name": "test_collate_batch_question_chars",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BatcherTestCase.test_collate_batch_context_chars": {
            "name": "test_collate_batch_context_chars",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BatcherTestCase.test_collate_batch_different_question_word_lens": {
            "name": "test_collate_batch_different_question_word_lens",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BatcherTestCase.test_collate_batch_different_question_word_numbers_and_lens": {
            "name": "test_collate_batch_different_question_word_numbers_and_lens",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BatcherTestCase.test_collate_batch_different_context_word_lens": {
            "name": "test_collate_batch_different_context_word_lens",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BatcherTestCase.test_collate_batch_different_context_word_numbers_and_lens": {
            "name": "test_collate_batch_different_context_word_numbers_and_lens",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BatcherTestCase.check_collated_chars": {
            "name": "check_collated_chars",
            "location": 347,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "chars": [
                    "str",
                    "List[str]",
                    "torch.Tensor",
                    "int"
                ],
                "words": [
                    "str",
                    "bool"
                ]
            }
        },
        "BatcherTestCase.setUp.split_tokenize": {
            "name": "split_tokenize",
            "location": 35,
            "return": [
                "List[Token]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "txt": [
                    "str",
                    "Optional[str]",
                    "Tuple[Tuple[int, ...]]"
                ]
            }
        }
    },
    "squid-master/test/test_corpus.py": {
        "RawCorpusTestCase.setUp": {
            "name": "setUp",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RawCorpusTestCase.tearDown": {
            "name": "tearDown",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RawCorpusTestCase.test_simple_single_question_answer": {
            "name": "test_simple_single_question_answer",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RawCorpusTestCase.test_no_answer": {
            "name": "test_no_answer",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RawCorpusTestCase.test_multiple_questions": {
            "name": "test_multiple_questions",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RawCorpusTestCase.test_multiple_answers": {
            "name": "test_multiple_answers",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RawCorpusTestCase.test_multiple_docs": {
            "name": "test_multiple_docs",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RawCorpusTestCase.test_duplicate_answers": {
            "name": "test_duplicate_answers",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RawCorpusTestCase.test_compute_vocab": {
            "name": "test_compute_vocab",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RawCorpusTestCase.test_compute_stats": {
            "name": "test_compute_stats",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RawCorpusTestCase.test_get_single_answer_text": {
            "name": "test_get_single_answer_text",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RawCorpusTestCase.test_get_answer_texts": {
            "name": "test_get_answer_texts",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EncodedCorpusTestCase.setUp": {
            "name": "setUp",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EncodedCorpusTestCase.test_encode": {
            "name": "test_encode",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SampleCorpusTestCase.setUp": {
            "name": "setUp",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SampleCorpusTestCase.test_make_samples": {
            "name": "test_make_samples",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QADatasetTestCase.setUp": {
            "name": "setUp",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QADatasetTestCase.test_len": {
            "name": "test_len",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QADatasetTestCase.test_get_answer_texts": {
            "name": "test_get_answer_texts",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainDatasetTestCase.setUp": {
            "name": "setUp",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EvalDatasetTestCase.setUp": {
            "name": "setUp",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RawCorpusTestCase.setUp.split_tokenize": {
            "name": "split_tokenize",
            "location": 30,
            "return": [
                "List[Token]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "txt": [
                    "str",
                    "Optional[str]",
                    "Tuple[Tuple[int, ...]]"
                ]
            }
        }
    },
    "squid-master/test/test_predictor.py": {
        "PredictorTestCase.setUp": {
            "name": "setUp",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PredictorTestCase.get_input": {
            "name": "get_input",
            "location": 30,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PredictorTestCase.get_rnn": {
            "name": "get_rnn",
            "location": 38,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "num_layers": [
                    "int",
                    "float",
                    "List[float]",
                    "List[str]"
                ],
                "bidirectional": [
                    "int"
                ]
            }
        },
        "PredictorTestCase.check_match": {
            "name": "check_match",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "all_states": [
                    "int",
                    "List[list[int]]",
                    "None",
                    "torch.Tensor",
                    "numpy.ndarray",
                    "List[List[int]]",
                    "Optional[torch.BoolTensor]"
                ],
                "last_hidden_state": [
                    "raiden.utils.BlockNumber"
                ],
                "seq_lens": [
                    "int",
                    "List[list[int]]",
                    "None",
                    "torch.Tensor",
                    "numpy.ndarray",
                    "List[List[int]]",
                    "Optional[torch.BoolTensor]"
                ]
            }
        },
        "PredictorTestCase.test_get_last_hidden_states_simple": {
            "name": "test_get_last_hidden_states_simple",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PredictorTestCase.test_get_last_hidden_states_two_layers": {
            "name": "test_get_last_hidden_states_two_layers",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PredictorTestCase.test_get_last_hidden_states_bidirectional": {
            "name": "test_get_last_hidden_states_bidirectional",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PredictorTestCase.test_get_last_hidden_states_bidirectional_two_layer": {
            "name": "test_get_last_hidden_states_bidirectional_two_layer",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "squid-master/test/test_qa.py": {
        "EncodingTestCase.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EncodingTestCase.test_answer_init": {
            "name": "test_answer_init",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EncodingTestCase.test_qa_init": {
            "name": "test_qa_init",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EncodingTestCase.test_context_qa_init": {
            "name": "test_context_qa_init",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EncodingTestCase.test_answer_encoding": {
            "name": "test_answer_encoding",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EncodingTestCase.test_encoded_qa": {
            "name": "test_encoded_qa",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EncodingTestCase.test_encoded_cqa": {
            "name": "test_encoded_cqa",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EncodingTestCase.test_encoded_sample": {
            "name": "test_encoded_sample",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EncodingTestCase.setUp.split_tokenize": {
            "name": "split_tokenize",
            "location": 29,
            "return": [
                "List[Token]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "txt": [
                    "dict",
                    "int"
                ]
            }
        }
    },
    "squid-master/test/test_tokenizer.py": {
        "BatcherTestCase.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BatcherTestCase.test_nltk_tokenize": {
            "name": "test_nltk_tokenize",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "squid-master/test/test_wv.py": {
        "WordVectorsTestCase.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordVectorsTestCase.test_reading_simple": {
            "name": "test_reading_simple",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordVectorsTestCase.test_reading_add_unk": {
            "name": "test_reading_add_unk",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordVectorsTestCase.test_reading_add_padd": {
            "name": "test_reading_add_padd",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordVectorsTestCase.test_reading_consume_first_line": {
            "name": "test_reading_consume_first_line",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordVectorsTestCase.test_serialization": {
            "name": "test_serialization",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "squid-master/test/__init__.py": {},
    "squid-master/test/modules/test_embeddor.py": {
        "WordEmbeddorTestCase.setUp": {
            "name": "setUp",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordEmbeddorTestCase.test_word_embeddor": {
            "name": "test_word_embeddor",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PoolingCharEmbeddorTestCase.setUp": {
            "name": "setUp",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PoolingCharEmbeddorTestCase.test_pooling_char_embeddor": {
            "name": "test_pooling_char_embeddor",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConcatenatingEmbeddorTestCase.setUp": {
            "name": "setUp",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConcatenatingEmbeddorTestCase.test_word_and_char_pooling_concatenating_embeddor": {
            "name": "test_word_and_char_pooling_concatenating_embeddor",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "squid-master/test/modules/__init__.py": {}
}
{
    "ssa-tool-master/setup.py": {},
    "ssa-tool-master/ssa.py": {},
    "ssa-tool-master/ssa/bundle.py": {
        "_yaml_represent_OrderedDict": {
            "name": "_yaml_represent_OrderedDict",
            "location": 10,
            "return": [
                "yaml.nodes.MappingNode"
            ],
            "arguments": {
                "dumper": [
                    "int",
                    "bool",
                    "Dict[str, Any]",
                    "dict",
                    "Callable"
                ],
                "data": [
                    "Dict[str,Any]",
                    "Dict",
                    "int",
                    "bool",
                    "Callable"
                ]
            }
        },
        "Bundle.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "None",
                    "List[int]",
                    "Optional[str]"
                ]
            }
        },
        "Bundle.set_path": {
            "name": "set_path",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "Bundle.exists": {
            "name": "exists",
            "location": 42,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "Bundle.create": {
            "name": "create",
            "location": 47,
            "return": [
                "Bundle"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "Bundle.load": {
            "name": "load",
            "location": 70,
            "return": [
                "Bundle"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "Bundle.yaml_represent": {
            "name": "yaml_represent",
            "location": 85,
            "return": [
                "yaml.nodes.MappingNode"
            ],
            "arguments": {
                "dumper": [
                    "Dict",
                    "str",
                    "bytes"
                ],
                "data": [
                    "Dict[str, Any]",
                    "dict",
                    "Sequence[float]",
                    "Mapping"
                ]
            }
        },
        "Bundle.save": {
            "name": "save",
            "location": 91,
            "return": [
                "Bundle"
            ],
            "arguments": {
                "self": [
                    "_TBundle@@Bundle@@"
                ]
            }
        },
        "Bundle.dump": {
            "name": "dump",
            "location": 99,
            "return": [
                "str",
                "Optional[str]",
                "Optional[int]",
                "logging.LogRecord",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bundle._add_component": {
            "name": "_add_component",
            "location": 104,
            "return": [
                "Bundle"
            ],
            "arguments": {
                "self": [
                    "_TBundle@@Bundle@@"
                ],
                "kind": [
                    "str",
                    "Optional[Union[str,Any]]",
                    "Callable",
                    "List",
                    "Any",
                    "None"
                ],
                "component": [
                    "dict"
                ]
            }
        },
        "Bundle.add_predicate": {
            "name": "add_predicate",
            "location": 115,
            "return": [
                "Bundle"
            ],
            "arguments": {
                "self": [
                    "_TBundle@@Bundle@@"
                ]
            }
        },
        "Bundle.add_move": {
            "name": "add_move",
            "location": 119,
            "return": [
                "Bundle"
            ],
            "arguments": {
                "self": [
                    "_TBundle@@Bundle@@"
                ]
            }
        },
        "Bundle.add_algorithm": {
            "name": "add_algorithm",
            "location": 123,
            "return": [
                "Bundle"
            ],
            "arguments": {
                "self": [
                    "_TBundle@@Bundle@@"
                ],
                "name": [
                    "str",
                    "Dict",
                    "int"
                ]
            }
        },
        "Bundle.add_rule_to_algorithm": {
            "name": "add_rule_to_algorithm",
            "location": 131,
            "return": [
                "Bundle"
            ],
            "arguments": {
                "self": [
                    "_TBundle@@Bundle@@"
                ],
                "algorithm_name": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "predicate_file": [
                    "str",
                    "bool",
                    "Dict",
                    "None",
                    "Optional[int]",
                    "MutableMapping",
                    "Optional[Dict]",
                    "MutableMapping[str,Any]",
                    "int"
                ],
                "move_file": [
                    "str",
                    "bool",
                    "Dict",
                    "None",
                    "Optional[int]",
                    "MutableMapping",
                    "Optional[Dict]",
                    "MutableMapping[str,Any]",
                    "int"
                ]
            }
        },
        "Bundle.load_algorithm": {
            "name": "load_algorithm",
            "location": 146,
            "return": [
                "core.Algorithm"
            ],
            "arguments": {
                "self": [],
                "algorithm_name": [
                    "str"
                ]
            }
        },
        "Bundle.normalize": {
            "name": "normalize",
            "location": 161,
            "return": [
                "Bundle"
            ],
            "arguments": {
                "self": [
                    "_TBundle@@Bundle@@"
                ]
            }
        },
        "Bundle._find_component": {
            "name": "_find_component",
            "location": 185,
            "return": [
                "None",
                "bool",
                "str",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "int",
                    "List[str]"
                ],
                "component": [
                    "str",
                    "bool",
                    "Optional[float]",
                    "Sequence[float]",
                    "int",
                    "Optional[Callable[[object],Any]]"
                ]
            }
        },
        "Bundle._find_algorithm": {
            "name": "_find_algorithm",
            "location": 193,
            "return": [
                "None",
                "Optional[str]",
                "bool",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Bundle._canonicalize_path": {
            "name": "_canonicalize_path",
            "location": 201,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        }
    },
    "ssa-tool-master/ssa/cli.py": {
        "populate_parser": {
            "name": "populate_parser",
            "location": 17,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "parser": [
                    "_T0@@"
                ],
                "options": [
                    "str",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "_load_bundle": {
            "name": "_load_bundle",
            "location": 68,
            "return": [
                "ssa.bundle.Bundle"
            ],
            "arguments": {
                "bundle_path": [
                    "str",
                    "None"
                ]
            }
        },
        "new_algorithm": {
            "name": "new_algorithm",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "bundle": [
                    "str",
                    "list[Exception]",
                    "dict[, ]"
                ],
                "name": [
                    "str",
                    "list[Exception]",
                    "dict[, ]"
                ]
            }
        },
        "_new_component": {
            "name": "_new_component",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "bundle_path": [
                    "str",
                    "None"
                ],
                "component_dir": [
                    "str",
                    "None"
                ],
                "file": [
                    "str",
                    "int"
                ],
                "new_name": [
                    "str",
                    "None"
                ],
                "method": [
                    "str",
                    "None"
                ]
            }
        },
        "new_predicate": {
            "name": "new_predicate",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "bundle": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "new_move": {
            "name": "new_move",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "bundle": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "add_rule_to": {
            "name": "add_rule_to",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "bundle": [
                    "str"
                ],
                "algorithm_name": [
                    "str"
                ],
                "predicate": [
                    "str"
                ],
                "move": [
                    "str"
                ]
            }
        },
        "run_algorithm": {
            "name": "run_algorithm",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "bundle": [
                    "str",
                    "None"
                ],
                "algorithm_name": [
                    "str",
                    "None"
                ],
                "graph_generator_spec": [
                    "str"
                ],
                "iterations": [
                    "str",
                    "bool"
                ],
                "num_graphs": [
                    "str",
                    "None",
                    "bool"
                ]
            }
        },
        "yaml_print_all": {
            "name": "yaml_print_all",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "l": [
                    "list[]",
                    "int"
                ]
            }
        },
        "list_algorithms": {
            "name": "list_algorithms",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "bundle": [
                    "str",
                    "bool"
                ]
            }
        },
        "_list_components": {
            "name": "_list_components",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "bundle": [
                    "dict[str, bool]",
                    "int",
                    "str"
                ],
                "component": [
                    "dict[str, bool]",
                    "int",
                    "str"
                ]
            }
        },
        "_list_generators_with_prefix": {
            "name": "_list_generators_with_prefix",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "bundle": [
                    "str",
                    "int",
                    "list[]",
                    "None"
                ],
                "prefix": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ssa-tool-master/ssa/core.py": {
        "Executable.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "Executable._run": {
            "name": "_run",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "symbol_table": [
                    "bool",
                    "Callable"
                ]
            }
        },
        "Executable.__repr__": {
            "name": "__repr__",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Executable.__str__": {
            "name": "__str__",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Executable.ensure_resolved": {
            "name": "ensure_resolved",
            "location": 57,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Executable._define": {
            "name": "_define",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Predicate.__call__": {
            "name": "__call__",
            "location": 82,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "neighbors": []
            }
        },
        "Move.__call__": {
            "name": "__call__",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "neighbors": []
            }
        },
        "Rule.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "predicate": [
                    "int",
                    "float",
                    "bool"
                ],
                "move": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Rule.applies_to": {
            "name": "applies_to",
            "location": 121,
            "return": [
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "neighbors": []
            }
        },
        "Rule.apply_to": {
            "name": "apply_to",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "neighbors": []
            }
        },
        "Rule.__repr__": {
            "name": "__repr__",
            "location": 137,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rule.__str__": {
            "name": "__str__",
            "location": 140,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphTimeline.__init__": {
            "name": "__init__",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "GraphTimeline.add_step": {
            "name": "add_step",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rule": [
                    "float",
                    "List",
                    "List[List[T]]",
                    "bool",
                    "List[list[T]]",
                    "List[Union[PipeChain,str]]",
                    "List[Union[C,str]]"
                ],
                "node": [
                    "float",
                    "List",
                    "List[List[T]]",
                    "bool",
                    "List[list[T]]",
                    "List[Union[PipeChain,str]]",
                    "List[Union[C,str]]"
                ],
                "new_data": [
                    "float",
                    "List",
                    "List[List[T]]",
                    "bool",
                    "List[list[T]]",
                    "List[Union[PipeChain,str]]",
                    "List[Union[C,str]]"
                ]
            }
        },
        "GraphTimeline.report": {
            "name": "report",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Algorithm.__init__": {
            "name": "__init__",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rules": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Algorithm.run": {
            "name": "run",
            "location": 188,
            "return": [
                "Tuple[(bool, GraphTimeline)]"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "str"
                ],
                "max_steps": [
                    "int",
                    "Optional[List[int]]",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "Algorithm.find_privileged_nodes": {
            "name": "find_privileged_nodes",
            "location": 227,
            "return": [
                "Dict[(TNode, Tuple[(List[TNode], list)])]"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "networkx.Graph"
                ]
            }
        },
        "Algorithm.pick_node_under_rule": {
            "name": "pick_node_under_rule",
            "location": 258,
            "return": [
                "Tuple[(None, Optional[List[TNode]], None)]"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "Sequence[str]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "Algorithm.ensure_resolved": {
            "name": "ensure_resolved",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphTimeline.Step.__init__": {
            "name": "__init__",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rule": [
                    "int",
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ],
                "node": [
                    "int",
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ],
                "new_data": [
                    "str",
                    "Dict[str, Any]",
                    "bytes",
                    "bool"
                ]
            }
        },
        "GraphTimeline.Step.__repr__": {
            "name": "__repr__",
            "location": 163,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphTimeline.Step.__str__": {
            "name": "__str__",
            "location": 166,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ssa-tool-master/ssa/trial.py": {
        "description": {
            "name": "description",
            "location": 10,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "description": [
                    "bool",
                    "str"
                ]
            }
        },
        "arg": {
            "name": "arg",
            "location": 17,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "name": [
                    "Optional[str]",
                    "str",
                    "Optional[bool]",
                    "None",
                    "Optional[Iterable[str]]",
                    "bool",
                    "Optional[float]",
                    "Iterable[str]",
                    "int",
                    "float"
                ],
                "description": [
                    "Optional[str]",
                    "str",
                    "Optional[bool]",
                    "None",
                    "Optional[Iterable[str]]",
                    "bool",
                    "Optional[float]",
                    "Iterable[str]",
                    "int",
                    "float"
                ]
            }
        },
        "apply_properties": {
            "name": "apply_properties",
            "location": 26,
            "return": [
                "List[P]",
                "Type",
                "List[int]",
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "graph": [
                    "List[P]",
                    "List[int]",
                    "T",
                    "List[OverloadPart]"
                ],
                "property_generators": [
                    "Dict[str,Callable[,Any]]",
                    "int",
                    "bool"
                ]
            }
        },
        "get_value_generator": {
            "name": "get_value_generator",
            "location": 34,
            "return": [
                "str",
                "Tuple[int, int]",
                "int"
            ],
            "arguments": {
                "member": [
                    "str",
                    "Tuple[int,int]",
                    "int"
                ]
            }
        },
        "get_graph_generator_parser": {
            "name": "get_graph_generator_parser",
            "location": 38,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "member": [
                    "str",
                    "Callable"
                ]
            }
        },
        "get_generators": {
            "name": "get_generators",
            "location": 42,
            "return": [
                "Dict[(str, Tuple[(Any, Optional[collections.OrderedDict])])]"
            ],
            "arguments": {
                "prefix": [
                    "str"
                ]
            }
        },
        "_get_function_description": {
            "name": "_get_function_description",
            "location": 63,
            "return": [
                "str",
                "Union[int, float]",
                "bool"
            ],
            "arguments": {
                "function_code_object": [
                    "bool",
                    "Exception",
                    "Type",
                    "str",
                    "Type[Any]",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "_get_signature_arguments": {
            "name": "_get_signature_arguments",
            "location": 70,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "function_code_object": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "geng_gn": {
            "name": "geng_gn",
            "location": 96,
            "return": [
                "Callable[([], Any)]"
            ],
            "arguments": {
                "number_of_nodes": [
                    "str",
                    "int",
                    "random.Random"
                ]
            }
        },
        "geng_gnm": {
            "name": "geng_gnm",
            "location": 103,
            "return": [
                "Callable[([], Any)]"
            ],
            "arguments": {
                "number_of_nodes": [
                    "str",
                    "int"
                ],
                "number_of_edges": [
                    "str",
                    "int"
                ]
            }
        },
        "genp_bool": {
            "name": "genp_bool",
            "location": 108,
            "return": [
                "Callable[([], Any)]"
            ],
            "arguments": {}
        },
        "genp_choice": {
            "name": "genp_choice",
            "location": 114,
            "return": [
                "Callable[([], Any)]"
            ],
            "arguments": {}
        },
        "genp_rangef": {
            "name": "genp_rangef",
            "location": 121,
            "return": [
                "Callable[([], Any)]"
            ],
            "arguments": {
                "min": [
                    "float",
                    "int"
                ],
                "max": [
                    "str",
                    "float",
                    "int",
                    "random.Random"
                ]
            }
        },
        "genp_range": {
            "name": "genp_range",
            "location": 131,
            "return": [
                "Callable[([], Any)]"
            ],
            "arguments": {
                "min": [
                    "str",
                    "float",
                    "int"
                ],
                "max": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 135,
            "return": [
                "Dict[(bool, list)]"
            ],
            "arguments": {
                "algorithm": [
                    "int",
                    "float"
                ],
                "graph_generator": [
                    "int",
                    "float",
                    "str"
                ],
                "num_iterations": [
                    "int",
                    "float",
                    "str"
                ],
                "num_graphs": [
                    "int",
                    "float",
                    "str"
                ],
                "timeout_seconds": [
                    "int",
                    "List[str]",
                    "Union[str,List[str],Tuple[str,...]]",
                    "str",
                    "bytes",
                    "List"
                ],
                "workers": [
                    "int",
                    "float"
                ]
            }
        },
        "description.decorator": {
            "name": "decorator",
            "location": 12,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "arg.decorator": {
            "name": "decorator",
            "location": 19,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "dict"
                ]
            }
        }
    },
    "ssa-tool-master/ssa/__init__.py": {},
    "ssa-tool-master/test/test.py": {
        "mark": {
            "name": "mark",
            "location": 9,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "node": [
                    "Type[BaseException]",
                    "Optional[Type[BaseException]]",
                    "Union[bool, str]"
                ],
                "_neighbors": [
                    "List[int]"
                ]
            }
        },
        "unmark": {
            "name": "unmark",
            "location": 12,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "node": [
                    "Set[str]",
                    "dict",
                    "type"
                ],
                "_neighbors": [
                    "List[int]"
                ]
            }
        },
        "_mark_info": {
            "name": "_mark_info",
            "location": 15,
            "return": [
                "Tuple[(Any, bool)]"
            ],
            "arguments": {
                "node": [
                    "dict"
                ],
                "neighbors": [
                    "int",
                    "float",
                    "str",
                    "Dict"
                ]
            }
        },
        "can_mark": {
            "name": "can_mark",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "node": [],
                "neighbors": []
            }
        },
        "must_unmark": {
            "name": "must_unmark",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "node": [],
                "neighbors": []
            }
        },
        "rand_graph": {
            "name": "rand_graph",
            "location": 26,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "dimen": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "run_test": {
            "name": "run_test",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "algorithm": [
                    "str",
                    "int"
                ]
            }
        }
    }
}
{
    "starlette-files-master/setup.py": {
        "get_version": {
            "name": "get_version",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "package": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_package_data": {
            "name": "get_package_data",
            "location": 18,
            "return": [
                "Dict[(_T0, list)]"
            ],
            "arguments": {
                "package": [
                    "_T0"
                ]
            }
        },
        "get_long_description": {
            "name": "get_long_description",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_packages": {
            "name": "get_packages",
            "location": 40,
            "return": [
                "list"
            ],
            "arguments": {
                "package": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "starlette-files-master/example/main.py": {
        "MyImageModel.get_rendition": {
            "name": "get_rendition",
            "location": 39,
            "return": [
                "MyImageRenditionModel"
            ],
            "arguments": {
                "self": [],
                "filter_specs": [
                    "List[str]"
                ]
            }
        }
    },
    "starlette-files-master/example/__init__.py": {},
    "starlette-files-master/starlette_files/constants.py": {},
    "starlette-files-master/starlette_files/exceptions.py": {
        "ContentTypeValidationError.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content_type": [
                    "Optional[List[str]]",
                    "None",
                    "Optional[Mapping[str, Any]]",
                    "list[str]",
                    "Tuple[Optional[str], Optional[str]]",
                    "typing.Mapping",
                    "Dict[str, str]",
                    "tuple[typing.Union[str,None,str,None]]",
                    "Optional[Dict[str, Any]]",
                    "dict[str, str]",
                    "Optional[Sequence[Any]]",
                    "typing.Sequence[typing.Any]"
                ],
                "valid_content_types": [
                    "str",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "set[str]",
                    "list[]",
                    "Set[str]",
                    "bool",
                    "Optional[str]",
                    "list"
                ]
            }
        },
        "MaximumAllowedFileLengthError.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_length": [
                    "int"
                ]
            }
        }
    },
    "starlette-files-master/starlette_files/fields.py": {
        "FileAttachment._guess_content_type": {
            "name": "_guess_content_type",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "file": [
                    "IO"
                ]
            }
        },
        "FileAttachment.set_defaults": {
            "name": "set_defaults",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "IO"
                ],
                "original_filename": [
                    "str"
                ]
            }
        },
        "FileAttachment.validate": {
            "name": "validate",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileAttachment.create_from": {
            "name": "create_from",
            "location": 69,
            "return": [
                "FileAttachment"
            ],
            "arguments": {
                "cls": [
                    "Type[_TFileAttachment]"
                ],
                "file": [
                    "IO"
                ],
                "original_filename": [
                    "str"
                ]
            }
        },
        "FileAttachment.original_filename": {
            "name": "original_filename",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "FileAttachment.saved_filename": {
            "name": "saved_filename",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "FileAttachment.uploaded_on": {
            "name": "uploaded_on",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Dict[str, Tuple[str, str]]",
                    "int",
                    "float"
                ]
            }
        },
        "FileAttachment.file_size": {
            "name": "file_size",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "FileAttachment.content_type": {
            "name": "content_type",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool",
                    "int",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "FileAttachment.extension": {
            "name": "extension",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "int",
                    "str",
                    "Tuple[int, int]"
                ]
            }
        },
        "FileAttachment.path": {
            "name": "path",
            "location": 128,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileAttachment.locate": {
            "name": "locate",
            "location": 132,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileAttachment.open": {
            "name": "open",
            "location": 136,
            "return": [
                "str",
                "uuid.UUID"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageAttachment.create_from": {
            "name": "create_from",
            "location": 146,
            "return": [
                "ImageAttachment"
            ],
            "arguments": {
                "cls": [
                    "Type[_TImageAttachment]"
                ],
                "file": [
                    "IO"
                ],
                "original_filename": [
                    "str"
                ]
            }
        },
        "ImageAttachment.get_focal_point": {
            "name": "get_focal_point",
            "location": 164,
            "return": [
                "Optional[starlette_files.image.rect.Rect]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageAttachment.width": {
            "name": "width",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "ImageAttachment.height": {
            "name": "height",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "int",
                    "str",
                    "Tuple[int, int]"
                ]
            }
        },
        "ImageAttachment.focal_point_x": {
            "name": "focal_point_x",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Tuple[int, int]",
                    "int",
                    "float"
                ]
            }
        },
        "ImageAttachment.focal_point_y": {
            "name": "focal_point_y",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "int",
                    "str",
                    "Tuple[int, int]"
                ]
            }
        },
        "ImageAttachment.focal_point_width": {
            "name": "focal_point_width",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "ImageAttachment.focal_point_height": {
            "name": "focal_point_height",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "int",
                    "str",
                    "Tuple[int, int]"
                ]
            }
        },
        "ImageAttachment.cache_key": {
            "name": "cache_key",
            "location": 229,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageRenditionAttachment.create_from": {
            "name": "create_from",
            "location": 252,
            "return": [
                "ImageRenditionAttachment"
            ],
            "arguments": {
                "cls": [
                    "Type[_TImageRenditionAttachment]"
                ],
                "attachment": [
                    "ImageAttachment"
                ],
                "filter_specs": [
                    "List[str]"
                ]
            }
        },
        "ImageRenditionAttachment.width": {
            "name": "width",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "ImageRenditionAttachment.height": {
            "name": "height",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "int",
                    "str",
                    "Tuple[int, int]"
                ]
            }
        },
        "ImageRenditionAttachment.cache_key": {
            "name": "cache_key",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "float"
                ]
            }
        }
    },
    "starlette-files-master/starlette_files/helpers.py": {
        "copy_stream": {
            "name": "copy_stream",
            "location": 7,
            "return": [
                "int"
            ],
            "arguments": {
                "source": [
                    "bool",
                    "str",
                    "bytes",
                    "Optional[List[str]]",
                    "list[str]",
                    "int",
                    "None"
                ],
                "target": [
                    "IO"
                ]
            }
        },
        "get_length": {
            "name": "get_length",
            "location": 18,
            "return": [
                "int"
            ],
            "arguments": {
                "source": [
                    "IO"
                ]
            }
        }
    },
    "starlette-files-master/starlette_files/mimetypes.py": {
        "magic_mime_from_buffer": {
            "name": "magic_mime_from_buffer",
            "location": 7,
            "return": [
                "str"
            ],
            "arguments": {
                "buffer": [
                    "bytes"
                ]
            }
        },
        "guess_extension": {
            "name": "guess_extension",
            "location": 11,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "mimetype": [
                    "str"
                ]
            }
        }
    },
    "starlette-files-master/starlette_files/__init__.py": {},
    "starlette-files-master/starlette_files/image/filter.py": {
        "ImageFilter.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "specs": [
                    "List[str]"
                ]
            }
        },
        "ImageFilter.operations": {
            "name": "operations",
            "location": 15,
            "return": [
                "list[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageFilter.run": {
            "name": "run",
            "location": 35,
            "return": [
                "_T2"
            ],
            "arguments": {
                "self": [],
                "attachment": [
                    "Tuple[str, int]",
                    "tuple[typing.Union[str,int]]",
                    "bool",
                    "List[Dict[str, Any]]",
                    "str",
                    "list[dict[str, typing.Any]]"
                ],
                "image": [
                    "str",
                    "int",
                    "List[str]",
                    "\"Element\""
                ],
                "output": [
                    "_T2"
                ]
            }
        },
        "ImageFilter._search_for_operations": {
            "name": "_search_for_operations",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "Tuple[str, Optional[str]]",
                    "tuple[typing.Union[str,str,None]]",
                    "Optional[str]",
                    "str",
                    "List[Optional[int]]",
                    "None",
                    "Callable[..., T]",
                    "list[typing.Optional[int]]",
                    "Optional[Tuple[int, int]]",
                    "typing.Callable[..., T]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        }
    },
    "starlette-files-master/starlette_files/image/rect.py": {
        "Vector.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "Vector.__iter__": {
            "name": "__iter__",
            "location": 9,
            "return": [
                "tupleiterator[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vector.__getitem__": {
            "name": "__getitem__",
            "location": 12,
            "return": [
                "str",
                "bytearray",
                "Union[str, bytes]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int",
                    "str",
                    "Hashable",
                    "Union[str, int]",
                    "Tuple[int, int]",
                    "T",
                    "dict"
                ]
            }
        },
        "Vector.__eq__": {
            "name": "__eq__",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Iterable[T]",
                    "Set[VT]"
                ]
            }
        },
        "Vector.__repr__": {
            "name": "__repr__",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rect.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "left": [
                    "int"
                ],
                "top": [
                    "int"
                ],
                "right": [
                    "int"
                ],
                "bottom": [
                    "int"
                ]
            }
        },
        "Rect._get_size": {
            "name": "_get_size",
            "location": 29,
            "return": [
                "Vector"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rect._set_size": {
            "name": "_set_size",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_size": [
                    "list['Photo']",
                    "str",
                    "int",
                    "List['Photo']"
                ]
            }
        },
        "Rect.width": {
            "name": "width",
            "location": 42,
            "return": [
                "type",
                "Type",
                "Sequence[T]",
                "Callable[[T], bool]",
                "Union[int, float, complex]",
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rect.height": {
            "name": "height",
            "location": 46,
            "return": [
                "int",
                "List[Tuple[int, float, float]]",
                "List[int]",
                "List[List[int]]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rect._get_centroid": {
            "name": "_get_centroid",
            "location": 49,
            "return": [
                "Vector"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rect._set_centroid": {
            "name": "_set_centroid",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_centroid": [
                    "int",
                    "float"
                ]
            }
        },
        "Rect.x": {
            "name": "x",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rect.y": {
            "name": "y",
            "location": 66,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rect.centroid_x": {
            "name": "centroid_x",
            "location": 70,
            "return": [
                "int",
                "str",
                "Optional[int]",
                "Tuple[Tuple[int, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rect.centroid_y": {
            "name": "centroid_y",
            "location": 75,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rect.as_tuple": {
            "name": "as_tuple",
            "location": 79,
            "return": [
                "Tuple[(Any, Any, Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rect.clone": {
            "name": "clone",
            "location": 84,
            "return": [
                "Rect"
            ],
            "arguments": {
                "self": [
                    "_TRect"
                ]
            }
        },
        "Rect.round": {
            "name": "round",
            "location": 87,
            "return": [
                "Rect"
            ],
            "arguments": {
                "self": [
                    "_TRect"
                ]
            }
        },
        "Rect.move_to_clamp": {
            "name": "move_to_clamp",
            "location": 103,
            "return": [
                "Rect"
            ],
            "arguments": {
                "self": [
                    "_TRect"
                ],
                "other": []
            }
        },
        "Rect.move_to_cover": {
            "name": "move_to_cover",
            "location": 129,
            "return": [
                "Rect"
            ],
            "arguments": {
                "self": [
                    "_TRect"
                ],
                "other": []
            }
        },
        "Rect.__iter__": {
            "name": "__iter__",
            "location": 155,
            "return": [
                "tupleiterator[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rect.__getitem__": {
            "name": "__getitem__",
            "location": 158,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "KT"
                ]
            }
        },
        "Rect.__eq__": {
            "name": "__eq__",
            "location": 161,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Iterable[T]",
                    "Set[VT]"
                ]
            }
        },
        "Rect.__repr__": {
            "name": "__repr__",
            "location": 164,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rect.from_point": {
            "name": "from_point",
            "location": 173,
            "return": [
                "Rect"
            ],
            "arguments": {
                "cls": [
                    "Type[_TRect]"
                ],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ],
                "width": [
                    "int"
                ],
                "height": [
                    "int"
                ]
            }
        }
    },
    "starlette-files-master/starlette_files/image/utils.py": {
        "has_alpha": {
            "name": "has_alpha",
            "location": 7,
            "return": [
                "bool"
            ],
            "arguments": {
                "image": [
                    "int",
                    "Image",
                    "PIL.Image.Image"
                ]
            }
        },
        "to_rgb": {
            "name": "to_rgb",
            "location": 13,
            "return": [
                "str",
                "int",
                "List[int]"
            ],
            "arguments": {
                "image": [
                    "Image"
                ]
            }
        }
    },
    "starlette-files-master/starlette_files/image/__init__.py": {},
    "starlette-files-master/starlette_files/image/operations/base.py": {
        "Operation.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "bool",
                    "int",
                    "list[str]",
                    "List[str]",
                    "str",
                    "typing.Sequence[str]",
                    "Sequence[str]",
                    "float",
                    "Optional[float]",
                    "None"
                ]
            }
        },
        "Operation.construct": {
            "name": "construct",
            "location": 28,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Operation.run": {
            "name": "run",
            "location": 31,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "pillow": [
                    "dict",
                    "bool",
                    "dict[, ]",
                    "str",
                    "List[Tuple[str, str]]",
                    "list[tuple[typing.Union[str,str]]]",
                    "Optional[List]",
                    "list[]",
                    "None"
                ],
                "attachment": [
                    "dict",
                    "bool",
                    "dict[, ]",
                    "str",
                    "List[Tuple[str, str]]",
                    "list[tuple[typing.Union[str,str]]]",
                    "Optional[List]",
                    "list[]",
                    "None"
                ],
                "env": [
                    "dict"
                ]
            }
        }
    },
    "starlette-files-master/starlette_files/image/operations/crop.py": {
        "CropOperation.construct": {
            "name": "construct",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "str",
                    "int"
                ]
            }
        },
        "CropOperation.run": {
            "name": "run",
            "location": 14,
            "return": [
                "str",
                "bool",
                "int",
                "float",
                "list"
            ],
            "arguments": {
                "self": [],
                "pillow": [
                    "bool",
                    "str",
                    "float",
                    "\"Vec3\"",
                    "int"
                ],
                "attachment": [
                    "list[str]",
                    "str",
                    "List[str]",
                    "int",
                    "typing.Callable[, ]",
                    "Callable",
                    "bool"
                ],
                "env": [
                    "dict",
                    "bool",
                    "dict[, ]",
                    "str",
                    "List[Tuple[str, str]]",
                    "list[tuple[typing.Union[str,str]]]",
                    "Optional[List]",
                    "list[]",
                    "None"
                ]
            }
        }
    },
    "starlette-files-master/starlette_files/image/operations/do_nothing.py": {
        "DoNothingOperation.construct": {
            "name": "construct",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DoNothingOperation.run": {
            "name": "run",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pillow": [
                    "dict",
                    "bool",
                    "dict[, ]",
                    "str",
                    "List[Tuple[str, str]]",
                    "list[tuple[typing.Union[str,str]]]",
                    "Optional[List]",
                    "list[]",
                    "None"
                ],
                "attachment": [
                    "dict",
                    "bool",
                    "dict[, ]",
                    "str",
                    "List[Tuple[str, str]]",
                    "list[tuple[typing.Union[str,str]]]",
                    "Optional[List]",
                    "list[]",
                    "None"
                ],
                "env": [
                    "dict",
                    "bool",
                    "dict[, ]",
                    "str",
                    "List[Tuple[str, str]]",
                    "list[tuple[typing.Union[str,str]]]",
                    "Optional[List]",
                    "list[]",
                    "None"
                ]
            }
        }
    },
    "starlette-files-master/starlette_files/image/operations/fill.py": {
        "FillOperation.construct": {
            "name": "construct",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "str",
                    "int",
                    "float",
                    "raiden.utils.BlockExpiration"
                ]
            }
        },
        "FillOperation.run": {
            "name": "run",
            "location": 34,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "self": [],
                "pillow": [
                    "int",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ],
                "attachment": [
                    "list[str]",
                    "str",
                    "List[str]",
                    "int",
                    "typing.Callable[, ]",
                    "Callable",
                    "bool"
                ],
                "env": [
                    "dict",
                    "bool",
                    "dict[, ]",
                    "str",
                    "List[Tuple[str, str]]",
                    "list[tuple[typing.Union[str,str]]]",
                    "Optional[List]",
                    "list[]",
                    "None"
                ]
            }
        }
    },
    "starlette-files-master/starlette_files/image/operations/format.py": {
        "FormatOperation.construct": {
            "name": "construct",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fmt": [
                    "str",
                    "int",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "FormatOperation.run": {
            "name": "run",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pillow": [
                    "dict",
                    "bool",
                    "dict[, ]",
                    "str",
                    "List[Tuple[str, str]]",
                    "list[tuple[typing.Union[str,str]]]",
                    "Optional[List]",
                    "list[]",
                    "None"
                ],
                "attachment": [
                    "dict",
                    "bool",
                    "dict[, ]",
                    "str",
                    "List[Tuple[str, str]]",
                    "list[tuple[typing.Union[str,str]]]",
                    "Optional[List]",
                    "list[]",
                    "None"
                ],
                "env": [
                    "list[str]",
                    "str",
                    "List[str]",
                    "int",
                    "typing.Callable[, ]",
                    "Callable",
                    "bool"
                ]
            }
        }
    },
    "starlette-files-master/starlette_files/image/operations/min_max.py": {
        "MinMaxOperation.construct": {
            "name": "construct",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "str",
                    "int",
                    "float",
                    "raiden.utils.BlockExpiration"
                ]
            }
        },
        "MinMaxOperation.run": {
            "name": "run",
            "location": 16,
            "return": [
                "T",
                "None"
            ],
            "arguments": {
                "self": [],
                "pillow": [
                    "bool",
                    "float",
                    "dict",
                    "dict[, ]"
                ],
                "attachment": [
                    "dict",
                    "bool",
                    "dict[, ]",
                    "str",
                    "List[Tuple[str, str]]",
                    "list[tuple[typing.Union[str,str]]]",
                    "Optional[List]",
                    "list[]",
                    "None"
                ],
                "env": [
                    "dict",
                    "bool",
                    "dict[, ]",
                    "str",
                    "List[Tuple[str, str]]",
                    "list[tuple[typing.Union[str,str]]]",
                    "Optional[List]",
                    "list[]",
                    "None"
                ]
            }
        }
    },
    "starlette-files-master/starlette_files/image/operations/scale.py": {
        "ScaleOperation.construct": {
            "name": "construct",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "percent": [
                    "int",
                    "float"
                ]
            }
        },
        "ScaleOperation.run": {
            "name": "run",
            "location": 8,
            "return": [
                "str",
                "Union[int, float]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "pillow": [
                    "int",
                    "bool",
                    "float",
                    "str",
                    "Tuple[int, int]"
                ],
                "attachment": [
                    "dict",
                    "bool",
                    "dict[, ]",
                    "str",
                    "List[Tuple[str, str]]",
                    "list[tuple[typing.Union[str,str]]]",
                    "Optional[List]",
                    "list[]",
                    "None"
                ],
                "env": [
                    "dict",
                    "bool",
                    "dict[, ]",
                    "str",
                    "List[Tuple[str, str]]",
                    "list[tuple[typing.Union[str,str]]]",
                    "Optional[List]",
                    "list[]",
                    "None"
                ]
            }
        }
    },
    "starlette-files-master/starlette_files/image/operations/width_height.py": {
        "WidthHeightOperation.construct": {
            "name": "construct",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "str"
                ]
            }
        },
        "WidthHeightOperation.run": {
            "name": "run",
            "location": 14,
            "return": [
                "T",
                "None"
            ],
            "arguments": {
                "self": [],
                "pillow": [
                    "bool",
                    "float",
                    "dict",
                    "dict[, ]"
                ],
                "attachment": [
                    "dict",
                    "bool",
                    "dict[, ]",
                    "str",
                    "List[Tuple[str, str]]",
                    "list[tuple[typing.Union[str,str]]]",
                    "Optional[List]",
                    "list[]",
                    "None"
                ],
                "env": [
                    "dict",
                    "bool",
                    "dict[, ]",
                    "str",
                    "List[Tuple[str, str]]",
                    "list[tuple[typing.Union[str,str]]]",
                    "Optional[List]",
                    "list[]",
                    "None"
                ]
            }
        }
    },
    "starlette-files-master/starlette_files/image/operations/__init__.py": {},
    "starlette-files-master/starlette_files/storages/base.py": {
        "Storage.put": {
            "name": "put",
            "location": 9,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "stream": [
                    "IO"
                ]
            }
        },
        "Storage.delete": {
            "name": "delete",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "Storage.open": {
            "name": "open",
            "location": 28,
            "return": [
                "IO"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "mode": [
                    "str"
                ]
            }
        },
        "Storage.locate": {
            "name": "locate",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        }
    },
    "starlette-files-master/starlette_files/storages/filesystem.py": {
        "FileSystemStorage.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root_path": [
                    "str"
                ],
                "chunk_size": [
                    "int"
                ]
            }
        },
        "FileSystemStorage._get_physical_path": {
            "name": "_get_physical_path",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "FileSystemStorage.put": {
            "name": "put",
            "location": 18,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "stream": [
                    "IO"
                ]
            }
        },
        "FileSystemStorage.delete": {
            "name": "delete",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "FileSystemStorage.open": {
            "name": "open",
            "location": 34,
            "return": [
                "IO"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "mode": [
                    "str"
                ]
            }
        },
        "FileSystemStorage.locate": {
            "name": "locate",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        }
    },
    "starlette-files-master/starlette_files/storages/s3.py": {
        "S3Storage.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str"
                ],
                "access_key": [
                    "str"
                ],
                "secret_key": [
                    "str"
                ],
                "region": [
                    "str"
                ],
                "max_age": [
                    "int"
                ],
                "prefix": [
                    "str"
                ],
                "endpoint_url": [
                    "str"
                ],
                "acl": [
                    "str"
                ]
            }
        },
        "S3Storage.get_s3_path": {
            "name": "get_s3_path",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "S3Storage._upload_file": {
            "name": "_upload_file",
            "location": 59,
            "return": [
                "str",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "data": [
                    "str"
                ],
                "content_type": [
                    "str"
                ],
                "rrs": [
                    "bool"
                ]
            }
        },
        "S3Storage.put": {
            "name": "put",
            "location": 71,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "stream": [
                    "IO"
                ]
            }
        },
        "S3Storage.delete": {
            "name": "delete",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "S3Storage.open": {
            "name": "open",
            "location": 84,
            "return": [
                "IO"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "mode": [
                    "str"
                ]
            }
        },
        "S3Storage._strip_signing_parameters": {
            "name": "_strip_signing_parameters",
            "location": 89,
            "return": [
                "str",
                "OrderedDict",
                "int",
                "Iterator[object]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Optional[Tuple[str]]",
                    "tuple[str]",
                    "Dict[str, Any]",
                    "None",
                    "Dict[str, str]",
                    "dict[str, typing.Any]",
                    "dict[str, str]"
                ]
            }
        },
        "S3Storage.locate": {
            "name": "locate",
            "location": 109,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "starlette-files-master/starlette_files/storages/__init__.py": {},
    "starlette-files-master/tests/test_tests.py": {
        "test_test": {
            "name": "test_test",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "starlette-files-master/tests/__init__.py": {}
}
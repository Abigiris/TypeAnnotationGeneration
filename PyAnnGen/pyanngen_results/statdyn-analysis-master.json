{
    "statdyn-analysis-master/setup.py": {
        "get_version": {
            "name": "get_version",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "read": {
            "name": "read",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [],
                "encoding": [
                    "typing.Text"
                ]
            }
        }
    },
    "statdyn-analysis-master/docs/source/conf.py": {},
    "statdyn-analysis-master/src/sdanalysis/frame.py": {
        "Frame.position": {
            "name": "position",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Frame.image": {
            "name": "image",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Frame.x_position": {
            "name": "x_position",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Frame.y_position": {
            "name": "y_position",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Frame.z_position": {
            "name": "z_position",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Frame.orientation": {
            "name": "orientation",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Frame.box": {
            "name": "box",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Frame.timestep": {
            "name": "timestep",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Frame.dimensions": {
            "name": "dimensions",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Frame.__len__": {
            "name": "__len__",
            "location": 68,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Frame.freud_box": {
            "name": "freud_box",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LammpsFrame.position": {
            "name": "position",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LammpsFrame.image": {
            "name": "image",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LammpsFrame.x_position": {
            "name": "x_position",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LammpsFrame.y_position": {
            "name": "y_position",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LammpsFrame.z_position": {
            "name": "z_position",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LammpsFrame.orientation": {
            "name": "orientation",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LammpsFrame.timestep": {
            "name": "timestep",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LammpsFrame.box": {
            "name": "box",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LammpsFrame.dimensions": {
            "name": "dimensions",
            "location": 121,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LammpsFrame.__len__": {
            "name": "__len__",
            "location": 124,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "HoomdFrame.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HoomdFrame._get_num_bodies": {
            "name": "_get_num_bodies",
            "location": 137,
            "return": [
                "int"
            ],
            "arguments": {
                "cls": [],
                "snapshot": []
            }
        },
        "HoomdFrame.num_mols": {
            "name": "num_mols",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HoomdFrame.position": {
            "name": "position",
            "location": 163,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HoomdFrame.image": {
            "name": "image",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HoomdFrame.x_position": {
            "name": "x_position",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HoomdFrame.y_position": {
            "name": "y_position",
            "location": 175,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HoomdFrame.z_position": {
            "name": "z_position",
            "location": 179,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HoomdFrame.orientation": {
            "name": "orientation",
            "location": 183,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HoomdFrame.timestep": {
            "name": "timestep",
            "location": 187,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HoomdFrame.box": {
            "name": "box",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HoomdFrame.dimensions": {
            "name": "dimensions",
            "location": 199,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HoomdFrame.__len__": {
            "name": "__len__",
            "location": 204,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "statdyn-analysis-master/src/sdanalysis/main.py": {
        "_verbosity": {
            "name": "_verbosity",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [],
                "__": [],
                "value": []
            }
        },
        "_file_logger": {
            "name": "_file_logger",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [],
                "__": [],
                "value": []
            }
        },
        "sdanalysis": {
            "name": "sdanalysis",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "comp_dynamics": {
            "name": "comp_dynamics",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [],
                "mol_relaxations": [],
                "linear_dynamics": [],
                "scattering_function": [],
                "infile": [],
                "outfile": []
            }
        },
        "comp_relaxations": {
            "name": "comp_relaxations",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "infile": []
            }
        },
        "_interactive_verbosity": {
            "name": "_interactive_verbosity",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [],
                "__": [],
                "value": []
            }
        },
        "figure": {
            "name": "figure",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "ip": [],
                "directory": [],
                "model": []
            }
        }
    },
    "statdyn-analysis-master/src/sdanalysis/molecules.py": {
        "Molecule.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Molecule.num_particles": {
            "name": "num_particles",
            "location": 42,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Molecule._compute_center_of_mass": {
            "name": "_compute_center_of_mass",
            "location": 46,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": []
            }
        },
        "Molecule.get_types": {
            "name": "get_types",
            "location": 49,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Molecule.__str__": {
            "name": "__str__",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Molecule.get_radii": {
            "name": "get_radii",
            "location": 56,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": []
            }
        },
        "Molecule.__eq__": {
            "name": "__eq__",
            "location": 60,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Disc.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sphere.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Trimer.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "radius": [
                    "float"
                ],
                "distance": [
                    "float"
                ],
                "angle": [
                    "float"
                ],
                "moment_inertia_scale": [
                    "float"
                ]
            }
        },
        "Trimer.rad_angle": {
            "name": "rad_angle",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Trimer.__repr__": {
            "name": "__repr__",
            "location": 154,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Trimer.__eq__": {
            "name": "__eq__",
            "location": 160,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Dimer.__init__": {
            "name": "__init__",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "radius": [
                    "float"
                ],
                "distance": [
                    "float"
                ],
                "moment_inertia_scale": [
                    "float"
                ]
            }
        },
        "Dimer.__eq__": {
            "name": "__eq__",
            "location": 214,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "statdyn-analysis-master/src/sdanalysis/order.py": {
        "_neighbour_relative_angle": {
            "name": "_neighbour_relative_angle",
            "location": 28,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "neighbourlist": [
                    "np.ndarray"
                ],
                "orientation": [
                    "np.ndarray"
                ]
            }
        },
        "_orientational_order": {
            "name": "_orientational_order",
            "location": 68,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "neighbourlist": [
                    "np.ndarray"
                ],
                "orientation": [
                    "np.ndarray"
                ]
            }
        },
        "create_ml_ordering": {
            "name": "create_ml_ordering",
            "location": 89,
            "return": [
                "Callable[([sdanalysis.frame.Frame], np.ndarray)]"
            ],
            "arguments": {
                "model": [
                    "pathlib.Path"
                ]
            }
        },
        "create_orient_ordering": {
            "name": "create_orient_ordering",
            "location": 124,
            "return": [
                "Callable[([sdanalysis.frame.Frame], np.ndarray)]"
            ],
            "arguments": {
                "threshold": [
                    "float"
                ]
            }
        },
        "create_neigh_ordering": {
            "name": "create_neigh_ordering",
            "location": 150,
            "return": [
                "Callable[([sdanalysis.frame.Frame], np.ndarray)]"
            ],
            "arguments": {
                "neighbours": [
                    "int"
                ]
            }
        },
        "setup_neighbours": {
            "name": "setup_neighbours",
            "location": 174,
            "return": [],
            "arguments": {
                "box": [
                    "np.ndarray"
                ],
                "position": [
                    "np.ndarray"
                ],
                "max_radius": [
                    "float"
                ],
                "max_neighbours": [
                    "int"
                ],
                "is_2D": [
                    "bool"
                ]
            }
        },
        "compute_neighbours": {
            "name": "compute_neighbours",
            "location": 186,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "box": [
                    "np.ndarray"
                ],
                "position": [
                    "np.ndarray"
                ],
                "max_radius": [
                    "float"
                ],
                "max_neighbours": [
                    "int"
                ]
            }
        },
        "relative_orientations": {
            "name": "relative_orientations",
            "location": 210,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "box": [
                    "np.ndarray"
                ],
                "position": [
                    "np.ndarray"
                ],
                "orientation": [
                    "np.ndarray"
                ],
                "max_radius": [
                    "float"
                ],
                "max_neighbours": [
                    "int"
                ]
            }
        },
        "orientational_order": {
            "name": "orientational_order",
            "location": 234,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "box": [
                    "np.ndarray"
                ],
                "position": [
                    "np.ndarray"
                ],
                "orientation": [
                    "np.ndarray"
                ],
                "max_radius": [
                    "float"
                ],
                "max_neighbours": [
                    "int"
                ]
            }
        },
        "num_neighbours": {
            "name": "num_neighbours",
            "location": 265,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "box": [
                    "np.ndarray"
                ],
                "position": [
                    "np.ndarray"
                ],
                "max_radius": [
                    "float"
                ]
            }
        },
        "relative_distances": {
            "name": "relative_distances",
            "location": 284,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "box": [
                    "np.ndarray"
                ],
                "position": [
                    "np.ndarray"
                ],
                "max_radius": [
                    "float"
                ],
                "max_neighbours": [
                    "int"
                ]
            }
        },
        "compute_voronoi_neighs": {
            "name": "compute_voronoi_neighs",
            "location": 312,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "box": [
                    "np.ndarray"
                ],
                "position": [
                    "np.ndarray"
                ]
            }
        },
        "create_ml_ordering.compute_ml_order": {
            "name": "compute_ml_order",
            "location": 104,
            "return": [],
            "arguments": {
                "snap": []
            }
        },
        "create_orient_ordering.compute_orient_ordering": {
            "name": "compute_orient_ordering",
            "location": 125,
            "return": [
                "bool"
            ],
            "arguments": {
                "snap": []
            }
        },
        "create_neigh_ordering.compute_neigh_ordering": {
            "name": "compute_neigh_ordering",
            "location": 151,
            "return": [
                "bool"
            ],
            "arguments": {
                "snap": []
            }
        }
    },
    "statdyn-analysis-master/src/sdanalysis/params.py": {
        "_to_path": {
            "name": "_to_path",
            "location": 22,
            "return": [
                "Optional[pathlib.Path]"
            ],
            "arguments": {
                "value": [
                    "Optional[pathlib.Path]"
                ]
            }
        },
        "SimulationParams.infile": {
            "name": "infile",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "SimulationParams.outfile": {
            "name": "outfile",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "SimulationParams.output": {
            "name": "output",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "SimulationParams.filename": {
            "name": "filename",
            "location": 88,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str"
                ]
            }
        },
        "SimulationParams.temp_context": {
            "name": "temp_context",
            "location": 120,
            "return": [
                "typing.Generator[SimulationParams]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "statdyn-analysis-master/src/sdanalysis/relaxation.py": {
        "_msd_function": {
            "name": "_msd_function",
            "location": 38,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "x": [
                    "np.ndarray"
                ],
                "m": [
                    "float"
                ],
                "b": [
                    "float"
                ]
            }
        },
        "_exponential_decay": {
            "name": "_exponential_decay",
            "location": 52,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "x": [
                    "np.ndarray"
                ],
                "a": [
                    "float"
                ],
                "b": [
                    "float"
                ],
                "c": [
                    "float"
                ]
            }
        },
        "_ddx_exponential_decay": {
            "name": "_ddx_exponential_decay",
            "location": 63,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "x": [
                    "np.ndarray"
                ],
                "a": [
                    "float"
                ],
                "b": [
                    "float"
                ],
                "c": [
                    "float"
                ]
            }
        },
        "_d2dx2_exponential_decay": {
            "name": "_d2dx2_exponential_decay",
            "location": 80,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "x": [
                    "np.ndarray"
                ],
                "a": [
                    "float"
                ],
                "b": [
                    "float"
                ],
                "c": [
                    "float"
                ]
            }
        },
        "diffusion_constant": {
            "name": "diffusion_constant",
            "location": 100,
            "return": [
                "Result"
            ],
            "arguments": {
                "time": [
                    "np.ndarray"
                ],
                "msd": [
                    "np.ndarray"
                ],
                "dimensions": [
                    "int"
                ]
            }
        },
        "threshold_relaxation": {
            "name": "threshold_relaxation",
            "location": 132,
            "return": [
                "Result"
            ],
            "arguments": {
                "time": [
                    "np.ndarray"
                ],
                "value": [
                    "np.ndarray"
                ],
                "threshold": [
                    "float"
                ],
                "decay": [
                    "bool"
                ]
            }
        },
        "exponential_relaxation": {
            "name": "exponential_relaxation",
            "location": 159,
            "return": [
                "Result"
            ],
            "arguments": {
                "time": [
                    "np.ndarray"
                ],
                "value": [
                    "np.ndarray"
                ],
                "sigma": [
                    "np.ndarray"
                ],
                "value_width": [
                    "float"
                ]
            }
        },
        "max_time_relaxation": {
            "name": "max_time_relaxation",
            "location": 259,
            "return": [
                "Result"
            ],
            "arguments": {
                "time": [
                    "np.ndarray"
                ],
                "value": [
                    "np.ndarray"
                ]
            }
        },
        "max_value_relaxation": {
            "name": "max_value_relaxation",
            "location": 293,
            "return": [
                "Result"
            ],
            "arguments": {
                "time": [
                    "np.ndarray"
                ],
                "value": [
                    "np.ndarray"
                ]
            }
        },
        "translate_relaxation": {
            "name": "translate_relaxation",
            "location": 330,
            "return": [
                "str"
            ],
            "arguments": {
                "quantity": [
                    "str"
                ]
            }
        },
        "compute_relaxation_value": {
            "name": "compute_relaxation_value",
            "location": 352,
            "return": [
                "Result"
            ],
            "arguments": {
                "timesteps": [
                    "np.ndarray"
                ],
                "values": [
                    "np.ndarray"
                ],
                "relax_type": [
                    "str"
                ]
            }
        },
        "series_relaxation_value": {
            "name": "series_relaxation_value",
            "location": 394,
            "return": [
                "float"
            ],
            "arguments": {
                "series": []
            }
        },
        "compute_relaxations": {
            "name": "compute_relaxations",
            "location": 428,
            "return": [
                "None"
            ],
            "arguments": {
                "infile": []
            }
        },
        "compute_molecular_relaxations": {
            "name": "compute_molecular_relaxations",
            "location": 502,
            "return": [],
            "arguments": {
                "df": []
            }
        },
        "exponential_relaxation.find_root": {
            "name": "find_root",
            "location": 230,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        }
    },
    "statdyn-analysis-master/src/sdanalysis/run_analysis.py": {
        "order": {
            "name": "order",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "infile": [],
                "outfile": []
            }
        }
    },
    "statdyn-analysis-master/src/sdanalysis/StepSize.py": {
        "generate_steps": {
            "name": "generate_steps",
            "location": 18,
            "return": [
                "Iterator[int]"
            ],
            "arguments": {
                "total_steps": [
                    "int"
                ],
                "num_linear": [
                    "int"
                ],
                "start": [
                    "int"
                ]
            }
        },
        "exp_sequence": {
            "name": "exp_sequence",
            "location": 53,
            "return": [
                "Iterator[int]"
            ],
            "arguments": {
                "start": [
                    "int"
                ],
                "num_linear": [
                    "int"
                ],
                "initial_step_size": [
                    "int"
                ],
                "base": [
                    "int"
                ]
            }
        },
        "GenerateStepSeries.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "total_steps": [
                    "int"
                ],
                "num_linear": [
                    "int"
                ],
                "gen_steps": [
                    "int"
                ],
                "max_gen": [
                    "int"
                ]
            }
        },
        "GenerateStepSeries._enqueue": {
            "name": "_enqueue",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iindex": [
                    "iterindex"
                ]
            }
        },
        "GenerateStepSeries._add_generator": {
            "name": "_add_generator",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenerateStepSeries.__iter__": {
            "name": "__iter__",
            "location": 135,
            "return": [
                "GenerateStepSeries"
            ],
            "arguments": {
                "self": [
                    "_TGenerateStepSeries"
                ]
            }
        },
        "GenerateStepSeries.__next__": {
            "name": "__next__",
            "location": 138,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenerateStepSeries.get_index": {
            "name": "get_index",
            "location": 165,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenerateStepSeries.next": {
            "name": "next",
            "location": 169,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "statdyn-analysis-master/src/sdanalysis/util.py": {
        "zero_quaternion": {
            "name": "zero_quaternion",
            "location": 27,
            "return": [],
            "arguments": {
                "num": [
                    "int"
                ]
            }
        },
        "get_filename_vars": {
            "name": "get_filename_vars",
            "location": 86,
            "return": [
                "Variables"
            ],
            "arguments": {
                "fname": [
                    "Union[(str, pathlib.Path)]"
                ]
            }
        },
        "set_filename_vars": {
            "name": "set_filename_vars",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "fname": [
                    "Union[(str, pathlib.Path)]"
                ],
                "sim_params": [
                    "sdanalysis.params.SimulationParams"
                ]
            }
        },
        "parse_directory": {
            "name": "parse_directory",
            "location": 119,
            "return": [
                "Dict[(str, dict)]"
            ],
            "arguments": {
                "directory": [
                    "pathlib.Path"
                ],
                "glob": [
                    "str"
                ]
            }
        },
        "quaternion_rotation": {
            "name": "quaternion_rotation",
            "location": 138,
            "return": [],
            "arguments": {
                "initial": [],
                "final": []
            }
        },
        "rotate_vectors": {
            "name": "rotate_vectors",
            "location": 142,
            "return": [],
            "arguments": {
                "quaternion": [],
                "vector": []
            }
        },
        "quaternion_angle": {
            "name": "quaternion_angle",
            "location": 146,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "quaternion": []
            }
        },
        "z2quaternion": {
            "name": "z2quaternion",
            "location": 150,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "theta": [
                    "np.ndarray"
                ]
            }
        },
        "quaternion2z": {
            "name": "quaternion2z",
            "location": 160,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "quaternion": [
                    "np.ndarray"
                ]
            }
        },
        "orientation2positions": {
            "name": "orientation2positions",
            "location": 170,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "mol": [
                    "sdanalysis.molecules.Molecule"
                ],
                "position": [
                    "np.ndarray"
                ],
                "orientation": [
                    "np.ndarray"
                ]
            }
        },
        "create_freud_box": {
            "name": "create_freud_box",
            "location": 178,
            "return": [
                "Box"
            ],
            "arguments": {
                "box": [
                    "np.ndarray"
                ],
                "is_2D": [
                    "bool"
                ]
            }
        },
        "Variables.from_filename": {
            "name": "from_filename",
            "location": 40,
            "return": [
                "Variables"
            ],
            "arguments": {
                "cls": [
                    "Type[_TVariables]"
                ],
                "fname": [
                    "Union[(str, pathlib.Path)]"
                ]
            }
        }
    },
    "statdyn-analysis-master/src/sdanalysis/version.py": {},
    "statdyn-analysis-master/src/sdanalysis/__init__.py": {},
    "statdyn-analysis-master/src/sdanalysis/dynamics/dynamics.py": {
        "structural_relax": {
            "name": "structural_relax",
            "location": 410,
            "return": [],
            "arguments": {
                "displacement": [],
                "dist": [
                    "float"
                ]
            }
        },
        "mobile_overlap": {
            "name": "mobile_overlap",
            "location": 431,
            "return": [
                "float"
            ],
            "arguments": {
                "displacement": [],
                "rotation": [],
                "fraction": [
                    "float"
                ]
            }
        },
        "Dynamics.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timestep": [],
                "box": [],
                "position": [],
                "orientation": [
                    "None"
                ],
                "molecule": [
                    "None"
                ],
                "wave_number": [
                    "None"
                ],
                "angular_resolution": [
                    "int"
                ]
            }
        },
        "Dynamics.from_frame": {
            "name": "from_frame",
            "location": 115,
            "return": [],
            "arguments": {
                "cls": [],
                "frame": [],
                "molecule": [
                    "None"
                ],
                "wave_number": [
                    "None"
                ]
            }
        },
        "Dynamics.delta_translation": {
            "name": "delta_translation",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dynamics.delta_rotation": {
            "name": "delta_rotation",
            "location": 141,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dynamics.add": {
            "name": "add",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "position": [],
                "orientation": [
                    "None"
                ]
            }
        },
        "Dynamics.add_frame": {
            "name": "add_frame",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frame": []
            }
        },
        "Dynamics.compute_displacement": {
            "name": "compute_displacement",
            "location": 179,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dynamics.compute_displacement2": {
            "name": "compute_displacement2",
            "location": 183,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dynamics.compute_msd": {
            "name": "compute_msd",
            "location": 187,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dynamics.compute_mfd": {
            "name": "compute_mfd",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dynamics.compute_alpha": {
            "name": "compute_alpha",
            "location": 195,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dynamics.compute_time_delta": {
            "name": "compute_time_delta",
            "location": 213,
            "return": [],
            "arguments": {
                "self": [],
                "timestep": []
            }
        },
        "Dynamics.compute_rotation": {
            "name": "compute_rotation",
            "location": 217,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dynamics.compute_rotation2": {
            "name": "compute_rotation2",
            "location": 221,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dynamics.compute_mean_rotation": {
            "name": "compute_mean_rotation",
            "location": 225,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dynamics.compute_msr": {
            "name": "compute_msr",
            "location": 229,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dynamics.compute_isf": {
            "name": "compute_isf",
            "location": 233,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dynamics.compute_rotational_relax1": {
            "name": "compute_rotational_relax1",
            "location": 237,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dynamics.compute_rotational_relax2": {
            "name": "compute_rotational_relax2",
            "location": 249,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dynamics.compute_alpha_rot": {
            "name": "compute_alpha_rot",
            "location": 261,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dynamics.compute_gamma": {
            "name": "compute_gamma",
            "location": 282,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dynamics.compute_struct_relax": {
            "name": "compute_struct_relax",
            "location": 305,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dynamics.compute_all": {
            "name": "compute_all",
            "location": 328,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": [],
                "timestep": [],
                "position": [],
                "orientation": [
                    "None"
                ],
                "scattering_function": [
                    "bool"
                ]
            }
        },
        "Dynamics.__len__": {
            "name": "__len__",
            "location": 396,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dynamics.distance": {
            "name": "distance",
            "location": 400,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dynamics.get_molid": {
            "name": "get_molid",
            "location": 405,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "statdyn-analysis-master/src/sdanalysis/dynamics/relaxations.py": {
        "create_mol_relaxations": {
            "name": "create_mol_relaxations",
            "location": 308,
            "return": [
                "LastMolecularRelaxation",
                "MolecularRelaxation"
            ],
            "arguments": {
                "num_elements": [],
                "threshold": [],
                "last_passage": [
                    "bool"
                ],
                "last_passage_cutoff": [
                    "None"
                ],
                "relaxation_type": [
                    "None"
                ]
            }
        },
        "Relaxations.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timestep": [],
                "box": [],
                "position": [],
                "orientation": [],
                "molecule": [
                    "None"
                ],
                "is2D": [
                    "None"
                ],
                "wave_number": [
                    "None"
                ]
            }
        },
        "Relaxations.distance": {
            "name": "distance",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Relaxations.from_frame": {
            "name": "from_frame",
            "location": 88,
            "return": [],
            "arguments": {
                "cls": [],
                "frame": [],
                "molecule": [
                    "None"
                ],
                "wave_number": [
                    "None"
                ]
            }
        },
        "Relaxations.set_mol_relax": {
            "name": "set_mol_relax",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "definition": []
            }
        },
        "Relaxations.get_timediff": {
            "name": "get_timediff",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "timestep": []
            }
        },
        "Relaxations.add": {
            "name": "add",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timestep": [],
                "position": [],
                "orientation": []
            }
        },
        "Relaxations.add_frame": {
            "name": "add_frame",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frame": []
            }
        },
        "Relaxations.summary": {
            "name": "summary",
            "location": 181,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MolecularRelaxation.__init__": {
            "name": "__init__",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_elements": [],
                "threshold": [],
                "relaxation_type": [
                    "None"
                ]
            }
        },
        "MolecularRelaxation.add": {
            "name": "add",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timediff": [],
                "distance": []
            }
        },
        "MolecularRelaxation.get_status": {
            "name": "get_status",
            "location": 220,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LastMolecularRelaxation.__init__": {
            "name": "__init__",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_elements": [],
                "threshold": [],
                "irreversibility": [
                    "float"
                ],
                "relaxation_type": [
                    "None"
                ]
            }
        },
        "LastMolecularRelaxation.add": {
            "name": "add",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timediff": [],
                "distance": []
            }
        },
        "LastMolecularRelaxation.get_status": {
            "name": "get_status",
            "location": 291,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StructRelaxations.__init__": {
            "name": "__init__",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_elements": [],
                "threshold": [],
                "molecule": []
            }
        },
        "StructRelaxations.get_status": {
            "name": "get_status",
            "location": 304,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "statdyn-analysis-master/src/sdanalysis/dynamics/_util.py": {
        "create_wave_vector": {
            "name": "create_wave_vector",
            "location": 25,
            "return": [],
            "arguments": {
                "wave_number": [],
                "angular_resolution": []
            }
        },
        "molecule2particles": {
            "name": "molecule2particles",
            "location": 42,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "position": [
                    "np.ndarray"
                ],
                "orientation": [
                    "np.ndarray"
                ],
                "mol_vector": [
                    "np.ndarray"
                ]
            }
        },
        "_static_structure_factor": {
            "name": "_static_structure_factor",
            "location": 57,
            "return": [],
            "arguments": {
                "rdf": [],
                "wave_number": [
                    "float"
                ],
                "num_particles": [
                    "int"
                ]
            }
        },
        "calculate_wave_number": {
            "name": "calculate_wave_number",
            "location": 66,
            "return": [],
            "arguments": {
                "box": [],
                "positions": [
                    "np.ndarray"
                ]
            }
        },
        "TrackedMotion.__init__": {
            "name": "__init__",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "box": [],
                "position": [
                    "np.ndarray"
                ],
                "orientation": [
                    "Optional[np.ndarray]"
                ]
            }
        },
        "TrackedMotion.add": {
            "name": "add",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "np.ndarray"
                ],
                "orientation": [
                    "Optional[np.ndarray]"
                ]
            }
        }
    },
    "statdyn-analysis-master/src/sdanalysis/dynamics/__init__.py": {},
    "statdyn-analysis-master/src/sdanalysis/figures/configuration.py": {
        "_create_colours": {
            "name": "_create_colours",
            "location": 28,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "light_colours": [
                    "bool"
                ]
            }
        },
        "plot_circles": {
            "name": "plot_circles",
            "location": 45,
            "return": [],
            "arguments": {
                "mol_plot": [],
                "source": [],
                "categorical_colour": [
                    "bool"
                ],
                "factors": [
                    "Optional[list]"
                ],
                "colormap": []
            }
        },
        "colour_orientation": {
            "name": "colour_orientation",
            "location": 86,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "orientations": [
                    "np.ndarray"
                ],
                "light_colours": [
                    "bool"
                ]
            }
        },
        "frame2data": {
            "name": "frame2data",
            "location": 92,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "frame": [
                    "sdanalysis.frame.Frame"
                ],
                "order_function": [
                    "Callable[([sdanalysis.frame.Frame], np.ndarray)]"
                ],
                "order_list": [
                    "np.ndarray"
                ],
                "molecule": [
                    "sdanalysis.molecules.Molecule"
                ],
                "categorical_colour": [
                    "bool"
                ]
            }
        },
        "plot_frame": {
            "name": "plot_frame",
            "location": 162,
            "return": [],
            "arguments": {
                "frame": [
                    "sdanalysis.frame.Frame"
                ],
                "order_function": [
                    "Optional[Callable[([sdanalysis.frame.Frame], np.ndarray)]]"
                ],
                "order_list": [
                    "Optional[np.ndarray]"
                ],
                "source": [
                    "None"
                ],
                "molecule": [
                    "sdanalysis.molecules.Molecule"
                ],
                "categorical_colour": [
                    "bool"
                ],
                "factors": [
                    "Optional[list]"
                ],
                "colormap": [
                    "None"
                ]
            }
        }
    },
    "statdyn-analysis-master/src/sdanalysis/figures/interactive_config.py": {
        "make_document": {
            "name": "make_document",
            "location": 452,
            "return": [
                "None"
            ],
            "arguments": {
                "doc": [],
                "directory": [
                    "pathlib.Path"
                ],
                "models": [
                    "Optional[List[pathlib.Path]]"
                ]
            }
        },
        "TrimerFigure.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "doc": [],
                "directory": [
                    "pathlib.Path"
                ],
                "models": [
                    "None"
                ]
            }
        },
        "TrimerFigure.initialise_directory": {
            "name": "initialise_directory",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrimerFigure.pressure": {
            "name": "pressure",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrimerFigure.temperature": {
            "name": "temperature",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrimerFigure.crystal": {
            "name": "crystal",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrimerFigure.iter_index": {
            "name": "iter_index",
            "location": 175,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrimerFigure.update_temperature_button": {
            "name": "update_temperature_button",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attr": [],
                "old": [],
                "new": []
            }
        },
        "TrimerFigure.update_crystal_button": {
            "name": "update_crystal_button",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attr": [],
                "old": [],
                "new": []
            }
        },
        "TrimerFigure.update_index_button": {
            "name": "update_index_button",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attr": [],
                "old": [],
                "new": []
            }
        },
        "TrimerFigure.create_files_interface": {
            "name": "create_files_interface",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrimerFigure.get_selected_file": {
            "name": "get_selected_file",
            "location": 232,
            "return": [
                "Optional[pathlib.Path]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrimerFigure.update_frame": {
            "name": "update_frame",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attr": [],
                "old": [],
                "new": []
            }
        },
        "TrimerFigure.radio_update_frame": {
            "name": "radio_update_frame",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attr": []
            }
        },
        "TrimerFigure.index": {
            "name": "index",
            "location": 249,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrimerFigure.initialise_trajectory_interface": {
            "name": "initialise_trajectory_interface",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrimerFigure.create_trajectory_interface": {
            "name": "create_trajectory_interface",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrimerFigure.update_current_trajectory": {
            "name": "update_current_trajectory",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attr": [],
                "old": [],
                "new": []
            }
        },
        "TrimerFigure.initialise_media_interface": {
            "name": "initialise_media_interface",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrimerFigure._incr_index": {
            "name": "_incr_index",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrimerFigure._decr_index": {
            "name": "_decr_index",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrimerFigure.create_media_interface": {
            "name": "create_media_interface",
            "location": 337,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrimerFigure._update_source": {
            "name": "_update_source",
            "location": 350,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "TrimerFigure.get_order_function": {
            "name": "get_order_function",
            "location": 354,
            "return": [
                "Optional[Callable]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrimerFigure.update_data": {
            "name": "update_data",
            "location": 359,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attr": [],
                "old": [],
                "new": []
            }
        },
        "TrimerFigure.update_data_attr": {
            "name": "update_data_attr",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attr": []
            }
        },
        "TrimerFigure._play_pause_toggle": {
            "name": "_play_pause_toggle",
            "location": 371,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attr": []
            }
        },
        "TrimerFigure.create_legend": {
            "name": "create_legend",
            "location": 380,
            "return": [],
            "arguments": {}
        },
        "TrimerFigure.initialise_doc": {
            "name": "initialise_doc",
            "location": 420,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrimerFigure.create_doc": {
            "name": "create_doc",
            "location": 438,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "statdyn-analysis-master/src/sdanalysis/figures/thermodynamics.py": {
        "read_file": {
            "name": "read_file",
            "location": 23,
            "return": [],
            "arguments": {
                "source": []
            }
        },
        "update_file_list": {
            "name": "update_file_list",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "attr": [],
                "old": [],
                "new": []
            }
        },
        "update_file": {
            "name": "update_file",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "attr": [],
                "old": [],
                "new": []
            }
        },
        "update_factors": {
            "name": "update_factors",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "attr": [],
                "old": [],
                "new": []
            }
        },
        "update_datacolumns": {
            "name": "update_datacolumns",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "attr": [],
                "old": [],
                "new": []
            }
        }
    },
    "statdyn-analysis-master/src/sdanalysis/figures/__init__.py": {},
    "statdyn-analysis-master/src/sdanalysis/read/_gsd.py": {
        "iter_trajectory": {
            "name": "iter_trajectory",
            "location": 31,
            "return": [
                "Iterator[sdanalysis.frame.HoomdFrame]"
            ],
            "arguments": {
                "trajectory": []
            }
        },
        "_get_num_steps": {
            "name": "_get_num_steps",
            "location": 55,
            "return": [
                "int"
            ],
            "arguments": {
                "trajectory": []
            }
        },
        "_gsd_linear_trajectory": {
            "name": "_gsd_linear_trajectory",
            "location": 91,
            "return": [
                "Generator[(Tuple[(List[int], Any)], Any, None)]"
            ],
            "arguments": {
                "infile": [
                    "pathlib.Path"
                ],
                "steps_max": [
                    "Optional[int]"
                ],
                "keyframe_interval": [
                    "int"
                ],
                "keyframe_max": [
                    "int"
                ]
            }
        },
        "_gsd_exponential_trajectory": {
            "name": "_gsd_exponential_trajectory",
            "location": 119,
            "return": [
                "Generator[(Tuple[(List[int], Any)], Any, None)]"
            ],
            "arguments": {
                "infile": [
                    "pathlib.Path"
                ],
                "steps_max": [
                    "Optional[int]"
                ],
                "keyframe_interval": [
                    "int"
                ],
                "keyframe_max": [
                    "int"
                ],
                "linear_steps": [
                    "int"
                ]
            }
        },
        "read_gsd_trajectory": {
            "name": "read_gsd_trajectory",
            "location": 192,
            "return": [
                "Iterator[Tuple[(List[int], sdanalysis.frame.Frame)]]"
            ],
            "arguments": {
                "infile": [
                    "pathlib.Path"
                ],
                "steps_max": [
                    "Optional[int]"
                ],
                "linear_steps": [
                    "Optional[int]"
                ],
                "keyframe_interval": [
                    "int"
                ],
                "keyframe_max": [
                    "int"
                ]
            }
        }
    },
    "statdyn-analysis-master/src/sdanalysis/read/_lammps.py": {
        "read_lammps_trajectory": {
            "name": "read_lammps_trajectory",
            "location": 28,
            "return": [
                "Iterator[Tuple[(List[int], sdanalysis.frame.LammpsFrame)]]"
            ],
            "arguments": {
                "infile": [
                    "pathlib.Path"
                ],
                "steps_max": [
                    "Optional[int]"
                ]
            }
        },
        "parse_lammpstrj": {
            "name": "parse_lammpstrj",
            "location": 42,
            "return": [
                "Iterator[sdanalysis.frame.LammpsFrame]"
            ],
            "arguments": {
                "filename": [
                    "pathlib.Path"
                ]
            }
        }
    },
    "statdyn-analysis-master/src/sdanalysis/read/_read.py": {
        "process_file": {
            "name": "process_file",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "infile": [
                    "pathlib.Path"
                ],
                "wave_number": [
                    "float"
                ],
                "steps_max": [
                    "Optional[int]"
                ],
                "linear_steps": [
                    "Optional[int]"
                ],
                "keyframe_interval": [
                    "int"
                ],
                "keyframe_max": [
                    "int"
                ],
                "mol_relaxations": [
                    "List[Dict[(str, Any)]]"
                ],
                "outfile": [
                    "Optional[pathlib.Path]"
                ],
                "scattering_function": [
                    "bool"
                ]
            }
        },
        "open_trajectory": {
            "name": "open_trajectory",
            "location": 198,
            "return": [
                "Iterator[sdanalysis.frame.Frame]"
            ],
            "arguments": {
                "filename": [
                    "pathlib.Path"
                ],
                "progressbar": [
                    "None"
                ],
                "frame_interval": [
                    "int"
                ]
            }
        },
        "WriteCache.__attr_post_init__": {
            "name": "__attr_post_init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WriteCache._cache_size": {
            "name": "_cache_size",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WriteCache.append": {
            "name": "append",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "WriteCache._flush_file": {
            "name": "_flush_file",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "df": []
            }
        },
        "WriteCache.flush": {
            "name": "flush",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WriteCache.filename": {
            "name": "filename",
            "location": 69,
            "return": [
                "Path",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WriteCache.__len__": {
            "name": "__len__",
            "location": 74,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "WriteCache.to_dataframe": {
            "name": "to_dataframe",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "statdyn-analysis-master/src/sdanalysis/read/__init__.py": {},
    "statdyn-analysis-master/test/argparse_test.py": {
        "dummy_process_file": {
            "name": "dummy_process_file",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "infile": []
            }
        },
        "dummy_subcommand": {
            "name": "dummy_subcommand",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": []
            }
        },
        "test_version": {
            "name": "test_version",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": []
            }
        },
        "test_verbose": {
            "name": "test_verbose",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [],
                "arg": []
            }
        },
        "test_comp_dynamics_infile": {
            "name": "test_comp_dynamics_infile",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [],
                "runner": [],
                "outfile": [],
                "obj": []
            }
        },
        "test_comp_dynamics_mol_relax": {
            "name": "test_comp_dynamics_mol_relax",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [],
                "obj": []
            }
        },
        "create_params": {
            "name": "create_params",
            "location": 80,
            "return": [
                "Generator[(Dict[(str, Union[(int, str)])], Any, None)]"
            ],
            "arguments": {}
        },
        "test_sdanalysis_options": {
            "name": "test_sdanalysis_options",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [],
                "params": []
            }
        },
        "test_sdanalysis_output": {
            "name": "test_sdanalysis_output",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [],
                "output": []
            }
        },
        "test_create_output_dir": {
            "name": "test_create_output_dir",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [],
                "outfile": [],
                "obj": []
            }
        },
        "test_figure": {
            "name": "test_figure",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "statdyn-analysis-master/test/bokeh_test.py": {
        "test_interactive_null": {
            "name": "test_interactive_null",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_thermodynamics_null": {
            "name": "test_thermodynamics_null",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_interactive": {
            "name": "test_interactive",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_thermodynamics": {
            "name": "test_thermodynamics",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "statdyn-analysis-master/test/conftest.py": {
        "mol": {
            "name": "mol",
            "location": 30,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "runner": {
            "name": "runner",
            "location": 35,
            "return": [
                "typing.Generator[CliRunner]"
            ],
            "arguments": {}
        },
        "obj": {
            "name": "obj",
            "location": 42,
            "return": [
                "dict[typing.Text, int]"
            ],
            "arguments": {
                "request": []
            }
        },
        "infile": {
            "name": "infile",
            "location": 57,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "infile_gsd": {
            "name": "infile_gsd",
            "location": 67,
            "return": [],
            "arguments": {}
        },
        "infile_lammps": {
            "name": "infile_lammps",
            "location": 76,
            "return": [],
            "arguments": {}
        },
        "frame": {
            "name": "frame",
            "location": 85,
            "return": [],
            "arguments": {
                "infile": []
            }
        },
        "outfile": {
            "name": "outfile",
            "location": 90,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "dynamics_file": {
            "name": "dynamics_file",
            "location": 97,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "infile_gsd": [],
                "obj": []
            }
        }
    },
    "statdyn-analysis-master/test/dynamics_test.py": {
        "pos_array": {
            "name": "pos_array",
            "location": 29,
            "return": [],
            "arguments": {
                "min_val": [],
                "max_val": []
            }
        },
        "val_array": {
            "name": "val_array",
            "location": 35,
            "return": [],
            "arguments": {
                "min_val": [],
                "max_val": []
            }
        },
        "test_calculate_max_wavenumber": {
            "name": "test_calculate_max_wavenumber",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "wavenumber": [
                    "int"
                ]
            }
        },
        "translational_displacement_reference": {
            "name": "translational_displacement_reference",
            "location": 59,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "box": [
                    "np.ndarray"
                ],
                "initial": [
                    "np.ndarray"
                ],
                "final": [
                    "np.ndarray"
                ]
            }
        },
        "test_alpha": {
            "name": "test_alpha",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "positions": []
            }
        },
        "test_overlap": {
            "name": "test_overlap",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "displacement": [],
                "rotation": []
            }
        },
        "trajectory": {
            "name": "trajectory",
            "location": 101,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "dynamics_class": {
            "name": "dynamics_class",
            "location": 107,
            "return": [],
            "arguments": {
                "trajectory": []
            }
        },
        "test_MolecularRelaxation": {
            "name": "test_MolecularRelaxation",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_LastMolecularRelaxation": {
            "name": "test_LastMolecularRelaxation",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_structural_relaxation": {
            "name": "test_structural_relaxation",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "array": []
            }
        },
        "test_compute_all": {
            "name": "test_compute_all",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "infile_gsd": [],
                "wave_number": [],
                "orientation": []
            }
        },
        "test_large_rotation": {
            "name": "test_large_rotation",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "rotation_z": {
            "name": "rotation_z",
            "location": 309,
            "return": [],
            "arguments": {
                "num": [
                    "int"
                ],
                "angle": []
            }
        },
        "test_mol2particles_zero": {
            "name": "test_mol2particles_zero",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_mol2particles_simple": {
            "name": "test_mol2particles_simple",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_struct_translation": {
            "name": "test_struct_translation",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_struct_rotation": {
            "name": "test_struct_rotation",
            "location": 353,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_struct": {
            "name": "test_struct",
            "location": 381,
            "return": [
                "None"
            ],
            "arguments": {
                "translation": [],
                "rotation": []
            }
        },
        "TestDynamicsClass.test_displacements": {
            "name": "test_displacements",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dynamics_class": [],
                "trajectory": [],
                "step": []
            }
        },
        "TestDynamicsClass.test_trans_methods": {
            "name": "test_trans_methods",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dynamics_class": [],
                "trajectory": [],
                "step": [],
                "method": []
            }
        },
        "TestDynamicsClass.test_alpha_methods": {
            "name": "test_alpha_methods",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dynamics_class": [],
                "trajectory": [],
                "step": [],
                "method": []
            }
        },
        "TestDynamicsClass.test_rot_methods": {
            "name": "test_rot_methods",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dynamics_class": [],
                "trajectory": [],
                "step": [],
                "method": []
            }
        },
        "TestDynamicsClass.test_rotations": {
            "name": "test_rotations",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dynamics_class": [],
                "trajectory": [],
                "step": []
            }
        },
        "TestDynamicsClass.test_float64_box": {
            "name": "test_float64_box",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDynamicsClass.test_read_only_arrays": {
            "name": "test_read_only_arrays",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_MolecularRelaxation.move": {
            "name": "move",
            "location": 197,
            "return": [],
            "arguments": {
                "dist": []
            }
        },
        "test_LastMolecularRelaxation.move": {
            "name": "move",
            "location": 223,
            "return": [],
            "arguments": {
                "dist": []
            }
        }
    },
    "statdyn-analysis-master/test/figures_test.py": {
        "test_colour_orientation": {
            "name": "test_colour_orientation",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "orientation": []
            }
        },
        "test_plot_frame": {
            "name": "test_plot_frame",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "frame": [],
                "mol": []
            }
        },
        "test_plot_frame_orderlist": {
            "name": "test_plot_frame_orderlist",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "frame": [],
                "mol": [],
                "categories": []
            }
        },
        "test_plot_frame_orderfunc": {
            "name": "test_plot_frame_orderfunc",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "frame": [],
                "mol": [],
                "categories": []
            }
        },
        "test_plot_frame_categorical": {
            "name": "test_plot_frame_categorical",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "frame": [],
                "mol": [],
                "dtype": []
            }
        },
        "test_order": {
            "name": "test_order",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "frame": []
            }
        }
    },
    "statdyn-analysis-master/test/frame_test.py": {
        "lammps_frame": {
            "name": "lammps_frame",
            "location": 22,
            "return": [
                "sdanalysis.frame.LammpsFrame"
            ],
            "arguments": {}
        },
        "gsd_frame": {
            "name": "gsd_frame",
            "location": 34,
            "return": [
                "sdanalysis.frame.HoomdFrame"
            ],
            "arguments": {}
        },
        "frametypes": {
            "name": "frametypes",
            "location": 42,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "test_frame_len": {
            "name": "test_frame_len",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "frametypes": []
            }
        },
        "test_frame_position": {
            "name": "test_frame_position",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "frametypes": []
            }
        },
        "test_frame_orientation": {
            "name": "test_frame_orientation",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "frametypes": []
            }
        },
        "test_frame_timestep": {
            "name": "test_frame_timestep",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "frametypes": []
            }
        },
        "test_frame_box": {
            "name": "test_frame_box",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "frametypes": []
            }
        },
        "test_frame_box_hoomd": {
            "name": "test_frame_box_hoomd",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "gsd_test_frames": {
            "name": "gsd_test_frames",
            "location": 97,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "request": []
            }
        },
        "test_gsd_num_bodies": {
            "name": "test_gsd_num_bodies",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "gsd_test_frames": []
            }
        },
        "test_freud_box": {
            "name": "test_freud_box",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "frametypes": []
            }
        }
    },
    "statdyn-analysis-master/test/integration_test.py": {
        "test_dynamics_file": {
            "name": "test_dynamics_file",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "dynamics_file": []
            }
        },
        "test_runner_file": {
            "name": "test_runner_file",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": []
            }
        },
        "test_comp_dynamics": {
            "name": "test_comp_dynamics",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [],
                "infile_gsd": [],
                "outfile": [],
                "obj": []
            }
        },
        "test_comp_relaxations": {
            "name": "test_comp_relaxations",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [],
                "dynamics_file": []
            }
        },
        "test_entire_process": {
            "name": "test_entire_process",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [],
                "infile_gsd": [],
                "outfile": [],
                "obj": []
            }
        },
        "test_runner_file.create_file": {
            "name": "create_file",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "fname": []
            }
        }
    },
    "statdyn-analysis-master/test/molecule_test.py": {
        "test_scale_moment_inertia": {
            "name": "test_scale_moment_inertia",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "mol": []
            }
        },
        "test_get_radii": {
            "name": "test_get_radii",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "mol": []
            }
        },
        "test_get_types": {
            "name": "test_get_types",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "mol": []
            }
        },
        "test_position_com": {
            "name": "test_position_com",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "mol": []
            }
        }
    },
    "statdyn-analysis-master/test/order_test.py": {
        "frame": {
            "name": "frame",
            "location": 27,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "test_compute_neighbours": {
            "name": "test_compute_neighbours",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "frame": []
            }
        },
        "test_num_neighbours": {
            "name": "test_num_neighbours",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "frame": []
            }
        },
        "test_voronoi_neighbours": {
            "name": "test_voronoi_neighbours",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "frame": []
            }
        },
        "test_create_neigh_ordering": {
            "name": "test_create_neigh_ordering",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "frame": []
            }
        },
        "test_orientational_order": {
            "name": "test_orientational_order",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "frame": []
            }
        },
        "test_create_orient_ordering": {
            "name": "test_create_orient_ordering",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "frame": []
            }
        },
        "test_relative_distance": {
            "name": "test_relative_distance",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "frame": []
            }
        },
        "test_relative_orientations": {
            "name": "test_relative_orientations",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "frame": []
            }
        }
    },
    "statdyn-analysis-master/test/params_test.py": {
        "sim_params": {
            "name": "sim_params",
            "location": 27,
            "return": [
                "SimulationParams"
            ],
            "arguments": {}
        },
        "molecule": {
            "name": "molecule",
            "location": 32,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "test_default_molecule": {
            "name": "test_default_molecule",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "sim_params": []
            }
        },
        "test_molecule": {
            "name": "test_molecule",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "sim_params": [],
                "molecule": []
            }
        },
        "test_outfile": {
            "name": "test_outfile",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "sim_params": [],
                "outfile": []
            }
        },
        "test_outdir": {
            "name": "test_outdir",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "sim_params": [],
                "output": []
            }
        },
        "func": {
            "name": "func",
            "location": 59,
            "return": [],
            "arguments": {
                "sim_params": [],
                "value": []
            }
        },
        "test_function_passing": {
            "name": "test_function_passing",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "sim_params": []
            }
        },
        "create_params": {
            "name": "create_params",
            "location": 72,
            "return": [
                "Generator[(Dict[(str, Any)], Any, None)]"
            ],
            "arguments": {}
        },
        "get_filename_prefix": {
            "name": "get_filename_prefix",
            "location": 101,
            "return": [
                "str"
            ],
            "arguments": {
                "key": []
            }
        },
        "test_filename": {
            "name": "test_filename",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "sim_params": [],
                "params": []
            }
        }
    },
    "statdyn-analysis-master/test/read_gsd_test.py": {
        "gsd_trajectory": {
            "name": "gsd_trajectory",
            "location": 25,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "test_traj": {
            "name": "test_traj",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "gsd_trajectory": []
            }
        },
        "test_read_trajectory_linear": {
            "name": "test_read_trajectory_linear",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "gsd_trajectory": []
            }
        },
        "test_read_trajectory_exp": {
            "name": "test_read_trajectory_exp",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "gsd_trajectory": []
            }
        }
    },
    "statdyn-analysis-master/test/read_test.py": {
        "test_compute_all": {
            "name": "test_compute_all",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "infile": []
            }
        },
        "test_stopiter_handling": {
            "name": "test_stopiter_handling",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "num_steps": [],
                "infile": []
            }
        },
        "test_linear_steps_stopiter": {
            "name": "test_linear_steps_stopiter",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "infile": [],
                "num_steps": []
            }
        },
        "test_linear_sequence": {
            "name": "test_linear_sequence",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "infile_gsd": []
            }
        },
        "test_linear_sequence_keyframes": {
            "name": "test_linear_sequence_keyframes",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "infile_gsd": []
            }
        },
        "test_writeCache": {
            "name": "test_writeCache",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "outfile": []
            }
        },
        "test_writeCache_caching": {
            "name": "test_writeCache_caching",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "outfile": []
            }
        },
        "test_writeCache_len": {
            "name": "test_writeCache_len",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "outfile": []
            }
        },
        "test_writeCache_file": {
            "name": "test_writeCache_file",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "outfile": []
            }
        },
        "test_process_gsd": {
            "name": "test_process_gsd",
            "location": 113,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "infile_gsd": []
            }
        },
        "test_process_lammpstrj": {
            "name": "test_process_lammpstrj",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "infile_lammps": []
            }
        },
        "test_parse_lammpstrj": {
            "name": "test_parse_lammpstrj",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "infile_lammps": []
            }
        },
        "test_process_file": {
            "name": "test_process_file",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "infile": []
            }
        },
        "test_process_file_outfile": {
            "name": "test_process_file_outfile",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "infile": [],
                "outfile": []
            }
        },
        "test_open_trajectory": {
            "name": "test_open_trajectory",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "infile": []
            }
        },
        "test_frame_interval": {
            "name": "test_frame_interval",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "infile": []
            }
        },
        "test_iter_trajectory": {
            "name": "test_iter_trajectory",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "infile_gsd": []
            }
        }
    },
    "statdyn-analysis-master/test/relaxation_test.py": {
        "test_diffusion_constant": {
            "name": "test_diffusion_constant",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_exponential_relax": {
            "name": "test_exponential_relax",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "linear_relax": {
            "name": "linear_relax",
            "location": 53,
            "return": [
                "tuple[int]"
            ],
            "arguments": {}
        },
        "test_compute_relaxations": {
            "name": "test_compute_relaxations",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "dynamics_file": []
            }
        },
        "test_compute_relaxations_values": {
            "name": "test_compute_relaxations_values",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "dynamics_file": []
            }
        },
        "test_compute_relaxations_random": {
            "name": "test_compute_relaxations_random",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "values": [],
                "relax_type": []
            }
        },
        "test_series_relaxations_random": {
            "name": "test_series_relaxations_random",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "values": [],
                "relax_type": []
            }
        },
        "test_series_relaxations_index": {
            "name": "test_series_relaxations_index",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "indexes": []
            }
        },
        "relax_df": {
            "name": "relax_df",
            "location": 206,
            "return": [],
            "arguments": {}
        },
        "test_relaxation_hmean": {
            "name": "test_relaxation_hmean",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "relax_df": []
            }
        },
        "TestThresholdRelaxation.test_decay": {
            "name": "test_decay",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "linear_relax": []
            }
        },
        "TestThresholdRelaxation.test_decay_zeroth": {
            "name": "test_decay_zeroth",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "linear_relax": []
            }
        },
        "TestThresholdRelaxation.test_growth": {
            "name": "test_growth",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "linear_relax": []
            }
        },
        "TestThresholdRelaxation.test_growth_zeroth": {
            "name": "test_growth_zeroth",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "linear_relax": []
            }
        },
        "TestMaxValueRelax.test_compute": {
            "name": "test_compute",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMaxValueRelax.test_compute_nan": {
            "name": "test_compute_nan",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMaxValueRelax.test_boundary_values": {
            "name": "test_boundary_values",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected_max": []
            }
        },
        "TestMaxTimeRelax.test_compute": {
            "name": "test_compute",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMaxTimeRelax.test_compute_nan": {
            "name": "test_compute_nan",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMaxTimeRelax.test_boundary_values": {
            "name": "test_boundary_values",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected_max": []
            }
        }
    },
    "statdyn-analysis-master/test/sdanalysis_test.py": {
        "TestSdanalysis.test_verbosity_info": {
            "name": "test_verbosity_info",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "runner": []
            }
        },
        "TestCompDynamics.test_datafile": {
            "name": "test_datafile",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "runner": []
            }
        },
        "TestCompDynamics.test_missing_file": {
            "name": "test_missing_file",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "runner": []
            }
        },
        "TestCompDynamics.test_real_data": {
            "name": "test_real_data",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "runner": [],
                "obj": []
            }
        },
        "TestCompRelaxations.test_missing_file": {
            "name": "test_missing_file",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "runner": []
            }
        },
        "TestCompRelaxations.test_incorrect_extension": {
            "name": "test_incorrect_extension",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "runner": []
            }
        },
        "TestCompRelaxations.test_non_hdf5_file": {
            "name": "test_non_hdf5_file",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "runner": []
            }
        },
        "TestCompRelaxations.test_missing_dynamics": {
            "name": "test_missing_dynamics",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "runner": []
            }
        },
        "TestCompRelaxations.test_missing_mol_relaxations": {
            "name": "test_missing_mol_relaxations",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "runner": []
            }
        }
    },
    "statdyn-analysis-master/test/stepsize_test.py": {
        "steps": {
            "name": "steps",
            "location": 54,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "test_initial_start": {
            "name": "test_initial_start",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "initial": []
            }
        },
        "test_initial_start_series": {
            "name": "test_initial_start_series",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "initial": []
            }
        },
        "test_final_total": {
            "name": "test_final_total",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "final": []
            }
        },
        "test_final_total_series": {
            "name": "test_final_total_series",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "final": []
            }
        },
        "test_generate_steps": {
            "name": "test_generate_steps",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "steps": []
            }
        },
        "test_generate_step_series": {
            "name": "test_generate_step_series",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "total_steps": [],
                "num_linear": []
            }
        },
        "test_num_linear": {
            "name": "test_num_linear",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "num_linear": []
            }
        },
        "test_get_index": {
            "name": "test_get_index",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_generate_step_series_many": {
            "name": "test_generate_step_series_many",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_no_duplicates": {
            "name": "test_no_duplicates",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "total_steps": [],
                "num_linear": []
            }
        },
        "test_no_duplicates_series": {
            "name": "test_no_duplicates_series",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "total_steps": [],
                "num_linear": []
            }
        },
        "test_next": {
            "name": "test_next",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_num_indexes": {
            "name": "test_num_indexes",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sequence_keyframe": {
            "name": "test_sequence_keyframe",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_index_values": {
            "name": "test_index_values",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "statdyn-analysis-master/test/test_orientational_ordering.py": {
        "test_parallel": {
            "name": "test_parallel",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_antiparallel": {
            "name": "test_antiparallel",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_perpendicular": {
            "name": "test_perpendicular",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_properties": {
            "name": "test_properties",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "angle": []
            }
        }
    },
    "statdyn-analysis-master/test/tracked_motion_test.py": {
        "test_simple_orientation": {
            "name": "test_simple_orientation",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_orientation": {
            "name": "test_orientation",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "rotations": []
            }
        },
        "test_simple_translation": {
            "name": "test_simple_translation",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_translation": {
            "name": "test_translation",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "translations": []
            }
        }
    },
    "statdyn-analysis-master/test/util_test.py": {
        "test_orientation2positions": {
            "name": "test_orientation2positions",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "mol": []
            }
        },
        "test_orientation2positions_invert_xy": {
            "name": "test_orientation2positions_invert_xy",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "mol": []
            }
        },
        "test_orientation2positions_moved": {
            "name": "test_orientation2positions_moved",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "mol": []
            }
        },
        "test_orientation2positions_moved_rot": {
            "name": "test_orientation2positions_moved_rot",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "mol": []
            }
        },
        "test_orientation2positions_moved_rot_multiple": {
            "name": "test_orientation2positions_moved_rot_multiple",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "mol": []
            }
        },
        "test_get_filename_vars": {
            "name": "test_get_filename_vars",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "prefix": [],
                "mol": [],
                "press": [],
                "temp": [],
                "crys": [],
                "swapped": []
            }
        },
        "test_filename_vars_id": {
            "name": "test_filename_vars_id",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [],
                "expected": []
            }
        },
        "test_set_filename_vars": {
            "name": "test_set_filename_vars",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "mol": [],
                "press": [],
                "temp": [],
                "crys": []
            }
        },
        "angle": {
            "name": "angle",
            "location": 151,
            "return": [],
            "arguments": {
                "num_elements": [
                    "int"
                ]
            }
        },
        "unit_quaternion_Z": {
            "name": "unit_quaternion_Z",
            "location": 166,
            "return": [],
            "arguments": {}
        },
        "quat": {
            "name": "quat",
            "location": 171,
            "return": [],
            "arguments": {}
        },
        "test_z2quaternion": {
            "name": "test_z2quaternion",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "angles": []
            }
        },
        "test_quaternion2z": {
            "name": "test_quaternion2z",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "quat": []
            }
        },
        "test_quaternion_angle_2d": {
            "name": "test_quaternion_angle_2d",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "quat": []
            }
        },
        "test_angle_roundtrip": {
            "name": "test_angle_roundtrip",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "angles": []
            }
        },
        "test_quaternion2z_specifics": {
            "name": "test_quaternion2z_specifics",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "quaternion": [],
                "angle": []
            }
        },
        "test_quat_rotation": {
            "name": "test_quat_rotation",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_quaternion_zero_rotation": {
            "name": "test_quaternion_zero_rotation",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_quaternion_small_rotation": {
            "name": "test_quaternion_small_rotation",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "statdyn-analysis-master/test/__init__.py": {}
}
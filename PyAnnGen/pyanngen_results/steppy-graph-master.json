{
    "steppy-graph-master/setup.py": {},
    "steppy-graph-master/steppygraph/machine.py": {
        "machine_to_json": {
            "name": "machine_to_json",
            "location": 134,
            "return": [
                "bool",
                "Optional[Any]"
            ],
            "arguments": {
                "obj": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "str",
                    "dict[, ]",
                    "int",
                    "Mapping[str, Sequence[str]]",
                    "typing.Mapping"
                ]
            }
        },
        "StateMachine.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "region": [
                    "str"
                ],
                "account": [
                    "str"
                ],
                "name": [
                    "typing.Text",
                    "str",
                    "cmk.utils.type_defs.CheckPluginName",
                    "Optional[str]",
                    "type"
                ]
            }
        },
        "StateMachine.to_json": {
            "name": "to_json",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateMachine.idx": {
            "name": "idx",
            "location": 35,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "StateMachine.last_orphan": {
            "name": "last_orphan",
            "location": 47,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateMachine.next": {
            "name": "next",
            "location": 60,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "steppygraph.states.State"
                ]
            }
        },
        "StateMachine.add_state": {
            "name": "add_state",
            "location": 76,
            "return": [
                "StateMachine",
                "Callable[[str], bool]",
                "List[object]",
                "Optional[str]",
                "dict",
                "float",
                "Sequence[Tuple[float, float]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "steppygraph.states.State"
                ]
            }
        },
        "StateMachine.set_resource_attrs": {
            "name": "set_resource_attrs",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "dict[str, typing.Any]",
                    "raiden.utils.Tuple[raiden.utils.Address, raiden.utils.PrivateKey]",
                    "Dict[str, Any]",
                    "State"
                ]
            }
        },
        "StateMachine.build": {
            "name": "build",
            "location": 101,
            "return": [
                "bool",
                "StateMachine"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateMachine.get_states": {
            "name": "get_states",
            "location": 117,
            "return": [
                "List[steppygraph.states.State]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateMachine.count_states": {
            "name": "count_states",
            "location": 120,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateMachine.printable": {
            "name": "printable",
            "location": 123,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateMachine.last": {
            "name": "last",
            "location": 126,
            "return": [
                "steppygraph.states.State"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateMachine.name": {
            "name": "name",
            "location": 129,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Branch.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "region": [
                    "str"
                ],
                "account": [
                    "str"
                ],
                "name": [
                    "typing.Text",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Parallel.__init__": {
            "name": "__init__",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "branches": [
                    "List[Branch]"
                ],
                "comment": [
                    "str"
                ],
                "catch": [
                    "List[steppygraph.states.Catcher]"
                ]
            }
        },
        "Parallel.build": {
            "name": "build",
            "location": 160,
            "return": [
                "bool",
                "Parallel"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "steppy-graph-master/steppygraph/serialize.py": {
        "to_serializable": {
            "name": "to_serializable",
            "location": 4,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "val": [
                    "float",
                    "str",
                    "dict",
                    "int",
                    "dict[, ]"
                ]
            }
        }
    },
    "steppy-graph-master/steppygraph/states.py": {
        "resource_to_json": {
            "name": "resource_to_json",
            "location": 109,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "val": [
                    "bytes",
                    "int",
                    "str",
                    "typing.IO",
                    "IO",
                    "list[str]",
                    "List[str]",
                    "cmk.utils.type_defs.HostAddress"
                ]
            }
        },
        "state_to_json": {
            "name": "state_to_json",
            "location": 158,
            "return": [
                "str",
                "dict",
                "bool",
                "float"
            ],
            "arguments": {
                "val": [
                    "Dict[str, Any]",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "catcher_to_json": {
            "name": "catcher_to_json",
            "location": 174,
            "return": [
                "str",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "val": [
                    "purplship.core.utils.Element",
                    "dict[, ]",
                    "dict",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "retrier_to_json": {
            "name": "retrier_to_json",
            "location": 191,
            "return": [
                "Dict[str, bool]",
                "dict",
                "Dict[str, Any]",
                "OrderedDict[str, Any]",
                "str"
            ],
            "arguments": {
                "val": [
                    "int",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        },
        "containeroverrides_to_json": {
            "name": "containeroverrides_to_json",
            "location": 246,
            "return": [
                "bool",
                "Optional[Any]"
            ],
            "arguments": {
                "val": [
                    "bytes",
                    "int",
                    "str",
                    "typing.IO",
                    "IO",
                    "list[str]",
                    "List[str]",
                    "cmk.utils.type_defs.HostAddress"
                ]
            }
        },
        "batchjob_to_json": {
            "name": "batchjob_to_json",
            "location": 283,
            "return": [
                "bool",
                "Optional[Any]"
            ],
            "arguments": {
                "val": [
                    "bytes",
                    "int",
                    "str",
                    "typing.IO",
                    "IO",
                    "list[str]",
                    "List[str]",
                    "cmk.utils.type_defs.HostAddress"
                ]
            }
        },
        "choicecase_to_json": {
            "name": "choicecase_to_json",
            "location": 361,
            "return": [
                "bool",
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "val": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "succeed_to_json": {
            "name": "succeed_to_json",
            "location": 385,
            "return": [
                "bool",
                "Optional[Any]"
            ],
            "arguments": {
                "val": [
                    "bytes",
                    "int",
                    "str",
                    "typing.IO",
                    "IO",
                    "list[str]",
                    "List[str]",
                    "cmk.utils.type_defs.HostAddress"
                ]
            }
        },
        "fail_to_json": {
            "name": "fail_to_json",
            "location": 397,
            "return": [
                "bool",
                "Optional[Any]"
            ],
            "arguments": {
                "val": [
                    "bytes",
                    "int",
                    "str",
                    "typing.IO",
                    "IO",
                    "list[str]",
                    "List[str]",
                    "cmk.utils.type_defs.HostAddress"
                ]
            }
        },
        "ErrorType.__str__": {
            "name": "__str__",
            "location": 26,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateType.__str__": {
            "name": "__str__",
            "location": 39,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResourceType.__str__": {
            "name": "__str__",
            "location": 49,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComparisonType.__str__": {
            "name": "__str__",
            "location": 73,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogicalOperatorType.__str__": {
            "name": "__str__",
            "location": 82,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Resource.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "type": [
                    "ResourceType"
                ],
                "region": [
                    "str"
                ],
                "aws_ac": [
                    "str"
                ]
            }
        },
        "Resource.__str__": {
            "name": "__str__",
            "location": 97,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "type": [
                    "StateType"
                ],
                "comment": [
                    "str"
                ]
            }
        },
        "State.name": {
            "name": "name",
            "location": 128,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.build": {
            "name": "build",
            "location": 131,
            "return": [
                "State"
            ],
            "arguments": {
                "self": [
                    "_TState"
                ]
            }
        },
        "State.to_json": {
            "name": "to_json",
            "location": 136,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.set_next": {
            "name": "set_next",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "next": [
                    "str"
                ]
            }
        },
        "State.get_next": {
            "name": "get_next",
            "location": 153,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Catcher.__init__": {
            "name": "__init__",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error_equals": [
                    "List[ErrorType]"
                ],
                "next": [
                    "State"
                ]
            }
        },
        "Catcher.build": {
            "name": "build",
            "location": 168,
            "return": [
                "Catcher"
            ],
            "arguments": {
                "self": [
                    "_TCatcher"
                ]
            }
        },
        "Retrier.__init__": {
            "name": "__init__",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_attempts": [
                    "int",
                    "Optional[int]"
                ],
                "backoff_rate": [
                    "float",
                    "bool",
                    "Optional[Callable[[Any], None]]",
                    "Union[float, Tuple[float, float]]",
                    "str"
                ],
                "interval_seconds": [
                    "int",
                    "bool",
                    "Optional[Callable[[Any], None]]",
                    "Union[float, Tuple[float, float]]",
                    "float",
                    "str"
                ],
                "error_equals": [
                    "List[ErrorType]"
                ]
            }
        },
        "Task.__init__": {
            "name": "__init__",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "resource": [
                    "Resource"
                ],
                "comment": [
                    "str"
                ],
                "retry": [
                    "List[Retrier]"
                ],
                "catch": [
                    "List[Catcher]"
                ],
                "timeout_seconds": [
                    "int"
                ]
            }
        },
        "ContainerOverrides.__init__": {
            "name": "__init__",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "Optional[str]"
                ],
                "environment": [
                    "Optional[str]"
                ],
                "instance_type": [
                    "Optional[str]"
                ],
                "memory": [
                    "Optional[int]"
                ],
                "resource_requirements": [
                    "Optional[list]"
                ],
                "vcpus": [
                    "Optional[int]"
                ]
            }
        },
        "BatchJob.__init__": {
            "name": "__init__",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "definition": [
                    "str"
                ],
                "queue": [
                    "str"
                ],
                "parameters": [
                    "str"
                ],
                "comment": [
                    "str"
                ],
                "retry": [
                    "List[Retrier]"
                ],
                "catch": [
                    "List[Catcher]"
                ],
                "timeout_seconds": [
                    "int"
                ],
                "container_overrides": [
                    "Optional[ContainerOverrides]"
                ]
            }
        },
        "EcsTask.__init__": {
            "name": "__init__",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "cluster": [
                    "str"
                ],
                "definition": [
                    "str"
                ],
                "launch_type": [
                    "str"
                ],
                "network_configuration": [
                    "dict"
                ],
                "overrides": [
                    "dict"
                ],
                "comment": [
                    "str"
                ],
                "retry": [
                    "List[Retrier]"
                ],
                "catch": [
                    "List[Catcher]"
                ],
                "timeout_seconds": [
                    "int"
                ]
            }
        },
        "Pass.__init__": {
            "name": "__init__",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "result": [
                    "dict"
                ],
                "result_path": [
                    "str"
                ],
                "comment": [
                    "str"
                ]
            }
        },
        "Wait.__init__": {
            "name": "__init__",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "seconds": [
                    "int"
                ],
                "comment": [
                    "str"
                ]
            }
        },
        "Comparison.__init__": {
            "name": "__init__",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "comparison_type": [
                    "ComparisonType"
                ],
                "value": [
                    "object"
                ]
            }
        },
        "Comparison.type": {
            "name": "type",
            "location": 343,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Comparison.value": {
            "name": "value",
            "location": 346,
            "return": [
                "str",
                "int",
                "Type[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChoiceCase.__init__": {
            "name": "__init__",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "variable": [
                    "str"
                ],
                "comparison": [
                    "Comparison"
                ],
                "next": [
                    "State"
                ]
            }
        },
        "Choice.__init__": {
            "name": "__init__",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "choices": [
                    "List[ChoiceCase]"
                ],
                "default": [
                    "State"
                ],
                "comment": [
                    "str"
                ]
            }
        },
        "Succeed.__init__": {
            "name": "__init__",
            "location": 380,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Fail.__init__": {
            "name": "__init__",
            "location": 390,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "cause": [
                    "str"
                ],
                "error": [
                    "str"
                ]
            }
        }
    },
    "steppy-graph-master/steppygraph/utils.py": {
        "filter_props": {
            "name": "filter_props",
            "location": 2,
            "return": [
                "dict"
            ],
            "arguments": {
                "d": [
                    "dict"
                ]
            }
        }
    },
    "steppy-graph-master/steppygraph/__init__.py": {},
    "steppy-graph-master/steppygraph/test/machine_test.py": {
        "test_hello_machine": {
            "name": "test_hello_machine",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_state_does_not_update_next_property": {
            "name": "test_add_state_does_not_update_next_property",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_next_set_for_two_state_machine": {
            "name": "test_next_set_for_two_state_machine",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pass_wait": {
            "name": "test_pass_wait",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_machine_sets_region_and_ac": {
            "name": "test_machine_sets_region_and_ac",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_idx": {
            "name": "test_idx",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_last_orphan": {
            "name": "test_last_orphan",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_end_not_set_in_succeed_state": {
            "name": "test_end_not_set_in_succeed_state",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "snake_to_camel": {
            "name": "snake_to_camel",
            "location": 93,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        }
    },
    "steppy-graph-master/steppygraph/test/states_test.py": {
        "test_state_to_str": {
            "name": "test_state_to_str",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_comparison_type_to_str": {
            "name": "test_comparison_type_to_str",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_resource_to_json": {
            "name": "test_resource_to_json",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_lambda_task_to_json": {
            "name": "test_lambda_task_to_json",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_batch_task_to_json": {
            "name": "test_batch_task_to_json",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ecs_task_to_json": {
            "name": "test_ecs_task_to_json",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_choice_case_to_json": {
            "name": "test_choice_case_to_json",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_choice_to_json": {
            "name": "test_choice_to_json",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parallel": {
            "name": "test_parallel",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_catcher_to_json": {
            "name": "test_catcher_to_json",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_setting_timeout_works": {
            "name": "test_setting_timeout_works",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_setting_catcher_on_task_works": {
            "name": "test_setting_catcher_on_task_works",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "steppy-graph-master/steppygraph/test/testutils.py": {
        "write_json_test_case": {
            "name": "write_json_test_case",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "s": [
                    "object"
                ]
            }
        },
        "read_json_test_case": {
            "name": "read_json_test_case",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        }
    },
    "steppy-graph-master/steppygraph/test/utils_test.py": {
        "test_filter_keys": {
            "name": "test_filter_keys",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
{
    "storage-master/setup.py": {},
    "storage-master/test_integration.py": {
        "IntegrationTests.setUpClass": {
            "name": "setUpClass",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str"
                ]
            }
        },
        "IntegrationTests.tearDownClass": {
            "name": "tearDownClass",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "bool",
                    "Type[T]",
                    "int"
                ]
            }
        },
        "IntegrationTests.assert_transport_handles_directories": {
            "name": "assert_transport_handles_directories",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": [
                    "str"
                ]
            }
        },
        "IntegrationTests.test_file_transport_can_upload_and_download_directories": {
            "name": "test_file_transport_can_upload_and_download_directories",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTests.test_ftp_transport_can_upload_and_download_directories": {
            "name": "test_ftp_transport_can_upload_and_download_directories",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTests.test_s3_transport_can_upload_and_download_directories": {
            "name": "test_s3_transport_can_upload_and_download_directories",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTests.test_swift_transport_can_upload_and_download_directories": {
            "name": "test_swift_transport_can_upload_and_download_directories",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTests.test_gs_transport_can_upload_and_download_directories": {
            "name": "test_gs_transport_can_upload_and_download_directories",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "storage-master/storage/cloudfiles_storage.py": {
        "RackspaceAuth.get_auth_data": {
            "name": "get_auth_data",
            "location": 15,
            "return": [
                "Dict[(str, Dict[(str, Any)])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CloudFilesStorage._validate_parsed_uri": {
            "name": "_validate_parsed_uri",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CloudFilesStorage.get_connection": {
            "name": "get_connection",
            "location": 42,
            "return": [
                "str",
                "int",
                "bool",
                "Counter"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "storage-master/storage/ftp_storage.py": {
        "FTPStorage.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "storage_uri": [
                    "str",
                    "bytes",
                    "typing.Iterable[str]"
                ]
            }
        },
        "FTPStorage._configure_keepalive": {
            "name": "_configure_keepalive",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ftp_client": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "FTPStorage._connect": {
            "name": "_connect",
            "location": 63,
            "return": [
                "FTP"
            ],
            "arguments": {
                "self": []
            }
        },
        "FTPStorage._cd_to_file": {
            "name": "_cd_to_file",
            "location": 73,
            "return": [
                "list[str]",
                "str",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "ftp_client": []
            }
        },
        "FTPStorage._list": {
            "name": "_list",
            "location": 78,
            "return": [
                "tuple[list[]]"
            ],
            "arguments": {
                "self": [],
                "ftp_client": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "FTPStorage._walk": {
            "name": "_walk",
            "location": 96,
            "return": [
                "typing.Generator[tuple[typing.Union[None,str,dict[str, str]]]]",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "ftp_client": [],
                "target_directory": [
                    "None",
                    "str",
                    "dict[str, str]"
                ]
            }
        },
        "FTPStorage._create_directory_structure": {
            "name": "_create_directory_structure",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ftp_client": [],
                "target_path": [
                    "str",
                    "None",
                    "typing.Callable[str, None]"
                ],
                "restore": [
                    "bool"
                ]
            }
        },
        "FTPStorage.save_to_filename": {
            "name": "save_to_filename",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ]
            }
        },
        "FTPStorage.save_to_file": {
            "name": "save_to_file",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "out_file": [
                    "typing.BinaryIO",
                    "str",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "FTPStorage.save_to_directory": {
            "name": "save_to_directory",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "destination_directory": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "FTPStorage.load_from_filename": {
            "name": "load_from_filename",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ]
            }
        },
        "FTPStorage.load_from_file": {
            "name": "load_from_file",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "in_file": [
                    "typing.BinaryIO",
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "FTPStorage.load_from_directory": {
            "name": "load_from_directory",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_directory": [
                    "str",
                    "bytes"
                ]
            }
        },
        "FTPStorage.delete": {
            "name": "delete",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FTPStorage.delete_directory": {
            "name": "delete_directory",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FTPStorage.get_download_url": {
            "name": "get_download_url",
            "location": 239,
            "return": [],
            "arguments": {
                "self": [],
                "seconds": [
                    "int"
                ],
                "key": [
                    "None",
                    "str",
                    "int",
                    "list[str]"
                ]
            }
        },
        "FTPStorage.get_sanitized_uri": {
            "name": "get_sanitized_uri",
            "location": 266,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FTPSStorage._connect": {
            "name": "_connect",
            "location": 272,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "storage-master/storage/google_storage.py": {
        "GoogleStorage._get_bucket": {
            "name": "_get_bucket",
            "location": 22,
            "return": [
                "str",
                "Dict[str, Any]",
                "bool",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleStorage._get_blob": {
            "name": "_get_blob",
            "location": 31,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleStorage.save_to_filename": {
            "name": "save_to_filename",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ]
            }
        },
        "GoogleStorage.save_to_file": {
            "name": "save_to_file",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "out_file": [
                    "BinaryIO",
                    "str"
                ]
            }
        },
        "GoogleStorage.load_from_filename": {
            "name": "load_from_filename",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ]
            }
        },
        "GoogleStorage.load_from_file": {
            "name": "load_from_file",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "in_file": [
                    "str"
                ]
            }
        },
        "GoogleStorage.delete": {
            "name": "delete",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleStorage.get_download_url": {
            "name": "get_download_url",
            "location": 67,
            "return": [
                "bool",
                "str",
                "Union[dict, list]"
            ],
            "arguments": {
                "self": [],
                "seconds": [
                    "int",
                    "str"
                ],
                "key": [
                    "Optional[str]",
                    "None",
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "GoogleStorage.save_to_directory": {
            "name": "save_to_directory",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "directory_path": [
                    "str"
                ]
            }
        },
        "GoogleStorage.load_from_directory": {
            "name": "load_from_directory",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "directory_path": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "GoogleStorage.delete_directory": {
            "name": "delete_directory",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "storage-master/storage/local_storage.py": {
        "LocalStorage._validate_parsed_uri": {
            "name": "_validate_parsed_uri",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalStorage.save_to_filename": {
            "name": "save_to_filename",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ]
            }
        },
        "LocalStorage.save_to_file": {
            "name": "save_to_file",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "out_file": [
                    "BinaryIO",
                    "str",
                    "Callable[[str],None]",
                    "Callable[str,None]"
                ]
            }
        },
        "LocalStorage.save_to_directory": {
            "name": "save_to_directory",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "destination_directory": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "LocalStorage._ensure_exists": {
            "name": "_ensure_exists",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalStorage.load_from_filename": {
            "name": "load_from_filename",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ]
            }
        },
        "LocalStorage.load_from_file": {
            "name": "load_from_file",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "in_file": [
                    "str",
                    "BinaryIO",
                    "bool",
                    "Iterable[str]"
                ]
            }
        },
        "LocalStorage.load_from_directory": {
            "name": "load_from_directory",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_directory": [
                    "str",
                    "Iterable[str]",
                    "os.PathLike"
                ]
            }
        },
        "LocalStorage.delete": {
            "name": "delete",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalStorage.delete_directory": {
            "name": "delete_directory",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalStorage.get_download_url": {
            "name": "get_download_url",
            "location": 84,
            "return": [
                "bool",
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "seconds": [
                    "int",
                    "Optional[str]",
                    "List[str]",
                    "str"
                ],
                "key": [
                    "Optional[str]",
                    "None",
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "LocalStorage.get_sanitized_uri": {
            "name": "get_sanitized_uri",
            "location": 109,
            "return": [
                "Optional[str]",
                "int",
                "str",
                "bytes",
                "tuple",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "storage-master/storage/retry.py": {
        "attempt": {
            "name": "attempt",
            "location": 14,
            "return": [
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "f": [
                    "Callable",
                    "Callable[...,Awaitable[Any]]"
                ]
            }
        }
    },
    "storage-master/storage/s3_storage.py": {
        "S3Storage.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "storage_uri": [
                    "str",
                    "bool",
                    "Dict[str,Callable]",
                    "BaseException",
                    "Dict[str,list[str]]",
                    "Dict[str,List[str]]",
                    "Dict[str,Any]"
                ]
            }
        },
        "S3Storage._validate_parsed_uri": {
            "name": "_validate_parsed_uri",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3Storage._connect": {
            "name": "_connect",
            "location": 32,
            "return": [
                "str",
                "Mapping[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3Storage.save_to_filename": {
            "name": "save_to_filename",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ]
            }
        },
        "S3Storage.save_to_file": {
            "name": "save_to_file",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "out_file": [
                    "BinaryIO",
                    "str",
                    "Callable[[str],None]",
                    "Callable[str,None]"
                ]
            }
        },
        "S3Storage.save_to_directory": {
            "name": "save_to_directory",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "directory_path": [
                    "str"
                ]
            }
        },
        "S3Storage.load_from_filename": {
            "name": "load_from_filename",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ]
            }
        },
        "S3Storage.load_from_file": {
            "name": "load_from_file",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "in_file": [
                    "str",
                    "bool",
                    "Dict",
                    "Optional[Directory]",
                    "None"
                ]
            }
        },
        "S3Storage.load_from_directory": {
            "name": "load_from_directory",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_directory": [
                    "str",
                    "Union[str,bytes]",
                    "bytes"
                ]
            }
        },
        "S3Storage.delete": {
            "name": "delete",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3Storage.delete_directory": {
            "name": "delete_directory",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3Storage.get_download_url": {
            "name": "get_download_url",
            "location": 154,
            "return": [
                "str",
                "raiden.storage.sqlite.SerializedSQLiteStorage",
                "dict"
            ],
            "arguments": {
                "self": [],
                "seconds": [
                    "int",
                    "bytes",
                    "str"
                ],
                "key": [
                    "Optional[str]",
                    "None",
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "S3Storage.get_sanitized_uri": {
            "name": "get_sanitized_uri",
            "location": 160,
            "return": [
                "Optional[str]",
                "int",
                "str",
                "bytes",
                "tuple",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "storage-master/storage/storage.py": {
        "register_storage_protocol": {
            "name": "register_storage_protocol",
            "location": 31,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "scheme": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "timeout": {
            "name": "timeout",
            "location": 65,
            "return": [
                "bool",
                "Match",
                "Tuple[int, Dict[str, Any]]"
            ],
            "arguments": {
                "seconds": [
                    "int",
                    "dict",
                    "bool",
                    "list"
                ],
                "worker": [
                    "Callable[[], T]",
                    "str",
                    "bool",
                    "List[Dict[int, float]]"
                ]
            }
        },
        "_generate_download_url_from_base": {
            "name": "_generate_download_url_from_base",
            "location": 142,
            "return": [
                "Union[(_T0, _T1)]"
            ],
            "arguments": {
                "base": [
                    "Union[str, None]",
                    "str",
                    "Optional[str]",
                    "type",
                    "List[\"Source\"]"
                ],
                "object_name": [
                    "str"
                ]
            }
        },
        "get_storage": {
            "name": "get_storage",
            "location": 158,
            "return": [
                "Type[BaseException]",
                "bool",
                "Optional[Type[BaseException]]",
                "int"
            ],
            "arguments": {
                "storage_uri": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "get_optional_query_parameter": {
            "name": "get_optional_query_parameter",
            "location": 169,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Tuple[Any, Any]]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "parsed_query": [
                    "str",
                    "Callable",
                    "IO[str]"
                ],
                "parameter": [
                    "str"
                ]
            }
        },
        "register_storage_protocol.decorate_storage_protocol": {
            "name": "decorate_storage_protocol",
            "location": 35,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "aClass": []
            }
        },
        "timeout.wrapper": {
            "name": "wrapper",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Storage.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "storage_uri": [
                    "str",
                    "Union[str, Dict[str, str]]"
                ]
            }
        },
        "Storage._validate_parsed_uri": {
            "name": "_validate_parsed_uri",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Storage._class_name": {
            "name": "_class_name",
            "location": 100,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Storage.save_to_filename": {
            "name": "save_to_filename",
            "location": 103,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "Storage.save_to_file": {
            "name": "save_to_file",
            "location": 107,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "out_file": [
                    "BinaryIO",
                    "Optional[BinaryIO]",
                    "List[str]"
                ]
            }
        },
        "Storage.save_to_directory": {
            "name": "save_to_directory",
            "location": 111,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "directory_path": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "Iterable[str]"
                ]
            }
        },
        "Storage.load_from_filename": {
            "name": "load_from_filename",
            "location": 115,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str",
                    "Tuple[str]",
                    "Set[str]",
                    "bytes"
                ]
            }
        },
        "Storage.load_from_file": {
            "name": "load_from_file",
            "location": 119,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "in_file": [
                    "BinaryIO",
                    "bool",
                    "Iterable[str]",
                    "str"
                ]
            }
        },
        "Storage.load_from_directory": {
            "name": "load_from_directory",
            "location": 123,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "directory_path": [
                    "str",
                    "Tuple[str]",
                    "Iterable[str]",
                    "bool",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "Storage.delete": {
            "name": "delete",
            "location": 127,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Storage.delete_directory": {
            "name": "delete_directory",
            "location": 130,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Storage.get_download_url": {
            "name": "get_download_url",
            "location": 134,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "seconds": [
                    "Optional[str]",
                    "int",
                    "List[str]",
                    "str"
                ],
                "key": [
                    "Optional[str]",
                    "int",
                    "List[str]",
                    "str"
                ]
            }
        },
        "Storage.get_sanitized_uri": {
            "name": "get_sanitized_uri",
            "location": 138,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "storage-master/storage/swift_storage.py": {
        "register_swift_protocol": {
            "name": "register_swift_protocol",
            "location": 17,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "scheme": [
                    "str",
                    "Dict",
                    "bool"
                ],
                "auth_endpoint": [
                    "str",
                    "Dict",
                    "bool"
                ]
            }
        },
        "register_swift_protocol.wrapper": {
            "name": "wrapper",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "AsyncGenerator",
                    "Callable",
                    "Optional[str]"
                ]
            }
        },
        "SwiftStorageError.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "bool"
                ],
                "do_not_retry": [
                    "bool",
                    "int"
                ]
            }
        },
        "SwiftStorage._validate_parsed_uri": {
            "name": "_validate_parsed_uri",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SwiftStorage.get_connection": {
            "name": "get_connection",
            "location": 66,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SwiftStorage.get_container_and_object_names": {
            "name": "get_container_and_object_names",
            "location": 90,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SwiftStorage._download_object_to_file": {
            "name": "_download_object_to_file",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "container": [
                    "str",
                    "int",
                    "Dict[int,Set[str]]",
                    "Dict[int,set[str]]"
                ],
                "object_name": [
                    "str",
                    "int",
                    "Dict[int,Set[str]]",
                    "Dict[int,set[str]]"
                ],
                "out_file": [
                    "BinaryIO",
                    "str"
                ]
            }
        },
        "SwiftStorage._download_object_to_filename": {
            "name": "_download_object_to_filename",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "container": [
                    "str",
                    "bool"
                ],
                "object_name": [
                    "str",
                    "bool"
                ],
                "filename": [
                    "str",
                    "bool"
                ]
            }
        },
        "SwiftStorage.save_to_file": {
            "name": "save_to_file",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "out_file": [
                    "str",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "SwiftStorage.save_to_filename": {
            "name": "save_to_filename",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ]
            }
        },
        "SwiftStorage.load_from_file": {
            "name": "load_from_file",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "in_file": [
                    "BinaryIO",
                    "str",
                    "Dict"
                ]
            }
        },
        "SwiftStorage.load_from_filename": {
            "name": "load_from_filename",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "in_path": [
                    "str",
                    "os.PathLike"
                ]
            }
        },
        "SwiftStorage.delete": {
            "name": "delete",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SwiftStorage.get_download_url": {
            "name": "get_download_url",
            "location": 148,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "seconds": [
                    "int",
                    "str",
                    "bytes"
                ],
                "key": [
                    "str",
                    "None",
                    "List[str]",
                    "int",
                    "bytes",
                    "Optional[str]"
                ]
            }
        },
        "SwiftStorage.get_sanitized_uri": {
            "name": "get_sanitized_uri",
            "location": 169,
            "return": [
                "Sequence[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SwiftStorage._find_storage_objects_with_prefix": {
            "name": "_find_storage_objects_with_prefix",
            "location": 182,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "container": [
                    "str",
                    "List[Tuple]",
                    "List[tuple]"
                ],
                "prefix": [
                    "str",
                    "List[Tuple]",
                    "List[tuple]"
                ]
            }
        },
        "SwiftStorage.save_to_directory": {
            "name": "save_to_directory",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "directory_path": [
                    "str",
                    "Dict"
                ]
            }
        },
        "SwiftStorage.load_from_directory": {
            "name": "load_from_directory",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "directory_path": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "SwiftStorage.delete_directory": {
            "name": "delete_directory",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "storage-master/storage/url_parser.py": {
        "_new_uri": {
            "name": "_new_uri",
            "location": 6,
            "return": [
                "urllib.parse.ParseResult"
            ],
            "arguments": {
                "parsed_uri": [
                    "Dict[str,str]",
                    "str",
                    "Exception",
                    "urllib.parse.ParseResult",
                    "List[str]",
                    "Callable",
                    "List"
                ],
                "new_netloc": [
                    "Dict[str,str]",
                    "str",
                    "Exception",
                    "urllib.parse.ParseResult",
                    "List[str]",
                    "Callable",
                    "List"
                ],
                "new_query": [
                    "Dict[str,str]",
                    "str",
                    "Exception",
                    "urllib.parse.ParseResult",
                    "List[str]",
                    "Callable",
                    "List"
                ]
            }
        },
        "remove_user_info": {
            "name": "remove_user_info",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "parsed_uri": [
                    "urllib.parse.ParseResult"
                ]
            }
        },
        "sanitize_resource_uri": {
            "name": "sanitize_resource_uri",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "parsed_uri": [
                    "str",
                    "urllib.parse.ParseResult"
                ]
            }
        }
    },
    "storage-master/storage/__init__.py": {},
    "storage-master/tests/helpers.py": {
        "cleanup": {
            "name": "cleanup",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "str",
                    "float",
                    "Iterable[object]",
                    "int",
                    "Union[str,Type]",
                    "bool"
                ]
            }
        },
        "cleanup_nested_directory": {
            "name": "cleanup_nested_directory",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "str",
                    "bytes",
                    "T",
                    "int"
                ]
            }
        },
        "create_temp_nested_directory_with_files": {
            "name": "create_temp_nested_directory_with_files",
            "location": 92,
            "return": [
                "Dict[(str, Dict[(str, Union[(NamedIO, TempDirectory, str)])])]"
            ],
            "arguments": {
                "suffixes": [
                    "List[Text]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TempDirectory.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "float",
                    "None",
                    "str",
                    "bool",
                    "Optional[int]"
                ]
            }
        },
        "TempDirectory.name": {
            "name": "name",
            "location": 22,
            "return": [
                "str",
                "Type",
                "Callable[..., T]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TempDirectory.add_file": {
            "name": "add_file",
            "location": 25,
            "return": [
                "NamedIO"
            ],
            "arguments": {
                "self": [],
                "contents": [
                    "bytes",
                    "str"
                ],
                "suffix": [
                    "Text",
                    "str",
                    "BinaryIO",
                    "Dict"
                ]
            }
        },
        "TempDirectory.add_dir": {
            "name": "add_dir",
            "location": 33,
            "return": [
                "TempDirectory"
            ],
            "arguments": {
                "self": [
                    "_TTempDirectory@@TempDirectory@@"
                ]
            }
        },
        "TempDirectory.cleanup": {
            "name": "cleanup",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TempDirectory.__enter__": {
            "name": "__enter__",
            "location": 45,
            "return": [
                "TempDirectory"
            ],
            "arguments": {
                "self": [
                    "_TTempDirectory@@TempDirectory@@"
                ]
            }
        },
        "TempDirectory.__exit__": {
            "name": "__exit__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileSpy.__init__": {
            "name": "__init__",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileSpy.write": {
            "name": "write",
            "location": 143,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "chunk": [
                    "list",
                    "List[int]",
                    "List[bytes]"
                ]
            }
        },
        "FileSpy.seek": {
            "name": "seek",
            "location": 148,
            "return": [
                "int",
                "str",
                "Callable",
                "Sequence[int]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "Sequence[int]",
                    "str"
                ],
                "whence": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "FileSpy.assert_written": {
            "name": "assert_written",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "assertion": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "FileSpy.assert_number_of_chunks": {
            "name": "assert_number_of_chunks",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "List",
                    "Sequence[int]"
                ]
            }
        }
    },
    "storage-master/tests/service_test_case.py": {
        "get_port": {
            "name": "get_port",
            "location": 31,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "ServiceRequest.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "Dict[str,list[bytes]]",
                    "Dict[str,str]",
                    "str",
                    "Dict[str,List[bytes]]",
                    "denite.util.Candidates"
                ],
                "method": [
                    "str",
                    "List",
                    "Dict",
                    "None",
                    "Optional[str]",
                    "int",
                    "Optional[int]",
                    "bool"
                ],
                "path": [
                    "str",
                    "List",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "body": [
                    "str",
                    "List",
                    "Dict",
                    "None",
                    "Optional[str]",
                    "int",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "ServiceRequest.assert_header_equals": {
            "name": "assert_header_equals",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "header_key": [
                    "str",
                    "List[bytes]"
                ],
                "header_value": [
                    "str",
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "float",
                    "Sequence[Dict]",
                    "None",
                    "Sequence[dict]"
                ]
            }
        },
        "ServiceRequest.assert_body_equals": {
            "name": "assert_body_equals",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "body": [
                    "Dict[str,Any]",
                    "str",
                    "Mapping[str,str]",
                    "Mapping"
                ]
            }
        },
        "Service.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Service.url": {
            "name": "url",
            "location": 79,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Service.add_handler": {
            "name": "add_handler",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "List[str]"
                ],
                "path": [
                    "str",
                    "List[str]"
                ],
                "callback": [
                    "str",
                    "bool",
                    "Sequence[str]",
                    "Set[str]",
                    "List[str]"
                ]
            }
        },
        "Service.handler": {
            "name": "handler",
            "location": 86,
            "return": [
                "List[bytes]",
                "str",
                "Tuple[Tuple[int,...]]",
                "Dict"
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "Dict[str, Any]"
                ],
                "start_response": [
                    "str",
                    "Dict",
                    "Dict[str,float]"
                ]
            }
        },
        "Service.start": {
            "name": "start",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Service.stop": {
            "name": "stop",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Service.loop": {
            "name": "loop",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server_started": [
                    "int",
                    "float",
                    "asyncio.Event",
                    "threading.Event"
                ],
                "stop_server": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "Service.assert_requested": {
            "name": "assert_requested",
            "location": 159,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "List[str]"
                ],
                "path": [
                    "str",
                    "List[str]"
                ],
                "headers": [
                    "None",
                    "Optional[str]",
                    "Dict[str,str]",
                    "Optional[Dict[str,str]]",
                    "pandas.io.formats.formaDataFrameFormatter"
                ]
            }
        },
        "Service.get_all_requests": {
            "name": "get_all_requests",
            "location": 170,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "List[str]"
                ],
                "path": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Service.assert_not_requested": {
            "name": "assert_not_requested",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "List[str]",
                    "Pattern[str]",
                    "Pattern"
                ],
                "path": [
                    "str",
                    "List[str]",
                    "Pattern[str]",
                    "Pattern"
                ]
            }
        },
        "Service.assert_requested_n_times": {
            "name": "assert_requested_n_times",
            "location": 178,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "bool",
                    "SqlFile",
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]"
                ],
                "path": [
                    "str",
                    "bool",
                    "SqlFile",
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]"
                ],
                "n": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "ServiceTestCase.setUp": {
            "name": "setUp",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceTestCase.tearDown": {
            "name": "tearDown",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceTestCase.add_service": {
            "name": "add_service",
            "location": 197,
            "return": [
                "Service"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceTestCase.start_services": {
            "name": "start_services",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceTestCase.stop_services": {
            "name": "stop_services",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceTestCase.run_services": {
            "name": "run_services",
            "location": 211,
            "return": [
                "Generator[None,None,None]",
                "Generator"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "storage-master/tests/storage_test_case.py": {
        "StorageTestCase._generate_storage_uri": {
            "name": "_generate_storage_uri",
            "location": 9,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "object_path": [
                    "str",
                    "bool",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]",
                    "None",
                    "int"
                ],
                "parameters": [
                    "str",
                    "None",
                    "bool",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]",
                    "int"
                ]
            }
        },
        "StorageTestCase.assert_rejects_multiple_query_values": {
            "name": "assert_rejects_multiple_query_values",
            "location": 13,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "object_path": [
                    "str",
                    "List[str]",
                    "Optional[Dict]",
                    "Dict",
                    "None"
                ],
                "query_arg": [
                    "str",
                    "List[str]",
                    "List",
                    "int"
                ],
                "values": [
                    "List[Text]",
                    "bool",
                    "int",
                    "Callable",
                    "str",
                    "Optional[List[str]]"
                ]
            }
        }
    },
    "storage-master/tests/swift_service_test_case.py": {
        "strip_slashes": {
            "name": "strip_slashes",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "SwiftServiceTestCase.setUp": {
            "name": "setUp",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SwiftServiceTestCase.tearDown": {
            "name": "tearDown",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SwiftServiceTestCase._add_file_to_directory": {
            "name": "_add_file_to_directory",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str"
                ],
                "file_content": [
                    "str",
                    "int",
                    "bytes",
                    "Tuple[str,dict]",
                    "Tuple[Union[str,dict]]"
                ]
            }
        },
        "SwiftServiceTestCase._add_tmp_file_to_dir": {
            "name": "_add_tmp_file_to_dir",
            "location": 65,
            "return": [
                "tests.helpers.NamedIO"
            ],
            "arguments": {
                "self": [],
                "directory": [
                    "str"
                ],
                "file_content": [
                    "bytes",
                    "Dict",
                    "str"
                ],
                "suffix": [
                    "List[str]",
                    "None",
                    "str",
                    "Optional[str]",
                    "List"
                ]
            }
        },
        "SwiftServiceTestCase.add_file_error": {
            "name": "add_file_error",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error": [
                    "Dict",
                    "Dict[str,Any]",
                    "Callable",
                    "Dict[str,Outcome]",
                    "Dict[str,O]",
                    "Dict[str,utils.types.A]",
                    "Dict[str,A]"
                ]
            }
        },
        "SwiftServiceTestCase.add_container_object": {
            "name": "add_container_object",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "container_path": [
                    "str"
                ],
                "object_path": [
                    "str",
                    "BinaryIO"
                ],
                "content": [
                    "str"
                ]
            }
        },
        "SwiftServiceTestCase.expect_put_object": {
            "name": "expect_put_object",
            "location": 96,
            "return": [
                "Generator[None,None,None]",
                "Generator"
            ],
            "arguments": {
                "self": [],
                "container_path": [
                    "str"
                ],
                "object_path": [
                    "str",
                    "Dict"
                ],
                "content": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "SwiftServiceTestCase.expect_delete_object": {
            "name": "expect_delete_object",
            "location": 108,
            "return": [
                "Generator[None,None,None]",
                "Generator"
            ],
            "arguments": {
                "self": [],
                "container_path": [
                    "str"
                ],
                "object_path": [
                    "str",
                    "deque[str]",
                    "Deque"
                ]
            }
        },
        "SwiftServiceTestCase.expect_directory": {
            "name": "expect_directory",
            "location": 119,
            "return": [
                "Generator[None,None,None]",
                "Generator"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str"
                ]
            }
        },
        "SwiftServiceTestCase.expect_delete_directory": {
            "name": "expect_delete_directory",
            "location": 133,
            "return": [
                "Generator[None,None,None]",
                "Generator"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "float",
                    "int",
                    "Iterable[Any]",
                    "bool"
                ]
            }
        },
        "SwiftServiceTestCase.object_handler": {
            "name": "object_handler",
            "location": 145,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "bytes",
                    "Dict",
                    "StartResponse"
                ],
                "start_response": [
                    "str",
                    "StartResponse",
                    "T"
                ]
            }
        },
        "SwiftServiceTestCase.object_put_handler": {
            "name": "object_put_handler",
            "location": 161,
            "return": [
                "List[bytes]"
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "bytes",
                    "str",
                    "Dict[str,Any]",
                    "StartResponse"
                ],
                "start_response": [
                    "str",
                    "StartResponse",
                    "Environ"
                ]
            }
        },
        "SwiftServiceTestCase.object_delete_handler": {
            "name": "object_delete_handler",
            "location": 188,
            "return": [
                "List[bytes]"
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "Dict[str, Any]",
                    "dict"
                ],
                "start_response": [
                    "str",
                    "StartResponse"
                ]
            }
        },
        "SwiftServiceTestCase.swift_container_handler": {
            "name": "swift_container_handler",
            "location": 201,
            "return": [
                "List[bytes]"
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "Dict[str, Any]",
                    "Callable",
                    "dict",
                    "StartResponse"
                ],
                "start_response": [
                    "str",
                    "StartResponse",
                    "Environ"
                ]
            }
        },
        "SwiftServiceTestCase.assert_container_contents_equal": {
            "name": "assert_container_contents_equal",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "object_path": [
                    "str",
                    "Dict[str,str]",
                    "Pattern[str]",
                    "Pattern",
                    "Union[str,List[str]]",
                    "List[str]"
                ]
            }
        }
    },
    "storage-master/tests/test_cloudfiles_storage.py": {
        "TestCloudFilesStorageProvider.setUp": {
            "name": "setUp",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCloudFilesStorageProvider.tearDown": {
            "name": "tearDown",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCloudFilesStorageProvider._generate_storage_uri": {
            "name": "_generate_storage_uri",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "object_path": [
                    "str",
                    "int"
                ],
                "parameters": [
                    "None",
                    "str",
                    "typing.Any"
                ]
            }
        },
        "TestCloudFilesStorageProvider._has_valid_credentials": {
            "name": "_has_valid_credentials",
            "location": 51,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "auth_data": [
                    "list[str]",
                    "list[dict[, ]]"
                ]
            }
        },
        "TestCloudFilesStorageProvider.assert_requires_all_parameters": {
            "name": "assert_requires_all_parameters",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "object_path": [
                    "str",
                    "list[]"
                ]
            }
        },
        "TestCloudFilesStorageProvider.assert_raises_on_forbidden_access": {
            "name": "assert_raises_on_forbidden_access",
            "location": 66,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCloudFilesStorageProvider.assert_raises_on_unauthorized_access": {
            "name": "assert_raises_on_unauthorized_access",
            "location": 73,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCloudFilesStorageProvider.use_local_identity_service": {
            "name": "use_local_identity_service",
            "location": 80,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCloudFilesStorageProvider.expect_head_account_object": {
            "name": "expect_head_account_object",
            "location": 88,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestCloudFilesStorageProvider.identity_handler": {
            "name": "identity_handler",
            "location": 93,
            "return": [
                "List[bytes]"
            ],
            "arguments": {
                "self": [],
                "environ": [],
                "start_response": []
            }
        },
        "TestCloudFilesStorageProvider.authentication_handler": {
            "name": "authentication_handler",
            "location": 116,
            "return": [
                "List[bytes]"
            ],
            "arguments": {
                "self": [],
                "environ": [],
                "start_response": []
            }
        },
        "TestCloudFilesStorageProvider.object_head_account_handler": {
            "name": "object_head_account_handler",
            "location": 173,
            "return": [
                "List[bytes]"
            ],
            "arguments": {
                "self": [],
                "environ": [],
                "start_response": []
            }
        },
        "TestCloudFilesStorageProvider.test_cloudfiles_default_auth_endpoint_points_to_correct_host": {
            "name": "test_cloudfiles_default_auth_endpoint_points_to_correct_host",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCloudFilesStorageProvider.test_save_to_file_raises_exception_when_missing_required_parameters": {
            "name": "test_save_to_file_raises_exception_when_missing_required_parameters",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCloudFilesStorageProvider.test_save_to_file_raises_on_forbidden_credentials": {
            "name": "test_save_to_file_raises_on_forbidden_credentials",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCloudFilesStorageProvider.test_save_to_file_writes_file_contents_to_file_object": {
            "name": "test_save_to_file_writes_file_contents_to_file_object",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCloudFilesStorageProvider.test_save_to_file_uses_default_region_when_one_is_not_provided": {
            "name": "test_save_to_file_uses_default_region_when_one_is_not_provided",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCloudFilesStorageProvider.test_save_to_file_uses_provided_region_parameter": {
            "name": "test_save_to_file_uses_provided_region_parameter",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCloudFilesStorageProvider.test_save_to_file_uses_default_endpoint_type_when_one_is_not_provided": {
            "name": "test_save_to_file_uses_default_endpoint_type_when_one_is_not_provided",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCloudFilesStorageProvider.test_save_to_file_uses_provided_public_parameter": {
            "name": "test_save_to_file_uses_provided_public_parameter",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCloudFilesStorageProvider.test_save_to_file_uses_provided_public_parameter_case_insensitive": {
            "name": "test_save_to_file_uses_provided_public_parameter_case_insensitive",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCloudFilesStorageProvider.test_load_from_file_puts_file_contents_at_object_endpoint": {
            "name": "test_load_from_file_puts_file_contents_at_object_endpoint",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCloudFilesStorageProvider.test_delete_makes_delete_request_against_swift_service": {
            "name": "test_delete_makes_delete_request_against_swift_service",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCloudFilesStorageProvider.test_get_download_url_returns_signed_url": {
            "name": "test_get_download_url_returns_signed_url",
            "location": 348,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_time": []
            }
        },
        "TestCloudFilesStorageProvider.test_get_download_url_uses_temp_url_key_when_download_url_key_not_present": {
            "name": "test_get_download_url_uses_temp_url_key_when_download_url_key_not_present",
            "location": 370,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_time": []
            }
        },
        "TestCloudFilesStorageProvider.test_cloudfiles_rejects_multiple_query_values_for_public_setting": {
            "name": "test_cloudfiles_rejects_multiple_query_values_for_public_setting",
            "location": 388,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCloudFilesStorageProvider.test_cloudfiles_rejects_multiple_query_values_for_region_setting": {
            "name": "test_cloudfiles_rejects_multiple_query_values_for_region_setting",
            "location": 392,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCloudFilesStorageProvider.test_cloudfiles_rejects_multiple_query_values_for_download_url_key_setting": {
            "name": "test_cloudfiles_rejects_multiple_query_values_for_download_url_key_setting",
            "location": 395,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCloudFilesStorageProvider.test_get_sanitized_uri_returns_storage_uri_without_username_and_password": {
            "name": "test_get_sanitized_uri_returns_storage_uri_without_username_and_password",
            "location": 398,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCloudFilesStorageProvider.test_get_sanitized_uri_returns_storage_uri_without_download_url_key": {
            "name": "test_get_sanitized_uri_returns_storage_uri_without_download_url_key",
            "location": 408,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "storage-master/tests/test_ftp_storage.py": {
        "patch_ftp_client": {
            "name": "patch_ftp_client",
            "location": 26,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "directory_listing": [
                    "None",
                    "bool",
                    "list[dict[, ]]",
                    "str",
                    "typing.Type",
                    "list[str]",
                    "typing.Callable[list[], None]"
                ],
                "expected_port": [
                    "int"
                ]
            }
        },
        "assert_connected": {
            "name": "assert_connected",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_ftp_class": [],
                "mock_ftp": [],
                "expected_port": [
                    "int"
                ]
            }
        },
        "patch_ftp_client.side_effect": {
            "name": "side_effect",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [],
                "fn": []
            }
        },
        "TestFTPStorage.setUp": {
            "name": "setUp",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFTPStorage.tearDown": {
            "name": "tearDown",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFTPStorage.test_connect_sets_tcp_keepalive_options_when_supported": {
            "name": "test_connect_sets_tcp_keepalive_options_when_supported",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_ftp_class": [],
                "mock_socket": []
            }
        },
        "TestFTPStorage.test_connect_only_enables_tcp_keepalive_options_when_options_not_supported": {
            "name": "test_connect_only_enables_tcp_keepalive_options_when_options_not_supported",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_ftp_class": [],
                "mock_socket": []
            }
        },
        "TestFTPStorage.test_ftp_save_to_filename": {
            "name": "test_ftp_save_to_filename",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_ftp_class": []
            }
        },
        "TestFTPStorage.test_ftp_save_to_filename_raises_not_found_error_when_file_does_not_exist": {
            "name": "test_ftp_save_to_filename_raises_not_found_error_when_file_does_not_exist",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_ftp_class": []
            }
        },
        "TestFTPStorage.test_ftp_save_to_filename_raises_original_exception_when_not_550": {
            "name": "test_ftp_save_to_filename_raises_original_exception_when_not_550",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_ftp_class": []
            }
        },
        "TestFTPStorage.test_ftp_save_to_file": {
            "name": "test_ftp_save_to_file",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_ftp_class": []
            }
        },
        "TestFTPStorage.test_save_to_file_with_specific_port": {
            "name": "test_save_to_file_with_specific_port",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_ftp_class": []
            }
        },
        "TestFTPStorage.test_ftp_save_to_file_raises_not_found_error_when_file_does_not_exist": {
            "name": "test_ftp_save_to_file_raises_not_found_error_when_file_does_not_exist",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_ftp_class": []
            }
        },
        "TestFTPStorage.test_ftp_save_to_file_raises_original_exception_when_not_550": {
            "name": "test_ftp_save_to_file_raises_original_exception_when_not_550",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_ftp_class": []
            }
        },
        "TestFTPStorage.test_ftp_save_to_directory_creates_destination_directory_if_needed": {
            "name": "test_ftp_save_to_directory_creates_destination_directory_if_needed",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_path_exists": [],
                "mock_makedirs": [],
                "mock_chdir": []
            }
        },
        "TestFTPStorage.test_ftp_save_to_directory_downloads_nested_files": {
            "name": "test_ftp_save_to_directory_downloads_nested_files",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_path_exists": [],
                "mock_makedirs": [],
                "mock_chdir": [],
                "mock_open": []
            }
        },
        "TestFTPStorage.test_ftp_save_to_directory_raises_not_found_error_when_directory_does_not_exist": {
            "name": "test_ftp_save_to_directory_raises_not_found_error_when_directory_does_not_exist",
            "location": 377,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFTPStorage.test_ftp_save_to_directory_raises_cwd_original_exception_when_not_550": {
            "name": "test_ftp_save_to_directory_raises_cwd_original_exception_when_not_550",
            "location": 387,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFTPStorage.test_ftp_save_to_directory_raises_not_found_error_when_file_does_not_exist": {
            "name": "test_ftp_save_to_directory_raises_not_found_error_when_file_does_not_exist",
            "location": 400,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_path_exists": [],
                "mock_makedirs": [],
                "mock_chdir": [],
                "mock_open": []
            }
        },
        "TestFTPStorage.test_ftp_save_to_directory_raises_retrbinary_original_error_when_not_550": {
            "name": "test_ftp_save_to_directory_raises_retrbinary_original_error_when_not_550",
            "location": 452,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_path_exists": [],
                "mock_makedirs": [],
                "mock_chdir": [],
                "mock_open": []
            }
        },
        "TestFTPStorage.test_ftp_load_from_filename": {
            "name": "test_ftp_load_from_filename",
            "location": 489,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_ftp_class": [],
                "mock_open": []
            }
        },
        "TestFTPStorage.test_load_from_filename_with_specific_port": {
            "name": "test_load_from_filename_with_specific_port",
            "location": 506,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_ftp_class": [],
                "mock_open": []
            }
        },
        "TestFTPStorage.test_ftp_load_from_file": {
            "name": "test_ftp_load_from_file",
            "location": 523,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_ftp_class": []
            }
        },
        "TestFTPStorage.test_ftp_load_from_directory_creates_directories_from_storage_URI_if_not_present": {
            "name": "test_ftp_load_from_directory_creates_directories_from_storage_URI_if_not_present",
            "location": 538,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_ftp_class": []
            }
        },
        "TestFTPStorage.test_ftp_load_from_directory_does_not_create_dirs_from_storage_URI_if_present": {
            "name": "test_ftp_load_from_directory_does_not_create_dirs_from_storage_URI_if_present",
            "location": 557,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFTPStorage.test_ftp_load_from_directory_create_dirs_from_load_directory": {
            "name": "test_ftp_load_from_directory_create_dirs_from_load_directory",
            "location": 576,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFTPStorage.test_ftp_load_from_directory_does_not_create_existing_dirs_from_load_directory": {
            "name": "test_ftp_load_from_directory_does_not_create_existing_dirs_from_load_directory",
            "location": 606,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFTPStorage.test_ftp_load_from_directory_creates_files_from_local_source_directory": {
            "name": "test_ftp_load_from_directory_creates_files_from_local_source_directory",
            "location": 638,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_open": []
            }
        },
        "TestFTPStorage.test_ftp_delete": {
            "name": "test_ftp_delete",
            "location": 676,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFTPStorage.test_ftp_delete_raises_not_found_error_when_file_does_not_exist": {
            "name": "test_ftp_delete_raises_not_found_error_when_file_does_not_exist",
            "location": 684,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFTPStorage.test_ftp_delete_raises_original_exception_when_not_550": {
            "name": "test_ftp_delete_raises_original_exception_when_not_550",
            "location": 696,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFTPStorage.test_ftp_delete_directory": {
            "name": "test_ftp_delete_directory",
            "location": 704,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFTPStorage.test_ftp_delete_directory_raises_not_found_error_when_directory_does_not_exist": {
            "name": "test_ftp_delete_directory_raises_not_found_error_when_directory_does_not_exist",
            "location": 760,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFTPStorage.test_ftp_delete_directory_raises_original_exception_when_not_550": {
            "name": "test_ftp_delete_directory_raises_original_exception_when_not_550",
            "location": 769,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFTPStorage.test_ftp_delete_directory_raises_not_found_error_when_file_does_not_exist": {
            "name": "test_ftp_delete_directory_raises_not_found_error_when_file_does_not_exist",
            "location": 777,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFTPStorage.test_ftp_delete_directory_raises_original_delete_exception_when_not_550": {
            "name": "test_ftp_delete_directory_raises_original_delete_exception_when_not_550",
            "location": 822,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFTPStorage.test_ftp_get_download_url": {
            "name": "test_ftp_get_download_url",
            "location": 855,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_ftp_class": []
            }
        },
        "TestFTPStorage.test_ftp_get_download_url_returns_none_with_empty_base": {
            "name": "test_ftp_get_download_url_returns_none_with_empty_base",
            "location": 868,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_ftp_class": []
            }
        },
        "TestFTPStorage.test_ftp_get_sanitized_uri": {
            "name": "test_ftp_get_sanitized_uri",
            "location": 880,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_ftp_class": []
            }
        },
        "TestFTPSStorage.test_ftps_scheme_connects_using_ftp_tls_class": {
            "name": "test_ftps_scheme_connects_using_ftp_tls_class",
            "location": 898,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_ftp_tls_class": []
            }
        },
        "TestFTPStorage.test_ftp_save_to_filename.mock_retrbinary": {
            "name": "mock_retrbinary",
            "location": 132,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "command": [],
                "callback": []
            }
        },
        "TestFTPStorage.test_ftp_save_to_file.mock_retrbinary": {
            "name": "mock_retrbinary",
            "location": 190,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "command": [],
                "callback": []
            }
        },
        "TestFTPStorage.test_save_to_file_with_specific_port.mock_retrbinary": {
            "name": "mock_retrbinary",
            "location": 217,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "command": [],
                "callback": []
            }
        },
        "TestFTPSStorage.test_ftps_scheme_connects_using_ftp_tls_class.mock_retrbinary": {
            "name": "mock_retrbinary",
            "location": 903,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "command": [],
                "callback": []
            }
        },
        "TestFTPSStorage.test_ftps_scheme_connects_using_ftp_tls_class.assert_tcp_keepalive_already_enabled": {
            "name": "assert_tcp_keepalive_already_enabled",
            "location": 912,
            "return": [
                "None"
            ],
            "arguments": {
                "username": [],
                "password": []
            }
        }
    },
    "storage-master/tests/test_google_storage.py": {
        "TestGoogleStorage.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGoogleStorage.assert_gets_bucket_with_credentials": {
            "name": "assert_gets_bucket_with_credentials",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGoogleStorage.test_save_to_filename_downloads_blob_to_file_location": {
            "name": "test_save_to_filename_downloads_blob_to_file_location",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGoogleStorage.test_save_to_filename_raises_when_file_does_not_exist": {
            "name": "test_save_to_filename_raises_when_file_does_not_exist",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGoogleStorage.test_save_to_file_downloads_blob_to_file_object": {
            "name": "test_save_to_file_downloads_blob_to_file_object",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGoogleStorage.test_save_to_file_raises_when_filename_does_not_exist": {
            "name": "test_save_to_file_raises_when_filename_does_not_exist",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGoogleStorage.test_load_from_filename_uploads_blob_from_file_location": {
            "name": "test_load_from_filename_uploads_blob_from_file_location",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGoogleStorage.test_load_from_file_uploads_blob_from_file_object": {
            "name": "test_load_from_file_uploads_blob_from_file_object",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGoogleStorage.test_load_from_file_guesses_content_type_based_on_filename": {
            "name": "test_load_from_file_guesses_content_type_based_on_filename",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGoogleStorage.test_delete_deletes_blob": {
            "name": "test_delete_deletes_blob",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGoogleStorage.test_delete_raises_when_file_does_not_exist": {
            "name": "test_delete_raises_when_file_does_not_exist",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGoogleStorage.test_get_download_url_returns_signed_url_with_default_expiration": {
            "name": "test_get_download_url_returns_signed_url_with_default_expiration",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGoogleStorage.test_get_download_url_returns_signed_url_with_provided_expiration": {
            "name": "test_get_download_url_returns_signed_url_with_provided_expiration",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGoogleStorage.test_get_download_url_does_not_use_key_when_provided": {
            "name": "test_get_download_url_does_not_use_key_when_provided",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGoogleStorage.test_get_sanitized_uri_returns_storage_uri_without_username_and_password": {
            "name": "test_get_sanitized_uri_returns_storage_uri_without_username_and_password",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGoogleStorage._mock_blob": {
            "name": "_mock_blob",
            "location": 167,
            "return": [
                "mock.Mock"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "TestGoogleStorage.test_save_to_directory_downloads_blobs_matching_prefix_to_directory_location": {
            "name": "test_save_to_directory_downloads_blobs_matching_prefix_to_directory_location",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_makedirs": [],
                "mock_exists": []
            }
        },
        "TestGoogleStorage.test_save_to_directory_ignores_placeholder_directory_entries_when_present": {
            "name": "test_save_to_directory_ignores_placeholder_directory_entries_when_present",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_makedirs": [],
                "mock_exists": []
            }
        },
        "TestGoogleStorage.test_save_to_directory_retries_file_download_on_error": {
            "name": "test_save_to_directory_retries_file_download_on_error",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_sleep": [],
                "mock_uniform": [],
                "mock_exists": []
            }
        },
        "TestGoogleStorage.test_save_to_directory_fails_after_five_unsuccessful_download_attempts": {
            "name": "test_save_to_directory_fails_after_five_unsuccessful_download_attempts",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_sleep": [],
                "mock_uniform": [],
                "mock_exists": []
            }
        },
        "TestGoogleStorage.test_save_to_directory_raises_when_listed_blobs_is_empty": {
            "name": "test_save_to_directory_raises_when_listed_blobs_is_empty",
            "location": 364,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_sleep": [],
                "mock_uniform": [],
                "mock_exists": []
            }
        },
        "TestGoogleStorage.test_save_to_directory_raises_when_file_not_found": {
            "name": "test_save_to_directory_raises_when_file_not_found",
            "location": 382,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_sleep": [],
                "mock_uniform": [],
                "mock_exists": []
            }
        },
        "TestGoogleStorage.test_load_from_directory_uploads_files_to_bucket_with_prefix": {
            "name": "test_load_from_directory_uploads_files_to_bucket_with_prefix",
            "location": 430,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_walk": []
            }
        },
        "TestGoogleStorage.test_load_from_directory_handles_repeated_directory_structure": {
            "name": "test_load_from_directory_handles_repeated_directory_structure",
            "location": 466,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_walk": []
            }
        },
        "TestGoogleStorage.test_load_from_directory_retries_file_upload_on_error": {
            "name": "test_load_from_directory_retries_file_upload_on_error",
            "location": 496,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_sleep": [],
                "mock_walk": []
            }
        },
        "TestGoogleStorage.test_load_from_directory_fails_after_five_unsuccessful_upload_attempts": {
            "name": "test_load_from_directory_fails_after_five_unsuccessful_upload_attempts",
            "location": 525,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_sleep": [],
                "mock_walk": []
            }
        },
        "TestGoogleStorage.test_delete_directory_deletes_blobs_with_prefix": {
            "name": "test_delete_directory_deletes_blobs_with_prefix",
            "location": 547,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGoogleStorage.test_delete_directory_raises_when_file_does_not_exist": {
            "name": "test_delete_directory_raises_when_file_does_not_exist",
            "location": 582,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGoogleStorage.test_delete_directory_raises_when_list_blobs_is_empty": {
            "name": "test_delete_directory_raises_when_list_blobs_is_empty",
            "location": 616,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "storage-master/tests/test_local_storage.py": {
        "TestLocalStorage.setUp": {
            "name": "setUp",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalStorage.tearDown": {
            "name": "tearDown",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalStorage._generate_storage_uri": {
            "name": "_generate_storage_uri",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "object_path": [
                    "str",
                    "dict[str, str]",
                    "None",
                    "bool"
                ],
                "parameters": [
                    "None",
                    "str",
                    "dict[str, str]",
                    "bool"
                ]
            }
        },
        "TestLocalStorage.test_local_storage_save_to_filename": {
            "name": "test_local_storage_save_to_filename",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalStorage.test_local_storage_raises_when_filename_does_not_exist": {
            "name": "test_local_storage_raises_when_filename_does_not_exist",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalStorage.test_local_storage_load_from_filename": {
            "name": "test_local_storage_load_from_filename",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_makedirs": []
            }
        },
        "TestLocalStorage.test_local_storage_save_to_directory": {
            "name": "test_local_storage_save_to_directory",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalStorage.test_local_storage_save_to_directory_raises_when_source_directory_does_not_exist": {
            "name": "test_local_storage_save_to_directory_raises_when_source_directory_does_not_exist",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalStorage.test_local_storage_load_from_directory": {
            "name": "test_local_storage_load_from_directory",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalStorage.test_load_from_file_creates_intermediate_dirs": {
            "name": "test_load_from_file_creates_intermediate_dirs",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_exists": [],
                "mock_makedirs": [],
                "mock_copy": []
            }
        },
        "TestLocalStorage.test_local_storage_delete": {
            "name": "test_local_storage_delete",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_remove": []
            }
        },
        "TestLocalStorage.test_local_storage_delete_raises_when_file_does_not_exist": {
            "name": "test_local_storage_delete_raises_when_file_does_not_exist",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalStorage.test_local_storage_delete_directory": {
            "name": "test_local_storage_delete_directory",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_remove": [],
                "mock_rmtree": []
            }
        },
        "TestLocalStorage.test_local_storage_delete_directory_raises_when_directory_does_not_exist": {
            "name": "test_local_storage_delete_directory_raises_when_directory_does_not_exist",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalStorage.test_local_storage_save_to_file": {
            "name": "test_local_storage_save_to_file",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalStorage.test_local_storage_raises_when_file_does_not_exist": {
            "name": "test_local_storage_raises_when_file_does_not_exist",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalStorage.test_local_storage_load_from_file": {
            "name": "test_local_storage_load_from_file",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalStorage.test_load_from_file_creates_dirs_if_not_present": {
            "name": "test_load_from_file_creates_dirs_if_not_present",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_open": [],
                "mock_exists": [],
                "mock_makedirs": []
            }
        },
        "TestLocalStorage.test_load_from_file_does_not_create_dirs_if_present": {
            "name": "test_load_from_file_does_not_create_dirs_if_present",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_open": [],
                "mock_exists": [],
                "mock_makedirs": []
            }
        },
        "TestLocalStorage.test_local_storage_get_download_url": {
            "name": "test_local_storage_get_download_url",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalStorage.test_local_storage_get_download_url_ignores_args": {
            "name": "test_local_storage_get_download_url_ignores_args",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalStorage.test_local_storage_get_download_url_returns_none_on_empty_base": {
            "name": "test_local_storage_get_download_url_returns_none_on_empty_base",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalStorage.test_local_storage_rejects_multiple_query_values_for_download_url_key_setting": {
            "name": "test_local_storage_rejects_multiple_query_values_for_download_url_key_setting",
            "location": 326,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalStorage.test_local_storage_get_sanitized_uri_returns_filepath": {
            "name": "test_local_storage_get_sanitized_uri_returns_filepath",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "storage-master/tests/test_retry.py": {
        "TestRetry.test_does_not_retry_on_success": {
            "name": "test_does_not_retry_on_success",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_sleep": [
                    "mock.MagicMock"
                ],
                "mock_uniform": [
                    "mock.MagicMock"
                ]
            }
        },
        "TestRetry.test_retries_on_failure": {
            "name": "test_retries_on_failure",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_sleep": [],
                "mock_uniform": []
            }
        },
        "TestRetry.test_reraises_last_exception_on_attempt_exhaustion": {
            "name": "test_reraises_last_exception_on_attempt_exhaustion",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_sleep": [
                    "mock.MagicMock"
                ],
                "mock_uniform": [
                    "mock.MagicMock"
                ]
            }
        },
        "TestRetry.test_does_not_retry_unretriable_errors": {
            "name": "test_does_not_retry_unretriable_errors",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_sleep": [
                    "mock.MagicMock"
                ],
                "mock_uniform": [
                    "mock.MagicMock"
                ]
            }
        }
    },
    "storage-master/tests/test_s3_storage.py": {
        "TestS3Storage.setUp": {
            "name": "setUp",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestS3Storage.tearDown": {
            "name": "tearDown",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestS3Storage._generate_storage_uri": {
            "name": "_generate_storage_uri",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "object_path": [
                    "str",
                    "dict[str, str]",
                    "None",
                    "bool"
                ],
                "parameters": [
                    "None",
                    "str",
                    "dict[str, str]",
                    "bool"
                ]
            }
        },
        "TestS3Storage.test_s3storage_init_sets_correct_keyname": {
            "name": "test_s3storage_init_sets_correct_keyname",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestS3Storage.test_handles_urlencoded_keys": {
            "name": "test_handles_urlencoded_keys",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_session_class": []
            }
        },
        "TestS3Storage.test_load_from_file": {
            "name": "test_load_from_file",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_session_class": []
            }
        },
        "TestS3Storage.test_load_from_file_guesses_content_type_based_on_filename": {
            "name": "test_load_from_file_guesses_content_type_based_on_filename",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_session_class": []
            }
        },
        "TestS3Storage.test_load_from_filename": {
            "name": "test_load_from_filename",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_session_class": [],
                "mock_transfer_class": []
            }
        },
        "TestS3Storage.test_load_from_filename_guesses_content_type_based_on_filename": {
            "name": "test_load_from_filename_guesses_content_type_based_on_filename",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_session_class": [],
                "mock_transfer_class": []
            }
        },
        "TestS3Storage.test_save_to_file": {
            "name": "test_save_to_file",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_session_class": []
            }
        },
        "TestS3Storage.test_save_to_file_raises_when_file_does_not_exist": {
            "name": "test_save_to_file_raises_when_file_does_not_exist",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_session_class": []
            }
        },
        "TestS3Storage.test_save_to_filename": {
            "name": "test_save_to_filename",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_session_class": [],
                "mock_transfer_class": []
            }
        },
        "TestS3Storage.test_save_to_filename_raises_not_found_error_when_file_does_not_exist": {
            "name": "test_save_to_filename_raises_not_found_error_when_file_does_not_exist",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_session_class": [],
                "mock_transfer_class": []
            }
        },
        "TestS3Storage.test_save_to_filename_raises_original_exception_when_not_404": {
            "name": "test_save_to_filename_raises_original_exception_when_not_404",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_session_class": [],
                "mock_transfer_class": []
            }
        },
        "TestS3Storage.test_save_to_directory": {
            "name": "test_save_to_directory",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_session_class": [],
                "mock_transfer_class": [],
                "mock_path_exists": [],
                "mock_makedirs": []
            }
        },
        "TestS3Storage.test_save_to_directory_retries_failed_file_uploads": {
            "name": "test_save_to_directory_retries_failed_file_uploads",
            "location": 324,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_session_class": [],
                "mock_transfer_class": [],
                "mock_path_exists": [],
                "mock_makedirs": [],
                "mock_uniform": [],
                "mock_sleep": []
            }
        },
        "TestS3Storage.test_save_to_directory_fails_after_five_failed_file_download_retries": {
            "name": "test_save_to_directory_fails_after_five_failed_file_download_retries",
            "location": 409,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_session_class": [],
                "mock_transfer_class": [],
                "mock_path_exists": [],
                "mock_makedirs": [],
                "mock_uniform": [],
                "mock_sleep": []
            }
        },
        "TestS3Storage.test_save_to_directory_raises_when_empty": {
            "name": "test_save_to_directory_raises_when_empty",
            "location": 498,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_session_class": [],
                "mock_transfer_class": [],
                "mock_path_exists": [],
                "mock_makedirs": []
            }
        },
        "TestS3Storage.test_save_to_directory_raises_not_found_error_when_file_does_not_exist": {
            "name": "test_save_to_directory_raises_not_found_error_when_file_does_not_exist",
            "location": 526,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_session_class": [],
                "mock_transfer_class": [],
                "mock_path_exists": [],
                "mock_makedirs": [],
                "mock_uniform": [],
                "mock_sleep": []
            }
        },
        "TestS3Storage.test_save_to_directory_raises_original_exception_when_not_404": {
            "name": "test_save_to_directory_raises_original_exception_when_not_404",
            "location": 623,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_session_class": [],
                "mock_transfer_class": [],
                "mock_path_exists": [],
                "mock_makedirs": [],
                "mock_uniform": [],
                "mock_sleep": []
            }
        },
        "TestS3Storage.test_load_from_directory": {
            "name": "test_load_from_directory",
            "location": 708,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_session_class": [],
                "mock_transfer_class": []
            }
        },
        "TestS3Storage.test_load_from_directory_retries_failed_file_uploads": {
            "name": "test_load_from_directory_retries_failed_file_uploads",
            "location": 741,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_session_class": [],
                "mock_transfer_class": [],
                "mock_uniform": [],
                "mock_sleep": []
            }
        },
        "TestS3Storage.test_load_from_directory_fails_after_five_failed_file_upload_retries": {
            "name": "test_load_from_directory_fails_after_five_failed_file_upload_retries",
            "location": 790,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_session_class": [],
                "mock_transfer_class": [],
                "mock_uniform": [],
                "mock_sleep": []
            }
        },
        "TestS3Storage.test_delete": {
            "name": "test_delete",
            "location": 833,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_session_class": []
            }
        },
        "TestS3Storage.test_delete_raises_when_file_does_not_exist": {
            "name": "test_delete_raises_when_file_does_not_exist",
            "location": 855,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_session_class": []
            }
        },
        "TestS3Storage.test_delete_directory": {
            "name": "test_delete_directory",
            "location": 869,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_session_class": []
            }
        },
        "TestS3Storage.test_delete_directory_raises_when_empty": {
            "name": "test_delete_directory_raises_when_empty",
            "location": 958,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_session_class": []
            }
        },
        "TestS3Storage.test_delete_directory_raises_not_found_error_when_files_do_not_exist": {
            "name": "test_delete_directory_raises_not_found_error_when_files_do_not_exist",
            "location": 980,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_session_class": []
            }
        },
        "TestS3Storage.test_delete_directory_raises_original_exception_when_not_404": {
            "name": "test_delete_directory_raises_original_exception_when_not_404",
            "location": 1020,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_session_class": []
            }
        },
        "TestS3Storage.test_get_download_url_calls_boto_generate_presigned_url_with_correct_data": {
            "name": "test_get_download_url_calls_boto_generate_presigned_url_with_correct_data",
            "location": 1060,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_session_class": []
            }
        },
        "TestS3Storage.test_get_download_url_calls_boto_generate_presigned_url_custom_expiration": {
            "name": "test_get_download_url_calls_boto_generate_presigned_url_custom_expiration",
            "location": 1084,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_session_class": []
            }
        },
        "TestS3Storage.test_get_sanitized_uri_returns_storage_uri_without_username_and_password": {
            "name": "test_get_sanitized_uri_returns_storage_uri_without_username_and_password",
            "location": 1107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestS3Storage.test_s3_storage_rejects_multiple_query_values_for_region_setting": {
            "name": "test_s3_storage_rejects_multiple_query_values_for_region_setting",
            "location": 1116,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestS3Storage.test_save_to_directory.mock_path_exists_side_effect": {
            "name": "mock_path_exists_side_effect",
            "location": 288,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": []
            }
        },
        "TestS3Storage.test_save_to_directory_retries_failed_file_uploads.mock_path_exists_side_effect": {
            "name": "mock_path_exists_side_effect",
            "location": 359,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": []
            }
        },
        "TestS3Storage.test_save_to_directory_fails_after_five_failed_file_download_retries.mock_path_exists_side_effect": {
            "name": "mock_path_exists_side_effect",
            "location": 444,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": []
            }
        },
        "TestS3Storage.test_save_to_directory_raises_not_found_error_when_file_does_not_exist.mock_path_exists_side_effect": {
            "name": "mock_path_exists_side_effect",
            "location": 561,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": []
            }
        },
        "TestS3Storage.test_save_to_directory_raises_original_exception_when_not_404.mock_path_exists_side_effect": {
            "name": "mock_path_exists_side_effect",
            "location": 658,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": []
            }
        }
    },
    "storage-master/tests/test_storage.py": {
        "TestTimeout.test_calls_function_in_thread": {
            "name": "test_calls_function_in_thread",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_thread_class": []
            }
        },
        "TestTimeout.test_reraises_exception_raised_by_worker": {
            "name": "test_reraises_exception_raised_by_worker",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeout.test_raises_timeout_error_when_worker_does_not_complete_within_timeout": {
            "name": "test_raises_timeout_error_when_worker_does_not_complete_within_timeout",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRegisterStorageProtocol.setUp": {
            "name": "setUp",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRegisterStorageProtocol.test_register_storage_protocol_updates_storage_types": {
            "name": "test_register_storage_protocol_updates_storage_types",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRegisterStorageProtocol.test_storage_provider_calls_validation_on_implementation": {
            "name": "test_storage_provider_calls_validation_on_implementation",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetStorage.test_raises_for_unsupported_scheme": {
            "name": "test_raises_for_unsupported_scheme",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetStorage.test_raises_for_missing_scheme": {
            "name": "test_raises_for_missing_scheme",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetStorage.test_raises_for_missing_scheme_and_netloc": {
            "name": "test_raises_for_missing_scheme_and_netloc",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStorage.test_get_sanitized_uri_removes_username_and_password": {
            "name": "test_get_sanitized_uri_removes_username_and_password",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStorage.test_get_sanitized_uri_does_not_preserves_parameters": {
            "name": "test_get_sanitized_uri_does_not_preserves_parameters",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStorage.test_get_sanitized_uri_preserves_port_number": {
            "name": "test_get_sanitized_uri_preserves_port_number",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeout.test_calls_function_in_thread.worker": {
            "name": "worker",
            "location": 11,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "TestTimeout.test_reraises_exception_raised_by_worker.worker": {
            "name": "worker",
            "location": 20,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "TestTimeout.test_raises_timeout_error_when_worker_does_not_complete_within_timeout.worker": {
            "name": "worker",
            "location": 29,
            "return": [
                "None",
                "Text"
            ],
            "arguments": {}
        },
        "TestRegisterStorageProtocol.test_storage_provider_calls_validation_on_implementation.ValidatingStorageClass._validate_parsed_uri": {
            "name": "_validate_parsed_uri",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "storage-master/tests/test_swift_storage.py": {
        "TestSwiftStorageProvider.setUp": {
            "name": "setUp",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.tearDown": {
            "name": "tearDown",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.identity_handler": {
            "name": "identity_handler",
            "location": 54,
            "return": [
                "List[bytes]"
            ],
            "arguments": {
                "self": [],
                "environ": [],
                "start_response": []
            }
        },
        "TestSwiftStorageProvider._valid_credentials": {
            "name": "_valid_credentials",
            "location": 77,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "body_credentials": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "TestSwiftStorageProvider.authentication_handler": {
            "name": "authentication_handler",
            "location": 89,
            "return": [
                "List[bytes]"
            ],
            "arguments": {
                "self": [],
                "environ": [],
                "start_response": [
                    "str"
                ]
            }
        },
        "TestSwiftStorageProvider._generate_storage_uri": {
            "name": "_generate_storage_uri",
            "location": 141,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "int",
                    "typing.Callable[, ]",
                    "None"
                ],
                "parameters": [
                    "dict[str, str]",
                    "None"
                ]
            }
        },
        "TestSwiftStorageProvider.assert_raises_on_forbidden_keystone_access": {
            "name": "assert_raises_on_forbidden_keystone_access",
            "location": 156,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.assert_raises_on_unauthorized_keystone_access": {
            "name": "assert_raises_on_unauthorized_keystone_access",
            "location": 163,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.assert_requires_all_parameters": {
            "name": "assert_requires_all_parameters",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "TestSwiftStorageProvider.test_save_to_file_raises_exception_when_missing_required_parameters": {
            "name": "test_save_to_file_raises_exception_when_missing_required_parameters",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_save_to_file_writes_file_contents_to_file_object": {
            "name": "test_save_to_file_writes_file_contents_to_file_object",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_save_to_file_writes_different_file_contents_to_file": {
            "name": "test_save_to_file_writes_different_file_contents_to_file",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_save_to_file_makes_multiple_requests_when_chunking": {
            "name": "test_save_to_file_makes_multiple_requests_when_chunking",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_save_to_file_raises_on_forbidden_keystone_credentials": {
            "name": "test_save_to_file_raises_on_forbidden_keystone_credentials",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_save_to_file_raises_internal_server_exception": {
            "name": "test_save_to_file_raises_internal_server_exception",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_save_to_file_raises_bad_gateway_exception": {
            "name": "test_save_to_file_raises_bad_gateway_exception",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_save_to_file_raises_not_found_error_when_file_does_not_exist": {
            "name": "test_save_to_file_raises_not_found_error_when_file_does_not_exist",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_save_to_file_raises_original_exception_when_not_404": {
            "name": "test_save_to_file_raises_original_exception_when_not_404",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_save_to_filename_raises_exception_when_missing_parameters": {
            "name": "test_save_to_filename_raises_exception_when_missing_parameters",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_save_to_filename_writes_file_contents_to_file_object": {
            "name": "test_save_to_filename_writes_file_contents_to_file_object",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_save_to_filename_writes_different_file_contents_to_file": {
            "name": "test_save_to_filename_writes_different_file_contents_to_file",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_save_to_filename_makes_multiple_requests_when_chunking": {
            "name": "test_save_to_filename_makes_multiple_requests_when_chunking",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_save_to_filename_raises_on_forbidden_keystone_credentials": {
            "name": "test_save_to_filename_raises_on_forbidden_keystone_credentials",
            "location": 364,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_save_to_filename_raises_internal_server_exception": {
            "name": "test_save_to_filename_raises_internal_server_exception",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_save_to_filename_raises_bad_gateway_exception": {
            "name": "test_save_to_filename_raises_bad_gateway_exception",
            "location": 392,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_save_to_filename_raises_not_found_error_when_file_does_not_exist": {
            "name": "test_save_to_filename_raises_not_found_error_when_file_does_not_exist",
            "location": 406,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_save_to_filename_raises_original_exception_when_not_404": {
            "name": "test_save_to_filename_raises_original_exception_when_not_404",
            "location": 422,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_load_from_file_raises_when_missing_required_parameters": {
            "name": "test_load_from_file_raises_when_missing_required_parameters",
            "location": 438,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_load_from_file_puts_file_contents_at_object_endpoint": {
            "name": "test_load_from_file_puts_file_contents_at_object_endpoint",
            "location": 441,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_load_from_file_does_not_rety_on_error": {
            "name": "test_load_from_file_does_not_rety_on_error",
            "location": 451,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_load_from_file_does_not_retry_with_invalid_keystone_creds": {
            "name": "test_load_from_file_does_not_retry_with_invalid_keystone_creds",
            "location": 469,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_load_from_file_raises_on_authentication_server_errors": {
            "name": "test_load_from_file_raises_on_authentication_server_errors",
            "location": 483,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_load_from_filename_raises_when_missing_required_parameters": {
            "name": "test_load_from_filename_raises_when_missing_required_parameters",
            "location": 495,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_load_from_filename_puts_file_contents_at_object_endpoint": {
            "name": "test_load_from_filename_puts_file_contents_at_object_endpoint",
            "location": 498,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_load_from_filename_sends_guessed_content_type_from_extension": {
            "name": "test_load_from_filename_sends_guessed_content_type_from_extension",
            "location": 510,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_load_from_filename_sends_default_content_type_when_none_is_determined": {
            "name": "test_load_from_filename_sends_default_content_type_when_none_is_determined",
            "location": 526,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_load_from_filename_does_not_retry_on_error": {
            "name": "test_load_from_filename_does_not_retry_on_error",
            "location": 542,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_load_from_filename_does_not_retry_with_invalid_keystone_creds": {
            "name": "test_load_from_filename_does_not_retry_with_invalid_keystone_creds",
            "location": 562,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_load_from_filename_raises_on_authentication_server_errors": {
            "name": "test_load_from_filename_raises_on_authentication_server_errors",
            "location": 578,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_delete_raises_on_missing_parameters": {
            "name": "test_delete_raises_on_missing_parameters",
            "location": 592,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_delete_makes_delete_request_against_swift_service": {
            "name": "test_delete_makes_delete_request_against_swift_service",
            "location": 595,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_delete_raises_on_authentication_server_errors": {
            "name": "test_delete_raises_on_authentication_server_errors",
            "location": 603,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_delete_raises_raises_not_found_error_when_file_does_not_exist": {
            "name": "test_delete_raises_raises_not_found_error_when_file_does_not_exist",
            "location": 613,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_delete_raises_raises_original_exception_when_not_404": {
            "name": "test_delete_raises_raises_original_exception_when_not_404",
            "location": 623,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_delete_does_not_retry_on_swift_server_errors": {
            "name": "test_delete_does_not_retry_on_swift_server_errors",
            "location": 636,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_get_download_url_raises_with_missing_download_url_key": {
            "name": "test_get_download_url_raises_with_missing_download_url_key",
            "location": 654,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_time": []
            }
        },
        "TestSwiftStorageProvider.test_get_download_url_returns_signed_url": {
            "name": "test_get_download_url_returns_signed_url",
            "location": 666,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_time": []
            }
        },
        "TestSwiftStorageProvider.test_get_download_url_accepts_variable_seconds": {
            "name": "test_get_download_url_accepts_variable_seconds",
            "location": 687,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_time": []
            }
        },
        "TestSwiftStorageProvider.test_get_sanitized_uri_returns_storage_uri_without_username_and_password": {
            "name": "test_get_sanitized_uri_returns_storage_uri_without_username_and_password",
            "location": 701,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_get_sanitized_uri_returns_storage_uri_without_download_url_key": {
            "name": "test_get_sanitized_uri_returns_storage_uri_without_download_url_key",
            "location": 717,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.generate_signature": {
            "name": "generate_signature",
            "location": 733,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "None",
                    "bool"
                ],
                "key": [
                    "bytes",
                    "str",
                    "typing.AbstractSet",
                    "dict[str, typing.Any]"
                ],
                "expires": [
                    "int"
                ]
            }
        },
        "TestSwiftStorageProvider.test_get_download_url_uses_download_url_key_by_default": {
            "name": "test_get_download_url_uses_download_url_key_by_default",
            "location": 739,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_time": []
            }
        },
        "TestSwiftStorageProvider.test_get_download_url_uses_alternate_download_url_key": {
            "name": "test_get_download_url_uses_alternate_download_url_key",
            "location": 755,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_time": []
            }
        },
        "TestSwiftStorageProvider.test_get_download_url_uses_provided_key": {
            "name": "test_get_download_url_uses_provided_key",
            "location": 771,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_time": []
            }
        },
        "TestSwiftStorageProvider.test_get_download_url_overrides_download_url_key_with_provided_key": {
            "name": "test_get_download_url_overrides_download_url_key_with_provided_key",
            "location": 787,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_time": []
            }
        },
        "TestSwiftStorageProvider.test_save_to_directory_raises_exception_when_missing_required_parameters": {
            "name": "test_save_to_directory_raises_exception_when_missing_required_parameters",
            "location": 803,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_save_to_directory_raises_on_forbidden_keystone_credentials": {
            "name": "test_save_to_directory_raises_on_forbidden_keystone_credentials",
            "location": 806,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_save_to_directory_downloads_files_matching_prefix_to_directory_location": {
            "name": "test_save_to_directory_downloads_files_matching_prefix_to_directory_location",
            "location": 820,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_save_to_directory_includes_subdirectories_in_local_path": {
            "name": "test_save_to_directory_includes_subdirectories_in_local_path",
            "location": 832,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_save_to_directory_ignores_directory_placeholder_objects": {
            "name": "test_save_to_directory_ignores_directory_placeholder_objects",
            "location": 846,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_save_to_directory_retries_on_error": {
            "name": "test_save_to_directory_retries_on_error",
            "location": 861,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_save_to_directory_only_retries_put_object_when_store_object_fails": {
            "name": "test_save_to_directory_only_retries_put_object_when_store_object_fails",
            "location": 874,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_save_to_directory_raises_internal_server_exception": {
            "name": "test_save_to_directory_raises_internal_server_exception",
            "location": 889,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_save_to_directory_raises_not_found_error_when_directory_does_not_exist": {
            "name": "test_save_to_directory_raises_not_found_error_when_directory_does_not_exist",
            "location": 901,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_save_to_directory_raises_not_found_error_when_empty": {
            "name": "test_save_to_directory_raises_not_found_error_when_empty",
            "location": 912,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_save_to_directory_raises_original_exception_when_not_404": {
            "name": "test_save_to_directory_raises_original_exception_when_not_404",
            "location": 923,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_load_from_directory_raises_when_missing_required_parameters": {
            "name": "test_load_from_directory_raises_when_missing_required_parameters",
            "location": 934,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_load_from_directory_puts_file_contents_at_object_endpoint": {
            "name": "test_load_from_directory_puts_file_contents_at_object_endpoint",
            "location": 937,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_load_from_directory_sends_guessed_content_type_from_extension": {
            "name": "test_load_from_directory_sends_guessed_content_type_from_extension",
            "location": 948,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_load_from_directory_sends_default_content_type_when_none_is_determined": {
            "name": "test_load_from_directory_sends_default_content_type_when_none_is_determined",
            "location": 967,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_load_from_directory_does_not_retry_with_invalid_keystone_creds": {
            "name": "test_load_from_directory_does_not_retry_with_invalid_keystone_creds",
            "location": 986,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_load_from_directory_retries_on_error": {
            "name": "test_load_from_directory_retries_on_error",
            "location": 1004,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_load_from_directory_includes_subdirectories_in_object_endpoint": {
            "name": "test_load_from_directory_includes_subdirectories_in_object_endpoint",
            "location": 1023,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_load_from_directory_raises_internal_server_exception": {
            "name": "test_load_from_directory_raises_internal_server_exception",
            "location": 1039,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_delete_directory_raises_on_missing_parameters": {
            "name": "test_delete_directory_raises_on_missing_parameters",
            "location": 1051,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_delete_directory_makes_delete_request_against_swift_service": {
            "name": "test_delete_directory_makes_delete_request_against_swift_service",
            "location": 1054,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_delete_directory_raises_on_authentication_server_errors": {
            "name": "test_delete_directory_raises_on_authentication_server_errors",
            "location": 1066,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_delete_directory_does_not_retry_on_swift_server_errors": {
            "name": "test_delete_directory_does_not_retry_on_swift_server_errors",
            "location": 1077,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_delete_to_directory_raises_not_found_error_when_directory_does_not_exist": {
            "name": "test_delete_to_directory_raises_not_found_error_when_directory_does_not_exist",
            "location": 1102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_delete_to_directory_raises_not_found_error_when_empty": {
            "name": "test_delete_to_directory_raises_not_found_error_when_empty",
            "location": 1113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_delete_to_directory_raises_original_exception_when_not_404": {
            "name": "test_delete_to_directory_raises_original_exception_when_not_404",
            "location": 1124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_swift_rejects_multiple_query_values_for_auth_endpoint_setting": {
            "name": "test_swift_rejects_multiple_query_values_for_auth_endpoint_setting",
            "location": 1135,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_swift_rejects_multiple_query_values_for_region_setting": {
            "name": "test_swift_rejects_multiple_query_values_for_region_setting",
            "location": 1138,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_swift_rejects_multiple_query_values_for_download_url_key_setting": {
            "name": "test_swift_rejects_multiple_query_values_for_download_url_key_setting",
            "location": 1141,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSwiftStorageProvider.test_swift_rejects_multiple_query_values_for_tenant_setting": {
            "name": "test_swift_rejects_multiple_query_values_for_tenant_setting",
            "location": 1145,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "storage-master/tests/test_url_parser.py": {
        "TestUrlParser.test_remove_user_info_removes_username_and_password": {
            "name": "test_remove_user_info_removes_username_and_password",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUrlParser.test_remove_user_info_preserves_parameters": {
            "name": "test_remove_user_info_preserves_parameters",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUrlParser.test_remove_user_info_preserves_port_number": {
            "name": "test_remove_user_info_preserves_port_number",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUrlParser.test_sanitize_resource_uri_removes_username_and_password": {
            "name": "test_sanitize_resource_uri_removes_username_and_password",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUrlParser.test_sanitize_resource_uri_does_not_preserves_parameters": {
            "name": "test_sanitize_resource_uri_does_not_preserves_parameters",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUrlParser.test_sanitize_resource_uri_preserves_port_number": {
            "name": "test_sanitize_resource_uri_preserves_port_number",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "storage-master/tests/__init__.py": {}
}
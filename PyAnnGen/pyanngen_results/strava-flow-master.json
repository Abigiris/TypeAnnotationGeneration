{
    "strava-flow-master/setup.py": {
        "parse_requirements": {
            "name": "parse_requirements",
            "location": 6,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "strava-flow-master/strava_flow/__init__.py": {},
    "strava-flow-master/strava_flow/api/__init__.py": {},
    "strava-flow-master/strava_flow/api/darksky/api.py": {
        "DarkskyApi.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str"
                ]
            }
        },
        "DarkskyApi.forecast": {
            "name": "forecast",
            "location": 15,
            "return": [
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "latitude": [
                    "float"
                ],
                "longitude": [
                    "float"
                ],
                "extend": [
                    "bool"
                ],
                "exclude": [
                    "Optional[List[str]]"
                ],
                "lang": [
                    "Optional[str]"
                ],
                "units": [
                    "Optional[str]"
                ]
            }
        },
        "DarkskyApi.historical": {
            "name": "historical",
            "location": 33,
            "return": [
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "latitude": [
                    "float"
                ],
                "longitude": [
                    "float"
                ],
                "time": [
                    "int"
                ],
                "exclude": [
                    "Optional[List[str]]"
                ],
                "lang": [
                    "Optional[str]"
                ],
                "units": [
                    "Optional[str]"
                ]
            }
        }
    },
    "strava-flow-master/strava_flow/api/darksky/http_client.py": {
        "DarkskyHttpClient.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str"
                ]
            }
        },
        "DarkskyHttpClient.__del__": {
            "name": "__del__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DarkskyHttpClient.get": {
            "name": "get",
            "location": 16,
            "return": [
                "int",
                "bytes",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "DarkskyHttpClient._request": {
            "name": "_request",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str"
                ],
                "url": [
                    "str"
                ]
            }
        },
        "DarkskyHttpClient._prepare_url": {
            "name": "_prepare_url",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "DarkskyHttpClient._format_response": {
            "name": "_format_response",
            "location": 30,
            "return": [
                "dict[, ]",
                "dict",
                "Optional[str]",
                "List[dict]",
                "Dict[str, Dict[str, str]]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "response": [
                    "requests.models.Response"
                ]
            }
        }
    },
    "strava-flow-master/strava_flow/api/darksky/__init__.py": {},
    "strava-flow-master/strava_flow/api/strava/api.py": {
        "StravaApi.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "StravaApi.activities": {
            "name": "activities",
            "location": 17,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StravaApi.athletes": {
            "name": "athletes",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StravaApi._create_credentials_service": {
            "name": "_create_credentials_service",
            "location": 24,
            "return": [
                "strava_flow.api.strava.credentials.StravaCredentialsService"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[(str, Any)]"
                ]
            }
        }
    },
    "strava-flow-master/strava_flow/api/strava/credentials.py": {
        "Credentials.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_id": [
                    "int"
                ],
                "client_secret": [
                    "str"
                ],
                "access_token": [
                    "str"
                ],
                "refresh_token": [
                    "str"
                ],
                "token_expiry": [
                    "float"
                ],
                "scope": [
                    "List[str]"
                ],
                "user_agent": [
                    "str"
                ],
                "invalid": [
                    "bool"
                ]
            }
        },
        "Credentials.invalidate": {
            "name": "invalidate",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Credentials.access_token_expired": {
            "name": "access_token_expired",
            "location": 49,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Credentials.access_token_soon_expired": {
            "name": "access_token_soon_expired",
            "location": 52,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Credentials._is_expired": {
            "name": "_is_expired",
            "location": 55,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "float"
                ]
            }
        },
        "Credentials.from_json": {
            "name": "from_json",
            "location": 65,
            "return": [
                "Credentials"
            ],
            "arguments": {
                "cls": [
                    "Type[_TCredentials]"
                ],
                "content": [
                    "str"
                ]
            }
        },
        "Credentials.to_json": {
            "name": "to_json",
            "location": 78,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CredentialsStorage.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str"
                ]
            }
        },
        "CredentialsStorage.get": {
            "name": "get",
            "location": 96,
            "return": [
                "Optional[Credentials]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CredentialsStorage.put": {
            "name": "put",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "credentials": [
                    "Optional[Credentials]"
                ]
            }
        },
        "CredentialsStorage.delete": {
            "name": "delete",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StravaCredentialsService.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cliend_id": [
                    "int"
                ],
                "client_secret": [
                    "str"
                ]
            }
        },
        "StravaCredentialsService.get_access_token": {
            "name": "get_access_token",
            "location": 143,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StravaCredentialsService._get_credentials": {
            "name": "_get_credentials",
            "location": 147,
            "return": [
                "Credentials"
            ],
            "arguments": {
                "self": []
            }
        },
        "StravaCredentialsService._initialize_storage": {
            "name": "_initialize_storage",
            "location": 156,
            "return": [
                "CredentialsStorage"
            ],
            "arguments": {
                "self": []
            }
        },
        "StravaCredentialsService._get_new_credentials": {
            "name": "_get_new_credentials",
            "location": 162,
            "return": [
                "Credentials"
            ],
            "arguments": {
                "self": []
            }
        },
        "StravaCredentialsService._refresh_existing_credentials": {
            "name": "_refresh_existing_credentials",
            "location": 166,
            "return": [
                "Credentials"
            ],
            "arguments": {
                "self": [],
                "credentials": [
                    "Credentials"
                ]
            }
        },
        "StravaCredentialsService._convert_token_to_credentials": {
            "name": "_convert_token_to_credentials",
            "location": 170,
            "return": [
                "Credentials"
            ],
            "arguments": {
                "self": [],
                "token_dict": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "StravaCredentialsService._is_token_valid": {
            "name": "_is_token_valid",
            "location": 185,
            "return": [
                "bool"
            ],
            "arguments": {
                "token_dict": [
                    "Dict[(str, Any)]"
                ]
            }
        }
    },
    "strava-flow-master/strava_flow/api/strava/http_client.py": {
        "StravaHttpClient.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "credentials_service": [
                    "strava_flow.api.strava.credentials.StravaCredentialsService"
                ]
            }
        },
        "StravaHttpClient.__del__": {
            "name": "__del__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StravaHttpClient.get": {
            "name": "get",
            "location": 21,
            "return": [
                "int",
                "bytes",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "StravaHttpClient.get_all": {
            "name": "get_all",
            "location": 24,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "StravaHttpClient.post": {
            "name": "post",
            "location": 40,
            "return": [
                "dict",
                "Exception",
                "Optional[Dict[str, Any]]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "StravaHttpClient.put": {
            "name": "put",
            "location": 43,
            "return": [
                "int",
                "Dict[str, bool]",
                "Callable",
                "str",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "StravaHttpClient._request": {
            "name": "_request",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str"
                ],
                "url": [
                    "str"
                ]
            }
        },
        "StravaHttpClient._prepare_params": {
            "name": "_prepare_params",
            "location": 53,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Set[str]]"
            ],
            "arguments": {
                "self": [],
                "kwargs": []
            }
        },
        "StravaHttpClient._format_response": {
            "name": "_format_response",
            "location": 61,
            "return": [
                "dict[, ]",
                "dict",
                "Optional[str]",
                "List[dict]",
                "Dict[str, Dict[str, str]]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "response": [
                    "requests.models.Response"
                ]
            }
        }
    },
    "strava-flow-master/strava_flow/api/strava/oauth2.py": {
        "OAuth2RedirectServer.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server_address": [
                    "Tuple[(str, int)]"
                ],
                "request_handler": [
                    "type"
                ]
            }
        },
        "OAuth2RedirectHandler.do_GET": {
            "name": "do_GET",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OAuth2RedirectHandler.log_message": {
            "name": "log_message",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "format": [
                    "str"
                ]
            }
        },
        "OAuth2RedirectHandler._status_ok": {
            "name": "_status_ok",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OAuth2RedirectHandler._write_authentication_status": {
            "name": "_write_authentication_status",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OAuth2AuthenticationClient.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_id": [
                    "int"
                ],
                "client_secret": [
                    "str"
                ],
                "scope": [
                    "List[str]"
                ],
                "user_agent": [
                    "str"
                ],
                "auth_uri": [
                    "str"
                ],
                "token_uri": [
                    "str"
                ],
                "revoke_uri": [
                    "str"
                ]
            }
        },
        "OAuth2AuthenticationClient.authenticate": {
            "name": "authenticate",
            "location": 56,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OAuth2AuthenticationClient.refresh": {
            "name": "refresh",
            "location": 67,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "refresh_token": [
                    "str"
                ]
            }
        },
        "OAuth2AuthenticationClient._get_authorization_url": {
            "name": "_get_authorization_url",
            "location": 78,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OAuth2AuthenticationClient._fetch_token": {
            "name": "_fetch_token",
            "location": 83,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "str"
                ],
                "state": [
                    "str"
                ]
            }
        }
    },
    "strava-flow-master/strava_flow/api/strava/__init__.py": {},
    "strava-flow-master/strava_flow/api/strava/apis/abc.py": {
        "StravaBaseApi.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "strava-flow-master/strava_flow/api/strava/apis/activities_api.py": {
        "StravaActivitiesApi.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "http_client": [
                    "strava_flow.api.strava.http_client.StravaHttpClient"
                ]
            }
        },
        "StravaActivitiesApi.get_activity": {
            "name": "get_activity",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "activity_id": [
                    "int"
                ],
                "include_all_efforts": [
                    "bool"
                ]
            }
        },
        "StravaActivitiesApi.get_all_activities": {
            "name": "get_all_activities",
            "location": 16,
            "return": [
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "before": [
                    "Optional[int]"
                ],
                "after": [
                    "Optional[int]"
                ],
                "per_page": [
                    "Optional[int]"
                ],
                "page": [
                    "Optional[int]"
                ]
            }
        }
    },
    "strava-flow-master/strava_flow/api/strava/apis/athletes_api.py": {
        "StravaAthletesApi.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "http_client": [
                    "strava_flow.api.strava.http_client.StravaHttpClient"
                ]
            }
        },
        "StravaAthletesApi.get_athlete": {
            "name": "get_athlete",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "strava-flow-master/strava_flow/api/strava/apis/__init__.py": {},
    "strava-flow-master/strava_flow/configuration/config.py": {
        "load_config": {
            "name": "load_config",
            "location": 6,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {}
        }
    },
    "strava-flow-master/strava_flow/configuration/__init__.py": {},
    "strava-flow-master/strava_flow/schemas/validator.py": {
        "SchemaValidator.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaValidator.validate": {
            "name": "validate",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "str"
                ],
                "data": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "SchemaValidator._load_schemas": {
            "name": "_load_schemas",
            "location": 23,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaValidator._get_resolver": {
            "name": "_get_resolver",
            "location": 31,
            "return": [
                "RefResolver",
                "str",
                "List[Dict[str, Any]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaValidator._create_validators": {
            "name": "_create_validators",
            "location": 36,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaValidator._get_validator": {
            "name": "_get_validator",
            "location": 39,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "str"
                ]
            }
        },
        "SchemaValidator._load_schema_from_json": {
            "name": "_load_schema_from_json",
            "location": 46,
            "return": [
                "str",
                "Optional[str]",
                "bytes",
                "Dict[str, Any]"
            ],
            "arguments": {
                "filepath": [
                    "str"
                ]
            }
        }
    },
    "strava-flow-master/strava_flow/schemas/__init__.py": {},
    "strava-flow-master/strava_flow/services/activity_weather_processor.py": {
        "ActivityWeatherProcessor.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "weather_api": [
                    "strava_flow.api.darksky.api.DarkskyApi"
                ],
                "schema_validator": [
                    "strava_flow.schemas.validator.SchemaValidator"
                ],
                "logger": [
                    "logging.Logger"
                ]
            }
        },
        "ActivityWeatherProcessor.process": {
            "name": "process",
            "location": 18,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "ActivityWeatherProcessor._retrieve_activity_weather_data": {
            "name": "_retrieve_activity_weather_data",
            "location": 23,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "ActivityWeatherProcessor._fetch_weather": {
            "name": "_fetch_weather",
            "location": 36,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "latitude": [
                    "float"
                ],
                "longitude": [
                    "float"
                ],
                "time": [
                    "int"
                ]
            }
        },
        "ActivityWeatherProcessor._is_weather_data_valid": {
            "name": "_is_weather_data_valid",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "latitude": [
                    "float"
                ],
                "longitude": [
                    "float"
                ],
                "time": [
                    "int"
                ],
                "weather_data": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "ActivityWeatherProcessor._format_output_data": {
            "name": "_format_output_data",
            "location": 53,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[(str, Any)]"
                ],
                "weather_data": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "ActivityWeatherProcessor._create_response": {
            "name": "_create_response",
            "location": 69,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[(str, Any)]"
                ]
            }
        }
    },
    "strava-flow-master/strava_flow/services/__init__.py": {},
    "strava-flow-master/strava_flow/utils/time.py": {
        "timestamp_from_datetime": {
            "name": "timestamp_from_datetime",
            "location": 5,
            "return": [
                "float"
            ],
            "arguments": {
                "timestamp": [
                    "datetime.datetime"
                ]
            }
        },
        "datetime_from_timestamp": {
            "name": "datetime_from_timestamp",
            "location": 9,
            "return": [
                "datetime.datetime"
            ],
            "arguments": {
                "timestamp": [
                    "float"
                ]
            }
        }
    },
    "strava-flow-master/strava_flow/utils/__init__.py": {},
    "strava-flow-master/strava_flow_resources/__init__.py": {},
    "strava-flow-master/tests/test_mypy.py": {
        "TypeChecker.test_check_type_for_all_modules": {
            "name": "test_check_type_for_all_modules",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "strava-flow-master/tests/__init__.py": {}
}
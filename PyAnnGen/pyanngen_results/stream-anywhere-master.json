{
    "stream-anywhere-master/manage.py": {},
    "stream-anywhere-master/setup.py": {
        "get_url": {
            "name": "get_url",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "ir": []
            }
        },
        "find_package_data": {
            "name": "find_package_data",
            "location": 88,
            "return": [
                "Dict[(_T1, List[str])]"
            ],
            "arguments": {
                "where": [
                    "typing.Text"
                ],
                "package": [
                    "_T1"
                ],
                "exclude": [
                    "tuple[typing.Text]"
                ],
                "exclude_directories": [
                    "tuple[typing.Text]"
                ],
                "only_in_packages": [
                    "bool"
                ],
                "show_ignored": [
                    "bool"
                ]
            }
        },
        "frange": {
            "name": "frange",
            "location": 244,
            "return": [
                "Generator[(_T0, Any, None)]"
            ],
            "arguments": {
                "x": [
                    "_T0"
                ],
                "y": [],
                "jump": []
            }
        }
    },
    "stream-anywhere-master/stream_anywhere/apps.py": {
        "StreamAnywhereAppConfig.ready": {
            "name": "ready",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "stream-anywhere-master/stream_anywhere/celery.py": {},
    "stream-anywhere-master/stream_anywhere/cli.py": {
        "run_server": {
            "name": "run_server",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "StandaloneApplication.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "str",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]"
                ],
                "options": [
                    "bool",
                    "None",
                    "str",
                    "Optional[bool]"
                ]
            }
        },
        "StandaloneApplication.load_config": {
            "name": "load_config",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StandaloneApplication.load": {
            "name": "load",
            "location": 21,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "stream-anywhere-master/stream_anywhere/urls.py": {},
    "stream-anywhere-master/stream_anywhere/wsgi.py": {},
    "stream-anywhere-master/stream_anywhere/__init__.py": {},
    "stream-anywhere-master/stream_anywhere/nginx/__init__.py": {
        "ServeNginx.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pid_file": [
                    "Set[str]",
                    "str",
                    "set[str]"
                ],
                "config_file": [
                    "str",
                    "None"
                ],
                "config_directory": [
                    "str",
                    "typing.Text"
                ],
                "processes": [
                    "int",
                    "bool",
                    "MutableMapping[str, str]",
                    "str",
                    "List[Dict]",
                    "Optional[int]"
                ]
            }
        },
        "ServeNginx.run": {
            "name": "run",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "stream-anywhere-master/stream_anywhere/settings/defaults.py": {},
    "stream-anywhere-master/stream_anywhere/settings/develop.py": {},
    "stream-anywhere-master/stream_anywhere/settings/production.py": {},
    "stream-anywhere-master/stream_anywhere/settings/__init__.py": {},
    "stream-anywhere-master/stream_anywhere/videos/admin.py": {},
    "stream-anywhere-master/stream_anywhere/videos/apps.py": {},
    "stream-anywhere-master/stream_anywhere/videos/models.py": {
        "Collection.last_video_played": {
            "name": "last_video_played",
            "location": 38,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Video.update_position": {
            "name": "update_position",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "int",
                    "str",
                    "None",
                    "Optional[bool]",
                    "bool"
                ]
            }
        }
    },
    "stream-anywhere-master/stream_anywhere/videos/path.py": {
        "Path.get_mimetype": {
            "name": "get_mimetype",
            "location": 12,
            "return": [
                "typing.Text",
                "str",
                "bool",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.mimetype": {
            "name": "mimetype",
            "location": 19,
            "return": [
                "int",
                "float",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.get_type": {
            "name": "get_type",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.type": {
            "name": "type",
            "location": 45,
            "return": [
                "str",
                "int",
                "None",
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.is_hidden": {
            "name": "is_hidden",
            "location": 51,
            "return": [
                "str",
                "Exception",
                "Callable[..., T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.mime": {
            "name": "mime",
            "location": 55,
            "return": [
                "str",
                "bool",
                "List[int]",
                "List[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.updated_name": {
            "name": "updated_name",
            "location": 63,
            "return": [
                "",
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "Path.sort_key": {
            "name": "sort_key",
            "location": 71,
            "return": [
                "",
                "bytes",
                "str",
                "frozenset",
                "list[int]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[str]",
                    "Sequence[str]",
                    "float",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "stream-anywhere-master/stream_anywhere/videos/tests.py": {},
    "stream-anywhere-master/stream_anywhere/videos/views.py": {},
    "stream-anywhere-master/stream_anywhere/videos/__init__.py": {},
    "stream-anywhere-master/stream_anywhere/videos/api/serializers.py": {
        "VideoSerializer.run_validators": {
            "name": "run_validators",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "dict",
                    "dict[, ]",
                    "Optional[int]",
                    "float",
                    "int",
                    "list",
                    "None",
                    "list[]"
                ]
            }
        },
        "VideoSerializer.create": {
            "name": "create",
            "location": 31,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "validated_data": [
                    "bytes",
                    "str",
                    "type",
                    "dict"
                ]
            }
        },
        "VideoSerializer.update": {
            "name": "update",
            "location": 47,
            "return": [
                "dict[str, typing.Any]",
                "dict",
                "List[str]",
                "Optional[str]",
                "Dict[str, Any]",
                "bool",
                "django.db.models.Model"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "stream_anywhere.videos.models.Video"
                ],
                "validated_data": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "PathSerializer.get_url": {
            "name": "get_url",
            "location": 69,
            "return": [
                "str",
                "List[str]",
                "Dict[str, Any]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "pathlib.Path"
                ]
            }
        },
        "PathSerializer.get_path": {
            "name": "get_path",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "pathlib.Path"
                ]
            }
        }
    },
    "stream-anywhere-master/stream_anywhere/videos/api/viewsets.py": {
        "get_path": {
            "name": "get_path",
            "location": 18,
            "return": [
                "stream_anywhere.videos.path.Path"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "VideoFilter.__call__": {
            "name": "__call__",
            "location": 24,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "queryset": [
                    "typing.Iterable[typing.Any]",
                    "typing.Iterable[tuple[typing.Union[str,str]]]",
                    "Iterable[Any]",
                    "Iterable[Tuple[str, str]]",
                    "list",
                    "dict",
                    "List[Tuple[int, int]]"
                ]
            }
        },
        "CollectionViewSet.next": {
            "name": "next",
            "location": 45,
            "return": [
                "Response",
                "Optional[str]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VideoViewSet.perform_create": {
            "name": "perform_create",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "serializer": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "VideoViewSet.create": {
            "name": "create",
            "location": 86,
            "return": [
                "Response",
                "Dict[str, Any]",
                "app.models.dto.LoginResponse",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]",
                    "rest_framework.requesRequest",
                    "dict"
                ]
            }
        },
        "VideoViewSet.first": {
            "name": "first",
            "location": 96,
            "return": [
                "Response",
                "dict",
                "flask.Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool",
                    "rest_framework.requesRequest"
                ]
            }
        },
        "PathViewSet.get_object": {
            "name": "get_object",
            "location": 109,
            "return": [
                "stream_anywhere.videos.path.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "PathViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 113,
            "return": [
                "itertools.chain"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "None",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict[str, typing.Any]",
                    "pathlib.Path",
                    "list[str]"
                ]
            }
        },
        "PathViewSet.filter_queryset": {
            "name": "filter_queryset",
            "location": 123,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "queryset": [
                    "bool",
                    "Optional[Any]",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "PathViewSet.retrieve": {
            "name": "retrieve",
            "location": 126,
            "return": [
                "Response",
                "int",
                "str",
                "Mapping[str, Any]",
                "models.Dashboard",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest"
                ]
            }
        }
    },
    "stream-anywhere-master/stream_anywhere/videos/api/__init__.py": {},
    "stream-anywhere-master/stream_anywhere/videos/migrations/0001_initial.py": {
        "add_user": {
            "name": "add_user",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [
                    "str",
                    "IO",
                    "typing.IO",
                    "Union[str, bytes]",
                    "bytes",
                    "dict",
                    "dict[, ]"
                ],
                "schema_editor": [
                    "typing.Iterable[typing.Any]",
                    "bool",
                    "Iterable[Any]",
                    "typing.Sequence[int]",
                    "dict",
                    "Sequence[int]"
                ]
            }
        },
        "remove_user": {
            "name": "remove_user",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [
                    "str",
                    "typing.IO",
                    "IO",
                    "list[str]",
                    "models.User",
                    "dict[, ]",
                    "List[str]",
                    "dict"
                ],
                "schema_editor": [
                    "dict",
                    "str",
                    "dict[, ]"
                ]
            }
        }
    },
    "stream-anywhere-master/stream_anywhere/videos/migrations/__init__.py": {}
}
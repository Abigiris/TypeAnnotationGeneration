{
    "strix-master/setup.py": {},
    "strix-master/src/strix/api.py": {
        "timestr_to_dt": {
            "name": "timestr_to_dt",
            "location": 33,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "rfc_str": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "run_api": {
            "name": "run_api",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "logging_queue": [
                    "bool",
                    "list[str]",
                    "List[str]",
                    "int"
                ],
                "base_dir": [
                    "bool",
                    "list[str]",
                    "List[str]",
                    "int"
                ],
                "cameras": [
                    "bool",
                    "list[str]",
                    "List[str]",
                    "int"
                ],
                "host": [
                    "str",
                    "int",
                    "float",
                    "Optional[float]",
                    "None",
                    "Optional[int]",
                    "typing.Iterable[]",
                    "Iterable",
                    "Set[int]"
                ],
                "port": [
                    "str",
                    "int",
                    "float",
                    "Optional[float]",
                    "None",
                    "Optional[int]",
                    "typing.Iterable[]",
                    "Iterable",
                    "Set[int]"
                ],
                "debug": [
                    "str",
                    "int",
                    "float",
                    "Optional[float]",
                    "None",
                    "Optional[int]",
                    "typing.Iterable[]",
                    "Iterable",
                    "Set[int]"
                ],
                "queue_rx": [
                    "bool",
                    "list[str]",
                    "List[str]",
                    "int"
                ]
            }
        },
        "run_api.serve_root": {
            "name": "serve_root",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "typing.Text"
                ]
            }
        },
        "run_api.serve_motion": {
            "name": "serve_motion",
            "location": 51,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "filepath": [
                    "str"
                ]
            }
        },
        "run_api.serve_cameras_list": {
            "name": "serve_cameras_list",
            "location": 55,
            "return": [
                "dict[typing.Text, ]",
                "List[int]",
                "List[str]",
                "bytes",
                "bool",
                "Sequence[int]",
                "str"
            ],
            "arguments": {}
        },
        "run_api.serve_events": {
            "name": "serve_events",
            "location": 59,
            "return": [
                "dict[typing.Text, typing.Union[str,int,dict[, ]]]",
                "str",
                "bool",
                "type",
                "Optional[str]",
                "BaseException",
                "Type"
            ],
            "arguments": {
                "cameras": [
                    "dict",
                    "List[List[str]]",
                    "str",
                    "Dict[str, List[Any]]",
                    "Dict[str, Any]",
                    "bool",
                    "List[Tuple[float, str]]"
                ]
            }
        }
    },
    "strix-master/src/strix/cmdline.py": {
        "parser": {
            "name": "parser",
            "location": 21,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {
                "max_cores": [
                    "bool",
                    "argparse.ArgumentParser",
                    "typing.Callable[, ]",
                    "str",
                    "Optional[Callable]",
                    "None",
                    "list",
                    "list[]",
                    "List[Tuple[str, Any]]",
                    "list[tuple[typing.Union[str,typing.Any]]]"
                ]
            }
        }
    },
    "strix-master/src/strix/events.py": {
        "preload_cache": {
            "name": "preload_cache",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "log": [
                    "str",
                    "Type[BaseException]",
                    "Exception",
                    "Tuple[str, int]"
                ],
                "base_dir": [
                    "str"
                ]
            }
        },
        "path_to_dt": {
            "name": "path_to_dt",
            "location": 205,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "path": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "image_to_dt": {
            "name": "image_to_dt",
            "location": 212,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "event_date": [
                    "str",
                    "int",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "Tuple[str, str]"
                ],
                "image": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "event_details": {
            "name": "event_details",
            "location": 222,
            "return": [
                "Dict[str, Any]",
                "\"Step\"",
                "dict"
            ],
            "arguments": {
                "log": [
                    "str",
                    "dict"
                ],
                "event_path": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "camera_events": {
            "name": "camera_events",
            "location": 304,
            "return": [
                "list"
            ],
            "arguments": {
                "log": [
                    "str",
                    "bool",
                    "structlog.BoundLogger",
                    "Callable",
                    "int",
                    "List[Tuple[str, Any]]"
                ],
                "base_dir": [
                    "float",
                    "str"
                ],
                "camera": [
                    "bool",
                    "int",
                    "dict",
                    "List[str]"
                ],
                "start": [
                    "datetime.datetime",
                    "int",
                    "Union[str, list]"
                ],
                "end": [
                    "datetime.datetime",
                    "int",
                    "Union[str, list]"
                ],
                "offset": [
                    "int",
                    "float",
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "limit": [
                    "bool",
                    "Tuple[int]",
                    "int"
                ]
            }
        },
        "queue_events": {
            "name": "queue_events",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "log": [
                    "List[Dict[str, float]]",
                    "bool",
                    "int"
                ],
                "queue_rx": [
                    "Optional[Dict]",
                    "Optional[str]",
                    "Optional",
                    "str"
                ]
            }
        },
        "EventCacheClass.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventCacheClass.cleanup_dq": {
            "name": "cleanup_dq",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventCacheClass.get": {
            "name": "get",
            "location": 60,
            "return": [
                "str",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Type[RuntimeError]",
                    "Dict[str, str]",
                    "int",
                    "Callable[[KT], VT]",
                    "Optional[str]",
                    "tuple"
                ]
            }
        },
        "EventCacheClass.set": {
            "name": "set",
            "location": 64,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "T"
                ],
                "value": [
                    "bytes",
                    "Optional[float]",
                    "datetime.date",
                    "Optional[object]",
                    "str",
                    "Hashable",
                    "Optional[str]"
                ]
            }
        },
        "EventCacheClass.events": {
            "name": "events",
            "location": 80,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": [],
                "camera": [
                    "List[str]",
                    "str"
                ],
                "reverse": [
                    "Optional[BaseException]",
                    "str"
                ]
            }
        },
        "EventCacheClass.base_dir": {
            "name": "base_dir",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_dir": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "EventCacheClass.logger": {
            "name": "logger",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "str",
                    "int"
                ]
            }
        },
        "EventCacheClass.keep": {
            "name": "keep",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "days": [
                    "int",
                    "float",
                    "datetime.datetime",
                    "List[str]",
                    "str"
                ]
            }
        },
        "EventCacheClass.check_cache": {
            "name": "check_cache",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "minutes": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "EventCacheClass.reset_check": {
            "name": "reset_check",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventCacheClass.log_info": {
            "name": "log_info",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventCacheClass.log_error": {
            "name": "log_error",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventCacheClass._expire_events": {
            "name": "_expire_events",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventCacheClass.cleanup_dq.dth_fn": {
            "name": "dth_fn",
            "location": 44,
            "return": [],
            "arguments": {
                "dq_dirs": []
            }
        },
        "EventCacheClass._expire_events.dth_fn": {
            "name": "dth_fn",
            "location": 172,
            "return": [
                ""
            ],
            "arguments": {
                "delete_queue": [
                    "str",
                    "int",
                    "bytes",
                    "dict"
                ]
            }
        }
    },
    "strix-master/src/strix/logger.py": {
        "listener": {
            "name": "listener",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "queue": [
                    "str",
                    "Optional[List[str]]"
                ],
                "stop_event": [
                    "int",
                    "dict",
                    "str"
                ],
                "log_path": [
                    "int",
                    "bytes"
                ]
            }
        },
        "log": {
            "name": "log",
            "location": 63,
            "return": [
                "str",
                "int",
                "structlog.BoundLogger"
            ],
            "arguments": {
                "queue": [
                    "bool"
                ]
            }
        }
    },
    "strix-master/src/strix/queue.py": {
        "max_cores": {
            "name": "max_cores",
            "location": 32,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "GetImageDescriptions": {
            "name": "GetImageDescriptions",
            "location": 36,
            "return": [
                "list"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "DescriptionDict": {
            "name": "DescriptionDict",
            "location": 52,
            "return": [
                "Dict[(str, int)]"
            ],
            "arguments": {
                "desc": [
                    "int",
                    "float",
                    "list",
                    "bool"
                ]
            }
        },
        "BestThumbnail": {
            "name": "BestThumbnail",
            "location": 81,
            "return": [
                "str",
                "List[str]",
                "OrderedDict"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "process_event": {
            "name": "process_event",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "log": [
                    "structlog.BoundLogger",
                    "str"
                ],
                "base_dir": [
                    "str"
                ],
                "event": [
                    "str"
                ],
                "queue_tx": [
                    "str",
                    "dict",
                    "Tuple[int, int]"
                ]
            }
        },
        "monitor_queue": {
            "name": "monitor_queue",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "logging_queue": [
                    "str",
                    "multiprocessing.Queue",
                    "int",
                    "list[str]",
                    "List[str]"
                ],
                "base_dir": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "quit": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "bool"
                ],
                "max_threads": [
                    "int",
                    "bool",
                    "Optional[int]"
                ],
                "queue_tx": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "strix-master/src/strix/__init__.py": {
        "check_motion_config": {
            "name": "check_motion_config",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "config_path": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 97,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "run.p_e": {
            "name": "p_e",
            "location": 107,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "e": [
                    "str",
                    "int",
                    "Tuple[str]"
                ]
            }
        }
    },
    "strix-master/src/strix/motion/config.py": {
        "MotionConfig.thread_n": {
            "name": "thread_n",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MotionConfig.split": {
            "name": "split",
            "location": 36,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "_T0"
                ]
            }
        },
        "MotionConfig.parse": {
            "name": "parse",
            "location": 52,
            "return": [
                "Dict[(nothing, nothing)]"
            ],
            "arguments": {
                "self": [],
                "config_path": [
                    "str",
                    "Callable[[str], None]"
                ]
            }
        },
        "MotionConfig.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_path": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "strix-master/src/strix/motion/__init__.py": {}
}
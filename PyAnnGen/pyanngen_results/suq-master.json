{
    "suq-master/app.py": {
        "handle_thrown_api_exceptions": {
            "name": "handle_thrown_api_exceptions",
            "location": 50,
            "return": [
                "bytes",
                "dict",
                "Union[Dict, Tuple]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "error": [
                    "int",
                    "List[str]",
                    "bytes",
                    "str"
                ]
            }
        },
        "add_header": {
            "name": "add_header",
            "location": 63,
            "return": [
                "dict[, ]",
                "dict",
                "typing.Iterator",
                "Dict[str, Any]",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "response": [
                    "dict[, ]",
                    "flask.Response",
                    "typing.Iterator",
                    "dict",
                    "Iterator"
                ]
            }
        },
        "load_user": {
            "name": "load_user",
            "location": 73,
            "return": [
                "Optional[bool]",
                "None",
                "bool",
                "dict[int, str]",
                "Optional[float]",
                "typing.Callable[..., typing.Any]",
                "Optional[int]",
                "dict[str, typing.Union[typing.Any,typing.Any,typing.Any]]",
                "dict[str, str]"
            ],
            "arguments": {
                "id": [
                    "str",
                    "int",
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        },
        "index": {
            "name": "index",
            "location": 93,
            "return": [
                "alerta.models.alerAlert",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "frontend": {
            "name": "frontend",
            "location": 99,
            "return": [
                "bool",
                "Dict[str, Dict[str, Any]]",
                "Mapping[str, str]"
            ],
            "arguments": {}
        },
        "login": {
            "name": "login",
            "location": 104,
            "return": [
                "str",
                "Optional[Any]"
            ],
            "arguments": {}
        },
        "redirect_url": {
            "name": "redirect_url",
            "location": 116,
            "return": [
                "bool",
                "server.models.User",
                "str",
                "models.User",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "check_login": {
            "name": "check_login",
            "location": 127,
            "return": [
                "str",
                "int",
                "Optional[int]",
                "bytes"
            ],
            "arguments": {}
        },
        "logout": {
            "name": "logout",
            "location": 135,
            "return": [
                "str",
                "Dict[str, str]",
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "whats_due": {
            "name": "whats_due",
            "location": 148,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "fb_friends": {
            "name": "fb_friends",
            "location": 161,
            "return": [
                "Optional[int]",
                "int"
            ],
            "arguments": {}
        },
        "add_friend": {
            "name": "add_friend",
            "location": 212,
            "return": [
                "Dict[str, Any]",
                "Optional[Callable]",
                "str",
                "float"
            ],
            "arguments": {}
        },
        "breaks": {
            "name": "breaks",
            "location": 247,
            "return": [
                "bool",
                "Optional[Any]",
                "str",
                "Callable[..., None]",
                "allennlp.models.Model"
            ],
            "arguments": {}
        },
        "calendar": {
            "name": "calendar",
            "location": 268,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "profile": {
            "name": "profile",
            "location": 320,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "settings": {
            "name": "settings",
            "location": 331,
            "return": [
                "Dict[str, Any]",
                "Sequence[Sequence[str]]",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "status": {
            "name": "status",
            "location": 355,
            "return": [
                "int",
                "dict",
                "List[str]",
                "Dict[str, str]"
            ],
            "arguments": {}
        },
        "statuses": {
            "name": "statuses",
            "location": 397,
            "return": [
                "str",
                "bytes",
                "List[Dict]",
                "List[str]",
                "List[float]"
            ],
            "arguments": {}
        },
        "fb_login": {
            "name": "fb_login",
            "location": 421,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "fb_app_id": {
            "name": "fb_app_id",
            "location": 481,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "settings.make_settings_response": {
            "name": "make_settings_response",
            "location": 337,
            "return": [
                "str",
                "int",
                "Union[fonduer.candidates.models.Candidate, fonduer.candidates.models.Mention, fonduer.candidates.models.span_mention.TemporarySpanMention]",
                "dict"
            ],
            "arguments": {
                "current_user": [
                    "django.contrib.auth.models.User",
                    "bool",
                    "app.models.user.User.InDB",
                    "Optional[List[Any]]",
                    "tildes.models.user.User"
                ]
            }
        },
        "status.make_status_response": {
            "name": "make_status_response",
            "location": 363,
            "return": [
                "str",
                "Iterable[str]",
                "int",
                "dict",
                "Union[fonduer.candidates.models.Candidate, fonduer.candidates.models.Mention, fonduer.candidates.models.span_mention.TemporarySpanMention]"
            ],
            "arguments": {
                "user": [
                    "users.models.JustfixUser",
                    "django.contrib.auth.models.User",
                    "models.User",
                    "zerver.models.UserProfile",
                    "bool"
                ]
            }
        },
        "calendar.is_url_valid": {
            "name": "is_url_valid",
            "location": 289,
            "return": [
                "bool",
                "Tuple[str, str]",
                "str",
                "List[str]",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        }
    },
    "suq-master/config.py": {},
    "suq-master/backend/middleware.py": {
        "get_whats_due": {
            "name": "get_whats_due",
            "location": 11,
            "return": [
                "List[Dict[(str, str)]]"
            ],
            "arguments": {
                "subjects": [
                    "Set[str]"
                ]
            }
        },
        "get_whats_due.try_parsing_date": {
            "name": "try_parsing_date",
            "location": 59,
            "return": [
                "None",
                "int",
                "datetime.timedelta",
                "str"
            ],
            "arguments": {
                "xs": [
                    "str",
                    "Container[str]",
                    "tuple",
                    "list"
                ]
            }
        },
        "get_whats_due.make_assessment_piece": {
            "name": "make_assessment_piece",
            "location": 74,
            "return": [
                "dict[typing.Text, ]",
                "str",
                "int",
                "float",
                "bool"
            ],
            "arguments": {
                "completed": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "suq-master/backend/models.py": {
        "get_events": {
            "name": "get_events",
            "location": 393,
            "return": [
                "List[Event_]"
            ],
            "arguments": {
                "cal": [
                    "str"
                ]
            }
        },
        "get_datetime_of_week_start": {
            "name": "get_datetime_of_week_start",
            "location": 409,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "original": [
                    "_datetime.datetime"
                ]
            }
        },
        "get_breaks": {
            "name": "get_breaks",
            "location": 420,
            "return": [
                "List[Break]"
            ],
            "arguments": {
                "events": [
                    "List[Event_]"
                ]
            }
        },
        "weeks_events_to_dictionary": {
            "name": "weeks_events_to_dictionary",
            "location": 445,
            "return": [
                "Dict[(str, List[dict])]"
            ],
            "arguments": {
                "events": [
                    "List[Event_]"
                ]
            }
        },
        "get_this_weeks_events": {
            "name": "get_this_weeks_events",
            "location": 462,
            "return": [
                "List[Event_]"
            ],
            "arguments": {
                "instant": [
                    "_datetime.datetime"
                ],
                "events": [
                    "List[Event_]"
                ]
            }
        },
        "get_todays_events": {
            "name": "get_todays_events",
            "location": 471,
            "return": [
                "List[Event_]"
            ],
            "arguments": {
                "instant": [
                    "_datetime.datetime"
                ],
                "events": [
                    "List[Event_]"
                ]
            }
        },
        "cull_past_breaks": {
            "name": "cull_past_breaks",
            "location": 479,
            "return": [
                "List[Break]"
            ],
            "arguments": {
                "events": [
                    "List[Break]"
                ]
            }
        },
        "get_shared_breaks": {
            "name": "get_shared_breaks",
            "location": 489,
            "return": [
                "List[Break]"
            ],
            "arguments": {
                "group_members": [
                    "Set[User]"
                ]
            }
        },
        "get_remaining_shared_breaks_this_week": {
            "name": "get_remaining_shared_breaks_this_week",
            "location": 501,
            "return": [
                "List[Break]"
            ],
            "arguments": {
                "group_members": [
                    "Set[User]"
                ]
            }
        },
        "get_request_status": {
            "name": "get_request_status",
            "location": 520,
            "return": [
                "str"
            ],
            "arguments": {
                "user_id": [
                    "str"
                ],
                "friend_id": [
                    "str"
                ]
            }
        },
        "Period.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "_datetime.datetime"
                ],
                "end": [
                    "_datetime.datetime"
                ]
            }
        },
        "Period.__contains__": {
            "name": "__contains__",
            "location": 48,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "instant": [
                    "_datetime.datetime"
                ]
            }
        },
        "Break.is_short": {
            "name": "is_short",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Break.is_overnight": {
            "name": "is_overnight",
            "location": 66,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Break.to_dict": {
            "name": "to_dict",
            "location": 69,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Break.__repr__": {
            "name": "__repr__",
            "location": 79,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event_.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "summary": [
                    "str"
                ],
                "location": [
                    "str"
                ],
                "start": [
                    "_datetime.datetime"
                ],
                "end": [
                    "_datetime.datetime"
                ]
            }
        },
        "Event_.to_dict": {
            "name": "to_dict",
            "location": 96,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event_.__repr__": {
            "name": "__repr__",
            "location": 101,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.__init__": {
            "name": "__init__",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str"
                ],
                "email": [
                    "str"
                ],
                "fb_user_id": [
                    "str"
                ],
                "fb_access_token": [
                    "str"
                ]
            }
        },
        "User.add_calendar": {
            "name": "add_calendar",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "User.remove_calendar": {
            "name": "remove_calendar",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.profile_picture": {
            "name": "profile_picture",
            "location": 178,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.breaks": {
            "name": "breaks",
            "location": 186,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.calendar": {
            "name": "calendar",
            "location": 190,
            "return": [
                "bool",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.events": {
            "name": "events",
            "location": 195,
            "return": [
                "Optional[str]",
                "List[Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.subjects": {
            "name": "subjects",
            "location": 199,
            "return": [
                "set[]",
                "str",
                "List[str]",
                "bool",
                "Optional[Union[str, Any]]",
                "List[Mapping[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.timetable": {
            "name": "timetable",
            "location": 203,
            "return": [
                "dict",
                "Optional[int]",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.current_event": {
            "name": "current_event",
            "location": 210,
            "return": [
                "None",
                "Optional[bytes]",
                "Optional[Tuple]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.current_break": {
            "name": "current_break",
            "location": 220,
            "return": [
                "None",
                "Optional[str]",
                "list",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.whats_due": {
            "name": "whats_due",
            "location": 230,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.status": {
            "name": "status",
            "location": 234,
            "return": [
                "dict[dict[typing.Text, ], ]",
                "int",
                "datetime.datetime",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.availability": {
            "name": "availability",
            "location": 301,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "friend": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "User.confirmed_friends": {
            "name": "confirmed_friends",
            "location": 313,
            "return": [
                "list[]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.check_in": {
            "name": "check_in",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.check_out": {
            "name": "check_out",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.at_uni": {
            "name": "at_uni",
            "location": 335,
            "return": [
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.begin_break": {
            "name": "begin_break",
            "location": 344,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.end_break": {
            "name": "end_break",
            "location": 348,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.on_break": {
            "name": "on_break",
            "location": 352,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasFriend.__init__": {
            "name": "__init__",
            "location": 382,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fb_id": [
                    "str"
                ],
                "friend_fb_id": [
                    "str"
                ]
            }
        },
        "get_shared_breaks.concat": {
            "name": "concat",
            "location": 493,
            "return": [
                "list[]",
                "List[Dict]",
                "str",
                "list",
                "List[int]",
                "List[List[Any]]",
                "Optional[Union[str, Any]]",
                "float"
            ],
            "arguments": {
                "xs": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "User.status.make_user_status": {
            "name": "make_user_status",
            "location": 242,
            "return": [
                "dict[typing.Text, ]",
                "int",
                "Exception",
                "str"
            ],
            "arguments": {
                "status": [
                    "str",
                    "int"
                ],
                "status_info": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "suq-master/backend/responses.py": {
        "_data": {
            "name": "_data",
            "location": 86,
            "return": [
                "int",
                "dict",
                "dict[str, int]",
                "Optional[str]",
                "dict[, ]",
                "List[dict]",
                "list[str]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "status_code": [
                    "int"
                ],
                "data": [
                    "int",
                    "bytes",
                    "dict",
                    "dict[, ]",
                    "MutableMapping",
                    "typing.MutableMapping"
                ]
            }
        },
        "ok": {
            "name": "ok",
            "location": 96,
            "return": [
                "Dict[str, Any]",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "data": [
                    "Dict[str, Any]",
                    "None",
                    "bytes",
                    "dict[str, typing.Any]",
                    "str",
                    "list",
                    "list[]",
                    "Optional[Dict[str, Any]]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "created": {
            "name": "created",
            "location": 103,
            "return": [
                "Dict[str, Any]",
                "List[int]",
                "Dict[str, float]",
                "str",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "data": [
                    "Dict[str, Any]",
                    "None",
                    "bytes",
                    "dict",
                    "dict[str, typing.Any]",
                    "str",
                    "dict[, ]",
                    "list",
                    "list[]"
                ]
            }
        },
        "no_content": {
            "name": "no_content",
            "location": 110,
            "return": [
                "Union[str, None]",
                "Dict[str, Any]",
                "dict",
                "int",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "to_json": {
            "name": "to_json",
            "location": 118,
            "return": [
                "float",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "func": [
                    "Callable"
                ]
            }
        },
        "APIException.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status_code": [
                    "int"
                ],
                "message": [
                    "str"
                ],
                "payload": [
                    "dict"
                ]
            }
        },
        "APIException.to_dict": {
            "name": "to_dict",
            "location": 30,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "BadRequest.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ],
                "payload": [
                    "dict"
                ]
            }
        },
        "Forbidden.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ],
                "payload": [
                    "dict"
                ]
            }
        },
        "NotFound.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ],
                "payload": [
                    "dict"
                ]
            }
        },
        "InternalServerError.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ],
                "payload": [
                    "dict"
                ]
            }
        },
        "NotImplemented.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ],
                "payload": [
                    "dict"
                ]
            }
        },
        "to_json.wrapper": {
            "name": "wrapper",
            "location": 125,
            "return": [
                "bool",
                "Optional[Any]",
                "str",
                "Callable[..., None]"
            ],
            "arguments": {}
        }
    },
    "suq-master/backend/test.py": {
        "TestGetDatetimeOfWeekStart.test_sunday": {
            "name": "test_sunday",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetDatetimeOfWeekStart.test_monday": {
            "name": "test_monday",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetDatetimeOfWeekStart.test_wednesday": {
            "name": "test_wednesday",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCalendarParsing.test_broken_ical": {
            "name": "test_broken_ical",
            "location": 30,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCalendarRetrieval.test_invalid_calendar_url": {
            "name": "test_invalid_calendar_url",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCalendarRetrieval.test_get_valid_calendar": {
            "name": "test_get_valid_calendar",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCalendarRetrieval.test_subjects": {
            "name": "test_subjects",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWhatsDue.test_simple": {
            "name": "test_simple",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "suq-master/backend/__init__.py": {}
}
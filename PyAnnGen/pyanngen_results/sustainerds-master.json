{
    "sustainerds-master/setup.py": {},
    "sustainerds-master/sustainerds/__init__.py": {},
    "sustainerds-master/sustainerds/api/app.py": {
        "create_app": {
            "name": "create_app",
            "location": 14,
            "return": [],
            "arguments": {
                "sqla_session": [
                    "str",
                    "None"
                ]
            }
        },
        "create_openapi_spec": {
            "name": "create_openapi_spec",
            "location": 26,
            "return": [
                "APISpec",
                "bool",
                "float"
            ],
            "arguments": {
                "app": [
                    "dict[, ]",
                    "falcon.API",
                    "dict"
                ]
            }
        },
        "configure_app": {
            "name": "configure_app",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "dict[str, typing.Any]",
                    "bool",
                    "falcon.API",
                    "apispec.APISpec",
                    "Dict[str, Any]"
                ],
                "spec": [
                    "dict[str, typing.Any]",
                    "bool",
                    "falcon.API",
                    "apispec.APISpec",
                    "Dict[str, Any]"
                ],
                "ctx": [
                    "sustainerds.api.core.resource.ResourceContext"
                ]
            }
        },
        "get_app": {
            "name": "get_app",
            "location": 41,
            "return": [],
            "arguments": {}
        }
    },
    "sustainerds-master/sustainerds/api/cli.py": {
        "print_spec": {
            "name": "print_spec",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sustainerds-master/sustainerds/api/conftest.py": {
        "resource_ctx": {
            "name": "resource_ctx",
            "location": 14,
            "return": [
                "bool",
                "ResourceContext"
            ],
            "arguments": {}
        },
        "plain_test_app": {
            "name": "plain_test_app",
            "location": 19,
            "return": [
                "List[str]",
                "Dict[Any, int]",
                "str"
            ],
            "arguments": {}
        },
        "plain_openapi_spec": {
            "name": "plain_openapi_spec",
            "location": 24,
            "return": [
                "bool",
                "List[str]",
                "int"
            ],
            "arguments": {
                "plain_test_app": [
                    "int",
                    "str",
                    "falcon.API"
                ]
            }
        },
        "test_app": {
            "name": "test_app",
            "location": 29,
            "return": [
                "bool",
                "app.executor.Application",
                "str",
                "int"
            ],
            "arguments": {
                "plain_test_app": [
                    "bool",
                    "falcon.API",
                    "sustainerds.api.core.resource.ResourceContext",
                    "apispec.APISpec"
                ],
                "plain_openapi_spec": [
                    "bool",
                    "falcon.API",
                    "sustainerds.api.core.resource.ResourceContext",
                    "apispec.APISpec"
                ],
                "resource_ctx": [
                    "bool",
                    "falcon.API",
                    "sustainerds.api.core.resource.ResourceContext",
                    "apispec.APISpec"
                ]
            }
        },
        "test_client": {
            "name": "test_client",
            "location": 40,
            "return": [
                "Tuple[Callable, Callable]",
                "routemaster.app.App"
            ],
            "arguments": {
                "test_app": [
                    "str",
                    "typing.Callable[, ]",
                    "app.GrpyApp",
                    "Callable"
                ]
            }
        },
        "engine": {
            "name": "engine",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "tables": {
            "name": "tables",
            "location": 52,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "engine": [
                    "IO",
                    "bool",
                    "typing.IO",
                    "bytes",
                    "str"
                ]
            }
        },
        "dbsession": {
            "name": "dbsession",
            "location": 59,
            "return": [
                "",
                "typing.Generator[Session]"
            ],
            "arguments": {
                "engine": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "tables": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "sustainerds-master/sustainerds/api/persistence.py": {},
    "sustainerds-master/sustainerds/api/__init__.py": {},
    "sustainerds-master/sustainerds/api/core/exceptions.py": {},
    "sustainerds-master/sustainerds/api/core/openapi.py": {
        "add_openapi_specs": {
            "name": "add_openapi_specs",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "o": [
                    "apispec.APISpec",
                    "str"
                ],
                "path": [
                    "str"
                ],
                "resource": [
                    "sustainerds.api.core.resource.BaseResource"
                ]
            }
        }
    },
    "sustainerds-master/sustainerds/api/core/persistence.py": {
        "StorageResult.__post_init__": {
            "name": "__post_init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PersistenceApi.store": {
            "name": "store",
            "location": 83,
            "return": [
                "StorageResult"
            ],
            "arguments": {
                "self": [],
                "entity": [
                    "str"
                ],
                "data": [
                    "dict"
                ]
            }
        },
        "PersistenceApi.fetch": {
            "name": "fetch",
            "location": 87,
            "return": [
                "StorageResult"
            ],
            "arguments": {
                "self": [],
                "entity": [
                    "str"
                ],
                "id": [
                    "str"
                ]
            }
        },
        "InMemoryPersistence.store": {
            "name": "store",
            "location": 98,
            "return": [
                "StorageResult"
            ],
            "arguments": {
                "self": [],
                "entity": [
                    "str"
                ],
                "data": [
                    "dict"
                ]
            }
        },
        "InMemoryPersistence.fetch": {
            "name": "fetch",
            "location": 106,
            "return": [
                "StorageResult"
            ],
            "arguments": {
                "self": [],
                "entity": [
                    "str"
                ],
                "_id": [
                    "str"
                ]
            }
        }
    },
    "sustainerds-master/sustainerds/api/core/resource.py": {
        "RequestSchemaSpec.__post_init__": {
            "name": "__post_init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseSchemaSpec.__post_init__": {
            "name": "__post_init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResourceSchemaSpec.get_methods": {
            "name": "get_methods",
            "location": 98,
            "return": [
                "List[Tuple[(str, SchemaSpec)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseResource.resource_schema_spec": {
            "name": "resource_schema_spec",
            "location": 122,
            "return": [
                "bool",
                "ResourceSchemaSpec"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseResource.__init__": {
            "name": "__init__",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "ResourceContext"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "BaseResource._validate_request_schema": {
            "name": "_validate_request_schema",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "str",
                    "List[recidiviz.persistence.database.schema.state.schema.StatePerson]",
                    "list[P]",
                    "Optional[str]",
                    "None",
                    "Generator",
                    "typing.Generator[]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "resp": [
                    "dict[, ]",
                    "str",
                    "falcon.Request",
                    "dict"
                ],
                "params": [
                    "dict"
                ]
            }
        },
        "BaseResource._validate_response_schema": {
            "name": "_validate_response_schema",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "str",
                    "bytes"
                ],
                "resp": [
                    "str"
                ],
                "params": [
                    "dict"
                ]
            }
        },
        "SchemaValidatorComponent.process_resource": {
            "name": "process_resource",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "str",
                    "bytes",
                    "dict[\"core.Edge\", S]",
                    "falcon.Request",
                    "typing.Sequence[typing.Sequence[str]]",
                    "Dict[\"core.Edge\", \"state.State\"]",
                    "typing.Sequence[str]",
                    "Sequence[Sequence[str]]",
                    "Sequence[str]"
                ],
                "resp": [
                    "str",
                    "bytes",
                    "dict[\"core.Edge\", S]",
                    "falcon.Request",
                    "typing.Sequence[typing.Sequence[str]]",
                    "Dict[\"core.Edge\", \"state.State\"]",
                    "typing.Sequence[str]",
                    "Sequence[Sequence[str]]",
                    "Sequence[str]"
                ],
                "resource": [
                    "BaseResource"
                ],
                "params": [
                    "dict"
                ]
            }
        },
        "SchemaValidatorComponent.process_response": {
            "name": "process_response",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "str",
                    "Tuple[int, int]",
                    "tuple[typing.Union[int,int]]",
                    "Optional[str]",
                    "None"
                ],
                "resp": [
                    "str",
                    "falcon.Response"
                ],
                "resource": [
                    "BaseResource"
                ],
                "params": [
                    "dict"
                ]
            }
        },
        "ResourceSchemaSpec.get_methods.is_valid_method": {
            "name": "is_valid_method",
            "location": 101,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "m": [
                    "Optional[int]",
                    "str",
                    "Optional[bool]",
                    "int",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "bool"
                ]
            }
        }
    },
    "sustainerds-master/sustainerds/api/core/route.py": {
        "add_routes": {
            "name": "add_routes",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "dict[, ]",
                    "falcon.API",
                    "dict"
                ],
                "openapi_spec": [
                    "str",
                    "apispec.APISpec",
                    "list[str]",
                    "typing.Callable[, ]",
                    "List[str]",
                    "vimiv.api.modes.Mode",
                    "Callable"
                ],
                "ctx": [
                    "sustainerds.api.core.resource.ResourceContext"
                ],
                "mod": [
                    "module"
                ],
                "fname": [
                    "Optional[str]"
                ]
            }
        }
    },
    "sustainerds-master/sustainerds/api/core/test_openapi.py": {
        "test_openapi_paths": {
            "name": "test_openapi_paths",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "plain_test_app": [
                    "falcon.API"
                ],
                "plain_openapi_spec": [
                    "apispec.APISpec"
                ]
            }
        },
        "ATestResource.resource_schema_spec": {
            "name": "resource_schema_spec",
            "location": 34,
            "return": [
                "ResourceSchemaSpec",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sustainerds-master/sustainerds/api/core/test_resource.py": {
        "test_resource_schema_spec_get_methods": {
            "name": "test_resource_schema_spec_get_methods",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sustainerds-master/sustainerds/api/core/test_route.py": {
        "include_routes_empty": {
            "name": "include_routes_empty",
            "location": 11,
            "return": [
                "List[sustainerds.api.core.route.SustainerdsRoute]"
            ],
            "arguments": {
                "app": [
                    "falcon.API"
                ]
            }
        },
        "include_routes_good": {
            "name": "include_routes_good",
            "location": 15,
            "return": [
                "List[sustainerds.api.core.route.SustainerdsRoute]"
            ],
            "arguments": {
                "app": [
                    "falcon.API"
                ]
            }
        },
        "test_add_routes": {
            "name": "test_add_routes",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "plain_test_app": [
                    "bool",
                    "falcon.API",
                    "sustainerds.api.core.resource.ResourceContext",
                    "apispec.APISpec"
                ],
                "plain_openapi_spec": [
                    "bool",
                    "falcon.API",
                    "sustainerds.api.core.resource.ResourceContext",
                    "apispec.APISpec"
                ],
                "resource_ctx": [
                    "sustainerds.api.core.resource.ResourceContext"
                ]
            }
        }
    },
    "sustainerds-master/sustainerds/api/core/__init__.py": {},
    "sustainerds-master/sustainerds/api/entities/__init__.py": {},
    "sustainerds-master/sustainerds/api/entities/user/model.py": {
        "User.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "persistence": [
                    "sustainerds.api.core.persistence.PersistenceApi"
                ]
            }
        },
        "User.id": {
            "name": "id",
            "location": 31,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.register": {
            "name": "register",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "str"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "User.save": {
            "name": "save",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.load": {
            "name": "load",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ]
            }
        },
        "User.to_dict": {
            "name": "to_dict",
            "location": 62,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sustainerds-master/sustainerds/api/entities/user/resources.py": {
        "UserCollectionResource.resource_schema_spec": {
            "name": "resource_schema_spec",
            "location": 46,
            "return": [
                "str",
                "ResourceSchemaSpec"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserCollectionResource.on_post": {
            "name": "on_post",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "dict[, ]",
                    "falcon.Request",
                    "dict[str, str]",
                    "dict",
                    "list[]",
                    "Dict[str, str]",
                    "None",
                    "list",
                    "Optional[Dict]"
                ],
                "resp": [
                    "str",
                    "bool",
                    "falcon.Response",
                    "int"
                ]
            }
        },
        "UserResource.resource_schema_spec": {
            "name": "resource_schema_spec",
            "location": 71,
            "return": [
                "ResourceSchemaSpec",
                "float",
                "bool",
                "Union[List, str]",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserResource.on_get": {
            "name": "on_get",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "list[str]",
                    "str",
                    "falcon.Request",
                    "List[str]",
                    "app.domains.User"
                ],
                "resp": [
                    "str",
                    "falcon.Response",
                    "bytes",
                    "dict[str, str]",
                    "bool",
                    "Dict[str, str]",
                    "list[int]",
                    "List[int]"
                ],
                "user_id": [
                    "str"
                ]
            }
        }
    },
    "sustainerds-master/sustainerds/api/entities/user/test_user.py": {
        "test_something": {
            "name": "test_something",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_register_user": {
            "name": "test_register_user",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "test_client": [
                    "flask.testing.FlaskClient"
                ]
            }
        }
    },
    "sustainerds-master/sustainerds/api/entities/user/__init__.py": {
        "include_routes": {
            "name": "include_routes",
            "location": 5,
            "return": [
                "List[sustainerds.api.core.route.SustainerdsRoute]"
            ],
            "arguments": {
                "app": []
            }
        }
    },
    "sustainerds-master/_alembic/env.py": {
        "run_migrations_offline": {
            "name": "run_migrations_offline",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_migrations_online": {
            "name": "run_migrations_online",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sustainerds-master/_alembic/versions/df58068a9eea_initial.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
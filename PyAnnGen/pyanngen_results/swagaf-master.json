{
    "swagaf-master/pytorch_misc.py": {
        "optimistic_restore": {
            "name": "optimistic_restore",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "network": [],
                "state_dict": []
            }
        },
        "pairwise": {
            "name": "pairwise",
            "location": 37,
            "return": [
                "Iterator[nothing]"
            ],
            "arguments": {
                "iterable": []
            }
        },
        "get_ranking": {
            "name": "get_ranking",
            "location": 44,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "predictions": [],
                "labels": [],
                "num_guesses": []
            }
        },
        "cache": {
            "name": "cache",
            "location": 65,
            "return": [
                "Callable"
            ],
            "arguments": {
                "f": []
            }
        },
        "to_variable": {
            "name": "to_variable",
            "location": 95,
            "return": [
                "Callable"
            ],
            "arguments": {
                "f": []
            }
        },
        "arange": {
            "name": "arange",
            "location": 111,
            "return": [],
            "arguments": {
                "base_tensor": [],
                "n": []
            }
        },
        "to_onehot": {
            "name": "to_onehot",
            "location": 118,
            "return": [],
            "arguments": {
                "vec": [],
                "num_classes": [],
                "on_fill": [],
                "off_fill": []
            }
        },
        "save_net": {
            "name": "save_net",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "fname": [],
                "net": []
            }
        },
        "load_net": {
            "name": "load_net",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "fname": [],
                "net": []
            }
        },
        "batch_index_iterator": {
            "name": "batch_index_iterator",
            "location": 156,
            "return": [
                "Generator[(Tuple[(int, Any)], Any, None)]"
            ],
            "arguments": {
                "len_l": [],
                "batch_size": [],
                "skip_end": []
            }
        },
        "batch_map": {
            "name": "batch_map",
            "location": 174,
            "return": [],
            "arguments": {
                "f": [],
                "a": [],
                "batch_size": []
            }
        },
        "const_row": {
            "name": "const_row",
            "location": 191,
            "return": [],
            "arguments": {
                "fill": [],
                "l": [],
                "volatile": []
            }
        },
        "print_para": {
            "name": "print_para",
            "location": 198,
            "return": [
                "str"
            ],
            "arguments": {
                "model": []
            }
        },
        "accuracy": {
            "name": "accuracy",
            "location": 219,
            "return": [
                "list"
            ],
            "arguments": {
                "output": [],
                "target": [],
                "topk": []
            }
        },
        "nonintersecting_2d_inds": {
            "name": "nonintersecting_2d_inds",
            "location": 235,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "intersect_2d": {
            "name": "intersect_2d",
            "location": 246,
            "return": [],
            "arguments": {
                "x1": [],
                "x2": []
            }
        },
        "np_to_variable": {
            "name": "np_to_variable",
            "location": 263,
            "return": [],
            "arguments": {
                "x": [],
                "is_cuda": [],
                "dtype": []
            }
        },
        "gather_nd": {
            "name": "gather_nd",
            "location": 270,
            "return": [],
            "arguments": {
                "x": [],
                "index": []
            }
        },
        "enumerate_by_image": {
            "name": "enumerate_by_image",
            "location": 293,
            "return": [
                "Generator[(Tuple[(int, int, int)], Any, None)]"
            ],
            "arguments": {
                "im_inds": []
            }
        },
        "diagonal_inds": {
            "name": "diagonal_inds",
            "location": 317,
            "return": [],
            "arguments": {
                "tensor": []
            }
        },
        "enumerate_imsize": {
            "name": "enumerate_imsize",
            "location": 331,
            "return": [
                "Generator[(Tuple[(int, int, int, Any, Any, Any, int)], Any, None)]"
            ],
            "arguments": {
                "im_sizes": []
            }
        },
        "argsort_desc": {
            "name": "argsort_desc",
            "location": 341,
            "return": [],
            "arguments": {
                "scores": []
            }
        },
        "unravel_index": {
            "name": "unravel_index",
            "location": 351,
            "return": [],
            "arguments": {
                "index": [],
                "dims": []
            }
        },
        "de_chunkize": {
            "name": "de_chunkize",
            "location": 360,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "tensor": [],
                "chunks": []
            }
        },
        "random_choose": {
            "name": "random_choose",
            "location": 367,
            "return": [],
            "arguments": {
                "tensor": [],
                "num": []
            }
        },
        "transpose_packed_sequence_inds": {
            "name": "transpose_packed_sequence_inds",
            "location": 385,
            "return": [
                "Tuple[(Any, List[int])]"
            ],
            "arguments": {
                "lengths": []
            }
        },
        "right_shift_packed_sequence_inds": {
            "name": "right_shift_packed_sequence_inds",
            "location": 407,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "lengths": []
            }
        },
        "clip_grad_norm": {
            "name": "clip_grad_norm",
            "location": 437,
            "return": [],
            "arguments": {
                "named_parameters": [],
                "max_norm": [],
                "clip": [],
                "verbose": []
            }
        },
        "time_batch": {
            "name": "time_batch",
            "location": 478,
            "return": [
                "Generator[(Tuple[(float, Any)], Any, None)]"
            ],
            "arguments": {
                "gen": [],
                "reset_every": []
            }
        },
        "update_lr": {
            "name": "update_lr",
            "location": 494,
            "return": [
                "None"
            ],
            "arguments": {
                "optimizer": [],
                "lr": []
            }
        },
        "all_upper_triangular_pairs": {
            "name": "all_upper_triangular_pairs",
            "location": 499,
            "return": [
                "Generator[(Tuple[(nothing, Any)], Any, None)]"
            ],
            "arguments": {
                "gen": []
            }
        },
        "pad_last_dim": {
            "name": "pad_last_dim",
            "location": 507,
            "return": [],
            "arguments": {
                "tensor": [],
                "new_size": []
            }
        },
        "cache.cache_wrapper": {
            "name": "cache_wrapper",
            "location": 70,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "Flattener.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Flattener.forward": {
            "name": "forward",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "to_variable.variable_wrapper": {
            "name": "variable_wrapper",
            "location": 102,
            "return": [],
            "arguments": {}
        }
    },
    "swagaf-master/create_swag/__init__.py": {},
    "swagaf-master/create_swag/generate_candidates/classifiers.py": {},
    "swagaf-master/create_swag/generate_candidates/questions2mturk.py": {
        "_detokenize": {
            "name": "_detokenize",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "sent": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "swagaf-master/create_swag/generate_candidates/rebalance_dataset_ensemble.py": {
        "_iter": {
            "name": "_iter",
            "location": 199,
            "return": [],
            "arguments": {}
        },
        "AssignmentsDataLoader.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "instances": [],
                "inds": [],
                "train": [],
                "recompute_assignments": []
            }
        },
        "AssignmentsDataLoader.collate": {
            "name": "collate",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "items_l": []
            }
        },
        "AssignmentsDataLoader.__len__": {
            "name": "__len__",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AssignmentsDataLoader.__getitem__": {
            "name": "__getitem__",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "AssignmentsDataLoader.splits": {
            "name": "splits",
            "location": 149,
            "return": [],
            "arguments": {
                "cls": [],
                "assignments": []
            }
        },
        "AssignmentsDataLoader.splits._load_from_examples": {
            "name": "_load_from_examples",
            "location": 161,
            "return": [],
            "arguments": {
                "example_list": [],
                "offset": []
            }
        }
    },
    "swagaf-master/create_swag/generate_candidates/rebalance_dataset_mlp.py": {},
    "swagaf-master/create_swag/generate_candidates/sample_candidates.py": {
        "find_VP": {
            "name": "find_VP",
            "location": 63,
            "return": [
                "list",
                "Union[int, float]"
            ],
            "arguments": {
                "tree": [
                    "List[int]",
                    "str",
                    "int"
                ]
            }
        },
        "split_on_final_vp": {
            "name": "split_on_final_vp",
            "location": 103,
            "return": [
                "Optional[str]",
                "server.models.User",
                "server.models.Bike",
                "Optional[Dict]",
                "bool"
            ],
            "arguments": {
                "sentence": [
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "find_VP._recurse_on_children": {
            "name": "_recurse_on_children",
            "location": 71,
            "return": [
                "deoplete.util.UserContext",
                "bool",
                "pandas.DataFrame",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {}
        }
    },
    "swagaf-master/create_swag/generate_candidates/__init__.py": {},
    "swagaf-master/create_swag/lm/config.py": {},
    "swagaf-master/create_swag/lm/load_data.py": {
        "load_lm_data": {
            "name": "load_lm_data",
            "location": 24,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "fold": [
                    "List[Tuple[str, str]]",
                    "None",
                    "list",
                    "list[tuple[typing.Union[str,str]]]",
                    "List[Dict[str, Any]]",
                    "list[]",
                    "List[str]",
                    "list[dict[str, typing.Any]]",
                    "List[List[str]]",
                    "list[str]",
                    "list[list[str]]"
                ],
                "mode": [
                    "typing.Text",
                    "List[Tuple[str, str]]",
                    "list",
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "List[List[str]]"
                ]
            }
        },
        "load_lm_data._to_instances": {
            "name": "_to_instances",
            "location": 76,
            "return": [
                "list[tuple[Instance]]",
                "float",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "int",
                    "list",
                    "memoryview",
                    "bool"
                ]
            }
        },
        "RawPassages.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fold": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "mode": [
                    "str",
                    "int"
                ]
            }
        },
        "RawPassages.collate": {
            "name": "collate",
            "location": 113,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "instances_l": [
                    "torch.Tensor",
                    "float",
                    "gluonts.model.common.Tensor",
                    "Union[gluonts.model.common.Tensor, numpy.array]"
                ]
            }
        },
        "RawPassages.__len__": {
            "name": "__len__",
            "location": 124,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RawPassages.__getitem__": {
            "name": "__getitem__",
            "location": 127,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "RawPassages.splits": {
            "name": "splits",
            "location": 138,
            "return": [
                "Tuple[(RawPassages, RawPassages)]"
            ],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "bool",
                    "dict",
                    "str",
                    "typing.Type",
                    "nevergrad.common.Union[str, pathlib.Path]",
                    "raiden.utils.Dict[str, raiden.utils.Any]",
                    "Type",
                    "type"
                ],
                "fold": [
                    "dict[, ]",
                    "bool",
                    "dict",
                    "str",
                    "typing.Type",
                    "nevergrad.common.Union[str, pathlib.Path]",
                    "raiden.utils.Dict[str, raiden.utils.Any]",
                    "Type",
                    "type"
                ]
            }
        }
    },
    "swagaf-master/create_swag/lm/pretrain_lm.py": {},
    "swagaf-master/create_swag/lm/simple_bilm.py": {},
    "swagaf-master/create_swag/lm/train_lm.py": {},
    "swagaf-master/create_swag/lm/__init__.py": {},
    "swagaf-master/raw_data/events.py": {
        "remove_allcaps": {
            "name": "remove_allcaps",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "sent": []
            }
        },
        "load_rocstories": {
            "name": "load_rocstories",
            "location": 47,
            "return": [
                "list[dict[typing.Text, list[]]]"
            ],
            "arguments": {
                "split": []
            }
        },
        "_to_time": {
            "name": "_to_time",
            "location": 112,
            "return": [],
            "arguments": {
                "pandas_col": []
            }
        },
        "_lsmdc_to_list": {
            "name": "_lsmdc_to_list",
            "location": 117,
            "return": [
                "list[dict[typing.Text, list[]]]"
            ],
            "arguments": {
                "lsmdc": [],
                "lsmdc_window": [
                    "int"
                ]
            }
        },
        "load_mpii": {
            "name": "load_mpii",
            "location": 144,
            "return": [],
            "arguments": {
                "split": []
            }
        },
        "load_mpii_depersonized": {
            "name": "load_mpii_depersonized",
            "location": 180,
            "return": [],
            "arguments": {
                "split": []
            }
        },
        "load_visual_madlibs": {
            "name": "load_visual_madlibs",
            "location": 249,
            "return": [],
            "arguments": {
                "split": []
            }
        },
        "load_vist": {
            "name": "load_vist",
            "location": 343,
            "return": [
                "list[dict[typing.Text, list[]]]"
            ],
            "arguments": {
                "split": []
            }
        },
        "load_lsmdc": {
            "name": "load_lsmdc",
            "location": 359,
            "return": [],
            "arguments": {
                "split": []
            }
        },
        "load_didemo": {
            "name": "load_didemo",
            "location": 421,
            "return": [
                "list[dict[typing.Text, list[]]]"
            ],
            "arguments": {
                "split": []
            }
        },
        "load_anet": {
            "name": "load_anet",
            "location": 445,
            "return": [
                "list[]"
            ],
            "arguments": {
                "split": []
            }
        },
        "load_ava": {
            "name": "load_ava",
            "location": 456,
            "return": [
                "None"
            ],
            "arguments": {
                "split": []
            }
        },
        "n2w_1k": {
            "name": "n2w_1k",
            "location": 473,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "x": [],
                "use_ordinal": [
                    "bool"
                ]
            }
        },
        "_postprocess": {
            "name": "_postprocess",
            "location": 478,
            "return": [],
            "arguments": {
                "sentence": []
            }
        },
        "load_everything": {
            "name": "load_everything",
            "location": 507,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {}
        },
        "remove_allcaps._sanitize": {
            "name": "_sanitize",
            "location": 32,
            "return": [],
            "arguments": {
                "word": [],
                "is_first": []
            }
        },
        "load_mpii._pop_tags": {
            "name": "_pop_tags",
            "location": 166,
            "return": [],
            "arguments": {
                "sent": []
            }
        },
        "load_visual_madlibs._sentence_contains_verb": {
            "name": "_sentence_contains_verb",
            "location": 260,
            "return": [
                "bool"
            ],
            "arguments": {
                "sent": []
            }
        },
        "load_visual_madlibs.order_sents": {
            "name": "order_sents",
            "location": 267,
            "return": [
                "list[]"
            ],
            "arguments": {
                "sent_list": []
            }
        },
        "load_lsmdc._fix_sent": {
            "name": "_fix_sent",
            "location": 380,
            "return": [],
            "arguments": {
                "sent": []
            }
        },
        "load_lsmdc.check_if_sent_is_grammatical": {
            "name": "check_if_sent_is_grammatical",
            "location": 389,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "sent": []
            }
        },
        "load_everything._stamp": {
            "name": "_stamp",
            "location": 508,
            "return": [],
            "arguments": {
                "l": [],
                "stamp_name": []
            }
        },
        "load_mpii_depersonized._replace": {
            "name": "_replace",
            "location": 207,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "name": [],
                "is_cap": [
                    "bool"
                ]
            }
        },
        "load_mpii_depersonized._pop_tags": {
            "name": "_pop_tags",
            "location": 214,
            "return": [],
            "arguments": {
                "sent": []
            }
        }
    },
    "swagaf-master/swag_baselines/__init__.py": {},
    "swagaf-master/swag_baselines/decomposable_attention/dataset_reader.py": {
        "SwagReader.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tokenizer": [
                    "int",
                    "None",
                    "str",
                    "bytes",
                    "numpy.ndarray",
                    "Sequence[int]",
                    "typing.Sequence[int]"
                ],
                "token_indexers": [
                    "Dict[str, allennlp.data.token_indexers.TokenIndexer]",
                    "None",
                    "bool",
                    "dict[str, allennlp.data.token_indexers.TokenIndexer]",
                    "List[str]",
                    "Callable",
                    "list[str]",
                    "Type[MutableMapping[Any, Any]]",
                    "typing.Callable[, ]",
                    "typing.Type"
                ],
                "use_only_gold_examples": [
                    "bool",
                    "int"
                ]
            }
        },
        "SwagReader._read": {
            "name": "_read",
            "location": 50,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str",
                    "allennlp.data.vocabulary.Vocabulary",
                    "bool",
                    "int"
                ]
            }
        },
        "SwagReader.text_to_instance": {
            "name": "text_to_instance",
            "location": 70,
            "return": [
                "Instance",
                "List[str]",
                "List[Tuple[str, str]]",
                "str",
                "Set[str]",
                "List[Tuple[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "premise": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "Tuple[str, str, str, str, str, str, str]",
                    "tuple[typing.Union[str,str,str,str,str,str,str]]",
                    "list",
                    "list[]"
                ],
                "hypotheses": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "Tuple[str, str, str, str, str, str, str]",
                    "tuple[typing.Union[str,str,str,str,str,str,str]]",
                    "list",
                    "list[]"
                ],
                "label": [
                    "int",
                    "str",
                    "None",
                    "Set[str]",
                    "set[str]"
                ]
            }
        },
        "SwagReader.from_params": {
            "name": "from_params",
            "location": 89,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "bytes",
                    "Type['Model']",
                    "typing.Type",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "params": [
                    "dict[str, typing.Any]",
                    "allennlp.common.params.Params",
                    "allennlp.common.Params",
                    "Dict[str, Any]",
                    "Union[object, type]"
                ]
            }
        }
    },
    "swagaf-master/swag_baselines/decomposable_attention/decomposable_attention_swag.py": {
        "DecomposableAttention.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab": [
                    "str",
                    "bool",
                    "float",
                    "None"
                ],
                "text_field_embedder": [],
                "attend_feedforward": [],
                "similarity_function": [
                    "bool",
                    "str",
                    "float"
                ],
                "compare_feedforward": [
                    "bool",
                    "str",
                    "float"
                ],
                "aggregate_feedforward": [
                    "bool",
                    "str",
                    "float"
                ],
                "premise_encoder": [
                    "None",
                    "bool",
                    "str",
                    "float"
                ],
                "hypothesis_encoder": [
                    "None",
                    "bool",
                    "str",
                    "float"
                ],
                "initializer": [
                    "InitializerApplicator"
                ],
                "regularizer": [
                    "None",
                    "str",
                    "bool",
                    "float"
                ],
                "preload_path": [
                    "None",
                    "bool",
                    "str"
                ]
            }
        },
        "DecomposableAttention.forward": {
            "name": "forward",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "premise": [
                    "bool",
                    "float",
                    "str",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "hypothesis0": [
                    "float",
                    "str",
                    "Exception",
                    "bool"
                ],
                "hypothesis1": [
                    "float",
                    "str",
                    "Exception",
                    "bool"
                ],
                "hypothesis2": [
                    "float",
                    "str",
                    "Exception",
                    "bool"
                ],
                "hypothesis3": [
                    "float",
                    "str",
                    "Exception",
                    "bool"
                ],
                "label": [
                    "None"
                ]
            }
        },
        "DecomposableAttention.get_metrics": {
            "name": "get_metrics",
            "location": 223,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": [],
                "reset": [
                    "bool"
                ]
            }
        },
        "DecomposableAttention.from_params": {
            "name": "from_params",
            "location": 229,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[str, typing.Union[int,bool]]"
                ],
                "vocab": [
                    "bool"
                ],
                "params": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "swagaf-master/swag_baselines/decomposable_attention/__init__.py": {},
    "swagaf-master/swag_baselines/esim/dataset_reader.py": {
        "SwagReader.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tokenizer": [
                    "int",
                    "None",
                    "str",
                    "bytes",
                    "numpy.ndarray",
                    "Sequence[int]",
                    "typing.Sequence[int]"
                ],
                "token_indexers": [
                    "Dict[str, allennlp.data.token_indexers.TokenIndexer]",
                    "None",
                    "bool",
                    "dict[str, allennlp.data.token_indexers.TokenIndexer]",
                    "List[str]",
                    "Callable",
                    "list[str]",
                    "Type[MutableMapping[Any, Any]]",
                    "typing.Callable[, ]",
                    "typing.Type"
                ],
                "use_only_gold_examples": [
                    "bool",
                    "int"
                ]
            }
        },
        "SwagReader._read": {
            "name": "_read",
            "location": 50,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str",
                    "allennlp.data.vocabulary.Vocabulary",
                    "bool",
                    "int"
                ]
            }
        },
        "SwagReader.text_to_instance": {
            "name": "text_to_instance",
            "location": 70,
            "return": [
                "Instance",
                "List[str]",
                "List[Tuple[str, str]]",
                "str",
                "Set[str]",
                "List[Tuple[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "premise": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "Tuple[str, str, str, str, str, str, str]",
                    "tuple[typing.Union[str,str,str,str,str,str,str]]",
                    "list",
                    "list[]"
                ],
                "hypotheses": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "Tuple[str, str, str, str, str, str, str]",
                    "tuple[typing.Union[str,str,str,str,str,str,str]]",
                    "list",
                    "list[]"
                ],
                "label": [
                    "int",
                    "str",
                    "None",
                    "Set[str]",
                    "set[str]"
                ]
            }
        },
        "SwagReader.from_params": {
            "name": "from_params",
            "location": 89,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "bytes",
                    "Type['Model']",
                    "typing.Type",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "params": [
                    "dict[str, typing.Any]",
                    "allennlp.common.params.Params",
                    "allennlp.common.Params",
                    "Dict[str, Any]",
                    "Union[object, type]"
                ]
            }
        }
    },
    "swagaf-master/swag_baselines/esim/esim_swag.py": {
        "VariationalDropout.forward": {
            "name": "forward",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "int",
                    "str"
                ]
            }
        },
        "ESIM.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab": [],
                "text_field_embedder": [],
                "encoder": [],
                "similarity_function": [
                    "int",
                    "str",
                    "float",
                    "tuple[typing.Union[float,float]]"
                ],
                "projection_feedforward": [],
                "inference_encoder": [],
                "output_feedforward": [
                    "int",
                    "str",
                    "None"
                ],
                "output_logit": [
                    "int",
                    "str",
                    "None"
                ],
                "initializer": [
                    "InitializerApplicator"
                ],
                "dropout": [
                    "float"
                ],
                "regularizer": [
                    "None",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "ESIM.forward": {
            "name": "forward",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "premise": [
                    "bool",
                    "float",
                    "str",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "hypothesis0": [
                    "float",
                    "str",
                    "Exception",
                    "bool"
                ],
                "hypothesis1": [
                    "float",
                    "str",
                    "Exception",
                    "bool"
                ],
                "hypothesis2": [
                    "float",
                    "str",
                    "Exception",
                    "bool"
                ],
                "hypothesis3": [
                    "float",
                    "str",
                    "Exception",
                    "bool"
                ],
                "label": [
                    "None"
                ]
            }
        },
        "ESIM.get_metrics": {
            "name": "get_metrics",
            "location": 264,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": [],
                "reset": [
                    "bool"
                ]
            }
        },
        "ESIM.from_params": {
            "name": "from_params",
            "location": 270,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[str, typing.Union[int,bool]]"
                ],
                "vocab": [
                    "bool"
                ],
                "params": [
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "swagaf-master/swag_baselines/esim/predict.py": {},
    "swagaf-master/swag_baselines/esim/__init__.py": {},
    "swagaf-master/swag_baselines/fasttext/compute_performance.py": {},
    "swagaf-master/swag_baselines/fasttext/prep_data.py": {
        "_tokenize": {
            "name": "_tokenize",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "sent": [
                    "str",
                    "typing.Iterable[typing.Any]",
                    "int",
                    "[[]]",
                    "Iterable[Any]",
                    "Iterable",
                    "List[Tuple[int, int, str]]",
                    "List[str]"
                ]
            }
        }
    },
    "swagaf-master/swag_baselines/fasttext/__init__.py": {},
    "swagaf-master/swag_baselines/unarylstm/dataset_reader.py": {
        "SwagReader.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tokenizer": [
                    "int",
                    "None",
                    "str",
                    "bytes",
                    "numpy.ndarray",
                    "Sequence[int]",
                    "typing.Sequence[int]"
                ],
                "token_indexers": [
                    "Dict[str, allennlp.data.token_indexers.TokenIndexer]",
                    "None",
                    "bool",
                    "dict[str, allennlp.data.token_indexers.TokenIndexer]",
                    "List[str]",
                    "Callable",
                    "list[str]",
                    "Type[MutableMapping[Any, Any]]",
                    "typing.Callable[, ]",
                    "typing.Type"
                ],
                "use_only_gold_examples": [
                    "bool",
                    "int"
                ],
                "only_end": [
                    "bool",
                    "int",
                    "Dict[str, int]",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "SwagReader._read": {
            "name": "_read",
            "location": 51,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str",
                    "allennlp.data.vocabulary.Vocabulary",
                    "bool",
                    "int"
                ]
            }
        },
        "SwagReader.text_to_instance": {
            "name": "text_to_instance",
            "location": 71,
            "return": [
                "Instance",
                "List[str]",
                "List[Tuple[str, str]]",
                "str",
                "Set[str]",
                "List[Tuple[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "premise": [
                    "str",
                    "List[List[str]]",
                    "list[list[str]]",
                    "List[str]",
                    "list[str]"
                ],
                "hypotheses": [
                    "List[str]",
                    "str",
                    "list[str]",
                    "Tuple[str, str, str, str, str, str, str]",
                    "tuple[typing.Union[str,str,str,str,str,str,str]]",
                    "list",
                    "list[]"
                ],
                "label": [
                    "int",
                    "str",
                    "None",
                    "Set[str]",
                    "set[str]"
                ]
            }
        },
        "SwagReader.from_params": {
            "name": "from_params",
            "location": 90,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Type['Model']",
                    "typing.Type"
                ],
                "params": [
                    "allennlp.common.params.Params",
                    "allennlp.common.Params",
                    "BaseException"
                ]
            }
        }
    },
    "swagaf-master/swag_baselines/unarylstm/lstm_swag.py": {
        "LstmSwag.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab": [
                    "str",
                    "bool",
                    "Callable[..., Awaitable]",
                    "typing.Callable[..., collections.abc.Awaitable[]]",
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "Type[Any]",
                    "typing.Type",
                    "Optional[Type[Any]]",
                    "None"
                ],
                "text_field_embedder": [
                    "allennlp.modules.Seq2SeqEncoder",
                    "allennlp.modules.FeedForward",
                    "bool"
                ],
                "encoder": [
                    "int",
                    "bool"
                ],
                "embedding_dropout": [
                    "float",
                    "bool",
                    "int",
                    "tuple",
                    "Optional[float]"
                ],
                "initializer": [
                    "InitializerApplicator",
                    "bool",
                    "int",
                    "tuple",
                    "Optional[float]"
                ],
                "regularizer": [
                    "str",
                    "None",
                    "bool",
                    "Callable[..., Awaitable]",
                    "typing.Callable[..., collections.abc.Awaitable[]]",
                    "Sequence[str]",
                    "Type[Any]",
                    "typing.Sequence[str]",
                    "Optional[Type[Any]]",
                    "typing.Type"
                ]
            }
        },
        "LstmSwag.forward": {
            "name": "forward",
            "location": 76,
            "return": [
                "dict[typing.Text, typing.Union[str,int,tuple[typing.Union[str,str]],dict[str, int],typing.Type,dict[int, typing.Any],dict[, ],dict[str, str],list[],list[tuple[typing.Union[typing.Any,typing.Any]]]]]",
                "Dict[str, Any]",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "hypothesis0": [
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "hypothesis1": [
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "hypothesis2": [
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "hypothesis3": [
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "label": [
                    "None",
                    "jumeaux.models.JudgementAddOnReference",
                    "owlmixin.owlTDict[jumeaux.models.DiffKeys]",
                    "bool",
                    "Optional[bool]",
                    "zerver.models.Stream",
                    "allennlp.modules.similarity_functions.SimilarityFunction",
                    "Optional[str]"
                ]
            }
        },
        "LstmSwag.get_metrics": {
            "name": "get_metrics",
            "location": 125,
            "return": [
                "dict[typing.Text, ]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "reset": [
                    "bool",
                    "str",
                    "models.Telegram_Chat",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "LstmSwag.from_params": {
            "name": "from_params",
            "location": 131,
            "return": [
                "bool",
                "str",
                "Match[str]",
                "dict",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Union[int, bool]]",
                    "dict[str, typing.Union[int,bool]]"
                ],
                "vocab": [
                    "bool",
                    "salon.models.Stylist"
                ],
                "params": [
                    "dict[str, typing.Any]",
                    "allennlp.common.Params",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "swagaf-master/swag_baselines/unarylstm/predict.py": {},
    "swagaf-master/swag_baselines/unarylstm/__init__.py": {}
}
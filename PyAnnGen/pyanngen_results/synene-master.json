{
    "synene-master/manage.py": {},
    "synene-master/run.py": {
        "TstClass.get_or_create": {
            "name": "get_or_create",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None",
                    "Type[T]",
                    "Type"
                ]
            }
        }
    },
    "synene-master/config/urls.py": {},
    "synene-master/config/wsgi.py": {},
    "synene-master/config/__init__.py": {},
    "synene-master/config/settings/base.py": {},
    "synene-master/config/settings/local.py": {},
    "synene-master/config/settings/local_example.py": {},
    "synene-master/config/settings/production.py": {},
    "synene-master/config/settings/test.py": {},
    "synene-master/config/settings/test_example.py": {},
    "synene-master/config/settings/__init__.py": {},
    "synene-master/docs/conf.py": {},
    "synene-master/docs/__init__.py": {},
    "synene-master/project/conftest.py": {
        "media_storage": {
            "name": "media_storage",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "settings": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None"
                ],
                "tmpdir": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None"
                ]
            }
        },
        "user": {
            "name": "user",
            "location": 14,
            "return": [
                "UserFactory",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "request_factory": {
            "name": "request_factory",
            "location": 19,
            "return": [
                "RequestFactory",
                "int",
                "List[Dict[str,Any]]",
                "bool",
                "List"
            ],
            "arguments": {}
        }
    },
    "synene-master/project/__init__.py": {},
    "synene-master/project/betting/admin.py": {},
    "synene-master/project/betting/apps.py": {},
    "synene-master/project/betting/managers.py": {},
    "synene-master/project/betting/mixins.py": {
        "WDLParamClean.clean_param": {
            "name": "clean_param",
            "location": 7,
            "return": [
                "str",
                "int",
                "Callable",
                "Dict[int,Union[int,None]]",
                "Tuple[Union[str,str,str]]"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "param": [
                    "str",
                    "Dict",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "synene-master/project/betting/models.py": {
        "ValueType.__str__": {
            "name": "__str__",
            "location": 31,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BetType.__str__": {
            "name": "__str__",
            "location": 46,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OddBookieConfig.__str__": {
            "name": "__str__",
            "location": 69,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Odd.__str__": {
            "name": "__str__",
            "location": 138,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Odd.add": {
            "name": "add",
            "location": 142,
            "return": [
                "int",
                "Type",
                "Optional[str]",
                "str",
                "Dict"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "zerver.models.CustomProfileField",
                    "Any",
                    "None",
                    "Optional[Any]",
                    "Type",
                    "Type[Any]",
                    "audiopyle.lib.models.file_meta.CompressedAudioFileMeta"
                ],
                "match": [
                    "str",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "bool",
                    "None"
                ],
                "bet_type_slug": [
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[Sequence[Any]]",
                    "Sequence[Any]",
                    "None"
                ],
                "value_type_slug": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "load_source": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None"
                ],
                "bookie": [
                    "bool",
                    "str",
                    "None"
                ],
                "period": [
                    "int",
                    "str",
                    "zerver.models.CustomProfileField",
                    "Tuple[type]",
                    "Dict"
                ],
                "yes": [
                    "Text",
                    "str",
                    "zerver.models.CustomProfileField",
                    "Tuple[type]",
                    "Dict",
                    "int"
                ],
                "team": [
                    "Text",
                    "str",
                    "zerver.models.CustomProfileField",
                    "Tuple[type]",
                    "Dict",
                    "int"
                ],
                "param": [
                    "Text",
                    "str",
                    "zerver.models.CustomProfileField",
                    "Tuple[type]",
                    "Dict",
                    "int"
                ],
                "odd_value": [
                    "bool",
                    "None",
                    "float",
                    "Optional[int]",
                    "int"
                ],
                "odd_bookie_config": [
                    "str",
                    "Dict",
                    "None",
                    "bool"
                ]
            }
        },
        "Odd.own_bet_type": {
            "name": "own_bet_type",
            "location": 219,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Odd.clean_period": {
            "name": "clean_period",
            "location": 223,
            "return": [
                "str",
                "Callable",
                "int",
                "models.Question"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "period": [
                    "str",
                    "Callable"
                ]
            }
        },
        "Odd.clean_yes": {
            "name": "clean_yes",
            "location": 229,
            "return": [
                "bytes",
                "int",
                "Text",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "yes": [
                    "bytes",
                    "IO",
                    "int",
                    "Type"
                ]
            }
        },
        "Odd.clean_team": {
            "name": "clean_team",
            "location": 238,
            "return": [
                "bytes",
                "int",
                "Text",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "team": [
                    "bytes",
                    "IO",
                    "int",
                    "Type"
                ]
            }
        },
        "Odd.clean_param": {
            "name": "clean_param",
            "location": 247,
            "return": [
                "memoryview",
                "int",
                "str",
                "bool",
                "Callable",
                "models.Question"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "param": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "Odd.clean_value": {
            "name": "clean_value",
            "location": 251,
            "return": [
                "str",
                "int",
                "List[Union[Any,Any]]",
                "Dict[str,Any]",
                "Pattern",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[Union[Any,Any]]",
                    "bool",
                    "Pattern[str]",
                    "Pattern"
                ],
                "value": [
                    "str",
                    "List[Union[Any,Any]]",
                    "bool",
                    "Pattern[str]",
                    "Pattern"
                ]
            }
        },
        "Odd.save": {
            "name": "save",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OddWDL.own_bet_type": {
            "name": "own_bet_type",
            "location": 267,
            "return": [
                "zam_repondeur.models.division.SubDiv"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "synene-master/project/betting/utils.py": {},
    "synene-master/project/betting/views.py": {},
    "synene-master/project/betting/__init__.py": {},
    "synene-master/project/betting/migrations/0001_initial.py": {
        "Migration.insertValueTypes": {
            "name": "insertValueTypes",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [
                    "Migration"
                ],
                "schema_editor": [
                    "Iterable[Any]",
                    "Exception",
                    "List[alerta.models.enums.Scope]"
                ]
            }
        },
        "Migration.insertBetTypes": {
            "name": "insertBetTypes",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [
                    "Migration"
                ],
                "schema_editor": [
                    "str",
                    "List[object]",
                    "django.db.backends.postgresql_psycopg2.schema.DatabaseSchemaEditor",
                    "models.Question"
                ]
            }
        }
    },
    "synene-master/project/betting/migrations/__init__.py": {},
    "synene-master/project/betting/tests/test_models.py": {
        "prepare_data": {
            "name": "prepare_data",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": []
            }
        },
        "OddModelTest.setUp": {
            "name": "setUp",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OddModelTest.test_country_get_or_create": {
            "name": "test_country_get_or_create",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "synene-master/project/betting/tests/__init__.py": {},
    "synene-master/project/contrib/__init__.py": {},
    "synene-master/project/contrib/sites/__init__.py": {},
    "synene-master/project/contrib/sites/migrations/0001_initial.py": {},
    "synene-master/project/contrib/sites/migrations/0002_alter_domain_unique.py": {},
    "synene-master/project/contrib/sites/migrations/0003_set_site_domain_and_name.py": {
        "update_site_forward": {
            "name": "update_site_forward",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [
                    "django.db.migrations.state.StateApps",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "schema_editor": [
                    "int",
                    "str",
                    "None",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "update_site_backward": {
            "name": "update_site_backward",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [
                    "django.db.migrations.state.StateApps",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "schema_editor": [
                    "int",
                    "str",
                    "None",
                    "Optional[bool]",
                    "bool"
                ]
            }
        }
    },
    "synene-master/project/contrib/sites/migrations/__init__.py": {},
    "synene-master/project/core/admin.py": {},
    "synene-master/project/core/apps.py": {},
    "synene-master/project/core/factories.py": {
        "get_sport": {
            "name": "get_sport",
            "location": 11,
            "return": [
                "str",
                "bool",
                "Dict",
                "List[str]",
                "Dict[str,str]",
                "None"
            ],
            "arguments": {
                "slug": [
                    "str",
                    "django.template.RequestContext"
                ]
            }
        },
        "get_country": {
            "name": "get_country",
            "location": 18,
            "return": [
                "str",
                "bool",
                "Dict",
                "List[str]",
                "Dict[str,str]",
                "None"
            ],
            "arguments": {
                "slug": [
                    "str",
                    "django.template.RequestContext"
                ]
            }
        },
        "get_league": {
            "name": "get_league",
            "location": 25,
            "return": [
                "str",
                "bool",
                "Dict[str,dict[str,int]]",
                "int",
                "None",
                "List",
                "Counter"
            ],
            "arguments": {
                "sport": [
                    "str",
                    "django.template.RequestContext"
                ],
                "country": [
                    "str",
                    "django.template.RequestContext"
                ],
                "slug": [
                    "str",
                    "django.template.RequestContext"
                ]
            }
        },
        "get_team": {
            "name": "get_team",
            "location": 32,
            "return": [
                "str",
                "bool",
                "Dict[str,dict[str,int]]",
                "int",
                "None",
                "List",
                "Counter"
            ],
            "arguments": {
                "sport": [
                    "str",
                    "django.template.RequestContext"
                ],
                "country": [
                    "str",
                    "django.template.RequestContext"
                ],
                "slug": [
                    "str",
                    "django.template.RequestContext"
                ]
            }
        }
    },
    "synene-master/project/core/models.py": {
        "SaveSlugCountryMixin.save": {
            "name": "save",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mergable.merge_related": {
            "name": "merge_related",
            "location": 26,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "dst": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Mergable.change_data": {
            "name": "change_data",
            "location": 29,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "Iterator[bytes]",
                    "List[int]",
                    "Iterator",
                    "str"
                ]
            }
        },
        "Mergable.merge_to": {
            "name": "merge_to",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dst": [
                    "click.core.Context",
                    "Optional[int]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Loadable.get_object_load_source_class": {
            "name": "get_object_load_source_class",
            "location": 64,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [
                    "Iterable[Any]",
                    "Type[object]",
                    "Type"
                ]
            }
        },
        "Loadable.create": {
            "name": "create",
            "location": 68,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "Type[T]",
                    "int",
                    "Dict[str,str]",
                    "Dict[str,bool]",
                    "Type[tuple]",
                    "str"
                ]
            }
        },
        "Loadable.get_object": {
            "name": "get_object",
            "location": 72,
            "return": [
                "str",
                "bool",
                "int",
                "Dict",
                "Type",
                "Dict[str,Union[Any,Any]]",
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str,Any]",
                    "int"
                ],
                "sport": [
                    "str",
                    "Dict[str,Any]",
                    "None",
                    "int"
                ],
                "country": [
                    "str",
                    "Dict[str,Any]",
                    "None",
                    "int"
                ],
                "slug": [
                    "str",
                    "Dict[str,Any]",
                    "None",
                    "int"
                ]
            }
        },
        "Loadable._create": {
            "name": "_create",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Loadable.get_or_create": {
            "name": "get_or_create",
            "location": 86,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [
                    "List[str]",
                    "str"
                ]
            }
        },
        "Loadable.confirm": {
            "name": "confirm",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "load_source": [
                    "str",
                    "Iterable[jgikbase.idmapping.core.object_id.NamespaceID]"
                ]
            }
        },
        "ObjectLoadSource.init_object": {
            "name": "init_object",
            "location": 198,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "real_object": [
                    "int",
                    "Dict[str,Any]",
                    "str",
                    "Union[str,int]",
                    "bool"
                ]
            }
        },
        "ObjectLoadSource.__str__": {
            "name": "__str__",
            "location": 201,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sport.__str__": {
            "name": "__str__",
            "location": 219,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoadSource.__str__": {
            "name": "__str__",
            "location": 254,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Country.get_object": {
            "name": "get_object",
            "location": 266,
            "return": [
                "str",
                "bool",
                "Dict[str,str]",
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str,Any]",
                    "int"
                ],
                "slug": [
                    "str",
                    "Dict[str,Any]",
                    "None",
                    "int"
                ]
            }
        },
        "Country.get_object_load_source_class": {
            "name": "get_object_load_source_class",
            "location": 274,
            "return": [
                "Type[CountryLoadSource]"
            ],
            "arguments": {
                "cls": [
                    "Iterable[Any]",
                    "Type[object]",
                    "Type"
                ]
            }
        },
        "Country.create": {
            "name": "create",
            "location": 278,
            "return": [
                "Country"
            ],
            "arguments": {
                "cls": [
                    "Type[_TCountry]"
                ]
            }
        },
        "Country.get_or_create": {
            "name": "get_or_create",
            "location": 293,
            "return": [
                "Tuple[float, float]",
                "str",
                "recidiviz.utils.regions.Region",
                "cmk.utils.type_defs.HostName",
                "cmk.utils.type_defs.Item",
                "cmk.utils.type_defs.CheckPluginNameStr"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Tuple[Type]",
                    "src.autoks.core.gp_model.GPModel"
                ],
                "name": [
                    "bool",
                    "str",
                    "Tuple[Type]",
                    "src.autoks.core.gp_model.GPModel"
                ],
                "load_source": [
                    "bool",
                    "str",
                    "Tuple[Type]",
                    "src.autoks.core.gp_model.GPModel"
                ]
            }
        },
        "Country.__str__": {
            "name": "__str__",
            "location": 298,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Country.merge_related": {
            "name": "merge_related",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dst": [
                    "str",
                    "int",
                    "Union[Callable,Coroutine]",
                    "Callable",
                    "collections.abc.Coroutine"
                ]
            }
        },
        "Country.change_data": {
            "name": "change_data",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "str"
                ]
            }
        },
        "CountryLoadSource.init_object": {
            "name": "init_object",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "real_object": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "TeamType.__str__": {
            "name": "__str__",
            "location": 340,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "League.__str__": {
            "name": "__str__",
            "location": 357,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "League.get_object_load_source_class": {
            "name": "get_object_load_source_class",
            "location": 361,
            "return": [
                "Type[LeagueLoadSource]"
            ],
            "arguments": {
                "cls": [
                    "Iterable[Any]",
                    "Type[object]",
                    "Type"
                ]
            }
        },
        "League.create": {
            "name": "create",
            "location": 365,
            "return": [
                "League"
            ],
            "arguments": {
                "cls": [
                    "Type[_TLeague]"
                ]
            }
        },
        "League.merge_related": {
            "name": "merge_related",
            "location": 379,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dst": [
                    "str",
                    "int"
                ]
            }
        },
        "League.change_data": {
            "name": "change_data",
            "location": 387,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "str",
                    "Dict",
                    "int"
                ]
            }
        },
        "League.change_country": {
            "name": "change_country",
            "location": 392,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "country_dst": [
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "None",
                    "int"
                ]
            }
        },
        "League.get_season": {
            "name": "get_season",
            "location": 404,
            "return": [
                "str",
                "int",
                "datetime.datetime",
                "Optional[str]",
                "Optional[datetime.tzinfo]",
                "bool",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": [],
                "match_date": [
                    "str",
                    "Callable",
                    "None",
                    "float",
                    "Optional[str]",
                    "Optional[datetime.date]"
                ]
            }
        },
        "League.get_or_create_season": {
            "name": "get_or_create_season",
            "location": 408,
            "return": [
                "datetime.datetime",
                "str",
                "bool",
                "raiden.utils.Address",
                "raiden.utils.BlockNumber"
            ],
            "arguments": {
                "self": [],
                "start_date": [
                    "str",
                    "None",
                    "datetime.date",
                    "Optional[datetime.date]",
                    "Optional[str]",
                    "Optional[datetime.datetime]"
                ],
                "end_date": [
                    "str",
                    "None",
                    "datetime.date",
                    "Optional[datetime.date]",
                    "Optional[str]",
                    "Optional[datetime.datetime]"
                ],
                "load_source": [
                    "str",
                    "None",
                    "datetime.date",
                    "Optional[datetime.date]",
                    "Optional[str]",
                    "Optional[datetime.datetime]"
                ],
                "name": [
                    "None",
                    "str",
                    "datetime.date",
                    "Optional[datetime.date]",
                    "Optional[str]",
                    "Optional[datetime.datetime]"
                ]
            }
        },
        "League.process_empty_season": {
            "name": "process_empty_season",
            "location": 412,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "load_source": [
                    "str",
                    "None",
                    "float",
                    "int",
                    "Optional[int]",
                    "Dict"
                ]
            }
        },
        "LeagueLoadSource.init_object": {
            "name": "init_object",
            "location": 422,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "real_object": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Season.__str__": {
            "name": "__str__",
            "location": 442,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Season.get_season": {
            "name": "get_season",
            "location": 446,
            "return": [
                "str",
                "bool",
                "int",
                "Dict[str,Any]",
                "List",
                "Set[str]",
                "None"
            ],
            "arguments": {
                "league": [
                    "str",
                    "datetime.date",
                    "List[str]",
                    "int",
                    "Dict[datetime.date,dict[str,Any]]",
                    "Dict[datetime.date,Dict[str,Any]]"
                ],
                "match_date": [
                    "str",
                    "datetime.date",
                    "List[str]",
                    "int",
                    "Dict[datetime.date,dict[str,Any]]",
                    "Dict[datetime.date,Dict[str,Any]]"
                ]
            }
        },
        "Season.get_or_create": {
            "name": "get_or_create",
            "location": 454,
            "return": [
                "str",
                "None",
                "List[str]",
                "int",
                "Callable",
                "salon.models.Stylist"
            ],
            "arguments": {
                "league": [
                    "str",
                    "Optional[str]",
                    "None",
                    "int",
                    "Optional[datetime.date]",
                    "Callable",
                    "datetime.date",
                    "Optional[Callable]",
                    "models.KippoProject"
                ],
                "start_date": [
                    "int",
                    "Optional[datetime.datetime]",
                    "bool",
                    "Optional[str]",
                    "datetime.datetime",
                    "str"
                ],
                "end_date": [
                    "int",
                    "Optional[datetime.datetime]",
                    "bool",
                    "Optional[str]",
                    "datetime.datetime",
                    "str"
                ],
                "load_source": [
                    "str",
                    "int",
                    "datetime.date",
                    "None",
                    "Optional[int]",
                    "Optional[datetime.date]"
                ],
                "name": [
                    "bool",
                    "str",
                    "None"
                ]
            }
        },
        "Season.change_league": {
            "name": "change_league",
            "location": 496,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "league_dst": [
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        },
        "Team.__str__": {
            "name": "__str__",
            "location": 554,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Team.get_object_load_source_class": {
            "name": "get_object_load_source_class",
            "location": 558,
            "return": [
                "Type[TeamLoadSource]"
            ],
            "arguments": {
                "cls": [
                    "Iterable[Any]",
                    "Type[object]",
                    "Type"
                ]
            }
        },
        "Team.create": {
            "name": "create",
            "location": 562,
            "return": [
                "Team"
            ],
            "arguments": {
                "cls": [
                    "Type[_TTeam]"
                ]
            }
        },
        "Team.merge_related": {
            "name": "merge_related",
            "location": 576,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dst": [
                    "float",
                    "Callable[...,bool]",
                    "numpy.random.RandomState"
                ]
            }
        },
        "Team.change_data": {
            "name": "change_data",
            "location": 588,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "str",
                    "Dict",
                    "int"
                ]
            }
        },
        "Team.change_country": {
            "name": "change_country",
            "location": 593,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "country_dst": [
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "None",
                    "int"
                ]
            }
        },
        "Team.set_membership": {
            "name": "set_membership",
            "location": 605,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "season": [
                    "str",
                    "zerver.models.Realm",
                    "None",
                    "Optional[str]",
                    "server.models.Bike"
                ],
                "load_source": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "TeamLoadSource.init_object": {
            "name": "init_object",
            "location": 616,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "real_object": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Referee.__str__": {
            "name": "__str__",
            "location": 652,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Referee.get_object_load_source_class": {
            "name": "get_object_load_source_class",
            "location": 656,
            "return": [
                "Type[RefereeLoadSource]"
            ],
            "arguments": {
                "cls": [
                    "Iterable[Any]",
                    "Type[object]",
                    "Type"
                ]
            }
        },
        "Referee.create": {
            "name": "create",
            "location": 660,
            "return": [
                "Referee"
            ],
            "arguments": {
                "cls": [
                    "Type[_TReferee]"
                ]
            }
        },
        "Referee.merge_related": {
            "name": "merge_related",
            "location": 673,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dst": [
                    "int",
                    "zam_repondeur.models.Amendement"
                ]
            }
        },
        "Referee.change_data": {
            "name": "change_data",
            "location": 678,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "str",
                    "dep_check.models.Module"
                ]
            }
        },
        "Referee.change_country": {
            "name": "change_country",
            "location": 682,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "country_dst": [
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "None",
                    "int"
                ]
            }
        },
        "RefereeLoadSource.init_object": {
            "name": "init_object",
            "location": 699,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "real_object": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Match.__str__": {
            "name": "__str__",
            "location": 754,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Match.get_object": {
            "name": "get_object",
            "location": 759,
            "return": [
                "str",
                "bool",
                "int",
                "Dict[str,Union[datetime.datetime,str]]",
                "Pattern",
                "List",
                "None"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "Dict[str,Any]",
                    "Sequence[T]",
                    "Sequence[util.datetime.range.DateTimeRange]",
                    "(str,str)",
                    "Tuple[Union[str,str]]",
                    "Tuple[str,str]"
                ],
                "league": [
                    "int",
                    "None",
                    "str",
                    "Dict[str,Any]",
                    "Sequence[util.datetime.range.DateTimeRange]",
                    "(str,str)",
                    "Sequence[T]",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]"
                ],
                "team_h": [
                    "int",
                    "None",
                    "str",
                    "Dict[str,Any]",
                    "Sequence[util.datetime.range.DateTimeRange]",
                    "(str,str)",
                    "Sequence[T]",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]"
                ],
                "team_a": [
                    "int",
                    "None",
                    "str",
                    "Dict[str,Any]",
                    "Sequence[util.datetime.range.DateTimeRange]",
                    "(str,str)",
                    "Sequence[T]",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]"
                ],
                "match_date": [
                    "int",
                    "None",
                    "str",
                    "Sequence[util.datetime.range.DateTimeRange]",
                    "Sequence[T]",
                    "(str,str)",
                    "Tuple[Union[str,str]]",
                    "Tuple[str,str]",
                    "bool"
                ]
            }
        },
        "Match.get_or_create": {
            "name": "get_or_create",
            "location": 778,
            "return": [
                "Pattern",
                "str",
                "Set[str]",
                "Type",
                "bool",
                "OrderedDict",
                "int",
                "Dict[str,Any]",
                "Union[int,float,complex]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "raiden.utils.TargetAddress",
                    "int",
                    "dict",
                    "Callable"
                ],
                "league": [
                    "str",
                    "Callable",
                    "Iterable[Hashable]",
                    "raiden.utils.TargetAddress",
                    "Type"
                ],
                "team_h": [
                    "str",
                    "int",
                    "Callable",
                    "dict",
                    "raiden.utils.TargetAddress"
                ],
                "team_a": [
                    "str",
                    "int",
                    "Callable",
                    "dict",
                    "raiden.utils.TargetAddress"
                ],
                "match_date": [
                    "str",
                    "None",
                    "Callable",
                    "Iterable[Hashable]",
                    "Type",
                    "raiden.utils.TargetAddress"
                ],
                "load_source": [
                    "str",
                    "Dict",
                    "None",
                    "Dict[Tuple[str,str],str]",
                    "Dict[tuple[Union[str,str]],str]"
                ],
                "status": [
                    "str",
                    "bool",
                    "int",
                    "datetime.date"
                ],
                "season": [
                    "str",
                    "None",
                    "Optional[Tuple[int,int]]",
                    "int",
                    "Optional[dict]",
                    "Tuple[Union[int,int]]",
                    "Dict"
                ]
            }
        },
        "Match.set_referee": {
            "name": "set_referee",
            "location": 813,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "referee": [
                    "str",
                    "float",
                    "Sequence[float]"
                ],
                "load_source": [
                    "str",
                    "None",
                    "int",
                    "Dict[str,int]",
                    "Callable[,None]",
                    "Dict[str,Any]"
                ]
            }
        },
        "Match.change_league": {
            "name": "change_league",
            "location": 827,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "league_dst": [
                    "click.core.Context"
                ]
            }
        },
        "Match.change_team_h": {
            "name": "change_team_h",
            "location": 839,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "team_dst": [
                    "click.core.Context"
                ]
            }
        },
        "Match.change_team_a": {
            "name": "change_team_a",
            "location": 851,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "team_dst": []
            }
        },
        "Match.change_data": {
            "name": "change_data",
            "location": 863,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "str",
                    "List"
                ]
            }
        },
        "Match.set_season": {
            "name": "set_season",
            "location": 867,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "season": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]"
                ],
                "load_source": [
                    "bool",
                    "None",
                    "float",
                    "str",
                    "List[str]"
                ]
            }
        },
        "Match.merge_related": {
            "name": "merge_related",
            "location": 877,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dst": [
                    "int",
                    "str",
                    "List"
                ]
            }
        },
        "MatchReferee.change_referee": {
            "name": "change_referee",
            "location": 894,
            "return": [
                "None"
            ],
            "arguments": {
                "referee_from": [
                    "str",
                    "raiden.utils.SecreHash",
                    "int",
                    "None",
                    "Optional[str]",
                    "raiden.utils.Secret",
                    "contests.models.User",
                    "corporate.models.CustomerPlan"
                ],
                "referee_to": [
                    "str",
                    "raiden.utils.SecreHash",
                    "int",
                    "None",
                    "Optional[str]",
                    "raiden.utils.Secret",
                    "contests.models.User",
                    "corporate.models.CustomerPlan"
                ]
            }
        },
        "MatchReferee.change_match": {
            "name": "change_match",
            "location": 900,
            "return": [
                "None"
            ],
            "arguments": {
                "match_from": [
                    "str",
                    "Optional[str]",
                    "Iterable[str]",
                    "None",
                    "int",
                    "Set[str]",
                    "Dict[str,str]",
                    "static_frame.core.util.NameType"
                ],
                "match_to": [
                    "List[str]",
                    "Optional[List[str]]",
                    "str",
                    "bool",
                    "None",
                    "Optional[float]",
                    "float",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "MatchStats.__str__": {
            "name": "__str__",
            "location": 969,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "synene-master/project/core/views.py": {},
    "synene-master/project/core/__init__.py": {},
    "synene-master/project/core/migrations/0001_initial.py": {
        "Migration.insertSport": {
            "name": "insertSport",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [
                    "Migration"
                ],
                "schema_editor": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Migration.load_countries": {
            "name": "load_countries",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [
                    "Migration"
                ],
                "schema_editor": [
                    "bool",
                    "str",
                    "List",
                    "IO[str]",
                    "IO"
                ]
            }
        },
        "Migration.insertTeamTypes": {
            "name": "insertTeamTypes",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [
                    "Migration"
                ],
                "schema_editor": [
                    "str",
                    "List[object]",
                    "django.db.backends.postgresql_psycopg2.schema.DatabaseSchemaEditor",
                    "models.Question"
                ]
            }
        },
        "Migration.insertLoadSources": {
            "name": "insertLoadSources",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [
                    "Migration"
                ],
                "schema_editor": [
                    "Sequence[Tuple[Any,Any]]",
                    "List[Callable]",
                    "Sequence[tuple[Union[Any,Any]]]",
                    "bool"
                ]
            }
        },
        "Migration.load_countries.create_or_update_country": {
            "name": "create_or_update_country",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [
                    "str",
                    "Sequence[int]",
                    "int",
                    "limbic.emotion.models.LexiconLimbicModel"
                ],
                "slug": [
                    "str",
                    "Optional[str]"
                ],
                "country_code": [
                    "str",
                    "django.db.models.QuerySet",
                    "django.contrib.gis.geos.Point",
                    "int"
                ],
                "country_name": [
                    "str",
                    "django.db.models.QuerySet",
                    "django.contrib.gis.geos.Point",
                    "int"
                ]
            }
        }
    },
    "synene-master/project/core/migrations/0002_auto_20190504_2344.py": {},
    "synene-master/project/core/migrations/0003_auto_20190505_1804.py": {},
    "synene-master/project/core/migrations/0004_auto_20190505_1826.py": {},
    "synene-master/project/core/migrations/0005_auto_20190511_1637.py": {},
    "synene-master/project/core/migrations/0006_auto_20190512_2217.py": {},
    "synene-master/project/core/migrations/0007_matchstats_load_source.py": {},
    "synene-master/project/core/migrations/__init__.py": {},
    "synene-master/project/core/tests/test_models.py": {
        "prepare_data": {
            "name": "prepare_data",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "Exception",
                    "int",
                    "purplship.core.models.RateRequest"
                ]
            }
        },
        "CountryModelTest.setUp": {
            "name": "setUp",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CountryModelTest.test_country_get_or_create": {
            "name": "test_country_get_or_create",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CountryModelTest.test_country_confirm": {
            "name": "test_country_confirm",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CountryModelTest.test_country_merge": {
            "name": "test_country_merge",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LeagueModelTest.setUp": {
            "name": "setUp",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LeagueModelTest.test_empty_country": {
            "name": "test_empty_country",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LeagueModelTest.test_unique_league": {
            "name": "test_unique_league",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LeagueModelTest.test_league_get_season": {
            "name": "test_league_get_season",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LeagueModelTest.test_league_get_or_create_season": {
            "name": "test_league_get_or_create_season",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LeagueModelTest.test_league_get_or_create": {
            "name": "test_league_get_or_create",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LeagueModelTest.test_league_confirm": {
            "name": "test_league_confirm",
            "location": 359,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LeagueModelTest.test_league_merge": {
            "name": "test_league_merge",
            "location": 376,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LeagueModelTest.test_league_process_empty_season": {
            "name": "test_league_process_empty_season",
            "location": 469,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeasonModelTest.setUp": {
            "name": "setUp",
            "location": 513,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeasonModelTest.test_season_get_or_create": {
            "name": "test_season_get_or_create",
            "location": 527,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeasonModelTest.test_season_change_league": {
            "name": "test_season_change_league",
            "location": 580,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamModelTest.setUp": {
            "name": "setUp",
            "location": 728,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamModelTest.test_team_slug": {
            "name": "test_team_slug",
            "location": 741,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamModelTest.test_team_get_or_create": {
            "name": "test_team_get_or_create",
            "location": 749,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamModelTest.test_team_merge": {
            "name": "test_team_merge",
            "location": 773,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MatchModelTest.setUp": {
            "name": "setUp",
            "location": 838,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MatchModelTest.test_match_get_or_create": {
            "name": "test_match_get_or_create",
            "location": 862,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MatchModelTest.test_match_get_object": {
            "name": "test_match_get_object",
            "location": 895,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MatchModelTest.test_match_change_league": {
            "name": "test_match_change_league",
            "location": 926,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MatchModelTest.test_match_set_referee": {
            "name": "test_match_set_referee",
            "location": 967,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RefereeModelTest.setUp": {
            "name": "setUp",
            "location": 1000,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RefereeModelTest.test_referee_merge": {
            "name": "test_referee_merge",
            "location": 1017,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "synene-master/project/core/tests/__init__.py": {},
    "synene-master/project/football/admin.py": {},
    "synene-master/project/football/apps.py": {},
    "synene-master/project/football/factories.py": {
        "get_football": {
            "name": "get_football",
            "location": 7,
            "return": [
                "str",
                "bool",
                "int",
                "float",
                "None"
            ],
            "arguments": {}
        },
        "get_football_league": {
            "name": "get_football_league",
            "location": 15,
            "return": [
                "str",
                "bool",
                "List",
                "Counter",
                "None"
            ],
            "arguments": {
                "country": [
                    "int",
                    "str",
                    "Dict"
                ],
                "slug": [
                    "int",
                    "str",
                    "Dict"
                ]
            }
        },
        "get_football_team": {
            "name": "get_football_team",
            "location": 23,
            "return": [
                "str",
                "bool",
                "List",
                "Counter",
                "None"
            ],
            "arguments": {
                "country": [
                    "int",
                    "str",
                    "Dict"
                ],
                "slug": [
                    "int",
                    "str",
                    "Dict"
                ]
            }
        },
        "get_football_referee": {
            "name": "get_football_referee",
            "location": 31,
            "return": [
                "str",
                "bool",
                "List",
                "Counter",
                "None"
            ],
            "arguments": {
                "country": [
                    "int",
                    "str",
                    "Dict"
                ],
                "slug": [
                    "int",
                    "str",
                    "Dict"
                ]
            }
        }
    },
    "synene-master/project/football/managers.py": {
        "FootballManager.get_queryset": {
            "name": "get_queryset",
            "location": 10,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FootballManager.create": {
            "name": "create",
            "location": 13,
            "return": [
                "str",
                "Dict[str, int]",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FootballSportManager.get_queryset": {
            "name": "get_queryset",
            "location": 22,
            "return": [
                "str",
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "synene-master/project/football/mixins.py": {
        "FootballSaveMixin.save": {
            "name": "save",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "synene-master/project/football/models.py": {
        "FootballLeague.get_or_create": {
            "name": "get_or_create",
            "location": 37,
            "return": [
                "str",
                "bool",
                "Tuple[bool, bool, bool]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type",
                    "collections.abc.AsyncGenerator",
                    "AsyncGenerator",
                    "Type[T]"
                ],
                "slug": [
                    "str",
                    "Type",
                    "collections.abc.AsyncGenerator",
                    "AsyncGenerator",
                    "Type[T]"
                ]
            }
        }
    },
    "synene-master/project/football/utils.py": {
        "get_or_create_football_league": {
            "name": "get_or_create_football_league",
            "location": 4,
            "return": [
                "str",
                "List[str]",
                "int",
                "Callable",
                "salon.models.Stylist"
            ],
            "arguments": {
                "slug": [
                    "str",
                    "bool",
                    "topicdb.core.models.language.Language",
                    "List[str]",
                    "None",
                    "int",
                    "Optional[List[str]]"
                ],
                "source": [
                    "str",
                    "bool",
                    "None"
                ],
                "country": [
                    "str",
                    "None",
                    "bool",
                    "topicdb.core.models.language.Language",
                    "List[str]",
                    "int",
                    "Optional[List[str]]"
                ],
                "team_type": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "get_or_create_football_team": {
            "name": "get_or_create_football_team",
            "location": 13,
            "return": [
                "str",
                "List[str]",
                "int",
                "Callable",
                "salon.models.Stylist"
            ],
            "arguments": {
                "slug": [
                    "str",
                    "bool",
                    "topicdb.core.models.language.Language",
                    "List[str]",
                    "None",
                    "int",
                    "Optional[List[str]]"
                ],
                "source": [
                    "str",
                    "bool",
                    "None"
                ],
                "country": [
                    "str",
                    "None",
                    "bool",
                    "topicdb.core.models.language.Language",
                    "List[str]",
                    "int",
                    "Optional[List[str]]"
                ],
                "team_type": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        }
    },
    "synene-master/project/football/views.py": {},
    "synene-master/project/football/__init__.py": {},
    "synene-master/project/football/migrations/0001_initial.py": {},
    "synene-master/project/football/migrations/__init__.py": {},
    "synene-master/project/football/tests/test_models.py": {
        "prepare_data": {
            "name": "prepare_data",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "Exception",
                    "List[str]",
                    "models.Pkg",
                    "models.User"
                ]
            }
        },
        "FootballLeagueModelTest.setUp": {
            "name": "setUp",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FootballLeagueModelTest.test_create_league": {
            "name": "test_create_league",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FootballLeagueModelTest.test_save_league": {
            "name": "test_save_league",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FootballLeagueModelTest.test_get_or_create": {
            "name": "test_get_or_create",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FootballTeamModelTest.setUpTestData": {
            "name": "setUpTestData",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "List[str]",
                    "Exception",
                    "bool",
                    "str"
                ]
            }
        },
        "FootballTeamModelTest.test_create_team": {
            "name": "test_create_team",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FootballTeamModelTest.test_save_team": {
            "name": "test_save_team",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FootballRefereeModelTest.setUpTestData": {
            "name": "setUpTestData",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "List[str]",
                    "Exception",
                    "bool",
                    "str"
                ]
            }
        },
        "FootballRefereeModelTest.test_create_referee": {
            "name": "test_create_referee",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FootballRefereeModelTest.test_save_referee": {
            "name": "test_save_referee",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "synene-master/project/football/tests/__init__.py": {},
    "synene-master/project/users/adapters.py": {
        "AccountAdapter.is_open_for_signup": {
            "name": "is_open_for_signup",
            "location": 10,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict",
                    "django.http.HttpRequest"
                ]
            }
        },
        "SocialAccountAdapter.is_open_for_signup": {
            "name": "is_open_for_signup",
            "location": 15,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict",
                    "django.http.HttpRequest"
                ],
                "sociallogin": [
                    "Dict",
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "synene-master/project/users/admin.py": {},
    "synene-master/project/users/apps.py": {
        "UsersAppConfig.ready": {
            "name": "ready",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "synene-master/project/users/forms.py": {
        "UserCreationForm.clean_username": {
            "name": "clean_username",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "synene-master/project/users/models.py": {
        "User.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "synene-master/project/users/urls.py": {},
    "synene-master/project/users/views.py": {
        "UserUpdateView.get_success_url": {
            "name": "get_success_url",
            "location": 34,
            "return": [
                "bool",
                "Dict[int, dict]",
                "Optional[Iterable[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserUpdateView.get_object": {
            "name": "get_object",
            "location": 37,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserRedirectView.get_redirect_url": {
            "name": "get_redirect_url",
            "location": 48,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "synene-master/project/users/__init__.py": {},
    "synene-master/project/users/migrations/0001_initial.py": {},
    "synene-master/project/users/migrations/__init__.py": {},
    "synene-master/project/users/tests/factories.py": {
        "UserFactory.password": {
            "name": "password",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "create": [
                    "int",
                    "str",
                    "bool",
                    "Callable[Any,T]",
                    "Callable[[Any],T]"
                ],
                "extracted": [
                    "int",
                    "str",
                    "bool",
                    "Callable[Any,T]",
                    "Callable[[Any],T]"
                ]
            }
        }
    },
    "synene-master/project/users/tests/test_forms.py": {
        "TestUserCreationForm.test_clean_username": {
            "name": "test_clean_username",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "synene-master/project/users/tests/test_models.py": {
        "test_user_get_absolute_url": {
            "name": "test_user_get_absolute_url",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        }
    },
    "synene-master/project/users/tests/test_urls.py": {
        "test_detail": {
            "name": "test_detail",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        },
        "test_list": {
            "name": "test_list",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_update": {
            "name": "test_update",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_redirect": {
            "name": "test_redirect",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "synene-master/project/users/tests/test_views.py": {
        "TestUserUpdateView.test_get_success_url": {
            "name": "test_get_success_url",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "request_factory": [
                    "django.tesRequestFactory"
                ]
            }
        },
        "TestUserUpdateView.test_get_object": {
            "name": "test_get_object",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "request_factory": [
                    "django.tesRequestFactory"
                ]
            }
        },
        "TestUserRedirectView.test_get_redirect_url": {
            "name": "test_get_redirect_url",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "int",
                    "django.conf.settings.AUTH_USER_MODEL",
                    "bool"
                ],
                "request_factory": [
                    "django.tesRequestFactory"
                ]
            }
        }
    },
    "synene-master/project/users/tests/__init__.py": {}
}
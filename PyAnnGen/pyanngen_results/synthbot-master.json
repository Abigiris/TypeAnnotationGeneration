{
    "synthbot-master/src/conftest.py": {},
    "synthbot-master/src/datapipes/audioinfo_out.py": {
        "_get_formants_info": {
            "name": "_get_formants_info",
            "location": 41,
            "return": [
                "List[Dict[(str, Union[(str, Dict[(str, str)])])]]"
            ],
            "arguments": {
                "formants": [
                    "Union[str, int]",
                    "float",
                    "int"
                ]
            }
        },
        "_get_pitch_info": {
            "name": "_get_pitch_info",
            "location": 62,
            "return": [
                "List[Dict[(str, str)]]"
            ],
            "arguments": {
                "pitch": [
                    "numpy.ndarray",
                    "bool",
                    "float"
                ]
            }
        },
        "_get_intensity_info": {
            "name": "_get_intensity_info",
            "location": 81,
            "return": [
                "List[Dict[(str, str)]]"
            ],
            "arguments": {
                "intensity": [
                    "int",
                    "List[List[int]]"
                ]
            }
        },
        "_get_audio_info": {
            "name": "_get_audio_info",
            "location": 98,
            "return": [
                "Dict[(str, List[Union[(str, Dict[(str, Any)])]])]"
            ],
            "arguments": {
                "samples": [
                    "bytes",
                    "List[object]",
                    "Callable[[str],bool]",
                    "Callable[str,bool]",
                    "Dict",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "rate": [
                    "List[str]",
                    "str",
                    "Callable",
                    "int"
                ]
            }
        },
        "AudioInfoGenerator.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "outfile_fn": [
                    "Callable",
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "AudioInfoGenerator.generate_result": {
            "name": "generate_result",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reference": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "audio_file": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "AudioInfoGenerator.__enter__": {
            "name": "__enter__",
            "location": 30,
            "return": [
                "AudioInfoGenerator"
            ],
            "arguments": {
                "self": [
                    "_TAudioInfoGenerator@@AudioInfoGenerator@@"
                ]
            }
        },
        "AudioInfoGenerator.__exit__": {
            "name": "__exit__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "Optional[Type[BaseException]]"
                ],
                "value": [
                    "Optional[BaseException]"
                ],
                "traceback": [
                    "Optional[BaseException]",
                    "BaseException",
                    "None"
                ]
            }
        }
    },
    "synthbot-master/src/datapipes/audiorecord_in.py": {
        "_get_bounds": {
            "name": "_get_bounds",
            "location": 9,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "idx": [
                    "str",
                    "Optional[Iterable]",
                    "Optional[str]"
                ]
            }
        },
        "deserialize_example": {
            "name": "deserialize_example",
            "location": 26,
            "return": [
                "Tuple[(Any, list, int)]"
            ],
            "arguments": {
                "raw_record": [
                    "Dict",
                    "str",
                    "bytes",
                    "Dict[str,Any]"
                ]
            }
        },
        "parse_sparse": {
            "name": "parse_sparse",
            "location": 41,
            "return": [
                "Tuple[(List[Tuple[(int, Any)]], list)]"
            ],
            "arguments": {
                "intervals": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        }
    },
    "synthbot-master/src/datapipes/audiorecord_out.py": {
        "_index_tags": {
            "name": "_index_tags",
            "location": 12,
            "return": [
                "Dict[(nothing, nothing)]"
            ],
            "arguments": {
                "category": [
                    "str",
                    "List[str]",
                    "Set[str]",
                    "Iterable[str]"
                ],
                "tags": [
                    "Set",
                    "List[str]"
                ]
            }
        },
        "_bytes_feature": {
            "name": "_bytes_feature",
            "location": 46,
            "return": [
                "Callable",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "value": [
                    "float",
                    "List",
                    "List[str]",
                    "T"
                ]
            }
        },
        "_float_feature": {
            "name": "_float_feature",
            "location": 51,
            "return": [
                "Callable",
                "str",
                "Tuple[Any, Any, Any]",
                "list"
            ],
            "arguments": {
                "value": [
                    "float",
                    "int",
                    "T"
                ]
            }
        },
        "_int64_feature": {
            "name": "_int64_feature",
            "location": 56,
            "return": [
                "Callable",
                "str",
                "Tuple[Any, Any, Any]",
                "list"
            ],
            "arguments": {
                "value": [
                    "float",
                    "int",
                    "T"
                ]
            }
        },
        "get_phones": {
            "name": "get_phones",
            "location": 61,
            "return": [
                "list"
            ],
            "arguments": {
                "label": [
                    "List[str]",
                    "int",
                    "Any",
                    "bool",
                    "Optional[int]"
                ],
                "start": [
                    "int",
                    "List"
                ],
                "end": [
                    "int",
                    "List"
                ]
            }
        },
        "get_pitch": {
            "name": "get_pitch",
            "location": 80,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "info": [
                    "List[str]",
                    "int",
                    "bool",
                    "Any",
                    "Optional[int]"
                ],
                "start": [
                    "int",
                    "float"
                ],
                "end": [
                    "int",
                    "float"
                ]
            }
        },
        "get_intensity": {
            "name": "get_intensity",
            "location": 87,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "info": [
                    "List[str]",
                    "int",
                    "bool",
                    "Any",
                    "Optional[int]"
                ],
                "start": [
                    "int",
                    "float"
                ],
                "end": [
                    "int",
                    "float"
                ]
            }
        },
        "get_gcis": {
            "name": "get_gcis",
            "location": 94,
            "return": [
                "int"
            ],
            "arguments": {
                "info": [
                    "List[str]",
                    "int",
                    "bool",
                    "Any",
                    "Optional[int]"
                ],
                "start": [
                    "int",
                    "float"
                ],
                "end": [
                    "int",
                    "float"
                ]
            }
        },
        "get_formants": {
            "name": "get_formants",
            "location": 105,
            "return": [
                "Tuple[(List[Tuple[(Any, Any)]], List[Tuple[(Any, Any)]], List[Tuple[(Any, Any)]])]"
            ],
            "arguments": {
                "info": [
                    "List[str]",
                    "int",
                    "bool",
                    "Any",
                    "Optional[int]"
                ],
                "start": [
                    "int",
                    "float"
                ],
                "end": [
                    "int",
                    "float"
                ]
            }
        },
        "_median": {
            "name": "_median",
            "location": 126,
            "return": [
                "List",
                "int",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "bytearray",
                    "List[float]",
                    "numpy.ndarray",
                    "int",
                    "Union[bytes,bytearray,memoryview]"
                ]
            }
        },
        "_interval_string": {
            "name": "_interval_string",
            "location": 134,
            "return": [
                "Tuple[(List[int], list)]"
            ],
            "arguments": {
                "label": [
                    "List[int]",
                    "List[list[Any]]",
                    "Optional[List[int]]",
                    "str",
                    "Counter",
                    "Dict",
                    "bool",
                    "Dict[str,list]",
                    "List[List[Any]]",
                    "Optional[str]"
                ],
                "info": [
                    "Optional[int]",
                    "str",
                    "int",
                    "Sequence",
                    "None"
                ],
                "start": [
                    "Optional[int]",
                    "str",
                    "int",
                    "Sequence",
                    "None"
                ],
                "end": [
                    "int",
                    "str",
                    "Optional[int]",
                    "Sequence"
                ]
            }
        },
        "_clip_length": {
            "name": "_clip_length",
            "location": 207,
            "return": [
                "float",
                "int",
                "Tuple[Tuple[int,Any]]",
                "bool"
            ],
            "arguments": {
                "label": [
                    "str",
                    "bool",
                    "Sequence[str]",
                    "int"
                ]
            }
        },
        "_serialize_example": {
            "name": "_serialize_example",
            "location": 212,
            "return": [
                "str"
            ],
            "arguments": {
                "key": [
                    "bytes"
                ],
                "label": [
                    "str",
                    "Sequence[str]",
                    "bool",
                    "bytes",
                    "int"
                ],
                "info": [
                    "str",
                    "int",
                    "Optional[List[Any]]",
                    "List[Any]",
                    "None"
                ]
            }
        },
        "_interval_string._add_formant": {
            "name": "_add_formant",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "n": [
                    "int",
                    "List[List[str]]"
                ],
                "formant": [
                    "int"
                ]
            }
        },
        "LabelRecordGenerator.__init__": {
            "name": "__init__",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_path": [
                    "str"
                ],
                "clips_per_shard": [
                    "int",
                    "str",
                    "bool",
                    "List[str]",
                    "TextIO"
                ]
            }
        },
        "LabelRecordGenerator.generate_result": {
            "name": "generate_result",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "audio_archive": [
                    "Dict[str,Any]",
                    "List",
                    "Callable[[numpy.ndarray],float]",
                    "T",
                    "Type"
                ],
                "info_archive": [
                    "Dict[str,Any]",
                    "Tuple"
                ]
            }
        },
        "LabelRecordGenerator.generate_result.load_by_key": {
            "name": "load_by_key",
            "location": 244,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "clip_id": [
                    "str",
                    "int"
                ]
            }
        },
        "LabelRecordGenerator.generate_result.tf_load_by_key": {
            "name": "tf_load_by_key",
            "location": 251,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]",
                "float"
            ],
            "arguments": {
                "clip_id": [
                    "str",
                    "int",
                    "Union[str, bytes]"
                ]
            }
        },
        "LabelRecordGenerator.generate_result.reduce_func": {
            "name": "reduce_func",
            "location": 257,
            "return": [
                "dict",
                "int",
                "bool"
            ],
            "arguments": {
                "key": [
                    "str",
                    "bytes"
                ],
                "dataset": [
                    "str",
                    "tuple",
                    "KT",
                    "int",
                    "T"
                ]
            }
        }
    },
    "synthbot-master/src/datapipes/audiotar_out.py": {
        "AudioTarGenerator.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_dir": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "audio_format": [
                    "str",
                    "AbstractSet[str]",
                    "AbstractSet"
                ],
                "sample_rate": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "AudioTarGenerator.get_character_tar": {
            "name": "get_character_tar",
            "location": 20,
            "return": [
                "tarfile.TarFile"
            ],
            "arguments": {
                "self": [],
                "character": [
                    "str"
                ]
            }
        },
        "AudioTarGenerator.generate_result": {
            "name": "generate_result",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reference": [
                    "str",
                    "Dict[str,Any]"
                ],
                "audio": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "alignments": [
                    "Callable",
                    "str",
                    "bool",
                    "Type",
                    "Callable[...,T]",
                    "Callable[,None]",
                    "Type[BaseException]"
                ]
            }
        },
        "AudioTarGenerator.close_all": {
            "name": "close_all",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AudioTarGenerator.__enter__": {
            "name": "__enter__",
            "location": 83,
            "return": [
                "AudioTarGenerator"
            ],
            "arguments": {
                "self": [
                    "_TAudioTarGenerator@@AudioTarGenerator@@"
                ]
            }
        },
        "AudioTarGenerator.__exit__": {
            "name": "__exit__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "Optional[Type[BaseException]]"
                ],
                "value": [
                    "Optional[BaseException]"
                ],
                "traceback": [
                    "Optional[BaseException]",
                    "BaseException",
                    "None"
                ]
            }
        }
    },
    "synthbot-master/src/datapipes/clipper_in.py": {
        "audio_name_from_label_line": {
            "name": "audio_name_from_label_line",
            "location": 669,
            "return": [
                "Any"
            ],
            "arguments": {
                "line": [
                    "str",
                    "bytes"
                ],
                "known_paths": [
                    "str"
                ]
            }
        },
        "_parse_label": {
            "name": "_parse_label",
            "location": 674,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "source": [
                    "str",
                    "int"
                ],
                "line": [
                    "str",
                    "bytes"
                ]
            }
        },
        "audio_name_from_json_data": {
            "name": "audio_name_from_json_data",
            "location": 779,
            "return": [
                "Any"
            ],
            "arguments": {
                "label_data": [
                    "str",
                    "list[]"
                ],
                "known_paths": [
                    "str",
                    "None",
                    "typing.Callable[, ]"
                ]
            }
        },
        "fix_audio_fn": {
            "name": "fix_audio_fn",
            "location": 795,
            "return": [
                "str"
            ],
            "arguments": {
                "base": [
                    "str",
                    "int",
                    "list[str]"
                ],
                "known_paths": [
                    "str"
                ]
            }
        },
        "remove_non_ascii": {
            "name": "remove_non_ascii",
            "location": 813,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str",
                    "int"
                ]
            }
        },
        "is_accepted_audio": {
            "name": "is_accepted_audio",
            "location": 849,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "equal_labels": {
            "name": "equal_labels",
            "location": 875,
            "return": [
                "bool"
            ],
            "arguments": {
                "label1": [
                    "dict[str, typing.Any]",
                    "dict[str, str]"
                ],
                "label2": []
            }
        },
        "episode_from_label_path": {
            "name": "episode_from_label_path",
            "location": 889,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "filter_options_by_episode": {
            "name": "filter_options_by_episode",
            "location": 894,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "target_episode": [
                    "dict[, ]"
                ],
                "options": [
                    "list[tuple[typing.Union[str,float]]]"
                ]
            }
        },
        "get_best_label": {
            "name": "get_best_label",
            "location": 901,
            "return": [
                "dict[str, str]",
                "str",
                "dict[, ]"
            ],
            "arguments": {
                "episode": [
                    "bool",
                    "typing.Iterable[typing.Type]",
                    "str"
                ],
                "options": [
                    "str",
                    "None",
                    "list[]"
                ]
            }
        },
        "episode_from_path": {
            "name": "episode_from_path",
            "location": 917,
            "return": [
                "Any"
            ],
            "arguments": {
                "path": [
                    "str",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "ClipperLabelSet.__init__": {
            "name": "__init__",
            "location": 626,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "ClipperLabelSet._accept_path": {
            "name": "_accept_path",
            "location": 629,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "ClipperLabelSet._wrap_path": {
            "name": "_wrap_path",
            "location": 633,
            "return": [
                "ClipperLabels"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "ClipperLabelSet.collect": {
            "name": "collect",
            "location": 636,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "dict[str, float]",
                    "dict[, ]",
                    "typing.Mapping",
                    "dict[str, str]"
                ]
            }
        },
        "ClipperLabels.__init__": {
            "name": "__init__",
            "location": 645,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "PonySorterLabelSet.__init__": {
            "name": "__init__",
            "location": 716,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "PonySorterLabelSet._accept_path": {
            "name": "_accept_path",
            "location": 719,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "PonySorterLabelSet._wrap_path": {
            "name": "_wrap_path",
            "location": 723,
            "return": [
                "PonySorterLabels"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "PonySorterLabelSet.collect": {
            "name": "collect",
            "location": 726,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "dict[str, float]",
                    "dict[, ]",
                    "typing.Mapping",
                    "dict[str, str]"
                ]
            }
        },
        "PonySorterLabels.__init__": {
            "name": "__init__",
            "location": 735,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "ClipperDataset.__init__": {
            "name": "__init__",
            "location": 818,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "ClipperDataset._accept_path": {
            "name": "_accept_path",
            "location": 831,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "ClipperDataset._wrap_path": {
            "name": "_wrap_path",
            "location": 834,
            "return": [
                "Optional[ClipperFile]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "ClipperFile.__init__": {
            "name": "__init__",
            "location": 858,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "audio_path": [
                    "str",
                    "bool",
                    "list[str]"
                ],
                "options": [
                    "str",
                    "list[str]"
                ]
            }
        }
    },
    "synthbot-master/src/datapipes/dictionary_out.py": {
        "write_dict": {
            "name": "write_dict",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "dictionary": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, float]"
                ],
                "outpath": [
                    "str",
                    "bool",
                    "List[Dict]",
                    "Mapping[str,Any]",
                    "Dict[int,Dict[str,Any]]",
                    "Dict"
                ]
            }
        },
        "normalized_dict": {
            "name": "normalized_dict",
            "location": 101,
            "return": [
                "Dict[(Any, set)]"
            ],
            "arguments": {
                "dictionary": [
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "DictionaryGenerator.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_path": [
                    "str"
                ]
            }
        },
        "DictionaryGenerator.update": {
            "name": "update",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dictionary_path": [
                    "str"
                ]
            }
        },
        "DictionaryGenerator.check_transcripts": {
            "name": "check_transcripts",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "clipper_files": [
                    "List",
                    "Union[List,set]",
                    "Set",
                    "str",
                    "bool",
                    "Optional[str]",
                    "IO[str]"
                ]
            }
        },
        "DictionaryGenerator.write_file": {
            "name": "write_file",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str"
                ],
                "destination": [
                    "str"
                ]
            }
        },
        "DictionaryGenerator.generate_result": {
            "name": "generate_result",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "synthbot-master/src/datapipes/fileutils.py": {
        "get_directory": {
            "name": "get_directory",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "get_name": {
            "name": "get_name",
            "location": 54,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "read_normalized_transcript": {
            "name": "read_normalized_transcript",
            "location": 71,
            "return": [
                "str"
            ],
            "arguments": {
                "transcript_file": [
                    "str",
                    "int",
                    "Dict[str,Any]"
                ]
            }
        },
        "normalize_path": {
            "name": "normalize_path",
            "location": 80,
            "return": [
                "str",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "write_normalized_audio": {
            "name": "write_normalized_audio",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "input": [
                    "str"
                ],
                "output_path": [
                    "str"
                ]
            }
        },
        "write_normalized_transcript": {
            "name": "write_normalized_transcript",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "transcript": [
                    "str"
                ],
                "audio": [
                    "bool",
                    "str",
                    "Dict[str,Any]"
                ],
                "output_path": [
                    "str",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "write_tardata": {
            "name": "write_tardata",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "output": [
                    "bytes",
                    "str",
                    "tarfile.TarFile"
                ],
                "name": [
                    "str",
                    "bool",
                    "Dict"
                ],
                "data": [
                    "bytes",
                    "str",
                    "int",
                    "Union[str, bytes, int]",
                    "BinaryIO"
                ]
            }
        },
        "VerifiedFile.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "exists": [
                    "bool",
                    "str"
                ],
                "mkparents": [
                    "bool",
                    "Iterable[str]",
                    "str"
                ]
            }
        },
        "VerifiedDirectory.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "NormalizedAudio.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_file": [
                    "str",
                    "Dict",
                    "int",
                    "bool"
                ]
            }
        },
        "LocalFiles.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "folder": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "LocalFiles.get_files": {
            "name": "get_files",
            "location": 113,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalFiles._accept_path": {
            "name": "_accept_path",
            "location": 129,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "LocalFiles._wrap_path": {
            "name": "_wrap_path",
            "location": 132,
            "return": [
                "str",
                "List[int]",
                "int",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        }
    },
    "synthbot-master/src/datapipes/mfa_in.py": {
        "character_from_path": {
            "name": "character_from_path",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "alignment_path": [
                    "str"
                ]
            }
        },
        "MFADataset.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "folder": [
                    "bool",
                    "str",
                    "Union[str,bytes]",
                    "bytes"
                ]
            }
        },
        "MFADataset._accept_path": {
            "name": "_accept_path",
            "location": 11,
            "return": [
                "bool",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "IO[bytes]",
                    "IO"
                ]
            }
        },
        "MFADataset._wrap_path": {
            "name": "_wrap_path",
            "location": 14,
            "return": [
                "MFAAlignmentsFile"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bytes",
                    "Callable[[str],str]",
                    "Callable[str,str]"
                ]
            }
        },
        "MFAAlignmentsFile.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "alignment_path": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "synthbot-master/src/datapipes/mfa_out.py": {
        "normalize_transcript": {
            "name": "normalize_transcript",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str",
                    "int",
                    "Iterator[str]",
                    "Iterator",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "MFAPreprocessor.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_path": [
                    "str",
                    "bytes",
                    "bool"
                ],
                "output_dir": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "MFAPreprocessor.get_character_path": {
            "name": "get_character_path",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "character": [
                    "str",
                    "List[int]",
                    "Tuple[str]"
                ]
            }
        },
        "MFAPreprocessor.get_output_path": {
            "name": "get_output_path",
            "location": 48,
            "return": [
                "str",
                "Optional[str]",
                "Union[str, Iterable[str]]"
            ],
            "arguments": {
                "self": [],
                "character": [
                    "str",
                    "List",
                    "bool"
                ],
                "input_fn": [
                    "str"
                ]
            }
        },
        "MFAPreprocessor.generate_result": {
            "name": "generate_result",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "character": [
                    "str",
                    "bool"
                ],
                "audio_file": [
                    "str"
                ],
                "reference": [
                    "str",
                    "bool"
                ],
                "transcript": [
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "Optional[Callable[[Any],None]]",
                    "None",
                    "Callable[Any,None]"
                ]
            }
        }
    },
    "synthbot-master/src/datapipes/__init__.py": {},
    "synthbot-master/src/datapipes/__main__.py": {
        "generate_mfa_inputs": {
            "name": "generate_mfa_inputs",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "clips_dir": [
                    "str",
                    "None"
                ],
                "output_dir": [
                    "str"
                ]
            }
        },
        "generate_audio_tar": {
            "name": "generate_audio_tar",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "clips_dir": [
                    "str",
                    "None"
                ],
                "alignments_dir": [
                    "str",
                    "bool"
                ],
                "output_dir": [
                    "str",
                    "bool"
                ],
                "audio_format": [
                    "str",
                    "None"
                ],
                "sample_rate": [
                    "str",
                    "None"
                ]
            }
        },
        "generate_audio_info": {
            "name": "generate_audio_info",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "archive_fn": [
                    "str",
                    "typing.Iterable[float]"
                ],
                "output_fn": [
                    "str"
                ]
            }
        },
        "generate_labels_record": {
            "name": "generate_labels_record",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "audio_archive_fn": [
                    "str",
                    "int"
                ],
                "audio_info_fn": [
                    "str",
                    "bool"
                ],
                "output_fn": [
                    "int"
                ]
            }
        },
        "generate_dictionary": {
            "name": "generate_dictionary",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "include": [
                    "str",
                    "tuple[typing.Union[str,...]]"
                ],
                "clipper_path": [
                    "bool",
                    "str"
                ],
                "output_path": [
                    "str",
                    "bool",
                    "list[]"
                ]
            }
        },
        "add_common_args": {
            "name": "add_common_args",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": []
            }
        },
        "process_common_args": {
            "name": "process_common_args",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "synthbot-master/src/ponysynth/conv_transpose.py": {
        "ConvNDTranspose.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_spatial_dims": [
                    "int",
                    "float"
                ],
                "output_channels": [
                    "int",
                    "dict[int, int]"
                ],
                "kernel_shape": [
                    "int",
                    "str"
                ],
                "output_shape": [
                    "None",
                    "int",
                    "dict[int, int]"
                ],
                "stride": [
                    "int"
                ],
                "rate": [
                    "int"
                ],
                "padding": [
                    "typing.Text"
                ],
                "with_bias": [
                    "bool"
                ],
                "w_init": [
                    "None",
                    "int",
                    "str"
                ],
                "b_init": [
                    "None",
                    "str",
                    "int",
                    "bytes",
                    "list[typing.Any]",
                    "float"
                ],
                "data_format": [
                    "None",
                    "int",
                    "str"
                ],
                "name": [
                    "None",
                    "str",
                    "dict[, ]",
                    "list[str]"
                ]
            }
        },
        "ConvNDTranspose.__call__": {
            "name": "__call__",
            "location": 117,
            "return": [
                "list[]",
                "dict[, ]",
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "float"
                ]
            }
        },
        "ConvNDTranspose._initialize": {
            "name": "_initialize",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "str",
                    "int"
                ]
            }
        },
        "ConvNDTranspose._make_w": {
            "name": "_make_w",
            "location": 150,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConvNDTranspose._get_window_shape": {
            "name": "_get_window_shape",
            "location": 165,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "input_shape": [
                    "list[int]",
                    "bytes"
                ]
            }
        },
        "ConvNDTranspose._get_output_shape": {
            "name": "_get_output_shape",
            "location": 190,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "int"
                ]
            }
        },
        "Conv1DTranspose.__init__": {
            "name": "__init__",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_channels": [
                    "None",
                    "int",
                    "typing.Sequence[int]",
                    "str"
                ],
                "kernel_shape": [
                    "None",
                    "int",
                    "typing.Sequence[int]",
                    "str"
                ],
                "output_shape": [
                    "None",
                    "int",
                    "typing.Sequence[int]",
                    "str"
                ],
                "stride": [
                    "int"
                ],
                "rate": [
                    "int"
                ],
                "padding": [
                    "typing.Text"
                ],
                "with_bias": [
                    "bool"
                ],
                "w_init": [
                    "None",
                    "int",
                    "typing.Sequence[int]",
                    "str"
                ],
                "b_init": [
                    "None",
                    "int",
                    "typing.Sequence[int]",
                    "str"
                ],
                "data_format": [
                    "typing.Text"
                ],
                "name": [
                    "None",
                    "int",
                    "typing.Sequence[int]",
                    "str"
                ]
            }
        },
        "Conv2DTranspose.__init__": {
            "name": "__init__",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_channels": [
                    "None",
                    "int",
                    "typing.Sequence[int]",
                    "str"
                ],
                "kernel_shape": [
                    "None",
                    "int",
                    "typing.Sequence[int]",
                    "str"
                ],
                "output_shape": [
                    "None",
                    "int",
                    "typing.Sequence[int]",
                    "str"
                ],
                "stride": [
                    "int"
                ],
                "rate": [
                    "int"
                ],
                "padding": [
                    "typing.Text"
                ],
                "with_bias": [
                    "bool"
                ],
                "w_init": [
                    "None",
                    "int",
                    "typing.Sequence[int]",
                    "str"
                ],
                "b_init": [
                    "None",
                    "int",
                    "typing.Sequence[int]",
                    "str"
                ],
                "data_format": [
                    "typing.Text"
                ],
                "name": [
                    "None",
                    "int",
                    "typing.Sequence[int]",
                    "str"
                ]
            }
        },
        "Conv3DTranspose.__init__": {
            "name": "__init__",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_channels": [
                    "None",
                    "int",
                    "typing.Sequence[int]",
                    "str"
                ],
                "kernel_shape": [
                    "None",
                    "int",
                    "typing.Sequence[int]",
                    "str"
                ],
                "output_shape": [
                    "None",
                    "int",
                    "typing.Sequence[int]",
                    "str"
                ],
                "stride": [
                    "int"
                ],
                "rate": [
                    "int"
                ],
                "padding": [
                    "typing.Text"
                ],
                "with_bias": [
                    "bool"
                ],
                "w_init": [
                    "None",
                    "int",
                    "typing.Sequence[int]",
                    "str"
                ],
                "b_init": [
                    "None",
                    "int",
                    "typing.Sequence[int]",
                    "str"
                ],
                "data_format": [
                    "typing.Text"
                ],
                "name": [
                    "None",
                    "int",
                    "typing.Sequence[int]",
                    "str"
                ]
            }
        }
    },
    "synthbot-master/src/ponysynth/corpus.py": {
        "_iter_sample_fast": {
            "name": "_iter_sample_fast",
            "location": 102,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "iterable": [
                    "int",
                    "typing.Iterable[str]",
                    "float"
                ],
                "samplesize": [
                    "int"
                ]
            }
        },
        "_load_tar_objects": {
            "name": "_load_tar_objects",
            "location": 206,
            "return": [
                "Dict[(Any, dict)]"
            ],
            "arguments": {
                "archive": [
                    "str",
                    "list[]"
                ]
            }
        },
        "phoneme_transcription": {
            "name": "phoneme_transcription",
            "location": 224,
            "return": [
                "str"
            ],
            "arguments": {
                "label": [
                    "list[int]",
                    "bytes"
                ]
            }
        },
        "ClipperArchive.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "archive_path": [
                    "str",
                    "int"
                ]
            }
        },
        "ClipperArchive.read_label": {
            "name": "read_label",
            "location": 22,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "typing.Iterator",
                    "int"
                ]
            }
        },
        "ClipperArchive.read_audio": {
            "name": "read_audio",
            "location": 28,
            "return": [
                "Optional[IO[bytes]]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "typing.Hashable"
                ]
            }
        },
        "ClipperArchive.labels": {
            "name": "labels",
            "location": 32,
            "return": [
                "Generator[(Tuple[(str, Any)], Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClipperArchive.audio": {
            "name": "audio",
            "location": 36,
            "return": [
                "Generator[(Tuple[(str, Optional[IO[bytes]])], Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClipperArchive.keys": {
            "name": "keys",
            "location": 40,
            "return": [
                "dict_keys[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InfoArchive.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "archive_path": [
                    "str",
                    "int"
                ]
            }
        },
        "InfoArchive.read_info": {
            "name": "read_info",
            "location": 49,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "typing.Iterator",
                    "bool"
                ]
            }
        },
        "InfoArchive.info": {
            "name": "info",
            "location": 55,
            "return": [
                "Generator[(Tuple[(str, Any)], Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InfoArchive.keys": {
            "name": "keys",
            "location": 59,
            "return": [
                "dict_keys[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpeechCorpus.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "archive_path": [
                    "list[int]",
                    "str"
                ]
            }
        },
        "SpeechCorpus.build_phone_index": {
            "name": "build_phone_index",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "substrIdx": []
            }
        },
        "SpeechCorpus.nphones": {
            "name": "nphones",
            "location": 75,
            "return": [
                "PhoneSeqs"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "SpeechCorpus.phones": {
            "name": "phones",
            "location": 84,
            "return": [
                "PhoneSeqs"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpeechCorpus.diphones": {
            "name": "diphones",
            "location": 87,
            "return": [
                "PhoneSeqs"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpeechCorpus.triphones": {
            "name": "triphones",
            "location": 90,
            "return": [
                "PhoneSeqs"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpeechCorpus.phoneseqs": {
            "name": "phoneseqs",
            "location": 93,
            "return": [
                "PhoneSeqs"
            ],
            "arguments": {
                "self": [],
                "phonemes": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "PhoneSeqs.__init__": {
            "name": "__init__",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "int",
                    "float"
                ],
                "generator": [
                    "int",
                    "float"
                ]
            }
        },
        "PhoneSeqs.sample": {
            "name": "sample",
            "location": 128,
            "return": [
                "PhoneSeqs"
            ],
            "arguments": {
                "self": [
                    "_TPhoneSeqs@@PhoneSeqs@@"
                ],
                "k": [
                    "int"
                ]
            }
        },
        "PhoneSeqs.__iter__": {
            "name": "__iter__",
            "location": 131,
            "return": [
                "builtins.generator[(PhoneSeq, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PhoneSeqs.cache": {
            "name": "cache",
            "location": 134,
            "return": [
                "PhoneSeqsCache"
            ],
            "arguments": {
                "self": []
            }
        },
        "PhoneSeqsCache.__init__": {
            "name": "__init__",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "int",
                    "float"
                ],
                "cache": [
                    "bool",
                    "str"
                ]
            }
        },
        "PhoneSeqsCache.sample": {
            "name": "sample",
            "location": 143,
            "return": [
                "List[PhoneSeq]"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "int"
                ]
            }
        },
        "PhoneSeqsCache.__iter__": {
            "name": "__iter__",
            "location": 148,
            "return": [
                "Generator[(PhoneSeq, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PhoneSeqsCache.__next__": {
            "name": "__next__",
            "location": 151,
            "return": [
                "PhoneSeq"
            ],
            "arguments": {
                "self": []
            }
        },
        "PhoneSeqsCache.__getitem__": {
            "name": "__getitem__",
            "location": 154,
            "return": [
                "PhoneSeq"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "list[str]",
                    "dict[, ]"
                ]
            }
        },
        "PhoneSeqsCache.__len__": {
            "name": "__len__",
            "location": 157,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PhoneSeq.__init__": {
            "name": "__init__",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "int",
                    "float"
                ],
                "clip": [
                    "int",
                    "float"
                ],
                "offset": [
                    "int",
                    "float"
                ],
                "length": [
                    "int",
                    "float"
                ]
            }
        },
        "PhoneSeq._phones": {
            "name": "_phones",
            "location": 168,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "PhoneSeq.intervals": {
            "name": "intervals",
            "location": 173,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PhoneSeq.phonemes": {
            "name": "phonemes",
            "location": 181,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "PhoneSeq.diphonemes": {
            "name": "diphonemes",
            "location": 184,
            "return": [
                "Tuple[(nothing, ...)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PhoneSeq.audio": {
            "name": "audio",
            "location": 190,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PhoneSeq.utterance": {
            "name": "utterance",
            "location": 202,
            "return": [
                "PhoneSeq"
            ],
            "arguments": {
                "self": [
                    "_TPhoneSeq@@PhoneSeq@@"
                ]
            }
        },
        "SpeechCorpus.nphones._gen": {
            "name": "_gen",
            "location": 78,
            "return": [
                "typing.Generator[tuple[int]]"
            ],
            "arguments": {}
        },
        "SpeechCorpus.phoneseqs._gen": {
            "name": "_gen",
            "location": 94,
            "return": [
                "typing.Generator[tuple[int]]"
            ],
            "arguments": {}
        }
    },
    "synthbot-master/src/ponysynth/indexes.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubstringIndex.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubstringIndex.index": {
            "name": "index",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keystring": [
                    "Iterable[str]",
                    "float",
                    "list"
                ],
                "reference": [
                    "Iterable[str]",
                    "float",
                    "List"
                ]
            }
        },
        "SubstringIndex._index_single": {
            "name": "_index_single",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keystring": [
                    "float"
                ],
                "reference": [
                    "List[T]"
                ],
                "position": [
                    "List[T]"
                ]
            }
        },
        "SubstringIndex.find": {
            "name": "find",
            "location": 39,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "self": [],
                "substr": [
                    "Optional[Iterable[str]]"
                ]
            }
        },
        "SubstringIndex.read_layer": {
            "name": "read_layer",
            "location": 51,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "height": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "SubstringIndex.read_sublayer": {
            "name": "read_sublayer",
            "location": 54,
            "return": [
                "Union[(itertools.chain, Generator[(Any, Any, None)])]"
            ],
            "arguments": {
                "self": [],
                "descend": [
                    "str",
                    "BinaryIO",
                    "bytes",
                    "Optional[List]"
                ],
                "parent": [
                    "str",
                    "Type"
                ]
            }
        }
    },
    "synthbot-master/src/ponysynth/pyglottal.py": {
        "fasthilbert": {
            "name": "fasthilbert",
            "location": 15,
            "return": [
                "List[int]",
                "Dict[int, Tuple[int, int]]",
                "str",
                "\"Pipeline\""
            ],
            "arguments": {
                "x": [
                    "list",
                    "tuple",
                    "Union[int, str]"
                ]
            }
        },
        "inlier_elim": {
            "name": "inlier_elim",
            "location": 24,
            "return": [
                "bool",
                "str",
                "bytes"
            ],
            "arguments": {
                "b": [
                    "int",
                    "bytes",
                    "numpy.ndarray"
                ],
                "m": [
                    "bytes",
                    "bool",
                    "int",
                    "list"
                ]
            }
        },
        "butter1": {
            "name": "butter1",
            "location": 35,
            "return": [
                "Tuple[(numpy.ndarray, numpy.ndarray)]"
            ],
            "arguments": {
                "fc": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "Sequence[int]"
                ],
                "btype": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "der": {
            "name": "der",
            "location": 49,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "numpy.ndarray",
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "gadfli": {
            "name": "gadfli",
            "location": 56,
            "return": [
                "Union[(numpy.ndarray, Tuple[(numpy.ndarray, Dict[(str, Any)])])]"
            ],
            "arguments": {
                "g": [
                    "Dict[str, Any]",
                    "Optional[Collection[int]]",
                    "int"
                ],
                "fmin": [
                    "Callable[[T], List[T]]",
                    "str",
                    "int",
                    "Tuple[int, int, int]"
                ],
                "fmax": [
                    "Callable[[T], List[T]]",
                    "str",
                    "int",
                    "Tuple[int, int, int]"
                ],
                "fs": [
                    "str",
                    "bytes",
                    "list",
                    "int"
                ],
                "m": [
                    "float",
                    "Tuple[Any, Any, Any]"
                ],
                "tau": [
                    "float",
                    "int",
                    "bytes",
                    "numpy.ndarray",
                    "list"
                ],
                "theta": [
                    "Dict[str, Any]",
                    "Optional[Collection[int]]",
                    "int"
                ],
                "reps": [
                    "Dict[str, Any]",
                    "Optional[Collection[int]]",
                    "int"
                ],
                "inside": [
                    "List[str]",
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "float",
                    "Dict[str, float]"
                ]
            }
        },
        "quick_gci": {
            "name": "quick_gci",
            "location": 90,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "g": [
                    "Union[int, float]",
                    "int",
                    "str",
                    "float",
                    "numpy.ndarray"
                ],
                "fmin": [
                    "Callable[[T], List[T]]",
                    "str",
                    "int",
                    "Tuple[int, int, int]"
                ],
                "fmax": [
                    "Callable[[T], List[T]]",
                    "str",
                    "int",
                    "Tuple[int, int, int]"
                ],
                "fs": [
                    "str",
                    "bytes",
                    "list",
                    "int"
                ],
                "theta": [
                    "Dict[str, Any]",
                    "Optional[Collection[int]]",
                    "int"
                ],
                "reps": [
                    "int",
                    "Optional[int]",
                    "float"
                ],
                "reps2": [
                    "numpy.ndarray",
                    "bool"
                ],
                "gamma": [
                    "Tuple[int, int]",
                    "Optional[int]",
                    "str",
                    "int",
                    "float"
                ],
                "inside": [
                    "List[str]",
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "float",
                    "Dict[str, float]"
                ]
            }
        },
        "_get_bounds": {
            "name": "_get_bounds",
            "location": 123,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "int",
                    "Mapping[str, float]",
                    "float",
                    "Union[int, float]",
                    "Optional[numpy.ndarray]"
                ],
                "y": [
                    "int",
                    "bool",
                    "Tuple[int, int]",
                    "str"
                ],
                "idx": [
                    "bool",
                    "int",
                    "List[str]",
                    "numpy.array"
                ],
                "half": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "_get_match": {
            "name": "_get_match",
            "location": 141,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "x": [
                    "AbstractSet[int]",
                    "Tuple[int, int]"
                ],
                "y": [
                    "List[int]"
                ],
                "half": [
                    "List[int]",
                    "int",
                    "str"
                ]
            }
        },
        "compare_markings": {
            "name": "compare_markings",
            "location": 155,
            "return": [
                "Tuple[(Union[(numpy.ndarray, Dict[(str, Any)], Tuple[(numpy.ndarray, ...)])], ...)]"
            ],
            "arguments": {
                "x": [
                    "Optional[str]",
                    "Union[int, slice]",
                    "int",
                    "float",
                    "numpy.ndarray"
                ],
                "y": [
                    "Optional[str]",
                    "Union[int, slice]",
                    "numpy.ndarray",
                    "int",
                    "float"
                ],
                "thresh": [
                    "int",
                    "float"
                ],
                "inside": [
                    "bool",
                    "float",
                    "numpy.ndarray",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "compare_cycles": {
            "name": "compare_cycles",
            "location": 184,
            "return": [
                "Tuple[(Dict[(Any, list)], Dict[(Any, Tuple[(Any, Any)])], list)]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "Union[numpy.ndarray, pandas.DataFrame]",
                    "float",
                    "numpy.ndarray"
                ],
                "y": [
                    "int",
                    "Iterable[T]",
                    "numpy.ndarray"
                ],
                "HP": [
                    "numpy.ndarray"
                ],
                "vt": [
                    "bool",
                    "float",
                    "numpy.ndarray",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ],
                "centered": [
                    "bool",
                    "float",
                    "numpy.ndarray",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "cycle_stats": {
            "name": "cycle_stats",
            "location": 243,
            "return": [
                "Tuple[(int, int, int)]"
            ],
            "arguments": {
                "cycles": [
                    "str",
                    "list",
                    "List[str]"
                ]
            }
        }
    },
    "synthbot-master/src/ponysynth/sonnet_types.py": {},
    "synthbot-master/src/ponysynth/__init__.py": {},
    "synthbot-master/src/ponysynth/models/label_embeddings.py": {
        "load_data": {
            "name": "load_data",
            "location": 10,
            "return": [
                "Tuple[(int, List[Tuple[(int, Any)]], list, list)]"
            ],
            "arguments": {
                "x": [
                    "Tuple['cirq.Qid']",
                    "dict",
                    "numpy.ndarray",
                    "Iterable[Any]",
                    "Dict[str, float]"
                ]
            }
        },
        "generate_dataset": {
            "name": "generate_dataset",
            "location": 24,
            "return": [
                "numpy.ndarray",
                "bool",
                "Dict[str, List]",
                "List[Dict[str, Any]]",
                "int"
            ],
            "arguments": {
                "data_len": [
                    "int",
                    "List[str]",
                    "bool"
                ],
                "sparse_indexes": [
                    "int",
                    "Dict",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "sparse_ids": [
                    "int",
                    "Dict",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "sparse_weights": [
                    "int",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "input_db": {
            "name": "input_db",
            "location": 35,
            "return": [
                "int",
                "Dict[str, Any]",
                "Optional[int]"
            ],
            "arguments": {
                "archive_fn": [
                    "List[str]",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "batch_size": [
                    "int",
                    "Callable[T,bool]",
                    "bool",
                    "Callable[[T],bool]"
                ]
            }
        },
        "MultivarNormalDistModule.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_size": [
                    "int",
                    "str",
                    "None",
                    "Optional[int]",
                    "bool",
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]"
                ],
                "name": [
                    "str",
                    "None",
                    "bool",
                    "Optional[Tuple[int,int]]",
                    "Dict",
                    "Tuple[Union[int,int]]"
                ]
            }
        },
        "MultivarNormalDistModule.__call__": {
            "name": "__call__",
            "location": 53,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "features": [
                    "Callable",
                    "int",
                    "float"
                ]
            }
        },
        "NormalDistModule.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_size": [
                    "int",
                    "str",
                    "None",
                    "Optional[int]",
                    "bool",
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]"
                ],
                "name": [
                    "str",
                    "bool",
                    "None",
                    "Dict"
                ]
            }
        },
        "NormalDistModule.__call__": {
            "name": "__call__",
            "location": 65,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "features": [
                    "Callable",
                    "int",
                    "float"
                ]
            }
        },
        "BernoulliDistModule.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_size": [
                    "str",
                    "bool",
                    "Dict[str,T]",
                    "int"
                ],
                "name": [
                    "str",
                    "bool",
                    "None",
                    "Dict"
                ]
            }
        },
        "BernoulliDistModule.__call__": {
            "name": "__call__",
            "location": 76,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "features": [
                    "Callable",
                    "int",
                    "float"
                ]
            }
        },
        "SimpleVAE.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "latent_size": [
                    "float",
                    "int",
                    "Dict",
                    "str",
                    "List[str]",
                    "bytes"
                ],
                "name": [
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "Tuple[Type]",
                    "Optional[str]"
                ]
            }
        },
        "SimpleVAE.encode": {
            "name": "encode",
            "location": 98,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "features": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "SimpleVAE.decode": {
            "name": "decode",
            "location": 102,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "latent_sample": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "SimpleVAE.loss": {
            "name": "loss",
            "location": 106,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "prior": [
                    "int",
                    "Callable",
                    "str"
                ],
                "latent_dist": [
                    "int",
                    "Callable",
                    "str"
                ],
                "target": [
                    "float",
                    "bool",
                    "numpy.ndarray"
                ]
            }
        },
        "VAEModel.__init__": {
            "name": "__init__",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vae": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "VAEModel.__call__": {
            "name": "__call__",
            "location": 128,
            "return": [
                "int",
                "Callable",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "features": [
                    "str",
                    "float"
                ]
            }
        },
        "VAEModel.gradients": {
            "name": "gradients",
            "location": 132,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "features": [
                    "str"
                ]
            }
        }
    },
    "synthbot-master/tests/test_datafiles.py": {
        "archives": {
            "name": "archives",
            "location": 23,
            "return": [
                "Dict[str, List[Any]]",
                "bool",
                "str",
                "List[str]"
            ],
            "arguments": {}
        },
        "extras": {
            "name": "extras",
            "location": 28,
            "return": [
                "Dict[str, List[Any]]",
                "bool",
                "str",
                "List[str]"
            ],
            "arguments": {}
        },
        "cookie_archives": {
            "name": "cookie_archives",
            "location": 33,
            "return": [
                "Dict[str, List[Any]]",
                "bool",
                "str",
                "List[str]"
            ],
            "arguments": {}
        },
        "load_archives": {
            "name": "load_archives",
            "location": 37,
            "return": [
                "Dict[(Any, ponysynth.corpus.ClipperArchive)]"
            ],
            "arguments": {
                "paths": [
                    "str"
                ]
            }
        },
        "load_extras": {
            "name": "load_extras",
            "location": 49,
            "return": [
                "Dict[(Any, ponysynth.corpus.InfoArchive)]"
            ],
            "arguments": {
                "paths": [
                    "str"
                ]
            }
        },
        "test_archives": {
            "name": "test_archives",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "archives": [
                    "Iterable[Any]",
                    "Sequence[Any]",
                    "str"
                ]
            }
        },
        "test_cookie_clips": {
            "name": "test_cookie_clips",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "cookie_archives": [
                    "Dict[str,Any]",
                    "str",
                    "Sequence[Any]",
                    "Iterable[Any]"
                ]
            }
        },
        "assert_valid_archive": {
            "name": "assert_valid_archive",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "archive": [
                    "int",
                    "str",
                    "Dict[str, str]",
                    "bytes",
                    "Sequence[Tuple[float, float]]"
                ]
            }
        },
        "assert_valid_label": {
            "name": "assert_valid_label",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "key": [
                    "str",
                    "bytes",
                    "Tuple",
                    "bool"
                ],
                "label": [
                    "List[Optional[str]]",
                    "bytes",
                    "str",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]",
                    "Callable[[str],None]",
                    "Callable[str,None]"
                ]
            }
        },
        "assert_phone_sequence": {
            "name": "assert_phone_sequence",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "label": [
                    "str",
                    "Iterable[str]",
                    "Tuple[str]"
                ]
            }
        },
        "assert_word_sequence": {
            "name": "assert_word_sequence",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "label": [
                    "str",
                    "Iterable[str]",
                    "Tuple[str]"
                ]
            }
        },
        "assert_valid_tags": {
            "name": "assert_valid_tags",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "label": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "assert_valid_transcript": {
            "name": "assert_valid_transcript",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "label": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "assert_valid_audio": {
            "name": "assert_valid_audio",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "archive": [
                    "int",
                    "str",
                    "tuple",
                    "Optional[Set[str]]",
                    "bool"
                ],
                "expected_rate": [
                    "Union[Dict,List]",
                    "bool",
                    "Dict",
                    "str",
                    "List"
                ]
            }
        },
        "test_phoneme_transcriptions": {
            "name": "test_phoneme_transcriptions",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "archives": [
                    "Iterable[Any]",
                    "Sequence[Any]",
                    "str"
                ]
            }
        },
        "test_extras": {
            "name": "test_extras",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "archives": [
                    "Iterable[Any]",
                    "Sequence[Any]",
                    "str"
                ],
                "extras": [
                    "Iterable[Any]",
                    "Sequence[Any]",
                    "str"
                ]
            }
        },
        "assert_valid_extra": {
            "name": "assert_valid_extra",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "extra": [
                    "int",
                    "str",
                    "Dict[str, str]",
                    "bytes",
                    "Sequence[Tuple[float, float]]"
                ]
            }
        },
        "test_oovs": {
            "name": "test_oovs",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_alignments": {
            "name": "test_alignments",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "synthbot-master/tests/__init__.py": {}
}
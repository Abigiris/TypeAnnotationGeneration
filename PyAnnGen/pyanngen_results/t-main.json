{
    "t-main/2019-06-04-pypy3-fd-leak/t.py": {
        "test": {
            "name": "test",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "t-main/2019-06-04-requires-metadata/t.py": {
        "onpath": {
            "name": "onpath",
            "location": 12,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "whl": [
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "t-main/2019-06-05-pytest-generator-bug/t.py": {
        "gen": {
            "name": "gen",
            "location": 4,
            "return": [
                "typing.Generator[int]"
            ],
            "arguments": {}
        },
        "test1": {
            "name": "test1",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "a": [
                    "int",
                    "Dict"
                ]
            }
        },
        "test2": {
            "name": "test2",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "a": [
                    "int",
                    "Dict"
                ]
            }
        }
    },
    "t-main/2019-06-15-in-async-def/t.py": {
        "main": {
            "name": "main",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Visitor.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Visitor.visit_FunctionDef": {
            "name": "visit_FunctionDef",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Visitor.visit_AsyncFunctionDef": {
            "name": "visit_AsyncFunctionDef",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Visitor.visit_For": {
            "name": "visit_For",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        }
    },
    "t-main/2019-06-15-in-async-def/t_example.py": {
        "f.g": {
            "name": "g",
            "location": 5,
            "return": [
                "typing.Generator[int]"
            ],
            "arguments": {}
        }
    },
    "t-main/2019-06-15-module-metaclass/t.py": {
        "main": {
            "name": "main",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "mcs.__new__": {
            "name": "__new__",
            "location": 2,
            "return": [
                "str",
                "Type",
                "Type[Any]",
                "Sequence[Any]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Dict[str,Any]",
                    "List[Tuple[str,str]]",
                    "Type",
                    "List[tuple[Union[str,str]]]",
                    "Mapping[str,Any]",
                    "Mapping",
                    "Sequence[type]",
                    "Sequence[Type]"
                ],
                "name": [
                    "str",
                    "bool",
                    "Dict[str,Any]",
                    "List[Tuple[str,str]]",
                    "Type",
                    "List[tuple[Union[str,str]]]",
                    "Mapping[str,Any]",
                    "Mapping",
                    "Sequence[type]",
                    "Sequence[Type]"
                ],
                "bases": [
                    "str",
                    "bool",
                    "Dict[str,Any]",
                    "List[Tuple[str,str]]",
                    "Type",
                    "List[tuple[Union[str,str]]]",
                    "Mapping[str,Any]",
                    "Mapping",
                    "Sequence[type]",
                    "Sequence[Type]"
                ],
                "dct": [
                    "str",
                    "bool",
                    "List[Tuple[str, str]]",
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "type",
                    "Sequence[type]"
                ]
            }
        }
    },
    "t-main/2019-06-25-unicode-exceptions-py2/t.py": {
        "f": {
            "name": "f",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "MyTest.test_thing": {
            "name": "test_thing",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "t-main/2019-07-08-mypy-lateinit/t.py": {
        "C.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "C.set_x": {
            "name": "set_x",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int"
                ]
            }
        },
        "C.use_x": {
            "name": "use_x",
            "location": 11,
            "return": [
                "int",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "t-main/2019-07-11-argparser-with-default-subparser/t.py": {
        "main": {
            "name": "main",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "AlwaysContains.__contains__": {
            "name": "__contains__",
            "location": 6,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "WildSubParsersAction.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WildSubParsersAction._name_parser_map": {
            "name": "_name_parser_map",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "_": [
                    "Dict[str, Any]",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "WildArgumentParser.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "t-main/2019-08-18-super-wrong-class/t.py": {
        "main": {
            "name": "main",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "A.fn": {
            "name": "fn",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "B.fn": {
            "name": "fn",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "C.fn_super_C": {
            "name": "fn_super_C",
            "location": 15,
            "return": [
                "int",
                "str",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "C.fn_super_B": {
            "name": "fn_super_B",
            "location": 18,
            "return": [
                "bytes",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "C.fn_super_py3": {
            "name": "fn_super_py3",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "t-main/2019-09-29-curses-key-detector/t.py": {
        "c_main": {
            "name": "c_main",
            "location": 8,
            "return": [
                "None",
                "str",
                "bytes",
                "Sequence[str]",
                "bool"
            ],
            "arguments": {
                "stdscr": [
                    "str",
                    "List[str]",
                    "Dict[str, str]"
                ]
            }
        },
        "_init_screen": {
            "name": "_init_screen",
            "location": 36,
            "return": [
                "int",
                "bool",
                "float"
            ],
            "arguments": {}
        },
        "make_stdscr": {
            "name": "make_stdscr",
            "location": 50,
            "return": [
                "typing.Generator[typing.Union[int,dict[, ],list[int],list[list[int]],str]]"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 59,
            "return": [
                "int",
                "str",
                "List[str]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {}
        }
    },
    "t-main/2020-01-02-curses-wcwidth/t.py": {
        "wcwidth": {
            "name": "wcwidth",
            "location": 7,
            "return": [
                "str"
            ],
            "arguments": {
                "c": [
                    "int",
                    "str",
                    "Counter",
                    "Iterable[Tuple[int,int]]",
                    "Iterable[tuple[Union[int,int]]]"
                ]
            }
        },
        "c_main": {
            "name": "c_main",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "stdscr": [
                    "float",
                    "str",
                    "Iterable[str]"
                ]
            }
        }
    },
    "t-main/2020-02-26-import-a-script-file/t_test.py": {
        "_import_file": {
            "name": "_import_file",
            "location": 5,
            "return": [
                "str",
                "bool",
                "List[str]",
                "None",
                "Tuple",
                "List",
                "Tuple[Literal]",
                "int"
            ],
            "arguments": {
                "s": [
                    "str",
                    "Generator",
                    "Dict"
                ]
            }
        },
        "test_main": {
            "name": "test_main",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": [
                    "int",
                    "BaseException"
                ]
            }
        }
    },
    "t-main/2020-04-24-find-for-else/t.py": {
        "main": {
            "name": "main",
            "location": 19,
            "return": [
                "int",
                "str",
                "List[str]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "Visitor.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Visitor._visit_has_else": {
            "name": "_visit_has_else",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        }
    },
    "t-main/2020-07-25-simple-tokenize-rt-code-formatter/t.py": {
        "ast_parse": {
            "name": "ast_parse",
            "location": 30,
            "return": [
                "str",
                "Iterable[int]"
            ],
            "arguments": {
                "contents_text": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "_fix_calls": {
            "name": "_fix_calls",
            "location": 53,
            "return": [
                "str",
                "bool",
                "int",
                "Type",
                "Exception"
            ],
            "arguments": {
                "contents_text": [
                    "str"
                ]
            }
        },
        "_fix_file": {
            "name": "_fix_file",
            "location": 113,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 138,
            "return": [
                "int",
                "str",
                "List[str]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "argv": [
                    "List[str]",
                    "None",
                    "List",
                    "Optional[List[str]]",
                    "str"
                ]
            }
        },
        "Visitor.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Visitor.visit_Call": {
            "name": "visit_Call",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        }
    },
    "t-main/2022-03-21-cancellable-background-task-in-curses/t.py": {
        "c_main": {
            "name": "c_main",
            "location": 9,
            "return": [
                "str",
                "int",
                "bool",
                "Tuple[int, int]"
            ],
            "arguments": {
                "stdscr": [
                    "bool",
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 51,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        }
    },
    "t-main/2022-03-21-marquee-in-curses/t.py": {
        "c_main": {
            "name": "c_main",
            "location": 8,
            "return": [
                "int",
                "str",
                "bool",
                "Tuple[int,int]"
            ],
            "arguments": {
                "stdscr": [
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 23,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        }
    }
}
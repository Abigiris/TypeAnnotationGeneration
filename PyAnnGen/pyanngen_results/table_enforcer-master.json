{
    "table_enforcer-master/setup.py": {
        "filter_req_paths": {
            "name": "filter_req_paths",
            "location": 9,
            "return": [
                "list"
            ],
            "arguments": {
                "paths": [
                    "str",
                    "Optional[str]",
                    "pathlib.Path",
                    "Tuple[str]",
                    "bool"
                ],
                "func": [
                    "str"
                ]
            }
        },
        "is_pipable": {
            "name": "is_pipable",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "line": [
                    "bytes",
                    "str",
                    "Set[str]"
                ]
            }
        }
    },
    "table_enforcer-master/travis_pypi_setup.py": {
        "load_key": {
            "name": "load_key",
            "location": 28,
            "return": [
                "bytes",
                "str",
                "Dict[str, str]",
                "Optional[str]"
            ],
            "arguments": {
                "pubkey": [
                    "str"
                ]
            }
        },
        "encrypt": {
            "name": "encrypt",
            "location": 44,
            "return": [
                "bytes"
            ],
            "arguments": {
                "pubkey": [
                    "str",
                    "List[str]",
                    "Callable[[T],bool]",
                    "Callable[T,bool]",
                    "Optional[bytes]",
                    "bytes",
                    "None"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "fetch_public_key": {
            "name": "fetch_public_key",
            "location": 55,
            "return": [
                "str",
                "Tuple[Union[Any,Any,None]]",
                "Dict",
                "int",
                "Dict[str,str]"
            ],
            "arguments": {
                "repo": [
                    "str",
                    "Mapping[str,Any]",
                    "Mapping"
                ]
            }
        },
        "prepend_line": {
            "name": "prepend_line",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "Optional[str]"
                ],
                "line": [
                    "str",
                    "int",
                    "Mapping",
                    "Mapping[str,Any]",
                    "Iterator",
                    "Iterator[str]",
                    "Iterable"
                ]
            }
        },
        "load_yaml_config": {
            "name": "load_yaml_config",
            "location": 80,
            "return": [
                "bytes",
                "Callable",
                "Dict[str, Dict[str, str]]",
                "IO",
                "str",
                "dict"
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "save_yaml_config": {
            "name": "save_yaml_config",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "Dict[str,Any]"
                ],
                "config": [
                    "Dict[str,Any]"
                ]
            }
        },
        "update_travis_deploy_password": {
            "name": "update_travis_deploy_password",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "encrypted_password": [
                    "str",
                    "Dict"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "table_enforcer-master/docs/conf.py": {
        "run_apidoc": {
            "name": "run_apidoc",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [
                    "str",
                    "bool"
                ]
            }
        },
        "setup": {
            "name": "setup",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "Dict"
                ]
            }
        }
    },
    "table_enforcer-master/table_enforcer/errors.py": {
        "NotImplementedYet.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "bytes",
                    "None",
                    "int",
                    "str",
                    "Optional[List[str]]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "RecodingError.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "column": [
                    "Dict[str,Any]",
                    "str",
                    "Type",
                    "Optional[Dict[object,Any]]",
                    "Dict[object,Any]",
                    "Mapping[str,str]",
                    "None",
                    "Mapping"
                ],
                "recoder": [
                    "Dict[str,Any]",
                    "str",
                    "Type",
                    "Optional[Dict[object,Any]]",
                    "Dict[object,Any]",
                    "Mapping[str,str]",
                    "None",
                    "Mapping"
                ],
                "exception": [
                    "Dict[str,Any]",
                    "str",
                    "Type",
                    "Optional[Dict[object,Any]]",
                    "Dict[object,Any]",
                    "Mapping[str,str]",
                    "None",
                    "Mapping"
                ]
            }
        }
    },
    "table_enforcer-master/table_enforcer/main_classes.py": {
        "find_failed_rows": {
            "name": "find_failed_rows",
            "location": 22,
            "return": [
                "Any"
            ],
            "arguments": {
                "results": []
            }
        },
        "set_from_kwargs": {
            "name": "set_from_kwargs",
            "location": 27,
            "return": [
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "kwargs": [],
                "key": [
                    "str",
                    "typing.Iterable[typing.Hashable]",
                    "bytes"
                ],
                "default": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "Enforcer.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "columns": [
                    "int",
                    "str",
                    "float",
                    "list[str]"
                ]
            }
        },
        "Enforcer._make_validations": {
            "name": "_make_validations",
            "location": 42,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "int",
                    "typing.Type",
                    "list[typing.Union[int,float]]",
                    "str",
                    "list[int]"
                ]
            }
        },
        "Enforcer.validate": {
            "name": "validate",
            "location": 51,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "str",
                    "int"
                ]
            }
        },
        "Enforcer.recode": {
            "name": "recode",
            "location": 59,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "str",
                    "None",
                    "int"
                ],
                "validate": [
                    "bool"
                ]
            }
        },
        "BaseColumn.update_dataframe": {
            "name": "update_dataframe",
            "location": 80,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ],
                "table": [
                    "str",
                    "typing.Type",
                    "bool"
                ],
                "validate": [
                    "bool"
                ]
            }
        },
        "BaseColumn.validate": {
            "name": "validate",
            "location": 86,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "typing.Iterable[dict[str, typing.Any]]",
                    "str"
                ],
                "failed_only": [
                    "bool"
                ]
            }
        },
        "BaseColumn.recode": {
            "name": "recode",
            "location": 95,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "typing.Iterable[dict[str, typing.Any]]",
                    "str"
                ],
                "validate": [
                    "bool"
                ]
            }
        },
        "Column.__init__": {
            "name": "__init__",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None",
                    "typing.Sequence[typing.Any]"
                ],
                "dtype": [
                    "bool",
                    "list[str]"
                ],
                "unique": [
                    "bool",
                    "list[str]"
                ],
                "validators": [
                    "str",
                    "None",
                    "int",
                    "typing.Callable[, ]"
                ],
                "recoders": [
                    "str",
                    "None",
                    "int",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Column._dict_of_funcs": {
            "name": "_dict_of_funcs",
            "location": 135,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "funcs": [
                    "list[]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Column._validate_series_dtype": {
            "name": "_validate_series_dtype",
            "location": 139,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "series": []
            }
        },
        "Column._check_series_name": {
            "name": "_check_series_name",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "series": [
                    "str",
                    "None"
                ],
                "override_name": [
                    "None",
                    "str",
                    "typing.Sequence[str]"
                ]
            }
        },
        "Column.validate": {
            "name": "validate",
            "location": 152,
            "return": [
                "list[]",
                "typing.ItemsView"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "str",
                    "typing.Mapping",
                    "dict[, ]",
                    "Exception"
                ],
                "failed_only": [
                    "bool"
                ]
            }
        },
        "Column.recode": {
            "name": "recode",
            "location": 180,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "str",
                    "typing.Mapping",
                    "dict[, ]",
                    "Exception"
                ],
                "validate": [
                    "bool"
                ]
            }
        },
        "CompoundColumn.__init__": {
            "name": "__init__",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_columns": [
                    "int",
                    "float",
                    "dict[str, tuple[typing.Union[str,int,int]]]"
                ],
                "output_columns": [
                    "int",
                    "tuple[typing.Union[int,int,int]]"
                ],
                "column_transform": [
                    "int"
                ]
            }
        },
        "CompoundColumn._do_validation_set": {
            "name": "_do_validation_set",
            "location": 228,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "str",
                    "list[str]",
                    "bool",
                    "None",
                    "dict[str, dict[str, str]]"
                ],
                "columns": [],
                "validation_type": [
                    "str",
                    "list[str]",
                    "typing.Type"
                ],
                "failed_only": [
                    "bool"
                ]
            }
        },
        "CompoundColumn._validate_input": {
            "name": "_validate_input",
            "location": 243,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "int",
                    "collections.abc.AsyncIterable",
                    "typing.Iterable[typing.Any]",
                    "typing.Callable[, ]"
                ],
                "failed_only": [
                    "bool"
                ]
            }
        },
        "CompoundColumn._recode_set": {
            "name": "_recode_set",
            "location": 251,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "int",
                    "str",
                    "None",
                    "list[typing.Any]",
                    "tuple[]"
                ],
                "columns": [
                    "list[str]"
                ],
                "validate": [
                    "bool"
                ]
            }
        },
        "CompoundColumn._recode_input": {
            "name": "_recode_input",
            "location": 260,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "str",
                    "typing.Mapping",
                    "list[typing.Type]"
                ],
                "validate": [
                    "bool"
                ]
            }
        },
        "CompoundColumn._validate_output": {
            "name": "_validate_output",
            "location": 263,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "str",
                    "dict[str, typing.Any]",
                    "bool",
                    "list[str]"
                ],
                "failed_only": [
                    "bool"
                ]
            }
        },
        "CompoundColumn._recode_output": {
            "name": "_recode_output",
            "location": 271,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "str",
                    "dict[str, typing.Any]",
                    "bool",
                    "list[str]"
                ],
                "validate": [
                    "bool"
                ]
            }
        },
        "CompoundColumn.validate": {
            "name": "validate",
            "location": 275,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "str"
                ],
                "failed_only": [
                    "bool"
                ]
            }
        },
        "CompoundColumn.recode": {
            "name": "recode",
            "location": 287,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "float",
                    "dict[, ]",
                    "typing.Type",
                    "typing.IO"
                ],
                "validate": [
                    "bool"
                ]
            }
        }
    },
    "table_enforcer-master/table_enforcer/__init__.py": {},
    "table_enforcer-master/table_enforcer/utils/__init__.py": {},
    "table_enforcer-master/table_enforcer/utils/recode/decorators.py": {},
    "table_enforcer-master/table_enforcer/utils/recode/funcs.py": {
        "upper": {
            "name": "upper",
            "location": 11,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "series": [
                    "str",
                    "int",
                    "Dict",
                    "Union[int,str]"
                ]
            }
        },
        "lower": {
            "name": "lower",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "series": [
                    "int",
                    "str",
                    "Dict",
                    "Union[int,str]"
                ]
            }
        }
    },
    "table_enforcer-master/table_enforcer/utils/recode/__init__.py": {},
    "table_enforcer-master/table_enforcer/utils/validate/decorators.py": {
        "minmax": {
            "name": "minmax",
            "location": 5,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "low": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "high": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "choice": {
            "name": "choice",
            "location": 23,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "choices": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "bounded_length": {
            "name": "bounded_length",
            "location": 38,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "low": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ],
                "high": [
                    "str",
                    "None",
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "minmax.decorator": {
            "name": "decorator",
            "location": 7,
            "return": [],
            "arguments": {
                "function": []
            }
        },
        "choice.decorator": {
            "name": "decorator",
            "location": 25,
            "return": [],
            "arguments": {
                "function": []
            }
        },
        "bounded_length.decorator": {
            "name": "decorator",
            "location": 43,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "function": [
                    "Callable",
                    "bool",
                    "Callable[[T], Any]"
                ]
            }
        },
        "minmax.decorator.wrapper": {
            "name": "wrapper",
            "location": 10,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "choice.decorator.wrapper": {
            "name": "wrapper",
            "location": 28,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "bounded_length.decorator.wrapper": {
            "name": "wrapper",
            "location": 46,
            "return": [
                "int",
                "Optional[int]",
                "List[int]",
                "str"
            ],
            "arguments": {}
        }
    },
    "table_enforcer-master/table_enforcer/utils/validate/funcs.py": {
        "not_null": {
            "name": "not_null",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "series": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "positive": {
            "name": "positive",
            "location": 20,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "series": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "negative": {
            "name": "negative",
            "location": 25,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "series": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "unique": {
            "name": "unique",
            "location": 30,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "series": [
                    "pandas.Series"
                ]
            }
        },
        "upper": {
            "name": "upper",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "series": [
                    "str",
                    "int",
                    "Dict",
                    "Union[int,str]"
                ]
            }
        },
        "lower": {
            "name": "lower",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "series": [
                    "int",
                    "str",
                    "Dict",
                    "Union[int,str]"
                ]
            }
        }
    },
    "table_enforcer-master/table_enforcer/utils/validate/__init__.py": {},
    "table_enforcer-master/tests/conftest.py": {
        "sort_columns": {
            "name": "sort_columns",
            "location": 18,
            "return": [
                "pathlib.Path",
                "bytes",
                "int",
                "str"
            ],
            "arguments": {
                "df": [
                    "str",
                    "float",
                    "List[int]"
                ]
            }
        },
        "length_is_one": {
            "name": "length_is_one",
            "location": 22,
            "return": [
                "bool",
                "str",
                "Tuple[Tuple[int,...]]"
            ],
            "arguments": {
                "series": [
                    "str",
                    "int",
                    "Dict",
                    "Union[int,str]",
                    "pathlib.Path"
                ]
            }
        },
        "valid_sex": {
            "name": "valid_sex",
            "location": 26,
            "return": [
                "Callable[[str], bool]",
                "List[object]",
                "Optional[str]",
                "dict",
                "int"
            ],
            "arguments": {
                "series": [
                    "Callable[[str], bool]",
                    "List[object]",
                    "Optional[str]",
                    "dict",
                    "int"
                ]
            }
        },
        "standardize_sex": {
            "name": "standardize_sex",
            "location": 31,
            "return": [
                "Optional[int]",
                "int",
                "List[int]",
                "pathlib.Path",
                "str"
            ],
            "arguments": {
                "series": [
                    "str",
                    "bool"
                ]
            }
        },
        "demo_good_df": {
            "name": "demo_good_df",
            "location": 52,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "source_table": {
            "name": "source_table",
            "location": 57,
            "return": [
                "str",
                "pathlib.Path",
                "set"
            ],
            "arguments": {}
        },
        "col4": {
            "name": "col4",
            "location": 62,
            "return": [
                "str",
                "List[str]",
                "int",
                "Tuple[Union[str,str,str,str,str,str,str,str,str,str]]",
                "Dict",
                "Type"
            ],
            "arguments": {
                "col4_validators": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "col4_recoders": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "col4_validators": {
            "name": "col4_validators",
            "location": 69,
            "return": [
                "List",
                "int",
                "Dict[str,Dict[str,Any]]",
                "Tuple[int,int]",
                "str"
            ],
            "arguments": {}
        },
        "col4_recoders": {
            "name": "col4_recoders",
            "location": 74,
            "return": [
                "List",
                "str",
                "lib.Path"
            ],
            "arguments": {}
        },
        "col4_no_recoders": {
            "name": "col4_no_recoders",
            "location": 79,
            "return": [
                "str",
                "int",
                "List[str]",
                "Tuple[Union[str,str,str,str,str,str,str,str,str,str]]",
                "Tuple[int]",
                "bool",
                "Dict",
                "float"
            ],
            "arguments": {
                "col4_validators": [
                    "str",
                    "float",
                    "Optional[int]",
                    "int",
                    "None"
                ]
            }
        },
        "enforcer": {
            "name": "enforcer",
            "location": 86,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "col4": [
                    "bool",
                    "Iterable[str]",
                    "str",
                    "None",
                    "Optional[Iterable[str]]",
                    "Optional[T]",
                    "Tuple[type]",
                    "List",
                    "pandas.DataFrame",
                    "int"
                ]
            }
        }
    },
    "table_enforcer-master/tests/test_column.py": {
        "test_init": {
            "name": "test_init",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "col4": [
                    "str",
                    "Tuple[str]",
                    "List[str]"
                ]
            }
        },
        "test_column": {
            "name": "test_column",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "col4": [
                    "bool",
                    "str",
                    "List[str]"
                ],
                "col4_no_recoders": [
                    "int",
                    "Optional[str]",
                    "float",
                    "Dict[str, Any]",
                    "str"
                ],
                "source_table": [
                    "int",
                    "Callable"
                ]
            }
        }
    },
    "table_enforcer-master/tests/test_enforcer.py": {
        "test_init": {
            "name": "test_init",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "enforcer": [
                    "Iterable[tuple[Union[int,int]]]",
                    "Iterable[Tuple[int,int]]",
                    "Set"
                ]
            }
        },
        "test_enforcer": {
            "name": "test_enforcer",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "col4": [
                    "str",
                    "int",
                    "Sequence[str]",
                    "bool"
                ],
                "col4_no_recoders": [
                    "str",
                    "int",
                    "Sequence[str]",
                    "bool"
                ],
                "source_table": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "table_enforcer-master/tests/test_imports.py": {
        "test_import_Column": {
            "name": "test_import_Column",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_Enforcer": {
            "name": "test_import_Enforcer",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_validate": {
            "name": "test_import_validate",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_recode": {
            "name": "test_import_recode",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_ValidationError": {
            "name": "test_import_ValidationError",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "table_enforcer-master/tests/test_MTOColumn.py": {
        "is_subset": {
            "name": "is_subset",
            "location": 18,
            "return": [
                "bool",
                "List[int]",
                "Set[int]"
            ],
            "arguments": {
                "x": [
                    "numpy.ndarray",
                    "list",
                    "Iterable[int]",
                    "List[List[str]]"
                ],
                "ref_set": [
                    "AbstractSet[Any]",
                    "Iterator"
                ]
            }
        },
        "join_as_tuple": {
            "name": "join_as_tuple",
            "location": 31,
            "return": [
                "Dict[str, Dict[str, int]]",
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "df": [
                    "Tuple",
                    "Tuple[Union[str,str,str]]",
                    "Tuple[str,str,str]",
                    "float"
                ]
            }
        },
        "col6_valid_values": {
            "name": "col6_valid_values",
            "location": 44,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "series": [
                    "str",
                    "bool",
                    "List[str]",
                    "Dict[str,Any]"
                ]
            }
        },
        "col7_valid_values": {
            "name": "col7_valid_values",
            "location": 50,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "series": [
                    "str",
                    "bool",
                    "List[str]",
                    "Dict[str,Any]"
                ]
            }
        },
        "col8_valid_values": {
            "name": "col8_valid_values",
            "location": 56,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "series": [
                    "str",
                    "bool",
                    "List[str]",
                    "Dict[str,Any]"
                ]
            }
        },
        "col6_7_8_valid_values": {
            "name": "col6_7_8_valid_values",
            "location": 62,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "series": [
                    "str",
                    "bool",
                    "List[str]",
                    "Dict[str,Any]"
                ]
            }
        },
        "translate_col6": {
            "name": "translate_col6",
            "location": 69,
            "return": [
                "numpy.ndarray",
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "series": [
                    "int",
                    "str",
                    "numpy.ndarray",
                    "bool"
                ]
            }
        },
        "translate_col7": {
            "name": "translate_col7",
            "location": 79,
            "return": [
                "numpy.ndarray",
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "series": [
                    "int",
                    "str",
                    "numpy.ndarray",
                    "bool"
                ]
            }
        },
        "translate_col8": {
            "name": "translate_col8",
            "location": 89,
            "return": [
                "numpy.ndarray",
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "series": [
                    "int",
                    "str",
                    "numpy.ndarray",
                    "bool"
                ]
            }
        },
        "setify_drop_nones": {
            "name": "setify_drop_nones",
            "location": 99,
            "return": [
                "str",
                "Dict[str, int]",
                "Generator",
                "int"
            ],
            "arguments": {
                "series": [
                    "List[dict]",
                    "Set",
                    "List[tuple[Union[int,int]]]",
                    "[]",
                    "pandas.DataFrame",
                    "List[Tuple[int,int]]",
                    "numpy.ndarray"
                ]
            }
        },
        "col6": {
            "name": "col6",
            "location": 111,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "col7": {
            "name": "col7",
            "location": 122,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "col8": {
            "name": "col8",
            "location": 133,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "col6_7_8": {
            "name": "col6_7_8",
            "location": 145,
            "return": [
                "bool",
                "Sequence",
                "str"
            ],
            "arguments": {}
        },
        "col6_7_8_join": {
            "name": "col6_7_8_join",
            "location": 156,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "col6": [
                    "bool",
                    "List[int]",
                    "pandas.DataFrame",
                    "List[float]",
                    "bytes",
                    "int"
                ],
                "col7": [
                    "bool",
                    "List[int]",
                    "pandas.DataFrame",
                    "List[float]",
                    "bytes",
                    "int"
                ],
                "col8": [
                    "bool",
                    "List[int]",
                    "pandas.DataFrame",
                    "List[float]",
                    "bytes",
                    "int"
                ],
                "col6_7_8": [
                    "bool",
                    "List[int]",
                    "pandas.DataFrame",
                    "List[float]",
                    "bytes",
                    "int"
                ]
            }
        },
        "test_mto_column_init": {
            "name": "test_mto_column_init",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "col6_7_8_join": [
                    "int",
                    "float"
                ],
                "col6": [
                    "str",
                    "int",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None",
                    "bool"
                ],
                "col7": [
                    "str",
                    "int",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None",
                    "bool"
                ],
                "col8": [
                    "str",
                    "int",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None",
                    "bool"
                ],
                "col6_7_8": [
                    "str",
                    "Tuple[str]",
                    "Optional[str]",
                    "Sequence[str]",
                    "None"
                ]
            }
        },
        "test_mto_column_results": {
            "name": "test_mto_column_results",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "col6_7_8_join": [
                    "str",
                    "bool"
                ],
                "demo_good_df": [
                    "str",
                    "bool",
                    "List[numpy.array]",
                    "List[int]",
                    "Optional[str]",
                    "None"
                ],
                "valid_values": [
                    "str",
                    "int",
                    "Dict",
                    "bytes",
                    "BinaryIO"
                ]
            }
        },
        "valid_values": {
            "name": "valid_values",
            "location": 183,
            "return": [
                "Dict[Text,]",
                "str",
                "int",
                "Tuple[int,int]",
                "bool"
            ],
            "arguments": {}
        },
        "translate_col6.rcode": {
            "name": "rcode",
            "location": 72,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "translate_col7.rcode": {
            "name": "rcode",
            "location": 82,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "translate_col8.rcode": {
            "name": "rcode",
            "location": 92,
            "return": [
                "str",
                "Dict[str, Any]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "x": [
                    "numpy.ndarray",
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "setify_drop_nones.drop_nones": {
            "name": "drop_nones",
            "location": 102,
            "return": [
                "int",
                "str",
                "bool",
                "Tuple[int, int]"
            ],
            "arguments": {
                "x": [
                    "T",
                    "Optional[T]",
                    "Optional[str]",
                    "int",
                    "bool",
                    "Optional[List[Any]]",
                    "str"
                ]
            }
        }
    },
    "table_enforcer-master/tests/test_OTMColumn.py": {
        "no_bad_characters": {
            "name": "no_bad_characters",
            "location": 24,
            "return": [
                "str",
                "Iterable[numpy.dtype]",
                "Union[tuple, list]"
            ],
            "arguments": {
                "series": [
                    "List[int]",
                    "str",
                    "Union[str,Tuple[Any]]",
                    "int",
                    "Tuple[Any]",
                    "Optional[Any]",
                    "Any",
                    "None"
                ]
            }
        },
        "fix_bad_characters": {
            "name": "fix_bad_characters",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "series": [
                    "str",
                    "Optional[Any]",
                    "Any",
                    "List[int]",
                    "int",
                    "Union[str,Tuple[Any]]",
                    "None",
                    "Tuple[Any]",
                    "Union[int,List[int]]"
                ]
            }
        },
        "recode_upper": {
            "name": "recode_upper",
            "location": 45,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "series": [
                    "str",
                    "int",
                    "Union[int,List[int]]",
                    "List[int]"
                ]
            }
        },
        "to_int": {
            "name": "to_int",
            "location": 49,
            "return": [
                "numpy.ndarray",
                "float",
                "Dict[str, numpy.ndarray]",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "series": [
                    "float",
                    "numpy.ndarray",
                    "Dict[str,numpy.ndarray]",
                    "Dict",
                    "str",
                    "int"
                ]
            }
        },
        "to_str": {
            "name": "to_str",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "series": [
                    "str",
                    "dict",
                    "numpy.ndarray",
                    "bool",
                    "Callable"
                ]
            }
        },
        "split_on_colon": {
            "name": "split_on_colon",
            "location": 57,
            "return": [
                "list",
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "df": [
                    "None",
                    "bool",
                    "numpy.ndarray",
                    "str",
                    "Optional[numpy.ndarray]",
                    "pandas.Series"
                ]
            }
        },
        "col5": {
            "name": "col5",
            "location": 68,
            "return": [
                "str",
                "bool",
                "dict",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {}
        },
        "col5_a": {
            "name": "col5_a",
            "location": 82,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {}
        },
        "col5_b": {
            "name": "col5_b",
            "location": 94,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "col5_split": {
            "name": "col5_split",
            "location": 108,
            "return": [
                "str"
            ],
            "arguments": {
                "col5": [
                    "int",
                    "Optional[int]",
                    "float",
                    "None",
                    "str",
                    "Optional[float]"
                ],
                "col5_a": [
                    "int",
                    "Optional[int]",
                    "float",
                    "None",
                    "str",
                    "Optional[float]"
                ],
                "col5_b": [
                    "int",
                    "Optional[int]",
                    "float",
                    "None",
                    "str",
                    "Optional[float]"
                ]
            }
        },
        "test_OTMColumn_init": {
            "name": "test_OTMColumn_init",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "col5_split": [
                    "int",
                    "str"
                ],
                "col5": [
                    "int",
                    "float",
                    "bytes"
                ],
                "col5_a": [
                    "int",
                    "str",
                    "List[List[Any]]",
                    "List[list[Any]]"
                ],
                "col5_b": [
                    "int",
                    "str",
                    "List[List[Any]]",
                    "List[list[Any]]"
                ]
            }
        },
        "test_OTMColumn_results": {
            "name": "test_OTMColumn_results",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "col5_split": [
                    "Callable"
                ],
                "demo_good_df": [
                    "str",
                    "Union[str,float]",
                    "int",
                    "float",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ],
                "valid_values": [
                    "str",
                    "int",
                    "List",
                    "float",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "valid_values": {
            "name": "valid_values",
            "location": 146,
            "return": [
                "Dict[Text,]",
                "str",
                "int",
                "Tuple[int,int]",
                "bool"
            ],
            "arguments": {}
        },
        "no_bad_characters.test": {
            "name": "test",
            "location": 27,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "x": [
                    "float"
                ]
            }
        },
        "fix_bad_characters.fix": {
            "name": "fix",
            "location": 39,
            "return": [
                "numpy.ndarray",
                "int"
            ],
            "arguments": {
                "x": [
                    "T",
                    "bool",
                    "numpy.ndarray"
                ]
            }
        }
    },
    "table_enforcer-master/tests/test_table_enforcer.py": {
        "test_basic": {
            "name": "test_basic",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_raise_validationerror": {
            "name": "test_raise_validationerror",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_raise_recodingerror": {
            "name": "test_raise_recodingerror",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_problems_solved": {
            "name": "test_problems_solved",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "table_enforcer-master/tests/Usage_Demo.py": {
        "gte2": {
            "name": "gte2",
            "location": 10,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "series": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "lte10": {
            "name": "lte10",
            "location": 14,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "series": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "length_is_one": {
            "name": "length_is_one",
            "location": 18,
            "return": [
                "bool",
                "str",
                "Tuple[Tuple[int,...]]"
            ],
            "arguments": {
                "series": [
                    "str",
                    "int",
                    "Dict",
                    "Union[int,str]"
                ]
            }
        },
        "valid_sex": {
            "name": "valid_sex",
            "location": 22,
            "return": [
                "Callable[[str], bool]",
                "List[object]",
                "Optional[str]",
                "dict",
                "int"
            ],
            "arguments": {
                "series": [
                    "Callable[[str], bool]",
                    "List[object]",
                    "Optional[str]",
                    "dict",
                    "int"
                ]
            }
        },
        "bt_2_and_10": {
            "name": "bt_2_and_10",
            "location": 28,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[Context]"
            ],
            "arguments": {
                "series": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "standardize_sex": {
            "name": "standardize_sex",
            "location": 33,
            "return": [
                "Optional[int]",
                "int",
                "List[int]",
                "str"
            ],
            "arguments": {
                "series": [
                    "str",
                    "bool"
                ]
            }
        },
        "standardize_sex2": {
            "name": "standardize_sex2",
            "location": 53,
            "return": [
                "Optional[int]",
                "int",
                "List[int]",
                "str"
            ],
            "arguments": {
                "series": [
                    "str",
                    "bool"
                ]
            }
        },
        "load_csv": {
            "name": "load_csv",
            "location": 74,
            "return": [
                "numpy.ndarray",
                "int",
                "str",
                "Callable"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "enforcer": [
                    "str",
                    "Dict[str,Any]",
                    "numpy.ndarray"
                ]
            }
        },
        "handle_values_below_detection_limit": {
            "name": "handle_values_below_detection_limit",
            "location": 79,
            "return": [
                "int",
                "str",
                "Tuple[int, int]",
                "numpy.ndarray",
                "Tuple[str, int]",
                "T",
                "float"
            ],
            "arguments": {
                "series": [
                    "int",
                    "str",
                    "Tuple[int, int]",
                    "numpy.ndarray",
                    "Tuple[str, int]",
                    "T",
                    "float"
                ]
            }
        }
    },
    "table_enforcer-master/tests/__init__.py": {}
}
{
    "tabular-dataset-master/setup.py": {},
    "tabular-dataset-master/tabular_dataset/tabular_dataset.py": {
        "TabularDataset.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "Union[float, str]",
                    "int"
                ],
                "test_data": [
                    "bool",
                    "None",
                    "float",
                    "int"
                ],
                "numerical_columns": [
                    "Optional[List[str]]"
                ],
                "binary_columns": [
                    "Optional[List[str]]"
                ],
                "categorical_columns": [
                    "Optional[List[str]]"
                ],
                "datetime_columns": [
                    "Optional[List[str]]"
                ],
                "target_column": [
                    "Optional[str]"
                ],
                "target_columns": [
                    "Optional[List[str]]"
                ],
                "infer_column_types": [
                    "bool"
                ]
            }
        },
        "TabularDataset.__repr__": {
            "name": "__repr__",
            "location": 70,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TabularDataset.x": {
            "name": "x",
            "location": 91,
            "return": [
                "int",
                "List[int]",
                "Iterable['cirq.Qid']",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "TabularDataset.y": {
            "name": "y",
            "location": 95,
            "return": [
                "str",
                "Iterable[numpy.dtype]",
                "int",
                "Dict[str, Any]",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TabularDataset.x_train": {
            "name": "x_train",
            "location": 99,
            "return": [
                "float",
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TabularDataset.y_train": {
            "name": "y_train",
            "location": 103,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TabularDataset.x_test": {
            "name": "x_test",
            "location": 107,
            "return": [
                "Dict[str, Tuple[Any, Any]]",
                "Dict[str, Type[Any]]",
                "bool",
                "Dict[str, Any]",
                "Dict[str, Dict[str, str]]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "TabularDataset.y_test": {
            "name": "y_test",
            "location": 112,
            "return": [
                "bool",
                "int",
                "str",
                "pandas.Series"
            ],
            "arguments": {
                "self": []
            }
        },
        "TabularDataset.train_test_split": {
            "name": "train_test_split",
            "location": 116,
            "return": [
                "Tuple[(Any, Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "test_size": [
                    "float"
                ],
                "shuffle": [
                    "bool"
                ]
            }
        },
        "TabularDataset.split": {
            "name": "split",
            "location": 130,
            "return": [
                "Generator[(Tuple[(Any, Any, Any, Any)], Any, None)]"
            ],
            "arguments": {
                "self": [],
                "n_splits": [
                    "int"
                ],
                "random_state": [
                    "Optional[int]"
                ],
                "shuffle": [
                    "bool"
                ]
            }
        },
        "TabularDataset.num": {
            "name": "num",
            "location": 154,
            "return": [
                "int",
                "numpy.ndarray",
                "str",
                "deque"
            ],
            "arguments": {
                "self": []
            }
        },
        "TabularDataset.bin": {
            "name": "bin",
            "location": 158,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TabularDataset.cat": {
            "name": "cat",
            "location": 162,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TabularDataset.dt": {
            "name": "dt",
            "location": 166,
            "return": [
                "str",
                "int",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tabular-dataset-master/tabular_dataset/__init__.py": {},
    "tabular-dataset-master/tabular_dataset/columns/abstract_columns.py": {
        "AbstractColumns.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ds": [
                    "tabular_dataset.tabular_dataset.TabularDataset"
                ],
                "column_names": [
                    "List[str]"
                ]
            }
        },
        "AbstractColumns.__bool__": {
            "name": "__bool__",
            "location": 18,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractColumns.__len__": {
            "name": "__len__",
            "location": 21,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractColumns.transform": {
            "name": "transform",
            "location": 24,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Optional[pandas.DataFrame]",
                    "str",
                    "None",
                    "Optional[Dict[str, str]]",
                    "dict[str, str]",
                    "Union[None, int, str]",
                    "int"
                ],
                "test": [
                    "bool"
                ]
            }
        }
    },
    "tabular-dataset-master/tabular_dataset/columns/all_columns.py": {
        "AllColumns.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ds": [
                    "tabular_dataset.tabular_dataset.TabularDataset"
                ]
            }
        },
        "AllColumns.transform": {
            "name": "transform",
            "location": 16,
            "return": [
                "float",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "None",
                    "Iterable[bytes]",
                    "typing.Iterable[bytes]",
                    "bool",
                    "Iterable[T_co]",
                    "typing.Iterable[T]",
                    "pandas.core.frame.DataFrame",
                    "Optional[pandas.DataFrame]"
                ],
                "test": [
                    "bool"
                ]
            }
        },
        "AllColumns.column_names": {
            "name": "column_names",
            "location": 25,
            "return": [
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tabular-dataset-master/tabular_dataset/columns/binary_columns.py": {
        "BinaryColumns.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ds": [
                    "tabular_dataset.tabular_dataset.TabularDataset"
                ],
                "column_names": [
                    "List[str]"
                ]
            }
        },
        "BinaryColumns.encode": {
            "name": "encode",
            "location": 18,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "columns": [
                    "Optional[List[str]]",
                    "None",
                    "list[str]"
                ]
            }
        },
        "BinaryColumns.impute": {
            "name": "impute",
            "location": 22,
            "return": [
                "int",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "columns": [
                    "Optional[List[str]]",
                    "None",
                    "bool",
                    "list[str]",
                    "int"
                ],
                "add_columns": [
                    "bool",
                    "int",
                    "str",
                    "Dict[str, str]",
                    "tuple",
                    "Callable"
                ]
            }
        },
        "BinaryColumns.counts": {
            "name": "counts",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "columns": [
                    "Optional[List[str]]",
                    "None",
                    "list[str]"
                ]
            }
        },
        "BinaryColumns.frequencies": {
            "name": "frequencies",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "columns": [
                    "Optional[List[str]]",
                    "None",
                    "list[str]"
                ]
            }
        }
    },
    "tabular-dataset-master/tabular_dataset/columns/categorical_columns.py": {
        "CategoricalColumns.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ds": [
                    "tabular_dataset.tabular_dataset.TabularDataset"
                ],
                "column_names": [
                    "List[str]"
                ]
            }
        },
        "CategoricalColumns.impute": {
            "name": "impute",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "columns": [
                    "Optional[List[str]]",
                    "None",
                    "int",
                    "str",
                    "list[str]",
                    "List[List[float]]",
                    "bool",
                    "list[list[float]]"
                ],
                "method": [
                    "typing.Text",
                    "str",
                    "bool"
                ],
                "add_columns": [
                    "bool",
                    "str"
                ]
            }
        },
        "CategoricalColumns.encode": {
            "name": "encode",
            "location": 30,
            "return": [
                "Optional[int]",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "columns": [
                    "Optional[List[str]]",
                    "None",
                    "int",
                    "list[str]",
                    "bool",
                    "List[List[float]]",
                    "list[list[float]]",
                    "List[int]",
                    "list[int]"
                ],
                "add_unk_category": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "CategoricalColumns.hash": {
            "name": "hash",
            "location": 36,
            "return": [
                "int",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "columns": [
                    "Optional[List[str]]",
                    "None",
                    "int",
                    "float",
                    "list[str]",
                    "str",
                    "bool"
                ],
                "bins": [
                    "int",
                    "float"
                ]
            }
        },
        "CategoricalColumns.one_hot": {
            "name": "one_hot",
            "location": 42,
            "return": [
                "bytearray",
                "str"
            ],
            "arguments": {
                "self": [],
                "columns": [
                    "Optional[List[str]]",
                    "None",
                    "list[str]"
                ],
                "drop_first": [
                    "bool",
                    "str",
                    "Callable",
                    "Tuple[int, int]"
                ]
            }
        },
        "CategoricalColumns.counts": {
            "name": "counts",
            "location": 49,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "columns": [
                    "Optional[List[str]]",
                    "None",
                    "list[str]"
                ]
            }
        },
        "CategoricalColumns.frequencies": {
            "name": "frequencies",
            "location": 53,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "columns": [
                    "Optional[List[str]]",
                    "None",
                    "list[str]"
                ]
            }
        }
    },
    "tabular-dataset-master/tabular_dataset/columns/datetime_columns.py": {
        "DatetimeColumns.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ds": [
                    "tabular_dataset.tabular_dataset.TabularDataset"
                ],
                "column_names": [
                    "List[str]"
                ]
            }
        },
        "DatetimeColumns.impute": {
            "name": "impute",
            "location": 20,
            "return": [
                "bool",
                "int",
                "type",
                "str"
            ],
            "arguments": {
                "self": [],
                "columns": [
                    "Optional[List[str]]",
                    "None",
                    "bool",
                    "list[str]",
                    "int"
                ],
                "add_columns": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "DatetimeColumns.encode": {
            "name": "encode",
            "location": 26,
            "return": [
                "str",
                "float",
                "datetime.timedelta",
                "datetime.datetime",
                "datetime.timezone",
                "int"
            ],
            "arguments": {
                "self": [],
                "columns": [
                    "Optional[List[str]]",
                    "None",
                    "int",
                    "list[str]",
                    "bool"
                ],
                "datetime_components": [
                    "Optional[List[str]]",
                    "None",
                    "int",
                    "str",
                    "list[str]",
                    "datetime.datetime"
                ]
            }
        }
    },
    "tabular-dataset-master/tabular_dataset/columns/decorator.py": {
        "transformation": {
            "name": "transformation",
            "location": 4,
            "return": [
                "Callable"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "transformation.wrapper": {
            "name": "wrapper",
            "location": 5,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {}
        }
    },
    "tabular-dataset-master/tabular_dataset/columns/numerical_columns.py": {
        "NumericalColumns.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ds": [
                    "tabular_dataset.tabular_dataset.TabularDataset"
                ],
                "column_names": [
                    "List[str]"
                ]
            }
        },
        "NumericalColumns.impute": {
            "name": "impute",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "columns": [
                    "Optional[List[str]]",
                    "None",
                    "int",
                    "str",
                    "list[str]",
                    "List[List[float]]",
                    "bool",
                    "list[list[float]]"
                ],
                "method": [
                    "typing.Text",
                    "str",
                    "bool"
                ],
                "add_columns": [
                    "bool",
                    "str"
                ]
            }
        },
        "NumericalColumns.scale": {
            "name": "scale",
            "location": 29,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "columns": [
                    "Optional[List[str]]",
                    "None",
                    "list[str]"
                ]
            }
        },
        "NumericalColumns.normalize": {
            "name": "normalize",
            "location": 33,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "columns": [
                    "Optional[List[str]]",
                    "None",
                    "list[str]"
                ]
            }
        },
        "NumericalColumns.log": {
            "name": "log",
            "location": 37,
            "return": [
                "str",
                "list",
                "float",
                "Dict[str, Any]",
                "tuple",
                "Callable[..., None]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "columns": [
                    "Optional[List[str]]",
                    "None",
                    "T",
                    "list[str]",
                    "Optional[str]",
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "NumericalColumns.power": {
            "name": "power",
            "location": 41,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "exponent": [
                    "int",
                    "float",
                    "Optional[List[str]]",
                    "list[str]",
                    "None"
                ],
                "columns": [
                    "None",
                    "List[str]",
                    "bool",
                    "list[str]",
                    "Iterable",
                    "Optional[List[str]]"
                ]
            }
        },
        "NumericalColumns.ranks": {
            "name": "ranks",
            "location": 45,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "columns": [
                    "None",
                    "Optional[List[str]]",
                    "bool",
                    "list[str]",
                    "int",
                    "list[dict[, ]]",
                    "List[dict]",
                    "List[str]"
                ],
                "method": [
                    "typing.Text",
                    "Optional[str]",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "NumericalColumns.remove_outliers": {
            "name": "remove_outliers",
            "location": 50,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "columns": [
                    "Optional[List[str]]",
                    "None",
                    "list[str]"
                ]
            }
        }
    },
    "tabular-dataset-master/tabular_dataset/columns/target_columns.py": {
        "TargetColumns.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ds": [
                    "List[str]",
                    "str",
                    "list[str]"
                ],
                "column_names": [
                    "List[str]",
                    "str",
                    "list[str]"
                ]
            }
        },
        "TargetColumns.encode": {
            "name": "encode",
            "location": 14,
            "return": [
                "Optional[int]",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "add_unk_category": [
                    "int",
                    "bool"
                ]
            }
        },
        "TargetColumns.one_hot": {
            "name": "one_hot",
            "location": 19,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tabular-dataset-master/tabular_dataset/columns/__init__.py": {},
    "tabular-dataset-master/tabular_dataset/transformations/binary.py": {
        "impute": {
            "name": "impute",
            "location": 10,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "df": [
                    "list[str]",
                    "List[str]",
                    "list[typing.Union[int,str]]",
                    "list[]",
                    "pandas.DataFrame",
                    "List[Union[int, str]]",
                    "list",
                    "int"
                ],
                "columns": [
                    "int",
                    "List[str]",
                    "pandas.DataFrame",
                    "List[Union[int, str]]",
                    "list"
                ],
                "add_columns": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "Iterable[int]",
                    "str"
                ]
            }
        },
        "encode": {
            "name": "encode",
            "location": 20,
            "return": [
                "list[str]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "df": [
                    "list[str]",
                    "pandas.DataFrame",
                    "dict",
                    "List[str]"
                ],
                "columns": [
                    "list[str]",
                    "List[str]",
                    "bool",
                    "Iterable",
                    "Optional[List[str]]"
                ]
            }
        }
    },
    "tabular-dataset-master/tabular_dataset/transformations/categorical.py": {
        "impute": {
            "name": "impute",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "df": [
                    "str",
                    "list[str]",
                    "pandas.DataFrame",
                    "Optional[str]",
                    "List[str]",
                    "int",
                    "Union[int, float]"
                ],
                "columns": [
                    "List[str]"
                ],
                "impute_values": [
                    "list[]",
                    "list",
                    "list[str]",
                    "List[str]",
                    "bool",
                    "pandas.DataFrame"
                ],
                "method": [
                    "bool",
                    "None",
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "list[str]",
                    "Iterable[Tuple[str, str, str]]"
                ],
                "fit": [
                    "bool",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "str",
                    "Iterable[Tuple[str, str, str]]"
                ],
                "add_columns": [
                    "bool",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "str",
                    "Iterable[Tuple[str, str, str]]"
                ]
            }
        },
        "encode": {
            "name": "encode",
            "location": 44,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "df": [
                    "int",
                    "bool",
                    "float"
                ],
                "columns": [
                    "list[str]",
                    "bool",
                    "List[str]",
                    "str"
                ],
                "encoders": [
                    "pandas.DataFrame",
                    "int",
                    "Optional[str]",
                    "Optional[Set[str]]",
                    "str",
                    "bytes"
                ],
                "fit": [
                    "bool",
                    "int",
                    "List[Dict[str, Any]]",
                    "Dict[str, pandas.DataFrame]",
                    "str",
                    "List[List[int]]",
                    "list"
                ],
                "add_unk_category": [
                    "bool",
                    "List[str]",
                    "str"
                ]
            }
        },
        "hash": {
            "name": "hash",
            "location": 75,
            "return": [
                "Callable",
                "bytes",
                "T",
                "int",
                "IO"
            ],
            "arguments": {
                "df": [
                    "int",
                    "pandas.DataFrame",
                    "str"
                ],
                "columns": [
                    "list[str]",
                    "List[str]",
                    "bool",
                    "Iterable",
                    "Optional[List[str]]"
                ],
                "bins": [
                    "int",
                    "str",
                    "pandas.DataFrame"
                ]
            }
        },
        "one_hot": {
            "name": "one_hot",
            "location": 82,
            "return": [
                "int"
            ],
            "arguments": {
                "df": [
                    "bool",
                    "pandas.DataFrame",
                    "Optional[Dict[object, Any]]",
                    "\"MutableRangeSet[T]\"",
                    "Dict[str, Any]"
                ],
                "columns": [
                    "dict[str, typing.Any]",
                    "list[dict[str, int]]",
                    "int",
                    "bool",
                    "Optional[float]",
                    "Dict[str, Any]",
                    "List[Dict[str, int]]"
                ],
                "encoders": [
                    "int",
                    "pandas.DataFrame",
                    "str",
                    "Optional[str]",
                    "Optional[Set[str]]",
                    "bytes"
                ],
                "label_encoders": [
                    "None",
                    "str",
                    "numpy.ndarray",
                    "Optional[int]",
                    "Optional[str]",
                    "pandas.Series",
                    "Union[int, None]"
                ],
                "hash_bins": [
                    "str",
                    "None",
                    "bytes",
                    "bool",
                    "Optional[float]",
                    "float",
                    "List[str]",
                    "list[str]"
                ],
                "fit": [
                    "bool",
                    "str",
                    "Callable[..., None]",
                    "int"
                ],
                "drop_first": [
                    "bool",
                    "Iterable[str]",
                    "bytes",
                    "Iterable[Union[int, str]]"
                ]
            }
        },
        "counts": {
            "name": "counts",
            "location": 117,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "df": [
                    "pandas.DataFrame",
                    "bool"
                ],
                "columns": [
                    "list[str]",
                    "List[str]",
                    "bool",
                    "Iterable",
                    "Optional[List[str]]",
                    "numpy.array"
                ]
            }
        },
        "frequencies": {
            "name": "frequencies",
            "location": 125,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "df": [
                    "Dict[str, Any]",
                    "str",
                    "Mapping[str, Sequence[str]]"
                ],
                "columns": [
                    "list[str]",
                    "List[str]",
                    "bool",
                    "Iterable",
                    "Optional[List[str]]",
                    "numpy.array"
                ]
            }
        }
    },
    "tabular-dataset-master/tabular_dataset/transformations/common.py": {
        "add_imputed_columns": {
            "name": "add_imputed_columns",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "df": [
                    "str",
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]",
                    "Optional[Union[Any, Any]]",
                    "dict",
                    "bool"
                ],
                "columns": [
                    "List[str]"
                ]
            }
        }
    },
    "tabular-dataset-master/tabular_dataset/transformations/datetime.py": {
        "encode": {
            "name": "encode",
            "location": 9,
            "return": [
                "List[int]",
                "bool"
            ],
            "arguments": {
                "df": [
                    "pandas.DataFrame",
                    "str",
                    "dict",
                    "T"
                ],
                "columns": [
                    "list[str]",
                    "List[str]",
                    "int",
                    "Callable"
                ],
                "datetime_components": [
                    "int",
                    "None",
                    "Tuple[int, int]",
                    "Optional[int]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        }
    },
    "tabular-dataset-master/tabular_dataset/transformations/decorator.py": {
        "transformation": {
            "name": "transformation",
            "location": 4,
            "return": [
                "Callable"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "transformation.wrapper": {
            "name": "wrapper",
            "location": 5,
            "return": [
                "List[List[str]]"
            ],
            "arguments": {}
        }
    },
    "tabular-dataset-master/tabular_dataset/transformations/numerical.py": {
        "impute": {
            "name": "impute",
            "location": 13,
            "return": [],
            "arguments": {
                "df": [],
                "columns": [],
                "impute_values": [],
                "method": [
                    "None"
                ],
                "fit": [
                    "bool"
                ],
                "add_columns": [
                    "bool"
                ]
            }
        },
        "scale": {
            "name": "scale",
            "location": 48,
            "return": [],
            "arguments": {
                "df": [],
                "columns": [],
                "scalers": [],
                "fit": []
            }
        },
        "normalize": {
            "name": "normalize",
            "location": 63,
            "return": [],
            "arguments": {
                "df": [],
                "columns": [],
                "stats": [],
                "fit": []
            }
        },
        "log": {
            "name": "log",
            "location": 78,
            "return": [],
            "arguments": {
                "df": [],
                "columns": []
            }
        },
        "power": {
            "name": "power",
            "location": 89,
            "return": [],
            "arguments": {
                "df": [],
                "columns": [],
                "exponent": []
            }
        },
        "add_ranks": {
            "name": "add_ranks",
            "location": 96,
            "return": [],
            "arguments": {
                "df": [],
                "columns": [],
                "method": [
                    "typing.Text"
                ]
            }
        },
        "remove_outliers": {
            "name": "remove_outliers",
            "location": 129,
            "return": [],
            "arguments": {
                "df": [],
                "columns": [],
                "lower_percentile": [
                    "int"
                ],
                "upper_percentile": [
                    "int"
                ]
            }
        }
    },
    "tabular-dataset-master/tabular_dataset/transformations/__init__.py": {},
    "tabular-dataset-master/tests/test_all_columns.py": {
        "get_test_df": {
            "name": "get_test_df",
            "location": 9,
            "return": [
                "Callable[[T], List[T]]",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "test_column_names_are_correctly_set": {
            "name": "test_column_names_are_correctly_set",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_len_property": {
            "name": "test_len_property",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tabular-dataset-master/tests/test_binary_columns.py": {
        "get_test_df": {
            "name": "get_test_df",
            "location": 9,
            "return": [
                "Callable[[T], List[T]]",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "test_column_names_are_correctly_set": {
            "name": "test_column_names_are_correctly_set",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_encode": {
            "name": "test_encode",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_counts_without_nan_values": {
            "name": "test_counts_without_nan_values",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_counts_with_nan_values": {
            "name": "test_counts_with_nan_values",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_frequencies_without_nan_values": {
            "name": "test_frequencies_without_nan_values",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_frequencies_with_nan_values": {
            "name": "test_frequencies_with_nan_values",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_impute": {
            "name": "test_impute",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_impute_column": {
            "name": "test_impute_column",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tabular-dataset-master/tests/test_categorical_columns.py": {
        "get_test_df": {
            "name": "get_test_df",
            "location": 10,
            "return": [
                "IO",
                "str",
                "bool",
                "Optional[str]",
                "Callable[[], str]"
            ],
            "arguments": {}
        },
        "test_column_names_are_correctly_set": {
            "name": "test_column_names_are_correctly_set",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_encode": {
            "name": "test_encode",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_encode_with_selected_columns": {
            "name": "test_encode_with_selected_columns",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_encode_with_unseen_data_fails_without_unk_category": {
            "name": "test_encode_with_unseen_data_fails_without_unk_category",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_encode_with_unseen_data_succeeds_with_unk_category": {
            "name": "test_encode_with_unseen_data_succeeds_with_unk_category",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_encode_with_hashing": {
            "name": "test_encode_with_hashing",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_encode_one_hot": {
            "name": "test_encode_one_hot",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_encode_one_hot_drop_first": {
            "name": "test_encode_one_hot_drop_first",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_encode_one_hot_with_hashing": {
            "name": "test_encode_one_hot_with_hashing",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_counts_without_nan_values": {
            "name": "test_counts_without_nan_values",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_counts_with_nan_values": {
            "name": "test_counts_with_nan_values",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_frequencies_without_nan_values": {
            "name": "test_frequencies_without_nan_values",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_frequencies_with_nan_values": {
            "name": "test_frequencies_with_nan_values",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_impute_with_unk_token": {
            "name": "test_impute_with_unk_token",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_impute_with_mode": {
            "name": "test_impute_with_mode",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_impute_with_mode_no_fit": {
            "name": "test_impute_with_mode_no_fit",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_impute_column": {
            "name": "test_impute_column",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tabular-dataset-master/tests/test_datetime_columns.py": {
        "get_test_df": {
            "name": "get_test_df",
            "location": 10,
            "return": [
                "str",
                "Tuple[float, float]"
            ],
            "arguments": {}
        },
        "get_df_with_missing_values": {
            "name": "get_df_with_missing_values",
            "location": 19,
            "return": [
                "bool",
                "dict",
                "Mapping[str, Any]",
                "str",
                "numpy.ndarray"
            ],
            "arguments": {}
        },
        "test_column_names_are_correctly_set": {
            "name": "test_column_names_are_correctly_set",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_impute": {
            "name": "test_impute",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_impute_value_is_correctly_encoded": {
            "name": "test_impute_value_is_correctly_encoded",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_impute_with_test_data": {
            "name": "test_impute_with_test_data",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_encode_defaults_are_correct": {
            "name": "test_encode_defaults_are_correct",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_encode_with_custom_datetime_components": {
            "name": "test_encode_with_custom_datetime_components",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tabular-dataset-master/tests/test_numerical_columns.py": {
        "get_test_df": {
            "name": "get_test_df",
            "location": 9,
            "return": [
                "Callable[[T], List[T]]",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "test_column_names_are_correctly_set": {
            "name": "test_column_names_are_correctly_set",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_scale": {
            "name": "test_scale",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_scale_no_fit": {
            "name": "test_scale_no_fit",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_normalize": {
            "name": "test_normalize",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_normalize_no_fit": {
            "name": "test_normalize_no_fit",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_log": {
            "name": "test_log",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_power": {
            "name": "test_power",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ranks_with_default_method": {
            "name": "test_ranks_with_default_method",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ranks_with_dense_method": {
            "name": "test_ranks_with_dense_method",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_impute_with_median": {
            "name": "test_impute_with_median",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_impute_with_median_no_fit": {
            "name": "test_impute_with_median_no_fit",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_impute_with_mean": {
            "name": "test_impute_with_mean",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_impute_with_zero": {
            "name": "test_impute_with_zero",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_impute_column": {
            "name": "test_impute_column",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_remove_outliers": {
            "name": "test_remove_outliers",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fluent_api": {
            "name": "test_fluent_api",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tabular-dataset-master/tests/test_tabular_dataset_properties.py": {
        "get_test_df": {
            "name": "get_test_df",
            "location": 14,
            "return": [
                "Callable[[T], List[T]]",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "test_setting_both_target_column_and_target_columns_raises_exception": {
            "name": "test_setting_both_target_column_and_target_columns_raises_exception",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_infer_columns_types": {
            "name": "test_infer_columns_types",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_infer_columns_types_with_some_column_specified": {
            "name": "test_infer_columns_types_with_some_column_specified",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_repr": {
            "name": "test_repr",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_repr_with_multiple_target_columns": {
            "name": "test_repr_with_multiple_target_columns",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_x": {
            "name": "test_x",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_y": {
            "name": "test_y",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_x_train": {
            "name": "test_x_train",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_y_train": {
            "name": "test_y_train",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_x_test": {
            "name": "test_x_test",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_y_test": {
            "name": "test_y_test",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_getting_test_data_raises_exception_without_specified_test_data": {
            "name": "test_getting_test_data_raises_exception_without_specified_test_data",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_num_abbreviation": {
            "name": "test_num_abbreviation",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bin_abbreviation": {
            "name": "test_bin_abbreviation",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cat_abbreviation": {
            "name": "test_cat_abbreviation",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_train_test_split": {
            "name": "test_train_test_split",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_k_fold_cross_validation": {
            "name": "test_k_fold_cross_validation",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tabular-dataset-master/tests/test_target_columns.py": {
        "get_test_df": {
            "name": "get_test_df",
            "location": 10,
            "return": [
                "Callable[[T], List[T]]",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "test_column_names_are_correctly_set": {
            "name": "test_column_names_are_correctly_set",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_encode": {
            "name": "test_encode",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_encode_with_unseen_data_fails_without_unk_category": {
            "name": "test_encode_with_unseen_data_fails_without_unk_category",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_encode_with_unseen_data_succeeds_with_unk_category": {
            "name": "test_encode_with_unseen_data_succeeds_with_unk_category",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_encode_one_hot": {
            "name": "test_encode_one_hot",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_encode_one_hot_no_fit": {
            "name": "test_encode_one_hot_no_fit",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
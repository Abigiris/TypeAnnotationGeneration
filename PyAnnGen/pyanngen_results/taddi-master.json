{
    "taddi-master/taddi.py": {
        "CyclicDependencyError.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "interface": [
                    "str"
                ],
                "stack": [
                    "List[str]"
                ]
            }
        },
        "ImplementedError.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "interface": [
                    "str"
                ]
            }
        },
        "ImplementationInterfaceMismatchError.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "implementation": [
                    "str"
                ],
                "interface": [
                    "str"
                ]
            }
        },
        "UnimplementedError.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "interface": [
                    "str"
                ]
            }
        },
        "Injector.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Injector.implementation": {
            "name": "implementation",
            "location": 79,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "interface": [
                    "type"
                ]
            }
        },
        "Injector.interface": {
            "name": "interface",
            "location": 88,
            "return": [
                "type"
            ],
            "arguments": {
                "self": [],
                "interface_id": [
                    "str",
                    "int",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "Injector._register_interface": {
            "name": "_register_interface",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "interface": [
                    "type"
                ]
            }
        },
        "Injector.register_scoped": {
            "name": "register_scoped",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "interface": [
                    "type"
                ],
                "implementation": [
                    "type"
                ]
            }
        },
        "Injector.register_singleton": {
            "name": "register_singleton",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "interface": [
                    "type"
                ],
                "singleton": [
                    "type",
                    "typing.Type"
                ]
            }
        },
        "Injector.resolve": {
            "name": "resolve",
            "location": 120,
            "return": [
                "float",
                "list[int]",
                "str",
                "tuple[]",
                "dict[str, list[typing.Any]]"
            ],
            "arguments": {
                "self": [],
                "interface": [
                    "type"
                ],
                "stack": [
                    "Optional[List[type]]"
                ]
            }
        },
        "Injector.resolve_callable": {
            "name": "resolve_callable",
            "location": 140,
            "return": [
                "Callable[([], Any)]"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "str",
                    "list[str]",
                    "List[str]",
                    "list[]",
                    "list",
                    "None",
                    "Iterable[float]",
                    "Optional[str]"
                ]
            }
        }
    },
    "taddi-master/test.py": {
        "ComplexServiceImpl.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "simpleone_service": [
                    "SimpleOneService"
                ],
                "simpletwo_service": [
                    "SimpleTwoService"
                ]
            }
        },
        "Config.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CyclicServiceImpl.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cyclic_service": [
                    "CyclicService"
                ]
            }
        },
        "SimpleOneService.transmogrify": {
            "name": "transmogrify",
            "location": 67,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "SimpleOneServiceImpl.transmogrify": {
            "name": "transmogrify",
            "location": 71,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "SimpleTwoService.fiddle": {
            "name": "fiddle",
            "location": 75,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ]
            }
        },
        "SimpleTwoServiceImpl.fiddle": {
            "name": "fiddle",
            "location": 79,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ]
            }
        },
        "SuperComplexServiceImpl.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Config"
                ],
                "simpleone_service": [
                    "SimpleOneService"
                ],
                "simpletwo_service": [
                    "SimpleTwoService"
                ]
            }
        },
        "InjectorTestCase.testResolveComplexService": {
            "name": "testResolveComplexService",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InjectorTestCase.testResolveConfig": {
            "name": "testResolveConfig",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InjectorTestCase.testResolveSuperComplexService": {
            "name": "testResolveSuperComplexService",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InjectorTestCase.testResolveCallable": {
            "name": "testResolveCallable",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InjectorTestCase.testImplementedError": {
            "name": "testImplementedError",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InjectorTestCase.testImplementationInterfaceMismatchError": {
            "name": "testImplementationInterfaceMismatchError",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InjectorTestCase.testUnimplementedError": {
            "name": "testUnimplementedError",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InjectorTestCase.testCyclicDependencyError": {
            "name": "testCyclicDependencyError",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InjectorTestCase.testResolveCallable.inner": {
            "name": "inner",
            "location": 126,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "supercomplex_service": [
                    "Optional[int]",
                    "float",
                    "bool",
                    "Optional[str]",
                    "str"
                ]
            }
        }
    }
}
{
    "tai_quiz-master/quiz/manage.py": {
        "main": {
            "name": "main",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tai_quiz-master/quiz/__init__.py": {},
    "tai_quiz-master/quiz/accounts/admin.py": {},
    "tai_quiz-master/quiz/accounts/apps.py": {},
    "tai_quiz-master/quiz/accounts/models.py": {},
    "tai_quiz-master/quiz/accounts/urls.py": {},
    "tai_quiz-master/quiz/accounts/views.py": {
        "show_privacy_policy": {
            "name": "show_privacy_policy",
            "location": 23,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "typing.Callable[, ]",
                    "django.http.HttpRequest",
                    "Callable"
                ]
            }
        }
    },
    "tai_quiz-master/quiz/accounts/__init__.py": {},
    "tai_quiz-master/quiz/accounts/migrations/__init__.py": {},
    "tai_quiz-master/quiz/accounts/templates/__init__.py": {},
    "tai_quiz-master/quiz/accounts/tests/tests.py": {
        "AccountTestCase.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountTestCase.tearDown": {
            "name": "tearDown",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountTestCase.test_register": {
            "name": "test_register",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tai_quiz-master/quiz/accounts/tests/__init__.py": {},
    "tai_quiz-master/quiz/questions/admin.py": {},
    "tai_quiz-master/quiz/questions/apps.py": {},
    "tai_quiz-master/quiz/questions/forms.py": {
        "ChooseArticleForm.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "articles": [
                    "bool",
                    "str",
                    "float",
                    "Set[str]",
                    "set[str]"
                ]
            }
        }
    },
    "tai_quiz-master/quiz/questions/mediawiki_utils.py": {
        "find_article": {
            "name": "find_article",
            "location": 8,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "pageid": [
                    "dict",
                    "dict[, ]",
                    "Optional[Dict[str, str]]",
                    "dict[str, str]",
                    "Optional[Dict[str, Any]]",
                    "None"
                ]
            }
        },
        "find_articles_list": {
            "name": "find_articles_list",
            "location": 28,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "key_word": [
                    "str",
                    "int"
                ]
            }
        },
        "get_article_and_views": {
            "name": "get_article_and_views",
            "location": 45,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "pageid": [
                    "str",
                    "bool"
                ],
                "year": [
                    "str",
                    "Optional[int]",
                    "int",
                    "None"
                ],
                "month": [
                    "int",
                    "str",
                    "Optional[int]"
                ]
            }
        }
    },
    "tai_quiz-master/quiz/questions/models.py": {},
    "tai_quiz-master/quiz/questions/urls.py": {},
    "tai_quiz-master/quiz/questions/views.py": {
        "create_question": {
            "name": "create_question",
            "location": 13,
            "return": [
                "Dict[str, str]",
                "Dict[int, Set[str]]",
                "zerver.models.Message",
                "bytes",
                "str",
                "jfinances.models.TransactionModel"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ],
                "quiz_id": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "create_question_title": {
            "name": "create_question_title",
            "location": 28,
            "return": [
                "str",
                "dict",
                "bool",
                "models.Dashboard",
                "Optional[Dict]",
                "excars.models.rides.Ride.Request"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "zerver.models.UserProfile"
                ],
                "article_id": [
                    "int",
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]",
                    "raiden.messages.Message"
                ],
                "question_id": [
                    "str"
                ]
            }
        },
        "replace_word": {
            "name": "replace_word",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "form": [
                    "str",
                    "bool",
                    "Optional[float]",
                    "float",
                    "None"
                ],
                "question": [
                    "str",
                    "bool"
                ]
            }
        },
        "initialize_question": {
            "name": "initialize_question",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "article_id": [
                    "str"
                ],
                "question": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "create_question_type_statistics": {
            "name": "create_question_type_statistics",
            "location": 73,
            "return": [
                "str"
            ],
            "arguments": {
                "request": [
                    "str",
                    "int",
                    "django.http.HttpRequest"
                ],
                "article_id": [
                    "bool",
                    "None",
                    "zerver.models.UserProfile",
                    "int",
                    "Optional[bool]",
                    "tracim.models.auth.User"
                ],
                "question_id": [
                    "str",
                    "int",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "fill_stat_type_question": {
            "name": "fill_stat_type_question",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "article_id": [
                    "str",
                    "int",
                    "bool"
                ],
                "found_article": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "Optional[float]"
                ],
                "found_date": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "question": [
                    "str",
                    "None",
                    "Optional[str]",
                    "tuple[typing.Union[str,str]]",
                    "dict[typing.Union[str,None], str]",
                    "T",
                    "dict[UserID, services.user.transfer.models.User]",
                    "Optional[Tuple[str, str]]",
                    "zerver.models.Realm",
                    "Dict[Optional[str], str]",
                    "Dict[UserID, services.user.transfer.models.User]"
                ]
            }
        },
        "choose_question_type": {
            "name": "choose_question_type",
            "location": 115,
            "return": [
                "int",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "zerver.models.UserProfile"
                ],
                "article_id": [
                    "str",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.http.HttpRequest"
                ],
                "question_id": [
                    "int",
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        },
        "list_questions": {
            "name": "list_questions",
            "location": 128,
            "return": [
                "int",
                "bytes",
                "dict",
                "Dict[str, tonga.models.structs.positioning.BasePositioning]",
                "Dict[str, int]",
                "bool"
            ],
            "arguments": {
                "request": [
                    "str",
                    "bool",
                    "dict[, ]",
                    "dict",
                    "django.http.HttpRequest"
                ],
                "quiz_id": [
                    "int"
                ]
            }
        },
        "delete_question": {
            "name": "delete_question",
            "location": 147,
            "return": [
                "Mapping[str, Any]",
                "app.models.GameMember",
                "app.models.course.Course",
                "bytes",
                "zerver.models.UserProfile",
                "models.UserAuth",
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "request": [
                    "int",
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ],
                "quiz_id": [
                    "int",
                    "django.http.HttpRequest"
                ],
                "question_id": [
                    "int"
                ]
            }
        },
        "choose_best_article": {
            "name": "choose_best_article",
            "location": 157,
            "return": [
                "str",
                "Callable",
                "dict",
                "Iterable[str]",
                "int",
                "IO[str]",
                "bool"
            ],
            "arguments": {
                "request": [
                    "dict[int, zam_repondeur.models.Amendement]",
                    "zerver.models.UserProfile",
                    "django.http.HttpRequest",
                    "zam_repondeur.models.Lecture",
                    "django.http.requesHttpRequest",
                    "preacher.core.requesRequest",
                    "Dict[int, zam_repondeur.models.Amendement]"
                ],
                "quiz_id": [
                    "str",
                    "FrozenSet[bytes]",
                    "frozenset",
                    "dict",
                    "dict[, ]"
                ],
                "key_word": [
                    "bytes",
                    "str",
                    "int",
                    "List[tracim.models.data.Content]",
                    "list[C]",
                    "dict",
                    "dict[, ]",
                    "List[List[Any]]",
                    "list[list[typing.Any]]"
                ]
            }
        }
    },
    "tai_quiz-master/quiz/questions/__init__.py": {},
    "tai_quiz-master/quiz/questions/migrations/__init__.py": {},
    "tai_quiz-master/quiz/questions/tests/tests.py": {
        "EditButtonClass.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EditButtonClass.tearDown": {
            "name": "tearDown",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EditButtonClass.test_button_edit_title": {
            "name": "test_button_edit_title",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EditButtonClass.test_button_edit_stat": {
            "name": "test_button_edit_stat",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tai_quiz-master/quiz/questions/tests/__init__.py": {},
    "tai_quiz-master/quiz/quiz/settings.py": {},
    "tai_quiz-master/quiz/quiz/urls.py": {},
    "tai_quiz-master/quiz/quiz/wsgi.py": {},
    "tai_quiz-master/quiz/quiz/__init__.py": {},
    "tai_quiz-master/quiz/quizzes/admin.py": {},
    "tai_quiz-master/quiz/quizzes/apps.py": {},
    "tai_quiz-master/quiz/quizzes/forms.py": {
        "ChooseArticleForm.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "articles": [
                    "bool",
                    "str",
                    "float",
                    "Set[str]",
                    "set[str]"
                ]
            }
        },
        "EnterAnswerGuess.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FilterQuizForm.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tai_quiz-master/quiz/quizzes/models.py": {
        "Player.__str__": {
            "name": "__str__",
            "location": 16,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Quiz.__str__": {
            "name": "__str__",
            "location": 29,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Question.__str__": {
            "name": "__str__",
            "location": 55,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tai_quiz-master/quiz/quizzes/urls.py": {},
    "tai_quiz-master/quiz/quizzes/views.py": {
        "index": {
            "name": "index",
            "location": 14,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "_request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "create_quiz": {
            "name": "create_quiz",
            "location": 20,
            "return": [
                "HttpResponse",
                "str",
                "app.models.GameMember",
                "app.models.course.Course",
                "app.models.Tweet",
                "app.models.Position"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "models.WalletRequest"
                ]
            }
        },
        "list_player_quizzes": {
            "name": "list_player_quizzes",
            "location": 36,
            "return": [
                "int",
                "bool",
                "bytes",
                "dict",
                "Dict[str, tonga.models.structs.positioning.BasePositioning]",
                "Dict[str, int]",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        },
        "choose_quiz_to_play": {
            "name": "choose_quiz_to_play",
            "location": 64,
            "return": [
                "Dict[str, Any]",
                "int",
                "Dict[str, float]",
                "bytes"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "open_quiz": {
            "name": "open_quiz",
            "location": 95,
            "return": [
                "int",
                "dict",
                "bool",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "zerver.models.UserProfile"
                ],
                "quiz_id": [
                    "int",
                    "str"
                ]
            }
        },
        "solve_quiz": {
            "name": "solve_quiz",
            "location": 104,
            "return": [
                "int",
                "str",
                "Dict[str, Any]",
                "dict",
                "Callable"
            ],
            "arguments": {
                "request": [
                    "bytes",
                    "django.http.HttpRequest",
                    "zerver.models.UserProfile"
                ],
                "quiz_id": [
                    "str",
                    "int"
                ]
            }
        },
        "delete_quiz": {
            "name": "delete_quiz",
            "location": 125,
            "return": [
                "str",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "request": [
                    "int",
                    "str",
                    "django.http.HttpRequest"
                ],
                "quiz_id": [
                    "int",
                    "str",
                    "zerver.models.UserProfile",
                    "django.http.HttpRequest"
                ]
            }
        },
        "add_score_for_question": {
            "name": "add_score_for_question",
            "location": 135,
            "return": [
                "bool",
                "float",
                "str",
                "int"
            ],
            "arguments": {
                "cleaned_data": [
                    "dict[, ]",
                    "dict",
                    "int",
                    "dict[str, typing.Any]",
                    "str",
                    "Dict[str, Any]",
                    "story.models.Character",
                    "None",
                    "dict[str, dict[str, str]]",
                    "Optional[str]",
                    "Dict[str, Dict[str, str]]",
                    "story.models.Author"
                ],
                "form": [
                    "dict[, ]",
                    "dict",
                    "str",
                    "dict[str, typing.Any]",
                    "story.models.Author",
                    "dict[str, dict[str, str]]",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, str]]",
                    "static_frame.core.display.Display"
                ],
                "score": [
                    "typing.Any",
                    "Optional[Any]",
                    "str",
                    "None",
                    "int",
                    "zam_repondeur.models.Article",
                    "list[bytes]",
                    "List[bytes]",
                    "dict[str, typing.Any]",
                    "Optional[str]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "tai_quiz-master/quiz/quizzes/__init__.py": {},
    "tai_quiz-master/quiz/quizzes/migrations/0001_initial.py": {},
    "tai_quiz-master/quiz/quizzes/migrations/0002_quiz_category.py": {},
    "tai_quiz-master/quiz/quizzes/migrations/0003_question_type.py": {},
    "tai_quiz-master/quiz/quizzes/migrations/0004_question_article_id.py": {},
    "tai_quiz-master/quiz/quizzes/migrations/0005_quiz_question_number.py": {},
    "tai_quiz-master/quiz/quizzes/migrations/0006_auto_20190530_0927.py": {},
    "tai_quiz-master/quiz/quizzes/migrations/0007_remove_quiz_questions_amount.py": {},
    "tai_quiz-master/quiz/quizzes/migrations/__init__.py": {},
    "tai_quiz-master/quiz/quizzes/tests/tests.py": {
        "FilterTestClass.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FilterTestClass.tearDown": {
            "name": "tearDown",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FilterTestClass.test_name_filter_page": {
            "name": "test_name_filter_page",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FilterTestClass.test_author_filter_page": {
            "name": "test_author_filter_page",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FilterTestClass.test_category_filter_page": {
            "name": "test_category_filter_page",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FilterTestClass.test_topic_filter_page": {
            "name": "test_topic_filter_page",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FilterTestClass.test_topic_and_author_filter_page": {
            "name": "test_topic_and_author_filter_page",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateLinkTestClass.setUp": {
            "name": "setUp",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateLinkTestClass.tearDown": {
            "name": "tearDown",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateLinkTestClass.test_link": {
            "name": "test_link",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateLinkForLoggedTestClass.setUp": {
            "name": "setUp",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateLinkForLoggedTestClass.tearDown": {
            "name": "tearDown",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateLinkForLoggedTestClass.test_link": {
            "name": "test_link",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SolveTestClass.setUp": {
            "name": "setUp",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SolveTestClass.tearDown": {
            "name": "tearDown",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SolveTestClass.test_quiz_solving": {
            "name": "test_quiz_solving",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tai_quiz-master/quiz/quizzes/tests/__init__.py": {}
}
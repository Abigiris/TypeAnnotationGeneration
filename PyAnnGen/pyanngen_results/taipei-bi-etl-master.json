{
    "taipei-bi-etl-master/etl.py": {
        "main": {
            "name": "main",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "taipei-bi-etl-master/configs/adjust.py": {},
    "taipei-bi-etl-master/configs/bigquery.py": {},
    "taipei-bi-etl-master/configs/revenue.py": {},
    "taipei-bi-etl-master/configs/rps.py": {},
    "taipei-bi-etl-master/configs/__init__.py": {},
    "taipei-bi-etl-master/configs/debug/adjust.py": {},
    "taipei-bi-etl-master/configs/debug/bigquery.py": {
        "set_debug_config": {
            "name": "set_debug_config",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "taipei-bi-etl-master/configs/debug/revenue.py": {},
    "taipei-bi-etl-master/configs/debug/rps.py": {},
    "taipei-bi-etl-master/configs/debug/__init__.py": {},
    "taipei-bi-etl-master/configs/staging/adjust.py": {},
    "taipei-bi-etl-master/configs/staging/bigquery.py": {
        "set_debug_config": {
            "name": "set_debug_config",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "taipei-bi-etl-master/configs/staging/revenue.py": {},
    "taipei-bi-etl-master/configs/staging/rps.py": {},
    "taipei-bi-etl-master/configs/staging/__init__.py": {},
    "taipei-bi-etl-master/configs/test/adjust.py": {},
    "taipei-bi-etl-master/configs/test/bigquery.py": {},
    "taipei-bi-etl-master/configs/test/revenue.py": {},
    "taipei-bi-etl-master/configs/test/rps.py": {},
    "taipei-bi-etl-master/configs/test/__init__.py": {},
    "taipei-bi-etl-master/dags/__init__.py": {},
    "taipei-bi-etl-master/tasks/adjust.py": {
        "main": {
            "name": "main",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "AdjustEtlTask.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "sources": [
                    "Dict[str,Any]",
                    "List[tuple[Union[str,numpy.generic]]]",
                    "argparse.Namespace",
                    "List[Tuple[str,numpy.generic]]"
                ],
                "schema": [
                    "Dict[str,Any]",
                    "List[tuple[Union[str,numpy.generic]]]",
                    "argparse.Namespace",
                    "List[Tuple[str,numpy.generic]]"
                ],
                "destinations": [
                    "Dict[str,Any]",
                    "List[tuple[Union[str,numpy.generic]]]",
                    "argparse.Namespace",
                    "List[Tuple[str,numpy.generic]]"
                ]
            }
        },
        "AdjustEtlTask.transform_adjust_trackers": {
            "name": "transform_adjust_trackers",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "adjust_trackers": [
                    "Dict",
                    "str",
                    "int",
                    "recidiviz.calculator.pipeline.utils.incarceration_period_index.IncarcerationPeriodIndex",
                    "None",
                    "datetime.date",
                    "Optional[str]"
                ]
            }
        }
    },
    "taipei-bi-etl-master/tasks/base.py": {
        "EtlTask.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "sources": [
                    "str",
                    "Dict[str,Any]",
                    "defaultdict",
                    "int",
                    "cmk.utils.type_defs.ServiceName"
                ],
                "schema": [
                    "str",
                    "cmk.utils.type_defs.ServiceName",
                    "Exception"
                ],
                "destinations": [
                    "str",
                    "Dict[str,Any]",
                    "Dict",
                    "Optional[str]"
                ],
                "stage": [
                    "str",
                    "Dict[str,Any]",
                    "Dict",
                    "Optional[str]",
                    "None"
                ],
                "task": [
                    "str",
                    "Dict[str,Any]",
                    "Dict",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "EtlTask.get_filepaths": {
            "name": "get_filepaths",
            "location": 102,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "datetime.datetime"
                ],
                "config": [
                    "str",
                    "Dict[str,Any]",
                    "Mapping[str,str]",
                    "baseplate.lib.config.RawConfig",
                    "bool"
                ],
                "stage": [
                    "str",
                    "datetime.datetime"
                ],
                "dest": [
                    "str",
                    "datetime.datetime"
                ],
                "date": [
                    "str",
                    "None",
                    "datetime.datetime"
                ]
            }
        },
        "EtlTask.get_filepath": {
            "name": "get_filepath",
            "location": 141,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "datetime.datetime"
                ],
                "config": [
                    "str",
                    "Dict[str,Any]"
                ],
                "stage": [
                    "str",
                    "datetime.datetime"
                ],
                "dest": [
                    "str",
                    "Sequence[str]",
                    "Optional[str]",
                    "None"
                ],
                "page": [
                    "str",
                    "None",
                    "Optional[str]",
                    "Optional[Any]",
                    "bool"
                ],
                "date": [
                    "str",
                    "None",
                    "datetime.datetime"
                ]
            }
        },
        "EtlTask.get_dest_ext": {
            "name": "get_dest_ext",
            "location": 185,
            "return": [
                "Text",
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "self": [],
                "destinations": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "EtlTask.get_filename": {
            "name": "get_filename",
            "location": 192,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "List[google.cloud.bigquery.ScalarQueryParameter]",
                    "datetime.date"
                ],
                "config": [
                    "str",
                    "List[str]",
                    "Optional[int]",
                    "Optional[List[str]]"
                ],
                "stage": [
                    "str",
                    "List[google.cloud.bigquery.ScalarQueryParameter]",
                    "datetime.date"
                ],
                "dest": [
                    "str",
                    "List[google.cloud.bigquery.ScalarQueryParameter]",
                    "datetime.date"
                ],
                "page": [
                    "str",
                    "None",
                    "int",
                    "Optional[datetime.datetime]",
                    "Optional[str]",
                    "bool",
                    "Optional[datetime.date]"
                ],
                "date": [
                    "str",
                    "None",
                    "datetime.date",
                    "datetime.datetime",
                    "Optional[str]"
                ]
            }
        },
        "EtlTask.get_latest_filepath": {
            "name": "get_latest_filepath",
            "location": 238,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "int",
                    "Union[int,str]",
                    "baseplate.lib.config.RawConfig"
                ],
                "config": [
                    "Dict[str,Any]",
                    "bool",
                    "str",
                    "List",
                    "Optional[bytes]",
                    "bytes",
                    "None"
                ],
                "stage": [
                    "str",
                    "int",
                    "Union[int,str]",
                    "baseplate.lib.config.RawConfig"
                ],
                "dest": [
                    "str",
                    "int",
                    "Union[int,str]",
                    "baseplate.lib.config.RawConfig"
                ]
            }
        },
        "EtlTask.get_or_create_filepath": {
            "name": "get_or_create_filepath",
            "location": 250,
            "return": [
                "str",
                "numpy.ndarray",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "config": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "stage": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "dest": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "page": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]"
                ],
                "date": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "EtlTask.is_cached": {
            "name": "is_cached",
            "location": 286,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "Dict",
                    "str",
                    "Type",
                    "Type[BaseConfig]",
                    "logging.Logger"
                ],
                "config": [
                    "Dict",
                    "str",
                    "Type",
                    "Type[BaseConfig]",
                    "logging.Logger"
                ],
                "stage": [
                    "Text",
                    "Dict",
                    "str",
                    "Type[BaseConfig]",
                    "logging.Logger"
                ]
            }
        },
        "EtlTask.get_target_dataframe": {
            "name": "get_target_dataframe",
            "location": 304,
            "return": [
                "DataFrame",
                "bytes",
                "Dict[str,Any]",
                "str",
                "Callable",
                "Optional[str]",
                "Callable[[str],T]"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "int",
                    "None",
                    "Dict[str,Any]",
                    "str",
                    "raiden.utils.Any"
                ]
            }
        },
        "EtlTask.extract_via_fs": {
            "name": "extract_via_fs",
            "location": 318,
            "return": [
                "None",
                "float",
                "Dict",
                "int",
                "Iterable[Iterable[T]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "Dict[str, Any]",
                    "str"
                ],
                "config": [
                    "str",
                    "Dict[str,Any]",
                    "Dict"
                ],
                "stage": [
                    "Text",
                    "Dict[str,Any]",
                    "str"
                ],
                "date": [
                    "Dict[str,Any]",
                    "str",
                    "None"
                ]
            }
        },
        "EtlTask.extract_via_gcs": {
            "name": "extract_via_gcs",
            "location": 387,
            "return": [
                "DataFrame",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "bytes"
                ],
                "config": [
                    "str",
                    "Dict[str,Any]",
                    "cmk.utils.type_defs.SectionName"
                ],
                "stage": [
                    "bytes",
                    "Text"
                ],
                "date": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Dict[str,Any]"
                ]
            }
        },
        "EtlTask.extract_via_api": {
            "name": "extract_via_api",
            "location": 450,
            "return": [
                "str",
                "Iterable",
                "Callable",
                "cmk.utils.type_defs.HostName",
                "cmk.utils.type_defs.ServiceName",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "bool",
                    "OSError",
                    "T"
                ],
                "config": [
                    "str",
                    "datetime.datetime",
                    "datetime",
                    "bool"
                ],
                "stage": [
                    "Text",
                    "str",
                    "int",
                    "bool",
                    "List[dict]"
                ],
                "date": [
                    "None",
                    "str",
                    "datetime.datetime",
                    "bool",
                    "datetime"
                ]
            }
        },
        "EtlTask.extract_via_bq": {
            "name": "extract_via_bq",
            "location": 559,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "Dict[str,Any]",
                    "str",
                    "Dict",
                    "Tuple[Union[int,int,int]]",
                    "Tuple[int,int,int]",
                    "Tuple[Type]",
                    "sqlalchemy.Column",
                    "Tuple[type]"
                ],
                "config": [
                    "str",
                    "Tuple[Union[int,int,int]]",
                    "Dict[str,Any]",
                    "List[S]",
                    "Dict",
                    "Optional[Any]",
                    "Tuple[int,int,int]",
                    "cmk.utils.type_defs.SectionName",
                    "List[RunnerState]"
                ],
                "stage": [
                    "Text",
                    "str",
                    "datetime.date",
                    "float"
                ],
                "date": [
                    "Dict[str,Any]",
                    "None",
                    "List[str]",
                    "pandas.Series",
                    "bytes"
                ]
            }
        },
        "EtlTask.extract_via_const": {
            "name": "extract_via_const",
            "location": 595,
            "return": [
                "DataFrame",
                "Optional[int]",
                "revlibs.connections.config.Config",
                "qutebrowser.config.config.Config",
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "source": [
                    "str",
                    "Dict[str,Any]",
                    "bool"
                ],
                "config": [
                    "Dict[str, Any]",
                    "config.Config",
                    "dict",
                    "Mapping[str, Any]"
                ]
            }
        },
        "EtlTask.extract": {
            "name": "extract",
            "location": 609,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EtlTask.transform": {
            "name": "transform",
            "location": 632,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EtlTask.load_to_fs": {
            "name": "load_to_fs",
            "location": 686,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "int",
                    "Dict",
                    "str",
                    "Dict[str,List[str]]",
                    "Callable"
                ],
                "config": [
                    "dict",
                    "Optional[Iterable[str]]",
                    "config.Config"
                ],
                "stage": [
                    "Text",
                    "Dict",
                    "Optional[Iterable[str]]",
                    "Dict[str,List[str]]",
                    "int"
                ]
            }
        },
        "EtlTask.convert_file": {
            "name": "convert_file",
            "location": 758,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "str",
                    "int",
                    "Optional[float]",
                    "float",
                    "None",
                    "AsyncIterator[T]",
                    "collections.abc.AsyncIterator"
                ],
                "config": [
                    "str",
                    "Optional[str]",
                    "Dict",
                    "None",
                    "Optional[bool]",
                    "bool"
                ],
                "source": [
                    "str",
                    "Optional[str]",
                    "Dict",
                    "None",
                    "Optional[bool]",
                    "bool"
                ],
                "stage": [
                    "str",
                    "Optional[str]",
                    "Dict",
                    "None",
                    "Optional[bool]",
                    "bool"
                ],
                "date": [
                    "None",
                    "Optional[str]",
                    "bool",
                    "str",
                    "Optional[bool]",
                    "Optional[datetime.date]"
                ]
            }
        },
        "EtlTask.convert_latest_file": {
            "name": "convert_latest_file",
            "location": 781,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "bool",
                    "str",
                    "None",
                    "Optional[str]",
                    "Callable[dict,None]",
                    "Optional[cmk.utils.diagnostics.DiagnosticsOptionalParameters]",
                    "cmk.utils.type_defs.Ruleset",
                    "Optional[Callable[[dict],None]]",
                    "Optional[Callable[,None]]"
                ],
                "source": [
                    "str",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "None"
                ],
                "stage": [
                    "str",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "None"
                ],
                "date": [
                    "None",
                    "List[str]",
                    "datetime.datetime",
                    "bool",
                    "int",
                    "Optional[bool]"
                ]
            }
        },
        "EtlTask.load_to_gcs": {
            "name": "load_to_gcs",
            "location": 823,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "Dict",
                    "str",
                    "config.ConfigFile",
                    "tbump.config.Config"
                ],
                "config": [
                    "str",
                    "config.ConfigFile",
                    "Dict",
                    "cerise.config.Config",
                    "Callable",
                    "tbump.config.Config"
                ],
                "stage": [
                    "Text",
                    "config.ConfigFile",
                    "Dict",
                    "cerise.config.Config",
                    "Callable",
                    "str",
                    "tbump.config.Config"
                ]
            }
        },
        "EtlTask.load": {
            "name": "load",
            "location": 878,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EtlTask.run": {
            "name": "run",
            "location": 896,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "taipei-bi-etl-master/tasks/bigquery.py": {
        "get_task": {
            "name": "get_task",
            "location": 370,
            "return": [
                "Optional[Union[(BqGcsTask, BqQueryTask, BqViewTask)]]"
            ],
            "arguments": {
                "config": [
                    "dict",
                    "datetime",
                    "datetime.datetime"
                ],
                "date": [
                    "Dict",
                    "datetime",
                    "datetime.datetime"
                ],
                "next_date": [
                    "Dict",
                    "None",
                    "datetime",
                    "datetime.datetime"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 380,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "backfill": {
            "name": "backfill",
            "location": 411,
            "return": [
                "None"
            ],
            "arguments": {
                "start": [
                    "int",
                    "datetime.timedelta",
                    "datetime.date"
                ],
                "end": [
                    "int",
                    "datetime.timedelta",
                    "datetime.date"
                ],
                "configs": [
                    "Optional[Callable]",
                    "Callable",
                    "int",
                    "str",
                    "None",
                    "float",
                    "datetime.timedelta"
                ]
            }
        },
        "daily_run": {
            "name": "daily_run",
            "location": 416,
            "return": [
                "None"
            ],
            "arguments": {
                "d": [
                    "Optional[bool]",
                    "bool",
                    "List[str]",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "configs": [
                    "List[datetime.date]",
                    "datetime.date",
                    "str",
                    "Union[str,int,None]",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "next_date": [
                    "datetime.date",
                    "List[datetime.date]",
                    "None",
                    "Union[str,int,None]",
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "get_date_range_from_string": {
            "name": "get_date_range_from_string",
            "location": 464,
            "return": [
                "str",
                "Dict[str, 'LabwareDefinition']",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "start": [
                    "str",
                    "int",
                    "datetime.datetime"
                ],
                "end": [
                    "str",
                    "int",
                    "datetime.datetime",
                    "datetime.date"
                ]
            }
        },
        "get_date_range": {
            "name": "get_date_range",
            "location": 470,
            "return": [
                "list"
            ],
            "arguments": {
                "starttime": [
                    "float",
                    "int",
                    "str",
                    "datetime.timedelta",
                    "bool"
                ],
                "endtime": [
                    "float",
                    "int",
                    "str",
                    "datetime.timedelta",
                    "bool"
                ]
            }
        },
        "BqTask.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict",
                    "datetime.datetime",
                    "datetime"
                ],
                "date": [
                    "Dict",
                    "datetime",
                    "datetime.datetime"
                ],
                "next_date": [
                    "str",
                    "None",
                    "List[dict]",
                    "datetime",
                    "datetime.date",
                    "datetime.datetime"
                ]
            }
        },
        "BqTask.get_backfill_dates": {
            "name": "get_backfill_dates",
            "location": 42,
            "return": [
                "Optional[list]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BqTask.get_latest_date_by_config": {
            "name": "get_latest_date_by_config",
            "location": 57,
            "return": [
                "bool",
                "str",
                "Sequence[str]",
                "Date",
                "Tuple[str,str]",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "default_date": [
                    "str",
                    "bool",
                    "Sequence[str]",
                    "datetime.date",
                    "T"
                ]
            }
        },
        "BqTask.get_latest_date": {
            "name": "get_latest_date",
            "location": 67,
            "return": [
                "int",
                "datetime.datetime",
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BqTask.is_latest": {
            "name": "is_latest",
            "location": 74,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BqTask.is_write_append": {
            "name": "is_write_append",
            "location": 88,
            "return": [
                "bool",
                "Optional[Dict[str,Any]]",
                "str",
                "raiden.utils.Any",
                "logging.LogRecord"
            ],
            "arguments": {
                "self": []
            }
        },
        "BqTask.does_table_exist": {
            "name": "does_table_exist",
            "location": 92,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "postfix": [
                    "List[str]",
                    "str",
                    "None",
                    "Dict"
                ]
            }
        },
        "BqTask.does_routine_exist": {
            "name": "does_routine_exist",
            "location": 103,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "routine_id": [
                    "str",
                    "int"
                ]
            }
        },
        "BqTask.create_schema": {
            "name": "create_schema",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "check_exists": [
                    "bool",
                    "float"
                ]
            }
        },
        "BqTask.create_view": {
            "name": "create_view",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "postfix": [
                    "str",
                    "None",
                    "bool",
                    "Optional[float]",
                    "Dict",
                    "float",
                    "Iterable[float]"
                ]
            }
        },
        "BqTask.drop_schema": {
            "name": "drop_schema",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BqTask.daily_run": {
            "name": "daily_run",
            "location": 179,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "BqTask.daily_cleanup": {
            "name": "daily_cleanup",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "float",
                    "Callable"
                ]
            }
        },
        "BqTask.get_query_params": {
            "name": "get_query_params",
            "location": 197,
            "return": [
                "Dict[(str, _T0)]"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "str",
                    "int",
                    "re.Match[str]",
                    "utils.MinMaxStats"
                ]
            }
        },
        "BqGcsTask.__init__": {
            "name": "__init__",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict",
                    "datetime",
                    "datetime.datetime"
                ],
                "date": [
                    "Dict",
                    "datetime",
                    "datetime.datetime"
                ],
                "next_date": [
                    "None",
                    "Dict",
                    "datetime",
                    "datetime.datetime"
                ]
            }
        },
        "BqGcsTask.create_schema": {
            "name": "create_schema",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "check_exists": [
                    "bool",
                    "str",
                    "int",
                    "Iterable"
                ]
            }
        },
        "BqGcsTask.daily_run": {
            "name": "daily_run",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BqGcsTask.run_query": {
            "name": "run_query",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "date": [
                    "str",
                    "BinaryIO",
                    "Optional[str]",
                    "bool",
                    "None"
                ],
                "autodetect": [
                    "bool",
                    "datetime.datetime",
                    "float",
                    "str",
                    "Dict[str,Any]",
                    "int",
                    "T",
                    "Optional[str]"
                ]
            }
        },
        "BqQueryTask.__init__": {
            "name": "__init__",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict",
                    "datetime",
                    "datetime.datetime"
                ],
                "date": [
                    "Dict",
                    "datetime",
                    "datetime.datetime"
                ],
                "next_date": [
                    "None",
                    "Dict",
                    "datetime",
                    "datetime.datetime"
                ]
            }
        },
        "BqQueryTask.create_schema": {
            "name": "create_schema",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "check_exists": [
                    "bool",
                    "str",
                    "Dict[str,Any]",
                    "Optional[str]"
                ]
            }
        },
        "BqQueryTask.daily_run": {
            "name": "daily_run",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BqQueryTask.run_query": {
            "name": "run_query",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "date": [
                    "bool",
                    "str",
                    "datetime.date",
                    "Tuple[Union[str,str]]",
                    "int",
                    "raiden.utils.ChannelID",
                    "Tuple[str,str]"
                ],
                "qstring": [
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "bool",
                    "Tuple[Union[str,str]]",
                    "datetime.date",
                    "Date",
                    "Tuple[str,str]",
                    "datetime.datetime"
                ]
            }
        },
        "BqViewTask.__init__": {
            "name": "__init__",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict",
                    "datetime",
                    "datetime.datetime"
                ],
                "date": [
                    "Dict",
                    "datetime",
                    "datetime.datetime"
                ],
                "next_date": [
                    "None",
                    "Dict",
                    "datetime",
                    "datetime.datetime"
                ]
            }
        },
        "BqViewTask.create_schema": {
            "name": "create_schema",
            "location": 359,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "check_exists": [
                    "bool",
                    "str",
                    "Dict[str,Any]",
                    "Optional[str]"
                ]
            }
        },
        "BqViewTask.daily_run": {
            "name": "daily_run",
            "location": 365,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "taipei-bi-etl-master/tasks/revenue.py": {
        "main": {
            "name": "main",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "RevenueEtlTask.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "sources": [
                    "Dict[str,Any]",
                    "List[tuple[Union[str,numpy.generic]]]",
                    "argparse.Namespace",
                    "List[Tuple[str,numpy.generic]]"
                ],
                "schema": [
                    "Dict[str,Any]",
                    "List[tuple[Union[str,numpy.generic]]]",
                    "argparse.Namespace",
                    "List[Tuple[str,numpy.generic]]"
                ],
                "destinations": [
                    "Dict[str,Any]",
                    "List[tuple[Union[str,numpy.generic]]]",
                    "argparse.Namespace",
                    "List[Tuple[str,numpy.generic]]"
                ]
            }
        },
        "RevenueEtlTask.extract": {
            "name": "extract",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RevenueEtlTask.transform_bukalapak": {
            "name": "transform_bukalapak",
            "location": 57,
            "return": [
                "int",
                "str",
                "Callable",
                "List",
                "List[Callable[...,Any]]",
                "Tuple[Union[Any,Any,Any,Any]]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "bukalapak": [
                    "str",
                    "pandas.DataFrame",
                    "Tuple",
                    "float",
                    "bool"
                ],
                "bukalapak_base": [
                    "int",
                    "pandas.DataFrame",
                    "str",
                    "float",
                    "None",
                    "bool",
                    "Optional[float]"
                ],
                "source": [
                    "str",
                    "bool",
                    "float"
                ]
            }
        },
        "RevenueEtlTask.transform_bukalapak.data_prep": {
            "name": "data_prep",
            "location": 95,
            "return": [
                "Dict[str, bool]",
                "dict",
                "Dict[str, Any]",
                "int",
                "Union[Dict, str]",
                "str"
            ],
            "arguments": {
                "d": [
                    "AbstractSet[int]",
                    "datetime.date",
                    "pandas.DataFrame",
                    "Callable",
                    "Dict[str, str]"
                ]
            }
        },
        "RevenueEtlTask.transform_bukalapak.check_dt_range": {
            "name": "check_dt_range",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "RevenueEtlTask.transform_bukalapak.check_schema": {
            "name": "check_schema",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "RevenueEtlTask.transform_bukalapak.check_null": {
            "name": "check_null",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "RevenueEtlTask.transform_bukalapak.do_updates_inserts": {
            "name": "do_updates_inserts",
            "location": 147,
            "return": [
                "int",
                "Callable[[KT], VT]",
                "base.AbstractConverter",
                "Tuple[type]",
                "set",
                "base.ConfigOptions",
                "bool"
            ],
            "arguments": {}
        }
    },
    "taipei-bi-etl-master/tasks/rps.py": {
        "main": {
            "name": "main",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "RpsEtlTask.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "sources": [],
                "schema": [],
                "destinations": []
            }
        },
        "RpsEtlTask.extract": {
            "name": "extract",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RpsEtlTask.transform_google_search_rps": {
            "name": "transform_google_search_rps",
            "location": 52,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "google_search_rps": [],
                "global_package": [],
                "fb_index": [],
                "fb_index_latest": [],
                "cb_index": []
            }
        },
        "RpsEtlTask.transform_google_search_rps.map_country_3_to_2": {
            "name": "map_country_3_to_2",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "alpha_3": []
            }
        },
        "RpsEtlTask.transform_google_search_rps.transform_fb_idx": {
            "name": "transform_fb_idx",
            "location": 93,
            "return": [],
            "arguments": {
                "idx": []
            }
        },
        "RpsEtlTask.transform_google_search_rps.avg_idx": {
            "name": "avg_idx",
            "location": 99,
            "return": [
                "int"
            ],
            "arguments": {
                "idxmap": [],
                "col": []
            }
        },
        "RpsEtlTask.transform_google_search_rps.transform_cb_idx": {
            "name": "transform_cb_idx",
            "location": 110,
            "return": [],
            "arguments": {
                "idx": []
            }
        },
        "RpsEtlTask.transform_google_search_rps.get_rps_factor": {
            "name": "get_rps_factor",
            "location": 135,
            "return": [],
            "arguments": {
                "volume": [],
                "cost_idx": [],
                "package": []
            }
        }
    },
    "taipei-bi-etl-master/tasks/__init__.py": {},
    "taipei-bi-etl-master/tests/conftest.py": {
        "req": {
            "name": "req",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "gcs": {
            "name": "gcs",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "pdbq": {
            "name": "pdbq",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "mock_io": {
            "name": "mock_io",
            "location": 52,
            "return": [
                "MockIO"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "mock_readwrite": {
            "name": "mock_readwrite",
            "location": 61,
            "return": [
                "MockReadWrite"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "mock_requests": {
            "name": "mock_requests",
            "location": 71,
            "return": [
                "MockRequest"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "mock_pdbq": {
            "name": "mock_pdbq",
            "location": 111,
            "return": [
                "MockResponse"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "mock_bigquery": {
            "name": "mock_bigquery",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "mock_gcs": {
            "name": "mock_gcs",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "mock_requests.mock_get": {
            "name": "mock_get",
            "location": 101,
            "return": [],
            "arguments": {
                "url": []
            }
        },
        "mock_pdbq.mock_read_gbq": {
            "name": "mock_read_gbq",
            "location": 132,
            "return": [],
            "arguments": {
                "query": []
            }
        },
        "mock_requests.MockResponse.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content": []
            }
        },
        "mock_requests.MockResponse.text": {
            "name": "text",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "mock_requests.MockRequest.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "mock_requests.MockRequest.get_text": {
            "name": "get_text",
            "location": 86,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "mock_requests.MockRequest.get": {
            "name": "get",
            "location": 92,
            "return": [
                "MockResponse"
            ],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "mock_requests.MockRequest.setContent": {
            "name": "setContent",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [],
                "content": []
            }
        },
        "mock_pdbq.MockResponse.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "mock_pdbq.MockResponse.setResult": {
            "name": "setResult",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "df": []
            }
        },
        "mock_pdbq.MockResponse.setQueryResult": {
            "name": "setQueryResult",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "query": [],
                "df": []
            }
        },
        "mock_pdbq.MockResponse.read": {
            "name": "read",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "query": []
            }
        }
    },
    "taipei-bi-etl-master/tests/mockbigquery.py": {
        "MockBigqueryClient.query": {
            "name": "query",
            "location": 11,
            "return": [
                "MockBigqueryJobQueryJob"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Optional[int]",
                    "int",
                    "bool",
                    "None",
                    "Optional[dict]",
                    "Dict"
                ]
            }
        },
        "MockBigqueryJobQueryJob.to_dataframe": {
            "name": "to_dataframe",
            "location": 19,
            "return": [
                "DataFrame",
                "Dict[str,List[int]]",
                "Dict[str,str]",
                "Callable",
                "Sequence"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Optional[dict]",
                    "Optional[Callable[[dict],None]]",
                    "Dict",
                    "Union[None,list,tuple]",
                    "None",
                    "Callable[dict,None]",
                    "List",
                    "Tuple"
                ]
            }
        }
    },
    "taipei-bi-etl-master/tests/mockgcs.py": {
        "MockHTTPIterator.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "blobs": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "MockHTTPIterator.__iter__": {
            "name": "__iter__",
            "location": 18,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockStorageClient.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockStorageClient.get_bucket": {
            "name": "get_bucket",
            "location": 33,
            "return": [
                "MockBucket"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "MockStorageClient.bucket": {
            "name": "bucket",
            "location": 37,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "MockStorageClient.create_bucket": {
            "name": "create_bucket",
            "location": 41,
            "return": [
                "MockBucket"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "MockStorageClient.list_blobs": {
            "name": "list_blobs",
            "location": 49,
            "return": [
                "MockHTTPIterator"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str"
                ]
            }
        },
        "MockBlob.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "Optional[Sequence[Any]]",
                    "Sequence[Any]"
                ],
                "bucket": [
                    "bool",
                    "str",
                    "Sequence",
                    "int",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "MockBlob.name": {
            "name": "name",
            "location": 64,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockBlob.upload_from_filename": {
            "name": "upload_from_filename",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "logging.Logger"
                ]
            }
        },
        "MockBlob.download_to_filename": {
            "name": "download_to_filename",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "MockBucket.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "float"
                ]
            }
        },
        "MockBucket.list_blobs": {
            "name": "list_blobs",
            "location": 89,
            "return": [
                "MockHTTPIterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockBucket.name": {
            "name": "name",
            "location": 94,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockBucket._add_file": {
            "name": "_add_file",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "blob": [
                    "str"
                ]
            }
        },
        "MockBucket.blob": {
            "name": "blob",
            "location": 101,
            "return": [
                "bool",
                "bytes",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "blob_name": [
                    "str"
                ]
            }
        }
    },
    "taipei-bi-etl-master/tests/mockio.py": {
        "MockIO.open": {
            "name": "open",
            "location": 13,
            "return": [
                "io.StringIO"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str",
                    "int"
                ],
                "mode": [
                    "Text",
                    "logging.Logger",
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "MockReadWrite.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockReadWrite.read_string": {
            "name": "read_string",
            "location": 34,
            "return": [
                "str",
                "list",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "List[str]",
                    "Iterable[str]"
                ]
            }
        },
        "MockReadWrite.write_string": {
            "name": "write_string",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "s": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "taipei-bi-etl-master/tests/test_etl.py": {
        "test_rps__global_package__fs": {
            "name": "test_rps__global_package__fs",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "taipei-bi-etl-master/tests/test_mock.py": {
        "test_mock_io": {
            "name": "test_mock_io",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_io": [
                    "Callable"
                ]
            }
        },
        "test_mock_readwrite": {
            "name": "test_mock_readwrite",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_readwrite": [
                    "Generator[None,Any,None]",
                    "Generator[Union[None,Any,None]]"
                ]
            }
        },
        "test_mock_requests": {
            "name": "test_mock_requests",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_requests": []
            }
        },
        "test_mock_pdbq": {
            "name": "test_mock_pdbq",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_pdbq": [
                    "scraper.storage.Storage"
                ]
            }
        },
        "test_mock_bigquery": {
            "name": "test_mock_bigquery",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_bigquery": [
                    "Generator[None,Any,None]",
                    "Generator[Union[None,Any,None]]"
                ]
            }
        },
        "test_mock_gcs": {
            "name": "test_mock_gcs",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_gcs": [],
                "mock_readwrite": []
            }
        }
    },
    "taipei-bi-etl-master/tests/utils.py": {
        "inject_fixtures": {
            "name": "inject_fixtures",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "namespace": [
                    "str",
                    "Set[str]",
                    "Type[T]",
                    "Dict[str,Any]",
                    "Type",
                    "List[dict]"
                ],
                "task": [
                    "golem_messages.message.tasks.ReportComputedTask",
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "cfgs": [
                    "golem_messages.message.tasks.ReportComputedTask",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "get_default_range": {
            "name": "get_default_range",
            "location": 26,
            "return": [
                "Tuple[(Any, str)]"
            ],
            "arguments": {
                "request": [
                    "Dict[str,Any]",
                    "int"
                ]
            }
        },
        "get_src_by_type": {
            "name": "get_src_by_type",
            "location": 50,
            "return": [
                "Dict[(str, Union[(list, str)])]"
            ],
            "arguments": {
                "task": [
                    "Dict[str, Any]",
                    "NamedTuple",
                    "str",
                    "bytes"
                ],
                "cfgs": [
                    "Dict[str,Any]",
                    "Dict[int,str]",
                    "Dict[I,dict[str,Any]]",
                    "Dict[str,float]",
                    "Dict[cmk.utils.type_defs.UserId,Dict[str,Any]]",
                    "List[T]"
                ],
                "t": [
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "get_dest_by_type": {
            "name": "get_dest_by_type",
            "location": 64,
            "return": [
                "Dict[(str, Union[(list, str)])]"
            ],
            "arguments": {
                "task": [
                    "Dict[str, Any]",
                    "bool",
                    "dict"
                ],
                "cfgs": [
                    "Dict[str,Any]",
                    "Dict",
                    "raiden.utils.Dict",
                    "List[T]"
                ],
                "t": [
                    "Dict"
                ]
            }
        },
        "generate_fixtures": {
            "name": "generate_fixtures",
            "location": 78,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "task": [
                    "List[str]",
                    "str",
                    "Dict[str,Any]"
                ],
                "cfgs": [
                    "List[str]",
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "generate_fixtures.api_src": {
            "name": "api_src",
            "location": 91,
            "return": [
                "int",
                "Optional[Tuple[int, int]]",
                "raiden.utils.Address",
                "float"
            ],
            "arguments": {
                "request": []
            }
        },
        "generate_fixtures.gcs_src": {
            "name": "gcs_src",
            "location": 122,
            "return": [
                "int",
                "Optional[Tuple[int, int]]",
                "raiden.utils.Address",
                "float"
            ],
            "arguments": {
                "request": [
                    "Iterable[int]",
                    "str"
                ]
            }
        },
        "generate_fixtures.bq_src": {
            "name": "bq_src",
            "location": 132,
            "return": [
                "int",
                "Optional[Tuple[int, int]]",
                "raiden.utils.Address",
                "float"
            ],
            "arguments": {
                "request": []
            }
        },
        "generate_fixtures.gcs_dest": {
            "name": "gcs_dest",
            "location": 145,
            "return": [
                "int",
                "list"
            ],
            "arguments": {
                "request": [
                    "_pytesfixtures.FixtureRequest",
                    "Callable"
                ]
            }
        },
        "generate_fixtures.gcs_bucket": {
            "name": "gcs_bucket",
            "location": 152,
            "return": [
                "List[str]",
                "Optional[datetime.datetime]",
                "str"
            ],
            "arguments": {
                "gcs": [
                    "str",
                    "bytes",
                    "int",
                    "bool"
                ],
                "gcs_dest": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "taipei-bi-etl-master/tests/__init__.py": {},
    "taipei-bi-etl-master/tests/dags/unit_testing.py": {
        "assert_has_valid_dag": {
            "name": "assert_has_valid_dag",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "module": [
                    "Callable[...,Awaitable[None]]",
                    "List",
                    "Callable[...,collections.abc.Awaitable[None]]",
                    "str"
                ]
            }
        }
    },
    "taipei-bi-etl-master/tests/dags/__init__.py": {},
    "taipei-bi-etl-master/tests/tasks/conftest.py": {
        "revenue_sample_data": {
            "name": "revenue_sample_data",
            "location": 10,
            "return": [
                "Type",
                "bool",
                "List[str]",
                "str"
            ],
            "arguments": {}
        }
    },
    "taipei-bi-etl-master/tests/tasks/test_adjust.py": {
        "load_assets": {
            "name": "load_assets",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_requests": [
                    "Dict[str,str]",
                    "str",
                    "Dict"
                ]
            }
        },
        "test_adjust_extract": {
            "name": "test_adjust_extract",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "load_assets": [
                    "bool",
                    "List[str]",
                    "str",
                    "int",
                    "Dict",
                    "List[tuple[Union[str,str]]]",
                    "List[Tuple[str,str]]"
                ]
            }
        },
        "test_adjust": {
            "name": "test_adjust",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "load_assets": [],
                "mock_gcs": []
            }
        }
    },
    "taipei-bi-etl-master/tests/tasks/test_bigquery.py": {
        "client": {
            "name": "client",
            "location": 14,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {}
        },
        "always_latest": {
            "name": "always_latest",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "Dict"
                ]
            }
        },
        "to_delete": {
            "name": "to_delete",
            "location": 28,
            "return": [
                "typing.Generator[list[]]"
            ],
            "arguments": {
                "client": [
                    "Dict"
                ]
            }
        },
        "test_BqTableTask": {
            "name": "test_BqTableTask",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str"
                ],
                "to_delete": [
                    "dict"
                ]
            }
        },
        "test_mango_events": {
            "name": "test_mango_events",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "Dict[str, Any]",
                    "str"
                ],
                "to_delete": [
                    "List",
                    "str",
                    "int",
                    "Dict"
                ]
            }
        },
        "test_channel_mapping_truncate": {
            "name": "test_channel_mapping_truncate",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ],
                "to_delete": [
                    "List",
                    "List[str]",
                    "str",
                    "int",
                    "Dict"
                ],
                "always_latest": [
                    "int",
                    "str",
                    "google.cloud.bigquery.DatasetReference",
                    "bool"
                ]
            }
        },
        "test_channel_mapping_schema_change": {
            "name": "test_channel_mapping_schema_change",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ],
                "to_delete": [
                    "List",
                    "List[str]",
                    "str",
                    "int",
                    "Dict"
                ],
                "always_latest": [
                    "int",
                    "str",
                    "google.cloud.bigquery.DatasetReference",
                    "bool"
                ]
            }
        },
        "test_next_execution_date": {
            "name": "test_next_execution_date",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "Callable[[str,List],None]",
                    "str",
                    "Callable[str,List,None]",
                    "int",
                    "List[List[int]]",
                    "List[list[int]]"
                ],
                "to_delete": [
                    "Callable[[str,List],None]",
                    "str",
                    "Callable[str,List,None]",
                    "int",
                    "List[List[int]]",
                    "List[list[int]]"
                ]
            }
        },
        "always_latest.always_true": {
            "name": "always_true",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "taipei-bi-etl-master/tests/tasks/test_revenue.py": {
        "test_read_api": {
            "name": "test_read_api",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "req": [
                    "Dict[str,Any]",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "api_src": [
                    "Dict[str, Any]",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_read_gcs": {
            "name": "test_read_gcs",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "gcs": [
                    "str",
                    "List[str]",
                    "Pattern",
                    "dict",
                    "Union[Literal, str]",
                    "int"
                ],
                "gcs_src": [
                    "str",
                    "List[str]",
                    "Pattern",
                    "Dict",
                    "Union[Literal,str]",
                    "int"
                ]
            }
        },
        "test_read_bq": {
            "name": "test_read_bq",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "pdbq": [
                    "str"
                ],
                "bq_src": [
                    "str"
                ]
            }
        },
        "test_write_gcs": {
            "name": "test_write_gcs",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "gcs_bucket": [
                    "str",
                    "int",
                    "dict",
                    "pandas.DataFrame",
                    "Type"
                ],
                "gcs_dest": [
                    "str",
                    "int",
                    "Dict",
                    "pandas.DataFrame",
                    "Type"
                ]
            }
        },
        "test_revenue_google_search_extract_via_bq": {
            "name": "test_revenue_google_search_extract_via_bq",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_pdbq": []
            }
        },
        "test_revenue_google_search_extract": {
            "name": "test_revenue_google_search_extract",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_pdbq": []
            }
        },
        "test_revenue_load_to_fs": {
            "name": "test_revenue_load_to_fs",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_io": [
                    "Callable[,int]"
                ],
                "revenue_sample_data": [
                    "str"
                ]
            }
        },
        "test_revenue_load": {
            "name": "test_revenue_load",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_io": [
                    "Callable[,int]",
                    "tests._TestServerFactory"
                ],
                "revenue_sample_data": [
                    "str"
                ]
            }
        }
    },
    "taipei-bi-etl-master/tests/tasks/test_rps.py": {
        "test_read_api": {
            "name": "test_read_api",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "req": [
                    "Dict[str,Any]",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "api_src": [
                    "Dict[str, Any]",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_write_gcs": {
            "name": "test_write_gcs",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "gcs_bucket": [
                    "str",
                    "int",
                    "dict",
                    "Type"
                ],
                "gcs_dest": [
                    "str",
                    "int",
                    "Dict",
                    "Type"
                ]
            }
        }
    },
    "taipei-bi-etl-master/tests/tasks/__init__.py": {},
    "taipei-bi-etl-master/tests/test_utils/test_file.py": {
        "_create_temp_file": {
            "name": "_create_temp_file",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Text"
                ],
                "suffix": [
                    "str",
                    "Text"
                ]
            }
        },
        "test_write_string": {
            "name": "test_write_string",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_read_string": {
            "name": "test_read_string",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "taipei-bi-etl-master/tests/test_utils/__init__.py": {},
    "taipei-bi-etl-master/utils/anonymizer.py": {
        "main": {
            "name": "main",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "read_data": {
            "name": "read_data",
            "location": 45,
            "return": [
                "None",
                "Dict[str,bool]",
                "List",
                "Dict[str,Any]",
                "int",
                "Dict"
            ],
            "arguments": {
                "cfgs": [
                    "Union[Dict,List]",
                    "Dict",
                    "int",
                    "Dict[str,Any]",
                    "str",
                    "List"
                ],
                "ext": [
                    "str",
                    "bool"
                ],
                "file": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "IO[Any]"
                ]
            }
        },
        "write_data": {
            "name": "write_data",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "d": [
                    "dict"
                ],
                "ext": [
                    "str",
                    "bool",
                    "List[str]",
                    "Iterable[str]"
                ],
                "file": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "anonymize_data": {
            "name": "anonymize_data",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "cfgs": [
                    "Dict",
                    "Union[Dict,List]",
                    "Sequence",
                    "Dict[str,int]",
                    "List",
                    "Dict[str,Any]"
                ],
                "d": [
                    "str",
                    "bool",
                    "int",
                    "AbstractSet[str]",
                    "Type"
                ]
            }
        },
        "anonymize_list": {
            "name": "anonymize_list",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "cfg": [
                    "str",
                    "Union[str,type]",
                    "Iterable[T_co]",
                    "int",
                    "Type",
                    "Union[int,float]",
                    "Iterable[T]",
                    "float"
                ],
                "ls": [
                    "List",
                    "int",
                    "str",
                    "Optional[int]",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "anonymize_row": {
            "name": "anonymize_row",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "cfg": [
                    "List[dict]",
                    "str",
                    "Dict[str,Any]",
                    "bytes",
                    "Dict"
                ],
                "row": [
                    "Dict",
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "generate_anonymized_data": {
            "name": "generate_anonymized_data",
            "location": 150,
            "return": [
                "Optional[Union[(float, int, str)]]"
            ],
            "arguments": {
                "cfg": [
                    "Union[str,type]",
                    "int",
                    "str",
                    "float",
                    "Type"
                ]
            }
        },
        "extract_elem_recursive": {
            "name": "extract_elem_recursive",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "result": [
                    "List",
                    "str"
                ],
                "data": [
                    "Union[Dict, List]",
                    "dict",
                    "Dict[int, Dict[int, Any]]",
                    "Optional[Container[str]]"
                ],
                "path": [
                    "int",
                    "Union[str,int]",
                    "Dict",
                    "str",
                    "Dict[str,Any]",
                    "Union[str,dict]"
                ],
                "newval": [
                    "Optional[str]",
                    "None",
                    "List",
                    "str",
                    "Optional[Sequence[str]]",
                    "Optional[Source]",
                    "Sequence[str]"
                ]
            }
        },
        "extract_elem": {
            "name": "extract_elem",
            "location": 200,
            "return": [
                "List",
                "Optional[str]",
                "None",
                "bool",
                "List[str]",
                "BaseException"
            ],
            "arguments": {
                "data": [
                    "str",
                    "List[str]",
                    "IO[Any]"
                ],
                "path": [
                    "Union[str,int]",
                    "int"
                ],
                "newval": [
                    "None",
                    "Optional[str]",
                    "str",
                    "Callable[,str]",
                    "Optional[tuple]",
                    "bool",
                    "Tuple",
                    "Optional[Any]",
                    "Any",
                    "int"
                ]
            }
        }
    },
    "taipei-bi-etl-master/utils/cache.py": {
        "check_extract_cache": {
            "name": "check_extract_cache",
            "location": 11,
            "return": [
                "Callable"
            ],
            "arguments": {
                "extract_func": [
                    "Callable",
                    "Callable[..., Dict]",
                    "bool"
                ]
            }
        },
        "check_extract_cache.cached_extract_wrapper": {
            "name": "cached_extract_wrapper",
            "location": 19,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "bool",
                    "Dict[str, Any]",
                    "str",
                    "Dict[str, List[int]]"
                ],
                "config": [
                    "dict",
                    "bool",
                    "Dict[str, Any]",
                    "Tuple[int, int, int]"
                ],
                "stage": [
                    "datetime.datetime",
                    "str",
                    "dict",
                    "datetime",
                    "bool"
                ],
                "date": [
                    "datetime.datetime",
                    "str",
                    "dict",
                    "datetime",
                    "bool"
                ]
            }
        }
    },
    "taipei-bi-etl-master/utils/common.py": {
        "cachedDataFrame": {
            "name": "cachedDataFrame",
            "location": 6,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "fpath": [
                    "str",
                    "Set[str]"
                ],
                "config": [
                    "Dict",
                    "List"
                ]
            }
        }
    },
    "taipei-bi-etl-master/utils/config.py": {
        "get_configs": {
            "name": "get_configs",
            "location": 19,
            "return": [
                "Optional[module]"
            ],
            "arguments": {
                "mod": [
                    "Mapping",
                    "Type"
                ],
                "pkg": [
                    "Text",
                    "str",
                    "bool"
                ]
            }
        },
        "get_arg_parser": {
            "name": "get_arg_parser",
            "location": 39,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "merge_config": {
            "name": "merge_config",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "cfgs": [
                    "Dict[str, Any]",
                    "int",
                    "dict"
                ],
                "newcfgs": [
                    "Dict",
                    "Dict[int,list[str]]",
                    "Dict[str,bool]",
                    "Dict[int,List[str]]",
                    "Dict[str,dict]",
                    "Dict[str,Dict]",
                    "Dict[str,Any]",
                    "Mapping[str,Any]"
                ]
            }
        }
    },
    "taipei-bi-etl-master/utils/file.py": {
        "write_string": {
            "name": "write_string",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "s": [
                    "str"
                ]
            }
        },
        "read_string": {
            "name": "read_string",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "get_file_ext": {
            "name": "get_file_ext",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "fpath": [
                    "str",
                    "bytes",
                    "Pattern"
                ]
            }
        },
        "get_path_prefix": {
            "name": "get_path_prefix",
            "location": 41,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "fpath": [
                    "str",
                    "List[str]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "get_path_format": {
            "name": "get_path_format",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "wildcard": [
                    "bool",
                    "str",
                    "List",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        }
    },
    "taipei-bi-etl-master/utils/marshalling.py": {
        "convert_df": {
            "name": "convert_df",
            "location": 21,
            "return": [
                "None",
                "str",
                "DataFrame",
                "List[str]",
                "int",
                "bytes"
            ],
            "arguments": {
                "raw": [
                    "Dict[str, Any]",
                    "config.Config",
                    "Dict[str, str]"
                ],
                "config": [
                    "dict",
                    "pymap.config.IMAPConfig",
                    "cbc_casper_simulator.simulator.config.Config",
                    "sideeye.config.Configuration",
                    "Dict[str, Any]"
                ]
            }
        },
        "convert_format": {
            "name": "convert_format",
            "location": 77,
            "return": [
                "Text",
                "str",
                "Optional[str]",
                "Set[str]",
                "bytes"
            ],
            "arguments": {
                "format": [
                    "str",
                    "List",
                    "bool",
                    "Dict",
                    "Optional[str]",
                    "None"
                ],
                "df": [
                    "pandas.DataFrame",
                    "int",
                    "datetime.date",
                    "str",
                    "List[str]",
                    "datetime.datetime",
                    "Optional[datetime.datetime]"
                ],
                "date_fields": [
                    "str",
                    "List",
                    "Dict",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "json_extract": {
            "name": "json_extract",
            "location": 108,
            "return": [
                "None",
                "str",
                "List",
                "Optional[BaseException]"
            ],
            "arguments": {
                "json_str": [
                    "str",
                    "bytes",
                    "Dict"
                ],
                "path": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "json_unnest": {
            "name": "json_unnest",
            "location": 137,
            "return": [
                "Optional[Union[(str, _T0)]]"
            ],
            "arguments": {
                "json_str": [
                    "str"
                ],
                "paths": [
                    "str",
                    "List[str]",
                    "Optional[datetime.datetime]",
                    "int",
                    "None",
                    "AnyStr"
                ],
                "fields": [
                    "Union[str,List[str]]",
                    "str",
                    "Dict",
                    "List[str]",
                    "Optional[str]"
                ],
                "ancestors": [
                    "bool",
                    "str",
                    "float",
                    "None",
                    "int",
                    "Optional[bool]"
                ],
                "result": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "Sequence[str]",
                    "Callable",
                    "Optional[dict]"
                ],
                "level": [
                    "str",
                    "int"
                ]
            }
        },
        "singularize": {
            "name": "singularize",
            "location": 186,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "s": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "get_country_tz": {
            "name": "get_country_tz",
            "location": 200,
            "return": [
                "Union[(pytz._UTCclass, pytz.tzinfo.DstTzInfo, pytz.tzinfo.StaticTzInfo)]"
            ],
            "arguments": {
                "country_code": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "get_country_tz_str": {
            "name": "get_country_tz_str",
            "location": 247,
            "return": [
                "str"
            ],
            "arguments": {
                "country_code": [
                    "str",
                    "int"
                ]
            }
        },
        "get_tz_str": {
            "name": "get_tz_str",
            "location": 262,
            "return": [
                "str"
            ],
            "arguments": {
                "timezone": [
                    "Dict",
                    "str",
                    "int",
                    "None",
                    "pandas.Series",
                    "Optional[str]",
                    "recidiviz.calculator.pipeline.utils.incarceration_period_index.IncarcerationPeriodIndex"
                ]
            }
        },
        "lookback_dates": {
            "name": "lookback_dates",
            "location": 277,
            "return": [
                "int",
                "datetime.datetime",
                "str",
                "Optional[datetime.tzinfo]",
                "bool"
            ],
            "arguments": {
                "date": [
                    "int",
                    "str",
                    "datetime.datetime",
                    "None",
                    "Optional[datetime.datetime]",
                    "datetime.date"
                ],
                "period": [
                    "int",
                    "str",
                    "datetime.datetime",
                    "None",
                    "Optional[datetime.datetime]",
                    "datetime.date"
                ]
            }
        },
        "lookfoward_dates": {
            "name": "lookfoward_dates",
            "location": 291,
            "return": [
                "int",
                "datetime.datetime",
                "str",
                "Optional[datetime.tzinfo]",
                "bool"
            ],
            "arguments": {
                "date": [
                    "int",
                    "str",
                    "datetime.datetime",
                    "None",
                    "Optional[datetime.datetime]",
                    "datetime.date"
                ],
                "period": [
                    "int",
                    "str",
                    "datetime.datetime",
                    "None",
                    "Optional[datetime.datetime]",
                    "datetime.date"
                ]
            }
        },
        "flatten_dict": {
            "name": "flatten_dict",
            "location": 305,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "d": [
                    "Dict",
                    "Dict[str,Any]"
                ],
                "pref": [
                    "Text",
                    "Optional[List[str]]",
                    "pandas.DataFrame",
                    "Dict[str,Any]",
                    "str",
                    "Mapping"
                ],
                "separator": [
                    "Text",
                    "str",
                    "Callable",
                    "utils.types.Box3D"
                ]
            }
        },
        "is_camel": {
            "name": "is_camel",
            "location": 328,
            "return": [
                "bool",
                "Type[Any]",
                "BaseException",
                "Exception",
                "Type[BaseException]",
                "Type",
                "Sequence[Any]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "int"
                ]
            }
        },
        "decamelize": {
            "name": "decamelize",
            "location": 342,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        }
    },
    "taipei-bi-etl-master/utils/query.py": {
        "build_query": {
            "name": "build_query",
            "location": 7,
            "return": [
                "str"
            ],
            "arguments": {
                "config": [
                    "str",
                    "Dict[str,Any]"
                ],
                "start_date": [
                    "str",
                    "Dict[str,Any]"
                ],
                "end_date": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "taipei-bi-etl-master/utils/regex.py": {
        "find_all_groups": {
            "name": "find_all_groups",
            "location": 6,
            "return": [
                "Tuple[(tuple, ...)]"
            ],
            "arguments": {
                "regex": [
                    "str",
                    "Dict[str,Any]",
                    "bool",
                    "List[int]",
                    "Type[object]",
                    "Type"
                ],
                "s": [
                    "str",
                    "Dict[str,Any]",
                    "bool",
                    "List[int]",
                    "Type[object]",
                    "Type"
                ],
                "grps": [
                    "int",
                    "List[int]",
                    "List[str]",
                    "Dict"
                ]
            }
        }
    },
    "taipei-bi-etl-master/utils/__init__.py": {}
}
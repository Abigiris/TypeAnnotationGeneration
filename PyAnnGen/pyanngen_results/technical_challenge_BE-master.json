{
    "technical_challenge_BE-master/setup.py": {
        "project_path": {
            "name": "project_path",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "read": {
            "name": "read",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "technical_challenge_BE-master/src/technical_challlenge_be/__init__.py": {},
    "technical_challenge_BE-master/src/technical_challlenge_be/__main__.py": {
        "cli": {
            "name": "cli",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "version": {
            "name": "version",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "technical_challenge_BE-master/src/technical_challlenge_be/catalog_app/manage.py": {
        "main": {
            "name": "main",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "technical_challenge_BE-master/src/technical_challlenge_be/catalog_app/catalog_app/api.py": {},
    "technical_challenge_BE-master/src/technical_challlenge_be/catalog_app/catalog_app/models.py": {
        "VocabularyCatalogue.save": {
            "name": "save",
            "location": 10,
            "return": [
                "dict",
                "Iterable[str]",
                "str",
                "int",
                "salon.models.Stylist",
                "IO[str]",
                "Dict[str, Any]",
                "Union[fonduer.candidates.models.Candidate, fonduer.candidates.models.Mention, fonduer.candidates.models.span_mention.TemporarySpanMention]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word.save": {
            "name": "save",
            "location": 32,
            "return": [
                "bool",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "technical_challenge_BE-master/src/technical_challlenge_be/catalog_app/catalog_app/settings.py": {},
    "technical_challenge_BE-master/src/technical_challlenge_be/catalog_app/catalog_app/urls.py": {},
    "technical_challenge_BE-master/src/technical_challlenge_be/catalog_app/catalog_app/views.py": {
        "BookSerializer.save_worlds": {
            "name": "save_worlds",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "list[T]",
                    "Dict[str, Any]",
                    "list[]",
                    "list[list[typing.Any]]",
                    "List[T]",
                    "list",
                    "List[List[Any]]",
                    "dict"
                ],
                "context": [
                    "list[dict[, ]]",
                    "List[Dict]",
                    "bytes",
                    "list[tuple[]]",
                    "List[Tuple]",
                    "int"
                ]
            }
        },
        "BookSerializer.create": {
            "name": "create",
            "location": 36,
            "return": [
                "catalog_app.models.Book"
            ],
            "arguments": {
                "self": [],
                "validated_data": [
                    "dict",
                    "dict[, ]",
                    "bytes",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "BookSerializer.update": {
            "name": "update",
            "location": 40,
            "return": [
                "catalog_app.models.Book"
            ],
            "arguments": {
                "self": [],
                "validated_data": [
                    "dict[, ]",
                    "bytes",
                    "dict",
                    "typing.Type",
                    "Iterable[T]",
                    "T",
                    "Type[Any]"
                ]
            }
        },
        "BookViewSet.create": {
            "name": "create",
            "location": 49,
            "return": [
                "Response",
                "Dict[str, Any]",
                "dict",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "int",
                    "django.db.models.query.QuerySet",
                    "rest_framework.requesRequest"
                ]
            }
        },
        "BookSerializer.save_worlds.min_word_length_filter": {
            "name": "min_word_length_filter",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "w": [
                    "int",
                    "dict",
                    "Tuple[int, int, int, int]"
                ],
                "min_length": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "technical_challenge_BE-master/src/technical_challlenge_be/catalog_app/catalog_app/wsgi.py": {},
    "technical_challenge_BE-master/src/technical_challlenge_be/catalog_app/catalog_app/__init__.py": {},
    "technical_challenge_BE-master/test/__init__.py": {}
}
{
    "telegram-bot-test-master/telegram_bot/config.py": {
        "get_config": {
            "name": "get_config",
            "location": 14,
            "return": [
                "Config"
            ],
            "arguments": {}
        },
        "_get_from_env": {
            "name": "_get_from_env",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "_get_int_from_env": {
            "name": "_get_int_from_env",
            "location": 29,
            "return": [
                "int"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "_get_string_from_env": {
            "name": "_get_string_from_env",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        }
    },
    "telegram-bot-test-master/telegram_bot/exercises.py": {
        "Exercise.to_str": {
            "name": "to_str",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exercise._format_rest": {
            "name": "_format_rest",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exercise._format_muscles": {
            "name": "_format_muscles",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MachineExercise.to_str": {
            "name": "to_str",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BodyweightExercise.to_str": {
            "name": "to_str",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "telegram-bot-test-master/telegram_bot/expenses.py": {
        "expenses_inline_callback": {
            "name": "expenses_inline_callback",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "update": [
                    "telegram.Update"
                ],
                "context": [
                    "str",
                    "int",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "Expense.to_journal_entry": {
            "name": "to_journal_entry",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Expense.pending": {
            "name": "pending",
            "location": 48,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "telegram-bot-test-master/telegram_bot/log.py": {},
    "telegram-bot-test-master/telegram_bot/marshalling.py": {
        "structure_decimal": {
            "name": "structure_decimal",
            "location": 9,
            "return": [
                "decimal.Decimal"
            ],
            "arguments": {
                "raw": [
                    "str"
                ],
                "_": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "unstructure_decimal": {
            "name": "unstructure_decimal",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "data": [
                    "decimal.Decimal"
                ]
            }
        }
    },
    "telegram-bot-test-master/telegram_bot/search.py": {
        "_index_exercises": {
            "name": "_index_exercises",
            "location": 13,
            "return": [
                "Dict[(str, List[telegram_bot.exercises.Exercise])]"
            ],
            "arguments": {
                "exercises": [
                    "List[telegram_bot.exercises.Exercise]"
                ]
            }
        },
        "ExerciseIndex.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exercises": [
                    "List[telegram_bot.exercises.Exercise]"
                ]
            }
        },
        "ExerciseIndex.query": {
            "name": "query",
            "location": 47,
            "return": [
                "List[telegram_bot.exercises.Exercise]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str"
                ]
            }
        }
    },
    "telegram-bot-test-master/telegram_bot/security.py": {
        "is_message_from_bot_owner": {
            "name": "is_message_from_bot_owner",
            "location": 6,
            "return": [
                "bool"
            ],
            "arguments": {
                "update": [
                    "dict[, ]",
                    "dict",
                    "str",
                    "int",
                    "telegram.Update",
                    "dict[str, typing.Union[str,set[]]]",
                    "Dict[str, Union[str, Set]]"
                ]
            }
        }
    },
    "telegram-bot-test-master/telegram_bot/__init__.py": {},
    "telegram-bot-test-master/telegram_bot/bots/core.py": {
        "run_bot": {
            "name": "run_bot",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "handlers": [
                    "Sequence"
                ]
            }
        }
    },
    "telegram-bot-test-master/telegram_bot/bots/dtg_bot.py": {
        "echo": {
            "name": "echo",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "update": [
                    "dict[, ]",
                    "telegram.Bot",
                    "bytes",
                    "str",
                    "dict",
                    "list[dict[, ]]",
                    "telegram.Update",
                    "List[dict]"
                ],
                "context": [
                    "bool",
                    "telegram.exCallbackContext",
                    "telegram.Update",
                    "telegram.boBot",
                    "telegram.Bot"
                ]
            }
        },
        "start_cmd": {
            "name": "start_cmd",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "update": [
                    "bytes",
                    "telegram.update.Update",
                    "list[dict[, ]]",
                    "str",
                    "List[dict]",
                    "telegram.Update",
                    "telegram.Bot"
                ],
                "_": [
                    "int",
                    "Optional[dict]",
                    "str",
                    "dict[, ]",
                    "bool",
                    "None"
                ]
            }
        },
        "button": {
            "name": "button",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "update": [
                    "dict[str, typing.Any]",
                    "telegram.exCallbackContext",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "list[]",
                    "str",
                    "dict[str, str]",
                    "dict",
                    "list",
                    "Dict[str, str]",
                    "telegram.Update"
                ],
                "context": [
                    "bool",
                    "telegram.exCallbackContext",
                    "telegram.Update",
                    "telegram.boBot",
                    "telegram.Bot"
                ]
            }
        },
        "get_gym_exercises_inline_query_callback": {
            "name": "get_gym_exercises_inline_query_callback",
            "location": 55,
            "return": [
                "Callable"
            ],
            "arguments": {
                "exercises": [
                    "List[telegram_bot.exercises.Exercise]"
                ]
            }
        },
        "run_dtg_bot": {
            "name": "run_dtg_bot",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_gym_exercises_inline_query_callback.gym_exercises_inline_query": {
            "name": "gym_exercises_inline_query",
            "location": 58,
            "return": [
                "None",
                "DefaultDict",
                "Set[str]",
                "str",
                "List[src.autoks.core.gp_model.GPModel]"
            ],
            "arguments": {
                "update": [
                    "dict"
                ],
                "_": [
                    "List[str]",
                    "telegram.Update",
                    "list",
                    "Iterable[boyleworkflow.core.Comp]",
                    "bool",
                    "List[Dict]",
                    "Iterable[str]"
                ]
            }
        }
    },
    "telegram-bot-test-master/telegram_bot/bots/dtg_expenses_bot.py": {
        "build_numeric_inline_keyboard": {
            "name": "build_numeric_inline_keyboard",
            "location": 61,
            "return": [
                "bool",
                "None",
                "InlineKeyboardMarkup"
            ],
            "arguments": {}
        },
        "build_currency_choices": {
            "name": "build_currency_choices",
            "location": 86,
            "return": [
                "bool",
                "InlineKeyboardMarkup"
            ],
            "arguments": {}
        },
        "run_dtg_expenses_bot": {
            "name": "run_dtg_expenses_bot",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "build_numeric_inline_keyboard.add_key": {
            "name": "add_key",
            "location": 66,
            "return": [
                "InlineKeyboardButton",
                "str",
                "bytes",
                "Tuple[str, str]"
            ],
            "arguments": {
                "key": [
                    "str",
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "Optional[str]",
                    "Optional[Union[Any, str]]"
                ]
            }
        },
        "AddExpenseFlow.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AddExpenseFlow._next_state": {
            "name": "_next_state",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AddExpenseFlow._reset_state": {
            "name": "_reset_state",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AddExpenseFlow.start_conversation_flow": {
            "name": "start_conversation_flow",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "update": [
                    "bytes",
                    "list[dict[str, typing.Any]]",
                    "telegram.update.Update",
                    "telegram.Bot",
                    "telegram.Update",
                    "List[Dict[str, Any]]"
                ],
                "context": [
                    "bool",
                    "list[typing.Callable[, ]]",
                    "telegram.exCallbackContext",
                    "telegram.Update",
                    "List[Callable]"
                ]
            }
        },
        "AddExpenseFlow.handle_user_responses": {
            "name": "handle_user_responses",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "update": [
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "dict[, ]",
                    "dict",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "telegram.exCallbackContext"
                ],
                "context": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Exception",
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "AddExpenseFlow._change_stage": {
            "name": "_change_stage",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "to": [
                    "Stage"
                ]
            }
        },
        "AddExpenseFlow._pick_payment_account": {
            "name": "_pick_payment_account",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "telegram_bot.expenses.PaymentAccount"
                ]
            }
        },
        "AddExpenseFlow._ask_user_to_input_paid_amount": {
            "name": "_ask_user_to_input_paid_amount",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "dict[str, typing.Any]",
                    "str",
                    "Dict[str, Any]",
                    "list[str]",
                    "List[str]",
                    "typing.IO",
                    "IO[bytes]",
                    "IO[str]"
                ]
            }
        },
        "AddExpenseFlow._press_amount_key": {
            "name": "_press_amount_key",
            "location": 188,
            "return": [
                "Stage"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Key"
                ]
            }
        },
        "AddExpenseFlow._ask_user_to_select_currency": {
            "name": "_ask_user_to_select_currency",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "AnyStr",
                    "typing.AnyStr"
                ]
            }
        },
        "AddExpenseFlow._pick_currency": {
            "name": "_pick_currency",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "currency": [
                    "telegram_bot.expenses.Currency"
                ]
            }
        },
        "AddExpenseFlow._ask_user_to_select_if_payment_is_shared": {
            "name": "_ask_user_to_select_if_payment_is_shared",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str"
                ]
            }
        },
        "AddExpenseFlow._set_is_shared": {
            "name": "_set_is_shared",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "is_shared": [
                    "bool"
                ]
            }
        },
        "AddExpenseFlow._create_expense_entry": {
            "name": "_create_expense_entry",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Exception",
                    "Callable",
                    "typing.Callable[, ]",
                    "Type",
                    "typing.Type"
                ]
            }
        }
    },
    "telegram-bot-test-master/telegram_bot/bots/__init__.py": {}
}
{
    "telescope-main/checks/core/certificate_expiration.py": {},
    "telescope-main/checks/core/cloudfront_age.py": {},
    "telescope-main/checks/core/deployed_version.py": {},
    "telescope-main/checks/core/heartbeat.py": {},
    "telescope-main/checks/core/latency.py": {},
    "telescope-main/checks/core/maintenance.py": {},
    "telescope-main/checks/normandy/jexl_error_rate.py": {},
    "telescope-main/checks/normandy/recipe_signatures.py": {},
    "telescope-main/checks/normandy/remotesettings_recipes.py": {
        "compare_recipes_lists": {
            "name": "compare_recipes_lists",
            "location": 20,
            "return": [
                "Tuple[(List[Dict[(str, Any)]], List[Dict[(str, Any)]])]"
            ],
            "arguments": {
                "a": [
                    "bytes",
                    "List[int]",
                    "int"
                ],
                "b": [
                    "List",
                    "List[range]",
                    "List[list]",
                    "List[int]",
                    "int"
                ]
            }
        }
    },
    "telescope-main/checks/normandy/reported_recipes.py": {},
    "telescope-main/checks/normandy/uptake_error_rate.py": {
        "sort_dict_desc": {
            "name": "sort_dict_desc",
            "location": 101,
            "return": [
                "Dict[(nothing, nothing)]"
            ],
            "arguments": {
                "d": [
                    "Dict[str,Any]",
                    "Dict",
                    "str",
                    "Union[str,int]",
                    "Set",
                    "bytes"
                ],
                "key": [
                    "str",
                    "Dict[str,Any]",
                    "Set",
                    "bytes",
                    "Union[str,int]",
                    "Dict",
                    "int"
                ]
            }
        }
    },
    "telescope-main/checks/remotesettings/attachments_availability.py": {},
    "telescope-main/checks/remotesettings/backported_records.py": {},
    "telescope-main/checks/remotesettings/blocked_pages.py": {},
    "telescope-main/checks/remotesettings/certificates_expiration.py": {},
    "telescope-main/checks/remotesettings/changes_timestamps.py": {},
    "telescope-main/checks/remotesettings/cloudfront_invalidations.py": {},
    "telescope-main/checks/remotesettings/collections_consistency.py": {},
    "telescope-main/checks/remotesettings/crlite_filter_age.py": {},
    "telescope-main/checks/remotesettings/latest_approvals.py": {},
    "telescope-main/checks/remotesettings/public_suffix_list.py": {},
    "telescope-main/checks/remotesettings/push_timestamp.py": {},
    "telescope-main/checks/remotesettings/signatures_age.py": {},
    "telescope-main/checks/remotesettings/total_approvals.py": {},
    "telescope-main/checks/remotesettings/uptake_error_rate.py": {
        "sort_dict_desc": {
            "name": "sort_dict_desc",
            "location": 91,
            "return": [
                "Dict[(nothing, nothing)]"
            ],
            "arguments": {
                "d": [
                    "Dict[str,Any]",
                    "Dict",
                    "str",
                    "Union[str,int]",
                    "Set",
                    "bytes"
                ],
                "key": [
                    "str",
                    "Dict[str,Any]",
                    "Set",
                    "bytes",
                    "Union[str,int]",
                    "Dict",
                    "int"
                ]
            }
        },
        "parse_ignore_status": {
            "name": "parse_ignore_status",
            "location": 95,
            "return": [
                "str",
                "Tuple[Text]"
            ],
            "arguments": {
                "ign": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "telescope-main/checks/remotesettings/uptake_max_age.py": {},
    "telescope-main/checks/remotesettings/uptake_max_duration.py": {},
    "telescope-main/checks/remotesettings/utils.py": {
        "records_equal": {
            "name": "records_equal",
            "location": 162,
            "return": [
                "bool"
            ],
            "arguments": {
                "a": [
                    "str",
                    "Iterable",
                    "Dict[str, str]",
                    "Match[bytes]",
                    "List[str]"
                ],
                "b": [
                    "Dict",
                    "Dict[str,Any]",
                    "int",
                    "str"
                ]
            }
        },
        "compare_collections": {
            "name": "compare_collections",
            "location": 170,
            "return": [
                "Optional[Tuple[(list, list, list)]]"
            ],
            "arguments": {
                "a": [
                    "List[str]",
                    "int",
                    "Mapping"
                ],
                "b": [
                    "List",
                    "int",
                    "List[object]",
                    "List[int]",
                    "List[list[int]]",
                    "List[List[int]]"
                ]
            }
        },
        "human_diff": {
            "name": "human_diff",
            "location": 191,
            "return": [
                "str"
            ],
            "arguments": {
                "left": [
                    "str",
                    "List[str]",
                    "List[int]",
                    "Set[str]",
                    "List",
                    "Union[List[str],str]"
                ],
                "right": [
                    "str",
                    "List[str]",
                    "List[int]",
                    "Set[str]",
                    "List",
                    "Union[List[str],str]"
                ],
                "missing": [
                    "List[str]",
                    "str",
                    "List['cirq.Circuit']",
                    "Set[Tuple[str, str]]",
                    "Iterable[int]",
                    "bool"
                ],
                "differ": [
                    "List[str]",
                    "str",
                    "List['cirq.Circuit']",
                    "Set[Tuple[str, str]]",
                    "Iterable[int]",
                    "bool"
                ],
                "extras": [
                    "List[str]",
                    "str",
                    "List['cirq.Circuit']",
                    "Set[Tuple[str, str]]",
                    "Iterable[int]",
                    "bool"
                ],
                "show_ids": [
                    "int",
                    "Optional[str]",
                    "List[str]",
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "KintoClient.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "human_diff.ellipse": {
            "name": "ellipse",
            "location": 199,
            "return": [
                "str",
                "int",
                "Dict[str,Any]",
                "Set",
                "asyncio.Task[None]",
                "Dict[str,Dict[str,int]]"
            ],
            "arguments": {
                "line": [
                    "List[str]",
                    "Union[str, List[str]]",
                    "str"
                ]
            }
        }
    },
    "telescope-main/checks/remotesettings/validate_signatures.py": {},
    "telescope-main/checks/remotesettings/work_in_progress.py": {},
    "telescope-main/checks/remotesettings/__init__.py": {},
    "telescope-main/checks/taskcluster/create_task.py": {},
    "telescope-main/checks/taskcluster/latest_indexed.py": {},
    "telescope-main/checks/taskcluster/utils.py": {
        "options_from_params": {
            "name": "options_from_params",
            "location": 4,
            "return": [
                "Dict[Text,Union[str,None,dict[Text,str]]]",
                "str",
                "Optional[Dict[str,Any]]",
                "bool",
                "Optional[dict]"
            ],
            "arguments": {
                "root_url": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "client_id": [
                    "str",
                    "Optional[str]"
                ],
                "access_token": [
                    "str",
                    "Optional[str]"
                ],
                "certificate": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "telescope-main/checks/taskcluster/write_secrets.py": {},
    "telescope-main/checks/taskcluster/__init__.py": {},
    "telescope-main/telescope/app.py": {
        "_send_sentry": {
            "name": "_send_sentry",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "str"
                ],
                "payload": [
                    "List[str]",
                    "bool",
                    "cmk.utils.type_defs.HostName"
                ]
            }
        },
        "_log_result": {
            "name": "_log_result",
            "location": 365,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "str"
                ],
                "payload": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, bool]"
                ]
            }
        },
        "init_app": {
            "name": "init_app",
            "location": 399,
            "return": [
                "aiohttp.web.Application",
                "\"App\""
            ],
            "arguments": {
                "checks": [
                    "Dict",
                    "aiohttp.web.Application"
                ]
            }
        },
        "run_check": {
            "name": "run_check",
            "location": 439,
            "return": [
                "str",
                "int",
                "bool",
                "asyncio.events.AbstractEventLoop",
                "list"
            ],
            "arguments": {
                "check": [
                    "List[T]",
                    "Iterable[T]",
                    "bytes",
                    "List[Dict]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 448,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "argv": [
                    "list",
                    "str",
                    "Set[Tuple[str, str]]",
                    "tuple",
                    "Tuple[str, str]",
                    "int"
                ]
            }
        },
        "Checks.from_conf": {
            "name": "from_conf",
            "location": 29,
            "return": [
                "Checks"
            ],
            "arguments": {
                "cls": [
                    "Type[_TChecks]"
                ],
                "conf": [
                    "raiden.utils.Dict[str, raiden.utils.Any]",
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, Dict]"
                ]
            }
        },
        "Checks.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "checks": [
                    "float",
                    "bool"
                ]
            }
        },
        "Checks.lookup": {
            "name": "lookup",
            "location": 40,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "project": [
                    "None",
                    "Optional[Sequence[str]]",
                    "Callable[,str]",
                    "Sequence[str]",
                    "Tuple",
                    "Optional[Union[Any,Any]]",
                    "Any",
                    "Sequence",
                    "Optional[Callable[...,Any]]",
                    "MutableMapping",
                    "str",
                    "Optional[MutableMapping[Any,Any]]",
                    "Optional[str]"
                ],
                "name": [
                    "str",
                    "None",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "Sequence[str]",
                    "Optional[Callable[...,Any]]",
                    "Callable[...,Any]"
                ],
                "tag": [
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "Check.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "int",
                    "Optional[int]"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[Dict[str,str]]",
                    "Dict[str,str]"
                ],
                "description": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None",
                    "int",
                    "Optional[int]"
                ],
                "module": [
                    "str",
                    "Dict[str,Dict[str,bool]]",
                    "Dict[str,dict[str,bool]]"
                ],
                "tags": [
                    "str",
                    "None",
                    "Type",
                    "Optional[str]",
                    "int",
                    "Optional[Sequence]",
                    "Sequence"
                ],
                "ttl": [
                    "None",
                    "str",
                    "cmk.utils.type_defs.HostName",
                    "Dict",
                    "bool",
                    "Optional[bool]",
                    "cmk.utils.type_defs.Item"
                ],
                "params": [
                    "str",
                    "None",
                    "List[str]",
                    "Dict[str,Any]",
                    "int",
                    "List[Tuple[str,Any]]",
                    "List[tuple[Union[str,Any]]]"
                ],
                "plot": [
                    "None",
                    "bool",
                    "str",
                    "Optional[str]",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "Check.plot": {
            "name": "plot",
            "location": 151,
            "return": [
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Check.exposed_params": {
            "name": "exposed_params",
            "location": 156,
            "return": [
                "Dict",
                "Set[str]",
                "Dict[int,Dict[int,Any]]",
                "str",
                "Dict[str,str]",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Check.info": {
            "name": "info",
            "location": 161,
            "return": [
                "Dict[Text,Text]",
                "Dict[str,Any]",
                "str",
                "Mapping[str,Any]",
                "Exception",
                "int",
                "Dict[str,Union[str,Set]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Check.override_params": {
            "name": "override_params",
            "location": 178,
            "return": [
                "Check"
            ],
            "arguments": {
                "self": [
                    "_TCheck@@Check@@"
                ],
                "params": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "telescope-main/telescope/config.py": {
        "interpolate_env": {
            "name": "interpolate_env",
            "location": 78,
            "return": [
                "dict"
            ],
            "arguments": {
                "d": [
                    "Dict[str,tuple[Union[Any,Any]]]",
                    "Dict[str,Tuple[Any,Any]]",
                    "Dict[str,dict[str,str]]",
                    "Dict[str,Any]",
                    "Dict[str,Dict[str,str]]"
                ]
            }
        },
        "load": {
            "name": "load",
            "location": 94,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "configfile": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "telescope-main/telescope/middleware.py": {},
    "telescope-main/telescope/typings.py": {},
    "telescope-main/telescope/utils.py": {
        "utcnow": {
            "name": "utcnow",
            "location": 153,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {}
        },
        "utcfromtimestamp": {
            "name": "utcfromtimestamp",
            "location": 158,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "timestamp": [
                    "str"
                ]
            }
        },
        "utcfromisoformat": {
            "name": "utcfromisoformat",
            "location": 162,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "iso8601": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "render_checks": {
            "name": "render_checks",
            "location": 167,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "cast_value": {
            "name": "cast_value",
            "location": 239,
            "return": [
                "Type[T]",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "_type": [
                    "str"
                ],
                "value": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "T",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "csv_quoted": {
            "name": "csv_quoted",
            "location": 256,
            "return": [
                "str"
            ],
            "arguments": {
                "values": [
                    "list",
                    "str",
                    "float",
                    "List[str]",
                    "List[Dict[str, Any]]",
                    "int"
                ]
            }
        },
        "extract_json": {
            "name": "extract_json",
            "location": 264,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Optional[bool]",
                    "Optional[Union[Dict, str, int, bytes]]"
                ],
                "data": [
                    "dict",
                    "bool",
                    "bytes",
                    "int",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "Cache.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cache.lock": {
            "name": "lock",
            "location": 30,
            "return": [
                "asyncio.locks.Lock"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Union[int, slice]",
                    "T"
                ]
            }
        },
        "Cache.set": {
            "name": "set",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "MutableMapping[Any, Any]",
                    "List[str]"
                ],
                "value": [
                    "str",
                    "int",
                    "MutableMapping[Any, Any]",
                    "List[str]"
                ],
                "ttl": [
                    "bytes",
                    "str",
                    "List[Tuple[int, int]]",
                    "dict",
                    "bool",
                    "int"
                ]
            }
        },
        "Cache.get": {
            "name": "get",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "KT"
                ]
            }
        },
        "DummyLock.__await__": {
            "name": "__await__",
            "location": 51,
            "return": [
                "Generator[(None, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DummyLock.__aenter__": {
            "name": "__aenter__",
            "location": 54,
            "return": [
                "DummyLock"
            ],
            "arguments": {
                "self": [
                    "_TDummyLock@@DummyLock@@"
                ]
            }
        },
        "DummyLock.__aexit__": {
            "name": "__aexit__",
            "location": 57,
            "return": [
                "DummyLock"
            ],
            "arguments": {
                "self": [
                    "_TDummyLock@@DummyLock@@"
                ]
            }
        },
        "BugTracker.__init__": {
            "name": "__init__",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cache": [
                    "bool",
                    "str"
                ]
            }
        },
        "EventEmitter.__init__": {
            "name": "__init__",
            "location": 372,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventEmitter.emit": {
            "name": "emit",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict",
                    "str"
                ],
                "payload": [
                    "dict"
                ]
            }
        },
        "EventEmitter.on": {
            "name": "on",
            "location": 379,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict",
                    "str"
                ],
                "callback": [
                    "dict",
                    "str"
                ]
            }
        },
        "fetch_bigquery.job": {
            "name": "job",
            "location": 388,
            "return": [
                "Tuple[int, int]",
                "float",
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "History.__init__": {
            "name": "__init__",
            "location": 410,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cache": [
                    "bool",
                    "str"
                ]
            }
        },
        "BugTracker.fetch._heat": {
            "name": "_heat",
            "location": 336,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "datestr": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "telescope-main/telescope/__init__.py": {},
    "telescope-main/telescope/__main__.py": {},
    "telescope-main/tests/conftest.py": {
        "test_config_toml": {
            "name": "test_config_toml",
            "location": 28,
            "return": [
                "typing.Generator[str]"
            ],
            "arguments": {}
        },
        "mock_aioresponses": {
            "name": "mock_aioresponses",
            "location": 55,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "cli": [
                    "str"
                ]
            }
        },
        "mock_responses": {
            "name": "mock_responses",
            "location": 80,
            "return": [
                "typing.Generator[ResponsesWrapper]"
            ],
            "arguments": {}
        },
        "ResponsesWrapper.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rsps": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "ResponsesWrapper.get": {
            "name": "get",
            "location": 67,
            "return": [
                "bool",
                "str",
                "app.models.User",
                "app.domain.common.TimeWindow"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponsesWrapper.head": {
            "name": "head",
            "location": 71,
            "return": [
                "bool",
                "OrderedDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponsesWrapper.calls": {
            "name": "calls",
            "location": 75,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "telescope-main/tests/test_app_init.py": {
        "test_unknown_configuration_parameter": {
            "name": "test_unknown_configuration_parameter",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "telescope-main/tests/test_basic_endpoints.py": {
        "test_sends_events.callback": {
            "name": "callback",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "event_type": [
                    "Union[Dict, Tuple]",
                    "Dict[str, Any]",
                    "dict",
                    "Callable"
                ],
                "payload": [
                    "dict",
                    "mock.Mock",
                    "tuple"
                ]
            }
        },
        "test_check_parallel.Callback.__init__": {
            "name": "__init__",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_check_parallel.Callback.__call__": {
            "name": "__call__",
            "location": 246,
            "return": [
                "CallbackResult",
                "int",
                "bool",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Optional[Mapping[str, str]]",
                    "bool"
                ]
            }
        }
    },
    "telescope-main/tests/test_config.py": {
        "test_env_vars_are_expanded_in_values": {
            "name": "test_env_vars_are_expanded_in_values",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "telescope-main/tests/test_main.py": {
        "test_run_check": {
            "name": "test_run_check",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_aioresponses": []
            }
        }
    },
    "telescope-main/tests/test_utils.py": {
        "test_cache_set_get": {
            "name": "test_cache_set_get",
            "location": 18,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_extract_json": {
            "name": "test_extract_json",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "telescope-main/tests/utils.py": {
        "patch_async": {
            "name": "patch_async",
            "location": 14,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        }
    },
    "telescope-main/tests/__init__.py": {},
    "telescope-main/tests/checks/core/test_certificate_expiration.py": {},
    "telescope-main/tests/checks/core/test_cloudfront_age.py": {},
    "telescope-main/tests/checks/core/test_deployed_version.py": {},
    "telescope-main/tests/checks/core/test_heartbeat.py": {},
    "telescope-main/tests/checks/core/test_latency.py": {
        "test_positive.callback": {
            "name": "callback",
            "location": 9,
            "return": [
                "CallbackResult"
            ],
            "arguments": {
                "url": []
            }
        },
        "test_negative.callback": {
            "name": "callback",
            "location": 23,
            "return": [
                "CallbackResult",
                "Callable",
                "List[str]",
                "int",
                "Dict"
            ],
            "arguments": {
                "url": [
                    "Dict[str, Union[str, int]]",
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "telescope-main/tests/checks/core/test_maintenance.py": {},
    "telescope-main/tests/checks/normandy/test_normandy_jexl_error_rate.py": {},
    "telescope-main/tests/checks/normandy/test_normandy_uptake_error_rate.py": {},
    "telescope-main/tests/checks/normandy/test_recipe_signatures.py": {},
    "telescope-main/tests/checks/normandy/test_remotesettings_recipes.py": {
        "_d": {
            "name": "_d",
            "location": 126,
            "return": [
                "dict"
            ],
            "arguments": {
                "d": [
                    "dict",
                    "Callable",
                    "int"
                ]
            }
        }
    },
    "telescope-main/tests/checks/normandy/test_reported_recipes.py": {},
    "telescope-main/tests/checks/remotesettings/test_attachments_availability.py": {},
    "telescope-main/tests/checks/remotesettings/test_backported_records.py": {},
    "telescope-main/tests/checks/remotesettings/test_blocked_pages.py": {
        "mock_kinto_responses": {
            "name": "mock_kinto_responses",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_responses": [
                    "str",
                    "dict",
                    "List[Dict[str, Any]]"
                ],
                "server_url": [
                    "str",
                    "List[dict[str,Any]]",
                    "Dict",
                    "List[Dict[str,Any]]"
                ]
            }
        }
    },
    "telescope-main/tests/checks/remotesettings/test_certificates_expiration.py": {
        "mock_http_calls": {
            "name": "mock_http_calls",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_responses": [
                    "Dict",
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "List[Dict[str,Any]]",
                    "str"
                ],
                "server_url": [
                    "str",
                    "List[str]",
                    "Optional[Dict[str,Any]]"
                ]
            }
        }
    },
    "telescope-main/tests/checks/remotesettings/test_changes_timestamps.py": {},
    "telescope-main/tests/checks/remotesettings/test_cloudfront_invalidations.py": {},
    "telescope-main/tests/checks/remotesettings/test_collections_consistency.py": {},
    "telescope-main/tests/checks/remotesettings/test_crlite_filter_age.py": {
        "add_mock_responses": {
            "name": "add_mock_responses",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_responses": [
                    "Dict",
                    "str",
                    "List[Dict[str,Any]]",
                    "bytes"
                ],
                "hours": [
                    "Dict",
                    "str",
                    "List",
                    "bytes",
                    "bool",
                    "Union[Contributor,Coverage]"
                ]
            }
        }
    },
    "telescope-main/tests/checks/remotesettings/test_latest_approvals.py": {},
    "telescope-main/tests/checks/remotesettings/test_public_suffix_list.py": {},
    "telescope-main/tests/checks/remotesettings/test_push_timestamp.py": {},
    "telescope-main/tests/checks/remotesettings/test_signatures_age.py": {},
    "telescope-main/tests/checks/remotesettings/test_total_approvals.py": {},
    "telescope-main/tests/checks/remotesettings/test_uptake_error_rate.py": {
        "test_parse_ignore_status": {
            "name": "test_parse_ignore_status",
            "location": 359,
            "return": [
                "None"
            ],
            "arguments": {
                "ignore": [
                    "str",
                    "Dict[str,Any]",
                    "None",
                    "Sequence[int]",
                    "Optional[str]",
                    "Iterable[str]"
                ],
                "expected": [
                    "str",
                    "Dict[str,Any]",
                    "None",
                    "Sequence[int]",
                    "Optional[str]",
                    "Iterable[str]"
                ]
            }
        }
    },
    "telescope-main/tests/checks/remotesettings/test_uptake_max_age.py": {},
    "telescope-main/tests/checks/remotesettings/test_uptake_max_duration.py": {},
    "telescope-main/tests/checks/remotesettings/test_utils.py": {
        "test_kinto_auth": {
            "name": "test_kinto_auth",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "telescope-main/tests/checks/remotesettings/test_validate_signatures.py": {},
    "telescope-main/tests/checks/remotesettings/test_work_in_progress.py": {},
    "telescope-main/tests/checks/taskcluster/test_create_task.py": {},
    "telescope-main/tests/checks/taskcluster/test_latest_indexed.py": {
        "fake_index": {
            "name": "fake_index",
            "location": 22,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "fake_queue": {
            "name": "fake_queue",
            "location": 33,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        }
    },
    "telescope-main/tests/checks/taskcluster/test_write_secrets.py": {}
}
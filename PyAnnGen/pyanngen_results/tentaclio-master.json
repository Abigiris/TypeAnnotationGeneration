{
    "tentaclio-master/setup.py": {
        "VerifyVersionCommand.run": {
            "name": "run",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tentaclio-master/docs/conf.py": {},
    "tentaclio-master/src/tentaclio/protocols.py": {
        "Closable.close": {
            "name": "close",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Reader.read": {
            "name": "read",
            "location": 31,
            "return": [
                "T_read"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int"
                ]
            }
        },
        "_Writer.write": {
            "name": "write",
            "location": 36,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "contents": [
                    "T_write"
                ]
            }
        }
    },
    "tentaclio-master/src/tentaclio/registry.py": {
        "URLHandlerRegistry.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "URLHandlerRegistry.register": {
            "name": "register",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scheme": [
                    "str"
                ],
                "url_handler": [
                    "T"
                ]
            }
        },
        "URLHandlerRegistry.get_handler": {
            "name": "get_handler",
            "location": 27,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [],
                "scheme": [
                    "str"
                ]
            }
        },
        "URLHandlerRegistry.__contains__": {
            "name": "__contains__",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "scheme": [
                    "str"
                ]
            }
        }
    },
    "tentaclio-master/src/tentaclio/urls.py": {
        "_netloc_from_components": {
            "name": "_netloc_from_components",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "username": [
                    "str",
                    "None",
                    "Optional[str]"
                ],
                "password": [
                    "str",
                    "None",
                    "Optional[str]"
                ],
                "hostname": [
                    "str",
                    "None"
                ],
                "port": [
                    "str",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "URL.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "URL._parse_url": {
            "name": "_parse_url",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "URL.copy": {
            "name": "copy",
            "location": 75,
            "return": [
                "URL"
            ],
            "arguments": {
                "self": [
                    "_TURL"
                ],
                "scheme": [
                    "str"
                ],
                "username": [
                    "str"
                ],
                "password": [
                    "str"
                ],
                "hostname": [
                    "str"
                ],
                "port": [
                    "int"
                ],
                "path": [
                    "str"
                ],
                "query": [
                    "str"
                ]
            }
        },
        "URL.from_components": {
            "name": "from_components",
            "location": 97,
            "return": [
                "URL"
            ],
            "arguments": {
                "cls": [
                    "Type[_TURL]"
                ],
                "scheme": [
                    "str",
                    "None",
                    "List[List[float]]",
                    "Pattern",
                    "list[list[float]]",
                    "typing.Pattern"
                ],
                "username": [
                    "str",
                    "int",
                    "None"
                ],
                "password": [
                    "str",
                    "int",
                    "None"
                ],
                "hostname": [
                    "str",
                    "int",
                    "None"
                ],
                "port": [
                    "str",
                    "int",
                    "None"
                ],
                "path": [
                    "str",
                    "None",
                    "List[List[float]]",
                    "Pattern",
                    "list[list[float]]",
                    "typing.Pattern"
                ],
                "query": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "URL.__str__": {
            "name": "__str__",
            "location": 119,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "URL.__eq__": {
            "name": "__eq__",
            "location": 126,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "Callable",
                    "typing.Callable[, ]",
                    "Dict[str, Union[str, int, bool]]",
                    "dict[str, typing.Union[str,int,bool]]"
                ]
            }
        },
        "URL.__repr__": {
            "name": "__repr__",
            "location": 132,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "URL.scheme": {
            "name": "scheme",
            "location": 137,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "URL.username": {
            "name": "username",
            "location": 142,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "URL.password": {
            "name": "password",
            "location": 147,
            "return": [
                "str",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "URL.hostname": {
            "name": "hostname",
            "location": 152,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "URL.port": {
            "name": "port",
            "location": 157,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "URL.path": {
            "name": "path",
            "location": 162,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "URL.query": {
            "name": "query",
            "location": 167,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "URL.url": {
            "name": "url",
            "location": 172,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tentaclio-master/src/tentaclio/__init__.py": {},
    "tentaclio-master/src/tentaclio/__main__.py": {
        "main": {
            "name": "main",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "url": {
            "name": "url",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "compose_url": {
            "name": "compose_url",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "scheme": [
                    "str"
                ],
                "username": [
                    "str"
                ],
                "password": [
                    "str"
                ],
                "hostname": [
                    "str"
                ],
                "port": [
                    "str"
                ],
                "path": [
                    "str"
                ],
                "key": [
                    "str",
                    "dict[, ]",
                    "bool",
                    "list[str]",
                    "dict",
                    "List[str]"
                ]
            }
        }
    },
    "tentaclio-master/src/tentaclio/clients/base_client.py": {
        "BaseClient.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "Union[(str, urls.URL)]"
                ]
            }
        },
        "BaseClient.__enter__": {
            "name": "__enter__",
            "location": 35,
            "return": [
                "T"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseClient.__exit__": {
            "name": "__exit__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseClient.connect": {
            "name": "connect",
            "location": 46,
            "return": [
                "protocols.Closable"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseClient._connect": {
            "name": "_connect",
            "location": 52,
            "return": [
                "protocols.Closable"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseClient.close": {
            "name": "close",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tentaclio-master/src/tentaclio/clients/decorators.py": {
        "check_conn": {
            "name": "check_conn",
            "location": 9,
            "return": [
                "Callable[(..., T)]"
            ],
            "arguments": {
                "func": [
                    "Callable[(..., T)]"
                ]
            }
        },
        "check_conn._wrapper": {
            "name": "_wrapper",
            "location": 13,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Mapping[str, Sequence[str]]"
            ],
            "arguments": {}
        }
    },
    "tentaclio-master/src/tentaclio/clients/exceptions.py": {},
    "tentaclio-master/src/tentaclio/clients/ftp_client.py": {
        "FTPClient.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "Union[(str, urls.URL)]"
                ]
            }
        },
        "FTPClient._connect": {
            "name": "_connect",
            "location": 34,
            "return": [
                "ftplib.FTP"
            ],
            "arguments": {
                "self": []
            }
        },
        "FTPClient.get": {
            "name": "get",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "writer": [
                    "str"
                ],
                "file_path": [
                    "str",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "FTPClient.put": {
            "name": "put",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reader": [
                    "bytes",
                    "IO[bytes]",
                    "str"
                ],
                "file_path": [
                    "str",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "FTPClient._scan_mlds": {
            "name": "_scan_mlds",
            "location": 75,
            "return": [
                "List[fs.scanner.DirEntry]"
            ],
            "arguments": {
                "self": [],
                "base_url": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "FTPClient._scan_dir": {
            "name": "_scan_dir",
            "location": 90,
            "return": [
                "List[fs.scanner.DirEntry]"
            ],
            "arguments": {
                "self": [],
                "base_url": [
                    "list",
                    "str",
                    "list[]",
                    "Awaitable",
                    "collections.abc.Awaitable[]",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "FTPClient.scandir": {
            "name": "scandir",
            "location": 113,
            "return": [
                "Iterable[fs.scanner.DirEntry]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FTPClient.remove": {
            "name": "remove",
            "location": 127,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SFTPClient.__init__": {
            "name": "__init__",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "Union[(str, urls.URL)]"
                ]
            }
        },
        "SFTPClient._connect": {
            "name": "_connect",
            "location": 151,
            "return": [
                "pysftp.Connection"
            ],
            "arguments": {
                "self": []
            }
        },
        "SFTPClient.get": {
            "name": "get",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "writer": [
                    "str"
                ],
                "file_path": [
                    "str",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "SFTPClient.put": {
            "name": "put",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reader": [
                    "tentaclio.protocols.ByteReader",
                    "str"
                ],
                "file_path": [
                    "str",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "SFTPClient.scandir": {
            "name": "scandir",
            "location": 201,
            "return": [
                "Iterable[fs.scanner.DirEntry]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SFTPClient.remove": {
            "name": "remove",
            "location": 217,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FTPClient._scan_dir.parser": {
            "name": "parser",
            "location": 97,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "line": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "tentaclio-master/src/tentaclio/clients/http_client.py": {
        "HTTPClient.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "default_timeout": [
                    "float"
                ],
                "default_headers": [
                    "dict"
                ]
            }
        },
        "HTTPClient._connect": {
            "name": "_connect",
            "location": 65,
            "return": [
                "requests.sessions.Session"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPClient.get": {
            "name": "get",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "writer": [
                    "str",
                    "bool",
                    "tentaclio.protocols.ByteWriter",
                    "requests.models.Response"
                ],
                "endpoint": [
                    "str",
                    "None",
                    "List[str]",
                    "Callable[[str], str]",
                    "list[str]",
                    "typing.Callable[str, str]"
                ],
                "params": [
                    "str",
                    "None",
                    "Dict[str, Any]",
                    "bytes",
                    "dict",
                    "dict[str, typing.Any]",
                    "Optional[dict]",
                    "dict[, ]"
                ],
                "options": [
                    "str",
                    "None",
                    "Tuple[int, int]",
                    "dict",
                    "tuple[typing.Union[int,int]]",
                    "dict[, ]"
                ]
            }
        },
        "HTTPClient.put": {
            "name": "put",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reader": [
                    "str",
                    "bytes",
                    "int",
                    "io.StringIO"
                ],
                "endpoint": [
                    "str",
                    "None",
                    "List[str]",
                    "list[str]"
                ],
                "params": [
                    "Dict[str, Any]",
                    "None",
                    "bool",
                    "dict[str, typing.Any]",
                    "str",
                    "dict",
                    "int",
                    "dict[, ]"
                ],
                "options": [
                    "str",
                    "None",
                    "bool",
                    "Optional[dict]",
                    "dict[, ]",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "HTTPClient._fetch_url": {
            "name": "_fetch_url",
            "location": 124,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "endpoint": [
                    "str"
                ]
            }
        },
        "HTTPClient._build_request": {
            "name": "_build_request",
            "location": 131,
            "return": [
                "requests.models.PreparedRequest"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str"
                ],
                "url": [
                    "str"
                ],
                "default_data": [
                    "protocols.Reader"
                ],
                "default_params": [
                    "dict"
                ]
            }
        },
        "HTTPClient._send_request": {
            "name": "_send_request",
            "location": 152,
            "return": [
                "requests.models.Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "requests.models.PreparedRequest"
                ],
                "default_options": [
                    "dict"
                ]
            }
        },
        "HTTPClient._check_response": {
            "name": "_check_response",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "response": [
                    "requests.models.Response"
                ]
            }
        }
    },
    "tentaclio-master/src/tentaclio/clients/importer.py": {
        "import_tentaclio_plugins": {
            "name": "import_tentaclio_plugins",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "list_packages": [
                    "Callable[([], Iterable[str])]"
                ]
            }
        }
    },
    "tentaclio-master/src/tentaclio/clients/local_fs_client.py": {
        "_from_os_dir_entry": {
            "name": "_from_os_dir_entry",
            "location": 59,
            "return": [
                "fs.scanner.DirEntry"
            ],
            "arguments": {
                "original": [
                    "os.DirEntry"
                ]
            }
        },
        "LocalFSClient.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "Union[(str, urls.URL)]"
                ]
            }
        },
        "LocalFSClient._connect": {
            "name": "_connect",
            "location": 26,
            "return": [
                "LocalFSClient"
            ],
            "arguments": {
                "self": [
                    "_TLocalFSClient"
                ]
            }
        },
        "LocalFSClient.close": {
            "name": "close",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalFSClient.get": {
            "name": "get",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "writer": [
                    "protocols.ByteWriter"
                ]
            }
        },
        "LocalFSClient.put": {
            "name": "put",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reader": [
                    "protocols.ByteReader"
                ]
            }
        },
        "LocalFSClient.scandir": {
            "name": "scandir",
            "location": 47,
            "return": [
                "Iterable[fs.scanner.DirEntry]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalFSClient.remove": {
            "name": "remove",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tentaclio-master/src/tentaclio/clients/sqla_client.py": {
        "bound_session": {
            "name": "bound_session",
            "location": 153,
            "return": [
                "SessionGenerator",
                "typing.Generator[]"
            ],
            "arguments": {
                "connection": [
                    "bool",
                    "util.freefocus.sql.Group"
                ]
            }
        },
        "atomic_session": {
            "name": "atomic_session",
            "location": 164,
            "return": [
                "SessionGenerator",
                "typing.Generator[]"
            ],
            "arguments": {
                "connection": [
                    "bool",
                    "sqlalchemy.orm.query.Query",
                    "str",
                    "Optional[str]",
                    "None",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "_TrueContainer.__contains__": {
            "name": "__contains__",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "object"
                ]
            }
        },
        "SQLAlchemyClient.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "Union[(str, urls.URL)]"
                ],
                "execution_options": [
                    "dict"
                ],
                "connect_args": [
                    "dict"
                ]
            }
        },
        "SQLAlchemyClient._extract_url_params": {
            "name": "_extract_url_params",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLAlchemyClient._connect": {
            "name": "_connect",
            "location": 86,
            "return": [
                "sqlalchemy.engine.base.Connection"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLAlchemyClient._get_raw_conn": {
            "name": "_get_raw_conn",
            "location": 105,
            "return": [
                "sqlalchemy.dbapi.DBAPIConnection"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLAlchemyClient.set_schema": {
            "name": "set_schema",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "meta_data": [
                    "sqlalchemy.sql.schema.MetaData"
                ]
            }
        },
        "SQLAlchemyClient.delete_schema": {
            "name": "delete_schema",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "meta_data": [
                    "sqlalchemy.sql.schema.MetaData"
                ]
            }
        },
        "SQLAlchemyClient.query": {
            "name": "query",
            "location": 122,
            "return": [
                "int",
                "str",
                "pandas.DataFrame",
                "dict"
            ],
            "arguments": {
                "self": [],
                "sql_query": [
                    "str",
                    "bytes"
                ]
            }
        },
        "SQLAlchemyClient.execute": {
            "name": "execute",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sql_query": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "SQLAlchemyClient.get_df": {
            "name": "get_df",
            "location": 144,
            "return": [
                "bool",
                "Callable",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "sql_query": [
                    "str",
                    "int"
                ],
                "params": [
                    "str",
                    "int",
                    "None"
                ]
            }
        }
    },
    "tentaclio-master/src/tentaclio/clients/__init__.py": {},
    "tentaclio-master/src/tentaclio/credentials/api.py": {
        "load_credentials_injector": {
            "name": "load_credentials_injector",
            "location": 20,
            "return": [
                "str",
                "bool",
                "list[str]"
            ],
            "arguments": {}
        },
        "authenticate": {
            "name": "authenticate",
            "location": 28,
            "return": [
                "bool",
                "int",
                "str",
                "bytes",
                "Dict[str, Any]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "Optional[str]",
                    "int",
                    "None",
                    "Callable[[str], str]",
                    "typing.Callable[str, str]"
                ]
            }
        }
    },
    "tentaclio-master/src/tentaclio/credentials/env.py": {
        "_get_connection_urls": {
            "name": "_get_connection_urls",
            "location": 19,
            "return": [
                "List[urls.URL]"
            ],
            "arguments": {
                "env": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "add_credentials_from_env": {
            "name": "add_credentials_from_env",
            "location": 31,
            "return": [
                "tentaclio.credentials.injection.CredentialsInjector"
            ],
            "arguments": {
                "injector": [
                    "tentaclio.credentials.injection.CredentialsInjector"
                ],
                "env": [
                    "Optional[Dict[(str, str)]]"
                ]
            }
        }
    },
    "tentaclio-master/src/tentaclio/credentials/injection.py": {
        "_filter_by_path": {
            "name": "_filter_by_path",
            "location": 62,
            "return": [
                "List[urls.URL]"
            ],
            "arguments": {
                "url": [
                    "urls.URL"
                ],
                "to_match": [
                    "List[urls.URL]"
                ]
            }
        },
        "_filter_by_hostname": {
            "name": "_filter_by_hostname",
            "location": 73,
            "return": [
                "List[urls.URL]"
            ],
            "arguments": {
                "url": [
                    "urls.URL"
                ],
                "to_match": [
                    "List[urls.URL]"
                ]
            }
        },
        "_filter_by_user": {
            "name": "_filter_by_user",
            "location": 79,
            "return": [
                "List[urls.URL]"
            ],
            "arguments": {
                "url": [
                    "urls.URL"
                ],
                "to_match": [
                    "List[urls.URL]"
                ]
            }
        },
        "_similarity": {
            "name": "_similarity",
            "location": 88,
            "return": [
                "float"
            ],
            "arguments": {
                "path_1": [
                    "str"
                ],
                "path_2": [
                    "str"
                ]
            }
        },
        "_clean_path": {
            "name": "_clean_path",
            "location": 128,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "_compute_parts_similarity": {
            "name": "_compute_parts_similarity",
            "location": 133,
            "return": [
                "float"
            ],
            "arguments": {
                "elements_1": [
                    "List[str]"
                ],
                "elements_2": [
                    "List[str]"
                ]
            }
        },
        "CredentialsInjector.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CredentialsInjector.register_credentials": {
            "name": "register_credentials",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "urls.URL"
                ]
            }
        },
        "CredentialsInjector.inject": {
            "name": "inject",
            "location": 29,
            "return": [
                "urls.URL"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "urls.URL"
                ]
            }
        }
    },
    "tentaclio-master/src/tentaclio/credentials/reader.py": {
        "add_credentials_from_env_file": {
            "name": "add_credentials_from_env_file",
            "location": 18,
            "return": [
                "injection.CredentialsInjector"
            ],
            "arguments": {
                "injector": [
                    "injection.CredentialsInjector"
                ]
            }
        },
        "_load_creds_from_yaml": {
            "name": "_load_creds_from_yaml",
            "location": 32,
            "return": [
                "dict"
            ],
            "arguments": {
                "yaml_reader": [
                    "protocols.Reader"
                ]
            }
        },
        "_load_from_file": {
            "name": "_load_from_file",
            "location": 39,
            "return": [
                "injection.CredentialsInjector"
            ],
            "arguments": {
                "injector": [
                    "injection.CredentialsInjector"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "add_credentials_from_reader": {
            "name": "add_credentials_from_reader",
            "location": 50,
            "return": [
                "injection.CredentialsInjector"
            ],
            "arguments": {
                "injector": [
                    "injection.CredentialsInjector"
                ],
                "yaml_reader": [
                    "protocols.Reader"
                ]
            }
        }
    },
    "tentaclio-master/src/tentaclio/credentials/__init__.py": {},
    "tentaclio-master/src/tentaclio/databases/api.py": {
        "db": {
            "name": "db",
            "location": 10,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "url": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "tentaclio-master/src/tentaclio/databases/db_registry.py": {
        "Db.execute": {
            "name": "execute",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sql_query": [
                    "str"
                ]
            }
        },
        "Db.query": {
            "name": "query",
            "location": 26,
            "return": [
                "Iterable"
            ],
            "arguments": {
                "self": [],
                "sql_query": [
                    "str"
                ]
            }
        },
        "DbRegistry.get_handler": {
            "name": "get_handler",
            "location": 37,
            "return": [
                "Callable[(..., Db)]"
            ],
            "arguments": {
                "self": [],
                "scheme": [
                    "str"
                ]
            }
        }
    },
    "tentaclio-master/src/tentaclio/databases/__init__.py": {},
    "tentaclio-master/src/tentaclio/fs/api.py": {
        "scandir": {
            "name": "scandir",
            "location": 14,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "url": [
                    "str",
                    "float",
                    "List[Tuple[int, int]]",
                    "list[tuple[typing.Union[int,int]]]"
                ]
            }
        },
        "listdir": {
            "name": "listdir",
            "location": 29,
            "return": [
                "typing.Generator[str]",
                "str",
                "Tuple[str]",
                "List[str]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[str]",
                    "None",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "copy": {
            "name": "copy",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "source": [
                    "str",
                    "bool",
                    "dict",
                    "bytes",
                    "dict[, ]"
                ],
                "dest": [
                    "str",
                    "float",
                    "TextIO",
                    "typing.TextIO",
                    "list",
                    "list[]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "remove": {
            "name": "remove",
            "location": 57,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "url": [
                    "str",
                    "float",
                    "List[Tuple[int, int]]",
                    "list[tuple[typing.Union[int,int]]]"
                ]
            }
        },
        "walk": {
            "name": "walk",
            "location": 63,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "top": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "_relativize": {
            "name": "_relativize",
            "location": 72,
            "return": [
                "str",
                "Callable",
                "float"
            ],
            "arguments": {
                "base": [
                    "str"
                ],
                "current": [
                    "str"
                ]
            }
        },
        "_process_entry": {
            "name": "_process_entry",
            "location": 79,
            "return": [
                "tuple[typing.Union[list[str],list[typing.Union[str,list[str],tuple[],None]],list[]]]",
                "bytes",
                "str"
            ],
            "arguments": {
                "entry": [
                    "str"
                ],
                "relative_path": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Optional[tuple]",
                    "tuple[]",
                    "list",
                    "None",
                    "list[]"
                ],
                "dirs": [
                    "list[str]",
                    "List[str]",
                    "str",
                    "Optional[tuple]",
                    "Optional[str]"
                ],
                "files": [
                    "list[str]",
                    "list[]",
                    "List[str]",
                    "list",
                    "Callable[[str], str]",
                    "Optional[str]",
                    "Iterable[str]"
                ],
                "to_walk": [
                    "list[str]",
                    "List[str]",
                    "list[]",
                    "str",
                    "Optional[tuple]",
                    "list"
                ]
            }
        },
        "_walk": {
            "name": "_walk",
            "location": 91,
            "return": [
                "list[typing.Union[int,tuple[typing.Union[str,list[]]]]]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "top": [
                    "str"
                ],
                "walked": [
                    "list[]",
                    "list",
                    "list[int]",
                    "List[int]",
                    "str"
                ]
            }
        }
    },
    "tentaclio-master/src/tentaclio/fs/copier.py": {
        "Copier.copy": {
            "name": "copy",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "tentaclio.urls.URL"
                ],
                "dest": [
                    "tentaclio.urls.URL"
                ]
            }
        },
        "CopierRegistry.get_handler": {
            "name": "get_handler",
            "location": 33,
            "return": [
                "Copier"
            ],
            "arguments": {
                "self": [],
                "scheme": [
                    "str"
                ]
            }
        }
    },
    "tentaclio-master/src/tentaclio/fs/copiers.py": {
        "DefaultCopier.copy": {
            "name": "copy",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "tentaclio.urls.URL"
                ],
                "dest": [
                    "tentaclio.urls.URL"
                ]
            }
        }
    },
    "tentaclio-master/src/tentaclio/fs/remover.py": {
        "Remover.remove": {
            "name": "remove",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientRemover.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_factory": [
                    "Callable[(..., Remover)]"
                ]
            }
        },
        "ClientRemover.remove": {
            "name": "remove",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "tentaclio.urls.URL"
                ]
            }
        }
    },
    "tentaclio-master/src/tentaclio/fs/scanner.py": {
        "build_folder_entry": {
            "name": "build_folder_entry",
            "location": 21,
            "return": [
                "DirEntry"
            ],
            "arguments": {
                "url": [
                    "tentaclio.urls.URL"
                ]
            }
        },
        "build_file_entry": {
            "name": "build_file_entry",
            "location": 26,
            "return": [
                "DirEntry"
            ],
            "arguments": {
                "url": [
                    "tentaclio.urls.URL"
                ]
            }
        },
        "DirEntry.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scanner.scandir": {
            "name": "scandir",
            "location": 34,
            "return": [
                "Iterable[DirEntry]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "tentaclio.urls.URL"
                ]
            }
        }
    },
    "tentaclio-master/src/tentaclio/fs/scanners.py": {
        "ManagedDirScanner.scandir": {
            "name": "scandir",
            "location": 18,
            "return": [
                "Iterable[tentaclio.fs.scanner.DirEntry]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientDirScanner.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_factory": [
                    "Callable[(..., ManagedDirScanner)]"
                ]
            }
        },
        "ClientDirScanner.scandir": {
            "name": "scandir",
            "location": 37,
            "return": [
                "Iterable[tentaclio.fs.scanner.DirEntry]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "tentaclio.urls.URL"
                ]
            }
        }
    },
    "tentaclio-master/src/tentaclio/fs/__init__.py": {},
    "tentaclio-master/src/tentaclio/hooks/slack_hook.py": {
        "SlackHook.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "SlackHook.notify": {
            "name": "notify",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ],
                "channel": [
                    "str"
                ],
                "username": [
                    "str"
                ],
                "icon_emoji": [
                    "str"
                ]
            }
        },
        "SlackHook._build_request_body": {
            "name": "_build_request_body",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "message": [
                    "str"
                ],
                "channel": [
                    "str"
                ],
                "username": [
                    "str"
                ],
                "icon_emoji": [
                    "str"
                ]
            }
        }
    },
    "tentaclio-master/src/tentaclio/hooks/__init__.py": {},
    "tentaclio-master/src/tentaclio/streams/api.py": {
        "open": {
            "name": "open",
            "location": 15,
            "return": [
                "Callable[[T], bool]",
                "bool",
                "bytes",
                "str"
            ],
            "arguments": {
                "url": [
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "mode": [
                    "str",
                    "None",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "_assert_mode": {
            "name": "_assert_mode",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mode": [
                    "str"
                ]
            }
        },
        "_open_writer": {
            "name": "_open_writer",
            "location": 49,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "url": [
                    "str",
                    "int",
                    "bool"
                ],
                "mode": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "_open_reader": {
            "name": "_open_reader",
            "location": 55,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "url": [
                    "str",
                    "int",
                    "bool"
                ],
                "mode": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "tentaclio-master/src/tentaclio/streams/base_stream.py": {
        "Streamer.get": {
            "name": "get",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "writer": [
                    "protocols.ByteWriter"
                ]
            }
        },
        "Streamer.put": {
            "name": "put",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reader": [
                    "protocols.ByteReader"
                ]
            }
        },
        "StreamBaseIO.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "buffer": [
                    "IO"
                ]
            }
        },
        "StreamBaseIO.closed": {
            "name": "closed",
            "location": 67,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamBaseIO.__iter__": {
            "name": "__iter__",
            "location": 71,
            "return": [
                "Iterator[Union[(bytes, str)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamBaseIO.seek": {
            "name": "seek",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamBaseIO.tell": {
            "name": "tell",
            "location": 84,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamBaseIO.truncate": {
            "name": "truncate",
            "location": 88,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "Optional[int]"
                ]
            }
        },
        "StreamBaseIO.seekable": {
            "name": "seekable",
            "location": 92,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamBaseIO.flush": {
            "name": "flush",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamerWriter.__init__": {
            "name": "__init__",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "StreamerContextManager"
                ],
                "buffer": [
                    "IO"
                ]
            }
        },
        "StreamerWriter.write": {
            "name": "write",
            "location": 113,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "contents": [
                    "str",
                    "bytes"
                ]
            }
        },
        "StreamerWriter.close": {
            "name": "close",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamerWriter._flush": {
            "name": "_flush",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamerReader.__init__": {
            "name": "__init__",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "StreamerContextManager"
                ],
                "buffer": [
                    "IO"
                ]
            }
        },
        "StreamerReader._load": {
            "name": "_load",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamerReader.read": {
            "name": "read",
            "location": 150,
            "return": [
                "Union[(bytes, str)]"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int"
                ]
            }
        },
        "StreamerReader.readline": {
            "name": "readline",
            "location": 154,
            "return": [
                "Union[(bytes, str)]"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int"
                ]
            }
        },
        "StreamerReader.close": {
            "name": "close",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringToBytesClientReader.__init__": {
            "name": "__init__",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "StreamerContextManager"
                ],
                "encoding": [
                    "str"
                ]
            }
        },
        "StringToBytesClientReader._load": {
            "name": "_load",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringToBytesClientWriter.__init__": {
            "name": "__init__",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "StreamerContextManager"
                ],
                "encoding": [
                    "str"
                ]
            }
        },
        "StringToBytesClientWriter._flush": {
            "name": "_flush",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tentaclio-master/src/tentaclio/streams/csv_db_stream.py": {
        "_get_field_names": {
            "name": "_get_field_names",
            "location": 21,
            "return": [
                "Sequence[str]"
            ],
            "arguments": {
                "reader": [
                    "IO"
                ]
            }
        },
        "CsvDumper.dump_csv": {
            "name": "dump_csv",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "csv_reader": [
                    "protocols.Reader"
                ],
                "columns": [
                    "Sequence[str]"
                ],
                "dest_table": [
                    "str"
                ]
            }
        },
        "DatabaseCsvWriter.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "csv_dumper": [
                    "CsvDumper"
                ],
                "table": [
                    "str"
                ]
            }
        },
        "DatabaseCsvWriter.write": {
            "name": "write",
            "location": 47,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "contents": [
                    "str",
                    "bytes"
                ]
            }
        },
        "DatabaseCsvWriter._flush": {
            "name": "_flush",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseCsvWriter.close": {
            "name": "close",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseCsvWriter.__enter__": {
            "name": "__enter__",
            "location": 63,
            "return": [
                "protocols.Writer"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseCsvWriter.__exit__": {
            "name": "__exit__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tentaclio-master/src/tentaclio/streams/stream_client_handler.py": {
        "_is_bytes_mode": {
            "name": "_is_bytes_mode",
            "location": 18,
            "return": [
                "bool"
            ],
            "arguments": {
                "mode": [
                    "str"
                ]
            }
        },
        "StreamURLHandler.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_factory": [
                    "Callable[(..., base_stream.StreamerContextManager)]"
                ]
            }
        },
        "StreamURLHandler.open_reader_for": {
            "name": "open_reader_for",
            "location": 33,
            "return": [
                "tentaclio.protocols.ReaderClosable"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "tentaclio.urls.URL"
                ],
                "mode": [
                    "str"
                ],
                "extras": [
                    "dict"
                ]
            }
        },
        "StreamURLHandler.open_writer_for": {
            "name": "open_writer_for",
            "location": 43,
            "return": [
                "tentaclio.protocols.WriterClosable"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "tentaclio.urls.URL"
                ],
                "mode": [
                    "str"
                ],
                "extras": [
                    "dict"
                ]
            }
        }
    },
    "tentaclio-master/src/tentaclio/streams/stream_registry.py": {
        "_ReaderContextManager.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "protocols.ReaderClosable"
                ]
            }
        },
        "_ReaderContextManager.__enter__": {
            "name": "__enter__",
            "location": 19,
            "return": [
                "protocols.Reader"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ReaderContextManager.__exit__": {
            "name": "__exit__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "typing.Type",
                    "Optional[Type[BaseException]]",
                    "None",
                    "type",
                    "BaseException",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ],
                "exc_value": [
                    "typing.Type",
                    "Optional[Type[BaseException]]",
                    "None",
                    "type",
                    "BaseException",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ],
                "traceback": [
                    "typing.Type",
                    "Optional[Type[BaseException]]",
                    "None",
                    "type",
                    "BaseException",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ]
            }
        },
        "_WriterContextManager.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "protocols.WriterClosable"
                ]
            }
        },
        "_WriterContextManager.__enter__": {
            "name": "__enter__",
            "location": 33,
            "return": [
                "protocols.Writer"
            ],
            "arguments": {
                "self": []
            }
        },
        "_WriterContextManager.__exit__": {
            "name": "__exit__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "typing.Type",
                    "Optional[Type[BaseException]]",
                    "None",
                    "type",
                    "BaseException",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ],
                "exc_value": [
                    "typing.Type",
                    "Optional[Type[BaseException]]",
                    "None",
                    "type",
                    "BaseException",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ],
                "traceback": [
                    "typing.Type",
                    "Optional[Type[BaseException]]",
                    "None",
                    "type",
                    "BaseException",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ]
            }
        },
        "StreamHandler.open_reader_for": {
            "name": "open_reader_for",
            "location": 43,
            "return": [
                "protocols.ReaderClosable"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "tentaclio.urls.URL"
                ],
                "mode": [
                    "str"
                ],
                "extras": [
                    "dict"
                ]
            }
        },
        "StreamHandler.open_writer_for": {
            "name": "open_writer_for",
            "location": 47,
            "return": [
                "protocols.WriterClosable"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "tentaclio.urls.URL"
                ],
                "mode": [
                    "str"
                ],
                "extras": [
                    "dict"
                ]
            }
        },
        "StreamHandlerRegistry.open_stream_reader": {
            "name": "open_stream_reader",
            "location": 55,
            "return": [
                "ContextManager[protocols.Reader]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "tentaclio.urls.URL"
                ],
                "mode": [
                    "str"
                ],
                "extras": [
                    "Optional[dict]"
                ]
            }
        },
        "StreamHandlerRegistry.open_stream_writer": {
            "name": "open_stream_writer",
            "location": 63,
            "return": [
                "ContextManager[protocols.Writer]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "tentaclio.urls.URL"
                ],
                "mode": [
                    "str"
                ],
                "extras": [
                    "Optional[dict]"
                ]
            }
        }
    },
    "tentaclio-master/src/tentaclio/streams/__init__.py": {},
    "tentaclio-master/tests/conftest.py": {
        "sqlite_url": {
            "name": "sqlite_url",
            "location": 23,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {}
        },
        "postgres_url": {
            "name": "postgres_url",
            "location": 30,
            "return": [
                "int",
                "bool",
                "Callable"
            ],
            "arguments": {}
        },
        "s3_client": {
            "name": "s3_client",
            "location": 39,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "s3_url": [
                    "str"
                ]
            }
        },
        "db_client": {
            "name": "db_client",
            "location": 47,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "postgres_url": [
                    "str"
                ]
            }
        },
        "application_name": {
            "name": "application_name",
            "location": 54,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {}
        },
        "db_client_application_name": {
            "name": "db_client_application_name",
            "location": 59,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "postgres_url": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "application_name": [
                    "str"
                ],
                "monkeypatch": [
                    "str"
                ]
            }
        },
        "fake_handler": {
            "name": "fake_handler",
            "location": 78,
            "return": [
                "FakeHandler",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "csv_dumper": {
            "name": "csv_dumper",
            "location": 101,
            "return": [
                "CsvDumperRecorder",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "FakeHandler.open_reader_for": {
            "name": "open_reader_for",
            "location": 70,
            "return": [
                "tentaclio.protocols.Reader"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "tentaclio.urls.URL"
                ],
                "extras": [
                    "dict"
                ]
            }
        },
        "FakeHandler.open_writer_for": {
            "name": "open_writer_for",
            "location": 73,
            "return": [
                "tentaclio.protocols.Writer"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "tentaclio.urls.URL"
                ],
                "extras": [
                    "dict"
                ]
            }
        },
        "CsvDumperRecorder.__enter__": {
            "name": "__enter__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CsvDumperRecorder.__exit__": {
            "name": "__exit__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_value": [
                    "Optional[BaseException]"
                ],
                "traceback": [
                    "typing.Type",
                    "Optional[Type[BaseException]]",
                    "None",
                    "type",
                    "BaseException",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ]
            }
        },
        "CsvDumperRecorder.dump_csv": {
            "name": "dump_csv",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "csv_reader": [
                    "tentaclio.protocols.Reader"
                ],
                "columns": [
                    "Sequence[str]"
                ],
                "dest_table": [
                    "str"
                ]
            }
        }
    },
    "tentaclio-master/tests/__init__.py": {},
    "tentaclio-master/tests/functional/__init__.py": {},
    "tentaclio-master/tests/functional/ftp/test_api.py": {
        "test_authenticated_api_calls": {
            "name": "test_authenticated_api_calls",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "cdTree": {
            "name": "cdTree",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "ftp": [
                    "str",
                    "bool",
                    "int"
                ],
                "currentDir": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "test_list_folders": {
            "name": "test_list_folders",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_delete": {
            "name": "test_delete",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tentaclio-master/tests/functional/ftp/__init__.py": {},
    "tentaclio-master/tests/functional/sftp/test_api.py": {
        "test_authenticated_api_calls": {
            "name": "test_authenticated_api_calls",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_list_folders": {
            "name": "test_list_folders",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_delete": {
            "name": "test_delete",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tentaclio-master/tests/functional/sftp/__init__.py": {},
    "tentaclio-master/tests/unit/test_cli.py": {
        "cli_runner": {
            "name": "cli_runner",
            "location": 9,
            "return": [
                "bool",
                "List[str]",
                "Union[int, float, complex]",
                "Tuple[int, int]",
                "str"
            ],
            "arguments": {}
        },
        "mock_compose_url": {
            "name": "mock_compose_url",
            "location": 14,
            "return": [
                "Callable",
                "Optional[str]",
                "Optional[Mapping[str, Any]]"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "int",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ]
            }
        },
        "TestComposeURL.test_url_composer": {
            "name": "test_url_composer",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cli_runner": [
                    "str",
                    "click.testing.CliRunner"
                ],
                "mock_compose_url": [
                    "str",
                    "Iterator[str]"
                ]
            }
        },
        "TestComposeURL.test_key_value_pairs": {
            "name": "test_key_value_pairs",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cli_runner": [
                    "str",
                    "click.testing.CliRunner",
                    "list[str]",
                    "List[str]"
                ],
                "mock_compose_url": [
                    "str"
                ]
            }
        },
        "TestComposeURL.test_with_invalid_port": {
            "name": "test_with_invalid_port",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cli_runner": [
                    "str",
                    "click.testing.CliRunner",
                    "list[str]",
                    "tuple[str]",
                    "List[str]",
                    "Tuple[str]"
                ],
                "mock_compose_url": [
                    "str"
                ]
            }
        },
        "TestComposeURL.test_with_no_host_or_path": {
            "name": "test_with_no_host_or_path",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cli_runner": [
                    "str"
                ],
                "mock_compose_url": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestComposeURL.test_command": {
            "name": "test_command",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cli_runner": [
                    "str",
                    "click.testing.CliRunner",
                    "list[str]",
                    "List[str]"
                ]
            }
        }
    },
    "tentaclio-master/tests/unit/test_registries.py": {
        "TestRegistry.test_register_handler": {
            "name": "test_register_handler",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fake_handler": []
            }
        },
        "TestRegistry.test_unknown_handler": {
            "name": "test_unknown_handler",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRegistry.test_contains_handler": {
            "name": "test_contains_handler",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fake_handler": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "tentaclio-master/tests/unit/test_urls.py": {
        "TestURL.test_missing_url": {
            "name": "test_missing_url",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestURL.test_url_escaped_fields": {
            "name": "test_url_escaped_fields",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "username": [
                    "str"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "TestURL.test_parsing_file_url": {
            "name": "test_parsing_file_url",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "bool",
                    "Tuple[str, str]",
                    "tuple[typing.Union[str,str]]"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "TestURL.test_url_from_components": {
            "name": "test_url_from_components",
            "location": 86,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "scheme": [
                    "str",
                    "Dict[str, List[bytes]]",
                    "dict[str, list[bytes]]"
                ],
                "username": [
                    "str",
                    "Dict[str, List[bytes]]",
                    "dict[str, list[bytes]]"
                ],
                "password": [
                    "str",
                    "Dict[str, List[bytes]]",
                    "dict[str, list[bytes]]"
                ],
                "hostname": [
                    "str",
                    "Dict[str, List[bytes]]",
                    "dict[str, list[bytes]]"
                ],
                "port": [
                    "str",
                    "Dict[str, List[bytes]]",
                    "dict[str, list[bytes]]"
                ],
                "path": [
                    "str",
                    "Dict[str, List[bytes]]",
                    "dict[str, list[bytes]]"
                ],
                "query": [
                    "str",
                    "Dict[str, List[bytes]]",
                    "dict[str, list[bytes]]"
                ]
            }
        },
        "TestURL.test_url_equality": {
            "name": "test_url_equality",
            "location": 118,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "url_1": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "Literal"
                ],
                "url_2": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "Literal"
                ],
                "should_be_equal": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "Literal"
                ]
            }
        },
        "TestURL.test_copy": {
            "name": "test_copy",
            "location": 156,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "original": [
                    "str",
                    "bool"
                ],
                "components": [
                    "str",
                    "bool"
                ],
                "expected": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestURL.test_string_hides_password": {
            "name": "test_string_hides_password",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tentaclio-master/tests/unit/__init__.py": {},
    "tentaclio-master/tests/unit/clients/test_base_client.py": {
        "FakeClient._connect": {
            "name": "_connect",
            "location": 12,
            "return": [
                "io.StringIO"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeClient.__enter__": {
            "name": "__enter__",
            "location": 16,
            "return": [
                "FakeClient"
            ],
            "arguments": {
                "self": [
                    "_TFakeClient"
                ]
            }
        },
        "TestBaseClient.test_create_with_string": {
            "name": "test_create_with_string",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseClient.test_creation_with_url": {
            "name": "test_creation_with_url",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseClient.test_closed_client_connection": {
            "name": "test_closed_client_connection",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "int"
                ]
            }
        },
        "TestBaseClient.test_closed_if_connection_not_opened": {
            "name": "test_closed_if_connection_not_opened",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str"
                ]
            }
        },
        "TestBaseClient.test_client_connected_is_not_closed": {
            "name": "test_client_connected_is_not_closed",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "tentaclio-master/tests/unit/clients/test_decorators.py": {
        "TestCheckConn.test_missing_connection_attribute": {
            "name": "test_missing_connection_attribute",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCheckConn.test_inactive_client_connection": {
            "name": "test_inactive_client_connection",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCheckConn.test_missing_connection_attribute.TestClient.func": {
            "name": "func",
            "location": 10,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCheckConn.test_missing_connection_attribute.TestClient.__enter__": {
            "name": "__enter__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCheckConn.test_inactive_client_connection.TestClient.connect": {
            "name": "connect",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCheckConn.test_inactive_client_connection.TestClient.func": {
            "name": "func",
            "location": 32,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCheckConn.test_inactive_client_connection.TestClient._connect": {
            "name": "_connect",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCheckConn.test_inactive_client_connection.TestClient.__enter__": {
            "name": "__enter__",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tentaclio-master/tests/unit/clients/test_ftp_client.py": {
        "mocked_ftp_conn": {
            "name": "mocked_ftp_conn",
            "location": 13,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "mocker": [
                    "bool"
                ]
            }
        },
        "mocked_sftp_conn": {
            "name": "mocked_sftp_conn",
            "location": 19,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "mocker": [
                    "bool"
                ]
            }
        },
        "TestFTPClient.test_invalid_scheme": {
            "name": "test_invalid_scheme",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "TestFTPClient.test_parsing_ftp_url": {
            "name": "test_parsing_ftp_url",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "username": [
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "password": [
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "hostname": [
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "port": [
                    "str",
                    "bool",
                    "Tuple[str, str]",
                    "tuple[typing.Union[str,str]]"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "TestFTPClient.test_get_invalid_path": {
            "name": "test_get_invalid_path",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "ftplib.FTP"
                ],
                "path": [
                    "str"
                ],
                "mocked_ftp_conn": []
            }
        },
        "TestFTPClient.test_get": {
            "name": "test_get",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocked_ftp_conn": []
            }
        },
        "TestFTPClient.test_put": {
            "name": "test_put",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocked_ftp_conn": []
            }
        },
        "TestFTPClient.test_scandir_file": {
            "name": "test_scandir_file",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocked_ftp_conn": []
            }
        },
        "TestFTPClient.test_scandir_folder": {
            "name": "test_scandir_folder",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocked_ftp_conn": []
            }
        },
        "TestFTPClient.test_scandir_mlst_not_supported": {
            "name": "test_scandir_mlst_not_supported",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocked_ftp_conn": []
            }
        },
        "TestFTPClient.test_scandir_mlst_propagate_error": {
            "name": "test_scandir_mlst_propagate_error",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocked_ftp_conn": [
                    "Generator[None, Any, None]",
                    "typing.Generator[typing.Union[None,typing.Any,None]]"
                ]
            }
        },
        "TestFTPClient.test_scandir_dir_file": {
            "name": "test_scandir_dir_file",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocked_ftp_conn": []
            }
        },
        "TestFTPClient.test_scandir_dir_folder": {
            "name": "test_scandir_dir_folder",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocked_ftp_conn": [
                    "Generator[None, Any, None]",
                    "typing.Generator[typing.Union[None,typing.Any,None]]"
                ]
            }
        },
        "TestSFTPClient.test_invalid_scheme": {
            "name": "test_invalid_scheme",
            "location": 145,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "TestSFTPClient.test_get_invalid_path": {
            "name": "test_get_invalid_path",
            "location": 150,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "ftplib.FTP"
                ],
                "path": [
                    "str"
                ],
                "mocked_sftp_conn": []
            }
        },
        "TestSFTPClient.test_get": {
            "name": "test_get",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocked_sftp_conn": []
            }
        },
        "TestSFTPClient.test_put": {
            "name": "test_put",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocked_sftp_conn": []
            }
        },
        "TestSFTPClient.test_set_default_port": {
            "name": "test_set_default_port",
            "location": 191,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [],
                "port": [
                    "int",
                    "str",
                    "Sequence[int]",
                    "typing.Sequence[int]"
                ],
                "mocked_sftp_conn": [
                    "str",
                    "Dict[str, Sequence[str]]",
                    "dict[str, typing.Sequence[str]]"
                ]
            }
        },
        "TestSFTPClient.test_scandir_file": {
            "name": "test_scandir_file",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocked_sftp_conn": []
            }
        },
        "TestSFTPClient.test_scandir_folder": {
            "name": "test_scandir_folder",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocked_sftp_conn": []
            }
        }
    },
    "tentaclio-master/tests/unit/clients/test_http_client.py": {
        "mocked_http_conn": {
            "name": "mocked_http_conn",
            "location": 9,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "mocker": [
                    "Optional[str]"
                ]
            }
        },
        "TestHTTPClient.test_invalid_scheme": {
            "name": "test_invalid_scheme",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "TestHTTPClient.test_parsing_http_url": {
            "name": "test_parsing_http_url",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [],
                "username": [
                    "bool",
                    "dict",
                    "str",
                    "dict[, ]",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "password": [
                    "bool",
                    "dict",
                    "str",
                    "dict[, ]",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "hostname": [
                    "bool",
                    "dict",
                    "str",
                    "dict[, ]",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "port": [
                    "int",
                    "str"
                ],
                "path": [
                    "str",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "TestHTTPClient.test_get_invalid_endpoint": {
            "name": "test_get_invalid_endpoint",
            "location": 52,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [],
                "path": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "mocker": [],
                "mocked_http_conn": [
                    "kata.data.io.network.GithubApi"
                ]
            }
        },
        "TestHTTPClient.test_fetching_url_endpoint": {
            "name": "test_fetching_url_endpoint",
            "location": 74,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "base_url": [
                    "bool",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "endpoint": [
                    "str",
                    "bool"
                ],
                "auth": [
                    "int",
                    "str"
                ],
                "full_url": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestHTTPClient.test_put_bytes": {
            "name": "test_put_bytes",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "mocked_http_conn": [
                    "Generator[None, Any, None]",
                    "typing.Generator[typing.Union[None,typing.Any,None]]",
                    "List[T]",
                    "list[T]"
                ]
            }
        },
        "TestHTTPClient.test_put_bytes.mocked_request": {
            "name": "mocked_request",
            "location": 84,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "_": [
                    "str",
                    "int",
                    "Type[T]"
                ],
                "__": [
                    "str",
                    "int",
                    "Type[T]"
                ],
                "default_data": [
                    "str",
                    "dict",
                    "bytes"
                ],
                "default_params": [
                    "str",
                    "int",
                    "Type[T]"
                ]
            }
        }
    },
    "tentaclio-master/tests/unit/clients/test_importer.py": {
        "package_lister_fake": {
            "name": "package_lister_fake",
            "location": 6,
            "return": [
                "Callable[([], Any)]"
            ],
            "arguments": {
                "packages": [
                    "List[str]",
                    "bool",
                    "list[str]",
                    "str"
                ]
            }
        },
        "test_importer": {
            "name": "test_importer",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Dict[str, Any]"
                ],
                "packages": [
                    "str"
                ],
                "expected_calls": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "tentaclio-master/tests/unit/clients/test_local_fs_client.py": {
        "TestLocalFileScanner.test_scan_dir": {
            "name": "test_scan_dir",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        }
    },
    "tentaclio-master/tests/unit/clients/test_sqla_client.py": {
        "test_parsing_postgres_url": {
            "name": "test_parsing_postgres_url",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "url": [
                    "str"
                ],
                "drivername": [
                    "str",
                    "Optional[bool]",
                    "bool",
                    "bytes",
                    "Union[str, float]",
                    "None",
                    "Dict[str, str]",
                    "float",
                    "dict[str, str]",
                    "int"
                ],
                "username": [
                    "str",
                    "Optional[bool]",
                    "bool",
                    "bytes",
                    "Union[str, float]",
                    "None",
                    "Dict[str, str]",
                    "float",
                    "dict[str, str]",
                    "int"
                ],
                "password": [
                    "str",
                    "Optional[bool]",
                    "bool",
                    "bytes",
                    "Union[str, float]",
                    "None",
                    "Dict[str, str]",
                    "float",
                    "dict[str, str]",
                    "int"
                ],
                "hostname": [
                    "str",
                    "int",
                    "list[]",
                    "list",
                    "bool"
                ],
                "port": [
                    "int",
                    "str",
                    "bool"
                ],
                "database": [
                    "str",
                    "Optional[bool]",
                    "bool",
                    "bytes",
                    "Union[str, float]",
                    "None",
                    "Dict[str, str]",
                    "float",
                    "dict[str, str]",
                    "int"
                ],
                "query": [
                    "str",
                    "bool",
                    "list",
                    "list[]",
                    "dict",
                    "dict[, ]",
                    "Sequence[str]",
                    "typing.Sequence[str]"
                ]
            }
        },
        "test_execute_query": {
            "name": "test_execute_query",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "sqlite_url": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "tentaclio-master/tests/unit/clients/__init__.py": {},
    "tentaclio-master/tests/unit/credentials/test_api.py": {
        "test_authenticate": {
            "name": "test_authenticate",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "tentaclio-master/tests/unit/credentials/test_env.py": {
        "test_add_credentials": {
            "name": "test_add_credentials",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_credentials_bad_url": {
            "name": "test_add_credentials_bad_url",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tentaclio-master/tests/unit/credentials/test_injection.py": {
        "test_simple_authenticate": {
            "name": "test_simple_authenticate",
            "location": 77,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "with_creds": [
                    "str",
                    "bool",
                    "Optional[Mapping[str, Any]]",
                    "typing.Mapping",
                    "None",
                    "Tuple[str, str]",
                    "tuple[typing.Union[str,str]]"
                ],
                "raw": [
                    "str",
                    "bool",
                    "Optional[Mapping[str, Any]]",
                    "typing.Mapping",
                    "None",
                    "Tuple[str, str]",
                    "tuple[typing.Union[str,str]]"
                ],
                "expected": [
                    "AbstractSet[str]",
                    "int",
                    "typing.AbstractSet",
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "test_similarites": {
            "name": "test_similarites",
            "location": 96,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "path_1": [
                    "bytes",
                    "str",
                    "bool"
                ],
                "path_2": [
                    "bytes",
                    "str",
                    "bool"
                ],
                "expected": [
                    "str",
                    "bool",
                    "List[List[int]]",
                    "list[list[int]]"
                ]
            }
        },
        "test_hostname_is_wildcard": {
            "name": "test_hostname_is_wildcard",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_filter_by_hostname": {
            "name": "test_filter_by_hostname",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tentaclio-master/tests/unit/credentials/test_reader.py": {
        "no_creds_yaml": {
            "name": "no_creds_yaml",
            "location": 10,
            "return": [
                "typing.Text",
                "Tuple[bytes]",
                "float",
                "bytes",
                "bool",
                "str",
                "List[str]"
            ],
            "arguments": {}
        },
        "creds_yaml": {
            "name": "creds_yaml",
            "location": 17,
            "return": [
                "typing.Text",
                "str",
                "Dict[str, str]",
                "bytearray"
            ],
            "arguments": {}
        },
        "creds_yaml_bad_url": {
            "name": "creds_yaml_bad_url",
            "location": 26,
            "return": [
                "typing.Text",
                "str",
                "Dict[str, str]",
                "bytes"
            ],
            "arguments": {}
        },
        "test_bad_yaml": {
            "name": "test_bad_yaml",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_no_credentials_in_file": {
            "name": "test_no_credentials_in_file",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "no_creds_yaml": [
                    "bytes",
                    "io.BytesIO"
                ]
            }
        },
        "test_credentials": {
            "name": "test_credentials",
            "location": 53,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "url": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Optional[str]",
                    "None"
                ],
                "expected": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "creds_yaml": [
                    "str",
                    "bytes",
                    "BinaryIO",
                    "typing.BinaryIO"
                ]
            }
        },
        "test_credentials_bad_url": {
            "name": "test_credentials_bad_url",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "creds_yaml_bad_url": [
                    "str",
                    "bytes",
                    "io.BytesIO"
                ]
            }
        }
    },
    "tentaclio-master/tests/unit/credentials/__init__.py": {},
    "tentaclio-master/tests/unit/databases/test_api.py": {
        "fake_db": {
            "name": "fake_db",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "test_database": {
            "name": "test_database",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_authenticate_db": {
            "name": "test_authenticate_db",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "fake_db": []
            }
        },
        "FakeDb.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "bool",
                    "bytes",
                    "int"
                ]
            }
        },
        "FakeDb._connect": {
            "name": "_connect",
            "location": 16,
            "return": [
                "FakeDb",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tentaclio-master/tests/unit/databases/test_registry.py": {
        "test_default_database": {
            "name": "test_default_database",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str"
                ]
            }
        }
    },
    "tentaclio-master/tests/unit/fs/test_api.py": {
        "fake_registry": {
            "name": "fake_registry",
            "location": 50,
            "return": [
                "FakeScanner",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "fake_registry_with_depth": {
            "name": "fake_registry_with_depth",
            "location": 61,
            "return": [
                "FakeScannerWithDepth",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_authenticate_scandir": {
            "name": "test_authenticate_scandir",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_registry": [
                    "str",
                    "float"
                ]
            }
        },
        "test_scandir": {
            "name": "test_scandir",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_registry": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_authenticate_listdir": {
            "name": "test_authenticate_listdir",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_registry": [
                    "str",
                    "float"
                ]
            }
        },
        "test_lsdir": {
            "name": "test_lsdir",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_authenticate_walk": {
            "name": "test_authenticate_walk",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_registry_with_depth": [
                    "str",
                    "float"
                ]
            }
        },
        "test_walk": {
            "name": "test_walk",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_registry_with_depth": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_relativize_repetitive_current": {
            "name": "test_relativize_repetitive_current",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "FakeScanner.scandir": {
            "name": "scandir",
            "location": 13,
            "return": [
                "Iterable[tentaclio.fs.scanner.DirEntry]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "tentaclio.urls.URL"
                ]
            }
        },
        "FakeScannerWithDepth.scandir": {
            "name": "scandir",
            "location": 44,
            "return": [
                "Iterable[tentaclio.fs.scanner.DirEntry]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "tentaclio.urls.URL"
                ]
            }
        }
    },
    "tentaclio-master/tests/unit/fs/test_copier.py": {
        "test_copy": {
            "name": "test_copy",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "tentaclio-master/tests/unit/fs/test_copiers.py": {
        "test_copy": {
            "name": "test_copy",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "tentaclio-master/tests/unit/fs/test_remover.py": {
        "test_client_remover": {
            "name": "test_client_remover",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "FakeRemover.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "bool",
                    "Dict[str, Iterable[Any]]",
                    "dict[str, typing.Iterable[typing.Any]]",
                    "Optional[List[str]]",
                    "list[str]",
                    "None"
                ]
            }
        },
        "FakeRemover.remove": {
            "name": "remove",
            "location": 9,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeRemover.__enter__": {
            "name": "__enter__",
            "location": 13,
            "return": [
                "FakeRemover"
            ],
            "arguments": {
                "self": [
                    "_TFakeRemover"
                ]
            }
        },
        "FakeRemover.__exit__": {
            "name": "__exit__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_client_remover._fn": {
            "name": "_fn",
            "location": 24,
            "return": [
                "FakeRemover",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "url": [
                    "str",
                    "float",
                    "List[Tuple[int, int]]"
                ]
            }
        }
    },
    "tentaclio-master/tests/unit/fs/test_scanner.py": {
        "test_build_folder_entry": {
            "name": "test_build_folder_entry",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_build_file_entry": {
            "name": "test_build_file_entry",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tentaclio-master/tests/unit/fs/test_scanners.py": {
        "test_client_scanner": {
            "name": "test_client_scanner",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "FakeClient.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "tentaclio.urls.URL"
                ]
            }
        },
        "FakeClient.__enter__": {
            "name": "__enter__",
            "location": 13,
            "return": [
                "FakeClient"
            ],
            "arguments": {
                "self": [
                    "_TFakeClient"
                ]
            }
        },
        "FakeClient.__exit__": {
            "name": "__exit__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeClient.scandir": {
            "name": "scandir",
            "location": 20,
            "return": [
                "Iterable[tentaclio.fs.scanner.DirEntry]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tentaclio-master/tests/unit/fs/__init__.py": {},
    "tentaclio-master/tests/unit/streams/test_api.py": {
        "test_mode_error": {
            "name": "test_mode_error",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_allowed_modes": {
            "name": "test_allowed_modes",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mode": [
                    "Callable",
                    "str",
                    "typing.Callable[, ]",
                    "bytes",
                    "bool"
                ]
            }
        },
        "test_writer_modes": {
            "name": "test_writer_modes",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mode": [
                    "bool",
                    "str"
                ],
                "mocker": [
                    "bool",
                    "bytes",
                    "str"
                ]
            }
        },
        "test_reader_modes": {
            "name": "test_reader_modes",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mode": [
                    "bool",
                    "str"
                ],
                "mocker": [
                    "bool",
                    "bytes",
                    "str"
                ]
            }
        }
    },
    "tentaclio-master/tests/unit/streams/test_base_stream.py": {
        "TestStreamerWriter.test_write": {
            "name": "test_write",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestStreamerWriter.test_flush_and_close": {
            "name": "test_flush_and_close",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestStreamerReader.test_read": {
            "name": "test_read",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestStreamerReader.test_readline": {
            "name": "test_readline",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestStreamerReader.test_close": {
            "name": "test_close",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestStreamerReader.test_seekable": {
            "name": "test_seekable",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        }
    },
    "tentaclio-master/tests/unit/streams/test_csv_db_stream.py": {
        "csv_data": {
            "name": "csv_data",
            "location": 10,
            "return": [
                "Dict[str, List[int]]",
                "dict",
                "str",
                "Optional[float]",
                "bytes"
            ],
            "arguments": {}
        },
        "test_dump_csv": {
            "name": "test_dump_csv",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "csv_data": [
                    "str",
                    "bytes",
                    "Union[bytes, str]",
                    "dict",
                    "List[str]"
                ],
                "csv_dumper": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        }
    },
    "tentaclio-master/tests/unit/streams/test_file_handler.py": {
        "temp_filename": {
            "name": "temp_filename",
            "location": 11,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "test_file_empty_scheme": {
            "name": "test_file_empty_scheme",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_file_scheme": {
            "name": "test_file_scheme",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_file_read_write": {
            "name": "test_file_read_write",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mode": [
                    "str"
                ],
                "expected": [
                    "str"
                ],
                "temp_filename": [
                    "str"
                ]
            }
        },
        "test_expand_user": {
            "name": "test_expand_user",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "tentaclio-master/tests/unit/streams/test_http_handler.py": {
        "test_handler_is_registered": {
            "name": "test_handler_is_registered",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "url": [
                    "str"
                ],
                "scheme": [
                    "str"
                ]
            }
        },
        "test_open_http_url_reading": {
            "name": "test_open_http_url_reading",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mode": [],
                "content": [],
                "expected_content": [
                    "str"
                ],
                "mocker": []
            }
        },
        "test_open_http_url_writer": {
            "name": "test_open_http_url_writer",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mode": [],
                "content": [
                    "str"
                ]
            }
        }
    },
    "tentaclio-master/tests/unit/streams/test_stream_handler.py": {
        "test_open_reader_for_string": {
            "name": "test_open_reader_for_string",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_open_reader_for_bytes": {
            "name": "test_open_reader_for_bytes",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_open_writer_for_string": {
            "name": "test_open_writer_for_string",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_open_writer_for_bytes": {
            "name": "test_open_writer_for_bytes",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_open_reader_with_encoding": {
            "name": "test_open_reader_with_encoding",
            "location": 67,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str"
                ],
                "extras": [
                    "str",
                    "int",
                    "bool"
                ],
                "expected": [
                    "str"
                ]
            }
        },
        "test_open_writer_with_encoding": {
            "name": "test_open_writer_with_encoding",
            "location": 78,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str"
                ],
                "extras": [
                    "str",
                    "int",
                    "bool"
                ],
                "expected": [
                    "str"
                ]
            }
        },
        "FakeClient.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "tentaclio.urls.URL"
                ],
                "message": [
                    "bytearray"
                ]
            }
        },
        "FakeClient._connect": {
            "name": "_connect",
            "location": 17,
            "return": [
                "io.BytesIO"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeClient.get": {
            "name": "get",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "writer": [
                    "tentaclio.protocols.Writer"
                ]
            }
        },
        "FakeClient.put": {
            "name": "put",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reader": [
                    "tentaclio.protocols.Reader"
                ]
            }
        }
    },
    "tentaclio-master/tests/unit/streams/__init__.py": {}
}
{
    "termination-master/setup.py": {},
    "termination-master/src/termination/orderings.py": {
        "ordering": {
            "name": "ordering",
            "location": 103,
            "return": [
                "Callable"
            ],
            "arguments": {
                "constructor": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "Comparable.__lt__": {
            "name": "__lt__",
            "location": 40,
            "return": [
                "Any",
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "SupportsFloat",
                    "int",
                    "Union[int,float]",
                    "float",
                    "AbstractSet[T]",
                    "AbstractSet"
                ]
            }
        },
        "Comparable.__le__": {
            "name": "__le__",
            "location": 43,
            "return": [
                "Any",
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "SupportsFloat",
                    "int",
                    "Union[int,float]",
                    "float",
                    "AbstractSet[T]",
                    "AbstractSet"
                ]
            }
        },
        "Comparable.__gt__": {
            "name": "__gt__",
            "location": 46,
            "return": [
                "Any",
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "SupportsFloat",
                    "int",
                    "Union[int,float]",
                    "float",
                    "AbstractSet[T]",
                    "AbstractSet"
                ]
            }
        },
        "Comparable.__ge__": {
            "name": "__ge__",
            "location": 49,
            "return": [
                "Any",
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "SupportsFloat",
                    "int",
                    "Union[int,float]",
                    "float",
                    "AbstractSet[T]",
                    "AbstractSet"
                ]
            }
        },
        "AbstractOrderedValue.value": {
            "name": "value",
            "location": 64,
            "return": [
                "T",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractOrderedValue._construct_comparable": {
            "name": "_construct_comparable",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "complex",
                    "Tuple[str,int]",
                    "List",
                    "Tuple[Union[str,int]]"
                ]
            }
        },
        "AbstractOrderedValue.__lt__": {
            "name": "__lt__",
            "location": 71,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "right": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "AbstractOrderedValue.__le__": {
            "name": "__le__",
            "location": 74,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "right": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "AbstractOrderedValue.__gt__": {
            "name": "__gt__",
            "location": 77,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "right": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "AbstractOrderedValue.__ge__": {
            "name": "__ge__",
            "location": 80,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "right": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "AbstractOrderedValue.__eq__": {
            "name": "__eq__",
            "location": 83,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "right": [
                    "Iterable[T]",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "AbstractOrderedValue.__ne__": {
            "name": "__ne__",
            "location": 86,
            "return": [
                "bool",
                "str",
                "int",
                "Dict[str,Any]"
            ],
            "arguments": {
                "self": [],
                "right": [
                    "Iterable[T]",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "AbstractOrderedValue._evaluate_left": {
            "name": "_evaluate_left",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractOrderedValue._evaluate_right": {
            "name": "_evaluate_right",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "right": [
                    "int",
                    "float",
                    "Generator",
                    "Dict"
                ]
            }
        },
        "AbstractOrderedValue._unwrap_right": {
            "name": "_unwrap_right",
            "location": 97,
            "return": [
                "str",
                "int",
                "Callable[[Mapping],T]",
                "Generator",
                "List[int]",
                "Dict",
                "AbstractOrderedValue"
            ],
            "arguments": {
                "self": [],
                "right": [
                    "int",
                    "str",
                    "Generator",
                    "Dict",
                    "bool"
                ]
            }
        },
        "ordering.wrapped_constructor": {
            "name": "wrapped_constructor",
            "location": 120,
            "return": [
                "OrderedValue",
                "int",
                "str",
                "bool",
                "Union[int,Tuple[int,...]]",
                "float"
            ],
            "arguments": {
                "value": [
                    "T",
                    "int",
                    "Callable[[str, object], None]",
                    "Sequence[float]",
                    "float"
                ]
            }
        },
        "ordering.OrderedValue._construct_comparable": {
            "name": "_construct_comparable",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "str",
                    "Union[str, int, float]",
                    "float"
                ]
            }
        }
    },
    "termination-master/src/termination/pools.py": {
        "fresh_variable": {
            "name": "fresh_variable",
            "location": 93,
            "return": [
                "terms.Variable",
                "None"
            ],
            "arguments": {
                "source": [
                    "List[str]",
                    "Iterable[Dict[str,str]]"
                ]
            }
        },
        "_fresh_variable_vabiable": {
            "name": "_fresh_variable_vabiable",
            "location": 107,
            "return": [
                "str",
                "terms.Variable"
            ],
            "arguments": {
                "variable": [
                    "str"
                ]
            }
        },
        "_fresh_variable_indexed_variable": {
            "name": "_fresh_variable_indexed_variable",
            "location": 112,
            "return": [
                "Optional[Type]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "variable": [
                    "str"
                ]
            }
        },
        "_fresh_variable_pool": {
            "name": "_fresh_variable_pool",
            "location": 117,
            "return": [
                "Callable",
                "List[int]"
            ],
            "arguments": {
                "pool": [
                    "Optional[str]",
                    "str",
                    "int"
                ]
            }
        },
        "VariableState.update_index": {
            "name": "update_index",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "float",
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "VariablePool.__getitem__": {
            "name": "__getitem__",
            "location": 43,
            "return": [
                "Iterable[str]",
                "Any",
                "bool",
                "type"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "VariablePool.get": {
            "name": "get",
            "location": 51,
            "return": [
                "IndexedPoolVariable",
                "str",
                "int",
                "Type"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str,Any]"
                ],
                "index": [
                    "Optional[str]",
                    "str",
                    "None",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "VariablePool.get_fresh": {
            "name": "get_fresh",
            "location": 65,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "VariablePool._get_state": {
            "name": "_get_state",
            "location": 75,
            "return": [
                "str",
                "Optional[\"LocalizedString\"]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        }
    },
    "termination-master/src/termination/signatures.py": {
        "_fresh_variable_signature": {
            "name": "_fresh_variable_signature",
            "location": 100,
            "return": [
                "str"
            ],
            "arguments": {
                "signature": [
                    "str",
                    "Type",
                    "Type[Any]"
                ]
            }
        },
        "arity": {
            "name": "arity",
            "location": 104,
            "return": [
                "FunctionDescriptor"
            ],
            "arguments": {
                "arity": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "constant": {
            "name": "constant",
            "location": 122,
            "return": [
                "ConstantDescriptor"
            ],
            "arguments": {}
        },
        "variable": {
            "name": "variable",
            "location": 138,
            "return": [
                "VariableDescriptor"
            ],
            "arguments": {}
        },
        "SignatureDescriptor.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignatureDescriptor._create_value": {
            "name": "_create_value",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Type",
                    "bool",
                    "List[object]"
                ]
            }
        },
        "SignatureDescriptor.name": {
            "name": "name",
            "location": 31,
            "return": [
                "None",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignatureDescriptor.__set_name__": {
            "name": "__set_name__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "Type",
                    "str",
                    "Type[Signature]"
                ],
                "name": [
                    "str",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "SignatureDescriptor.__get__": {
            "name": "__get__",
            "location": 48,
            "return": [
                "None",
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "Union[str,None]",
                    "None",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "owner": [
                    "Type",
                    "Type[Signature]",
                    "Type[Any]"
                ]
            }
        },
        "SignatureDescriptor.__set__": {
            "name": "__set__",
            "location": 61,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Type",
                    "bool",
                    "Type[Signature]",
                    "List[str]",
                    "bytes",
                    "frozenset",
                    "int",
                    "FrozenSet[int]"
                ],
                "owner": [
                    "Type",
                    "bool",
                    "Type[Signature]",
                    "List[str]",
                    "bytes",
                    "frozenset",
                    "int",
                    "FrozenSet[int]"
                ]
            }
        },
        "ConstantDescriptor._create_value": {
            "name": "_create_value",
            "location": 66,
            "return": [
                "termination.terms.Constant"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Type",
                    "bool",
                    "List[object]"
                ]
            }
        },
        "FunctionDescriptor.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arity": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "FunctionDescriptor._create_value": {
            "name": "_create_value",
            "location": 75,
            "return": [
                "termination.terms.Function"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Type",
                    "bool",
                    "List[object]"
                ]
            }
        },
        "VariableDescriptor._create_value": {
            "name": "_create_value",
            "location": 80,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "VariablePoolDescriptor._create_value": {
            "name": "_create_value",
            "location": 86,
            "return": [
                "termination.pools.VariablePool"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Type",
                    "bool",
                    "List[object]"
                ]
            }
        }
    },
    "termination-master/src/termination/terms.py": {
        "variables": {
            "name": "variables",
            "location": 212,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]",
                "bytes"
            ],
            "arguments": {
                "value": [
                    "dict",
                    "str",
                    "int",
                    "Sequence[str]",
                    "Type[T]"
                ]
            }
        },
        "SupportsSubstitute._substitute": {
            "name": "_substitute",
            "location": 33,
            "return": [
                "TSub",
                "None"
            ],
            "arguments": {
                "self": [],
                "mapping": [
                    "int",
                    "str",
                    "Type[T]",
                    "Type",
                    "Callable[[None],None]",
                    "Callable[None,None]"
                ]
            }
        },
        "SupportsVariables._variables": {
            "name": "_variables",
            "location": 40,
            "return": [
                "Iterator[Variable]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TermLike.__getitem__": {
            "name": "__getitem__",
            "location": 52,
            "return": [
                "TermLike",
                "None"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "int",
                    "str",
                    "Iterable[C]",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ]
            }
        },
        "TermLike.__contains__": {
            "name": "__contains__",
            "location": 55,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TermLike.__len__": {
            "name": "__len__",
            "location": 64,
            "return": [
                "int",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TermLike.subterms": {
            "name": "subterms",
            "location": 68,
            "return": [
                "Iterator[Tuple[Position,TermLike]]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TermLike.positions": {
            "name": "positions",
            "location": 71,
            "return": [
                "generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "TerminalSymbol.__getitem__": {
            "name": "__getitem__",
            "location": 85,
            "return": [
                "TerminalSymbol"
            ],
            "arguments": {
                "self": [
                    "_TTerminalSymbol@@TerminalSymbol@@"
                ],
                "position": [
                    "List[SqlFile]",
                    "Set[str]",
                    "List[S]"
                ]
            }
        },
        "TerminalSymbol.__len__": {
            "name": "__len__",
            "location": 96,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TerminalSymbol.subterms": {
            "name": "subterms",
            "location": 99,
            "return": [
                "Generator[(Tuple[(Tuple[()], TerminalSymbol)], Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Function.__post_init__": {
            "name": "__post_init__",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Function.__str__": {
            "name": "__str__",
            "location": 121,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Function.__call__": {
            "name": "__call__",
            "location": 131,
            "return": [
                "Term"
            ],
            "arguments": {
                "self": []
            }
        },
        "Constant.__str__": {
            "name": "__str__",
            "location": 143,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Constant._substitute": {
            "name": "_substitute",
            "location": 153,
            "return": [
                "Constant"
            ],
            "arguments": {
                "self": [
                    "_TConstant@@Constant@@"
                ],
                "mapping": [
                    "int",
                    "str",
                    "Type[T]",
                    "Type",
                    "Callable[[None],None]",
                    "Callable[None,None]"
                ]
            }
        },
        "Constant._variables": {
            "name": "_variables",
            "location": 156,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variable.__str__": {
            "name": "__str__",
            "location": 169,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variable._variables": {
            "name": "_variables",
            "location": 179,
            "return": [
                "Generator[(Variable, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variable._substitute": {
            "name": "_substitute",
            "location": 182,
            "return": [
                "str",
                "int",
                "Variable",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "mapping": [
                    "str",
                    "Dict[str,str]",
                    "float"
                ]
            }
        },
        "IndexedVariable.__str__": {
            "name": "__str__",
            "location": 201,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Term.__post_init__": {
            "name": "__post_init__",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Term.__str__": {
            "name": "__str__",
            "location": 253,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Term.__getitem__": {
            "name": "__getitem__",
            "location": 272,
            "return": [
                "str",
                "Term"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "Set[str]",
                    "List[str]",
                    "Iterator[T]"
                ]
            }
        },
        "Term.__len__": {
            "name": "__len__",
            "location": 328,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Term.subterms": {
            "name": "subterms",
            "location": 332,
            "return": [
                "Generator[(Tuple[(tuple, Any)], Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Term._substitute": {
            "name": "_substitute",
            "location": 360,
            "return": [
                "Term"
            ],
            "arguments": {
                "self": [
                    "_TTerm@@Term@@"
                ],
                "mapping": [
                    "bool",
                    "str",
                    "List",
                    "Type",
                    "List[str]"
                ]
            }
        },
        "Term._variables": {
            "name": "_variables",
            "location": 366,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Substitution.__str__": {
            "name": "__str__",
            "location": 377,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Substitution.__call__": {
            "name": "__call__",
            "location": 385,
            "return": [
                "float",
                "tuple",
                "int",
                "bool",
                "str",
                "Union[List[str], List[Any]]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Callable",
                    "Dict",
                    "Token"
                ]
            }
        },
        "Substitution.__contains__": {
            "name": "__contains__",
            "location": 395,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "variable": []
            }
        },
        "Substitution.__getitem__": {
            "name": "__getitem__",
            "location": 399,
            "return": [
                "str",
                "bool",
                "set"
            ],
            "arguments": {
                "self": [],
                "variable": []
            }
        },
        "Substitution.__len__": {
            "name": "__len__",
            "location": 403,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Substitution._substitute": {
            "name": "_substitute",
            "location": 407,
            "return": [
                "Substitution"
            ],
            "arguments": {
                "self": [
                    "_TSubstitution@@Substitution@@"
                ],
                "mapping": [
                    "Type[BaseModel]",
                    "Type",
                    "bytes",
                    "Tuple[int,int,int]",
                    "Tuple[Union[int,int,int]]"
                ]
            }
        },
        "Substitution._variables": {
            "name": "_variables",
            "location": 443,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "termination-master/src/termination/__init__.py": {},
    "termination-master/tests/test_pools.py": {
        "TestPool.test_create": {
            "name": "test_create",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPool.test_get": {
            "name": "test_get",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPool.test_getitem": {
            "name": "test_getitem",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPool.test_getitem_singleton": {
            "name": "test_getitem_singleton",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPool.test_fresh": {
            "name": "test_fresh",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPool.test_independent_pools": {
            "name": "test_independent_pools",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFreshVariable.test_fresh_variable": {
            "name": "test_fresh_variable",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFreshVariable.test_indexed_variable": {
            "name": "test_indexed_variable",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFreshVariable.test_fresh_pool": {
            "name": "test_fresh_pool",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFreshVariable.test_fresh_throws": {
            "name": "test_fresh_throws",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFreshVariable.test_fresh_shares_index": {
            "name": "test_fresh_shares_index",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "termination-master/tests/test_signatures.py": {
        "TestSignature.test_signature": {
            "name": "test_signature",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSignature.test_signature_descriptors": {
            "name": "test_signature_descriptors",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "termination-master/tests/test_terms.py": {
        "TestFunction.test_call": {
            "name": "test_call",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVariable.test_str": {
            "name": "test_str",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVariable.test_getitem_root": {
            "name": "test_getitem_root",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVariable.test_getitem_invalid": {
            "name": "test_getitem_invalid",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVariable.test_subterms": {
            "name": "test_subterms",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVariable.test_positions": {
            "name": "test_positions",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVariable.test_variables": {
            "name": "test_variables",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIndexedVariable.test_str": {
            "name": "test_str",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIndexedVariable.test_getitem_root": {
            "name": "test_getitem_root",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIndexedVariable.test_getitem_invalid": {
            "name": "test_getitem_invalid",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIndexedVariable.test_subterms": {
            "name": "test_subterms",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIndexedVariable.test_positions": {
            "name": "test_positions",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIndexedVariable.test_variables": {
            "name": "test_variables",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTerm.setUp": {
            "name": "setUp",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTerm.test_getitem_root": {
            "name": "test_getitem_root",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTerm.test_getitem_subterm": {
            "name": "test_getitem_subterm",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTerm.test_getitem_invalid": {
            "name": "test_getitem_invalid",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTerm.test_subterms": {
            "name": "test_subterms",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTerm.test_positions": {
            "name": "test_positions",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTerm.test_variables": {
            "name": "test_variables",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSubstitution.setUp": {
            "name": "setUp",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSubstitution.test_empty_str": {
            "name": "test_empty_str",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSubstitution.test_nonempty_str": {
            "name": "test_nonempty_str",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSubstitution.test_substitute": {
            "name": "test_substitute",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "termination-master/tests/__init__.py": {}
}
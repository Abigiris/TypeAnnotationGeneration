{
    "test-django-cookie-master/manage.py": {},
    "test-django-cookie-master/setup.py": {},
    "test-django-cookie-master/config/urls.py": {},
    "test-django-cookie-master/config/wsgi.py": {},
    "test-django-cookie-master/config/__init__.py": {},
    "test-django-cookie-master/config/settings/base.py": {},
    "test-django-cookie-master/config/settings/local.py": {},
    "test-django-cookie-master/config/settings/production.py": {},
    "test-django-cookie-master/config/settings/test.py": {},
    "test-django-cookie-master/config/settings/__init__.py": {},
    "test-django-cookie-master/django_cookie/conftest.py": {
        "media_storage": {
            "name": "media_storage",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "settings": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None",
                    "list[str]"
                ],
                "tmpdir": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None",
                    "list[str]"
                ]
            }
        },
        "user": {
            "name": "user",
            "location": 14,
            "return": [
                "UserFactory",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "request_factory": {
            "name": "request_factory",
            "location": 19,
            "return": [
                "RequestFactory",
                "int",
                "List[Dict[str, Any]]",
                "bool",
                "list"
            ],
            "arguments": {}
        }
    },
    "test-django-cookie-master/django_cookie/s3_storage.py": {},
    "test-django-cookie-master/django_cookie/__init__.py": {},
    "test-django-cookie-master/django_cookie/contrib/__init__.py": {},
    "test-django-cookie-master/django_cookie/contrib/sites/__init__.py": {},
    "test-django-cookie-master/django_cookie/contrib/sites/migrations/0001_initial.py": {},
    "test-django-cookie-master/django_cookie/contrib/sites/migrations/0002_alter_domain_unique.py": {},
    "test-django-cookie-master/django_cookie/contrib/sites/migrations/0003_set_site_domain_and_name.py": {
        "update_site_forward": {
            "name": "update_site_forward",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [
                    "django.db.migrations.state.StateApps",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "schema_editor": [
                    "int",
                    "str",
                    "None",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "update_site_backward": {
            "name": "update_site_backward",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [
                    "django.db.migrations.state.StateApps",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "schema_editor": [
                    "int",
                    "str",
                    "None",
                    "Optional[bool]",
                    "bool"
                ]
            }
        }
    },
    "test-django-cookie-master/django_cookie/contrib/sites/migrations/__init__.py": {},
    "test-django-cookie-master/django_cookie/sentiment_analysis/aspect.py": {
        "aspectAnalysis": {
            "name": "aspectAnalysis",
            "location": 3,
            "return": [
                "Tuple[(_T0, Any, Any)]"
            ],
            "arguments": {
                "df": [
                    "_T0"
                ],
                "output": [
                    "bool"
                ]
            }
        },
        "aspectAnalysis.splitWords": {
            "name": "splitWords",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "float",
                    "List[str]",
                    "str",
                    "int"
                ]
            }
        }
    },
    "test-django-cookie-master/django_cookie/sentiment_analysis/imports.py": {},
    "test-django-cookie-master/django_cookie/sentiment_analysis/main.py": {
        "printOutput": {
            "name": "printOutput",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "df": [
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "Y": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "outFile": [
                    "str",
                    "bool"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "test-django-cookie-master/django_cookie/sentiment_analysis/model.py": {
        "gaussianNaiveBayes": {
            "name": "gaussianNaiveBayes",
            "location": 3,
            "return": [
                "list"
            ],
            "arguments": {
                "X": [
                    "int",
                    "Collection[int]",
                    "typing.Collection"
                ],
                "Y": [
                    "int",
                    "Collection[int]",
                    "typing.Collection"
                ]
            }
        },
        "MultiLayerPerceptron": {
            "name": "MultiLayerPerceptron",
            "location": 28,
            "return": [
                "list"
            ],
            "arguments": {
                "X": [
                    "int",
                    "Collection[int]",
                    "typing.Collection"
                ],
                "Y": [
                    "int",
                    "Collection[int]",
                    "typing.Collection"
                ]
            }
        },
        "SVM": {
            "name": "SVM",
            "location": 52,
            "return": [
                "list"
            ],
            "arguments": {
                "X": [
                    "int",
                    "Collection[int]",
                    "typing.Collection"
                ],
                "Y": [
                    "int",
                    "Collection[int]",
                    "typing.Collection"
                ]
            }
        },
        "trainBestClassifier": {
            "name": "trainBestClassifier",
            "location": 95,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "X": [
                    "float"
                ],
                "Y": [
                    "float"
                ]
            }
        }
    },
    "test-django-cookie-master/django_cookie/sentiment_analysis/preprocessing.py": {
        "returnDatasetInfo": {
            "name": "returnDatasetInfo",
            "location": 3,
            "return": [
                "None"
            ],
            "arguments": {
                "df": [
                    "int",
                    "str"
                ]
            }
        },
        "preprocessData": {
            "name": "preprocessData",
            "location": 11,
            "return": [
                "_T0"
            ],
            "arguments": {
                "df": [
                    "_T0"
                ]
            }
        },
        "preprocessData.tagWords": {
            "name": "tagWords",
            "location": 47,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "sentence": [
                    "str",
                    "int",
                    "list",
                    "List[str]"
                ]
            }
        }
    },
    "test-django-cookie-master/django_cookie/sentiment_analysis/__init__.py": {},
    "test-django-cookie-master/django_cookie/users/adapters.py": {
        "AccountAdapter.is_open_for_signup": {
            "name": "is_open_for_signup",
            "location": 10,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]",
                    "django.http.HttpRequest",
                    "dict"
                ]
            }
        },
        "SocialAccountAdapter.is_open_for_signup": {
            "name": "is_open_for_signup",
            "location": 15,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]",
                    "django.http.HttpRequest",
                    "dict"
                ],
                "sociallogin": [
                    "dict[, ]",
                    "django.http.HttpRequest",
                    "dict"
                ]
            }
        }
    },
    "test-django-cookie-master/django_cookie/users/admin.py": {},
    "test-django-cookie-master/django_cookie/users/apps.py": {
        "UsersConfig.ready": {
            "name": "ready",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "test-django-cookie-master/django_cookie/users/forms.py": {
        "UserCreationForm.clean_username": {
            "name": "clean_username",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "test-django-cookie-master/django_cookie/users/models.py": {
        "User.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "test-django-cookie-master/django_cookie/users/urls.py": {},
    "test-django-cookie-master/django_cookie/users/views.py": {
        "UserUpdateView.get_success_url": {
            "name": "get_success_url",
            "location": 26,
            "return": [
                "bool",
                "cmk.utils.type_defs.UserId",
                "Dict[int, dict]",
                "Optional[Iterable[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserUpdateView.get_object": {
            "name": "get_object",
            "location": 29,
            "return": [
                "str",
                "bool",
                "cmk.utils.type_defs.UserId"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserUpdateView.form_valid": {
            "name": "form_valid",
            "location": 32,
            "return": [
                "int",
                "List[str]",
                "str",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "str"
                ]
            }
        },
        "UserRedirectView.get_redirect_url": {
            "name": "get_redirect_url",
            "location": 46,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "test-django-cookie-master/django_cookie/users/__init__.py": {},
    "test-django-cookie-master/django_cookie/users/migrations/0001_initial.py": {},
    "test-django-cookie-master/django_cookie/users/migrations/__init__.py": {},
    "test-django-cookie-master/django_cookie/users/tests/factories.py": {
        "UserFactory.password": {
            "name": "password",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "create": [
                    "int",
                    "str",
                    "bool",
                    "typing.Callable[typing.Any, T]",
                    "Callable[[Any], T]"
                ],
                "extracted": [
                    "int",
                    "str",
                    "bool",
                    "typing.Callable[typing.Any, T]",
                    "Callable[[Any], T]"
                ]
            }
        }
    },
    "test-django-cookie-master/django_cookie/users/tests/test_forms.py": {
        "TestUserCreationForm.test_clean_username": {
            "name": "test_clean_username",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "test-django-cookie-master/django_cookie/users/tests/test_models.py": {
        "test_user_get_absolute_url": {
            "name": "test_user_get_absolute_url",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        }
    },
    "test-django-cookie-master/django_cookie/users/tests/test_urls.py": {
        "test_detail": {
            "name": "test_detail",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        },
        "test_update": {
            "name": "test_update",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_redirect": {
            "name": "test_redirect",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "test-django-cookie-master/django_cookie/users/tests/test_views.py": {
        "TestUserUpdateView.test_get_success_url": {
            "name": "test_get_success_url",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "request_factory": [
                    "django.tesRequestFactory"
                ]
            }
        },
        "TestUserUpdateView.test_get_object": {
            "name": "test_get_object",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "request_factory": [
                    "django.tesRequestFactory"
                ]
            }
        },
        "TestUserRedirectView.test_get_redirect_url": {
            "name": "test_get_redirect_url",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "int",
                    "django.conf.settings.AUTH_USER_MODEL",
                    "bool"
                ],
                "request_factory": [
                    "django.tesRequestFactory"
                ]
            }
        }
    },
    "test-django-cookie-master/django_cookie/users/tests/__init__.py": {},
    "test-django-cookie-master/docs/conf.py": {},
    "test-django-cookie-master/docs/__init__.py": {}
}
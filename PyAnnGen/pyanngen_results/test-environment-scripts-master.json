{
    "test-environment-scripts-master/setup.py": {},
    "test-environment-scripts-master/raiden_api/api.py": {
        "get_errors": {
            "name": "get_errors",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "json": [
                    "str",
                    "Callable[..., Awaitable]"
                ]
            }
        },
        "Api.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "int"
                ],
                "timeout": [
                    "int"
                ]
            }
        },
        "Api.address": {
            "name": "address",
            "location": 26,
            "return": [
                "raiden_api.model.responses.AddressResponse"
            ],
            "arguments": {
                "self": []
            }
        },
        "Api.payment": {
            "name": "payment",
            "location": 42,
            "return": [
                "raiden_api.model.responses.PaymentResponse"
            ],
            "arguments": {
                "self": [],
                "receiver": [
                    "str"
                ],
                "request": [
                    "raiden_api.model.requests.PaymentRequest"
                ],
                "token": [
                    "str"
                ]
            }
        },
        "Api.channels": {
            "name": "channels",
            "location": 58,
            "return": [
                "List[raiden_api.model.data.Channel]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Api.open_channel": {
            "name": "open_channel",
            "location": 79,
            "return": [
                "raiden_api.model.data.Channel"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "raiden_api.model.requests.OpenChannelRequest"
                ]
            }
        },
        "Api.manage_channel": {
            "name": "manage_channel",
            "location": 95,
            "return": [
                "raiden_api.model.data.Channel"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "raiden_api.model.requests.ManageChannelRequest"
                ],
                "token_address": [
                    "str"
                ],
                "partner_address": [
                    "str"
                ]
            }
        }
    },
    "test-environment-scripts-master/raiden_api/__init__.py": {},
    "test-environment-scripts-master/raiden_api/model/data.py": {
        "Channel.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token_network_identifier": [
                    "str"
                ],
                "channel_identifier": [
                    "int"
                ],
                "partner_address": [
                    "str"
                ],
                "token_address": [
                    "str"
                ],
                "balance": [
                    "int"
                ],
                "total_deposit": [
                    "int"
                ],
                "state": [
                    "str"
                ],
                "settle_timeout": [
                    "int"
                ],
                "reveal_timeout": [
                    "int"
                ]
            }
        },
        "Channel.from_dict": {
            "name": "from_dict",
            "location": 28,
            "return": [
                "Channel"
            ],
            "arguments": {
                "cls": [
                    "Type[_TChannel]"
                ],
                "data": [
                    "Dict[(str, Any)]"
                ]
            }
        }
    },
    "test-environment-scripts-master/raiden_api/model/exceptions.py": {
        "HttpErrorException.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "int"
                ],
                "message": [
                    "str"
                ]
            }
        }
    },
    "test-environment-scripts-master/raiden_api/model/requests.py": {
        "PaymentRequest.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "int"
                ],
                "identifier": [
                    "int"
                ]
            }
        },
        "PaymentRequest.to_dict": {
            "name": "to_dict",
            "location": 13,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpenChannelRequest.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "partner_address": [
                    "str"
                ],
                "token_address": [
                    "str"
                ],
                "total_deposit": [
                    "int"
                ],
                "settle_timeout": [
                    "int"
                ]
            }
        },
        "OpenChannelRequest.to_dict": {
            "name": "to_dict",
            "location": 35,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManageChannelRequest.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "total_deposit": [
                    "int"
                ],
                "state": [
                    "str"
                ]
            }
        },
        "ManageChannelRequest.to_dict": {
            "name": "to_dict",
            "location": 52,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "test-environment-scripts-master/raiden_api/model/responses.py": {
        "AddressResponse.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "our_address": [
                    "str"
                ]
            }
        },
        "AddressResponse.from_dict": {
            "name": "from_dict",
            "location": 10,
            "return": [
                "AddressResponse"
            ],
            "arguments": {
                "cls": [
                    "Type[_TAddressResponse]"
                ],
                "data": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "PaymentResponse.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "initiator_address": [
                    "str"
                ],
                "target_address": [
                    "str"
                ],
                "token_address": [
                    "str"
                ],
                "amount": [
                    "int"
                ],
                "identifier": [
                    "int"
                ]
            }
        },
        "PaymentResponse.from_dict": {
            "name": "from_dict",
            "location": 31,
            "return": [
                "PaymentResponse"
            ],
            "arguments": {
                "cls": [
                    "Type[_TPaymentResponse]"
                ],
                "data": [
                    "Dict[(str, Any)]"
                ]
            }
        }
    },
    "test-environment-scripts-master/raiden_api/model/__init__.py": {},
    "test-environment-scripts-master/scripts/check_direct_connections.py": {
        "main": {
            "name": "main",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "token": [
                    "str"
                ],
                "start_port": [
                    "int"
                ],
                "end_port": [
                    "int"
                ]
            }
        }
    },
    "test-environment-scripts-master/scripts/cleanup_state.py": {
        "main": {
            "name": "main",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "chain_id": [
                    "str",
                    "int",
                    "Dict[str, Union[int, Any, bool]]",
                    "dict[str, typing.Union[int,typing.Any,bool]]"
                ],
                "archive_directory": [
                    "str",
                    "int"
                ],
                "delete": [
                    "bool",
                    "Optional[List[str]]",
                    "list[str]",
                    "Optional[bool]",
                    "None"
                ]
            }
        },
        "get_db_directories": {
            "name": "get_db_directories",
            "location": 60,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "accounts": [
                    "bool"
                ],
                "raiden_dir": [
                    "str",
                    "int"
                ],
                "chain_id": [
                    "int"
                ]
            }
        },
        "tar_name": {
            "name": "tar_name",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "log_directory": [
                    "str"
                ],
                "chain_id": [
                    "int"
                ]
            }
        },
        "logs": {
            "name": "logs",
            "location": 80,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "accounts": [
                    "List[str]"
                ],
                "chain_id": [
                    "int"
                ]
            }
        },
        "get_db_folders": {
            "name": "get_db_folders",
            "location": 92,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "accounts": [
                    "List[str]"
                ]
            }
        },
        "get_raiden_dir": {
            "name": "get_raiden_dir",
            "location": 100,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_accounts": {
            "name": "get_accounts",
            "location": 109,
            "return": [
                "List[str]"
            ],
            "arguments": {}
        }
    },
    "test-environment-scripts-master/scripts/deploy_testnet.py": {
        "main": {
            "name": "main",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "keystore_file": [
                    "str",
                    "Optional[str]",
                    "Optional[Union[str, Any]]"
                ],
                "password": [
                    "str",
                    "bytes",
                    "Optional[Any]",
                    "typing.Any",
                    "None"
                ],
                "rpc_url": [
                    "str"
                ],
                "development": [
                    "str",
                    "list[tuple[typing.Union[str,str]]]",
                    "List[Tuple[str, str]]",
                    "list[str]",
                    "List[str]",
                    "Iterable[str]"
                ]
            }
        }
    },
    "test-environment-scripts-master/scripts/open_channels.py": {
        "main": {
            "name": "main",
            "location": 76,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "token": [
                    "str",
                    "bool",
                    "Optional[IO[str]]",
                    "typing.IO",
                    "None",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "config": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "NodeConfig.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str"
                ],
                "port": [
                    "int"
                ],
                "funds": [
                    "int"
                ],
                "targets": [
                    "List[str]"
                ]
            }
        },
        "NodeConfig.from_dict": {
            "name": "from_dict",
            "location": 27,
            "return": [
                "NodeConfig"
            ],
            "arguments": {
                "cls": [
                    "Type[_TNodeConfig]"
                ],
                "data": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "OpenJob.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api": [
                    "raiden_api.api.Api"
                ],
                "node": [
                    "NodeConfig"
                ],
                "token_address": [
                    "str"
                ]
            }
        },
        "OpenJob.run": {
            "name": "run",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "test-environment-scripts-master/scripts/send_tokens.py": {
        "main": {
            "name": "main",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "keystore_file": [
                    "str"
                ],
                "password": [
                    "str",
                    "bool",
                    "list[str]",
                    "List[str]",
                    "int"
                ],
                "rpc_url": [
                    "str",
                    "bool"
                ],
                "accounts": [
                    "str",
                    "bytes",
                    "List[str]"
                ],
                "token": [
                    "str",
                    "int"
                ],
                "amount": [
                    "str",
                    "int",
                    "List[Tuple[str, Any]]",
                    "Iterable[str]",
                    "Optional[int]"
                ]
            }
        },
        "send_tokens": {
            "name": "send_tokens",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "int",
                    "str"
                ],
                "sender": [
                    "int",
                    "str",
                    "Optional[int]",
                    "None",
                    "List[str]",
                    "list[str]"
                ],
                "amount": [
                    "int",
                    "str"
                ],
                "testing_accounts": [
                    "str",
                    "bytes",
                    "list[dict[str, str]]",
                    "list[str]",
                    "bool",
                    "int",
                    "List[Dict[str, str]]",
                    "float",
                    "Optional[List[str]]",
                    "Iterable[str]"
                ],
                "contract": [
                    "Optional[str]",
                    "str",
                    "int",
                    "Optional[Dict[str, Any]]",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "private_key": [
                    "int",
                    "str"
                ]
            }
        },
        "transfer": {
            "name": "transfer",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "float",
                    "int",
                    "List[int]",
                    "Callable"
                ],
                "receiver": [
                    "str"
                ],
                "sender": [
                    "str"
                ],
                "wei_value": [
                    "int"
                ],
                "contract": [
                    "int",
                    "web3.contracContract",
                    "dict[str, typing.Any]",
                    "str",
                    "T",
                    "Dict[str, Any]",
                    "bool"
                ],
                "private_key": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "unlock_account": {
            "name": "unlock_account",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "str",
                    "web3.Web3"
                ],
                "address": [
                    "str"
                ],
                "passphrase": [
                    "str"
                ]
            }
        }
    },
    "test-environment-scripts-master/scripts/start_private_chain.py": {
        "start_parity": {
            "name": "start_parity",
            "location": 39,
            "return": [
                "subprocess.Popen[bytes]"
            ],
            "arguments": {}
        },
        "service_shutdown": {
            "name": "service_shutdown",
            "location": 44,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "signum": [
                    "str",
                    "int"
                ],
                "frame": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "send": {
            "name": "send",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "bytes",
                    "int",
                    "float"
                ],
                "sender": [
                    "str"
                ],
                "receiver": [
                    "str"
                ],
                "wei_value": [
                    "int"
                ]
            }
        },
        "unlock_account": {
            "name": "unlock_account",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "address": [
                    "str"
                ],
                "web3": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 66,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "rpc_url": [
                    "int",
                    "str",
                    "Dict[str, 'LabwareDefinition']",
                    "dict[str, L]",
                    "List[int]",
                    "list[int]"
                ],
                "accounts": [
                    "str",
                    "web3.contracContract",
                    "int"
                ],
                "block_time": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "fund_accounts": {
            "name": "fund_accounts",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "sender": [
                    "str"
                ],
                "testing_accounts": [
                    "List[str]"
                ],
                "eth": [
                    "int"
                ]
            }
        },
        "MineJob.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "web3": [
                    "int",
                    "typing.Callable[..., None]",
                    "bool",
                    "str",
                    "Callable[..., None]",
                    "float",
                    "Union[str, float]",
                    "tuple[]",
                    "Callable",
                    "tuple"
                ],
                "sender": [
                    "str"
                ],
                "receiver": [
                    "str"
                ],
                "block_time": [
                    "int"
                ]
            }
        },
        "MineJob.run": {
            "name": "run",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "test-environment-scripts-master/scripts/transfers.py": {
        "main": {
            "name": "main",
            "location": 132,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "transfer_amount": [
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "bool"
                ],
                "per_transfer": [
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "bool"
                ],
                "allowed_errors": [
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "bool"
                ],
                "token": [
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "bool"
                ],
                "config": [
                    "str",
                    "Optional[str]"
                ],
                "timeout": [
                    "str",
                    "int",
                    "None",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "shutdown_handler": {
            "name": "shutdown_handler",
            "location": 187,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "_signo": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "_stackframe": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TransferJob.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "int"
                ],
                "receiver": [
                    "str"
                ],
                "position": [
                    "int"
                ],
                "total": [
                    "int"
                ],
                "single": [
                    "int"
                ],
                "errors_allowed": [
                    "int"
                ],
                "token": [
                    "str"
                ],
                "timeout": [
                    "int"
                ]
            }
        },
        "TransferJob.transfer": {
            "name": "transfer",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransferJob.run": {
            "name": "run",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
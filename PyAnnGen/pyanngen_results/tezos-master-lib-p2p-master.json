{
    "tezos-master-lib-p2p-master/docs/conf.py": {},
    "tezos-master-lib-p2p-master/docs/_extensions/tezos_custom_roles.py": {
        "setup": {
            "name": "setup",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "Tuple[Callable, Callable]",
                    "tuple[typing.Union[typing.Callable[, ],typing.Callable[, ]]]"
                ]
            }
        },
        "find_dot_opam": {
            "name": "find_dot_opam",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "package_role": {
            "name": "package_role",
            "location": 20,
            "return": [
                "Tuple[(list, List[nothing])]"
            ],
            "arguments": {
                "name": [
                    "int",
                    "typing.Iterable[float]",
                    "bool",
                    "Iterable[float]"
                ],
                "rawtext": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Sequence[Sequence[Any]]",
                    "typing.Sequence[typing.Sequence[typing.Any]]"
                ],
                "text": [
                    "str"
                ],
                "lineno": [
                    "int",
                    "typing.Iterable[float]",
                    "bool",
                    "Iterable[float]"
                ],
                "inliner": [
                    "str",
                    "int",
                    "None",
                    "bool",
                    "Optional[int]",
                    "Optional[\"Address\"]"
                ],
                "options": [
                    "dict[, ]",
                    "Optional[str]",
                    "str",
                    "Sequence[Sequence[Any]]"
                ],
                "content": [
                    "list[]",
                    "int",
                    "bool",
                    "Iterable[float]"
                ]
            }
        },
        "opam_role": {
            "name": "opam_role",
            "location": 48,
            "return": [
                "Tuple[(list, List[nothing])]"
            ],
            "arguments": {
                "name": [
                    "bool",
                    "typing.Iterable[float]",
                    "int",
                    "Iterable[float]"
                ],
                "rawtext": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None",
                    "Optional[List[str]]",
                    "list[str]"
                ],
                "text": [
                    "str",
                    "Optional[str]"
                ],
                "lineno": [
                    "bool",
                    "typing.Iterable[float]",
                    "int",
                    "Iterable[float]"
                ],
                "inliner": [
                    "str",
                    "int",
                    "None",
                    "bool",
                    "Optional[int]",
                    "Optional[\"Address\"]"
                ],
                "options": [
                    "dict[, ]",
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "bool"
                ],
                "content": [
                    "list[]",
                    "bool",
                    "int",
                    "Iterable[float]"
                ]
            }
        },
        "src_role": {
            "name": "src_role",
            "location": 64,
            "return": [
                "Tuple[(list, List[nothing])]"
            ],
            "arguments": {
                "name": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "rawtext": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "text": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "lineno": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "inliner": [
                    "str",
                    "int",
                    "None",
                    "bool",
                    "Optional[int]",
                    "Optional[\"Address\"]"
                ],
                "options": [
                    "dict[, ]",
                    "str",
                    "Optional[str]"
                ],
                "content": [
                    "list[]",
                    "bool",
                    "Optional[str]"
                ]
            }
        }
    },
    "tezos-master-lib-p2p-master/scripts/b58_prefix.py": {},
    "tezos-master-lib-p2p-master/scripts/ocamldot.py": {},
    "tezos-master-lib-p2p-master/scripts/create_genesis/create_genesis_info.py": {},
    "tezos-master-lib-p2p-master/tests_python/client/client.py": {
        "format_command": {
            "name": "format_command",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "cmd": [
                    "List[str]"
                ]
            }
        },
        "Client.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_path": [
                    "str"
                ],
                "admin_client_path": [
                    "str"
                ],
                "host": [
                    "str"
                ],
                "base_dir": [
                    "str"
                ],
                "rpc_port": [
                    "int"
                ],
                "use_tls": [
                    "int"
                ],
                "disable_disclaimer": [
                    "bool"
                ]
            }
        },
        "Client.run": {
            "name": "run",
            "location": 90,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "List[str]"
                ],
                "admin": [
                    "bool"
                ],
                "check": [
                    "bool"
                ],
                "trace": [
                    "bool"
                ]
            }
        },
        "Client.rpc": {
            "name": "rpc",
            "location": 136,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "verb": [
                    "str"
                ],
                "path": [
                    "str"
                ],
                "data": [
                    "dict"
                ],
                "params": [
                    "List[str]"
                ]
            }
        },
        "Client.typecheck": {
            "name": "typecheck",
            "location": 162,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "str"
                ]
            }
        },
        "Client.run_script": {
            "name": "run_script",
            "location": 166,
            "return": [
                "client_output.RunScriptResult"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "str"
                ],
                "storage": [
                    "str"
                ],
                "inp": [
                    "str"
                ],
                "amount": [
                    "float"
                ]
            }
        },
        "Client.gen_key": {
            "name": "gen_key",
            "location": 178,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "alias": [
                    "str"
                ],
                "args": [
                    "List[str]"
                ]
            }
        },
        "Client.import_secret_key": {
            "name": "import_secret_key",
            "location": 185,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "secret": [
                    "str"
                ]
            }
        },
        "Client.activate_protocol": {
            "name": "activate_protocol",
            "location": 188,
            "return": [
                "client_output.ActivationResult"
            ],
            "arguments": {
                "self": [],
                "protocol": [
                    "str"
                ],
                "parameter_file": [
                    "str"
                ],
                "fitness": [
                    "str"
                ],
                "key": [
                    "str"
                ],
                "timestamp": [
                    "str"
                ]
            }
        },
        "Client.activate_protocol_json": {
            "name": "activate_protocol_json",
            "location": 204,
            "return": [
                "client_output.ActivationResult"
            ],
            "arguments": {
                "self": [],
                "protocol": [
                    "str"
                ],
                "parameters": [
                    "dict"
                ],
                "fitness": [
                    "str"
                ],
                "key": [
                    "str"
                ],
                "timestamp": [
                    "str"
                ]
            }
        },
        "Client.show_voting_period": {
            "name": "show_voting_period",
            "location": 218,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.ban_peer": {
            "name": "ban_peer",
            "location": 221,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "int"
                ]
            }
        },
        "Client.unban_peer": {
            "name": "unban_peer",
            "location": 224,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "int"
                ]
            }
        },
        "Client.trust_peer": {
            "name": "trust_peer",
            "location": 227,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "int"
                ]
            }
        },
        "Client.untrust_peer": {
            "name": "untrust_peer",
            "location": 230,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "int"
                ]
            }
        },
        "Client.endorse": {
            "name": "endorse",
            "location": 233,
            "return": [
                "client_output.EndorseResult"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str"
                ]
            }
        },
        "Client.bake": {
            "name": "bake",
            "location": 237,
            "return": [
                "client_output.BakeForResult"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str"
                ],
                "args": [
                    "List[str]"
                ]
            }
        },
        "Client.originate": {
            "name": "originate",
            "location": 246,
            "return": [
                "client_output.OriginationResult"
            ],
            "arguments": {
                "self": [],
                "contract_name": [
                    "str"
                ],
                "manager": [
                    "str"
                ],
                "amount": [
                    "float"
                ],
                "sender": [
                    "str"
                ],
                "contract": [
                    "str"
                ],
                "args": [
                    "List[str]"
                ]
            }
        },
        "Client.transfer": {
            "name": "transfer",
            "location": 261,
            "return": [
                "client_output.TransferResult"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "float"
                ],
                "account1": [
                    "str"
                ],
                "account2": [
                    "str"
                ],
                "args": [
                    "List[str]"
                ]
            }
        },
        "Client.p2p_stat": {
            "name": "p2p_stat",
            "location": 273,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.get_balance": {
            "name": "get_balance",
            "location": 276,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str"
                ]
            }
        },
        "Client.get_receipt": {
            "name": "get_receipt",
            "location": 280,
            "return": [
                "client_output.GetReceiptResult"
            ],
            "arguments": {
                "self": [],
                "operation": [
                    "str"
                ],
                "args": [
                    "List[str]"
                ]
            }
        },
        "Client.get_prevalidator": {
            "name": "get_prevalidator",
            "location": 289,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.get_mempool": {
            "name": "get_mempool",
            "location": 292,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.mempool_is_empty": {
            "name": "mempool_is_empty",
            "location": 295,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.get_head": {
            "name": "get_head",
            "location": 303,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.get_block": {
            "name": "get_block",
            "location": 306,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "block_hash": [
                    "int",
                    "List[List]",
                    "List[int]",
                    "List[List[T]]"
                ]
            }
        },
        "Client.get_ballot_list": {
            "name": "get_ballot_list",
            "location": 309,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.get_ballots": {
            "name": "get_ballots",
            "location": 312,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.get_current_period_kind": {
            "name": "get_current_period_kind",
            "location": 315,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.get_current_proposal": {
            "name": "get_current_proposal",
            "location": 319,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.get_current_quorum": {
            "name": "get_current_quorum",
            "location": 323,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.get_listings": {
            "name": "get_listings",
            "location": 326,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.get_proposals": {
            "name": "get_proposals",
            "location": 329,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.get_protocol": {
            "name": "get_protocol",
            "location": 332,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "List[str]"
                ]
            }
        },
        "Client.get_period_position": {
            "name": "get_period_position",
            "location": 337,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.get_level": {
            "name": "get_level",
            "location": 342,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "List[str]"
                ]
            }
        },
        "Client.wait_for_inclusion": {
            "name": "wait_for_inclusion",
            "location": 347,
            "return": [
                "client_output.WaitForResult"
            ],
            "arguments": {
                "self": [],
                "operation_hash": [
                    "str"
                ],
                "branch": [
                    "str"
                ],
                "args": [
                    "None"
                ]
            }
        },
        "Client.inject_protocol": {
            "name": "inject_protocol",
            "location": 360,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "proto": [
                    "List[int]",
                    "bytes",
                    "Callable",
                    "Optional[str]"
                ]
            }
        },
        "Client.list_protocols": {
            "name": "list_protocols",
            "location": 363,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.submit_proposals": {
            "name": "submit_proposals",
            "location": 367,
            "return": [
                "client_output.SubmitProposalsResult"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str"
                ],
                "protos": [
                    "List[str]"
                ]
            }
        },
        "Client.submit_ballot": {
            "name": "submit_ballot",
            "location": 374,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str"
                ],
                "proto": [
                    "str"
                ],
                "vote": [
                    "str"
                ]
            }
        },
        "Client.bootstrapped": {
            "name": "bootstrapped",
            "location": 380,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.cleanup": {
            "name": "cleanup",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tezos-master-lib-p2p-master/tests_python/client/client_output.py": {
        "extract_rpc_answer": {
            "name": "extract_rpc_answer",
            "location": 132,
            "return": [
                "dict"
            ],
            "arguments": {
                "client_output": [
                    "str"
                ]
            }
        },
        "extract_balance": {
            "name": "extract_balance",
            "location": 143,
            "return": [
                "float"
            ],
            "arguments": {
                "client_output": [
                    "str"
                ]
            }
        },
        "extract_protocols": {
            "name": "extract_protocols",
            "location": 151,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "client_output": [
                    "str"
                ]
            }
        },
        "InvalidClientOutput.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_output": [
                    "str"
                ]
            }
        },
        "EndorseResult.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_output": [
                    "str"
                ]
            }
        },
        "TransferResult.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_output": [
                    "str"
                ]
            }
        },
        "GetReceiptResult.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_output": [
                    "str"
                ]
            }
        },
        "RunScriptResult.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_output": [
                    "str"
                ]
            }
        },
        "OriginationResult.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_output": [
                    "str"
                ]
            }
        },
        "SubmitProposalsResult.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_output": [
                    "str"
                ]
            }
        },
        "BakeForResult.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_output": [
                    "str"
                ]
            }
        },
        "ActivationResult.__init__": {
            "name": "__init__",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_output": [
                    "str"
                ]
            }
        },
        "WaitForResult.__init__": {
            "name": "__init__",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_output": [
                    "str"
                ]
            }
        }
    },
    "tezos-master-lib-p2p-master/tests_python/client/__init__.py": {},
    "tezos-master-lib-p2p-master/tests_python/daemons/baker.py": {
        "Baker.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "baker": [
                    "str"
                ],
                "rpc_port": [
                    "int"
                ],
                "base_dir": [
                    "str"
                ],
                "node_dir": [
                    "str"
                ],
                "account": [
                    "str"
                ],
                "params": [
                    "List[str]"
                ],
                "log_file": [
                    "str"
                ]
            }
        }
    },
    "tezos-master-lib-p2p-master/tests_python/daemons/endorser.py": {
        "Endorser.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "endorser": [
                    "str"
                ],
                "rpc_port": [
                    "int"
                ],
                "base_dir": [
                    "str"
                ],
                "params": [
                    "List[str]"
                ],
                "log_file": [
                    "str"
                ]
            }
        }
    },
    "tezos-master-lib-p2p-master/tests_python/daemons/node.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str"
                ],
                "sandbox_file": [
                    "str"
                ],
                "expected_pow": [
                    "float"
                ],
                "node_dir": [
                    "str"
                ],
                "use_tls": [
                    "Tuple[(str, str)]"
                ],
                "params": [
                    "List[str]"
                ],
                "log_file": [
                    "str"
                ],
                "p2p_port": [
                    "int"
                ],
                "rpc_port": [
                    "int"
                ],
                "peers": [
                    "List[int]"
                ],
                "log_levels": [
                    "Dict[(str, str)]"
                ],
                "env": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "Node.run": {
            "name": "run",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.init_config": {
            "name": "init_config",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.init_id": {
            "name": "init_id",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.upgrade_storage": {
            "name": "upgrade_storage",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.snapshot_export": {
            "name": "snapshot_export",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "list[str]",
                    "Iterable[str]",
                    "List[str]"
                ],
                "params": [
                    "Optional[Dict[str, str]]",
                    "None",
                    "str",
                    "dict[str, str]",
                    "Optional[str]"
                ]
            }
        },
        "Node.snapshot_import": {
            "name": "snapshot_import",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "list[str]",
                    "Iterable[str]",
                    "List[str]"
                ],
                "params": [
                    "Optional[Dict[str, str]]",
                    "None",
                    "str",
                    "dict[str, str]",
                    "Optional[str]"
                ]
            }
        },
        "Node.cleanup": {
            "name": "cleanup",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.terminate": {
            "name": "terminate",
            "location": 182,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.kill": {
            "name": "kill",
            "location": 186,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.poll": {
            "name": "poll",
            "location": 190,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tezos-master-lib-p2p-master/tests_python/daemons/utils.py": {
        "format_command": {
            "name": "format_command",
            "location": 8,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "cmd": [
                    "str",
                    "list[list[str]]",
                    "int",
                    "list[]",
                    "List[List[str]]",
                    "list[str]",
                    "list",
                    "List[str]"
                ],
                "color": [
                    "bool",
                    "int",
                    "Iterable[Iterable[float]]",
                    "Iterable[float]",
                    "str"
                ]
            }
        },
        "prepare_log": {
            "name": "prepare_log",
            "location": 15,
            "return": [
                "tuple[]",
                "str",
                "List[bytes]",
                "Iterable[float]",
                "type",
                "int"
            ],
            "arguments": {
                "cmd": [
                    "str",
                    "bool",
                    "dict[str, list[bytes]]",
                    "Dict[str, List[bytes]]",
                    "bytes",
                    "Optional[bool]",
                    "None",
                    "list[str]",
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "log_file": [
                    "str",
                    "Optional[str]",
                    "IO[Any]",
                    "bool"
                ],
                "overwrite": [
                    "bool",
                    "str",
                    "Sequence[str]",
                    "int",
                    "Optional[str]",
                    "type",
                    "List[str]"
                ]
            }
        }
    },
    "tezos-master-lib-p2p-master/tests_python/daemons/__init__.py": {},
    "tezos-master-lib-p2p-master/tests_python/examples/example.py": {
        "scenario": {
            "name": "scenario",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tezos-master-lib-p2p-master/tests_python/examples/forge_transfer.py": {
        "scenario": {
            "name": "scenario",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tezos-master-lib-p2p-master/tests_python/examples/proto_demo_noops.py": {
        "forge_block_header_data": {
            "name": "forge_block_header_data",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "protocol_data": [
                    "dict",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tezos-master-lib-p2p-master/tests_python/examples/rpc.py": {
        "main": {
            "name": "main",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tezos-master-lib-p2p-master/tests_python/examples/test_example.py": {
        "sandbox": {
            "name": "sandbox",
            "location": 7,
            "return": [
                "",
                "typing.Generator[Sandbox]"
            ],
            "arguments": {}
        },
        "session": {
            "name": "session",
            "location": 21,
            "return": [
                "",
                "typing.Generator[dict[, ]]"
            ],
            "arguments": {}
        },
        "TestExample.test_wait_sync_proto": {
            "name": "test_wait_sync_proto",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": [
                    "str",
                    "float"
                ]
            }
        },
        "TestExample.test_transfer": {
            "name": "test_transfer",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": [
                    "str"
                ],
                "session": [
                    "str"
                ]
            }
        },
        "TestExample.test_inclusion": {
            "name": "test_inclusion",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": [
                    "utils.clienClient"
                ],
                "session": [
                    "str"
                ]
            }
        }
    },
    "tezos-master-lib-p2p-master/tests_python/examples/__init__.py": {},
    "tezos-master-lib-p2p-master/tests_python/launchers/sandbox.py": {
        "Sandbox._wrap_path": {
            "name": "_wrap_path",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "binary": [
                    "str"
                ],
                "branch": [
                    "str"
                ],
                "proto": [
                    "typing.Text",
                    "int",
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "Sandbox.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "binaries_path": [
                    "str"
                ],
                "identities": [
                    "Dict[(str, Dict[(str, str)])]"
                ],
                "genesis_pk": [
                    "str"
                ],
                "rpc": [
                    "int"
                ],
                "p2p": [
                    "int"
                ],
                "num_peers": [
                    "int"
                ],
                "log_dir": [
                    "str"
                ]
            }
        },
        "Sandbox.__enter__": {
            "name": "__enter__",
            "location": 102,
            "return": [
                "Sandbox"
            ],
            "arguments": {
                "self": [
                    "_TSandbox"
                ]
            }
        },
        "Sandbox.add_node": {
            "name": "add_node",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node_id": [
                    "int"
                ],
                "peers": [
                    "List[int]"
                ],
                "params": [
                    "List[str]"
                ],
                "log_levels": [
                    "Dict[(str, str)]"
                ],
                "private": [
                    "bool"
                ],
                "config_client": [
                    "bool"
                ],
                "use_tls": [
                    "Tuple[(str, str)]"
                ],
                "snapshot": [
                    "str"
                ],
                "branch": [
                    "str"
                ]
            }
        },
        "Sandbox.add_baker": {
            "name": "add_baker",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node_id": [
                    "int"
                ],
                "account": [
                    "str"
                ],
                "proto": [
                    "str"
                ],
                "params": [
                    "List[str]"
                ],
                "branch": [
                    "str"
                ]
            }
        },
        "Sandbox.add_endorser": {
            "name": "add_endorser",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node_id": [
                    "int"
                ],
                "account": [
                    "str"
                ],
                "proto": [
                    "str"
                ],
                "endorsement_delay": [
                    "float"
                ],
                "branch": [
                    "str"
                ]
            }
        },
        "Sandbox.rm_baker": {
            "name": "rm_baker",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node_id": [
                    "int"
                ],
                "proto": [
                    "str"
                ]
            }
        },
        "Sandbox.rm_endorser": {
            "name": "rm_endorser",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node_id": [
                    "int"
                ],
                "proto": [
                    "str"
                ]
            }
        },
        "Sandbox.rm_node": {
            "name": "rm_node",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node_id": [
                    "int"
                ]
            }
        },
        "Sandbox.client": {
            "name": "client",
            "location": 306,
            "return": [
                "client.client.Client"
            ],
            "arguments": {
                "self": [],
                "node_id": [
                    "int"
                ]
            }
        },
        "Sandbox.node": {
            "name": "node",
            "location": 310,
            "return": [
                "daemons.node.Node"
            ],
            "arguments": {
                "self": [],
                "node_id": [
                    "int"
                ]
            }
        },
        "Sandbox.baker": {
            "name": "baker",
            "location": 314,
            "return": [
                "daemons.baker.Baker"
            ],
            "arguments": {
                "self": [],
                "node_id": [
                    "int"
                ],
                "proto": [
                    "str"
                ]
            }
        },
        "Sandbox.all_clients": {
            "name": "all_clients",
            "location": 318,
            "return": [
                "List[client.client.Client]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sandbox.all_nodes": {
            "name": "all_nodes",
            "location": 323,
            "return": [
                "List[daemons.node.Node]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sandbox.__exit__": {
            "name": "__exit__",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sandbox.cleanup": {
            "name": "cleanup",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sandbox.are_daemons_alive": {
            "name": "are_daemons_alive",
            "location": 345,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SandboxMultiBranch.__init__": {
            "name": "__init__",
            "location": 387,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "binaries_path": [
                    "str"
                ],
                "identities": [
                    "Dict[(str, Dict[(str, str)])]"
                ],
                "genesis_pk": [
                    "str"
                ],
                "branch_map": [
                    "Dict[(int, str)]"
                ],
                "rpc": [
                    "int"
                ],
                "p2p": [
                    "int"
                ],
                "num_peers": [
                    "int"
                ],
                "log_dir": [
                    "str"
                ]
            }
        },
        "SandboxMultiBranch.add_baker": {
            "name": "add_baker",
            "location": 409,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node_id": [
                    "int"
                ],
                "account": [
                    "str"
                ],
                "proto": [
                    "str"
                ],
                "params": [
                    "List[str]"
                ],
                "branch": [
                    "str"
                ]
            }
        },
        "SandboxMultiBranch.add_endorser": {
            "name": "add_endorser",
            "location": 419,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node_id": [
                    "int"
                ],
                "account": [
                    "str"
                ],
                "proto": [
                    "str"
                ],
                "endorsement_delay": [
                    "float"
                ],
                "branch": [
                    "str"
                ]
            }
        },
        "SandboxMultiBranch.add_node": {
            "name": "add_node",
            "location": 430,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node_id": [
                    "int"
                ],
                "peers": [
                    "List[int]"
                ],
                "params": [
                    "List[str]"
                ],
                "log_levels": [
                    "Dict[(str, str)]"
                ],
                "private": [
                    "bool"
                ],
                "config_client": [
                    "bool"
                ],
                "use_tls": [
                    "Tuple[(str, str)]"
                ],
                "snapshot": [
                    "str"
                ],
                "branch": [
                    "str"
                ]
            }
        }
    },
    "tezos-master-lib-p2p-master/tests_python/launchers/__init__.py": {},
    "tezos-master-lib-p2p-master/tests_python/scripts/build_branches.py": {
        "print_log": {
            "name": "print_log",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "log": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "bytes",
                    "Optional[Exception]",
                    "Exception",
                    "List[Tuple[str, ...]]",
                    "None",
                    "list[tuple[typing.Union[str,...]]]",
                    "Dict[str, str]",
                    "dict[str, str]"
                ],
                "color": [
                    "bool",
                    "str",
                    "dict",
                    "Optional[Exception]",
                    "List[Tuple[str, ...]]",
                    "bytes",
                    "Dict[str, str]"
                ]
            }
        },
        "print_command": {
            "name": "print_command",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "cmd": [
                    "str",
                    "list[]",
                    "int",
                    "list[list[str]]",
                    "list[str]",
                    "list",
                    "List[List[str]]",
                    "List[str]",
                    "Union[io.TextIO, pathlib.Path]"
                ],
                "color": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "parse_sexp": {
            "name": "parse_sexp",
            "location": 35,
            "return": [
                "Union[(float, int, str, List[Union[(float, int, list, str, List[Union[(float, int, str)]])]])]"
            ],
            "arguments": {
                "sexp": [
                    "bool",
                    "str",
                    "float",
                    "typing.Sequence[int]",
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "opam_env": {
            "name": "opam_env",
            "location": 63,
            "return": [
                "dict"
            ],
            "arguments": {
                "tezos_build": [
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "cmd": [
                    "str",
                    "bool",
                    "pathlib.Path"
                ],
                "cwd": [
                    "str",
                    "Sequence[str]",
                    "typing.Sequence[str]",
                    "Optional[Dict[str, str]]",
                    "dict[str, str]",
                    "Optional[pathlib.Path]",
                    "None"
                ],
                "env": [
                    "bool",
                    "None",
                    "str",
                    "list",
                    "Optional[str]",
                    "list[]",
                    "Optional[IO[bytes]]",
                    "typing.IO"
                ]
            }
        },
        "build": {
            "name": "build",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "branch": [
                    "str",
                    "int",
                    "bool"
                ],
                "tezos_home": [
                    "dict",
                    "bool",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "tezos_build": [
                    "str",
                    "bool",
                    "float"
                ],
                "tezos_binaries": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "prepare_binaries": {
            "name": "prepare_binaries",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "tezos_home": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ],
                "tezos_build": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "None",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ],
                "tezos_binaries": [
                    "str",
                    "bool",
                    "int"
                ],
                "branch_list": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tezos-master-lib-p2p-master/tests_python/scripts/__init__.py": {},
    "tezos-master-lib-p2p-master/tests_python/tests/conftest.py": {
        "sanity_check": {
            "name": "sanity_check",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "request": [
                    "Iterator",
                    "typing.Iterator"
                ]
            }
        },
        "log_dir": {
            "name": "log_dir",
            "location": 24,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "request": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "session": {
            "name": "session",
            "location": 30,
            "return": [
                "",
                "typing.Generator[dict[, ]]"
            ],
            "arguments": {}
        },
        "pytest_runtest_makereport": {
            "name": "pytest_runtest_makereport",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "item": [
                    "dict[, ]",
                    "str",
                    "T",
                    "dict"
                ],
                "call": [
                    "int",
                    "float",
                    "None",
                    "Optional[T]",
                    "dict[str, dict[str, str]]",
                    "Dict[str, Dict[str, str]]",
                    "Iterable[str]"
                ]
            }
        },
        "pytest_runtest_setup": {
            "name": "pytest_runtest_setup",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "item": [
                    "list[]",
                    "float",
                    "T",
                    "list"
                ]
            }
        },
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "utils.parser.BinaryParser"
                ]
            }
        },
        "sandbox": {
            "name": "sandbox",
            "location": 59,
            "return": [
                "",
                "typing.Generator[Sandbox]"
            ],
            "arguments": {
                "log_dir": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "client": {
            "name": "client",
            "location": 73,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "sandbox": [
                    "Dict[str, Any]",
                    "str",
                    "bool"
                ]
            }
        },
        "clients": {
            "name": "clients",
            "location": 82,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "sandbox": [
                    "Dict[str, Any]"
                ],
                "request": [
                    "Optional[dict]",
                    "dict[, ]",
                    "dict",
                    "None"
                ]
            }
        },
        "sandbox_multibranch": {
            "name": "sandbox_multibranch",
            "location": 102,
            "return": [
                "",
                "typing.Generator[SandboxMultiBranch]"
            ],
            "arguments": {
                "log_dir": [
                    "bool",
                    "str",
                    "typing.Callable[str,str, None]",
                    "int",
                    "cmk.utils.type_defs.ServiceDetails",
                    "Callable[[str, str], None]"
                ],
                "request": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Callable[..., Awaitable[dict]]",
                    "typing.Callable[..., collections.abc.Awaitable[dict[, ]]]",
                    "Optional[Mapping[str, Any]]",
                    "typing.Mapping",
                    "None"
                ]
            }
        }
    },
    "tezos-master-lib-p2p-master/tests_python/tests/test_baker_endorser.py": {
        "random_op": {
            "name": "random_op",
            "location": 19,
            "return": [
                "bool",
                "Awaitable",
                "List[str]"
            ],
            "arguments": {
                "client": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "TestAllDeamonsWithOperations.test_setup_network": {
            "name": "test_setup_network",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": [
                    "Dict[str, Sequence[str]]"
                ]
            }
        },
        "TestAllDeamonsWithOperations.test_wait_for_alpha": {
            "name": "test_wait_for_alpha",
            "location": 50,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": [
                    "Type",
                    "str",
                    "int"
                ]
            }
        },
        "TestAllDeamonsWithOperations.test_network_gen_operations_and_add_nodes": {
            "name": "test_network_gen_operations_and_add_nodes",
            "location": 56,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": [
                    "Optional[Dict[str, Any]]",
                    "List[str]",
                    "str",
                    "Callable"
                ],
                "session": [
                    "bytes",
                    "str",
                    "Hashable",
                    "typing.Hashable"
                ]
            }
        },
        "TestAllDeamonsWithOperations.test_kill_baker": {
            "name": "test_kill_baker",
            "location": 83,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": [
                    "str",
                    "float"
                ]
            }
        },
        "TestAllDeamonsWithOperations.test_synchronize": {
            "name": "test_synchronize",
            "location": 87,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": [
                    "str",
                    "float"
                ]
            }
        },
        "TestAllDeamonsWithOperations.test_check_operations": {
            "name": "test_check_operations",
            "location": 90,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestAllDeamonsWithOperations.test_check_logs": {
            "name": "test_check_logs",
            "location": 101,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        }
    },
    "tezos-master-lib-p2p-master/tests_python/tests/test_basic.py": {
        "TestRawContext.test_delegates": {
            "name": "test_delegates",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestRawContext.test_no_service_1": {
            "name": "test_no_service_1",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str"
                ]
            }
        },
        "TestRawContext.test_no_service_2": {
            "name": "test_no_service_2",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str"
                ]
            }
        },
        "TestRawContext.test_no_service_3": {
            "name": "test_no_service_3",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str"
                ]
            }
        },
        "TestRawContext.test_bake": {
            "name": "test_bake",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str"
                ]
            }
        },
        "TestRawContext.test_gen_keys": {
            "name": "test_gen_keys",
            "location": 49,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str"
                ]
            }
        }
    },
    "tezos-master-lib-p2p-master/tests_python/tests/test_contract.py": {
        "all_contracts": {
            "name": "all_contracts",
            "location": 10,
            "return": [
                "List[str]"
            ],
            "arguments": {}
        },
        "TestContracts.test_gen_keys": {
            "name": "test_gen_keys",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestContracts.test_typecheck": {
            "name": "test_typecheck",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str"
                ],
                "contract": []
            }
        },
        "TestContracts.test_run": {
            "name": "test_run",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str"
                ],
                "contract": [
                    "str",
                    "Optional[str]"
                ],
                "param": [
                    "str"
                ],
                "storage": [
                    "str"
                ],
                "expected": [
                    "str"
                ]
            }
        },
        "TestGasBound.test_write_contract": {
            "name": "test_write_contract",
            "location": 73,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "Dict[str, Any]",
                    "str",
                    "dict[str, typing.Any]",
                    "int"
                ],
                "session": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        },
        "TestGasBound.test_originate_first_explosion": {
            "name": "test_originate_first_explosion",
            "location": 82,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "dict",
                    "dict[, ]"
                ],
                "session": []
            }
        },
        "TestGasBound.test_originate_second_explosion": {
            "name": "test_originate_second_explosion",
            "location": 92,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [],
                "session": []
            }
        }
    },
    "tezos-master-lib-p2p-master/tests_python/tests/test_contract_baker.py": {
        "client": {
            "name": "client",
            "location": 8,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "sandbox": [
                    "Optional[int]"
                ]
            }
        },
        "TestOriginationCall.test_originate": {
            "name": "test_originate",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [],
                "session": []
            }
        },
        "TestOriginationCall.test_call": {
            "name": "test_call",
            "location": 40,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "List[str]"
                ],
                "session": []
            }
        },
        "TestOriginationCall.test_balance": {
            "name": "test_balance",
            "location": 49,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestOriginationCall.test_query_storage": {
            "name": "test_query_storage",
            "location": 52,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [],
                "session": []
            }
        }
    },
    "tezos-master-lib-p2p-master/tests_python/tests/test_cors.py": {
        "node": {
            "name": "node",
            "location": 6,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "sandbox": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "TestCors.test_preflight": {
            "name": "test_preflight",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int",
                    "Iterable[T]",
                    "typing.Iterable[T]"
                ]
            }
        },
        "TestCors.test_request": {
            "name": "test_request",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bool",
                    "int"
                ]
            }
        }
    },
    "tezos-master-lib-p2p-master/tests_python/tests/test_double_endorsement.py": {
        "TestDoubleEndorsement.test_init": {
            "name": "test_init",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestDoubleEndorsement.test_level": {
            "name": "test_level",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": [
                    "str",
                    "float"
                ]
            }
        },
        "TestDoubleEndorsement.test_terminate_nodes_1_and_2": {
            "name": "test_terminate_nodes_1_and_2",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": [
                    "dict[str, typing.Sequence[str]]",
                    "Dict[str, Sequence[str]]",
                    "datetime.date.time"
                ]
            }
        },
        "TestDoubleEndorsement.test_bake_node_0": {
            "name": "test_bake_node_0",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestDoubleEndorsement.test_endorse_node_0": {
            "name": "test_endorse_node_0",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": [
                    "str",
                    "bytes",
                    "int"
                ],
                "session": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "TestDoubleEndorsement.test_terminate_node_0": {
            "name": "test_terminate_node_0",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": [
                    "Dict[str, Sequence[str]]",
                    "dict[str, typing.Sequence[str]]"
                ]
            }
        },
        "TestDoubleEndorsement.test_restart_node_2": {
            "name": "test_restart_node_2",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": [
                    "Dict[str, Sequence[str]]",
                    "dict[str, typing.Sequence[str]]"
                ]
            }
        },
        "TestDoubleEndorsement.test_bake_node_2": {
            "name": "test_bake_node_2",
            "location": 49,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestDoubleEndorsement.test_endorse_node_2": {
            "name": "test_endorse_node_2",
            "location": 53,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": [
                    "bool",
                    "str"
                ],
                "session": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "TestDoubleEndorsement.test_restart_all": {
            "name": "test_restart_all",
            "location": 62,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": [
                    "Set[int]",
                    "set[int]"
                ]
            }
        },
        "TestDoubleEndorsement.test_check_level": {
            "name": "test_check_level",
            "location": 67,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": [
                    "str",
                    "float"
                ]
            }
        },
        "TestDoubleEndorsement.test_forge_accusation": {
            "name": "test_forge_accusation",
            "location": 73,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": [
                    "bool",
                    "int",
                    "List[List[int]]"
                ],
                "session": []
            }
        },
        "TestDoubleEndorsement.test_operation_applied": {
            "name": "test_operation_applied",
            "location": 102,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": [
                    "str"
                ],
                "session": [
                    "str"
                ]
            }
        },
        "TestDoubleEndorsement.test_forge_accusation.transform_endorsement": {
            "name": "transform_endorsement",
            "location": 78,
            "return": [
                "dict[typing.Text, ]",
                "str",
                "bool",
                "int",
                "float"
            ],
            "arguments": {
                "end": [
                    "int",
                    "Optional[Tuple[int, int]]",
                    "bool"
                ]
            }
        }
    },
    "tezos-master-lib-p2p-master/tests_python/tests/test_fork.py": {
        "TestFork.test_init": {
            "name": "test_init",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestFork.test_level": {
            "name": "test_level",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": [
                    "str",
                    "float"
                ]
            }
        },
        "TestFork.test_terminate_nodes_1_and_2": {
            "name": "test_terminate_nodes_1_and_2",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": [
                    "dict[str, typing.Sequence[str]]",
                    "Dict[str, Sequence[str]]",
                    "datetime.date.time"
                ]
            }
        },
        "TestFork.test_bake_node_0": {
            "name": "test_bake_node_0",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestFork.test_endorse_node_0": {
            "name": "test_endorse_node_0",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": [
                    "str",
                    "bytes",
                    "int"
                ],
                "session": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "TestFork.test_bake_node_0_again": {
            "name": "test_bake_node_0_again",
            "location": 44,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestFork.test_first_branch": {
            "name": "test_first_branch",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": [
                    "str"
                ],
                "session": [
                    "str"
                ]
            }
        },
        "TestFork.test_terminate_node_0": {
            "name": "test_terminate_node_0",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": [
                    "Dict[str, Sequence[str]]",
                    "dict[str, typing.Sequence[str]]"
                ]
            }
        },
        "TestFork.test_restart_node_2": {
            "name": "test_restart_node_2",
            "location": 57,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": [
                    "Dict[str, Sequence[str]]",
                    "dict[str, typing.Sequence[str]]"
                ]
            }
        },
        "TestFork.test_bake_node_2": {
            "name": "test_bake_node_2",
            "location": 61,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestFork.test_bake_node_2_again": {
            "name": "test_bake_node_2_again",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestFork.test_second_branch": {
            "name": "test_second_branch",
            "location": 69,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": [
                    "str"
                ],
                "session": [
                    "str"
                ]
            }
        },
        "TestFork.test_restart_all": {
            "name": "test_restart_all",
            "location": 75,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": [
                    "Set[int]",
                    "set[int]"
                ]
            }
        },
        "TestFork.test_check_head": {
            "name": "test_check_head",
            "location": 80,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": [
                    "str"
                ],
                "session": [
                    "str"
                ]
            }
        }
    },
    "tezos-master-lib-p2p-master/tests_python/tests/test_injection.py": {
        "clients": {
            "name": "clients",
            "location": 8,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "sandbox": [
                    "dict"
                ]
            }
        },
        "client": {
            "name": "client",
            "location": 60,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "sandbox": [
                    "Dict[str, Any]",
                    "str",
                    "bool"
                ]
            }
        },
        "TestInjectionAndActivation.test_check_resources": {
            "name": "test_check_resources",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInjectionAndActivation.test_compute_hash": {
            "name": "test_compute_hash",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str"
                ]
            }
        },
        "TestInjectionAndActivation.test_injection": {
            "name": "test_injection",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "clients": [
                    "str"
                ]
            }
        },
        "TestInjectionAndActivation.test_check_injected": {
            "name": "test_check_injected",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "clients": [
                    "utils.clienClient"
                ],
                "session": []
            }
        },
        "TestInjectionAndActivation.test_activation": {
            "name": "test_activation",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "clients": [],
                "session": []
            }
        },
        "TestInjectionAndActivation.test_check_protocol": {
            "name": "test_check_protocol",
            "location": 53,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "clients": [
                    "bool"
                ],
                "session": []
            }
        },
        "TestActivation.test_proto_known": {
            "name": "test_proto_known",
            "location": 71,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestActivation.test_first_protocol": {
            "name": "test_first_protocol",
            "location": 75,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestActivation.test_activate_demo": {
            "name": "test_activate_demo",
            "location": 79,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestActivation.test_level1": {
            "name": "test_level1",
            "location": 86,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "TestActivation.test_protocol_genesis": {
            "name": "test_protocol_genesis",
            "location": 89,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str"
                ]
            }
        }
    },
    "tezos-master-lib-p2p-master/tests_python/tests/test_many_bakers.py": {
        "TestManyBakers.test_init": {
            "name": "test_init",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestManyBakers.test_wait": {
            "name": "test_wait",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestManyBakers.test_check_logs": {
            "name": "test_check_logs",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        }
    },
    "tezos-master-lib-p2p-master/tests_python/tests/test_many_nodes.py": {
        "TestManyNodesBootstrap.test_init": {
            "name": "test_init",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestManyNodesBootstrap.test_add_nodes": {
            "name": "test_add_nodes",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestManyNodesBootstrap.test_sleep_10s": {
            "name": "test_sleep_10s",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestManyNodesBootstrap.test_add_more_nodes": {
            "name": "test_add_more_nodes",
            "location": 36,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": [
                    "int",
                    "bool"
                ]
            }
        },
        "TestManyNodesBootstrap.test_kill_baker": {
            "name": "test_kill_baker",
            "location": 46,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": [
                    "str",
                    "bytes"
                ]
            }
        },
        "TestManyNodesBootstrap.test_synchronize": {
            "name": "test_synchronize",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": [
                    "str",
                    "float"
                ]
            }
        },
        "TestManyNodesBootstrap.test_check_logs": {
            "name": "test_check_logs",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        }
    },
    "tezos-master-lib-p2p-master/tests_python/tests/test_mempool.py": {
        "TestMempool.test_init": {
            "name": "test_init",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestMempool.test_level1": {
            "name": "test_level1",
            "location": 21,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": [
                    "str",
                    "float"
                ]
            }
        },
        "TestMempool.test_running_prevalidators": {
            "name": "test_running_prevalidators",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestMempool.test_mempool_empty": {
            "name": "test_mempool_empty",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestMempool.test_transfer": {
            "name": "test_transfer",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": [
                    "str"
                ],
                "session": [
                    "utils.clienClient"
                ]
            }
        },
        "TestMempool.test_mempool_include_transfer": {
            "name": "test_mempool_include_transfer",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": [
                    "str",
                    "bytes",
                    "List[List[int]]",
                    "list[list[int]]"
                ],
                "session": [
                    "str",
                    "bytes"
                ]
            }
        },
        "TestMempool.test_bake_for1": {
            "name": "test_bake_for1",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestMempool.test_level2": {
            "name": "test_level2",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": [
                    "str",
                    "float"
                ]
            }
        },
        "TestMempool.test_mempools_are_empty": {
            "name": "test_mempools_are_empty",
            "location": 56,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestMempool.test_injection_fails_on_mempool_disabled_node": {
            "name": "test_injection_fails_on_mempool_disabled_node",
            "location": 60,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        }
    },
    "tezos-master-lib-p2p-master/tests_python/tests/test_multinode.py": {
        "TestManualBaking.test_level": {
            "name": "test_level",
            "location": 19,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "clients": [
                    "bool"
                ]
            }
        },
        "TestManualBaking.test_bake_and_check_level": {
            "name": "test_bake_and_check_level",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "clients": [
                    "bytes",
                    "int"
                ]
            }
        },
        "TestManualBaking.test_endorse": {
            "name": "test_endorse",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "clients": [
                    "float",
                    "List[raiden.utils.Address]",
                    "List[int]",
                    "Tuple[int]"
                ],
                "session": []
            }
        },
        "TestManualBaking.test_transfer": {
            "name": "test_transfer",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "clients": [
                    "int",
                    "utils.Vote"
                ],
                "session": []
            }
        },
        "TestManualBaking.test_mempool_contains_endorse_and_transfer": {
            "name": "test_mempool_contains_endorse_and_transfer",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "clients": [
                    "bool"
                ],
                "session": []
            }
        },
        "TestManualBaking.test_bake": {
            "name": "test_bake",
            "location": 51,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "clients": []
            }
        },
        "TestManualBaking.test_block_contains_endorse_and_transfer": {
            "name": "test_block_contains_endorse_and_transfer",
            "location": 54,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "clients": [],
                "session": []
            }
        },
        "TestManualBaking.test_balance": {
            "name": "test_balance",
            "location": 62,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "clients": []
            }
        }
    },
    "tezos-master-lib-p2p-master/tests_python/tests/test_multinode_snapshot.py": {
        "TestMultiNodeSnapshot.test_init": {
            "name": "test_init",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestMultiNodeSnapshot.test_bake_group1_level_a": {
            "name": "test_bake_group1_level_a",
            "location": 25,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestMultiNodeSnapshot.test_group1_level_a": {
            "name": "test_group1_level_a",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": [
                    "str",
                    "bytes"
                ],
                "session": [
                    "str",
                    "bytes"
                ]
            }
        },
        "TestMultiNodeSnapshot.test_terminate_group1": {
            "name": "test_terminate_group1",
            "location": 34,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": [
                    "int",
                    "dict[, ]",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestMultiNodeSnapshot.test_export_snapshot": {
            "name": "test_export_snapshot",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": [
                    "raiden.utils.SecreRegistryAddress",
                    "str",
                    "int"
                ],
                "tmpdir": [
                    "bool"
                ],
                "session": []
            }
        },
        "TestMultiNodeSnapshot.test_rerun_group1": {
            "name": "test_rerun_group1",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": [
                    "int",
                    "dict[, ]",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestMultiNodeSnapshot.test_level": {
            "name": "test_level",
            "location": 53,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestMultiNodeSnapshot.test_bake_group2_level_b": {
            "name": "test_bake_group2_level_b",
            "location": 57,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestMultiNodeSnapshot.test_all_level_c": {
            "name": "test_all_level_c",
            "location": 61,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": [
                    "str",
                    "Dict[str, float]"
                ]
            }
        }
    },
    "tezos-master-lib-p2p-master/tests_python/tests/test_proto_demo_noops_manual_bake.py": {
        "client": {
            "name": "client",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "sandbox": [
                    "Dict[str, Any]",
                    "str",
                    "bool"
                ]
            }
        },
        "forge_block_header_data": {
            "name": "forge_block_header_data",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "protocol_data": [
                    "dict",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestProtoDemo.test_proto_known": {
            "name": "test_proto_known",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestProtoDemo.test_first_protocol": {
            "name": "test_first_protocol",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestProtoDemo.test_activate_proto": {
            "name": "test_activate_proto",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestProtoDemo.test_level1": {
            "name": "test_level1",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "dict"
                ]
            }
        },
        "TestProtoDemo.test_protocol_genesis": {
            "name": "test_protocol_genesis",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str"
                ]
            }
        },
        "TestProtoDemo.test_manual_bake": {
            "name": "test_manual_bake",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestProtoDemo.test_level2": {
            "name": "test_level2",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        }
    },
    "tezos-master-lib-p2p-master/tests_python/tests/test_rpc.py": {
        "TestRPCs.test_init": {
            "name": "test_init",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_bake_for": {
            "name": "test_bake_for",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_network_self": {
            "name": "test_network_self",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_constants": {
            "name": "test_constants",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_blocks": {
            "name": "test_chain_blocks",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_chain_id": {
            "name": "test_chain_chain_id",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_invalid_blocks": {
            "name": "test_chain_invalid_blocks",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_invalid_blocks_block_hash": {
            "name": "test_chain_invalid_blocks_block_hash",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_describe": {
            "name": "test_describe",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_errors": {
            "name": "test_errors",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_fetch_protocol_protocol_hash": {
            "name": "test_fetch_protocol_protocol_hash",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_network_connections": {
            "name": "test_network_connections",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_network_connections_peer_id": {
            "name": "test_network_connections_peer_id",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_network_greylist_clear": {
            "name": "test_network_greylist_clear",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_network_peers": {
            "name": "test_network_peers",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_network_peers_peer_id": {
            "name": "test_network_peers_peer_id",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_network_peers_peer_id_ban": {
            "name": "test_network_peers_peer_id_ban",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_network_peers_peer_id_banned": {
            "name": "test_network_peers_peer_id_banned",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_network_peers_peer_id_unban": {
            "name": "test_network_peers_peer_id_unban",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_network_peers_peer_id_untrust": {
            "name": "test_network_peers_peer_id_untrust",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_network_peers_peer_id_trust": {
            "name": "test_network_peers_peer_id_trust",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_network_points": {
            "name": "test_network_points",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_network_points_point": {
            "name": "test_network_points_point",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_network_points_point_ban": {
            "name": "test_network_points_point_ban",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_network_points_point_banned": {
            "name": "test_network_points_point_banned",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_network_points_point_trust": {
            "name": "test_network_points_point_trust",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_network_points_point_unban": {
            "name": "test_network_points_point_unban",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_network_points_point_untrust": {
            "name": "test_network_points_point_untrust",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_network_stat": {
            "name": "test_network_stat",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_network_version": {
            "name": "test_network_version",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_network_versions": {
            "name": "test_network_versions",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_protocols": {
            "name": "test_protocols",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_protocols_protocol_hash": {
            "name": "test_protocols_protocol_hash",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_workers_block_validator": {
            "name": "test_workers_block_validator",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_workers_chain_validators": {
            "name": "test_workers_chain_validators",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_workers_chain_validator": {
            "name": "test_workers_chain_validator",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_workers_chain_validator_ddb": {
            "name": "test_workers_chain_validator_ddb",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_workers_chain_validator_peers_validators": {
            "name": "test_workers_chain_validator_peers_validators",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_workers_chain_validator_peer_validator": {
            "name": "test_workers_chain_validator_peer_validator",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_workers_prevalidators": {
            "name": "test_workers_prevalidators",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_workers_prevalidators_chain_id": {
            "name": "test_workers_prevalidators_chain_id",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block": {
            "name": "test_chain_block",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_context_constants": {
            "name": "test_chain_block_context_constants",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_context_constants_errors": {
            "name": "test_chain_block_context_constants_errors",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_context_contracts": {
            "name": "test_chain_block_context_contracts",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_context_contract": {
            "name": "test_chain_block_context_contract",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_context_contract_balance": {
            "name": "test_chain_block_context_contract_balance",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_context_contract_counter": {
            "name": "test_chain_block_context_contract_counter",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_context_contract_delegatable": {
            "name": "test_chain_block_context_contract_delegatable",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_context_contract_delegate": {
            "name": "test_chain_block_context_contract_delegate",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_context_contract_manager": {
            "name": "test_chain_block_context_contract_manager",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_context_contract_manager_key": {
            "name": "test_chain_block_context_contract_manager_key",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_context_contract_script": {
            "name": "test_chain_block_context_contract_script",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_context_contract_spendable": {
            "name": "test_chain_block_context_contract_spendable",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_context_contract_storage": {
            "name": "test_chain_block_context_contract_storage",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_context_delegates": {
            "name": "test_chain_block_context_delegates",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_context_delegate": {
            "name": "test_chain_block_context_delegate",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_context_delegate_balance": {
            "name": "test_chain_block_context_delegate_balance",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_context_delegate_deactivated": {
            "name": "test_chain_block_context_delegate_deactivated",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_context_delegate_delegated_balance": {
            "name": "test_chain_block_context_delegate_delegated_balance",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_context_delegate_delegated_contracts": {
            "name": "test_chain_block_context_delegate_delegated_contracts",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_context_delegate_frozen_balance": {
            "name": "test_chain_block_context_delegate_frozen_balance",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_context_delegate_frozen_balance_by_cycle": {
            "name": "test_chain_block_context_delegate_frozen_balance_by_cycle",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_context_delegate_grace_period": {
            "name": "test_chain_block_context_delegate_grace_period",
            "location": 342,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_context_delegate_staking_balance": {
            "name": "test_chain_block_context_delegate_staking_balance",
            "location": 349,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_context_nonces_block_level": {
            "name": "test_chain_block_context_nonces_block_level",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_context_raw_bytes": {
            "name": "test_chain_block_context_raw_bytes",
            "location": 359,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_hash": {
            "name": "test_chain_block_hash",
            "location": 364,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_header": {
            "name": "test_chain_block_header",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_header_protocol_data": {
            "name": "test_chain_block_header_protocol_data",
            "location": 373,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_header_protocol_data_raw": {
            "name": "test_chain_block_header_protocol_data_raw",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_header_raw": {
            "name": "test_chain_block_header_raw",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_header_shell": {
            "name": "test_chain_block_header_shell",
            "location": 388,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_helpers_baking_rights": {
            "name": "test_chain_block_helpers_baking_rights",
            "location": 393,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_helpers_complete_prefix1": {
            "name": "test_chain_block_helpers_complete_prefix1",
            "location": 398,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_helpers_complete_prefix2": {
            "name": "test_chain_block_helpers_complete_prefix2",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_helpers_current_level": {
            "name": "test_chain_block_helpers_current_level",
            "location": 411,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_helpers_endorsing_rights": {
            "name": "test_chain_block_helpers_endorsing_rights",
            "location": 416,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_helpers_levels_in_current_cycle": {
            "name": "test_chain_block_helpers_levels_in_current_cycle",
            "location": 421,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_live_blocks": {
            "name": "test_chain_block_live_blocks",
            "location": 426,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_metadata": {
            "name": "test_chain_block_metadata",
            "location": 431,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_operation_hashes": {
            "name": "test_chain_block_operation_hashes",
            "location": 436,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_add_transactions": {
            "name": "test_add_transactions",
            "location": 441,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_operation_hashes_list_offset": {
            "name": "test_chain_block_operation_hashes_list_offset",
            "location": 448,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_operation_hashes_list_operation": {
            "name": "test_chain_block_operation_hashes_list_operation",
            "location": 453,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_operations": {
            "name": "test_chain_block_operations",
            "location": 459,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_operations_list": {
            "name": "test_chain_block_operations_list",
            "location": 464,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_operations_list_operation": {
            "name": "test_chain_block_operations_list_operation",
            "location": 469,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_votes_ballot_list": {
            "name": "test_chain_block_votes_ballot_list",
            "location": 475,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_votes_ballots": {
            "name": "test_chain_block_votes_ballots",
            "location": 480,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_votes_current_period_kind": {
            "name": "test_chain_block_votes_current_period_kind",
            "location": 485,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_votes_current_proposal": {
            "name": "test_chain_block_votes_current_proposal",
            "location": 490,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_votes_current_quorum": {
            "name": "test_chain_block_votes_current_quorum",
            "location": 495,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_votes_listings": {
            "name": "test_chain_block_votes_listings",
            "location": 500,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_chain_block_votes_proposals": {
            "name": "test_chain_block_votes_proposals",
            "location": 505,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_stat_gc": {
            "name": "test_stat_gc",
            "location": 510,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        },
        "TestRPCs.test_stat_memory": {
            "name": "test_stat_memory",
            "location": 513,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox": []
            }
        }
    },
    "tezos-master-lib-p2p-master/tests_python/tests/test_tls.py": {
        "client": {
            "name": "client",
            "location": 6,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "sandbox": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestTLS.test_bootstrapped": {
            "name": "test_bootstrapped",
            "location": 16,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str"
                ]
            }
        }
    },
    "tezos-master-lib-p2p-master/tests_python/tests/test_voting.py": {
        "client": {
            "name": "client",
            "location": 11,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "sandbox": [
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "TestManualBaking.test_period_position": {
            "name": "test_period_position",
            "location": 26,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestManualBaking.test_bake_one_block": {
            "name": "test_bake_one_block",
            "location": 29,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str"
                ]
            }
        },
        "TestManualBaking.test_period_position2": {
            "name": "test_period_position2",
            "location": 32,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestManualBaking.test_bake_two_blocks": {
            "name": "test_bake_two_blocks",
            "location": 35,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestManualBaking.test_period_position3": {
            "name": "test_period_position3",
            "location": 39,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestManualBaking.test_listings2": {
            "name": "test_listings2",
            "location": 42,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestManualBaking.test_inject_proto1": {
            "name": "test_inject_proto1",
            "location": 45,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str"
                ],
                "tmpdir": [
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "TestManualBaking.test_number_proto": {
            "name": "test_number_proto",
            "location": 57,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "utils.clienClient"
                ],
                "session": []
            }
        },
        "TestManualBaking.test_proposal": {
            "name": "test_proposal",
            "location": 62,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestManualBaking.test_show_voting_period2": {
            "name": "test_show_voting_period2",
            "location": 65,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str"
                ]
            }
        },
        "TestManualBaking.test_submit_proposals": {
            "name": "test_submit_proposals",
            "location": 68,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "dict",
                    "raiden.utils.BlockIdentifier"
                ],
                "session": []
            }
        },
        "TestManualBaking.test_bake_one_block2": {
            "name": "test_bake_one_block2",
            "location": 75,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str"
                ]
            }
        },
        "TestManualBaking.test_proposal2": {
            "name": "test_proposal2",
            "location": 78,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestManualBaking.test_bake_one_block3": {
            "name": "test_bake_one_block3",
            "location": 81,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str"
                ]
            }
        },
        "TestManualBaking.test_breaking_tie": {
            "name": "test_breaking_tie",
            "location": 84,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [],
                "session": []
            }
        },
        "TestManualBaking.test_show_voting_period3": {
            "name": "test_show_voting_period3",
            "location": 88,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str"
                ]
            }
        },
        "TestManualBaking.test_bake_two_blocks2": {
            "name": "test_bake_two_blocks2",
            "location": 91,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestManualBaking.test_period_position4": {
            "name": "test_period_position4",
            "location": 95,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestManualBaking.test_current_period_kind": {
            "name": "test_current_period_kind",
            "location": 99,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestManualBaking.test_listings3": {
            "name": "test_listings3",
            "location": 102,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestManualBaking.test_current_proposal": {
            "name": "test_current_proposal",
            "location": 105,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [],
                "session": []
            }
        },
        "TestManualBaking.test_submit_ballot": {
            "name": "test_submit_ballot",
            "location": 109,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [],
                "session": []
            }
        },
        "TestManualBaking.test_bake_four_blocks": {
            "name": "test_bake_four_blocks",
            "location": 115,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestManualBaking.test_new_period": {
            "name": "test_new_period",
            "location": 121,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        }
    },
    "tezos-master-lib-p2p-master/tests_python/tests/__init__.py": {},
    "tezos-master-lib-p2p-master/tests_python/tests/multibranch/test_baker_endorser_mb.py": {
        "random_op": {
            "name": "random_op",
            "location": 43,
            "return": [
                "bool",
                "Awaitable",
                "List[str]"
            ],
            "arguments": {
                "client": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "params": {
            "name": "params",
            "location": 62,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "i": [
                    "int",
                    "Iterator",
                    "typing.Iterator"
                ]
            }
        },
        "TestAllDeamonsWithOperations.test_setup_network": {
            "name": "test_setup_network",
            "location": 80,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox_multibranch": []
            }
        },
        "TestAllDeamonsWithOperations.test_wait_for_alpha": {
            "name": "test_wait_for_alpha",
            "location": 98,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox_multibranch": [
                    "Type",
                    "str",
                    "int"
                ]
            }
        },
        "TestAllDeamonsWithOperations.test_network_gen_operations_and_add_nodes": {
            "name": "test_network_gen_operations_and_add_nodes",
            "location": 104,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox_multibranch": [
                    "typing.Callable[List,bool, None]",
                    "Callable[[List, bool], None]",
                    "Callable"
                ],
                "session": [
                    "bool",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "TestAllDeamonsWithOperations.test_kill_baker": {
            "name": "test_kill_baker",
            "location": 135,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox_multibranch": [
                    "str",
                    "float"
                ]
            }
        },
        "TestAllDeamonsWithOperations.test_synchronize": {
            "name": "test_synchronize",
            "location": 139,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox_multibranch": [
                    "str",
                    "float"
                ]
            }
        },
        "TestAllDeamonsWithOperations.test_check_operations": {
            "name": "test_check_operations",
            "location": 142,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox_multibranch": []
            }
        },
        "TestAllDeamonsWithOperations.test_check_logs": {
            "name": "test_check_logs",
            "location": 153,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox_multibranch": []
            }
        }
    },
    "tezos-master-lib-p2p-master/tests_python/tests/multibranch/test_voting_full.py": {
        "TestMultiNode.test_start_nodes_and_baker": {
            "name": "test_start_nodes_and_baker",
            "location": 48,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox_multibranch": [
                    "int"
                ]
            }
        },
        "TestMultiNode.test_wait_for_alpha": {
            "name": "test_wait_for_alpha",
            "location": 56,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox_multibranch": [
                    "Type",
                    "str",
                    "int"
                ]
            }
        },
        "TestMultiNode.test_wait_second_proposal_period": {
            "name": "test_wait_second_proposal_period",
            "location": 62,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox_multibranch": [
                    "str",
                    "float"
                ]
            }
        },
        "TestMultiNode.test_retrieve_protos": {
            "name": "test_retrieve_protos",
            "location": 80,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox_multibranch": [
                    "int",
                    "Tuple[float, float, float, float, float]",
                    "float",
                    "str"
                ]
            }
        },
        "TestMultiNode.test_submit_proposals": {
            "name": "test_submit_proposals",
            "location": 85,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox_multibranch": [],
                "session": []
            }
        },
        "TestMultiNode.test_wait_for_protocol_inclusion": {
            "name": "test_wait_for_protocol_inclusion",
            "location": 91,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox_multibranch": [],
                "session": []
            }
        },
        "TestMultiNode.test_check_proposals": {
            "name": "test_check_proposals",
            "location": 95,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox_multibranch": [
                    "str",
                    "float"
                ]
            }
        },
        "TestMultiNode.test_wait_for_vote": {
            "name": "test_wait_for_vote",
            "location": 101,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox_multibranch": [
                    "Type",
                    "str",
                    "int"
                ]
            }
        },
        "TestMultiNode.test_vote": {
            "name": "test_vote",
            "location": 106,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox_multibranch": [
                    "str",
                    "float"
                ]
            }
        },
        "TestMultiNode.test_wait_for_testing": {
            "name": "test_wait_for_testing",
            "location": 112,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox_multibranch": [
                    "str"
                ]
            }
        },
        "TestMultiNode.test_all_testing": {
            "name": "test_all_testing",
            "location": 118,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox_multibranch": [
                    "Dict[str, float]",
                    "bool",
                    "str"
                ]
            }
        },
        "TestMultiNode.test_start_beta_baker_test": {
            "name": "test_start_beta_baker_test",
            "location": 122,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox_multibranch": [
                    "int"
                ]
            }
        },
        "TestMultiNode.test_add_new_node": {
            "name": "test_add_new_node",
            "location": 126,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox_multibranch": []
            }
        },
        "TestMultiNode.test_rpc_in_test_period": {
            "name": "test_rpc_in_test_period",
            "location": 133,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox_multibranch": [
                    "str",
                    "Callable"
                ]
            }
        },
        "TestMultiNode.test_transfer_in_test_period": {
            "name": "test_transfer_in_test_period",
            "location": 139,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox_multibranch": [
                    "str",
                    "Callable"
                ]
            }
        },
        "TestMultiNode.test_testchain_increases": {
            "name": "test_testchain_increases",
            "location": 144,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox_multibranch": [
                    "str",
                    "float"
                ]
            }
        },
        "TestMultiNode.test_wait_for_promotion_vote": {
            "name": "test_wait_for_promotion_vote",
            "location": 151,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox_multibranch": [
                    "Type",
                    "str",
                    "int"
                ]
            }
        },
        "TestMultiNode.test_vote_again": {
            "name": "test_vote_again",
            "location": 157,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox_multibranch": [
                    "str",
                    "float"
                ]
            }
        },
        "TestMultiNode.test_wait_for_proposal": {
            "name": "test_wait_for_proposal",
            "location": 163,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox_multibranch": [
                    "Type",
                    "str",
                    "int"
                ]
            }
        },
        "TestMultiNode.test_start_beta_baker": {
            "name": "test_start_beta_baker",
            "location": 169,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox_multibranch": [
                    "int"
                ]
            }
        },
        "TestMultiNode.test_new_protocol": {
            "name": "test_new_protocol",
            "location": 173,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox_multibranch": [
                    "int",
                    "str",
                    "Tuple[float, float, float, float, float]",
                    "float"
                ]
            }
        },
        "TestMultiNode.test_stop_old_bakers": {
            "name": "test_stop_old_bakers",
            "location": 181,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox_multibranch": [
                    "str"
                ]
            }
        },
        "TestMultiNode.test_level_increases": {
            "name": "test_level_increases",
            "location": 186,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox_multibranch": [
                    "str",
                    "float"
                ]
            }
        },
        "TestMultiNode.test_all_proposal": {
            "name": "test_all_proposal",
            "location": 192,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox_multibranch": [
                    "Dict[str, float]",
                    "bool",
                    "str"
                ]
            }
        },
        "TestMultiNode.test_chain_id_new_proto": {
            "name": "test_chain_id_new_proto",
            "location": 196,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox_multibranch": [
                    "str",
                    "int"
                ]
            }
        },
        "TestMultiNode.test_transfer_new_proto": {
            "name": "test_transfer_new_proto",
            "location": 202,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox_multibranch": [
                    "List[int]"
                ],
                "session": [
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "TestMultiNode.test_still_level_increases": {
            "name": "test_still_level_increases",
            "location": 207,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox_multibranch": [
                    "str",
                    "float"
                ]
            }
        },
        "TestMultiNode.test_contains_transfer": {
            "name": "test_contains_transfer",
            "location": 213,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox_multibranch": [],
                "session": []
            }
        },
        "TestMultiNode.test_balance": {
            "name": "test_balance",
            "location": 218,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox_multibranch": [
                    "int",
                    "Tuple[float, float, float, float, float]",
                    "float"
                ]
            }
        },
        "TestMultiNode.test_check_logs": {
            "name": "test_check_logs",
            "location": 223,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "sandbox_multibranch": []
            }
        }
    },
    "tezos-master-lib-p2p-master/tests_python/tools/constants.py": {},
    "tezos-master-lib-p2p-master/tests_python/tools/paths.py": {
        "tezos_home": {
            "name": "tezos_home",
            "location": 4,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "tezos-master-lib-p2p-master/tests_python/tools/utils.py": {
        "retry": {
            "name": "retry",
            "location": 18,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "timeout": [
                    "float",
                    "int",
                    "None",
                    "Optional[float]",
                    "Optional[int]",
                    "bool"
                ],
                "attempts": [
                    "float",
                    "int",
                    "None",
                    "Optional[float]",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "check_block_contains_operations": {
            "name": "check_block_contains_operations",
            "location": 44,
            "return": [
                "bool",
                "str",
                "List[str]",
                "Iterable[str]",
                "\"ImmutableSet[T]\""
            ],
            "arguments": {
                "client": [
                    "List[str]",
                    "Client"
                ],
                "operation_hashes": [
                    "list[str]",
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "check_mempool_contains_operations": {
            "name": "check_mempool_contains_operations",
            "location": 53,
            "return": [
                "bool",
                "Set[str]",
                "list"
            ],
            "arguments": {
                "client": [
                    "List[str]",
                    "str"
                ],
                "operation_hashes": [
                    "list[typing.Union[str,str,str,str,str,str,str,str,str,str]]",
                    "str",
                    "List[str]",
                    "dict[, ]",
                    "int",
                    "dict",
                    "bool"
                ]
            }
        },
        "check_protocol": {
            "name": "check_protocol",
            "location": 61,
            "return": [
                "bool",
                "List[int]",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "client": [
                    "List[str]",
                    "str",
                    "zerver.models.Client"
                ],
                "proto": [
                    "str",
                    "float",
                    "Set[str]",
                    "set[str]"
                ],
                "params": [
                    "List[str]",
                    "None",
                    "str",
                    "list[str]",
                    "zerver.models.Client"
                ]
            }
        },
        "check_level": {
            "name": "check_level",
            "location": 68,
            "return": [
                "bool",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "client": [
                    "int",
                    "str"
                ],
                "level": [
                    "int",
                    "str"
                ]
            }
        },
        "check_level_greater_than": {
            "name": "check_level_greater_than",
            "location": 73,
            "return": [
                "bool",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "client": [
                    "int",
                    "str"
                ],
                "level": [
                    "int",
                    "str"
                ]
            }
        },
        "check_operation_in_receipt": {
            "name": "check_operation_in_receipt",
            "location": 78,
            "return": [
                "bool",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "client": [
                    "str",
                    "List[str]"
                ],
                "operation_hash": [
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "check_previous": [
                    "str",
                    "None",
                    "int",
                    "Dict[str, Any]",
                    "Tuple[str, str]",
                    "dict[str, typing.Any]",
                    "tuple[typing.Union[str,str]]"
                ]
            }
        },
        "synchronize": {
            "name": "synchronize",
            "location": 89,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "clients": [],
                "max_diff": [
                    "int"
                ]
            }
        },
        "get_block_hash": {
            "name": "get_block_hash",
            "location": 95,
            "return": [
                "str"
            ],
            "arguments": {
                "client": [
                    "Client",
                    "google.cloud.datastore.Client"
                ],
                "level": [
                    "int"
                ]
            }
        },
        "all_blocks": {
            "name": "all_blocks",
            "location": 109,
            "return": [
                "list[]",
                "List[int]",
                "list",
                "str",
                "Optional[Type]",
                "Union[int, slice]"
            ],
            "arguments": {
                "client": [
                    "Client",
                    "google.cloud.datastore.Client"
                ]
            }
        },
        "operations_hash_from_block": {
            "name": "operations_hash_from_block",
            "location": 122,
            "return": [
                "str",
                "list[]"
            ],
            "arguments": {
                "block": []
            }
        },
        "check_logs": {
            "name": "check_logs",
            "location": 131,
            "return": [
                "bool"
            ],
            "arguments": {
                "logs": [
                    "list[str]",
                    "List[str]",
                    "dict[str, str]",
                    "bool",
                    "Dict[str, str]"
                ],
                "pattern": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "check_logs_counts": {
            "name": "check_logs_counts",
            "location": 142,
            "return": [
                "int",
                "str",
                "List[bytes]",
                "Iterable[float]",
                "type"
            ],
            "arguments": {
                "logs": [
                    "list[str]",
                    "List[str]",
                    "dict[str, str]",
                    "bool",
                    "Dict[str, str]"
                ],
                "pattern": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "activate_alpha": {
            "name": "activate_alpha",
            "location": 154,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "client": [
                    "str",
                    "float"
                ],
                "parameters": [
                    "str",
                    "None",
                    "zerver.models.Client"
                ]
            }
        },
        "pprint": {
            "name": "pprint",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "json_data": [
                    "dict",
                    "dict[, ]",
                    "str",
                    "Dict[str, Union[str, bool]]",
                    "bytes",
                    "dict[str, typing.Union[str,bool]]"
                ]
            }
        },
        "rpc": {
            "name": "rpc",
            "location": 165,
            "return": [
                "List[int]",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "server": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "bool"
                ],
                "port": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "bool"
                ],
                "verb": [
                    "str",
                    "int"
                ],
                "path": [
                    "int",
                    "str",
                    "None",
                    "Optional[str]",
                    "bool"
                ],
                "data": [
                    "str",
                    "None",
                    "bool",
                    "bytes",
                    "Optional[dict]",
                    "Optional[Dict[str, Any]]",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]"
                ],
                "headers": [
                    "dict",
                    "str",
                    "None",
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "sign": {
            "name": "sign",
            "location": 200,
            "return": [
                "List[int]",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "dict[, ]",
                    "int",
                    "dict",
                    "dict[str, str]",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ],
                "secret_key": [
                    "bytes",
                    "str"
                ]
            }
        },
        "b58_key_to_hex": {
            "name": "b58_key_to_hex",
            "location": 220,
            "return": [
                "bytes",
                "List[str]",
                "str"
            ],
            "arguments": {
                "b58_key": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[Dict[str, Any]]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "b58_sig_to_hex": {
            "name": "b58_sig_to_hex",
            "location": 233,
            "return": [
                "str"
            ],
            "arguments": {
                "b58_sig": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "hex_sig_to_b58": {
            "name": "hex_sig_to_b58",
            "location": 246,
            "return": [
                "bool",
                "str",
                "bytes"
            ],
            "arguments": {
                "hexsig": [
                    "str",
                    "int",
                    "bytes",
                    "bool"
                ]
            }
        },
        "sign_operation": {
            "name": "sign_operation",
            "location": 269,
            "return": [
                "str",
                "int",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "encoded_operation": [
                    "str",
                    "int",
                    "bytes"
                ],
                "secret_key": [
                    "int",
                    "bytes",
                    "List[List[int]]",
                    "list[list[int]]",
                    "str",
                    "IO[bytes]",
                    "typing.IO"
                ]
            }
        },
        "retry.decorator_retry": {
            "name": "decorator_retry",
            "location": 28,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "hex_sig_to_b58.sha256": {
            "name": "sha256",
            "location": 255,
            "return": [
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "retry.decorator_retry.wrapper": {
            "name": "wrapper",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "tezos-master-lib-p2p-master/tests_python/tools/__init__.py": {}
}
{
    "tgeraser-master/build_package.py": {
        "clean_state": {
            "name": "clean_state",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "update_pip_and_pipenv": {
            "name": "update_pip_and_pipenv",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "clean": {
            "name": "clean",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "formatting": {
            "name": "formatting",
            "location": 59,
            "return": [
                "None",
                "Union[tuple,list]",
                "Dict[str,Any]",
                "str",
                "List[int]"
            ],
            "arguments": {}
        },
        "compile_py": {
            "name": "compile_py",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "lint": {
            "name": "lint",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "pytests": {
            "name": "pytests",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "config_pythonpath": {
            "name": "config_pythonpath",
            "location": 158,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {}
        },
        "dead_code": {
            "name": "dead_code",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "pip_check": {
            "name": "pip_check",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "mypy": {
            "name": "mypy",
            "location": 223,
            "return": [
                "None",
                "Union[tuple,list]",
                "List[int]",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {}
        },
        "detect_secrets": {
            "name": "detect_secrets",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "pin_dependencies": {
            "name": "pin_dependencies",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "package": {
            "name": "package",
            "location": 347,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "upload_package": {
            "name": "upload_package",
            "location": 361,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "echo": {
            "name": "echo",
            "location": 376,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "pin_dependencies.write_reqs": {
            "name": "write_reqs",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "command": [
                    "int",
                    "Callable[[KT], VT]",
                    "str"
                ]
            }
        }
    },
    "tgeraser-master/build_utils.py": {
        "check_is_aws": {
            "name": "check_is_aws",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "remove_state": {
            "name": "remove_state",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "what": [
                    "str",
                    "IO",
                    "bytes",
                    "Dict[str,Any]"
                ]
            }
        },
        "has_source_code_tree_changed": {
            "name": "has_source_code_tree_changed",
            "location": 96,
            "return": [
                "bool"
            ],
            "arguments": {
                "task_name": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Callable[[str],None]",
                    "Callable[str,None]"
                ],
                "expect_file": [
                    "str",
                    "None",
                    "bool",
                    "int"
                ]
            }
        },
        "skip_if_no_change": {
            "name": "skip_if_no_change",
            "location": 111,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "name": [
                    "bool",
                    "List[str]",
                    "str",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "expect_files": [
                    "bool",
                    "None",
                    "List[str]",
                    "str",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "execute_with_environment": {
            "name": "execute_with_environment",
            "location": 131,
            "return": [
                "Tuple[(bytes, bytes)]"
            ],
            "arguments": {
                "command": [
                    "str",
                    "Exception"
                ],
                "env": [
                    "str",
                    "Exception"
                ]
            }
        },
        "execute_get_text": {
            "name": "execute_get_text",
            "location": 146,
            "return": [
                "str",
                "int",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "command": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "timed": {
            "name": "timed",
            "location": 165,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {}
        },
        "BuildState.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "what": [
                    "str"
                ],
                "where": [
                    "float",
                    "int"
                ]
            }
        },
        "BuildState.remove_state": {
            "name": "remove_state",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuildState.has_source_code_tree_changed": {
            "name": "has_source_code_tree_changed",
            "location": 51,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "skip_if_no_change.real_decorator": {
            "name": "real_decorator",
            "location": 114,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "timed.real_decorator": {
            "name": "real_decorator",
            "location": 169,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "skip_if_no_change.real_decorator.wrapper": {
            "name": "wrapper",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "timed.real_decorator.wrapper": {
            "name": "wrapper",
            "location": 171,
            "return": [
                "None",
                "bool",
                "Optional[Union[str,Any]]"
            ],
            "arguments": {}
        }
    },
    "tgeraser-master/setup.py": {},
    "tgeraser-master/tgeraser/core.py": {
        "entry": {
            "name": "entry",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tgeraser-master/tgeraser/eraser.py": {
        "Eraser.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tgeraser-master/tgeraser/exceptions.py": {},
    "tgeraser-master/tgeraser/utils.py": {
        "chunks": {
            "name": "chunks",
            "location": 17,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "input_list": [
                    "int",
                    "list",
                    "List[int]"
                ],
                "num": [
                    "int",
                    "List",
                    "List[int]"
                ]
            }
        },
        "sprint": {
            "name": "sprint",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "string": [
                    "str",
                    "bool"
                ]
            }
        },
        "print_header": {
            "name": "print_header",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "title": [
                    "str",
                    "List[str]",
                    "Union[str, dict]"
                ]
            }
        },
        "get_env": {
            "name": "get_env",
            "location": 42,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "message": [
                    "str",
                    "int",
                    "Tuple",
                    "List",
                    "Union[int,bool]"
                ],
                "cast": [
                    "str",
                    "List[Optional[str]]",
                    "float"
                ]
            }
        },
        "cast_to_int": {
            "name": "cast_to_int",
            "location": 54,
            "return": [
                "int"
            ],
            "arguments": {
                "num": [
                    "str",
                    "Dict[str, Any]",
                    "Tuple[str, int]"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "get_credentials": {
            "name": "get_credentials",
            "location": 62,
            "return": [
                "dict"
            ],
            "arguments": {
                "args": []
            }
        },
        "get_credentials_from_yaml": {
            "name": "get_credentials_from_yaml",
            "location": 95,
            "return": [
                "dict"
            ],
            "arguments": {
                "path_to_file": [
                    "str"
                ],
                "path_to_directory": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "Optional[List[str]]"
                ],
                "session_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "create_credential_file": {
            "name": "create_credential_file",
            "location": 137,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "directory": [
                    "str",
                    "List[str]",
                    "int",
                    "Optional[List[str]]",
                    "Dict[str,Any]",
                    "bool",
                    "Set[str]"
                ]
            }
        },
        "get_credentials_from_json": {
            "name": "get_credentials_from_json",
            "location": 184,
            "return": [
                "dict"
            ],
            "arguments": {
                "json_str": [
                    "str"
                ],
                "path": [
                    "str",
                    "Dict[str,str]"
                ],
                "session_name": [
                    "str"
                ]
            }
        },
        "get_credentials_from_env": {
            "name": "get_credentials_from_env",
            "location": 217,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "check_credentials_dict": {
            "name": "check_credentials_dict",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "creds": [
                    "str",
                    "List[dict[int,float]]",
                    "Dict[str,Any]",
                    "bool",
                    "Iterator[str]",
                    "List[Dict[int,float]]",
                    "Callable[,object]"
                ]
            }
        }
    },
    "tgeraser-master/tgeraser/__init__.py": {},
    "tgeraser-master/tgeraser/__main__.py": {},
    "tgeraser-master/tgeraser/__version__.py": {}
}
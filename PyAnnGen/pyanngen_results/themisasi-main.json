{
    "themisasi-main/PlotCameraResponse.py": {},
    "themisasi-main/setup.py": {},
    "themisasi-main/archive/setup_spacepy.py": {},
    "themisasi-main/Examples/DascThemisFOV.py": {
        "main": {
            "name": "main",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "themisasi-main/Examples/DascThemisSlice.py": {
        "main": {
            "name": "main",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "themisasi-main/Examples/Projection.py": {},
    "themisasi-main/Examples/Themis2008.py": {},
    "themisasi-main/Examples/ThemisHistApr14T854.py": {},
    "themisasi-main/src/themisasi/download.py": {
        "cli": {
            "name": "cli",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "download": {
            "name": "download",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "treq": [
                    "bool",
                    "str",
                    "Optional[List[str]]",
                    "datetime"
                ],
                "site": [
                    "str",
                    "int"
                ],
                "odir": [
                    "str",
                    "pathlib.Path",
                    "List",
                    "Callable[str,str]",
                    "List[str]",
                    "Callable[[str],str]"
                ],
                "urls": [
                    "float",
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "overwrite": [
                    "bool",
                    "float",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "_urlgen": {
            "name": "_urlgen",
            "location": 154,
            "return": [
                "Generator[(str, Any, None)]"
            ],
            "arguments": {
                "site": [
                    "int",
                    "datetime.date"
                ],
                "start": [
                    "float",
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "end": [
                    "float",
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "url_stem": [
                    "int",
                    "datetime.date"
                ]
            }
        }
    },
    "themisasi-main/src/themisasi/fov.py": {
        "getimgind": {
            "name": "getimgind",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "imgs": [
                    "xarray.Dataset",
                    "bool",
                    "Sequence['cirq.Qid']",
                    "numpy.ndarray"
                ],
                "lla": [
                    "Type",
                    "Optional[numpy.ndarray]",
                    "Optional[str]"
                ],
                "az": [
                    "Optional[float]",
                    "Optional[numpy.ndarray]",
                    "Optional[int]"
                ],
                "el": [
                    "Optional[float]",
                    "Optional[int]",
                    "Optional[Union[astropy.units.quantity.Quantity, numpy.ndarray]]"
                ]
            }
        },
        "projected_coord": {
            "name": "projected_coord",
            "location": 49,
            "return": [
                "Tuple[(Any, Any, Any, Any, Any)]"
            ],
            "arguments": {
                "imgs": [
                    "numpy.ndarray",
                    "dict",
                    "Dict[str, Any]"
                ],
                "ind": [
                    "numpy.ndarray",
                    "dict",
                    "Dict[str, Any]"
                ],
                "lla": [
                    "int",
                    "str",
                    "Callable"
                ]
            }
        },
        "line2plane": {
            "name": "line2plane",
            "location": 62,
            "return": [
                "int",
                "float",
                "set"
            ],
            "arguments": {
                "cam": [
                    "bool",
                    "str"
                ]
            }
        },
        "sky2beam": {
            "name": "sky2beam",
            "location": 115,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "anglesep_deg": [
                    "int",
                    "Callable",
                    "str"
                ],
                "Ncol": [
                    "float",
                    "numpy.ndarray",
                    "str",
                    "xarray.Dataset"
                ]
            }
        },
        "mergefov": {
            "name": "mergefov",
            "location": 129,
            "return": [
                "Tuple[(_T0, _T1)]"
            ],
            "arguments": {
                "w0": [
                    "str",
                    "int",
                    "float",
                    "xarray.Dataset",
                    "Dict[str, str]"
                ],
                "w1": [
                    "str",
                    "int",
                    "float",
                    "xarray.Dataset",
                    "Dict[str, str]"
                ],
                "projalt": [
                    "int",
                    "str",
                    "bool",
                    "float"
                ],
                "method": [
                    "str",
                    "List[Dict[str, str]]",
                    "Mapping[str, Any]",
                    "float",
                    "Optional[Dict[str, Any]]",
                    "Optional[str]",
                    "bytes"
                ]
            }
        },
        "pixelmask": {
            "name": "pixelmask",
            "location": 197,
            "return": [
                "Dict[str, Any]",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "data": [
                    "xarray.Dataset",
                    "List[List[str]]"
                ],
                "method": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        }
    },
    "themisasi-main/src/themisasi/io.py": {
        "load": {
            "name": "load",
            "location": 34,
            "return": [
                "Any"
            ],
            "arguments": {
                "path": [],
                "site": [],
                "treq": [],
                "calfn": []
            }
        },
        "filetimes": {
            "name": "filetimes",
            "location": 94,
            "return": [
                "Any"
            ],
            "arguments": {
                "fn": []
            }
        },
        "_timeslice": {
            "name": "_timeslice",
            "location": 118,
            "return": [
                "Any"
            ],
            "arguments": {
                "path": [],
                "site": [],
                "treq": []
            }
        },
        "_sitefn": {
            "name": "_sitefn",
            "location": 182,
            "return": [
                "Tuple[(Any, pathlib.Path)]"
            ],
            "arguments": {
                "path": [],
                "site": [
                    "_T1@@"
                ],
                "treq": []
            }
        },
        "_timereq": {
            "name": "_timereq",
            "location": 247,
            "return": [
                "Union[(list, _datetime.datetime, _T0)]"
            ],
            "arguments": {
                "treq": [
                    "_T0@@"
                ]
            }
        },
        "_downsample": {
            "name": "_downsample",
            "location": 266,
            "return": [
                "Tuple[(Any, Any, Any, Any)]"
            ],
            "arguments": {
                "imgs": [],
                "az": [
                    "_T1@@"
                ],
                "el": [
                    "_T2@@"
                ],
                "x": [
                    "_T3@@"
                ],
                "y": [
                    "_T4@@"
                ]
            }
        },
        "loadcal_file": {
            "name": "loadcal_file",
            "location": 292,
            "return": [
                "Any"
            ],
            "arguments": {
                "fn": []
            }
        },
        "loadcal": {
            "name": "loadcal",
            "location": 400,
            "return": [
                "Any"
            ],
            "arguments": {
                "path": [],
                "site": [],
                "time": []
            }
        },
        "_findcal": {
            "name": "_findcal",
            "location": 433,
            "return": [
                "Any"
            ],
            "arguments": {
                "path": [],
                "site": [],
                "time": []
            }
        }
    },
    "themisasi-main/src/themisasi/pixels.py": {
        "cli": {
            "name": "cli",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "themisasi-main/src/themisasi/plots.py": {
        "jointazel": {
            "name": "jointazel",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "cam": [
                    "int",
                    "Callable",
                    "str"
                ],
                "ofn": [
                    "str",
                    "Sequence[str]",
                    "None",
                    "bool"
                ],
                "ttxt": [
                    "Text",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "plotazel": {
            "name": "plotazel",
            "location": 35,
            "return": [
                "Optional[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "numpy.ndarray",
                    "int"
                ],
                "ttxt": [
                    "Text",
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "plottimeseries": {
            "name": "plottimeseries",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "Dict",
                    "numpy.ndarray",
                    "Dict[str,str]",
                    "List",
                    "str"
                ],
                "time": [
                    "Dict",
                    "datetime.datetime",
                    "str",
                    "List[int]",
                    "List[float]",
                    "List[dict[str,Any]]",
                    "List[Dict[str,Any]]"
                ],
                "ttxt": [
                    "Text",
                    "str",
                    "float",
                    "datetime.datetime",
                    "bytes"
                ]
            }
        },
        "overlayrowcol": {
            "name": "overlayrowcol",
            "location": 75,
            "return": [
                "Optional[_T0]"
            ],
            "arguments": {
                "ax": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ],
                "rows": [
                    "Optional[numpy.ndarray]",
                    "numpy.ndarray",
                    "Optional[Dict]",
                    "Optional[float]"
                ],
                "cols": [
                    "int",
                    "Optional[int]",
                    "str",
                    "None",
                    "Union[int,None]"
                ],
                "color": [
                    "str",
                    "Dict[str,Any]",
                    "None",
                    "int"
                ],
                "label": [
                    "str",
                    "Dict[str,Any]",
                    "None",
                    "int"
                ]
            }
        },
        "plotasi": {
            "name": "plotasi",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "str",
                    "Dict[str,Any]"
                ],
                "ofn": [
                    "List",
                    "None",
                    "Dict[str,Any]",
                    "str",
                    "List[int]"
                ]
            }
        },
        "pcolormesh_nan": {
            "name": "pcolormesh_nan",
            "location": 141,
            "return": [
                "bool",
                "numpy.ndarray"
            ],
            "arguments": {
                "x": [
                    "numpy.ndarray",
                    "int",
                    "datetime.timedelta"
                ],
                "y": [
                    "Tuple[Union[ndarray,ndarray,ndarray]]",
                    "numpy.ndarray",
                    "Tuple[ndarray,ndarray,ndarray]",
                    "nevergrad.common.Callable[[numpy.ndarray],numpy.ndarray]"
                ],
                "c": [
                    "str",
                    "bool",
                    "numpy.ndarray"
                ],
                "cmap": [
                    "numpy.ndarray",
                    "str",
                    "None",
                    "bool"
                ],
                "axis": [
                    "Optional[Dict[str,numpy.ma.MaskedArray]]",
                    "None",
                    "Optional[Tuple]",
                    "int",
                    "Dict[str,numpy.ma.MaskedArray]",
                    "Optional[numpy.ndarray]",
                    "Tuple"
                ]
            }
        }
    },
    "themisasi-main/src/themisasi/projections.py": {
        "asi_projection": {
            "name": "asi_projection",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "dat": [
                    "str",
                    "Union[numpy.ndarray,astropy.units.quantity.Quantity]",
                    "float",
                    "Iterable[str]",
                    "Optional[numpy.ndarray]"
                ],
                "projalt_m": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Optional[int]",
                    "float",
                    "Optional[float]",
                    "bool"
                ],
                "min_el": [
                    "str",
                    "int",
                    "Callable"
                ],
                "ofn": [
                    "str",
                    "None",
                    "Iterable[str]",
                    "IO",
                    "Path",
                    "Tuple[float]"
                ]
            }
        },
        "asi_radec": {
            "name": "asi_radec",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "dat": [
                    "str",
                    "xarray.Dataset",
                    "bool",
                    "OrderedDict",
                    "Dict[str,Any]"
                ],
                "min_el": [
                    "float",
                    "int",
                    "Callable",
                    "str"
                ],
                "ofn": [
                    "str",
                    "None",
                    "Sequence[str]",
                    "Union[str,pathlib.Path]"
                ]
            }
        }
    },
    "themisasi-main/src/themisasi/radec.py": {
        "cli": {
            "name": "cli",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "themisasi-main/src/themisasi/video.py": {
        "cli": {
            "name": "cli",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "themisasi-main/src/themisasi/__init__.py": {},
    "themisasi-main/src/themisasi/tests/test_download.py": {
        "test_single_time_site": {
            "name": "test_single_time_site",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_time_range": {
            "name": "test_time_range",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_multi_site": {
            "name": "test_multi_site",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_nonexisting": {
            "name": "test_nonexisting",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "time": [],
                "site": []
            }
        }
    },
    "themisasi-main/src/themisasi/tests/test_load.py": {
        "test_missing_file": {
            "name": "test_missing_file",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "pathlib.Path",
                    "str",
                    "Dict[str, cerulean.Path]"
                ]
            }
        },
        "test_filename_simple": {
            "name": "test_filename_simple",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_filename_calname": {
            "name": "test_filename_calname",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load_filename": {
            "name": "test_load_filename",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load_site_time": {
            "name": "test_load_site_time",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "site": [
                    "int",
                    "str"
                ],
                "time": [
                    "int",
                    "float",
                    "pathlib.Path"
                ]
            }
        },
        "test_load_site_timerange": {
            "name": "test_load_site_timerange",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "site": [
                    "str",
                    "Callable",
                    "Sequence[Any]"
                ],
                "treq": [
                    "str",
                    "Callable",
                    "Sequence[Any]"
                ]
            }
        },
        "test_bad_time": {
            "name": "test_bad_time",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str",
                    "pathlib.Path"
                ],
                "val": [
                    "str",
                    "pathlib.Path"
                ],
                "err": [
                    "str",
                    "int",
                    "Optional[List[str]]",
                    "List[str]",
                    "bool",
                    "None"
                ]
            }
        },
        "test_good_time": {
            "name": "test_good_time",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_autoload_cal": {
            "name": "test_autoload_cal",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_calread_idl": {
            "name": "test_calread_idl",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_calread_cdf": {
            "name": "test_calread_cdf",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_calread_sitedate": {
            "name": "test_calread_sitedate",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "themisasi-main/src/themisasi/tests/test_scripts.py": {
        "test_video": {
            "name": "test_video",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pixels_azel": {
            "name": "test_pixels_azel",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "themisasi-main/src/themisasi/tests/__init__.py": {}
}
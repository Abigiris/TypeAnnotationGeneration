{
    "threema-msgapi-sdk-python-master/setup.py": {
        "get_version": {
            "name": "get_version",
            "location": 11,
            "return": [
                "str",
                "bool",
                "dict"
            ],
            "arguments": {}
        },
        "read": {
            "name": "read",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "file": [
                    "str",
                    "IO",
                    "BinaryIO"
                ]
            }
        }
    },
    "threema-msgapi-sdk-python-master/examples/callback.py": {
        "main": {
            "name": "main",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "threema-msgapi-sdk-python-master/examples/e2e.py": {},
    "threema-msgapi-sdk-python-master/examples/e2e_blocking.py": {
        "send": {
            "name": "send",
            "location": 21,
            "return": [],
            "arguments": {
                "connection": []
            }
        },
        "send_cached_key": {
            "name": "send_cached_key",
            "location": 37,
            "return": [],
            "arguments": {
                "connection": []
            }
        },
        "send_cached_key_file": {
            "name": "send_cached_key_file",
            "location": 51,
            "return": [],
            "arguments": {
                "connection": []
            }
        },
        "send_image": {
            "name": "send_image",
            "location": 65,
            "return": [],
            "arguments": {
                "connection": []
            }
        },
        "send_video": {
            "name": "send_video",
            "location": 81,
            "return": [],
            "arguments": {
                "connection": []
            }
        },
        "send_file": {
            "name": "send_file",
            "location": 99,
            "return": [],
            "arguments": {
                "connection": []
            }
        },
        "send_file_with_thumbnail": {
            "name": "send_file_with_thumbnail",
            "location": 115,
            "return": [],
            "arguments": {
                "connection": []
            }
        },
        "main": {
            "name": "main",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "threema-msgapi-sdk-python-master/examples/lookup.py": {},
    "threema-msgapi-sdk-python-master/examples/lookup_blocking.py": {
        "main": {
            "name": "main",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "threema-msgapi-sdk-python-master/examples/simple.py": {},
    "threema-msgapi-sdk-python-master/examples/simple_blocking.py": {
        "send_via_id": {
            "name": "send_via_id",
            "location": 16,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "connection": [
                    "str",
                    "float",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "send_via_email": {
            "name": "send_via_email",
            "location": 28,
            "return": [
                "str",
                "bool",
                "deque",
                "Dict[str, int]",
                "int"
            ],
            "arguments": {
                "connection": [
                    "str",
                    "int",
                    "List[str]",
                    "list[str]",
                    "IO",
                    "typing.IO"
                ]
            }
        },
        "send_via_phone": {
            "name": "send_via_phone",
            "location": 40,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "connection": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "threema-msgapi-sdk-python-master/tests/conftest.py": {
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": []
            }
        },
        "pytest_report_header": {
            "name": "pytest_report_header",
            "location": 275,
            "return": [
                "str"
            ],
            "arguments": {
                "config": [
                    "typing.Sequence[]",
                    "Sequence",
                    "asyncio.AbstractEventLoop",
                    "aiohttp.ClientSession"
                ]
            }
        },
        "values_plugin": {
            "name": "values_plugin",
            "location": 279,
            "return": [
                "Dict[(str, Dict[(str, Union[(str, Set[Tuple[(str, str)]])])])]"
            ],
            "arguments": {}
        },
        "msgapi_plugin": {
            "name": "msgapi_plugin",
            "location": 288,
            "return": [
                "Dict[(str, Dict[(str, str)])]"
            ],
            "arguments": {}
        },
        "pytest_configure": {
            "name": "pytest_configure",
            "location": 309,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "default_event_loop": {
            "name": "default_event_loop",
            "location": 314,
            "return": [
                "typing.Text",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "request": [
                    "tuple",
                    "None",
                    "bytes",
                    "aiohttp.ClientSession",
                    "tuple[]"
                ],
                "config": [
                    "asyncio.AbstractEventLoop",
                    "aiohttp.ClientSession",
                    "Dict[str, Any]"
                ]
            }
        },
        "unused_tcp_port": {
            "name": "unused_tcp_port",
            "location": 326,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "identity": {
            "name": "identity",
            "location": 335,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {}
        },
        "server": {
            "name": "server",
            "location": 340,
            "return": [
                "Server",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "raw_message": {
            "name": "raw_message",
            "location": 345,
            "return": [
                "RawMessage",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "event_loop": {
            "name": "event_loop",
            "location": 350,
            "return": [
                "Mapping[str, Any]",
                "int",
                "aiohttp.web.Application",
                "tornado.web.Application",
                "Dict[str, Any]"
            ],
            "arguments": {
                "request": [
                    "set[str]",
                    "str",
                    "Set[str]",
                    "typing.Callable[, ]",
                    "Callable",
                    "aiohttp.web.Request"
                ]
            }
        },
        "api_server_port": {
            "name": "api_server_port",
            "location": 373,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "api_server": {
            "name": "api_server",
            "location": 378,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "request": [
                    "bytes"
                ],
                "event_loop": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "api_server_port": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "server": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "mock_url": {
            "name": "mock_url",
            "location": 403,
            "return": [
                "str"
            ],
            "arguments": {
                "api_server_port": [
                    "bool",
                    "str",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "connection": {
            "name": "connection",
            "location": 411,
            "return": [
                "int",
                "str",
                "Callable",
                "list[str]",
                "dict[str, list[typing.Any]]",
                "tuple[typing.Union[str,str,str,str,str,str,str,str]]"
            ],
            "arguments": {
                "request": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Tuple[int, int]",
                    "None",
                    "tuple[typing.Union[int,int]]"
                ],
                "event_loop": [
                    "bool",
                    "None",
                    "Optional[bool]",
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]",
                    "typing.Mapping",
                    "Mapping[str, Any]",
                    "list[str]",
                    "Optional[List[Any]]",
                    "List[str]"
                ],
                "api_server": [
                    "bool",
                    "None",
                    "Optional[bool]",
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]",
                    "typing.Mapping",
                    "Mapping[str, Any]",
                    "list[str]",
                    "Optional[List[Any]]",
                    "List[str]"
                ],
                "mock_url": [
                    "bool",
                    "None",
                    "Optional[bool]",
                    "list[dict[str, typing.Any]]",
                    "List[Dict[str, Any]]",
                    "typing.Mapping",
                    "Mapping[str, Any]",
                    "list[str]",
                    "Optional[List[Any]]",
                    "List[str]"
                ]
            }
        },
        "connection_blocking": {
            "name": "connection_blocking",
            "location": 434,
            "return": [
                "Mapping",
                "str",
                "list[str]",
                "int",
                "dict[str, list[typing.Any]]",
                "tuple[typing.Union[str,str,str,str,str,str,str,str]]"
            ],
            "arguments": {
                "request": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "event_loop": [
                    "bool",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "api_server": [
                    "bool",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ],
                "mock_url": [
                    "bool",
                    "List[Dict[str, Any]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "invalid_connection": {
            "name": "invalid_connection",
            "location": 458,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "connection": [
                    "List[str]",
                    "str",
                    "list[str]"
                ]
            }
        },
        "nocredit_connection": {
            "name": "nocredit_connection",
            "location": 465,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "connection": [
                    "List[str]",
                    "str",
                    "list[str]"
                ]
            }
        },
        "blob": {
            "name": "blob",
            "location": 472,
            "return": [
                "bytes",
                "int",
                "bytearray",
                "str"
            ],
            "arguments": {}
        },
        "blob_id": {
            "name": "blob_id",
            "location": 477,
            "return": [
                "str",
                "dict",
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "event_loop": [
                    "str",
                    "dict[str, str]",
                    "asyncio.AbstractEventLoop",
                    "Dict[str, str]"
                ],
                "connection": [
                    "List[dict]",
                    "str",
                    "dict"
                ],
                "blob": [
                    "List[dict]",
                    "str",
                    "list[dict[, ]]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "cli": {
            "name": "cli",
            "location": 483,
            "return": [
                "str",
                "Tuple[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "api_server": [
                    "bool",
                    "list[str]",
                    "List[str]",
                    "int"
                ],
                "api_server_port": [
                    "bool",
                    "list[str]",
                    "List[str]",
                    "int"
                ],
                "event_loop": [
                    "bool",
                    "list[str]",
                    "List[str]",
                    "int"
                ]
            }
        },
        "private_key_file": {
            "name": "private_key_file",
            "location": 545,
            "return": [
                "str"
            ],
            "arguments": {
                "tmpdir_factory": [
                    "str",
                    "int",
                    "List[Optional[str]]",
                    "list[typing.Optional[str]]",
                    "IO[str]",
                    "typing.IO"
                ]
            }
        },
        "public_key_file": {
            "name": "public_key_file",
            "location": 552,
            "return": [
                "str"
            ],
            "arguments": {
                "tmpdir_factory": [
                    "str",
                    "int",
                    "List[Optional[str]]",
                    "list[typing.Optional[str]]",
                    "IO[str]",
                    "typing.IO"
                ]
            }
        },
        "callback": {
            "name": "callback",
            "location": 562,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "event_loop": [
                    "dict",
                    "dict[, ]"
                ],
                "connection": [
                    "str"
                ]
            }
        },
        "callback_server_port": {
            "name": "callback_server_port",
            "location": 574,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "callback_server": {
            "name": "callback_server",
            "location": 579,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "request": [
                    "bytes"
                ],
                "event_loop": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "connection": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "callback": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "callback_server_port": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "callback_client": {
            "name": "callback_client",
            "location": 608,
            "return": [
                "dict",
                "int",
                "Dict[str, Any]",
                "str",
                "Exception",
                "float"
            ],
            "arguments": {
                "request": [],
                "event_loop": [
                    "bool"
                ],
                "callback_server": [
                    "bool"
                ]
            }
        },
        "callback_send": {
            "name": "callback_send",
            "location": 625,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "callback_client": [
                    "bool",
                    "str",
                    "List[Tuple[int, str]]",
                    "list[tuple[typing.Union[int,str]]]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "callback_server_port": [
                    "bool",
                    "str",
                    "List[Tuple[int, str]]",
                    "list[tuple[typing.Union[int,str]]]",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "connection": [
                    "bool",
                    "str",
                    "List[Tuple[int, str]]",
                    "list[tuple[typing.Union[int,str]]]",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "callback_receive": {
            "name": "callback_receive",
            "location": 657,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "event_loop": [
                    "str"
                ],
                "callback": [
                    "str"
                ],
                "callback_server": [
                    "str"
                ]
            }
        },
        "RawMessage.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "Optional[Iterable[Any]]",
                    "typing.Iterable[typing.Any]",
                    "bool",
                    "str",
                    "None",
                    "Dict[str, Any]"
                ],
                "nonce": [
                    "int",
                    "None",
                    "float",
                    "bool"
                ],
                "message": [
                    "int",
                    "None",
                    "float",
                    "bool"
                ]
            }
        },
        "Server.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "event_loop.fin": {
            "name": "fin",
            "location": 364,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "api_server.fin": {
            "name": "fin",
            "location": 392,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "connection.fin": {
            "name": "fin",
            "location": 426,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "connection_blocking.fin": {
            "name": "fin",
            "location": 450,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "callback_server.fin": {
            "name": "fin",
            "location": 597,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "callback_client.fin": {
            "name": "fin",
            "location": 617,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "threema-msgapi-sdk-python-master/tests/test_api.py": {},
    "threema-msgapi-sdk-python-master/tests/test_base.py": {
        "TestCrypto.test_incorrect_nonce": {
            "name": "test_incorrect_nonce",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrypto.test_incorrect_ciphertext": {
            "name": "test_incorrect_ciphertext",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrypto.test_valid": {
            "name": "test_valid",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "threema-msgapi-sdk-python-master/tests/test_blocking_api.py": {
        "test_lookup_id_by_phone": {
            "name": "test_lookup_id_by_phone",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "connection_blocking": [
                    "int"
                ]
            }
        },
        "test_lookup_id_by_phone_hash": {
            "name": "test_lookup_id_by_phone_hash",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "connection_blocking": [
                    "int"
                ]
            }
        },
        "test_lookup_public_key": {
            "name": "test_lookup_public_key",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "connection_blocking": [
                    "int"
                ],
                "server": [
                    "bytes",
                    "str"
                ]
            }
        },
        "test_lookup_reception_capabilities": {
            "name": "test_lookup_reception_capabilities",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "connection_blocking": [
                    "Type[Any]"
                ]
            }
        },
        "test_send_e2e_text_message": {
            "name": "test_send_e2e_text_message",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "connection_blocking": []
            }
        },
        "test_send_simple_text_message": {
            "name": "test_send_simple_text_message",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "connection_blocking": [
                    "int"
                ]
            }
        }
    },
    "threema-msgapi-sdk-python-master/tests/test_callback.py": {},
    "threema-msgapi-sdk-python-master/tests/test_cli.py": {},
    "threema-msgapi-sdk-python-master/threema/__init__.py": {},
    "threema-msgapi-sdk-python-master/threema/gateway/e2e.py": {
        "_pk_encrypt": {
            "name": "_pk_encrypt",
            "location": 64,
            "return": [],
            "arguments": {
                "key_pair": [
                    "Tuple[(threema.gateway.key.Key, threema.gateway.key.Key)]"
                ],
                "data": [
                    "bytes"
                ],
                "nonce": [
                    "bytes"
                ]
            }
        },
        "_pk_decrypt": {
            "name": "_pk_decrypt",
            "location": 86,
            "return": [],
            "arguments": {
                "key_pair": [
                    "Tuple[(threema.gateway.key.Key, threema.gateway.key.Key)]"
                ],
                "nonce": [
                    "bytes"
                ],
                "data": [
                    "bytes"
                ]
            }
        },
        "_sk_encrypt": {
            "name": "_sk_encrypt",
            "location": 107,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "key": [],
                "data": [],
                "nonce": [
                    "None"
                ]
            }
        },
        "_sk_decrypt": {
            "name": "_sk_decrypt",
            "location": 129,
            "return": [],
            "arguments": {
                "key": [],
                "nonce": [],
                "data": []
            }
        },
        "_validate_hmac": {
            "name": "_validate_hmac",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "encoded_secret": [],
                "expected_mac": [],
                "response": []
            }
        },
        "create_application": {
            "name": "create_application",
            "location": 232,
            "return": [],
            "arguments": {
                "connection": []
            }
        },
        "add_callback_route": {
            "name": "add_callback_route",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "connection": [],
                "application": [],
                "message_handler": [],
                "path": [
                    "typing.Text"
                ],
                "receive_handler": [
                    "None"
                ]
            }
        },
        "Message.get_message_class": {
            "name": "get_message_class",
            "location": 308,
            "return": [],
            "arguments": {
                "cls": [
                    "builtins.type[Message]"
                ],
                "type_": []
            }
        },
        "Message.__init__": {
            "name": "__init__",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [],
                "type_": [],
                "key": [
                    "None"
                ],
                "key_file": [
                    "None"
                ],
                "to_id": [
                    "None"
                ],
                "from_data": [
                    "None"
                ]
            }
        },
        "Message.type": {
            "name": "type",
            "location": 378,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message.key": {
            "name": "key",
            "location": 398,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Message.key_file": {
            "name": "key_file",
            "location": 413,
            "return": [],
            "arguments": {
                "self": [],
                "key_file": []
            }
        },
        "Message.decrypt": {
            "name": "decrypt",
            "location": 614,
            "return": [],
            "arguments": {
                "cls": [
                    "builtins.type[Message]"
                ],
                "nonce": [],
                "data": [],
                "key_pair": []
            }
        },
        "DeliveryReceipt.__init__": {
            "name": "__init__",
            "location": 664,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [],
                "receipt_type": [
                    "None"
                ],
                "message_ids": [
                    "None"
                ],
                "from_data": []
            }
        },
        "DeliveryReceipt.__str__": {
            "name": "__str__",
            "location": 680,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextMessage.__init__": {
            "name": "__init__",
            "location": 749,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [],
                "text": [
                    "None"
                ],
                "from_data": []
            }
        },
        "TextMessage.__str__": {
            "name": "__str__",
            "location": 759,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ImageMessage.__init__": {
            "name": "__init__",
            "location": 825,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [],
                "image": [
                    "None"
                ],
                "mime_type": [
                    "None"
                ],
                "image_path": [
                    "None"
                ],
                "from_data": []
            }
        },
        "ImageMessage.image": {
            "name": "image",
            "location": 847,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ImageMessage.mime_type": {
            "name": "mime_type",
            "location": 858,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ImageMessage._read_image": {
            "name": "_read_image",
            "location": 865,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VideoMessage.__init__": {
            "name": "__init__",
            "location": 961,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [],
                "duration": [
                    "int"
                ],
                "video": [
                    "None"
                ],
                "video_path": [
                    "None"
                ],
                "thumbnail_content": [
                    "None"
                ],
                "thumbnail_path": [
                    "None"
                ],
                "from_data": []
            }
        },
        "VideoMessage.video": {
            "name": "video",
            "location": 990,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VideoMessage.thumbnail_content": {
            "name": "thumbnail_content",
            "location": 1001,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VideoMessage._read_video": {
            "name": "_read_video",
            "location": 1011,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VideoMessage._read_thumbnail": {
            "name": "_read_thumbnail",
            "location": 1023,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileMessage.__init__": {
            "name": "__init__",
            "location": 1151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [],
                "file_content": [
                    "None"
                ],
                "mime_type": [
                    "None"
                ],
                "file_name": [
                    "typing.Text"
                ],
                "file_path": [
                    "None"
                ],
                "thumbnail_content": [
                    "None"
                ],
                "thumbnail_path": [
                    "None"
                ],
                "from_data": []
            }
        },
        "FileMessage.file_content": {
            "name": "file_content",
            "location": 1184,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileMessage.mime_type": {
            "name": "mime_type",
            "location": 1195,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileMessage.thumbnail_content": {
            "name": "thumbnail_content",
            "location": 1203,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileMessage._read_file": {
            "name": "_read_file",
            "location": 1213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileMessage._read_thumbnail": {
            "name": "_read_thumbnail",
            "location": 1232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "threema-msgapi-sdk-python-master/threema/gateway/exception.py": {
        "CallbackError.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "int",
                    "str",
                    "bool"
                ],
                "reason": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "CallbackError.__str__": {
            "name": "__str__",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GatewayServerError.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "GatewayServerError.__str__": {
            "name": "__str__",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnsupportedMimeTypeError.__init__": {
            "name": "__init__",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mime_type": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "UnsupportedMimeTypeError.__str__": {
            "name": "__str__",
            "location": 172,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MissingCapabilityError.__init__": {
            "name": "__init__",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "missing_capabilities": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "MissingCapabilityError.__str__": {
            "name": "__str__",
            "location": 183,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "threema-msgapi-sdk-python-master/threema/gateway/key.py": {
        "HMAC.hash": {
            "name": "hash",
            "location": 32,
            "return": [
                "hmac.HMAC"
            ],
            "arguments": {
                "message": [
                    "str",
                    "bytes",
                    "int"
                ],
                "hash_type": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "Key.decode": {
            "name": "decode",
            "location": 60,
            "return": [
                "str",
                "dict[str, str]",
                "int",
                "Optional[str]",
                "list[int]"
            ],
            "arguments": {
                "encoded_key": [
                    "str"
                ],
                "expected_type": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Key.encode": {
            "name": "encode",
            "location": 96,
            "return": [
                "str"
            ],
            "arguments": {
                "libnacl_key": [
                    "bytes",
                    "str",
                    "list[dict[, ]]",
                    "Union[str, bytes]",
                    "List[Dict]"
                ]
            }
        },
        "Key.generate_pair": {
            "name": "generate_pair",
            "location": 121,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {}
        },
        "Key.generate_secret_key": {
            "name": "generate_secret_key",
            "location": 134,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {}
        },
        "Key.derive_public": {
            "name": "derive_public",
            "location": 145,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "private_key": [
                    "int",
                    "bytes",
                    "Optional[bytes]",
                    "None"
                ]
            }
        }
    },
    "threema-msgapi-sdk-python-master/threema/gateway/memoization.py": {
        "make_key": {
            "name": "make_key",
            "location": 53,
            "return": [
                "Union[(HashedList, str)]"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "kwargs_mark": [
                    "tuple[]",
                    "str",
                    "int",
                    "Iterable[Sequence[str]]"
                ]
            }
        },
        "make_cache_value": {
            "name": "make_cache_value",
            "location": 70,
            "return": [
                "Tuple[(_T0, Any)]"
            ],
            "arguments": {
                "result": [
                    "_T0"
                ],
                "ttl": [
                    "dict[str, bool]",
                    "Dict[str, bool]",
                    "tuple[str]",
                    "Dict[str, Any]",
                    "list[dict[, ]]",
                    "Tuple[str]",
                    "List[Dict]"
                ]
            }
        },
        "is_cache_value_valid": {
            "name": "is_cache_value_valid",
            "location": 74,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "str",
                    "list[]",
                    "list",
                    "tuple[float]",
                    "Tuple[float]",
                    "Optional[str]"
                ]
            }
        },
        "retrieve_result_from_cache_value": {
            "name": "retrieve_result_from_cache_value",
            "location": 78,
            "return": [
                "str",
                "List[str]",
                "list",
                "float",
                "bool"
            ],
            "arguments": {
                "value": [
                    "str",
                    "bool",
                    "dict",
                    "T"
                ]
            }
        },
        "HashedList.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tup": [
                    "str",
                    "bool",
                    "dict",
                    "dict[, ]",
                    "Sequence",
                    "typing.Sequence[]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "hash_value": [
                    "bool"
                ]
            }
        },
        "HashedList.__hash__": {
            "name": "__hash__",
            "location": 49,
            "return": [
                "int",
                "Optional[int]",
                "bool",
                "Optional[float]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "threema-msgapi-sdk-python-master/threema/gateway/simple.py": {
        "Message.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "str",
                    "None",
                    "int",
                    "static_frame.core.util.IndexInitializer",
                    "Optional[str]"
                ],
                "to_id": [
                    "str",
                    "None",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "TextMessage.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "phone": [
                    "str",
                    "None",
                    "Sequence[Dict[str, str]]",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "typing.Sequence[dict[str, str]]",
                    "dict[str, typing.Any]",
                    "int"
                ],
                "email": [
                    "str",
                    "None",
                    "Sequence[Dict[str, str]]",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "typing.Sequence[dict[str, str]]",
                    "dict[str, typing.Any]",
                    "int"
                ],
                "text": [
                    "str",
                    "None",
                    "Sequence[Dict[str, str]]",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "typing.Sequence[dict[str, str]]",
                    "dict[str, typing.Any]",
                    "int"
                ]
            }
        }
    },
    "threema-msgapi-sdk-python-master/threema/gateway/util.py": {
        "_convert_level": {
            "name": "_convert_level",
            "location": 48,
            "return": [
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {
                "logging_level": [
                    "bool",
                    "float",
                    "int",
                    "dict[, ]",
                    "Optional[Dict]",
                    "None",
                    "OrderedDict",
                    "typing.OrderedDict"
                ]
            }
        },
        "enable_logging": {
            "name": "enable_logging",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "level": [
                    "int",
                    "Optional[int]",
                    "float"
                ],
                "asyncio_level": [
                    "float",
                    "int",
                    "None",
                    "str"
                ],
                "aiohttp_level": [
                    "float",
                    "int",
                    "None",
                    "str"
                ]
            }
        },
        "disable_logging": {
            "name": "disable_logging",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_logger": {
            "name": "get_logger",
            "location": 100,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "name": [
                    "str",
                    "None",
                    "List[str]",
                    "Optional[str]",
                    "list[str]"
                ],
                "level": [
                    "int",
                    "str"
                ]
            }
        },
        "read_key_or_key_file": {
            "name": "read_key_or_key_file",
            "location": 117,
            "return": [
                "dict",
                "type",
                "Optional[int]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "key": [
                    "Dict[str, Any]",
                    "dict"
                ],
                "expected_type": [
                    "str",
                    "bool",
                    "dict",
                    "dict[, ]",
                    "Tuple[object]",
                    "tuple[_]"
                ]
            }
        },
        "randint": {
            "name": "randint",
            "location": 157,
            "return": [
                "str",
                "int",
                "asyncio.AbstractEventLoop"
            ],
            "arguments": {
                "a": [
                    "int",
                    "Sequence[int]",
                    "typing.Sequence[int]",
                    "Sequence[float]",
                    "typing.Sequence[float]"
                ],
                "b": [
                    "int",
                    "Sequence[int]",
                    "typing.Sequence[int]",
                    "Sequence[float]",
                    "typing.Sequence[float]"
                ]
            }
        },
        "async_ttl_cache": {
            "name": "async_ttl_cache",
            "location": 316,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "ttl": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "aio_run": {
            "name": "aio_run",
            "location": 381,
            "return": [
                "Callable"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "aio_run_proxy": {
            "name": "aio_run_proxy",
            "location": 409,
            "return": [
                "_AioRunProxyDecoratorFactory",
                "bool",
                "int",
                "str",
                "Type",
                "float"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "None",
                    "str",
                    "bool",
                    "tuple[str]",
                    "Optional[bool]",
                    "Tuple[str]",
                    "T"
                ]
            }
        },
        "ViewIOReader.__init__": {
            "name": "__init__",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bytes_or_view": [
                    "bytes",
                    "int",
                    "str",
                    "Optional[int]",
                    "None",
                    "List[bytes]",
                    "list[bytes]"
                ]
            }
        },
        "ViewIOReader.fileno": {
            "name": "fileno",
            "location": 179,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "ViewIOReader.isatty": {
            "name": "isatty",
            "location": 182,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ViewIOReader.readable": {
            "name": "readable",
            "location": 185,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ViewIOReader.readline": {
            "name": "readline",
            "location": 188,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "ViewIOReader.readlines": {
            "name": "readlines",
            "location": 191,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "hint": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "ViewIOReader.seek": {
            "name": "seek",
            "location": 194,
            "return": [
                "int",
                "float",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "int",
                    "Optional[int]",
                    "str"
                ],
                "whence": [
                    "int",
                    "Tuple[int, int, int, int]",
                    "Dict[str, float]",
                    "List[List[int]]",
                    "Sequence[Tuple[float, float]]",
                    "dict",
                    "float",
                    "str"
                ]
            }
        },
        "ViewIOReader.seekable": {
            "name": "seekable",
            "location": 208,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ViewIOReader.tell": {
            "name": "tell",
            "location": 211,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ViewIOReader.writable": {
            "name": "writable",
            "location": 214,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ViewIOReader.read": {
            "name": "read",
            "location": 219,
            "return": [
                "str",
                "Dict[str, Any]",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ViewIOReader.readall": {
            "name": "readall",
            "location": 228,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ViewIOReader.readinto": {
            "name": "readinto",
            "location": 231,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "b": [
                    "list[T]",
                    "list[]",
                    "List[T]",
                    "float",
                    "bool",
                    "list",
                    "dict"
                ]
            }
        },
        "ViewIOReader.__len__": {
            "name": "__len__",
            "location": 238,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ViewIOReader.readexactly": {
            "name": "readexactly",
            "location": 241,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "bytes",
                    "str"
                ]
            }
        },
        "ViewIOWriter.__init__": {
            "name": "__init__",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bytes_or_views": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "ViewIOWriter.fileno": {
            "name": "fileno",
            "location": 261,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "ViewIOWriter.isatty": {
            "name": "isatty",
            "location": 264,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ViewIOWriter.readable": {
            "name": "readable",
            "location": 267,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ViewIOWriter.seekable": {
            "name": "seekable",
            "location": 270,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ViewIOWriter.writable": {
            "name": "writable",
            "location": 273,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ViewIOWriter.write": {
            "name": "write",
            "location": 278,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "bytes_or_view": [
                    "bytes",
                    "int",
                    "Optional[int]",
                    "Optional[Union[float, int]]",
                    "None",
                    "List[float]",
                    "float",
                    "list[float]"
                ]
            }
        },
        "ViewIOWriter.writelines": {
            "name": "writelines",
            "location": 289,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "list[typing.AnyStr]",
                    "str",
                    "List[AnyStr]",
                    "list[str]",
                    "List[str]",
                    "Iterable[str]",
                    "Iterable[Sequence[str]]"
                ]
            }
        },
        "ViewIOWriter.__radd__": {
            "name": "__radd__",
            "location": 294,
            "return": [
                "ViewIOWriter"
            ],
            "arguments": {
                "self": [
                    "_TViewIOWriter"
                ],
                "other": [
                    "dict",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "ViewIOWriter.__len__": {
            "name": "__len__",
            "location": 298,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ViewIOWriter.getvalue": {
            "name": "getvalue",
            "location": 301,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "ViewIOWriter.extend": {
            "name": "extend",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "list[str]",
                    "int",
                    "dict",
                    "float",
                    "dict[, ]"
                ]
            }
        },
        "ViewIOWriter.writeexactly": {
            "name": "writeexactly",
            "location": 309,
            "return": [
                "str",
                "bytearray",
                "bytes",
                "int"
            ],
            "arguments": {
                "self": [],
                "bytes_or_view": [
                    "bytes",
                    "int",
                    "typing.Iterable[_]",
                    "Iterable[T]",
                    "io.BufferedReader"
                ]
            }
        },
        "async_ttl_cache._decorator": {
            "name": "_decorator",
            "location": 328,
            "return": [
                "str",
                "List[dict]",
                "float"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "IO[bytes]"
                ]
            }
        },
        "aio_run._wrapper": {
            "name": "_wrapper",
            "location": 403,
            "return": [
                "float",
                "str",
                "int",
                "List[str]",
                "bool"
            ],
            "arguments": {}
        },
        "AioRunMixin.__init__": {
            "name": "__init__",
            "location": 492,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "blocking": [
                    "bool",
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "AioRunMixin.unwrap": {
            "name": "unwrap",
            "location": 496,
            "return": [
                "AioRunMixin",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "async_ttl_cache._decorator.cache_clear": {
            "name": "cache_clear",
            "location": 358,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "async_ttl_cache._decorator.cache_info": {
            "name": "cache_info",
            "location": 366,
            "return": [
                "str",
                "dict",
                "int"
            ],
            "arguments": {}
        },
        "aio_run_proxy._AioRunProxyDecoratorFactory.__call__": {
            "name": "__call__",
            "location": 442,
            "return": [
                "_AioRunProxy",
                "Type",
                "int",
                "str",
                "float",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "aio_run_proxy._AioRunProxyDecoratorFactory.__call__._AioRunProxy.unwrap": {
            "name": "unwrap",
            "location": 461,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "aio_run_proxy._AioRunProxyDecoratorFactory.__call__._method": {
            "name": "_method",
            "location": 469,
            "return": [
                "bool",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "instance_": [
                    "str",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "name_": [
                    "str",
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        }
    },
    "threema-msgapi-sdk-python-master/threema/gateway/_gateway.py": {
        "Connection.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "identity": [
                    "str",
                    "Optional[List[str]]",
                    "list[str]",
                    "Optional[Sequence[str]]",
                    "None",
                    "Tuple[int]",
                    "typing.Sequence[str]",
                    "tuple[int]"
                ],
                "secret": [
                    "bool",
                    "List[str]",
                    "list[str]",
                    "int",
                    "str",
                    "Optional[Union[int, str]]",
                    "None"
                ],
                "key": [
                    "str",
                    "None"
                ],
                "key_file": [
                    "str",
                    "None",
                    "bool",
                    "Optional[str]"
                ],
                "blocking": [
                    "bool",
                    "type",
                    "dict",
                    "Sequence",
                    "str",
                    "Dict[str, Any]"
                ],
                "session": [
                    "Optional[str]",
                    "None",
                    "Optional[Dict[str, Any]]",
                    "str",
                    "Optional[bool]",
                    "dict[str, typing.Any]",
                    "bool"
                ],
                "session_kwargs": [
                    "str",
                    "None",
                    "bool",
                    "Optional[int]",
                    "Optional[bool]"
                ]
            }
        },
        "Connection.__enter__": {
            "name": "__enter__",
            "location": 117,
            "return": [
                "Connection",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Connection.key": {
            "name": "key",
            "location": 147,
            "return": [
                "",
                "str",
                "bytes",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int",
                    "str",
                    "Key",
                    "List[str]",
                    "bytes",
                    "Iterable[Hashable]"
                ]
            }
        },
        "Connection.key_file": {
            "name": "key_file",
            "location": 159,
            "return": [
                "",
                "str"
            ],
            "arguments": {
                "self": [],
                "key_file": [
                    "Optional[str]",
                    "Optional[IO[bytes]]",
                    "Optional[TextIO]",
                    "bool"
                ]
            }
        }
    },
    "threema-msgapi-sdk-python-master/threema/gateway/__init__.py": {},
    "threema-msgapi-sdk-python-master/threema/gateway/bin/gateway_client.py": {
        "cli": {
            "name": "cli",
            "location": 63,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "ctx": [],
                "verbosity": [
                    "int",
                    "Tuple[str]",
                    "bool"
                ],
                "colored": []
            }
        },
        "version": {
            "name": "version",
            "location": 91,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "generate": {
            "name": "generate",
            "location": 162,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "private_key_file": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[List[str]]",
                    "List[str]"
                ],
                "public_key_file": [
                    "str",
                    "bool",
                    "Set[str]"
                ]
            }
        },
        "hash": {
            "name": "hash",
            "location": 179,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "derive": {
            "name": "derive",
            "location": 203,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "private_key": [
                    "str",
                    "bytes",
                    "bool",
                    "static_frame.core.util.GetItemKeyType",
                    "Union[str, bytes]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 504,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_MockConnection.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "private_key": [
                    "str",
                    "int",
                    "bytes"
                ],
                "public_key": [
                    "bool",
                    "str",
                    "dict",
                    "dict[, ]",
                    "Tuple[bytes, str]",
                    "tuple[typing.Union[bytes,str]]",
                    "List[str]",
                    "list[str]"
                ],
                "identity": [
                    "str",
                    "bytes",
                    "None",
                    "Sequence[T]",
                    "typing.Sequence[T]"
                ]
            }
        }
    },
    "threema-msgapi-sdk-python-master/threema/gateway/bin/__init__.py": {}
}
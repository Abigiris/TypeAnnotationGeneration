{
    "ticket-system-master/fabfile.py": {
        "deploy": {
            "name": "deploy",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_update_source": {
            "name": "_update_source",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_update_virtualenv": {
            "name": "_update_virtualenv",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_update_static_files": {
            "name": "_update_static_files",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_update_database": {
            "name": "_update_database",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_restart_servers": {
            "name": "_restart_servers",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ticket-system-master/manage.py": {},
    "ticket-system-master/todos.py": {},
    "ticket-system-master/__init__.py": {},
    "ticket-system-master/project/settings.py": {},
    "ticket-system-master/project/urls.py": {},
    "ticket-system-master/project/wsgi.py": {},
    "ticket-system-master/project/__init__.py": {},
    "ticket-system-master/project/todo/admin.py": {},
    "ticket-system-master/project/todo/app.py": {},
    "ticket-system-master/project/todo/check.py": {
        "dal_check": {
            "name": "dal_check",
            "location": 6,
            "return": [
                "list[]",
                "str",
                "list[Error]",
                "int",
                "Set[str]"
            ],
            "arguments": {
                "app_configs": []
            }
        }
    },
    "ticket-system-master/project/todo/defaults.py": {
        "defaults": {
            "name": "defaults",
            "location": 20,
            "return": [
                "Callable[[Mapping], T]",
                "bool",
                "int",
                "None",
                "float",
                "list[typing.Text]",
                "typing.Text"
            ],
            "arguments": {
                "key": [
                    "str"
                ]
            }
        }
    },
    "ticket-system-master/project/todo/features.py": {},
    "ticket-system-master/project/todo/forms.py": {
        "AddTaskListForm.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "zerver.models.UserProfile",
                    "users.models.JustfixUser",
                    "django.contrib.auth.models.AbstractUser"
                ]
            }
        },
        "AddEditTaskForm.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "bool",
                    "models.characters.character_base.Character",
                    "None",
                    "str",
                    "tracim.models.auth.User",
                    "dict[str, str]",
                    "Optional[zerver.models.UserProfile]",
                    "asgard.models.user.User",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "AddEditTaskForm.clean_created_by": {
            "name": "clean_created_by",
            "location": 52,
            "return": [
                "int",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ticket-system-master/project/todo/models.py": {
        "get_attachment_upload_dir": {
            "name": "get_attachment_upload_dir",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "instance": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "filename": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "LockedAtomicTransaction.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LockedAtomicTransaction.__enter__": {
            "name": "__enter__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskList.__str__": {
            "name": "__str__",
            "location": 60,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.overdue_status": {
            "name": "overdue_status",
            "location": 96,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.__str__": {
            "name": "__str__",
            "location": 101,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 104,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.save": {
            "name": "save",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.merge_into": {
            "name": "merge_into",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "merge_target": [
                    "int",
                    "dict[, ]",
                    "lunch_buddies.models.polls.Poll",
                    "dict"
                ]
            }
        },
        "Comment.author_text": {
            "name": "author_text",
            "location": 150,
            "return": [
                "str",
                "Optional[List[str]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Comment.snippet": {
            "name": "snippet",
            "location": 158,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Comment.__str__": {
            "name": "__str__",
            "location": 163,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Attachment.filename": {
            "name": "filename",
            "location": 177,
            "return": [
                "Optional[str]",
                "str",
                "\"NodePath\"",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Attachment.extension": {
            "name": "extension",
            "location": 180,
            "return": [
                "str",
                "int",
                "Callable",
                "dict[str, str]",
                "models.Question",
                "None",
                "list[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Attachment.__str__": {
            "name": "__str__",
            "location": 184,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ticket-system-master/project/todo/urls.py": {},
    "ticket-system-master/project/todo/utils.py": {
        "staff_check": {
            "name": "staff_check",
            "location": 17,
            "return": [
                "bool",
                "\"Task\""
            ],
            "arguments": {
                "user": [
                    "str",
                    "float",
                    "bytes",
                    "bool",
                    "models.user.UserModel",
                    "int"
                ]
            }
        },
        "user_can_read_task": {
            "name": "user_can_read_task",
            "location": 30,
            "return": [
                "bool",
                "core.models.Grouping",
                "Dict[str, Any]"
            ],
            "arguments": {
                "task": [
                    "asyncio.Task[Any]",
                    "salon.models.Stylist"
                ],
                "user": [
                    "asyncio.Task[Any]",
                    "salon.models.Stylist"
                ]
            }
        },
        "todo_get_backend": {
            "name": "todo_get_backend",
            "location": 34,
            "return": [
                "None",
                "Optional[str]",
                "bool",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "Optional[bool]",
                "Optional[List[Any]]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "task": [
                    "dict[, ]",
                    "str",
                    "dict",
                    "dict[str, typing.Any]",
                    "prefeccore.task.Task",
                    "Dict[str, Any]",
                    "celery.events.state.State.Task",
                    "services.ticketing.models.ticket_evenTicketEvent",
                    "tasks.Task"
                ]
            }
        },
        "todo_get_mailer": {
            "name": "todo_get_mailer",
            "location": 47,
            "return": [
                "Tuple[(Optional[str], Any)]"
            ],
            "arguments": {
                "user": [
                    "dict",
                    "dict[, ]",
                    "bool",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "str",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Optional[Dict]",
                    "None"
                ],
                "task": [
                    "str",
                    "None",
                    "typing.Callable[, ]",
                    "Optional[str]",
                    "dict[, ]",
                    "django.contrib.gis.geos.Point",
                    "Callable",
                    "models.Telegram_Chat",
                    "salon.models.Stylist",
                    "dict"
                ]
            }
        },
        "todo_send_mail": {
            "name": "todo_send_mail",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "bool",
                    "str",
                    "None",
                    "Optional[models.User]",
                    "app.models.external.UserDTO"
                ],
                "task": [
                    "str",
                    "bool",
                    "Optional[Mapping[str, str]]",
                    "typing.Mapping",
                    "None"
                ],
                "subject": [
                    "zerver.models.UserProfile"
                ],
                "body": [
                    "zerver.models.UserProfile"
                ],
                "recip_list": [
                    "zerver.models.UserProfile"
                ]
            }
        },
        "send_notify_mail": {
            "name": "send_notify_mail",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "new_task": [
                    "dict[, ]",
                    "dict",
                    "dict[str, typing.Any]",
                    "core_lib.core.models.Event",
                    "Dict[str, Any]",
                    "prefeccore.task.Task"
                ]
            }
        },
        "send_email_to_thread_participants": {
            "name": "send_email_to_thread_participants",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ],
                "msg_body": [
                    "dict[, ]",
                    "bytes",
                    "dict",
                    "slowbro.core.bot_message.BotMessage"
                ],
                "user": [
                    "dict[, ]",
                    "Union[zerver.models.UserProfile, zilencer.models.RemoteZulipServer]",
                    "dict"
                ],
                "subject": [
                    "int",
                    "None",
                    "Tuple[str]",
                    "List[List[int]]",
                    "tuple[str]",
                    "list[list[int]]"
                ]
            }
        },
        "toggle_task_completed": {
            "name": "toggle_task_completed",
            "location": 147,
            "return": [
                "bool"
            ],
            "arguments": {
                "task_id": [
                    "int"
                ]
            }
        },
        "remove_attachment_file": {
            "name": "remove_attachment_file",
            "location": 160,
            "return": [
                "bool"
            ],
            "arguments": {
                "attachment_id": [
                    "int"
                ]
            }
        }
    },
    "ticket-system-master/project/todo/mail/delivery.py": {
        "_declare_backend": {
            "name": "_declare_backend",
            "location": 4,
            "return": [
                "Callable"
            ],
            "arguments": {
                "backend_path": [
                    "str",
                    "Optional[Tuple[str, ...]]",
                    "Optional['Directory']",
                    "Optional[str]"
                ]
            }
        },
        "_declare_backend.backend": {
            "name": "backend",
            "location": 9,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "_declare_backend.backend._backend": {
            "name": "_backend",
            "location": 10,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "ticket-system-master/project/todo/mail/__init__.py": {},
    "ticket-system-master/project/todo/mail/consumers/tracker.py": {
        "part_decode": {
            "name": "part_decode",
            "location": 13,
            "return": [
                "int",
                "str",
                "bytes",
                "Dict[str, Any]"
            ],
            "arguments": {
                "message": [
                    "List[int]",
                    "Dict[str, Any]"
                ]
            }
        },
        "message_find_mime": {
            "name": "message_find_mime",
            "location": 23,
            "return": [
                "None",
                "Optional[str]",
                "Optional[float]",
                "Optional[List[Any]]",
                "Optional[List[str]]",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "message": [
                    "str",
                    "paradigm.models.Overloaded",
                    "Type"
                ],
                "mime_type": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "message_text": {
            "name": "message_text",
            "location": 30,
            "return": [
                "typing.Text",
                "str",
                "Callable",
                "viewer.models.Archive"
            ],
            "arguments": {
                "message": [
                    "str",
                    "int",
                    "Protocol",
                    "typing.Protocol"
                ]
            }
        },
        "format_task_title": {
            "name": "format_task_title",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "format_string": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "message": [
                    "str",
                    "list[str]",
                    "List[str]",
                    "int"
                ]
            }
        },
        "parse_references": {
            "name": "parse_references",
            "location": 50,
            "return": [
                "Tuple[(list, Any)]"
            ],
            "arguments": {
                "task_list": [
                    "typing.Any",
                    "Optional[Any]",
                    "str",
                    "None",
                    "int",
                    "asyncio.Task",
                    "dict[, ]",
                    "models.Submission",
                    "dict"
                ],
                "references": [
                    "str",
                    "Dict[str, List[str]]",
                    "Union[str, Dict[str, str]]"
                ]
            }
        },
        "insert_message": {
            "name": "insert_message",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "task_list": [
                    "str",
                    "int"
                ],
                "message": [
                    "str",
                    "Optional[str]",
                    "Sequence[str]",
                    "Dict[str, Any]"
                ],
                "priority": [
                    "str",
                    "int",
                    "dict[str, int]",
                    "src.scrape.models.Product",
                    "list[]",
                    "Dict[str, int]",
                    "list"
                ],
                "task_title_format": [
                    "str",
                    "int",
                    "dict[str, int]",
                    "src.scrape.models.Product",
                    "list[]",
                    "Dict[str, int]",
                    "list"
                ]
            }
        },
        "tracker_consumer": {
            "name": "tracker_consumer",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "producer": [
                    "bytes",
                    "str",
                    "bool",
                    "list[str]",
                    "int",
                    "List[str]"
                ],
                "group": [
                    "dict",
                    "None",
                    "bool",
                    "dict[, ]",
                    "Dict[str, list]",
                    "List[List[Any]]",
                    "dict[str, list[]]",
                    "int",
                    "list[list[typing.Any]]",
                    "list",
                    "list[]",
                    "List[cleanslate.models.SourceRecord]",
                    "list[cleanslate.models.SourceRecord]",
                    "Optional[str]",
                    "str"
                ],
                "task_list_slug": [
                    "dict",
                    "None",
                    "bool",
                    "dict[, ]",
                    "Dict[str, list]",
                    "List[List[Any]]",
                    "dict[str, list[]]",
                    "int",
                    "list[list[typing.Any]]",
                    "list",
                    "list[]",
                    "List[cleanslate.models.SourceRecord]",
                    "list[cleanslate.models.SourceRecord]",
                    "Optional[str]",
                    "str"
                ],
                "priority": [
                    "int",
                    "List[Dict[str, Any]]",
                    "str",
                    "List[Optional['Cell']]",
                    "Sequence[str]",
                    "list"
                ],
                "task_title_format": [
                    "typing.Text",
                    "List[Dict[str, Any]]",
                    "str",
                    "List[Optional['Cell']]",
                    "Sequence[str]",
                    "list"
                ]
            }
        }
    },
    "ticket-system-master/project/todo/mail/consumers/__init__.py": {
        "tracker_consumer": {
            "name": "tracker_consumer",
            "location": 1,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "tracker_consumer.tracker_factory": {
            "name": "tracker_factory",
            "location": 2,
            "return": [
                "str"
            ],
            "arguments": {
                "producer": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "ticket-system-master/project/todo/mail/producers/imap.py": {
        "imap_check": {
            "name": "imap_check",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "command_tuple": [
                    "str",
                    "Optional[float]",
                    "bool",
                    "int",
                    "Optional[\"Outcome\"]"
                ]
            }
        },
        "imap_connect": {
            "name": "imap_connect",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "host": [
                    "str"
                ],
                "port": [
                    "str"
                ],
                "username": [
                    "str",
                    "bytes",
                    "int"
                ],
                "password": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "parse_message": {
            "name": "parse_message",
            "location": 29,
            "return": [
                "Optional[email.message.Message]"
            ],
            "arguments": {
                "message": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "search_message": {
            "name": "search_message",
            "location": 40,
            "return": [
                "Generator[(Tuple[(Any, Optional[email.message.Message])], Any, None)]"
            ],
            "arguments": {
                "conn": [
                    "str",
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        },
        "imap_producer": {
            "name": "imap_producer",
            "location": 47,
            "return": [
                "Generator[(nothing, Any, nothing)]"
            ],
            "arguments": {
                "process_all": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "preserve": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "host": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "port": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "username": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "password": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "nap_duration": [
                    "str",
                    "int",
                    "Optional[int]",
                    "Optional[str]",
                    "List[Dict[str, Any]]"
                ],
                "input_folder": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "imap_producer.process_batch": {
            "name": "process_batch",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "ticket-system-master/project/todo/mail/producers/__init__.py": {
        "imap_producer": {
            "name": "imap_producer",
            "location": 1,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "imap_producer.imap_producer_factory": {
            "name": "imap_producer_factory",
            "location": 2,
            "return": [
                "float",
                "str"
            ],
            "arguments": {}
        }
    },
    "ticket-system-master/project/todo/management/__init__.py": {},
    "ticket-system-master/project/todo/management/commands/hopper.py": {
        "gen_title": {
            "name": "gen_title",
            "location": 17,
            "return": [
                "int",
                "str",
                "Callable",
                "None",
                "models.Question"
            ],
            "arguments": {
                "tc": [
                    "bool",
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict"
                ]
            }
        },
        "gen_content": {
            "name": "gen_content",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskListFactory.add_tasks": {
            "name": "add_tasks",
            "location": 112,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "build": [
                    "dict",
                    "str",
                    "dict[, ]"
                ],
                "extracted": [
                    "dict",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "TaskFactory.add_details": {
            "name": "add_details",
            "location": 134,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "build": [
                    "dict",
                    "dict[, ]"
                ],
                "extracted": [
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "ticket-system-master/project/todo/management/commands/import_csv.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ticket-system-master/project/todo/management/commands/mail_worker.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ticket-system-master/project/todo/management/commands/__init__.py": {},
    "ticket-system-master/project/todo/migrations/0001_initial.py": {},
    "ticket-system-master/project/todo/migrations/0002_auto_20150614_2339.py": {},
    "ticket-system-master/project/todo/migrations/0003_assignee_optional.py": {},
    "ticket-system-master/project/todo/migrations/0004_rename_list_tasklist.py": {},
    "ticket-system-master/project/todo/migrations/0005_auto_20180212_2325.py": {},
    "ticket-system-master/project/todo/migrations/0006_rename_item_model.py": {},
    "ticket-system-master/project/todo/migrations/0007_auto_update_created_date.py": {},
    "ticket-system-master/project/todo/migrations/0008_mail_tracker.py": {},
    "ticket-system-master/project/todo/migrations/0009_priority_optional.py": {},
    "ticket-system-master/project/todo/migrations/0010_attachment.py": {},
    "ticket-system-master/project/todo/migrations/0011_auto_20190724_1130.py": {},
    "ticket-system-master/project/todo/migrations/__init__.py": {},
    "ticket-system-master/project/todo/operations/csv_importer.py": {
        "CSVImporter.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CSVImporter.upsert": {
            "name": "upsert",
            "location": 26,
            "return": [
                "Optional[Dict[(str, List[str])]]"
            ],
            "arguments": {
                "self": [],
                "fileobj": [
                    "bool",
                    "str",
                    "int"
                ],
                "as_string_obj": [
                    "bool",
                    "str",
                    "Iterable[str]",
                    "List[str]"
                ]
            }
        },
        "CSVImporter.validate_row": {
            "name": "validate_row",
            "location": 104,
            "return": [
                "Union[(bool, _T0)]"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "_T0"
                ]
            }
        },
        "CSVImporter.validate_date": {
            "name": "validate_date",
            "location": 195,
            "return": [
                "Union[(bool, datetime.datetime)]"
            ],
            "arguments": {
                "self": [],
                "datestring": [
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "ticket-system-master/project/todo/operations/__init__.py": {},
    "ticket-system-master/project/todo/tests/conftest.py": {
        "todo_setup": {
            "name": "todo_setup",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "django_user_model": [
                    "str",
                    "None",
                    "daylighdb.models.User",
                    "Optional[zerver.models.UserProfile]",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "email_backend_setup": {
            "name": "email_backend_setup",
            "location": 41,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "settings": [
                    "list[str]",
                    "str",
                    "List[str]",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "ticket-system-master/project/todo/tests/test_import.py": {
        "import_setup": {
            "name": "import_setup",
            "location": 19,
            "return": [
                "dict[typing.Text, ]",
                "pathlib.Path",
                "bool",
                "dict",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "todo_setup": [
                    "int",
                    "str",
                    "typing.Iterable[C]",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_setup": {
            "name": "test_setup",
            "location": 30,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "todo_setup": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_import": {
            "name": "test_import",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "import_setup": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_report": {
            "name": "test_report",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "import_setup": [
                    "Callable"
                ]
            }
        },
        "test_inserted_row": {
            "name": "test_inserted_row",
            "location": 68,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "import_setup": [
                    "Type",
                    "typing.Type"
                ]
            }
        }
    },
    "ticket-system-master/project/todo/tests/test_tracker.py": {
        "consumer": {
            "name": "consumer",
            "location": 10,
            "return": [
                "str",
                "dict",
                "float"
            ],
            "arguments": {}
        },
        "make_message": {
            "name": "make_message",
            "location": 16,
            "return": [
                "email.message.EmailMessage"
            ],
            "arguments": {
                "subject": [
                    "str",
                    "bytes",
                    "tracim.models.data.Content",
                    "tartare.core.publisher.AbstractProtocol"
                ],
                "content": [
                    "str",
                    "bytes",
                    "dict",
                    "dict[, ]",
                    "Dict[str, str]",
                    "dict[str, str]",
                    "Mapping",
                    "typing.Mapping"
                ]
            }
        },
        "test_tracker_task_creation": {
            "name": "test_tracker_task_creation",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "todo_setup": [
                    "app.models.user.UserInDB"
                ],
                "django_user_model": [
                    "app.models.user.UserInDB"
                ]
            }
        }
    },
    "ticket-system-master/project/todo/tests/test_utils.py": {
        "test_send_notify_mail_not_me": {
            "name": "test_send_notify_mail_not_me",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "todo_setup": [
                    "str"
                ],
                "django_user_model": [
                    "str",
                    "int"
                ],
                "email_backend_setup": [
                    "str"
                ]
            }
        },
        "test_send_notify_mail_myself": {
            "name": "test_send_notify_mail_myself",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "todo_setup": [
                    "str"
                ],
                "django_user_model": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Optional[str]",
                    "None"
                ],
                "email_backend_setup": [
                    "str"
                ]
            }
        },
        "test_send_email_to_thread_participants": {
            "name": "test_send_email_to_thread_participants",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "todo_setup": [],
                "django_user_model": [
                    "str",
                    "dict[, ]",
                    "models.user.User",
                    "dict",
                    "abilian.core.models.subjects.User"
                ],
                "email_backend_setup": []
            }
        },
        "test_defaults": {
            "name": "test_defaults",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "settings": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "ticket-system-master/project/todo/tests/test_views.py": {
        "test_todo_setup": {
            "name": "test_todo_setup",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "todo_setup": [
                    "str",
                    "Mapping[str, Any]",
                    "typing.Mapping"
                ]
            }
        },
        "test_view_list_lists": {
            "name": "test_view_list_lists",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "todo_setup": [
                    "Callable[[], int]",
                    "bool",
                    "typing.Callable[[], int]"
                ],
                "admin_client": []
            }
        },
        "test_view_reorder": {
            "name": "test_view_reorder",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "todo_setup": [
                    "Callable[[], int]",
                    "bool",
                    "typing.Callable[[], int]"
                ],
                "admin_client": []
            }
        },
        "test_view_external_add": {
            "name": "test_view_external_add",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "todo_setup": [
                    "Callable[[], int]",
                    "bool",
                    "typing.Callable[[], int]"
                ],
                "admin_client": [],
                "settings": []
            }
        },
        "test_view_mine": {
            "name": "test_view_mine",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "todo_setup": [
                    "Callable[[], int]",
                    "bool",
                    "typing.Callable[[], int]"
                ],
                "admin_client": []
            }
        },
        "test_view_list_completed": {
            "name": "test_view_list_completed",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "todo_setup": [
                    "Callable[[], int]",
                    "bool",
                    "typing.Callable[[], int]"
                ],
                "admin_client": []
            }
        },
        "test_view_list": {
            "name": "test_view_list",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "todo_setup": [
                    "Callable[[], int]",
                    "bool",
                    "typing.Callable[[], int]"
                ],
                "admin_client": []
            }
        },
        "test_view_add_list": {
            "name": "test_view_add_list",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "todo_setup": [
                    "Callable[[], int]",
                    "bool",
                    "typing.Callable[[], int]"
                ],
                "admin_client": []
            }
        },
        "test_view_task_detail": {
            "name": "test_view_task_detail",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "todo_setup": [
                    "Callable[[], int]",
                    "bool",
                    "typing.Callable[[], int]"
                ],
                "admin_client": []
            }
        },
        "test_del_task": {
            "name": "test_del_task",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "todo_setup": [
                    "Callable[[], int]",
                    "bool",
                    "typing.Callable[[], int]"
                ],
                "admin_user": [
                    "Callable[[], int]",
                    "bool",
                    "typing.Callable[[], int]"
                ],
                "client": [
                    "dict"
                ]
            }
        },
        "test_task_toggle_done": {
            "name": "test_task_toggle_done",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "todo_setup": [
                    "bool"
                ],
                "admin_user": [
                    "bool"
                ],
                "client": []
            }
        },
        "test_view_search": {
            "name": "test_view_search",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "todo_setup": [
                    "Callable[[], int]",
                    "bool",
                    "typing.Callable[[], int]"
                ],
                "admin_client": []
            }
        },
        "test_no_javascript_in_task_note": {
            "name": "test_no_javascript_in_task_note",
            "location": 110,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "todo_setup": [
                    "Callable[[], int]",
                    "bool",
                    "typing.Callable[[], int]"
                ],
                "client": []
            }
        },
        "test_created_by_unchanged": {
            "name": "test_created_by_unchanged",
            "location": 137,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "todo_setup": [
                    "Callable[[], int]",
                    "bool",
                    "typing.Callable[[], int]"
                ],
                "client": []
            }
        },
        "test_no_javascript_in_comments": {
            "name": "test_no_javascript_in_comments",
            "location": 192,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "todo_setup": [
                    "Callable[[], int]",
                    "bool",
                    "typing.Callable[[], int]"
                ],
                "client": []
            }
        },
        "test_view_add_list_nonadmin": {
            "name": "test_view_add_list_nonadmin",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "todo_setup": [
                    "Callable[[], int]",
                    "bool",
                    "typing.Callable[[], int]"
                ],
                "client": []
            }
        },
        "test_view_del_list_nonadmin": {
            "name": "test_view_del_list_nonadmin",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "todo_setup": [
                    "Callable[[], int]",
                    "bool",
                    "typing.Callable[[], int]"
                ],
                "client": []
            }
        },
        "test_del_list_not_in_list_group": {
            "name": "test_del_list_not_in_list_group",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "todo_setup": [
                    "Callable[[], int]",
                    "bool",
                    "typing.Callable[[], int]"
                ],
                "admin_client": []
            }
        },
        "test_view_list_mine": {
            "name": "test_view_list_mine",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "todo_setup": [
                    "Callable[[], int]",
                    "bool",
                    "typing.Callable[[], int]"
                ],
                "client": []
            }
        },
        "test_view_list_not_mine": {
            "name": "test_view_list_not_mine",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "todo_setup": [
                    "Callable[[], int]",
                    "bool",
                    "typing.Callable[[], int]"
                ],
                "client": []
            }
        },
        "test_view_task_mine": {
            "name": "test_view_task_mine",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "todo_setup": [
                    "Callable[[], int]",
                    "bool",
                    "typing.Callable[[], int]"
                ],
                "client": []
            }
        },
        "test_view_task_my_group": {
            "name": "test_view_task_my_group",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "todo_setup": [],
                "client": [
                    "str",
                    "Optional[float]"
                ],
                "django_user_model": [
                    "str",
                    "core.models.Recipe"
                ]
            }
        },
        "test_view_task_not_in_my_group": {
            "name": "test_view_task_not_in_my_group",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "todo_setup": [
                    "Callable[[], int]",
                    "bool",
                    "typing.Callable[[], int]"
                ],
                "client": []
            }
        },
        "test_setting_TODO_STAFF_ONLY_False": {
            "name": "test_setting_TODO_STAFF_ONLY_False",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "todo_setup": [
                    "Callable[[], int]",
                    "bool",
                    "typing.Callable[[], int]"
                ],
                "client": [],
                "settings": []
            }
        },
        "test_setting_TODO_STAFF_ONLY_True": {
            "name": "test_setting_TODO_STAFF_ONLY_True",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "todo_setup": [
                    "Callable[[], int]",
                    "typing.Callable[[], int]",
                    "Generator[None, Any, None]",
                    "typing.Generator[typing.Union[None,typing.Any,None]]"
                ],
                "client": [],
                "settings": [
                    "str"
                ],
                "django_user_model": [
                    "core.models.Recipe"
                ]
            }
        }
    },
    "ticket-system-master/project/todo/tests/__init__.py": {},
    "ticket-system-master/project/todo/views/add_list.py": {
        "add_list": {
            "name": "add_list",
            "location": 17,
            "return": [
                "str",
                "bool",
                "Union[str, Dict]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        }
    },
    "ticket-system-master/project/todo/views/delete_task.py": {
        "delete_task": {
            "name": "delete_task",
            "location": 14,
            "return": [
                "str",
                "Dict[str, Any]",
                "cmk.utils.type_defs.UserId",
                "dict"
            ],
            "arguments": {
                "request": [
                    "int",
                    "django.http.HttpRequest"
                ],
                "task_id": [
                    "str",
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "ticket-system-master/project/todo/views/del_list.py": {
        "del_list": {
            "name": "del_list",
            "location": 15,
            "return": [
                "str",
                "int",
                "Union[int, float, complex]",
                "asyncworker.http.wrapper.RequestWrapper",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ],
                "list_id": [
                    "List[int]",
                    "int",
                    "list[int]",
                    "Set[int]",
                    "set[int]"
                ],
                "list_slug": [
                    "str",
                    "list[int]",
                    "django.http.HttpRequest",
                    "apistar.http.Request",
                    "List[int]"
                ]
            }
        }
    },
    "ticket-system-master/project/todo/views/external_add.py": {
        "external_add": {
            "name": "external_add",
            "location": 19,
            "return": [
                "bool",
                "int",
                "cmk.utils.type_defs.UserId",
                "raiden.utils.Tuple[raiden.utils.Tuple[raiden.utils.TokenAddress, raiden.utils.ProportionalFeeAmount], ...]"
            ],
            "arguments": {
                "request": [
                    "str",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "models.WalletRequest",
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "ticket-system-master/project/todo/views/import_csv.py": {
        "import_csv": {
            "name": "import_csv",
            "location": 12,
            "return": [
                "dict",
                "str",
                "int",
                "float",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        }
    },
    "ticket-system-master/project/todo/views/list_detail.py": {
        "list_detail": {
            "name": "list_detail",
            "location": 18,
            "return": [
                "Dict[str, Any]",
                "str",
                "dict",
                "int",
                "bool",
                "core.models.User"
            ],
            "arguments": {
                "request": [
                    "dict[, ]",
                    "django.http.HttpRequest",
                    "dict"
                ],
                "list_id": [
                    "int",
                    "None",
                    "Optional[int]",
                    "zerver.models.UserProfile"
                ],
                "list_slug": [
                    "Tuple[dict, bool]",
                    "None",
                    "Dict[str, Any]",
                    "str",
                    "tuple[typing.Union[dict[, ],bool]]",
                    "accounts.models.Account",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ],
                "view_completed": [
                    "bool",
                    "Tuple[dict, bool]",
                    "Dict[str, Any]",
                    "accounts.models.Account",
                    "str",
                    "dict"
                ]
            }
        }
    },
    "ticket-system-master/project/todo/views/list_lists.py": {
        "list_lists": {
            "name": "list_lists",
            "location": 17,
            "return": [
                "bool",
                "int",
                "bytes",
                "Set[int]",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        }
    },
    "ticket-system-master/project/todo/views/my_tickets.py": {
        "my_tickets": {
            "name": "my_tickets",
            "location": 15,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "Optional[str]",
                "int",
                "Dict[str, str]"
            ],
            "arguments": {
                "request": [
                    "dict[, ]",
                    "django.http.HttpRequest",
                    "zerver.models.UserProfile",
                    "dict"
                ],
                "list_id": [
                    "int",
                    "None",
                    "List[int]",
                    "Set[int]",
                    "list[int]",
                    "Optional[int]",
                    "set[int]"
                ],
                "list_slug": [
                    "str",
                    "None",
                    "Dict[str, Any]",
                    "accounts.models.Account",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ],
                "view_completed": [
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "accounts.models.Account",
                    "dict"
                ]
            }
        }
    },
    "ticket-system-master/project/todo/views/remove_attachment.py": {
        "remove_attachment": {
            "name": "remove_attachment",
            "location": 13,
            "return": [
                "str",
                "bool",
                "dict",
                "Union[str, Dict]"
            ],
            "arguments": {
                "request": [
                    "int",
                    "django.http.HttpRequest",
                    "zerver.models.UserProfile"
                ],
                "attachment_id": [
                    "int",
                    "django.http.HttpRequest",
                    "zerver.models.UserProfile"
                ]
            }
        }
    },
    "ticket-system-master/project/todo/views/reorder_tasks.py": {
        "reorder_tasks": {
            "name": "reorder_tasks",
            "location": 12,
            "return": [
                "HttpResponse",
                "dict",
                "bool",
                "Optional[Dict]",
                "Dict[str, Any]",
                "str",
                "apistar.http.Header"
            ],
            "arguments": {
                "request": [
                    "typing.Callable[, ]",
                    "django.http.HttpRequest",
                    "Callable"
                ]
            }
        }
    },
    "ticket-system-master/project/todo/views/search.py": {
        "search": {
            "name": "search",
            "location": 12,
            "return": [
                "Dict[str, Any]",
                "int",
                "bytes",
                "str"
            ],
            "arguments": {
                "request": [
                    "dict[str, typing.Any]",
                    "models.Workspace",
                    "django.http.HttpRequest",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "ticket-system-master/project/todo/views/task_autocomplete.py": {
        "TaskAutocomplete.dispatch": {
            "name": "dispatch",
            "location": 12,
            "return": [
                "str",
                "bool",
                "nornir.core.inventory.Host"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "typing.Callable[, ]",
                    "zerver.models.UserProfile",
                    "django.http.requesHttpRequest",
                    "django.http.HttpRequest",
                    "Callable"
                ],
                "task_id": [
                    "str",
                    "set[str]",
                    "dict[str, T]",
                    "django.http.HttpRequest",
                    "pc.data.Task",
                    "Set[str]",
                    "models.characters.character_base.Character",
                    "Dict[str, taskiapplication.models.task.Task]"
                ]
            }
        },
        "TaskAutocomplete.get_queryset": {
            "name": "get_queryset",
            "location": 19,
            "return": [
                "list[]",
                "str",
                "list[cmk.base.plugins.agent_based.utils.interfaces.Interface]",
                "list[T]",
                "Dict[str, Any]",
                "bool",
                "models.Payment",
                "Callable[[str, str], None]",
                "app.models.Game"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ticket-system-master/project/todo/views/task_detail.py": {
        "handle_add_comment": {
            "name": "handle_add_comment",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [
                    "mitmproxy.http.HTTPFlow"
                ],
                "task": [
                    "mitmproxy.http.HTTPFlow"
                ]
            }
        },
        "task_detail": {
            "name": "task_detail",
            "location": 51,
            "return": [
                "str",
                "Optional[str]",
                "dict",
                "List[str]",
                "cmk.utils.type_defs.UserId"
            ],
            "arguments": {
                "request": [
                    "int",
                    "dict[int, A]",
                    "zam_repondeur.models.Lecture",
                    "django.http.HttpRequest",
                    "Dict[int, zam_repondeur.models.Amendement]",
                    "zam_repondeur.models.Team"
                ],
                "task_id": [
                    "str",
                    "models.characters.character_base.Character",
                    "pc.data.Task",
                    "grouper.models.permission.Permission",
                    "grouper.models.service_accounServiceAccount",
                    "zerver.models.UserProfile"
                ]
            }
        }
    },
    "ticket-system-master/project/todo/views/toggle_done.py": {
        "toggle_done": {
            "name": "toggle_done",
            "location": 15,
            "return": [
                "str",
                "Optional[str]",
                "zerver.models.UserProfile",
                "Dict[str, Any]"
            ],
            "arguments": {
                "request": [
                    "int",
                    "django.http.HttpRequest",
                    "preacher.core.requesRequest"
                ],
                "task_id": [
                    "str",
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "ticket-system-master/project/todo/views/__init__.py": {}
}
{
    "tipresias-main/backend/manage.py": {},
    "tipresias-main/backend/project/urls.py": {},
    "tipresias-main/backend/project/wsgi.py": {},
    "tipresias-main/backend/project/__init__.py": {},
    "tipresias-main/backend/project/settings/common.py": {},
    "tipresias-main/backend/project/settings/data_config.py": {},
    "tipresias-main/backend/project/settings/development.py": {},
    "tipresias-main/backend/project/settings/production.py": {},
    "tipresias-main/backend/project/settings/test.py": {},
    "tipresias-main/backend/project/settings/__init__.py": {},
    "tipresias-main/backend/scripts/backfill_match_result.py": {
        "main": {
            "name": "main",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tipresias-main/backend/scripts/backfill_predictions_is_correct.py": {
        "main": {
            "name": "main",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tipresias-main/backend/scripts/dump_filtered_prediction_data.py": {
        "_clean_value": {
            "name": "_clean_value",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "str",
                    "datetime.date"
                ]
            }
        },
        "_reshape_record_fields": {
            "name": "_reshape_record_fields",
            "location": 44,
            "return": [
                "Dict[Text,Union[Text,dict]]",
                "int",
                "IO",
                "Type[Any]"
            ],
            "arguments": {
                "model_name": [
                    "str",
                    "Pattern"
                ],
                "record": [
                    "str",
                    "Set[str]",
                    "dict",
                    "Dict[str, type]"
                ]
            }
        },
        "_get_fields_for": {
            "name": "_get_fields_for",
            "location": 50,
            "return": [
                "List",
                "List[str]",
                "str",
                "Dict",
                "Union[int,None]",
                "Set[str]"
            ],
            "arguments": {
                "model_class": [
                    "str",
                    "django.db.models.Model",
                    "Mapping",
                    "Mapping[str,T]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tipresias-main/backend/scripts/import_footy_tipper_predictions.py": {
        "main": {
            "name": "main",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tipresias-main/backend/scripts/__init__.py": {},
    "tipresias-main/backend/server/api.py": {
        "_build_match": {
            "name": "_build_match",
            "location": 29,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "match_data": [
                    "MutableMapping",
                    "str",
                    "Dict",
                    "Dict[str,float]",
                    "Mapping",
                    "zerver.lib.types.ProfileFieldData",
                    "Mapping[str,Any]"
                ]
            }
        },
        "update_fixture_data": {
            "name": "update_fixture_data",
            "location": 35,
            "return": [
                "None",
                "Optional[int]",
                "Optional[bool]",
                "Optional[float]",
                "str"
            ],
            "arguments": {
                "fixture_data": [
                    "str",
                    "bytes",
                    "Dict",
                    "salon.models.Stylist"
                ],
                "upcoming_round": [
                    "bool",
                    "Dict",
                    "List",
                    "str",
                    "int"
                ],
                "verbose": [
                    "int",
                    "str",
                    "Optional[str]",
                    "pandas.DataFrame"
                ]
            }
        },
        "backfill_recent_match_results": {
            "name": "backfill_recent_match_results",
            "location": 102,
            "return": [
                "None",
                "bool",
                "Optional[str]",
                "Optional[float]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "match_results": [
                    "List[Union[P,str]]",
                    "List",
                    "List[Union[PipeChain,str]]",
                    "Callable[...,T]"
                ],
                "verbose": [
                    "int",
                    "bool",
                    "List[cmk.gui.plugins.visuals.utils.Filter]",
                    "Iterator[Tuple[str,str]]"
                ]
            }
        },
        "fetch_next_match": {
            "name": "fetch_next_match",
            "location": 147,
            "return": [
                "Optional[int]",
                "None",
                "Optional[str]",
                "Dict[Text,]"
            ],
            "arguments": {}
        },
        "update_future_match_predictions": {
            "name": "update_future_match_predictions",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "predictions": [
                    "List[list[str]]",
                    "str",
                    "bool",
                    "zerver.models.Message",
                    "List[List[str]]"
                ]
            }
        },
        "fetch_latest_round_predictions": {
            "name": "fetch_latest_round_predictions",
            "location": 177,
            "return": [
                "str",
                "int",
                "List[tuple[Union[Any,Any]]]",
                "Callable",
                "Dict[str,Any]",
                "models.Question"
            ],
            "arguments": {
                "verbose": [
                    "int",
                    "bool",
                    "str",
                    "float",
                    "Sequence[int]"
                ]
            }
        }
    },
    "tipresias-main/backend/server/apps.py": {},
    "tipresias-main/backend/server/types.py": {},
    "tipresias-main/backend/server/views.py": {
        "predictions": {
            "name": "predictions",
            "location": 15,
            "return": [
                "HttpResponse",
                "str",
                "Dict[str,Any]",
                "Dict[str,str]",
                "Optional[Dict]",
                "Dict"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ],
                "verbose": [
                    "django.http.HttpRequest",
                    "int"
                ]
            }
        },
        "fixtures": {
            "name": "fixtures",
            "location": 40,
            "return": [
                "HttpResponse",
                "str",
                "Dict[str,Any]",
                "Dict[str,str]",
                "Optional[Dict]",
                "Dict"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ],
                "verbose": [
                    "django.db.models.QuerySet",
                    "int"
                ]
            }
        },
        "matches": {
            "name": "matches",
            "location": 66,
            "return": [
                "HttpResponse",
                "int",
                "Dict[str,str]",
                "Dict",
                "bool",
                "Iterable[Notification]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ],
                "verbose": [
                    "int",
                    "Dict[str,Any]",
                    "Iterator",
                    "django.http.requesHttpRequest"
                ]
            }
        }
    },
    "tipresias-main/backend/server/__init__.py": {},
    "tipresias-main/backend/server/graphql/calculations.py": {
        "_calculate_cumulative_accuracy": {
            "name": "_calculate_cumulative_accuracy",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "data_frame": [
                    "int",
                    "str",
                    "pandas.DataFrame",
                    "numpy.ndarray",
                    "bool",
                    "Union[int,str]"
                ]
            }
        },
        "_calculate_cumulative_correct": {
            "name": "_calculate_cumulative_correct",
            "location": 60,
            "return": [
                "str"
            ],
            "arguments": {
                "data_frame": [
                    "int",
                    "str",
                    "pandas.DataFrame",
                    "numpy.ndarray",
                    "bool",
                    "Union[int,str]"
                ]
            }
        },
        "_calculate_absolute_margin_difference": {
            "name": "_calculate_absolute_margin_difference",
            "location": 69,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "data_frame": [
                    "str",
                    "Tuple[Union[numpy.ndarray,numpy.ndarray,numpy.ndarray]]",
                    "Tuple[numpy.ndarray,numpy.ndarray,numpy.ndarray]",
                    "numpy.ndarray",
                    "pandas.DataFrame",
                    "float"
                ]
            }
        },
        "_filter_by_round": {
            "name": "_filter_by_round",
            "location": 77,
            "return": [
                "str",
                "bool",
                "OrderedDict",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "data_frame": [
                    "pandas.DataFrame",
                    "Any",
                    "Sequence[Mapping]",
                    "Optional[Any]",
                    "int",
                    "None"
                ],
                "round_number": [
                    "Dict[str,Optional[str]]",
                    "None",
                    "Optional[Any]",
                    "Dict[str,Union[str,None]]",
                    "Optional[str]",
                    "Any",
                    "Optional[numpy.ndarray]",
                    "str"
                ]
            }
        },
        "_calculate_cumulative_bits": {
            "name": "_calculate_cumulative_bits",
            "location": 90,
            "return": [
                "str"
            ],
            "arguments": {
                "data_frame": [
                    "int",
                    "str",
                    "pandas.DataFrame",
                    "numpy.ndarray",
                    "bool",
                    "Union[int,str]"
                ]
            }
        },
        "_calculate_bits": {
            "name": "_calculate_bits",
            "location": 100,
            "return": [
                "float",
                "str"
            ],
            "arguments": {
                "data_frame": [
                    "Tuple",
                    "pandas.DataFrame",
                    "bytes",
                    "str",
                    "Union[bytes,str]",
                    "List[list[str]]",
                    "int",
                    "List[List[str]]"
                ]
            }
        },
        "_calculate_cumulative_mae": {
            "name": "_calculate_cumulative_mae",
            "location": 126,
            "return": [
                "str"
            ],
            "arguments": {
                "data_frame": [
                    "int",
                    "pandas.DataFrame",
                    "str",
                    "Dict[str,Any]",
                    "numpy.ndarray",
                    "Union[int,str]"
                ]
            }
        },
        "_calculate_cumulative_margin_difference": {
            "name": "_calculate_cumulative_margin_difference",
            "location": 136,
            "return": [
                "str",
                "pandas._FileOrBuffer[AnyStr]"
            ],
            "arguments": {
                "data_frame": [
                    "int",
                    "pandas.DataFrame",
                    "Tuple[Union[int,int]]",
                    "numpy.ndarray",
                    "Tuple[int,int]"
                ]
            }
        },
        "calculate_cumulative_metrics": {
            "name": "calculate_cumulative_metrics",
            "location": 145,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "metric_values": [
                    "float",
                    "Optional[float]",
                    "None"
                ],
                "round_number": [
                    "float",
                    "Optional[float]",
                    "None"
                ]
            }
        }
    },
    "tipresias-main/backend/server/graphql/schema.py": {
        "_consolidate_competition_model_metrics": {
            "name": "_consolidate_competition_model_metrics",
            "location": 82,
            "return": [
                "None",
                "Optional[str]",
                "Optional[int]",
                "bool",
                "Optional[float]"
            ],
            "arguments": {
                "model_metrics": [
                    "str",
                    "BaseException",
                    "T"
                ]
            }
        },
        "RoundMetricsType.resolve_season": {
            "name": "resolve_season",
            "location": 77,
            "return": [
                "str",
                "models.User"
            ],
            "arguments": {
                "round_metrics": [
                    "str",
                    "server.types.RoundMetrics",
                    "reader_server.types.Feed"
                ],
                "_info": [
                    "str",
                    "bool",
                    "Optional[Dict]",
                    "Dict",
                    "None"
                ]
            }
        },
        "Query.resolve_fetch_predictions": {
            "name": "resolve_fetch_predictions",
            "location": 215,
            "return": [
                "int",
                "Optional[int]",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "str",
                "utils.Node"
            ],
            "arguments": {
                "_root": [
                    "List",
                    "Callable",
                    "float",
                    "graphene.ResolveInfo"
                ],
                "_info": [
                    "List",
                    "Callable",
                    "float",
                    "graphene.ResolveInfo"
                ],
                "year": [
                    "None",
                    "int",
                    "Optional[int]",
                    "Callable[str,int]",
                    "Callable[[str],int]",
                    "slice",
                    "raiden.utils.BlockSpecification"
                ]
            }
        },
        "Query.resolve_fetch_season_performance_chart_parameters": {
            "name": "resolve_fetch_season_performance_chart_parameters",
            "location": 223,
            "return": [
                "Dict[Text,list]",
                "float",
                "models.tickeTicket",
                "Optional[List[str]]"
            ],
            "arguments": {
                "_root": [
                    "graphql.ResolveInfo"
                ],
                "_info": [
                    "graphql.ResolveInfo"
                ]
            }
        },
        "Query.resolve_fetch_season_model_metrics": {
            "name": "resolve_fetch_season_model_metrics",
            "location": 248,
            "return": [
                "recidiviz.calculator.pipeline.utils.incarceration_period_index.IncarcerationPeriodIndex",
                "str"
            ],
            "arguments": {
                "_root": [
                    "str",
                    "graphql.ResolveInfo",
                    "T"
                ],
                "_info": [
                    "str",
                    "graphql.ResolveInfo",
                    "T"
                ],
                "season": [
                    "bytes",
                    "numpy.array",
                    "Callable",
                    "bool"
                ]
            }
        },
        "Query.resolve_fetch_latest_round_predictions": {
            "name": "resolve_fetch_latest_round_predictions",
            "location": 255,
            "return": [
                "Dict[Text,Union[int,list[Union[Any,Any]],float,list[None],str]]",
                "float",
                "utils.Node",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "T"
            ],
            "arguments": {
                "_root": [
                    "List",
                    "Callable",
                    "float",
                    "graphene.ResolveInfo"
                ],
                "_info": [
                    "List",
                    "Callable",
                    "float",
                    "graphene.ResolveInfo"
                ]
            }
        },
        "Query.resolve_fetch_latest_round_metrics": {
            "name": "resolve_fetch_latest_round_metrics",
            "location": 276,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "_root": [
                    "List",
                    "Callable",
                    "float",
                    "graphene.ResolveInfo"
                ],
                "_info": [
                    "List",
                    "Callable",
                    "float",
                    "graphene.ResolveInfo"
                ]
            }
        },
        "Query.resolve_fetch_ml_models": {
            "name": "resolve_fetch_ml_models",
            "location": 322,
            "return": [
                "bool",
                "Optional[Any]",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "_root": [
                    "bool",
                    "List",
                    "Iterable[bool]"
                ],
                "_info": [
                    "bool",
                    "List",
                    "Iterable[bool]"
                ],
                "for_competition_only": [
                    "bool",
                    "List",
                    "Iterable[bool]"
                ],
                "prediction_year": [
                    "str",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "None",
                    "Optional[T]",
                    "Optional[object]"
                ]
            }
        }
    },
    "tipresias-main/backend/server/graphql/__init__.py": {},
    "tipresias-main/backend/server/graphql/types/models.py": {
        "MatchType.resolve_predictions": {
            "name": "resolve_predictions",
            "location": 45,
            "return": [
                "Mapping[str, Any]",
                "str",
                "bool",
                "Dict[str, Any]",
                "T",
                "int",
                "List[str]"
            ],
            "arguments": {
                "root": [
                    "Optional[str]",
                    "str",
                    "List[InlineContent]",
                    "None",
                    "Optional[int]",
                    "Optional[dict]",
                    "int",
                    "Optional[Dict[str,Any]]",
                    "Dict",
                    "Dict[str,Any]"
                ],
                "_info": [
                    "str",
                    "float",
                    "Optional[str]",
                    "None"
                ],
                "ml_model_name": [
                    "str",
                    "None",
                    "Type",
                    "Optional[str]",
                    "Optional[Set[str]]",
                    "Set[str]",
                    "Optional[List[str]]",
                    "List[str]",
                    "Optional[Sequence[str]]",
                    "Sequence[str]"
                ]
            }
        },
        "MatchType.resolve_home_team": {
            "name": "resolve_home_team",
            "location": 53,
            "return": [
                "str",
                "zerver.models.Realm",
                "bool",
                "app.models.Tweet",
                "app.models.Position"
            ],
            "arguments": {
                "root": [
                    "bool",
                    "Iterable"
                ],
                "_info": [
                    "List",
                    "Callable",
                    "float",
                    "graphene.ResolveInfo"
                ]
            }
        },
        "MatchType.resolve_away_team": {
            "name": "resolve_away_team",
            "location": 58,
            "return": [
                "exporwiki.types.PrimalEngramEntry",
                "int",
                "models.transaction.EndorsedTX",
                "Optional[str]",
                "Callable[[], str]"
            ],
            "arguments": {
                "root": [
                    "bool",
                    "Dict",
                    "T"
                ],
                "_info": [
                    "List",
                    "Callable",
                    "float",
                    "graphene.ResolveInfo"
                ]
            }
        },
        "MLModelType.resolve_prediction_seasons": {
            "name": "resolve_prediction_seasons",
            "location": 102,
            "return": [
                "bool",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "root": [
                    "Mapping",
                    "int",
                    "Iterable",
                    "Dict"
                ],
                "_info": [
                    "List",
                    "Callable",
                    "float",
                    "graphene.ResolveInfo"
                ]
            }
        }
    },
    "tipresias-main/backend/server/graphql/types/season.py": {
        "_invert_contradicting_predictions": {
            "name": "_invert_contradicting_predictions",
            "location": 70,
            "return": [
                "Callable",
                "int",
                "models.Question",
                "str"
            ],
            "arguments": {
                "non_principal_prediction_label": [
                    "str",
                    "bool",
                    "transfer.models.PaymentState"
                ]
            }
        },
        "_filter_by_model": {
            "name": "_filter_by_model",
            "location": 235,
            "return": [
                "Tuple[str, str]",
                "django.db.models.Model",
                "Callable",
                "Optional[str]",
                "pandas._IOargs[str, Any]",
                "str"
            ],
            "arguments": {
                "data_frame": [
                    "str",
                    "int",
                    "pandas.DataFrame",
                    "None",
                    "Union[str,int]",
                    "Optional[str]",
                    "bool"
                ],
                "ml_model_name": [
                    "int",
                    "None",
                    "Dict[str,Any]",
                    "str",
                    "Optional[Dict[str,Any]]",
                    "List",
                    "grouper.models.group.Group",
                    "Optional[str]",
                    "Optional[list]",
                    "Optional[int]",
                    "bool"
                ],
                "for_competition_only": [
                    "bool"
                ]
            }
        },
        "_collect_data_by_round": {
            "name": "_collect_data_by_round",
            "location": 306,
            "return": [
                "List",
                "Dict[str,pandas.DataFrame]",
                "bool",
                "Dict[str,Any]",
                "bytes"
            ],
            "arguments": {
                "data_frame": [
                    "str",
                    "pandas.DataFrame",
                    "Dict[str,Any]",
                    "int",
                    "Union[int,numpy.ndarray]"
                ]
            }
        },
        "_filter_by_round": {
            "name": "_filter_by_round",
            "location": 323,
            "return": [
                "str",
                "bool",
                "OrderedDict",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "data_frame": [
                    "pandas.DataFrame",
                    "Any",
                    "Sequence[Mapping]",
                    "Optional[Any]",
                    "int",
                    "None"
                ],
                "round_number": [
                    "Dict[str,Optional[str]]",
                    "None",
                    "Optional[Any]",
                    "Dict[str,Union[str,None]]",
                    "Optional[str]",
                    "Any",
                    "Optional[numpy.ndarray]",
                    "str"
                ]
            }
        },
        "_calculate_cumulative_bits": {
            "name": "_calculate_cumulative_bits",
            "location": 336,
            "return": [
                "str"
            ],
            "arguments": {
                "data_frame": [
                    "int",
                    "pandas.DataFrame",
                    "str",
                    "Dict[str,Any]",
                    "numpy.ndarray",
                    "Union[int,str]"
                ]
            }
        },
        "_calculate_bits": {
            "name": "_calculate_bits",
            "location": 347,
            "return": [
                "float",
                "str"
            ],
            "arguments": {
                "data_frame": [
                    "Tuple",
                    "pandas.DataFrame",
                    "bytes",
                    "str",
                    "Union[bytes,str]",
                    "List[list[str]]",
                    "int",
                    "List[List[str]]"
                ]
            }
        },
        "_calculate_cumulative_mae": {
            "name": "_calculate_cumulative_mae",
            "location": 373,
            "return": [
                "str"
            ],
            "arguments": {
                "data_frame": [
                    "int",
                    "pandas.DataFrame",
                    "numpy.ndarray"
                ]
            }
        },
        "_calculate_cumulative_margin_difference": {
            "name": "_calculate_cumulative_margin_difference",
            "location": 384,
            "return": [
                "str",
                "pandas._FileOrBuffer[AnyStr]"
            ],
            "arguments": {
                "data_frame": [
                    "int",
                    "pandas.DataFrame",
                    "numpy.ndarray"
                ]
            }
        },
        "RoundPredictionType.resolve_match_predictions": {
            "name": "resolve_match_predictions",
            "location": 94,
            "return": [
                "List",
                "Callable[[T],bool]",
                "Iterable[T]"
            ],
            "arguments": {
                "root": [
                    "int",
                    "graphene.ResolveInfo",
                    "story.models.Story",
                    "story.models.Choice"
                ],
                "_info": [
                    "List",
                    "Callable",
                    "graphene.ResolveInfo"
                ]
            }
        },
        "ModelMetricsByRoundType.resolve_ml_model": {
            "name": "resolve_ml_model",
            "location": 229,
            "return": [
                "jumeaux.models.Reqs2ReqsAddOnPayload",
                "dict",
                "Tuple[str, int, Dict[str, str]]",
                "str",
                "bool"
            ],
            "arguments": {
                "root": [
                    "str",
                    "Dict[str,Any]",
                    "Dict",
                    "Optional[str]",
                    "Dict[str,Tuple[str,str]]"
                ],
                "_info": [
                    "str",
                    "graphql.ResolveInfo",
                    "T"
                ]
            }
        },
        "RoundType.resolve_model_metrics": {
            "name": "resolve_model_metrics",
            "location": 275,
            "return": [
                "List",
                "float",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "root": [
                    "str",
                    "int",
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "Optional",
                    "Optional[Dict]",
                    "Dict",
                    "Optional[str]",
                    "None"
                ],
                "_info": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "None"
                ],
                "ml_model_name": [
                    "str",
                    "None",
                    "int",
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "Optional",
                    "Optional[Dict]",
                    "Optional[str]",
                    "Dict"
                ],
                "for_competition_only": [
                    "bool",
                    "str",
                    "int",
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "Optional[Dict]",
                    "Optional[str]",
                    "Optional"
                ]
            }
        },
        "SeasonType.resolve_season": {
            "name": "resolve_season",
            "location": 412,
            "return": [
                "salon.models.Stylist",
                "Callable[..., None]",
                "int",
                "Dict[str, Any]",
                "Tuple[str]",
                "bool"
            ],
            "arguments": {
                "prediction_query_set": [
                    "List[Optional[str]]",
                    "bool",
                    "float",
                    "T",
                    "int"
                ],
                "_info": []
            }
        },
        "SeasonType.resolve_round_model_metrics": {
            "name": "resolve_round_model_metrics",
            "location": 421,
            "return": [
                "List",
                "Dict[str,int]",
                "int",
                "Optional[int]",
                "List[int]"
            ],
            "arguments": {
                "prediction_query_set": [
                    "str",
                    "Optional[Any]",
                    "Any",
                    "zerver.models.UserProfile",
                    "None"
                ],
                "_info": [
                    "str",
                    "List",
                    "bytes",
                    "django.core.files.uploadedfile.UploadedFile"
                ],
                "round_number": [
                    "Optional[int]",
                    "None",
                    "str",
                    "models.User",
                    "int"
                ]
            }
        }
    },
    "tipresias-main/backend/server/graphql/types/__init__.py": {},
    "tipresias-main/backend/server/management/__init__.py": {},
    "tipresias-main/backend/server/management/commands/seed_db.py": {
        "DataImporter.fetch_ml_models": {
            "name": "fetch_ml_models",
            "location": 20,
            "return": [
                "list",
                "Optional[str]",
                "bool",
                "str",
                "List[Tuple[bool, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataImporter.fetch_matches": {
            "name": "fetch_matches",
            "location": 30,
            "return": [
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "start_date": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "end_date": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "fetch_data": [
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        },
        "DataImporter.fetch_match_predictions": {
            "name": "fetch_match_predictions",
            "location": 61,
            "return": [
                "List[str]",
                "Optional[zerver.models.Realm]",
                "bool",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "year_range": [
                    "Dict[str,Any]",
                    "bool",
                    "Dict",
                    "requests.Response",
                    "int"
                ],
                "round_number": [
                    "Dict[str,Any]",
                    "None",
                    "bool",
                    "Dict",
                    "requests.Response",
                    "int"
                ],
                "ml_models": [
                    "Dict[str,Any]",
                    "None",
                    "bool",
                    "Dict",
                    "requests.Response",
                    "int"
                ],
                "train_models": [
                    "bool",
                    "Dict[str,Any]",
                    "requests.Response",
                    "int",
                    "Dict"
                ]
            }
        },
        "DataImporter._fetch_data": {
            "name": "_fetch_data",
            "location": 98,
            "return": [
                "int",
                "bool",
                "List[mtg_ssm.scryfall.models.ScrySet]",
                "limbic.emotion.models.LexiconLimbicModel",
                "dict"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "params": [
                    "str",
                    "None",
                    "Dict[str,List[str]]",
                    "Dict[str,list[str]]"
                ]
            }
        },
        "Command.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command._create_db_records": {
            "name": "_create_db_records",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command._create_ml_models": {
            "name": "_create_ml_models",
            "location": 227,
            "return": [
                "List",
                "str",
                "django.db.models.QuerySet",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command._create_matches": {
            "name": "_create_matches",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command._get_or_create_match": {
            "name": "_get_or_create_match",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "match_data": [
                    "str",
                    "bool",
                    "Dict",
                    "MutableMapping",
                    "Dict[str,float]"
                ]
            }
        },
        "Command._make_predictions": {
            "name": "_make_predictions",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command._get_or_create_ml_model": {
            "name": "_get_or_create_ml_model",
            "location": 273,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "ml_model": [
                    "str",
                    "core.D.VersionedIdentifier",
                    "Union[int,str]",
                    "float",
                    "Optional[str]",
                    "src.core.model.scripScript"
                ]
            }
        },
        "Command._year_range": {
            "name": "_year_range",
            "location": 280,
            "return": [
                "int",
                "str",
                "float",
                "None",
                "django.template.Context",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tipresias-main/backend/server/management/commands/send_email.py": {
        "Command.handle": {
            "name": "handle",
            "location": 38,
            "return": [
                "None",
                "Optional[str]",
                "Type",
                "Optional[List[Any]]",
                "List"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.__map_prediction_to_row": {
            "name": "__map_prediction_to_row",
            "location": 69,
            "return": [
                "List[Union[str,float]]",
                "str",
                "Optional[List[str]]",
                "Optional[Dict[str,str]]"
            ],
            "arguments": {
                "match": [
                    "Dict",
                    "Dict[str,Any]",
                    "Dict[str,float]",
                    "Dict[str,List[str]]",
                    "Dict[str,list[str]]"
                ]
            }
        },
        "Command.__send_tips_email": {
            "name": "__send_tips_email",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "prediction_rows": [
                    "int",
                    "Dict",
                    "List[List[Any]]",
                    "List[list[Any]]",
                    "List[list]",
                    "str",
                    "Union[str,List[str]]",
                    "List[str]",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]",
                    "List[Tuple[int,int]]",
                    "List[tuple[Union[int,int]]]"
                ],
                "latest_round": [
                    "int",
                    "Tuple",
                    "str"
                ]
            }
        }
    },
    "tipresias-main/backend/server/management/commands/__init__.py": {},
    "tipresias-main/backend/server/migrations/0001_initial.py": {},
    "tipresias-main/backend/server/migrations/0002_auto_20181101_0315.py": {},
    "tipresias-main/backend/server/migrations/0003_auto_20181225_0646.py": {},
    "tipresias-main/backend/server/migrations/0004_auto_20181228_0538.py": {},
    "tipresias-main/backend/server/migrations/0005_auto_20181231_0628.py": {},
    "tipresias-main/backend/server/migrations/0006_auto_20190530_1222.py": {},
    "tipresias-main/backend/server/migrations/0007_auto_20200206_0010.py": {},
    "tipresias-main/backend/server/migrations/0008_auto_20200425_0618.py": {},
    "tipresias-main/backend/server/migrations/0009_auto_20200425_1231.py": {},
    "tipresias-main/backend/server/migrations/0010_auto_20200530_0737.py": {},
    "tipresias-main/backend/server/migrations/0011_auto_20200613_1025.py": {},
    "tipresias-main/backend/server/migrations/0012_auto_20200614_0106.py": {},
    "tipresias-main/backend/server/migrations/0013_auto_20201023_0712.py": {},
    "tipresias-main/backend/server/migrations/__init__.py": {},
    "tipresias-main/backend/server/models/match.py": {
        "validate_is_utc": {
            "name": "validate_is_utc",
            "location": 24,
            "return": [
                "None",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "start_date_time": [
                    "str",
                    "int",
                    "datetime.datetime",
                    "datetime.date"
                ]
            }
        },
        "Match.get_or_create_from_raw_data": {
            "name": "get_or_create_from_raw_data",
            "location": 54,
            "return": [
                "Dict[int, str]",
                "OrderedDict",
                "static_frame.core.frame.Frame",
                "Mapping[int, str]"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "str",
                    "Type[T]",
                    "bool",
                    "Callable[Any,T]",
                    "Callable[[Any],T]",
                    "int"
                ],
                "match_data": [
                    "grouper.models.base.session.Session",
                    "dict",
                    "Optional[Dict[object, Any]]",
                    "raiden.utils.Dict[str, raiden.utils.Any]"
                ]
            }
        },
        "Match.played_without_results": {
            "name": "played_without_results",
            "location": 89,
            "return": [
                "str",
                "aiogram.types.Message",
                "bool",
                "hackathon.utils.utils.DataMessage"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "float",
                    "pandas.DataFrame"
                ]
            }
        },
        "Match.earliest_date_time_without_results": {
            "name": "earliest_date_time_without_results",
            "location": 109,
            "return": [
                "None",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ]
            }
        },
        "Match.update_results": {
            "name": "update_results",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "float",
                    "int",
                    "List[List]",
                    "Union[int, float]",
                    "list"
                ],
                "match_results": [
                    "list",
                    "Callable",
                    "bool",
                    "List[List[Any]]",
                    "int"
                ]
            }
        },
        "Match.update_result": {
            "name": "update_result",
            "location": 141,
            "return": [
                "None",
                "Optional[int]",
                "Optional[bool]",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "match_result": [
                    "Dict[str,Any]",
                    "pandas.DataFrame",
                    "Sequence[T]",
                    "None",
                    "Optional[Dict[str,Any]]",
                    "Callable[T,bool]",
                    "raiden.utils.Dict[str,raiden.utils.Any]",
                    "Callable[[T],bool]",
                    "starfish.core.types.SpotFindingResults"
                ]
            }
        },
        "Match._validate_results_data_presence": {
            "name": "_validate_results_data_presence",
            "location": 167,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "match_result": [
                    "bool",
                    "pandas.DataFrame",
                    "datetime.datetime"
                ]
            }
        },
        "Match._validate_one_result_row": {
            "name": "_validate_one_result_row",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "match_result": [
                    "bool",
                    "pandas.DataFrame",
                    "datetime.datetime",
                    "rl_algorithms.utils.config.ConfigDict"
                ]
            }
        },
        "Match.is_draw": {
            "name": "is_draw",
            "location": 206,
            "return": [
                "int",
                "Dict[str, int]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Match.year": {
            "name": "year",
            "location": 213,
            "return": [
                "str",
                "datetime.date",
                "datetime.timedelta",
                "pandas.core.series.Series"
            ],
            "arguments": {
                "self": []
            }
        },
        "Match.team": {
            "name": "team",
            "location": 217,
            "return": [
                "raiden.utils.BlockNumber",
                "raiden.utils.TokenAmount",
                "List[Dict[str, Any]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "at_home": [
                    "Optional[bytes]",
                    "int",
                    "None",
                    "bytes"
                ]
            }
        },
        "Match.has_been_played": {
            "name": "has_been_played",
            "location": 225,
            "return": [
                "bool",
                "Optional[str]",
                "Union[List[str],List[Any]]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Match.has_results": {
            "name": "has_results",
            "location": 231,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Match._has_score": {
            "name": "_has_score",
            "location": 236,
            "return": [
                "bool",
                "Tuple[int]",
                "List[str]",
                "List[Tuple[str,Any]]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Match._match_scores": {
            "name": "_match_scores",
            "location": 240,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Match._save_result": {
            "name": "_save_result",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Match._calculate_margin": {
            "name": "_calculate_margin",
            "location": 249,
            "return": [
                "None",
                "Optional[bool]",
                "Optional[str]",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Match._calculate_winner": {
            "name": "_calculate_winner",
            "location": 257,
            "return": [
                "None",
                "Optional[str]",
                "Optional[int]",
                "Optional[bool]",
                "Optional[guillotina.db.interfaces.ITransaction]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tipresias-main/backend/server/models/ml_model.py": {
        "MLModel.clean": {
            "name": "clean",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tipresias-main/backend/server/models/prediction.py": {
        "Prediction.update_or_create_from_raw_data": {
            "name": "update_or_create_from_raw_data",
            "location": 42,
            "return": [
                "None",
                "Optional[bool]",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Dict[str, Any]",
                    "Optional[bytes]",
                    "raiden.utils.Dict[str, raiden.utils.Any]",
                    "Dict[int, dict]"
                ],
                "prediction_data": [
                    "Dict",
                    "Dict[str,Any]",
                    "Dict[int,dict]",
                    "Optional[bytes]",
                    "bytes",
                    "raiden.utils.Dict[str,raiden.utils.Any]",
                    "None"
                ],
                "future_only": [
                    "bool",
                    "Dict[str,Set[str]]",
                    "Optional[bool]",
                    "Mapping[str,str]",
                    "str",
                    "Dict[str,str]"
                ]
            }
        },
        "Prediction._calculate_predictions": {
            "name": "_calculate_predictions",
            "location": 101,
            "return": [
                "Tuple[None]",
                "Optional[str]",
                "Tuple",
                "Optional[bool]",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "mypy.types.Type"
                ],
                "prediction_data": [
                    "str",
                    "core.I.CanonicalStorage"
                ],
                "prediction_type": [
                    "str",
                    "dep_check.models.ModuleWildcard",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "Prediction._calculate_predicted_margin": {
            "name": "_calculate_predicted_margin",
            "location": 153,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "float",
                    "int"
                ],
                "home_margin": [
                    "int",
                    "float",
                    "List[str]",
                    "numpy.ndarray",
                    "Tuple[int,int]"
                ],
                "away_margin": [
                    "int",
                    "float",
                    "List[str]",
                    "numpy.ndarray",
                    "Tuple[int,int]"
                ]
            }
        },
        "Prediction._calculate_predicted_win_probability": {
            "name": "_calculate_predicted_win_probability",
            "location": 167,
            "return": [
                "int",
                "bool",
                "float",
                "str"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "List[str]",
                    "str",
                    "bool"
                ],
                "home_win_probability": [
                    "int",
                    "None",
                    "raiden.utils.Signature",
                    "Optional[int]",
                    "raiden.utils.BlockExpiration",
                    "raiden.utils.Dict[raiden.utils.Any,raiden.utils.Any]",
                    "raiden.utils.WithdrawAmount",
                    "raiden.utils.Address",
                    "raiden.utils.ChannelID"
                ],
                "away_win_probability": [
                    "int",
                    "None",
                    "raiden.utils.Signature",
                    "Optional[int]",
                    "raiden.utils.BlockExpiration",
                    "raiden.utils.Dict[raiden.utils.Any,raiden.utils.Any]",
                    "raiden.utils.WithdrawAmount",
                    "raiden.utils.Address",
                    "raiden.utils.ChannelID"
                ]
            }
        },
        "Prediction._calculate_predicted_winner": {
            "name": "_calculate_predicted_winner",
            "location": 183,
            "return": [
                "str",
                "jobs.models.Job",
                "MutableSequence[utils.CWLObjectType]",
                "Callable"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Dict",
                    "int"
                ],
                "prediction_data": [
                    "str",
                    "int"
                ],
                "home_predicted_result": [
                    "str",
                    "int",
                    "List[int]",
                    "Tuple[Literal,Literal]",
                    "Tuple[Union[Literal,Literal]]"
                ],
                "away_predicted_result": [
                    "str",
                    "int",
                    "List[int]",
                    "Tuple[Literal,Literal]",
                    "Tuple[Union[Literal,Literal]]"
                ]
            }
        },
        "Prediction._matching_attributes_for_update": {
            "name": "_matching_attributes_for_update",
            "location": 195,
            "return": [
                "None",
                "Optional[str]",
                "Dict[Text,Union[dict[str,str],str,list,Type]]",
                "Optional[float]",
                "Dict",
                "Union[str,None]"
            ],
            "arguments": {
                "cls": [
                    "Dict[str,Any]",
                    "int",
                    "Type",
                    "str",
                    "Type[T]",
                    "T",
                    "List[dict[str,Any]]",
                    "List[Dict[str,Any]]"
                ],
                "prediction_data": [
                    "str",
                    "List[int]",
                    "int",
                    "Tuple[Union[str,list[str]]]",
                    "django.http.HttpResponse",
                    "Tuple[str,List[str]]"
                ],
                "future_only": [
                    "Dict[str,Any]",
                    "datetime.datetime",
                    "List[str]",
                    "int",
                    "str",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "Prediction.clean": {
            "name": "clean",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Prediction.update_correctness": {
            "name": "update_correctness",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Prediction._calculate_whether_correct": {
            "name": "_calculate_whether_correct",
            "location": 262,
            "return": [
                "Optional[str]",
                "None",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tipresias-main/backend/server/models/team.py": {
        "validate_name": {
            "name": "validate_name",
            "location": 9,
            "return": [
                "None",
                "str",
                "Optional[List[str]]"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        }
    },
    "tipresias-main/backend/server/models/team_match.py": {
        "TeamMatch.get_or_create_from_raw_data": {
            "name": "get_or_create_from_raw_data",
            "location": 28,
            "return": [
                "Tuple",
                "str",
                "Dict",
                "MutableMapping[str,Any]",
                "app.types.HTML"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "dict",
                    "Tuple[Type]",
                    "Optional[List[float]]"
                ],
                "match": [
                    "str",
                    "Type",
                    "Optional[str]",
                    "None"
                ],
                "match_data": [
                    "Tuple[Union[set[Any],set[Any]]]",
                    "Dict",
                    "Tuple[Set[Any],Set[Any]]",
                    "Dict[str,Any]"
                ]
            }
        },
        "TeamMatch._create_from_raw_data": {
            "name": "_create_from_raw_data",
            "location": 71,
            "return": [
                "TeamMatch",
                "int",
                "Dict[str,int]",
                "Callable",
                "Dict[str,float]",
                "Dict[str,Dict[str,int]]",
                "Optional[zerver.models.Realm]",
                "Dict[int,List[Any]]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Type[T]",
                    "Type",
                    "List[List[str]]",
                    "List[list[str]]",
                    "List[List[Any]]",
                    "List[list[Any]]"
                ],
                "match": [
                    "str",
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "match_data": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "str",
                    "List[str]"
                ],
                "at_home": [
                    "str",
                    "Pattern",
                    "List",
                    "Union[Literal,Literal]"
                ]
            }
        },
        "TeamMatch.update_score": {
            "name": "update_score",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "match_result": [
                    "str",
                    "List[str]",
                    "Dict[str,Any]",
                    "Union[str,List[str]]"
                ]
            }
        }
    },
    "tipresias-main/backend/server/models/__init__.py": {},
    "tipresias-main/backend/server/tests/__init__.py": {},
    "tipresias-main/backend/server/tests/fixtures/data_factories.py": {
        "fake_match_results_data": {
            "name": "fake_match_results_data",
            "location": 17,
            "return": [
                "bool",
                "int",
                "list",
                "float"
            ],
            "arguments": {
                "match_results": [
                    "pandas.DataFrame",
                    "dict",
                    "Optional[Any]",
                    "List[Dict]"
                ],
                "seasons": [
                    "List[Dict]",
                    "numpy.ndarray",
                    "dict"
                ]
            }
        },
        "fake_fixture_data": {
            "name": "fake_fixture_data",
            "location": 39,
            "return": [
                "List[int]",
                "List[dict]",
                "str",
                "bytes",
                "bool",
                "torch.nn.utils.rnn.PackedSequence"
            ],
            "arguments": {
                "fixtures": [
                    "Type",
                    "int",
                    "str",
                    "utils.Node"
                ],
                "seasons": [
                    "Optional[\"Environment\"]",
                    "numpy.ndarray"
                ]
            }
        },
        "_fake_prediction_results": {
            "name": "_fake_prediction_results",
            "location": 63,
            "return": [
                "float",
                "lunch_buddies.models.polls.Poll",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "match_count": [
                    "Optional[int]",
                    "Optional[float]",
                    "str",
                    "Optional[Union[int, float]]"
                ],
                "predict_margin": [
                    "bool",
                    "int",
                    "Optional[bool]"
                ]
            }
        },
        "_fake_match_data_for_pred": {
            "name": "_fake_match_data_for_pred",
            "location": 80,
            "return": [
                "Union[str, IO]",
                "pandas.DataFrame",
                "dict",
                "str",
                "Callable[[Dict], None]",
                "Dict[str, Any]",
                "IO[str]"
            ],
            "arguments": {
                "match_data": [
                    "dict",
                    "pandas.DataFrame"
                ]
            }
        },
        "fake_prediction_data": {
            "name": "fake_prediction_data",
            "location": 105,
            "return": [
                "bool"
            ],
            "arguments": {
                "match_data": [
                    "str",
                    "Optional[dict]",
                    "Optional[Dict[str, str]]",
                    "bool"
                ],
                "ml_model_name": [
                    "bool",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "predict_margin": [
                    "bool",
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        }
    },
    "tipresias-main/backend/server/tests/fixtures/factories.py": {
        "_fake_datetime": {
            "name": "_fake_datetime",
            "location": 49,
            "return": [
                "datetime.datetime",
                "int",
                "Union[str, int]",
                "datetime.timedelta"
            ],
            "arguments": {
                "match_factory": [
                    "int",
                    "datetime.datetime",
                    "None",
                    "str",
                    "Optional[datetime.date]",
                    "Optional[Union[str,datetime.datetime]]"
                ],
                "n": [
                    "int",
                    "float",
                    "bool",
                    "List[int]"
                ],
                "start_month_day": [
                    "Tuple[int]",
                    "datetime.datetime",
                    "int",
                    "Optional[datetime.date]"
                ]
            }
        },
        "_fake_future_datetime": {
            "name": "_fake_future_datetime",
            "location": 101,
            "return": [
                "int",
                "numpy.ndarray",
                "tuple",
                "bool",
                "str"
            ],
            "arguments": {
                "match_factory": [
                    "str",
                    "int",
                    "Optional[Exception]",
                    "Exception",
                    "Optional[int]",
                    "None"
                ],
                "n": [
                    "int",
                    "float",
                    "None",
                    "Union[int,None]",
                    "Optional[int]",
                    "Optional[numpy.ndarray]"
                ]
            }
        },
        "TeamMatchFactory.save_match_result": {
            "name": "save_match_result",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "Dict[str,Any]"
                ],
                "_create": [
                    "List[str]",
                    "Dict",
                    "int",
                    "str"
                ],
                "_extracted": [
                    "List[str]",
                    "Dict",
                    "int",
                    "str"
                ]
            }
        }
    },
    "tipresias-main/backend/server/tests/fixtures/seed_db.py": {
        "main": {
            "name": "main",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tipresias-main/backend/server/tests/fixtures/__init__.py": {},
    "tipresias-main/backend/server/tests/integration/test_api.py": {
        "TestApi.setUp": {
            "name": "setUp",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApi.test_update_fixture_data": {
            "name": "test_update_fixture_data",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApi.test_backfill_recent_match_results": {
            "name": "test_backfill_recent_match_results",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApi.test_fetch_next_match": {
            "name": "test_fetch_next_match",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApi.test_update_future_match_predictions": {
            "name": "test_update_future_match_predictions",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApi.fetch_latest_round_predictions": {
            "name": "fetch_latest_round_predictions",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tipresias-main/backend/server/tests/integration/test_urls.py": {
        "TestUrls.setUp": {
            "name": "setUp",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUrls.test_predictions": {
            "name": "test_predictions",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tipresias-main/backend/server/tests/integration/__init__.py": {},
    "tipresias-main/backend/server/tests/integration/management/__init__.py": {},
    "tipresias-main/backend/server/tests/integration/management/commands/test_seed_db.py": {
        "TestSeedDb.setUp": {
            "name": "setUp",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSeedDb.test_handle": {
            "name": "test_handle",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSeedDb.test_handle_errors": {
            "name": "test_handle_errors",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSeedDb.__match_results_side_effect": {
            "name": "__match_results_side_effect",
            "location": 98,
            "return": [
                "bool",
                "grouper.models.group.Group",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": [],
                "start_date": [
                    "Optional[int]",
                    "None",
                    "Optional[Union[str,int]]",
                    "int",
                    "str"
                ],
                "end_date": [
                    "Optional[int]",
                    "None",
                    "Optional[Union[str,int]]",
                    "int",
                    "str"
                ],
                "fetch_data": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        }
    },
    "tipresias-main/backend/server/tests/integration/management/commands/test_send_email.py": {
        "TestSendEmail.setUp": {
            "name": "setUp",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSendEmail.test_handle": {
            "name": "test_handle",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tipresias-main/backend/server/tests/integration/management/commands/__init__.py": {},
    "tipresias-main/backend/server/tests/unit/test_views.py": {
        "TestViews.setUp": {
            "name": "setUp",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestViews.test_predictions": {
            "name": "test_predictions",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestViews.test_fixtures": {
            "name": "test_fixtures",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestViews.test_matches": {
            "name": "test_matches",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tipresias-main/backend/server/tests/unit/__init__.py": {},
    "tipresias-main/backend/server/tests/unit/graphql/test_calculations.py": {
        "TestCalculations.test_calculate_cumulative_metrics": {
            "name": "test_calculate_cumulative_metrics",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tipresias-main/backend/server/tests/unit/graphql/test_schema.py": {
        "TestSchema.setUp": {
            "name": "setUp",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchema.test_fetch_predictions": {
            "name": "test_fetch_predictions",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchema.test_fetch_season_performance_chart_parameters": {
            "name": "test_fetch_season_performance_chart_parameters",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchema.test_fetch_season_model_metrics": {
            "name": "test_fetch_season_model_metrics",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchema.test_fetch_latest_round_predictions": {
            "name": "test_fetch_latest_round_predictions",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchema.test_fetch_season_model_metrics_cumulative_metrics": {
            "name": "test_fetch_season_model_metrics_cumulative_metrics",
            "location": 435,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchema.test_fetch_ml_models": {
            "name": "test_fetch_ml_models",
            "location": 549,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchema.test_fetch_latest_round_metrics": {
            "name": "test_fetch_latest_round_metrics",
            "location": 613,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchema._assert_correct_prediction_results": {
            "name": "_assert_correct_prediction_results",
            "location": 709,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "results": [
                    "str",
                    "Dict",
                    "Tuple[int,int]",
                    "int",
                    "Tuple[Union[int,int]]"
                ],
                "expected_results": [
                    "Dict[str,Any]",
                    "Dict",
                    "Dict[str,str]",
                    "Dict[str,List[str]]",
                    "Dict[str,list[str]]"
                ]
            }
        },
        "TestSchema._sort_results": {
            "name": "_sort_results",
            "location": 722,
            "return": [
                "List",
                "int",
                "str"
            ],
            "arguments": {
                "results": [
                    "Dict"
                ]
            }
        }
    },
    "tipresias-main/backend/server/tests/unit/graphql/__init__.py": {},
    "tipresias-main/backend/server/tests/unit/models/test_match.py": {
        "TestMatch.setUp": {
            "name": "setUp",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMatch.test_get_or_create_from_raw_data": {
            "name": "test_get_or_create_from_raw_data",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMatch.test_played_without_results": {
            "name": "test_played_without_results",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMatch.test_earliest_date_time_without_results": {
            "name": "test_earliest_date_time_without_results",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMatch.test_update_results": {
            "name": "test_update_results",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_update_result": [
                    "bool",
                    "tests.setup.SetupTest"
                ]
            }
        },
        "TestMatch.test_update_result": {
            "name": "test_update_result",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMatch.test_year": {
            "name": "test_year",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMatch.test_is_draw": {
            "name": "test_is_draw",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMatch.test_has_been_played": {
            "name": "test_has_been_played",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMatch.test_has_results": {
            "name": "test_has_results",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMatch.test_validations": {
            "name": "test_validations",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tipresias-main/backend/server/tests/unit/models/test_ml_model.py": {
        "TestMLModel.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMLModel.test_validation": {
            "name": "test_validation",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMLModel.test_clean": {
            "name": "test_clean",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMLModel.test_one_principal_model": {
            "name": "test_one_principal_model",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMLModel.test_unique_competition_prediction_type": {
            "name": "test_unique_competition_prediction_type",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tipresias-main/backend/server/tests/unit/models/test_prediction.py": {
        "TestPrediction.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPrediction.test_update_or_create_from_raw_data": {
            "name": "test_update_or_create_from_raw_data",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPrediction.test_clean": {
            "name": "test_clean",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPrediction.test_validation": {
            "name": "test_validation",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPrediction.test_update_correctness": {
            "name": "test_update_correctness",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tipresias-main/backend/server/tests/unit/models/test_team.py": {
        "TestTeam.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTeam.test_validation": {
            "name": "test_validation",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tipresias-main/backend/server/tests/unit/models/test_team_match.py": {
        "TestTeamMatch.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTeamMatch.test_get_or_create_from_raw_data": {
            "name": "test_get_or_create_from_raw_data",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTeamMatch.test_update_score": {
            "name": "test_update_score",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tipresias-main/backend/server/tests/unit/models/__init__.py": {},
    "tipresias-main/tipping/handler.py": {
        "rollbar_ignore_handler": {
            "name": "rollbar_ignore_handler",
            "location": 26,
            "return": [
                "bool",
                "Dict",
                "Dict[str,Any]"
            ],
            "arguments": {
                "payload": [
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "_response": {
            "name": "_response",
            "location": 54,
            "return": [
                "int",
                "Dict[Text,int]"
            ],
            "arguments": {
                "data": [
                    "Dict[str,Any]",
                    "int",
                    "str",
                    "List[Dict[str,str]]",
                    "List[dict[str,str]]"
                ],
                "status_code": [
                    "int",
                    "Dict[str,Any]",
                    "str",
                    "List[Dict[str,str]]"
                ]
            }
        },
        "_request_is_authorized": {
            "name": "_request_is_authorized",
            "location": 62,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "http_request": [
                    "List[Dict[str,Any]]",
                    "str",
                    "List[dict[str,Any]]",
                    "Dict[str,Any]"
                ]
            }
        },
        "update_fixture_data": {
            "name": "update_fixture_data",
            "location": 72,
            "return": [
                "Optional[str]",
                "dict",
                "Optional[Dict[str, Any]]",
                "Dict[str, Any]",
                "List[dict]",
                "bytes"
            ],
            "arguments": {
                "_event": [
                    "Dict",
                    "List",
                    "str"
                ],
                "_context": [
                    "Dict",
                    "List",
                    "str"
                ],
                "verbose": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "update_match_predictions": {
            "name": "update_match_predictions",
            "location": 84,
            "return": [
                "int",
                "List[str]",
                "Optional[Dict[str, Any]]",
                "bytes",
                "Dict[str, str]",
                "dict",
                "str"
            ],
            "arguments": {
                "event": [
                    "Dict[str,Any]",
                    "Dict",
                    "str",
                    "Optional[Dict]"
                ],
                "_context": [
                    "bool",
                    "List",
                    "str",
                    "Dict"
                ],
                "verbose": [
                    "int",
                    "Dict",
                    "Mapping",
                    "Dict[str,bool]"
                ]
            }
        },
        "update_matches": {
            "name": "update_matches",
            "location": 97,
            "return": [
                "int",
                "List[str]",
                "Optional[Dict[str, Any]]",
                "bytes",
                "Dict[str, str]",
                "dict",
                "str"
            ],
            "arguments": {
                "_event": [
                    "bool",
                    "List",
                    "str",
                    "Dict"
                ],
                "_context": [
                    "bool",
                    "List",
                    "str",
                    "Dict"
                ],
                "verbose": [
                    "int",
                    "Dict",
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "update_match_results": {
            "name": "update_match_results",
            "location": 109,
            "return": [
                "Dict[str, Any]",
                "lambda_handlers.types.APIGatewayProxyResult",
                "int",
                "str",
                "Dict[str, float]"
            ],
            "arguments": {
                "_event": [
                    "str"
                ],
                "_context": [
                    "str"
                ],
                "verbose": [
                    "int",
                    "Dict[str,Any]",
                    "Union[Callable,None]"
                ]
            }
        }
    },
    "tipresias-main/tipping/alembic/env.py": {
        "run_migrations_offline": {
            "name": "run_migrations_offline",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_migrations_online": {
            "name": "run_migrations_online",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tipresias-main/tipping/alembic/versions/11aa784195ef_added_team_matches_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tipresias-main/tipping/alembic/versions/1dd5bda9df82_added_matches_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tipresias-main/tipping/alembic/versions/6430c0506353_seeded_teams_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tipresias-main/tipping/alembic/versions/78f15e41337c_made_score_nullable.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tipresias-main/tipping/alembic/versions/7e60a33f42bb_added_ml_models_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tipresias-main/tipping/alembic/versions/bdb2f19f08e1_added_team_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tipresias-main/tipping/alembic/versions/e6d9a7e24d0f_added_predictions_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tipresias-main/tipping/scripts/reset_fauna_data.py": {
        "_execute_with_retries": {
            "name": "_execute_with_retries",
            "location": 52,
            "return": [
                "bool",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "query": [
                    "Dict[str, str]",
                    "int",
                    "str"
                ],
                "retries": [
                    "str"
                ]
            }
        },
        "_print_document_counts": {
            "name": "_print_document_counts",
            "location": 67,
            "return": [],
            "arguments": {}
        },
        "_assign_ref": {
            "name": "_assign_ref",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "ref_collection": [
                    "Optional[int]",
                    "str",
                    "bytes",
                    "int"
                ],
                "ref_map": [
                    "Optional[int]",
                    "str",
                    "bytes",
                    "int"
                ],
                "record_id": [
                    "Optional[int]",
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "_create_documents": {
            "name": "_create_documents",
            "location": 82,
            "return": [
                "Union[int, float, complex]",
                "list",
                "set"
            ],
            "arguments": {
                "let_params": [
                    "bool",
                    "str"
                ],
                "records": [
                    "BinaryIO",
                    "int"
                ],
                "build_document": [
                    "bool",
                    "str"
                ]
            }
        },
        "_load_predictions": {
            "name": "_load_predictions",
            "location": 112,
            "return": [],
            "arguments": {
                "data": [
                    "str",
                    "Union[List, Dict]",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        },
        "_load_team_matches": {
            "name": "_load_team_matches",
            "location": 162,
            "return": [],
            "arguments": {
                "data": [
                    "str"
                ]
            }
        },
        "_load_matches": {
            "name": "_load_matches",
            "location": 203,
            "return": [],
            "arguments": {
                "data": [
                    "dict",
                    "str",
                    "T",
                    "List[str]",
                    "type"
                ]
            }
        },
        "_load_ml_models": {
            "name": "_load_ml_models",
            "location": 234,
            "return": [],
            "arguments": {
                "ml_models": [
                    "list",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "_load_data_into_fauna": {
            "name": "_load_data_into_fauna",
            "location": 245,
            "return": [],
            "arguments": {
                "data": [
                    "dict",
                    "bytes",
                    "str"
                ]
            }
        },
        "_convert_value": {
            "name": "_convert_value",
            "location": 256,
            "return": [
                "Optional[str]",
                "datetime.date",
                "int",
                "str",
                "Tuple[str, str]",
                "Optional[datetime.datetime]",
                "datetime.datetime"
            ],
            "arguments": {
                "value": [
                    "str",
                    "bytes"
                ]
            }
        },
        "_convert_to_document": {
            "name": "_convert_to_document",
            "location": 263,
            "return": [
                "Union[str, int, float]",
                "str",
                "List[int]",
                "float"
            ],
            "arguments": {
                "record": [
                    "dict",
                    "str",
                    "Optional[Tuple[str, ...]]",
                    "Dict[str, Any]",
                    "List[float]"
                ]
            }
        },
        "_assign_ids_to_teams": {
            "name": "_assign_ids_to_teams",
            "location": 274,
            "return": [],
            "arguments": {
                "teams": [
                    "str"
                ]
            }
        },
        "_collect_db_data": {
            "name": "_collect_db_data",
            "location": 290,
            "return": [
                "bool",
                "Dict[str, int]",
                "dict",
                "float",
                "int"
            ],
            "arguments": {
                "acc": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[int, List[str]]"
                ],
                "record": [
                    "Optional[Iterable[T]]",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "_read_data_dump": {
            "name": "_read_data_dump",
            "location": 297,
            "return": [
                "List[str]",
                "int",
                "Optional[str]",
                "dict",
                "bytes",
                "Dict[str, str]"
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "_delete_data": {
            "name": "_delete_data",
            "location": 307,
            "return": [],
            "arguments": {}
        },
        "_set_up_fauna": {
            "name": "_set_up_fauna",
            "location": 317,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 327,
            "return": [],
            "arguments": {
                "filepath": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "bool",
                    "Sequence[str]"
                ]
            }
        }
    },
    "tipresias-main/tipping/sqlalchemy-fauna/setup.py": {},
    "tipresias-main/tipping/sqlalchemy-fauna/sqlalchemy_fauna/dbapi.py": {
        "connect": {
            "name": "connect",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "check_closed": {
            "name": "check_closed",
            "location": 28,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "f": [
                    "Iterable[str]",
                    "Callable",
                    "T"
                ]
            }
        },
        "check_result": {
            "name": "check_result",
            "location": 44,
            "return": [
                "int",
                "Type",
                "str",
                "bool"
            ],
            "arguments": {
                "f": [
                    "Iterable[Any]",
                    "str",
                    "Type[object]"
                ]
            }
        },
        "apply_parameters": {
            "name": "apply_parameters",
            "location": 229,
            "return": [
                "bool",
                "Callable[[KT, VT], bool]",
                "int"
            ],
            "arguments": {
                "operation": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ],
                "parameters": []
            }
        },
        "escape": {
            "name": "escape",
            "location": 235,
            "return": [
                "str",
                "Optional[str]",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Hashable",
                    "int",
                    "datetime.date",
                    "Union[str, int, float]",
                    "list"
                ]
            }
        },
        "check_closed.g": {
            "name": "g",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "check_result.g": {
            "name": "g",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FaunaQuery.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "float"
                ]
            }
        },
        "FaunaQuery.execute": {
            "name": "execute",
            "location": 64,
            "return": [
                "str",
                "Set[str]",
                "Iterable[Sequence[str]]",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "dict",
                    "bool",
                    "str"
                ]
            }
        },
        "FaunaQuery._get_description_from_data": {
            "name": "_get_description_from_data",
            "location": 77,
            "return": [
                "type",
                "bool",
                "Type[Any]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "str",
                    "Dict[str, object]",
                    "Optional[str]",
                    "type",
                    "Union[str, dict]"
                ]
            }
        },
        "FaunaQuery._get_description_from_query": {
            "name": "_get_description_from_query",
            "location": 102,
            "return": [
                "Optional[str]",
                "Iterable",
                "List[str]",
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str"
                ]
            }
        },
        "FaunaQuery._infer_field_type": {
            "name": "_infer_field_type",
            "location": 160,
            "return": [
                "str",
                "Type",
                "int",
                "Optional[type]",
                "Dict[str, type]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Iterable[Hashable]",
                    "dict"
                ]
            }
        },
        "FaunaConnection.__init__": {
            "name": "__init__",
            "location": 184,
            "return": [],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "int"
                ],
                "port": [
                    "str",
                    "int"
                ],
                "secret": [
                    "str",
                    "int"
                ],
                "scheme": [
                    "str",
                    "int"
                ]
            }
        },
        "FaunaConnection.close": {
            "name": "close",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FaunaConnection.commit": {
            "name": "commit",
            "location": 201,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FaunaConnection.cursor": {
            "name": "cursor",
            "location": 209,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FaunaConnection.execute": {
            "name": "execute",
            "location": 217,
            "return": [
                "Optional[int]",
                "List[str]",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "operation": [
                    "bool",
                    "Optional[Dict[str, str]]",
                    "int"
                ],
                "parameters": [
                    "bool",
                    "Optional[Dict[str, str]]",
                    "int"
                ]
            }
        },
        "FaunaConnection.__enter__": {
            "name": "__enter__",
            "location": 222,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FaunaConnection.__exit__": {
            "name": "__exit__",
            "location": 225,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FaunaCursor.__init__": {
            "name": "__init__",
            "location": 263,
            "return": [],
            "arguments": {
                "self": [],
                "fauna_query": [
                    "Union[int, float, complex]",
                    "Type[object]",
                    "Dict[str, Any]",
                    "list",
                    "int"
                ]
            }
        },
        "FaunaCursor.rowcount": {
            "name": "rowcount",
            "location": 283,
            "return": [
                "List[int]",
                "Dict[str, int]",
                "List[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FaunaCursor.close": {
            "name": "close",
            "location": 288,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FaunaCursor.execute": {
            "name": "execute",
            "location": 293,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "operation": [
                    "str",
                    "bytes",
                    "Callable[[bytes], bytes]",
                    "bool"
                ],
                "parameters": [
                    "Set[VT]",
                    "Dict[str, Any]"
                ]
            }
        },
        "FaunaCursor.executemany": {
            "name": "executemany",
            "location": 303,
            "return": [
                "str",
                "Optional[int]",
                "float",
                "bool"
            ],
            "arguments": {
                "self": [],
                "operation": [
                    "Optional[bool]",
                    "bool",
                    "int",
                    "Dict[str, Any]"
                ],
                "seq_of_parameters": [
                    "Optional[bool]",
                    "bool",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "FaunaCursor.fetchone": {
            "name": "fetchone",
            "location": 322,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]",
                "Optional[Sequence[str]]",
                "Optional[Callable]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FaunaCursor.fetchmany": {
            "name": "fetchmany",
            "location": 334,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "list",
                    "Tuple[int, int]",
                    "str"
                ]
            }
        },
        "FaunaCursor.fetchall": {
            "name": "fetchall",
            "location": 347,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "FaunaCursor.setinputsizes": {
            "name": "setinputsizes",
            "location": 359,
            "return": [],
            "arguments": {
                "self": [],
                "sizes": [
                    "int",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "FaunaCursor.setoutputsizes": {
            "name": "setoutputsizes",
            "location": 366,
            "return": [],
            "arguments": {
                "self": [],
                "sizes": [
                    "int",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "FaunaCursor.lastrowid": {
            "name": "lastrowid",
            "location": 376,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FaunaCursor.__iter__": {
            "name": "__iter__",
            "location": 381,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tipresias-main/tipping/sqlalchemy-fauna/sqlalchemy_fauna/dialect.py": {
        "FaunaExecutionContext.rowcount": {
            "name": "rowcount",
            "location": 64,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FaunaDialect.dbapi": {
            "name": "dbapi",
            "location": 83,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "FaunaDialect.do_executemany": {
            "name": "do_executemany",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cursor": [
                    "Optional[str]",
                    "Dict[str, List[str]]",
                    "int",
                    "Optional[Dict[str, Any]]"
                ],
                "statement": [
                    "Optional[str]",
                    "str",
                    "int",
                    "Dict[str,List[str]]",
                    "None",
                    "Dict[str,list[str]]",
                    "Optional[Dict[str,Any]]"
                ],
                "parameters": [
                    "Optional[str]",
                    "str",
                    "int",
                    "Dict[str,List[str]]",
                    "None",
                    "Dict[str,list[str]]",
                    "Optional[Dict[str,Any]]"
                ],
                "context": [
                    "Sequence[Callable]",
                    "None",
                    "float",
                    "Optional[List[str]]",
                    "str",
                    "List[str]",
                    "Optional[tuple]",
                    "Optional[str]",
                    "Tuple"
                ]
            }
        },
        "FaunaDialect.create_connect_args": {
            "name": "create_connect_args",
            "location": 93,
            "return": [
                "List[Union[list,dict[Text,dict]]]",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "Iterable[bytes]",
                    "str",
                    "Union[None, dict]",
                    "dict",
                    "Dict[str, Any]",
                    "bool",
                    "Optional[List[int]]"
                ]
            }
        },
        "FaunaDialect.get_schema_names": {
            "name": "get_schema_names",
            "location": 99,
            "return": [
                "List[Text]",
                "int",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "_connection": [
                    "Dict",
                    "bool",
                    "str",
                    "VT"
                ]
            }
        },
        "FaunaDialect.has_table": {
            "name": "has_table",
            "location": 106,
            "return": [
                "bool",
                "Set[str]",
                "Type",
                "List[List[str]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "table_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "schema": [
                    "str",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "FaunaDialect.get_table_names": {
            "name": "get_table_names",
            "location": 112,
            "return": [
                "List",
                "Set[str]",
                "FrozenSet[str]",
                "List[List[str]]",
                "object"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "dict",
                    "Dict[str, str]",
                    "str",
                    "Dict[str, Any]",
                    "List[Tuple[str, str]]"
                ],
                "schema": [
                    "bool",
                    "Dict",
                    "None",
                    "str"
                ]
            }
        },
        "FaunaDialect.get_view_names": {
            "name": "get_view_names",
            "location": 128,
            "return": [
                "List",
                "int",
                "Dict[str,Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "int",
                    "Dict",
                    "Mapping",
                    "Callable",
                    "Mapping[str,Any]",
                    "str",
                    "bool"
                ],
                "schema": [
                    "int",
                    "None",
                    "Mapping[str,Any]",
                    "Dict",
                    "Callable",
                    "bool",
                    "str",
                    "Mapping"
                ]
            }
        },
        "FaunaDialect.get_table_options": {
            "name": "get_table_options",
            "location": 132,
            "return": [
                "Dict",
                "str",
                "int",
                "List[Dict[str,Any]]"
            ],
            "arguments": {
                "self": [],
                "_connection": [
                    "str",
                    "bool",
                    "Optional[bool]",
                    "None"
                ],
                "_table_name": [
                    "str",
                    "bool",
                    "Optional[bool]",
                    "None"
                ],
                "schema": [
                    "str",
                    "None",
                    "bool",
                    "Optional[bool]"
                ]
            }
        },
        "FaunaDialect.get_columns": {
            "name": "get_columns",
            "location": 142,
            "return": [
                "List[dict[Text,None]]",
                "Union[type,Tuple[type,...]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ],
                "table_name": [
                    "str"
                ],
                "schema": [
                    "str",
                    "None",
                    "bool",
                    "bytes",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "FaunaDialect.get_pk_constraint": {
            "name": "get_pk_constraint",
            "location": 178,
            "return": [
                "Dict[Text,Union[list[Text],Text]]",
                "str",
                "Mapping[str,Any]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "str",
                    "bool",
                    "bytes",
                    "None",
                    "Optional[str]",
                    "int"
                ],
                "table_name": [
                    "str",
                    "bool",
                    "bytes",
                    "None",
                    "Optional[str]",
                    "int"
                ],
                "schema": [
                    "str",
                    "None",
                    "bool",
                    "bytes",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "FaunaDialect.get_foreign_keys": {
            "name": "get_foreign_keys",
            "location": 186,
            "return": [
                "List",
                "List[dict[Text,Union[None,str]]]",
                "str",
                "IO",
                "bool",
                "Dict[str,Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ],
                "table_name": [
                    "str"
                ],
                "schema": [
                    "str",
                    "None",
                    "bool",
                    "bytes",
                    "Optional[str]",
                    "Optional[bool]"
                ]
            }
        },
        "FaunaDialect.get_check_constraints": {
            "name": "get_check_constraints",
            "location": 220,
            "return": [
                "List",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "str",
                    "bool",
                    "bytes",
                    "None",
                    "Optional[str]",
                    "int"
                ],
                "table_name": [
                    "str",
                    "bool",
                    "bytes",
                    "None",
                    "Optional[str]",
                    "int"
                ],
                "schema": [
                    "str",
                    "None",
                    "bool",
                    "bytes",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "FaunaDialect.get_table_comment": {
            "name": "get_table_comment",
            "location": 224,
            "return": [
                "Dict[Text,Text]",
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "str",
                    "bool",
                    "List[List[int]]",
                    "List[list[int]]"
                ],
                "table_name": [
                    "str",
                    "bool",
                    "List[List[int]]",
                    "List[list[int]]"
                ],
                "schema": [
                    "str",
                    "bool",
                    "None",
                    "List[List[int]]",
                    "List[list[int]]"
                ]
            }
        },
        "FaunaDialect.get_indexes": {
            "name": "get_indexes",
            "location": 228,
            "return": [
                "List",
                "str",
                "List[dict[Text,]]",
                "Optional[str]",
                "IO"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ],
                "table_name": [
                    "str"
                ],
                "schema": [
                    "str",
                    "None",
                    "bool",
                    "bytes",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "FaunaDialect.get_unique_constraints": {
            "name": "get_unique_constraints",
            "location": 258,
            "return": [
                "List",
                "List[dict[Text,Text]]",
                "str",
                "IO",
                "Dict",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ],
                "table_name": [
                    "str"
                ],
                "schema": [
                    "str",
                    "None",
                    "bool",
                    "bytes",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "FaunaDialect.get_view_definition": {
            "name": "get_view_definition",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "str",
                    "bool"
                ],
                "view_name": [
                    "str",
                    "bool"
                ],
                "schema": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "FaunaDialect.do_rollback": {
            "name": "do_rollback",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dbapi_connection": [
                    "bool",
                    "Set",
                    "int"
                ]
            }
        },
        "FaunaDialect._check_unicode_returns": {
            "name": "_check_unicode_returns",
            "location": 289,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "Type[T]",
                    "str",
                    "Type",
                    "List[str]",
                    "Optional[int]",
                    "int",
                    "Container[Taxon]",
                    "None",
                    "Coroutine",
                    "Container",
                    "collections.abc.Coroutine"
                ],
                "additional_tests": [
                    "Type[T]",
                    "None",
                    "str",
                    "List[str]",
                    "Type",
                    "Optional[int]",
                    "Container[Taxon]",
                    "int",
                    "Coroutine",
                    "Container",
                    "collections.abc.Coroutine"
                ]
            }
        },
        "FaunaDialect._check_unicode_description": {
            "name": "_check_unicode_description",
            "location": 292,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "str",
                    "bool",
                    "Sequence[Dict[str,Any]]",
                    "List[int]",
                    "Sequence[dict[str,Any]]"
                ]
            }
        }
    },
    "tipresias-main/tipping/sqlalchemy-fauna/sqlalchemy_fauna/exceptions.py": {},
    "tipresias-main/tipping/sqlalchemy-fauna/sqlalchemy_fauna/__init__.py": {},
    "tipresias-main/tipping/sqlalchemy-fauna/sqlalchemy_fauna/fauna/client.py": {
        "FaunaClient.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "secret": [
                    "str",
                    "None",
                    "datetime.datetime"
                ],
                "scheme": [
                    "Text",
                    "str",
                    "datetime.datetime"
                ],
                "domain": [
                    "Text",
                    "str",
                    "datetime.datetime"
                ],
                "port": [
                    "int",
                    "str",
                    "datetime.datetime"
                ]
            }
        },
        "FaunaClient.sql": {
            "name": "sql",
            "location": 42,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Type",
                    "Collection[str]",
                    "Dict",
                    "Collection",
                    "Dict[str,Any]"
                ]
            }
        },
        "FaunaClient._execute_sql": {
            "name": "_execute_sql",
            "location": 52,
            "return": [
                "List",
                "str",
                "Dict[str,Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "sql_query": [
                    "Tuple",
                    "Dict[str,Any]"
                ]
            }
        },
        "FaunaClient._execute_with_retries": {
            "name": "_execute_with_retries",
            "location": 85,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Dict",
                    "Union[int,slice]",
                    "int"
                ],
                "retries": [
                    "str",
                    "int"
                ]
            }
        },
        "FaunaClient._fauna_data_to_sqlalchemy_result": {
            "name": "_fauna_data_to_sqlalchemy_result",
            "location": 106,
            "return": [
                "Dict[Union[tuple[Union[dict,dict[str,Any]]],tuple[dict[str,dict[str,Any]]]],]",
                "Dict",
                "Dict[str,Any]",
                "Dict[str,float]"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "Dict",
                    "Dict[str,dict[str,Any]]",
                    "Dict[str,Dict[str,Any]]",
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]"
                ]
            }
        },
        "FaunaClient._convert_fauna_to_python": {
            "name": "_convert_fauna_to_python",
            "location": 118,
            "return": [
                "str",
                "datetime.datetime",
                "float",
                "Dict",
                "bool",
                "List[str]",
                "Ref",
                "FaunaTime"
            ],
            "arguments": {
                "value": [
                    "str",
                    "float",
                    "bool",
                    "datetime.datetime"
                ]
            }
        }
    },
    "tipresias-main/tipping/sqlalchemy-fauna/sqlalchemy_fauna/fauna/__init__.py": {},
    "tipresias-main/tipping/sqlalchemy-fauna/sqlalchemy_fauna/fauna/fql/common.py": {
        "get_foreign_key_ref": {
            "name": "get_foreign_key_ref",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "foreign_value": [
                    "bool",
                    "List[int]"
                ],
                "reference_collection_name": [
                    "bool",
                    "List[int]"
                ]
            }
        },
        "index_name": {
            "name": "index_name",
            "location": 60,
            "return": [
                "str",
                "BaseException",
                "Exception",
                "Type[BaseException]",
                "Type"
            ],
            "arguments": {
                "table_name": [
                    "str",
                    "Dict",
                    "Optional[str]",
                    "Dict[str,LabwareDefinition]",
                    "Dict[str,type]",
                    "Set[str]"
                ],
                "column_name": [
                    "Optional[str]",
                    "None",
                    "List[str]",
                    "Optional[bool]",
                    "str",
                    "bool"
                ],
                "index_type": [
                    "Optional[str]",
                    "Optional[bool]",
                    "List[str]"
                ],
                "foreign_key_name": [
                    "Optional[str]",
                    "str",
                    "None"
                ]
            }
        },
        "convert_to_ref_set": {
            "name": "convert_to_ref_set",
            "location": 93,
            "return": [
                "str",
                "int",
                "Dict[str, int]"
            ],
            "arguments": {
                "collection_name": [
                    "str",
                    "List[Tuple[str,int]]",
                    "List[tuple[Union[str,int]]]"
                ],
                "index_match": [
                    "str",
                    "List[Tuple[str,int]]",
                    "List[tuple[Union[str,int]]]"
                ]
            }
        },
        "_define_match_set": {
            "name": "_define_match_set",
            "location": 116,
            "return": [
                "int",
                "Dict[str, int]"
            ],
            "arguments": {
                "query_filter": [
                    "Set",
                    "str",
                    "Dict",
                    "Iterable[str]",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "build_document_set_intersection": {
            "name": "build_document_set_intersection",
            "location": 237,
            "return": [
                "str",
                "bytes",
                "dict",
                "int"
            ],
            "arguments": {
                "table": [
                    "str"
                ],
                "filter_group": [
                    "str",
                    "Dict[str,str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "build_document_set_union": {
            "name": "build_document_set_union",
            "location": 266,
            "return": [
                "Optional[int]",
                "dict",
                "Iterable[T]",
                "Optional[str]"
            ],
            "arguments": {
                "table": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Type",
                    "Optional[List[str]]",
                    "List[str]",
                    "Optional[bool]",
                    "bool"
                ],
                "filter_groups": [
                    "str",
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "Dict",
                    "Optional[str]",
                    "Optional[Dict[str,Any]]"
                ]
            }
        },
        "_build_intersecting_query": {
            "name": "_build_intersecting_query",
            "location": 293,
            "return": [
                "str",
                "Tuple[str,str]",
                "Dict[str,Type]",
                "Optional[str]",
                "Set[str]",
                "int",
                "List[dict[str,Any]]",
                "List[tuple[Union[str,str,str]]]",
                "Dict",
                "Dict[str,int]",
                "Dict[str,tuple[Union[Any,Any]]]"
            ],
            "arguments": {
                "filter_group": [
                    "str",
                    "Optional[Dict[str,Any]]",
                    "bytes",
                    "Dict[str,Any]",
                    "Optional[List[str]]",
                    "None",
                    "List[str]"
                ],
                "acc_query": [
                    "bool",
                    "Optional[int]",
                    "None",
                    "Optional[str]",
                    "str",
                    "Optional[Match]",
                    "Match",
                    "Union[List,Dict,None]",
                    "List",
                    "Dict"
                ],
                "table": [
                    "str",
                    "Tuple[Optional[str],str]",
                    "Tuple[Union[str,None,str]]"
                ],
                "direction": [
                    "Optional[str]",
                    "Dict",
                    "str",
                    "None"
                ]
            }
        },
        "join_collections": {
            "name": "join_collections",
            "location": 352,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "sql_query": [
                    "str",
                    "Optional[Dict]",
                    "Dict",
                    "None"
                ]
            }
        },
        "update_documents": {
            "name": "update_documents",
            "location": 406,
            "return": [
                "str",
                "Dict[str, Any]",
                "Hashable"
            ],
            "arguments": {
                "sql_query": [
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]",
                    "str",
                    "List[Tuple[int,int]]",
                    "int",
                    "List[tuple[Union[int,int]]]"
                ]
            }
        }
    },
    "tipresias-main/tipping/sqlalchemy-fauna/sqlalchemy_fauna/fauna/fql/delete.py": {
        "translate_delete": {
            "name": "translate_delete",
            "location": 12,
            "return": [
                "str",
                "Dict[str, int]",
                "Iterable[int]",
                "int"
            ],
            "arguments": {
                "sql_query": [
                    "bool",
                    "Dict[Tuple[RESOURCE,EVT],pydcop.dcop.objects.Variable]",
                    "Dict[tuple[Union[RESOURCE,EVT]],_]"
                ]
            }
        }
    },
    "tipresias-main/tipping/sqlalchemy-fauna/sqlalchemy_fauna/fauna/fql/insert.py": {
        "translate_insert": {
            "name": "translate_insert",
            "location": 13,
            "return": [
                "str",
                "float",
                "List[int]",
                "int"
            ],
            "arguments": {
                "sql_query": [
                    "Dict",
                    "str",
                    "Callable",
                    "Type[object]",
                    "Type",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        }
    },
    "tipresias-main/tipping/sqlalchemy-fauna/sqlalchemy_fauna/fauna/fql/select.py": {
        "_sort_document_set": {
            "name": "_sort_document_set",
            "location": 11,
            "return": [
                "bool",
                "str",
                "bytes"
            ],
            "arguments": {
                "document_set": [
                    "Callable",
                    "int"
                ],
                "order_by": [
                    "List[int]",
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "_define_document_pages": {
            "name": "_define_document_pages",
            "location": 44,
            "return": [
                "str",
                "int",
                "Optional[bool]"
            ],
            "arguments": {
                "sql_query": [
                    "int",
                    "Dict",
                    "str",
                    "float"
                ]
            }
        },
        "translate_select": {
            "name": "translate_select",
            "location": 64,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "sql_query": [
                    "bool",
                    "str",
                    "T"
                ]
            }
        }
    },
    "tipresias-main/tipping/sqlalchemy-fauna/sqlalchemy_fauna/fauna/fql/__init__.py": {},
    "tipresias-main/tipping/sqlalchemy-fauna/sqlalchemy_fauna/fauna/translation/alter.py": {
        "_fetch_column_info_refs": {
            "name": "_fetch_column_info_refs",
            "location": 15,
            "return": [
                "Dict[str, int]",
                "int"
            ],
            "arguments": {
                "table_name": [
                    "str"
                ],
                "column_name": [
                    "str"
                ]
            }
        },
        "_translate_drop_default": {
            "name": "_translate_drop_default",
            "location": 54,
            "return": [
                "Optional[int]",
                "Dict[str, int]",
                "int"
            ],
            "arguments": {
                "table_name": [
                    "str",
                    "bool",
                    "Dict",
                    "Dict[str,Any]"
                ],
                "column_name": [
                    "str",
                    "bool",
                    "Dict",
                    "Dict[str,Any]"
                ]
            }
        },
        "_translate_alter_column": {
            "name": "_translate_alter_column",
            "location": 74,
            "return": [],
            "arguments": {
                "statement": [
                    "str",
                    "Dict[str, Any]"
                ],
                "table": [
                    "str",
                    "Type"
                ],
                "starting_idx": [
                    "str",
                    "int"
                ]
            }
        },
        "translate_alter": {
            "name": "translate_alter",
            "location": 96,
            "return": [
                "Dict[str,Any]",
                "List"
            ],
            "arguments": {
                "statement": [
                    "str"
                ]
            }
        }
    },
    "tipresias-main/tipping/sqlalchemy-fauna/sqlalchemy_fauna/fauna/translation/base.py": {
        "format_sql_query": {
            "name": "format_sql_query",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "sql_query": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "translate_sql_to_fql": {
            "name": "translate_sql_to_fql",
            "location": 28,
            "return": [
                "List",
                "Tuple[int,int]",
                "List[int]",
                "int"
            ],
            "arguments": {
                "sql_string": [
                    "str"
                ]
            }
        }
    },
    "tipresias-main/tipping/sqlalchemy-fauna/sqlalchemy_fauna/fauna/translation/create.py": {
        "_contains_column_name": {
            "name": "_contains_column_name",
            "location": 192,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "token_group": [
                    "Tuple[str]",
                    "str",
                    "int"
                ],
                "idx": [
                    "Tuple[str]",
                    "str",
                    "int"
                ]
            }
        },
        "_define_primary_key": {
            "name": "_define_primary_key",
            "location": 204,
            "return": [
                "None",
                "str",
                "int",
                "Optional[str]",
                "bool",
                "Optional[int]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "metadata": [
                    "bool",
                    "str",
                    "Union[str,int]",
                    "List",
                    "Optional[List]",
                    "None"
                ],
                "column_definition_group": [
                    "int"
                ]
            }
        },
        "_define_unique_constraint": {
            "name": "_define_unique_constraint",
            "location": 254,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[float]",
                "List[list[int]]",
                "bool"
            ],
            "arguments": {
                "metadata": [
                    "int",
                    "Dict",
                    "str",
                    "Tuple[List[str],Optional[str]]",
                    "Tuple[Union[list[str],str,None]]"
                ],
                "column_definition_group": [
                    "int",
                    "str"
                ]
            }
        },
        "_define_foreign_key_constraint": {
            "name": "_define_foreign_key_constraint",
            "location": 293,
            "return": [
                "None",
                "Dict[,Union[dict,Mapping,Exception,str,dict[Union[Text,dict[Text,Union[bool,None,Text,dict]]],dict]]]",
                "str",
                "bool",
                "Optional[bool]",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "metadata": [
                    "Dict",
                    "Exception",
                    "Mapping[str,Any]",
                    "str",
                    "Mapping"
                ],
                "column_definition_group": [
                    "int",
                    "objects.DocPair"
                ]
            }
        },
        "_define_column": {
            "name": "_define_column",
            "location": 340,
            "return": [
                "str",
                "bool",
                "Dict[str,Any]",
                "None",
                "Dict[str,int]",
                "Set",
                "Dict[,Union[dict[str,Any],None,dict[str,int],str,set,dict[Union[Text,dict[Text,Union[bool,None,Text,dict]]],Union[Any,int,None]]]]"
            ],
            "arguments": {
                "metadata": [
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "Optional[Dict[str,int]]",
                    "None",
                    "Set",
                    "Optional[str]",
                    "Dict[str,int]",
                    "str"
                ],
                "column_definition_group": [
                    "SupportsInt",
                    "int"
                ]
            }
        },
        "_build_fields_metadata": {
            "name": "_build_fields_metadata",
            "location": 406,
            "return": [
                "bool",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "metadata": [
                    "int",
                    "None",
                    "Optional[int]",
                    "bool"
                ],
                "column_definition_group": [
                    "int",
                    "None",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "_split_column_identifiers_by_comma": {
            "name": "_split_column_identifiers_by_comma",
            "location": 418,
            "return": [
                "List",
                "Dict[str,int]",
                "int"
            ],
            "arguments": {
                "column_identifiers": [
                    "int",
                    "tuple",
                    "str",
                    "Optional[bool]",
                    "List[int]",
                    "bool"
                ]
            }
        },
        "_extract_column_definitions": {
            "name": "_extract_column_definitions",
            "location": 449,
            "return": [
                "str",
                "Tuple[str, str]",
                "bytes"
            ],
            "arguments": {
                "column_identifiers": [
                    "bool",
                    "django.db.models.query.QuerySet"
                ]
            }
        },
        "_create_index_metadata": {
            "name": "_create_index_metadata",
            "location": 461,
            "return": [
                "Dict[,Union[dict[Text,Union[Text,bool,None]],dict[Text,Union[Text,bool,tuple[Union[str,Any]],set[str],dict[bytes,Any],dict[str,list[str]],Type]]]]",
                "bool",
                "float"
            ],
            "arguments": {
                "table_name": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "field_metadata": [
                    "Dict",
                    "Dict[str,Any]",
                    "str"
                ]
            }
        },
        "_create_table_indices": {
            "name": "_create_table_indices",
            "location": 581,
            "return": [
                "List",
                "str",
                "Dict[str,str]",
                "OrderedDict",
                "Union[int,float,complex]",
                "Dict",
                "Dict[str,int]"
            ],
            "arguments": {
                "table_name": [
                    "str"
                ],
                "field_metadata": [
                    "Dict[str,Any]",
                    "str",
                    "bool",
                    "Type"
                ]
            }
        },
        "_update_information_metadata": {
            "name": "_update_information_metadata",
            "location": 694,
            "return": [
                "Dict[str, int]",
                "int"
            ],
            "arguments": {
                "table_name": [
                    "str",
                    "Optional[str]",
                    "Dict[str,Any]",
                    "Optional[List[str]]",
                    "None",
                    "List[str]"
                ],
                "collection_metadata": [
                    "str",
                    "Dict",
                    "Type",
                    "Sequence[type]"
                ]
            }
        },
        "_make_sure_information_schema_exists": {
            "name": "_make_sure_information_schema_exists",
            "location": 767,
            "return": [
                "List",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "_translate_create_table": {
            "name": "_translate_create_table",
            "location": 791,
            "return": [
                "List",
                "str",
                "float",
                "Dict",
                "Dict[str,int]",
                "int"
            ],
            "arguments": {
                "statement": [
                    "str",
                    "Dict[str,str]",
                    "Optional[str]",
                    "List[str]",
                    "None"
                ],
                "table_token_idx": [
                    "str",
                    "int",
                    "None",
                    "Dict[str,str]",
                    "Optional[str]",
                    "Tuple",
                    "BaseException",
                    "Optional[BaseException]",
                    "Dict[str,Any]"
                ]
            }
        },
        "_translate_create_index": {
            "name": "_translate_create_index",
            "location": 831,
            "return": [
                "List",
                "Iterable[str]",
                "List[List[str]]",
                "Tuple",
                "int"
            ],
            "arguments": {
                "statement": [
                    "type",
                    "Dict[str, Any]"
                ],
                "idx": [
                    "Type",
                    "Dict[str,Any]"
                ]
            }
        },
        "translate_create": {
            "name": "translate_create",
            "location": 885,
            "return": [
                "Callable[..., None]",
                "str"
            ],
            "arguments": {
                "statement": []
            }
        }
    },
    "tipresias-main/tipping/sqlalchemy-fauna/sqlalchemy_fauna/fauna/translation/drop.py": {
        "translate_drop": {
            "name": "translate_drop",
            "location": 13,
            "return": [
                "List",
                "Dict",
                "str"
            ],
            "arguments": {
                "statement": [
                    "type",
                    "bool"
                ]
            }
        }
    },
    "tipresias-main/tipping/sqlalchemy-fauna/sqlalchemy_fauna/fauna/translation/__init__.py": {},
    "tipresias-main/tipping/sqlalchemy-fauna/sqlalchemy_fauna/sql/common.py": {
        "_parse_date_value": {
            "name": "_parse_date_value",
            "location": 16,
            "return": [
                "Optional[str]",
                "datetime.datetime",
                "str"
            ],
            "arguments": {
                "value": [
                    "int",
                    "str",
                    "Optional[int]",
                    "float"
                ]
            }
        },
        "extract_value": {
            "name": "extract_value",
            "location": 39,
            "return": [
                "bool",
                "int",
                "None",
                "float"
            ],
            "arguments": {
                "token": [
                    "str",
                    "Iterable[str]",
                    "int"
                ]
            }
        }
    },
    "tipresias-main/tipping/sqlalchemy-fauna/sqlalchemy_fauna/sql/sql_query.py": {
        "OrderBy.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "columns": [
                    "int",
                    "None",
                    "List",
                    "Sequence[str]",
                    "Optional[Sequence[str]]"
                ],
                "direction": [
                    "int",
                    "str",
                    "Union[str, float]",
                    "float",
                    "List[str]"
                ]
            }
        },
        "OrderBy.from_statement": {
            "name": "from_statement",
            "location": 45,
            "return": [
                "None",
                "Optional[str]",
                "bool",
                "Optional[type]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Optional[int]",
                    "Iterable[str]",
                    "None",
                    "bool",
                    "List[str]",
                    "List"
                ],
                "statement": [
                    "str"
                ]
            }
        },
        "OrderBy._extract_direction": {
            "name": "_extract_direction",
            "location": 97,
            "return": [
                "None",
                "Dict[str,int]",
                "Dict",
                "str"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "identifier": [
                    "str",
                    "bool",
                    "T"
                ]
            }
        },
        "OrderBy.columns": {
            "name": "columns",
            "location": 119,
            "return": [
                "int",
                "Optional[List[str]]",
                "bool",
                "List[List[int]]",
                "Tuple[int, int]",
                "List[Tuple[int, int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderBy.direction": {
            "name": "direction",
            "location": 124,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLQuery.__init__": {
            "name": "__init__",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "query_string": [
                    "Dict[str,Any]",
                    "Callable"
                ],
                "tables": [
                    "bool",
                    "None",
                    "Dict[str,float]",
                    "Dict[str,Dict[str,int]]",
                    "Dict[str,dict[str,int]]",
                    "Optional[Dict[str,int]]",
                    "Dict[str,int]"
                ],
                "distinct": [
                    "bool",
                    "str",
                    "Callable"
                ],
                "order_by": [
                    "str",
                    "Callable",
                    "None"
                ],
                "limit": [
                    "str",
                    "Callable",
                    "None"
                ]
            }
        },
        "SQLQuery.from_statement": {
            "name": "from_statement",
            "location": 172,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "statement": [
                    "str"
                ]
            }
        },
        "SQLQuery._collect_tables": {
            "name": "_collect_tables",
            "location": 215,
            "return": [
                "List[NamedTuple]",
                "Optional[Iterable[Any]]",
                "Type",
                "Optional[int]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "Callable",
                    "bool",
                    "Iterable[str]",
                    "int"
                ],
                "statement": [
                    "str",
                    "Union[str, int]"
                ]
            }
        },
        "SQLQuery._build_select_query": {
            "name": "_build_select_query",
            "location": 267,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str,Any]",
                    "Sequence[str]",
                    "Type",
                    "Optional[str]",
                    "Callable",
                    "None"
                ],
                "statement": [
                    "bool",
                    "dict",
                    "Exception"
                ],
                "tables": [
                    "str",
                    "bool"
                ]
            }
        },
        "SQLQuery._build_update_query": {
            "name": "_build_update_query",
            "location": 310,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "Callable[[int],float]",
                    "List[int]",
                    "Callable[int,float]",
                    "IO[str]",
                    "IO"
                ],
                "statement": [
                    "bool",
                    "str"
                ],
                "table": [
                    "Optional[List[str]]",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "SQLQuery._build_insert_query": {
            "name": "_build_insert_query",
            "location": 338,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Callable[[int],float]",
                    "List[int]",
                    "Callable[int,float]",
                    "IO[str]",
                    "IO"
                ],
                "statement": [
                    "Dict",
                    "T"
                ],
                "table": [
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ]
            }
        },
        "SQLQuery._build_delete_query": {
            "name": "_build_delete_query",
            "location": 391,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "Callable[[int],float]",
                    "List[int]",
                    "Callable[int,float]",
                    "IO[str]",
                    "IO"
                ],
                "statement": [
                    "Callable[[int],float]",
                    "List[int]",
                    "Callable[int,float]",
                    "IO[str]",
                    "IO"
                ],
                "table": [
                    "Callable[[int],float]",
                    "List[int]",
                    "Callable[int,float]",
                    "IO[str]",
                    "IO"
                ]
            }
        },
        "SQLQuery.tables": {
            "name": "tables",
            "location": 397,
            "return": [
                "Optional[str]",
                "list",
                "Tuple[int, int]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLQuery.columns": {
            "name": "columns",
            "location": 402,
            "return": [
                "Optional[int]",
                "List"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLQuery.order_by": {
            "name": "order_by",
            "location": 413,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLQuery.has_functions": {
            "name": "has_functions",
            "location": 418,
            "return": [
                "bool",
                "int",
                "str",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLQuery.alias_map": {
            "name": "alias_map",
            "location": 423,
            "return": [
                "str",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLQuery.filter_groups": {
            "name": "filter_groups",
            "location": 429,
            "return": [
                "str",
                "Optional[Any]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLQuery.add_filter_group": {
            "name": "add_filter_group",
            "location": 433,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filter_group": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None",
                    "List[Union[PipeChain,str]]",
                    "List[Union[C,str]]"
                ]
            }
        },
        "SQLQuery.add_filter_to_table": {
            "name": "add_filter_to_table",
            "location": 445,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sql_filter": [
                    "str",
                    "Dict[str,str]",
                    "Dict"
                ]
            }
        },
        "SQLQuery.__str__": {
            "name": "__str__",
            "location": 463,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLQuery.__repr__": {
            "name": "__repr__",
            "location": 466,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tipresias-main/tipping/sqlalchemy-fauna/sqlalchemy_fauna/sql/sql_table.py": {
        "ComparisonOperator.values": {
            "name": "values",
            "location": 45,
            "return": [
                "List",
                "int",
                "List[Dict[str,str]]",
                "Optional[dict]",
                "Dict[str,Any]",
                "Sequence[Any]",
                "Set[str]",
                "Optional[T]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "Union[int,float,str]",
                    "float",
                    "Type[object]",
                    "textmetrics.common.Candidates",
                    "Type"
                ]
            }
        },
        "Column.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "None"
                ],
                "alias": [
                    "str",
                    "Optional[str]",
                    "None",
                    "int",
                    "Optional[List[str]]",
                    "List[str]",
                    "bool",
                    "Optional[int]"
                ],
                "position": [
                    "str",
                    "Optional[str]",
                    "None",
                    "int",
                    "Optional[List[str]]",
                    "List[str]",
                    "bool",
                    "Optional[int]"
                ],
                "table_name": [
                    "str",
                    "None",
                    "Optional[str]"
                ],
                "value": [
                    "str",
                    "None",
                    "Tuple",
                    "List",
                    "int"
                ],
                "function_name": [
                    "str",
                    "None",
                    "Optional[str]"
                ]
            }
        },
        "Column.from_identifier_group": {
            "name": "from_identifier_group",
            "location": 99,
            "return": [
                "List",
                "bool",
                "Tuple[int,int]",
                "str",
                "Dict"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "negmas.common.AgentMechanismInterface"
                ],
                "identifiers": [
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "T",
                    "Callable"
                ]
            }
        },
        "Column.from_identifier": {
            "name": "from_identifier",
            "location": 156,
            "return": [
                "Column",
                "str",
                "Tuple[int,int]",
                "bool",
                "Position"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Dict[str,Any]",
                    "bool",
                    "allennlp.common.Params"
                ],
                "identifier": [
                    "Dict",
                    "Dict[str,object]",
                    "allennlp.common.Params"
                ],
                "position": [
                    "int",
                    "Dict[str,Any]",
                    "str"
                ]
            }
        },
        "Column.from_comparison_group": {
            "name": "from_comparison_group",
            "location": 218,
            "return": [
                "int",
                "str",
                "OrderedDict",
                "List[str]"
            ],
            "arguments": {
                "cls": [],
                "comparison_group": [
                    "int",
                    "Callable[[int], None]",
                    "List[Tuple[float, float]]",
                    "List[str]"
                ],
                "position": [
                    "int"
                ]
            }
        },
        "Column.table": {
            "name": "table",
            "location": 255,
            "return": [
                "set[]"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "Column.table_name": {
            "name": "table_name",
            "location": 262,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Column.belongs_to_table": {
            "name": "belongs_to_table",
            "location": 266,
            "return": [
                "bool",
                "List[str]",
                "str",
                "int",
                "Optional[Union[int,str]]",
                "List[Dict[str,Any]]"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "Callable[...,collections.abc.Awaitable[None]]",
                    "Callable[...,Awaitable[None]]",
                    "Type",
                    "List[tuple[Union[str,str]]]",
                    "List[Tuple[str,str]]",
                    "enum.Enum"
                ]
            }
        },
        "Column.alias_map": {
            "name": "alias_map",
            "location": 271,
            "return": [
                "str",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Column.function_name": {
            "name": "function_name",
            "location": 276,
            "return": [
                "None",
                "Type[Any]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Column.is_function": {
            "name": "is_function",
            "location": 281,
            "return": [
                "bool",
                "Optional[Type]",
                "Set[Type]",
                "str",
                "Union[bool, str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Column.__str__": {
            "name": "__str__",
            "location": 285,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Column.__repr__": {
            "name": "__repr__",
            "location": 288,
            "return": [
                "Text",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Comparison.__init__": {
            "name": "__init__",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "operator": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Comparison.from_comparison_group": {
            "name": "from_comparison_group",
            "location": 325,
            "return": [
                "str",
                "Tuple[str, bool]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "Iterable[adi.Instance]",
                    "allennlp.common.Params",
                    "Dict[str,Any]"
                ],
                "comparison_group": [
                    "str",
                    "Dict[str,Dict[str,Any]]",
                    "Dict[str,dict[str,Any]]"
                ]
            }
        },
        "Comparison.__str__": {
            "name": "__str__",
            "location": 375,
            "return": [
                "str",
                "Type[T]",
                "dict",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Comparison.__eq__": {
            "name": "__eq__",
            "location": 378,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int,BitVec]",
                    "int"
                ]
            }
        },
        "Filter.__init__": {
            "name": "__init__",
            "location": 395,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "column": [
                    "str",
                    "Dict[str,str]",
                    "datetime.datetime"
                ],
                "comparison": [
                    "int",
                    "str",
                    "List[str]",
                    "float",
                    "bool"
                ],
                "value": [
                    "str",
                    "int",
                    "bytes",
                    "Optional[Tuple[int,int]]",
                    "Tuple[Union[int,int]]",
                    "None"
                ]
            }
        },
        "Filter.from_comparison_group": {
            "name": "from_comparison_group",
            "location": 409,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "Dict[str,Any]"
                ],
                "comparison_group": [
                    "int"
                ]
            }
        },
        "Filter.belongs_to_table": {
            "name": "belongs_to_table",
            "location": 445,
            "return": [
                "bool",
                "List[str]",
                "str",
                "int",
                "Optional[Union[int,str]]",
                "List[Dict[str,Any]]"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "Callable[...,collections.abc.Awaitable[None]]",
                    "Callable[...,Awaitable[None]]",
                    "Type",
                    "List[tuple[Union[str,str]]]",
                    "List[Tuple[str,str]]",
                    "enum.Enum"
                ]
            }
        },
        "Filter.table": {
            "name": "table",
            "location": 455,
            "return": [
                "set[]"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "Filter.table_name": {
            "name": "table_name",
            "location": 462,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Filter.name": {
            "name": "name",
            "location": 467,
            "return": [
                "Text",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Filter.checks_whether_equal": {
            "name": "checks_whether_equal",
            "location": 472,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Filter.checks_whether_greater_than": {
            "name": "checks_whether_greater_than",
            "location": 477,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Filter.checks_whether_greater_than_or_equal": {
            "name": "checks_whether_greater_than_or_equal",
            "location": 482,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Filter.checks_whether_less_than": {
            "name": "checks_whether_less_than",
            "location": 487,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Filter.checks_whether_less_than_or_equal": {
            "name": "checks_whether_less_than_or_equal",
            "location": 492,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Filter.__repr__": {
            "name": "__repr__",
            "location": 496,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "FilterGroup.__init__": {
            "name": "__init__",
            "location": 509,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filters": [
                    "int",
                    "None",
                    "List",
                    "Tuple[List[str],Optional[str]]",
                    "Tuple[Union[list[str],str,None]]",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        },
        "FilterGroup.from_where_group": {
            "name": "from_where_group",
            "location": 516,
            "return": [
                "str",
                "List"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]",
                    "Dict",
                    "List[enum.Enum]",
                    "None"
                ],
                "where_group": [
                    "Sequence[str]",
                    "Callable[...,None]"
                ]
            }
        },
        "FilterGroup.filters": {
            "name": "filters",
            "location": 581,
            "return": [
                "str",
                "Optional[Any]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Table.__init__": {
            "name": "__init__",
            "location": 597,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str,Any]",
                    "List[str]",
                    "Dict"
                ],
                "alias": [
                    "int",
                    "None",
                    "str",
                    "Sequence",
                    "bool",
                    "Optional[str]"
                ],
                "columns": [
                    "int",
                    "None",
                    "str",
                    "Sequence",
                    "bool",
                    "Optional[str]"
                ],
                "filters": [
                    "int",
                    "None",
                    "str",
                    "Sequence",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "Table.from_identifier": {
            "name": "from_identifier",
            "location": 622,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]",
                "int",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Dict",
                    "str",
                    "Dict[str,Any]"
                ],
                "identifier": [
                    "Iterable[adi.Instance]",
                    "Type",
                    "allennlp.common.Params",
                    "allennlp.common.params.Params",
                    "Dict",
                    "Type[T]"
                ]
            }
        },
        "Table.columns": {
            "name": "columns",
            "location": 647,
            "return": [
                "int",
                "Optional[List[str]]",
                "bool",
                "List[List[int]]",
                "Tuple[int, int]",
                "List[Tuple[int, int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Table.add_column": {
            "name": "add_column",
            "location": 655,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "column": [
                    "List[str]",
                    "int",
                    "datetime.date"
                ]
            }
        },
        "Table.filters": {
            "name": "filters",
            "location": 667,
            "return": [
                "str",
                "Optional[Any]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Table.add_filter": {
            "name": "add_filter",
            "location": 671,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sql_filter": [
                    "int",
                    "Sequence[str]",
                    "bool"
                ]
            }
        },
        "Table.add_join": {
            "name": "add_join",
            "location": 678,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "foreign_table": [
                    "Type",
                    "str",
                    "int",
                    "Union[str,int]",
                    "float",
                    "Type[T]",
                    "Union[float,int,str]"
                ],
                "comparison_group": [
                    "str",
                    "float",
                    "List[Tuple[str,str]]",
                    "List[tuple[Union[str,str]]]",
                    "Optional[str]",
                    "None"
                ],
                "direction": [
                    "str",
                    "Iterable[Any]",
                    "Callable",
                    "Type",
                    "Type[T]"
                ]
            }
        },
        "Table.alias_map": {
            "name": "alias_map",
            "location": 718,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Table.has_columns": {
            "name": "has_columns",
            "location": 727,
            "return": [
                "bool",
                "List[int]",
                "int",
                "List[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Table.__str__": {
            "name": "__str__",
            "location": 731,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Table.__repr__": {
            "name": "__repr__",
            "location": 734,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tipresias-main/tipping/sqlalchemy-fauna/sqlalchemy_fauna/sql/__init__.py": {},
    "tipresias-main/tipping/sqlalchemy-fauna/tests/__init__.py": {},
    "tipresias-main/tipping/sqlalchemy-fauna/tests/fixtures/models.py": {},
    "tipresias-main/tipping/sqlalchemy-fauna/tests/fixtures/session.py": {},
    "tipresias-main/tipping/sqlalchemy-fauna/tests/fixtures/__init__.py": {},
    "tipresias-main/tipping/sqlalchemy-fauna/tests/fixtures/factories/models.py": {},
    "tipresias-main/tipping/sqlalchemy-fauna/tests/fixtures/factories/sql.py": {
        "_define_value": {
            "name": "_define_value",
            "location": 24,
            "return": [
                "None",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "data_type": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "ColumnFactory.value": {
            "name": "value",
            "location": 72,
            "return": [
                "int",
                "Type[BaseException]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FilterFactory.value": {
            "name": "value",
            "location": 102,
            "return": [
                "int",
                "Type[BaseException]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableFactory.columns": {
            "name": "columns",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "table": [
                    "int",
                    "Optional[int]",
                    "Optional[Union[numpy.ndarray, numpy.void]]",
                    "Optional[float]",
                    "Optional[bool]"
                ],
                "_create": [
                    "bool",
                    "Optional[Mapping[str,Any]]",
                    "Mapping",
                    "Callable[,object]",
                    "Optional[Iterable[Any]]",
                    "None",
                    "Type[Any]",
                    "Iterable[Any]",
                    "Type"
                ],
                "columns_param": [
                    "int",
                    "None",
                    "float",
                    "Optional[int]",
                    "bool",
                    "Optional[float]",
                    "Optional[bool]",
                    "Optional[Union[numpy.ndarray,numpy.void]]"
                ]
            }
        },
        "TableFactory.filters": {
            "name": "filters",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "table": [
                    "List[Optional['Cell']]",
                    "int"
                ],
                "_create": [
                    "bool",
                    "Iterable[str]",
                    "str",
                    "Type",
                    "Dict"
                ],
                "filters_param": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "None",
                    "List[str]",
                    "Sequence[str]",
                    "List[Optional[Cell]]",
                    "int",
                    "List[Optional[C]]"
                ]
            }
        },
        "OrderByFactory.columns": {
            "name": "columns",
            "location": 190,
            "return": [
                "List[ColumnFactory]",
                "int",
                "Optional[List[str]]",
                "bool",
                "List[List[int]]",
                "Tuple[int,int]",
                "List[Tuple[int,int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLQueryFactory.tables": {
            "name": "tables",
            "location": 221,
            "return": [
                "List[TableFactory]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLQueryFactory.filter_groups": {
            "name": "filter_groups",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "sql_query": [
                    "Optional[Union[str, Any]]",
                    "Type[T]"
                ],
                "_create": [
                    "int",
                    "Exception",
                    "bool"
                ],
                "filter_groups_param": [
                    "str",
                    "bool",
                    "Dict[str,Any]"
                ]
            }
        },
        "SQLQueryFactory.order_by": {
            "name": "order_by",
            "location": 288,
            "return": [
                "None",
                "Optional[str]",
                "Type",
                "Optional[List[Any]]",
                "List"
            ],
            "arguments": {
                "sql_query": [
                    "Dict[str,bool]",
                    "str"
                ],
                "_create": [
                    "int",
                    "float",
                    "str",
                    "bool"
                ],
                "order_by_param": [
                    "str",
                    "int",
                    "AnyStr",
                    "Optional[AnyStr]",
                    "Sequence[str]",
                    "None",
                    "numpy.ndarray",
                    "bool"
                ]
            }
        }
    },
    "tipresias-main/tipping/sqlalchemy-fauna/tests/fixtures/factories/__init__.py": {},
    "tipresias-main/tipping/sqlalchemy-fauna/tests/integration/conftest.py": {
        "_setup_faunadb": {
            "name": "_setup_faunadb",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_setup_teardown_test_db": {
            "name": "_setup_teardown_test_db",
            "location": 28,
            "return": [
                "typing.Generator[typing.Union[str,list[str],None]]"
            ],
            "arguments": {}
        },
        "fauna_secret": {
            "name": "fauna_secret",
            "location": 46,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "fauna_engine": {
            "name": "fauna_engine",
            "location": 56,
            "return": [
                "typing.Generator[typing.Union[list[],bytes,int,list[str],str,None]]"
            ],
            "arguments": {}
        },
        "fauna_session": {
            "name": "fauna_session",
            "location": 69,
            "return": [
                "typing.Generator[typing.Union[typing.Type,dict[str, int],str]]"
            ],
            "arguments": {}
        },
        "user_columns": {
            "name": "user_columns",
            "location": 83,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        }
    },
    "tipresias-main/tipping/sqlalchemy-fauna/tests/integration/test_dialect.py": {
        "test_has_table": {
            "name": "test_has_table",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "fauna_engine": [
                    "str",
                    "int"
                ]
            }
        },
        "test_get_table_names": {
            "name": "test_get_table_names",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "fauna_engine": [
                    "str"
                ]
            }
        },
        "test_get_columns": {
            "name": "test_get_columns",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "fauna_engine": [
                    "Callable"
                ],
                "user_columns": [
                    "str",
                    "Dict[str,Any]"
                ]
            }
        },
        "test_get_indexes": {
            "name": "test_get_indexes",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "fauna_engine": [
                    "Callable"
                ],
                "user_columns": [
                    "str"
                ]
            }
        },
        "test_get_pk_constraint": {
            "name": "test_get_pk_constraint",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "fauna_engine": [
                    "bool",
                    "str",
                    "Dict[str, float]"
                ]
            }
        },
        "test_get_unique_constraints": {
            "name": "test_get_unique_constraints",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "fauna_engine": [
                    "dict",
                    "int",
                    "str"
                ]
            }
        }
    },
    "tipresias-main/tipping/sqlalchemy-fauna/tests/integration/test_sqlalchemy_fauna.py": {
        "test_create_index": {
            "name": "test_create_index",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "fauna_engine": [
                    "int",
                    "float",
                    "Tuple[Union[float,float,float,float,float]]",
                    "Tuple[float,float,float,float,float]",
                    "core.models.Recipe"
                ]
            }
        },
        "test_drop_table": {
            "name": "test_drop_table",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "fauna_engine": [
                    "Iterable[numpy.dtype]",
                    "str",
                    "int",
                    "cli_ui.tests.MessageRecorder",
                    "tests.async_mock.Mock"
                ]
            }
        },
        "test_insert_record": {
            "name": "test_insert_record",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "fauna_session": [
                    "float",
                    "asgard.models.accounAccount",
                    "asgard.models.user.User",
                    "asgard.models.job.ScheduledJob",
                    "server.models.bike.Bike",
                    "server.models.Rental"
                ]
            }
        },
        "test_alter_column_drop_default": {
            "name": "test_alter_column_drop_default",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "fauna_session": [
                    "str",
                    "List",
                    "zerver.models.Message",
                    "zerver.models.Stream",
                    "zerver.models.Realm"
                ]
            }
        },
        "test_select_empty_table": {
            "name": "test_select_empty_table",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "fauna_session": [
                    "str",
                    "sqlalchemy.orm.Session",
                    "datetime.datetime"
                ]
            }
        },
        "test_select_all_records": {
            "name": "test_select_all_records",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "fauna_session": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_select_by_field_equality": {
            "name": "test_select_by_field_equality",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "fauna_session": [
                    "str"
                ]
            }
        },
        "test_select_by_numeric_field_comparison": {
            "name": "test_select_by_numeric_field_comparison",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "filter_age": [
                    "zerver.models.UserProfile",
                    "str"
                ],
                "fauna_session": [
                    "str"
                ]
            }
        },
        "test_select_with_or": {
            "name": "test_select_with_or",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "fauna_session": [
                    "str",
                    "bool",
                    "sqlalchemy.orm.session.Session",
                    "zerver.models.UserProfile",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "test_delete_record_conditionally": {
            "name": "test_delete_record_conditionally",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "fauna_session": [
                    "bool",
                    "excars.models.user.User"
                ]
            }
        },
        "test_unique_constraint": {
            "name": "test_unique_constraint",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "fauna_session": [
                    "str",
                    "int",
                    "core.models.Recipe",
                    "models.UserAuth"
                ]
            }
        },
        "test_relationships": {
            "name": "test_relationships",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "fauna_session": [
                    "List[dict[str,Any]]",
                    "Dict",
                    "sqlalchemy.orm.Session",
                    "List[Dict[str,Any]]",
                    "django.db.models.query.QuerySet"
                ]
            }
        },
        "test_insert_with_null_foreign_key": {
            "name": "test_insert_with_null_foreign_key",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "fauna_session": [
                    "str"
                ]
            }
        },
        "test_count": {
            "name": "test_count",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "fauna_session": [
                    "int",
                    "float",
                    "sqlalchemy.orm.Session",
                    "lms.lmsdb.models.User",
                    "lms.lmsdb.models.Solution",
                    "zerver.models.UserProfile",
                    "models.UserAuth",
                    "server.models.bike.Bike",
                    "server.models.Rental"
                ]
            }
        },
        "test_count_with_empty_results": {
            "name": "test_count_with_empty_results",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "fauna_session": [
                    "excars.models.user.User"
                ]
            }
        },
        "test_select_distinct": {
            "name": "test_select_distinct",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "fauna_session": [
                    "float",
                    "sqlalchemy.orm.Session",
                    "zerver.models.UserProfile",
                    "server.models.bike.Bike",
                    "server.models.Rental",
                    "zerver.models.UserGroup"
                ]
            }
        },
        "test_select_is_null": {
            "name": "test_select_is_null",
            "location": 332,
            "return": [
                "None"
            ],
            "arguments": {
                "fauna_session": [
                    "bool",
                    "str",
                    "int",
                    "List[str]",
                    "None",
                    "Optional[List[str]]",
                    "Optional[str]"
                ]
            }
        },
        "test_join": {
            "name": "test_join",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {
                "fauna_session": [
                    "float",
                    "sqlalchemy.orm.Session",
                    "abilian.core.sqlalchemy.SQLAlchemy",
                    "server.models.bike.Bike",
                    "server.models.Rental"
                ]
            }
        },
        "test_join_with_or": {
            "name": "test_join_with_or",
            "location": 437,
            "return": [
                "None"
            ],
            "arguments": {
                "fauna_session": [
                    "float",
                    "sqlalchemy.orm.Session",
                    "abilian.core.sqlalchemy.SQLAlchemy",
                    "server.models.bike.Bike",
                    "server.models.Rental"
                ]
            }
        },
        "test_order_by": {
            "name": "test_order_by",
            "location": 471,
            "return": [
                "None"
            ],
            "arguments": {
                "fauna_session": [
                    "str",
                    "zerver.models.Recipient",
                    "models.Course",
                    "zerver.models.UserProfile",
                    "zerver.models.Stream",
                    "grouper.models.user.User"
                ]
            }
        },
        "test_limit": {
            "name": "test_limit",
            "location": 493,
            "return": [
                "None"
            ],
            "arguments": {
                "fauna_session": [
                    "str",
                    "zerver.models.UserProfile",
                    "pipwatch_api.datastore.models.RequirementsFile",
                    "cards.models.Deck"
                ]
            }
        },
        "test_multi_table_limit": {
            "name": "test_multi_table_limit",
            "location": 508,
            "return": [
                "None"
            ],
            "arguments": {
                "fauna_session": [
                    "str",
                    "float",
                    "sqlalchemy.orm.Session",
                    "server.models.bike.Bike",
                    "server.models.Rental"
                ]
            }
        },
        "test_update": {
            "name": "test_update",
            "location": 530,
            "return": [
                "None"
            ],
            "arguments": {
                "fauna_session": [
                    "str",
                    "bool",
                    "excars.models.user.User",
                    "salon.models.Stylist"
                ]
            }
        },
        "test_multiple_update": {
            "name": "test_multiple_update",
            "location": 546,
            "return": [
                "None"
            ],
            "arguments": {
                "fauna_session": [
                    "str",
                    "sqlalchemy.orm.Session",
                    "django.db.models.Model",
                    "datetime.datetime"
                ]
            }
        }
    },
    "tipresias-main/tipping/sqlalchemy-fauna/tests/integration/__init__.py": {},
    "tipresias-main/tipping/sqlalchemy-fauna/tests/unit/test_client.py": {
        "_define_request_result": {
            "name": "_define_request_result",
            "location": 12,
            "return": [
                "str",
                "Dict[str, str]",
                "bytes"
            ],
            "arguments": {
                "status_code": [
                    "int"
                ],
                "response_description": [
                    "int",
                    "bytes",
                    "Optional[Any]",
                    "Any",
                    "None"
                ]
            }
        },
        "test_undefined_index_error": {
            "name": "test_undefined_index_error",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_query": []
            }
        },
        "test_undefined_index_error_information_schema": {
            "name": "test_undefined_index_error_information_schema",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_query": []
            }
        }
    },
    "tipresias-main/tipping/sqlalchemy-fauna/tests/unit/__init__.py": {},
    "tipresias-main/tipping/sqlalchemy-fauna/tests/unit/fql/test_common.py": {
        "test_get_foreign_key_ref": {
            "name": "test_get_foreign_key_ref",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_index_name": {
            "name": "test_index_name",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "params": [
                    "str"
                ],
                "expected_name": [
                    "str"
                ]
            }
        },
        "test_invalid_index_name": {
            "name": "test_invalid_index_name",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "table_name": [
                    "str",
                    "Callable"
                ],
                "kwargs": []
            }
        },
        "test_build_document_set_intersection": {
            "name": "test_build_document_set_intersection",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "operator": [
                    "int",
                    "Dict",
                    "List"
                ],
                "column_params": [
                    "int",
                    "bool"
                ]
            }
        },
        "test_join_collections": {
            "name": "test_join_collections",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_join_collections": {
            "name": "test_invalid_join_collections",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "sql_query": [
                    "tests.hints.CleavageCall",
                    "tests.hints.RightAccumulatorCall",
                    "tests.hints.LeftAccumulatorCall",
                    "tests.hints.RightFolderCall"
                ],
                "error_message": [
                    "str",
                    "bool",
                    "Collection[str]",
                    "Collection"
                ]
            }
        },
        "test_update_documents": {
            "name": "test_update_documents",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_build_document_set_union": {
            "name": "test_build_document_set_union",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "sql_query": [
                    "bool"
                ]
            }
        }
    },
    "tipresias-main/tipping/sqlalchemy-fauna/tests/unit/fql/test_delete.py": {
        "test_translate_delete": {
            "name": "test_translate_delete",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "sql_query": [
                    "Callable",
                    "str",
                    "Iterable[Any]",
                    "bool"
                ]
            }
        }
    },
    "tipresias-main/tipping/sqlalchemy-fauna/tests/unit/fql/test_insert.py": {
        "test_translate_insert": {
            "name": "test_translate_insert",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "sql_query": [
                    "bool",
                    "Callable"
                ]
            }
        }
    },
    "tipresias-main/tipping/sqlalchemy-fauna/tests/unit/fql/test_select.py": {
        "test_translating_unsupported_select": {
            "name": "test_translating_unsupported_select",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "sql_query": [
                    "tests.hints.CleavageCall",
                    "tests.hints.RightAccumulatorCall",
                    "tests.hints.LeftAccumulatorCall",
                    "tests.hints.RightFolderCall"
                ],
                "error_message": [
                    "str",
                    "bool",
                    "Collection[str]",
                    "Collection"
                ]
            }
        },
        "test_translate_select": {
            "name": "test_translate_select",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "sql_query": [
                    "bool",
                    "Callable"
                ]
            }
        }
    },
    "tipresias-main/tipping/sqlalchemy-fauna/tests/unit/fql/__init__.py": {},
    "tipresias-main/tipping/sqlalchemy-fauna/tests/unit/sql/test_common.py": {
        "test_extract_value": {
            "name": "test_extract_value",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "_label": [
                    "Dict[str,Any]",
                    "str",
                    "List[str]",
                    "Optional[Dict[str,Any]]",
                    "None"
                ],
                "token_value": [
                    "str",
                    "Tuple[str]",
                    "Dict",
                    "bool",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ],
                "expected": [
                    "str",
                    "int",
                    "Tuple[str,str]",
                    "Tuple[Union[str,str]]"
                ]
            }
        }
    },
    "tipresias-main/tipping/sqlalchemy-fauna/tests/unit/sql/test_sql_query.py": {
        "TestSQLQuery.test_sql_query": {
            "name": "test_sql_query",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestSQLQuery.test_validation": {
            "name": "test_validation",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestSQLQuery.test_add_filter_to_table": {
            "name": "test_add_filter_to_table",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestSQLQuery.test_from_statement_distinct": {
            "name": "test_from_statement_distinct",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "distinct": [
                    "Callable[[List,bool],None]",
                    "str",
                    "Callable[List,bool,None]",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]",
                    "List[Dict]",
                    "List[dict]"
                ]
            }
        },
        "TestSQLQuery.test_from_statement_order_by": {
            "name": "test_from_statement_order_by",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestSQLQuery.test_from_statement_limit": {
            "name": "test_from_statement_limit",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestSQLQuery.test_from_statement_insert": {
            "name": "test_from_statement_insert",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "column_names": [
                    "str",
                    "List[str]"
                ],
                "column_values": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "expected_values": [
                    "int",
                    "str",
                    "Tuple[Union[int,int]]",
                    "Tuple[int,int]",
                    "List[str]",
                    "float",
                    "Union[str,List[str]]"
                ]
            }
        },
        "TestSQLQuery.test_from_statement": {
            "name": "test_from_statement",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "sql_string": [
                    "str"
                ],
                "expected_table_names": [
                    "str",
                    "bytes",
                    "Callable"
                ],
                "expected_column_names": [
                    "str",
                    "Tuple[str]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "TestSQLQuery.test_unsupported_statement": {
            "name": "test_unsupported_statement",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "sql_string": [
                    "str",
                    "bytes",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ],
                "error_message": [
                    "Type[Any]",
                    "str",
                    "Type",
                    "List[openapi_core.exceptions.OpenAPIError]",
                    "List[O]"
                ]
            }
        },
        "TestOrderBy.test_order_by": {
            "name": "test_order_by",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "direction": [
                    "str",
                    "Union[str,List[str]]",
                    "List[str]"
                ],
                "expected_direction": [
                    "str",
                    "int",
                    "List[str]",
                    "bytearray",
                    "List[tuple[Union[str,Any]]]",
                    "List[Tuple[str,Any]]",
                    "numpy.ndarray"
                ]
            }
        },
        "TestOrderBy.test_from_statement": {
            "name": "test_from_statement",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "sql_string": [
                    "str",
                    "int",
                    "bool"
                ],
                "expected_type": [
                    "bool",
                    "Iterable[str]",
                    "Callable",
                    "str"
                ],
                "expected_columns": [
                    "str",
                    "Dict[str,LabwareDefinition]",
                    "bool",
                    "Optional[str]",
                    "None"
                ],
                "expected_direction": [
                    "int",
                    "Dict",
                    "str",
                    "bool",
                    "Tuple",
                    "List[dict[str,str]]",
                    "List[Dict[str,str]]"
                ]
            }
        }
    },
    "tipresias-main/tipping/sqlalchemy-fauna/tests/unit/sql/test_sql_table.py": {
        "TestColumn.test_from_identifier": {
            "name": "test_from_identifier",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "column_sql": [
                    "str",
                    "bool",
                    "float",
                    "int"
                ],
                "expected_table_name": [
                    "str",
                    "bool"
                ],
                "expected_alias": [
                    "bytes",
                    "int",
                    "str"
                ]
            }
        },
        "TestColumn.test_from_function_identifier": {
            "name": "test_from_function_identifier",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "column_sql": [
                    "int"
                ],
                "expected_name": [
                    "str",
                    "bool"
                ],
                "expected_function": [
                    "str",
                    "Dict",
                    "Optional[Dict[str,Any]]",
                    "Dict[str,Any]",
                    "None"
                ]
            }
        },
        "TestColumn.test_unsupported_from_identifier": {
            "name": "test_unsupported_from_identifier",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "column_sql_string": [
                    "int",
                    "bool"
                ],
                "error_message": [
                    "str",
                    "Dict[str,Any]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "TestColumn.test_from_comparison_group": {
            "name": "test_from_comparison_group",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestColumn.test_unsupported_from_comparison_group": {
            "name": "test_unsupported_from_comparison_group",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestColumn.test_column": {
            "name": "test_column",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestColumn.test_from_identifier_group": {
            "name": "test_from_identifier_group",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "sql_query": [
                    "str",
                    "bool"
                ],
                "expected_columns": [
                    "str",
                    "int",
                    "Iterable[str]",
                    "IO",
                    "float"
                ],
                "expected_aliases": [
                    "int",
                    "Tuple",
                    "List[int]",
                    "Optional[List[str]]",
                    "List[str]",
                    "None"
                ]
            }
        },
        "TestTable.test_table": {
            "name": "test_table",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestTable.test_table_from_identifier": {
            "name": "test_table_from_identifier",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "table_name": [
                    "str"
                ],
                "sql_string": [
                    "str"
                ]
            }
        },
        "TestTable.test_add_column": {
            "name": "test_add_column",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestTable.test_add_filter": {
            "name": "test_add_filter",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestTable.test_add_join": {
            "name": "test_add_join",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestTable.test_invalid_add_join": {
            "name": "test_invalid_add_join",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestComparison.test_from_comparison_group": {
            "name": "test_from_comparison_group",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "sql_string": [
                    "str"
                ],
                "expected_operator": [
                    "str",
                    "int",
                    "Dict"
                ]
            }
        },
        "TestComparison.test_invalid_from_comparison_group": {
            "name": "test_invalid_from_comparison_group",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "sql_string": [
                    "str"
                ]
            }
        },
        "TestFilter.test_filter": {
            "name": "test_filter",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestFilter.test_from_comparison_group": {
            "name": "test_from_comparison_group",
            "location": 397,
            "return": [
                "None"
            ],
            "arguments": {
                "sql_string": [
                    "str"
                ],
                "expected_attributes": [
                    "Dict",
                    "str"
                ]
            }
        },
        "TestFilter.test_unsupported_from_comparison_group": {
            "name": "test_unsupported_from_comparison_group",
            "location": 434,
            "return": [
                "None"
            ],
            "arguments": {
                "sql_query": [
                    "Tuple[paradigm.models.Base,tests.utils.Kwargs]",
                    "str",
                    "Tuple[Union[paradigm.models.Base,tests.utils.Kwargs]]",
                    "List[str]",
                    "bytes",
                    "BinaryIO"
                ],
                "error_message": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "TestFilter.test_checks_whether_operator_methods": {
            "name": "test_checks_whether_operator_methods",
            "location": 446,
            "return": [
                "None"
            ],
            "arguments": {
                "operator": []
            }
        },
        "TestFilterGroup.test_from_where_group": {
            "name": "test_from_where_group",
            "location": 556,
            "return": [
                "None"
            ],
            "arguments": {
                "sql_string": [
                    "str"
                ],
                "expected_attributes": [
                    "str",
                    "Dict",
                    "int"
                ]
            }
        },
        "TestFilterGroup.test_unsupported_from_where_group": {
            "name": "test_unsupported_from_where_group",
            "location": 580,
            "return": [
                "None"
            ],
            "arguments": {
                "sql_query": [
                    "Tuple[paradigm.models.Base,tests.utils.Kwargs]",
                    "str",
                    "Tuple[Union[paradigm.models.Base,tests.utils.Kwargs]]",
                    "List[str]",
                    "bytes",
                    "BinaryIO"
                ],
                "error_message": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "tipresias-main/tipping/sqlalchemy-fauna/tests/unit/sql/__init__.py": {},
    "tipresias-main/tipping/sqlalchemy-fauna/tests/unit/translation/test_alter.py": {
        "test_translate_alter": {
            "name": "test_translate_alter",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "sql_query": [
                    "Dict[str,Sequence[Any]]"
                ]
            }
        },
        "test_translating_unsupported_alter": {
            "name": "test_translating_unsupported_alter",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "sql_query": [
                    "int",
                    "bytes",
                    "Tuple[int,int]",
                    "BinaryIO",
                    "Tuple[Union[int,int]]"
                ],
                "error_message": [
                    "str",
                    "bool",
                    "Collection[str]",
                    "Collection"
                ]
            }
        }
    },
    "tipresias-main/tipping/sqlalchemy-fauna/tests/unit/translation/test_base.py": {
        "test_format_sql_query": {
            "name": "test_format_sql_query",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_translate_sql_to_fql_multiple": {
            "name": "test_translate_sql_to_fql_multiple",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_translate_sql_to_fql_select": {
            "name": "test_translate_sql_to_fql_select",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_translate_sql_to_fql_create": {
            "name": "test_translate_sql_to_fql_create",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_translate_sql_to_fql_drop": {
            "name": "test_translate_sql_to_fql_drop",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_translate_sql_to_fql_insert": {
            "name": "test_translate_sql_to_fql_insert",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_translate_sql_to_fql_delete": {
            "name": "test_translate_sql_to_fql_delete",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_translate_sql_to_fql_update": {
            "name": "test_translate_sql_to_fql_update",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tipresias-main/tipping/sqlalchemy-fauna/tests/unit/translation/test_create.py": {
        "test_translate_create": {
            "name": "test_translate_create",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "sql_query": [
                    "str",
                    "bool",
                    "float",
                    "int"
                ]
            }
        },
        "test_translating_unsupported_create": {
            "name": "test_translating_unsupported_create",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "sql_query": [
                    "int",
                    "List[str]",
                    "Tuple[int,int]",
                    "Tuple[Union[int,int]]"
                ],
                "error_message": [
                    "str",
                    "bool",
                    "Collection[str]",
                    "Collection"
                ]
            }
        }
    },
    "tipresias-main/tipping/sqlalchemy-fauna/tests/unit/translation/test_drop.py": {
        "test_translate_drop": {
            "name": "test_translate_drop",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "sql_query": [
                    "Dict[str,Sequence[Any]]"
                ]
            }
        }
    },
    "tipresias-main/tipping/sqlalchemy-fauna/tests/unit/translation/__init__.py": {},
    "tipresias-main/tipping/src/tests/conftest.py": {},
    "tipresias-main/tipping/src/tests/__init__.py": {},
    "tipresias-main/tipping/src/tests/fixtures/data_factories.py": {
        "_translate_team_names": {
            "name": "_translate_team_names",
            "location": 29,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "team_type": [
                    "str",
                    "Dict"
                ]
            }
        },
        "fake_match_data": {
            "name": "fake_match_data",
            "location": 35,
            "return": [
                "bool",
                "str",
                "Dict[str, object]",
                "int",
                "Tuple[str, str]",
                "Dict[str, Any]",
                "Tuple[str, int]"
            ],
            "arguments": {
                "match_results": [
                    "pandas.DataFrame",
                    "Dict",
                    "None",
                    "Optional[Any]",
                    "Any"
                ],
                "seasons": [
                    "int",
                    "numpy.ndarray",
                    "Union[int,numpy.ndarray]",
                    "Dict[str,Any]",
                    "bool",
                    "List[Dict]"
                ]
            }
        },
        "fake_fixture_data": {
            "name": "fake_fixture_data",
            "location": 64,
            "return": [
                "List[int]",
                "List[dict]",
                "str",
                "bytes",
                "bool"
            ],
            "arguments": {
                "fixtures": [
                    "Type",
                    "int",
                    "None",
                    "str"
                ],
                "seasons": [
                    "int",
                    "Optional[Environment]",
                    "numpy.ndarray"
                ]
            }
        },
        "fake_match_results_data": {
            "name": "fake_match_results_data",
            "location": 94,
            "return": [
                "bool",
                "Union[int, float, complex]",
                "str"
            ],
            "arguments": {
                "match_results": [
                    "List[List]",
                    "None",
                    "Dict",
                    "OrderedDict",
                    "Dict[str,Any]",
                    "List[list]"
                ],
                "round_number": [
                    "bool",
                    "None",
                    "str",
                    "Optional[bytes]",
                    "Sequence[str]",
                    "bytes",
                    "Optional[Iterable[int]]",
                    "Optional[object]",
                    "Iterable[int]"
                ]
            }
        },
        "_build_team_matches": {
            "name": "_build_team_matches",
            "location": 132,
            "return": [
                "int",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "match_data": [
                    "Dict[str, Any]",
                    "Union[int, float]",
                    "Dict[str, str]",
                    "dict"
                ],
                "team_type": [
                    "str",
                    "Dict[str,Any]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "fake_prediction_data": {
            "name": "fake_prediction_data",
            "location": 146,
            "return": [
                "str",
                "Dict[str,Union[bool,str]]",
                "bool",
                "Dict[str,np.ndarray]",
                "Optional[str]",
                "Dict",
                "pandas.DataFrame",
                "List[None]"
            ],
            "arguments": {
                "fixtures": [
                    "str",
                    "None",
                    "List[str]",
                    "Optional[bool]",
                    "Callable[,bool]",
                    "bool"
                ],
                "ml_model_name": [
                    "Text",
                    "Optional[str]",
                    "bool",
                    "Optional[bool]",
                    "List[str]",
                    "Optional[List[Any]]"
                ],
                "predict_margin": [
                    "bool",
                    "Optional[str]",
                    "Optional[bool]",
                    "List[str]",
                    "Optional[List[Any]]"
                ],
                "pivot_home_away": [
                    "bool",
                    "str",
                    "Iterable[Dict[str,Any]]",
                    "List[str]"
                ]
            }
        },
        "fake_ml_model_data": {
            "name": "fake_ml_model_data",
            "location": 187,
            "return": [
                "str",
                "bool",
                "pandas.DataFrame"
            ],
            "arguments": {
                "n_models": [
                    "int",
                    "Optional[int]",
                    "List[int]",
                    "np.ndarray"
                ]
            }
        }
    },
    "tipresias-main/tipping/src/tests/fixtures/model_factories.py": {
        "_fake_datetime": {
            "name": "_fake_datetime",
            "location": 51,
            "return": [
                "datetime.datetime",
                "int",
                "Union[str, int]",
                "datetime.timedelta"
            ],
            "arguments": {
                "match_factory": [
                    "int"
                ],
                "n": [
                    "int",
                    "float",
                    "bool",
                    "List[int]"
                ],
                "start_month_day": [
                    "int",
                    "Tuple[int]"
                ]
            }
        },
        "_fake_future_datetime": {
            "name": "_fake_future_datetime",
            "location": 104,
            "return": [
                "int",
                "numpy.ndarray",
                "tuple",
                "bool",
                "str"
            ],
            "arguments": {
                "match_factory": [
                    "str",
                    "int",
                    "Optional[Exception]",
                    "Exception",
                    "Optional[int]",
                    "None"
                ],
                "n": [
                    "int",
                    "float",
                    "None",
                    "Union[int,None]",
                    "Optional[int]",
                    "Optional[numpy.ndarray]"
                ]
            }
        },
        "TeamMatchFactory.save_match_result": {
            "name": "save_match_result",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "Dict[str,Any]"
                ],
                "_create": [
                    "List[str]",
                    "Dict",
                    "int",
                    "str"
                ],
                "_extracted": [
                    "List[str]",
                    "Dict",
                    "int",
                    "str"
                ]
            }
        }
    },
    "tipresias-main/tipping/src/tests/fixtures/session.py": {},
    "tipresias-main/tipping/src/tests/fixtures/__init__.py": {},
    "tipresias-main/tipping/src/tests/integration/conftest.py": {
        "_setup_faunadb": {
            "name": "_setup_faunadb",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_setup_teardown_test_db": {
            "name": "_setup_teardown_test_db",
            "location": 31,
            "return": [
                "typing.Generator[typing.Union[str,bytes,list[str],int]]"
            ],
            "arguments": {}
        },
        "fauna_secret": {
            "name": "fauna_secret",
            "location": 65,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "fauna_engine": {
            "name": "fauna_engine",
            "location": 75,
            "return": [
                "typing.Generator[typing.Union[int,list[int],list[str],list[dict[str, typing.Any]],dict[str, dict[str, int]]]]"
            ],
            "arguments": {}
        },
        "fauna_session": {
            "name": "fauna_session",
            "location": 87,
            "return": [
                "typing.Generator[typing.Union[typing.Type,dict[str, int],str]]"
            ],
            "arguments": {}
        }
    },
    "tipresias-main/tipping/src/tests/integration/__init__.py": {},
    "tipresias-main/tipping/src/tests/integration/models/test_match.py": {
        "test_match_creation": {
            "name": "test_match_creation",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "fauna_session": [
                    "str",
                    "core.models.Recipe",
                    "Callable"
                ]
            }
        },
        "test_from_future_fixtures": {
            "name": "test_from_future_fixtures",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "fauna_session": [
                    "str",
                    "zerver.models.UserProfile",
                    "Optional[Dict[Hashable, Any]]",
                    "dict"
                ]
            }
        },
        "_get_matches_from_different_days": {
            "name": "_get_matches_from_different_days",
            "location": 66,
            "return": [
                "Tuple",
                "str",
                "bool"
            ],
            "arguments": {
                "fixture_matches": [
                    "int",
                    "Union[numpy.ndarray, numpy.void]",
                    "Optional[List[str]]",
                    "datetime.datetime",
                    "str"
                ]
            }
        },
        "test_from_future_fixtures_with_skipped_round": {
            "name": "test_from_future_fixtures_with_skipped_round",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "fauna_session": [
                    "str",
                    "int",
                    "bool",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "test_played_without_results": {
            "name": "test_played_without_results",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "fauna_session": [
                    "str",
                    "int"
                ]
            }
        },
        "test_earliest_without_results": {
            "name": "test_earliest_without_results",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "fauna_session": [
                    "bool",
                    "Callable",
                    "core.models.Grouping"
                ]
            }
        },
        "test_update_results": {
            "name": "test_update_results",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "fauna_session": [
                    "str",
                    "Dict",
                    "bool"
                ]
            }
        }
    },
    "tipresias-main/tipping/src/tests/integration/models/test_ml_model.py": {
        "test_ml_model_creation": {
            "name": "test_ml_model_creation",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "fauna_session": [
                    "app.models.User",
                    "app.models.user.User",
                    "asgard.models.user.User",
                    "asgard.models.accounAccount",
                    "Optional[zerver.models.UserProfile]"
                ]
            }
        },
        "test_one_principal_validation": {
            "name": "test_one_principal_validation",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "MockSession": [],
                "fauna_session": []
            }
        },
        "test_unique_competition_prediction_type_validation": {
            "name": "test_unique_competition_prediction_type_validation",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "MockSession": [],
                "fauna_session": []
            }
        },
        "test_principal_used_in_competitions_validation": {
            "name": "test_principal_used_in_competitions_validation",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "MockSession": [],
                "fauna_session": []
            }
        }
    },
    "tipresias-main/tipping/src/tests/integration/models/test_prediction.py": {
        "test_prediction_creation": {
            "name": "test_prediction_creation",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "fauna_session": [
                    "core.models.Recipe",
                    "Optional[str]"
                ]
            }
        }
    },
    "tipresias-main/tipping/src/tests/integration/models/test_team_match.py": {
        "test_team_match_creation": {
            "name": "test_team_match_creation",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "fauna_session": [
                    "str"
                ]
            }
        },
        "test_from_fixture": {
            "name": "test_from_fixture",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "fauna_session": [
                    "zerver.models.UserProfile",
                    "Dict[str,Any]",
                    "Optional[Dict[str,Any]]",
                    "None"
                ]
            }
        }
    },
    "tipresias-main/tipping/src/tests/integration/models/__init__.py": {},
    "tipresias-main/tipping/src/tests/unit/test_api.py": {
        "TestApi.setUp": {
            "name": "setUp",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApi.test_update_fixture_data": {
            "name": "test_update_fixture_data",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "MockMatch": [
                    "unittesmock.MagicMock"
                ],
                "MockSession": [],
                "MockDataImporter": [
                    "unittesmock.MagicMock"
                ],
                "mock_data_export": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "TestApi.test_update_matches": {
            "name": "test_update_matches",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_fetch_match_data": [
                    "unittesmock.MagicMock"
                ],
                "mock_data_export": [
                    "unittesmock.MagicMock"
                ],
                "MockSession": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "TestApi.test_update_match_results": {
            "name": "test_update_match_results",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "MockDataImporter": [
                    "unittesmock.MagicMock"
                ],
                "mock_data_export": [
                    "Dict[str,Any]",
                    "unittesmock.MagicMock"
                ],
                "MockSession": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "TestApi.test_update_match_predictions": {
            "name": "test_update_match_predictions",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "MockDataImporter": [
                    "unittesmock.MagicMock"
                ],
                "mock_data_export": [
                    "unittesmock.MagicMock"
                ]
            }
        }
    },
    "tipresias-main/tipping/src/tests/unit/test_data_export.py": {
        "test_update_fixture_data": {
            "name": "test_update_fixture_data",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "status_code": [
                    "str",
                    "Dict",
                    "int",
                    "Dict[str,Dict[str,Any]]",
                    "Dict[str,dict[str,Any]]"
                ],
                "expected_error": [
                    "Optional[bytes]",
                    "bytes",
                    "str",
                    "None",
                    "Optional[float]",
                    "Optional[str]",
                    "float",
                    "Union[bool,None]",
                    "bool",
                    "Optional[List[str]]",
                    "List[str]"
                ]
            }
        },
        "test_update_match_predictions": {
            "name": "test_update_match_predictions",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "status_code": [
                    "int",
                    "str",
                    "Dict",
                    "Union[int,str]"
                ],
                "expected_error": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[bytes]",
                    "bytes",
                    "Union[bool,None]",
                    "bool",
                    "Optional[float]",
                    "float",
                    "Optional[List[str]]",
                    "List[str]"
                ]
            }
        },
        "test_update_matches": {
            "name": "test_update_matches",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "status_code": [
                    "str",
                    "Dict",
                    "bytes",
                    "Dict[str,Any]"
                ],
                "expected_error": [
                    "str",
                    "Optional[str]",
                    "None",
                    "Optional[bytes]",
                    "bytes",
                    "Union[bool,None]",
                    "bool",
                    "Optional[float]",
                    "float",
                    "Optional[List[str]]",
                    "List[str]"
                ]
            }
        },
        "test_update_match_results": {
            "name": "test_update_match_results",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "status_code": [
                    "str",
                    "Dict",
                    "bytes",
                    "Dict[str,Any]"
                ],
                "expected_error": [
                    "str",
                    "Optional[bytes]",
                    "bytes",
                    "Optional[str]",
                    "None",
                    "Optional[float]",
                    "float",
                    "Union[bool,None]",
                    "bool",
                    "Optional[List[str]]",
                    "List[str]"
                ]
            }
        }
    },
    "tipresias-main/tipping/src/tests/unit/test_data_import.py": {
        "data_importer": {
            "name": "data_importer",
            "location": 13,
            "return": [
                "DataImporter",
                "str",
                "Dict[str,Any]",
                "bool",
                "Optional[float]"
            ],
            "arguments": {}
        },
        "response_data": {
            "name": "response_data",
            "location": 18,
            "return": [
                "Dict[Text,list[dict[Text,Text]]]",
                "str",
                "Dict"
            ],
            "arguments": {}
        },
        "test_invalid_fetch_match_data_params": {
            "name": "test_invalid_fetch_match_data_params",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "start_date": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "end_date": [
                    "str",
                    "int",
                    "Optional[str]",
                    "None"
                ],
                "data_importer": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "test_responses": {
            "name": "test_responses",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "status_code": [
                    "int",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ],
                "expected_error": [
                    "int",
                    "Optional[int]",
                    "bytes",
                    "None",
                    "str",
                    "Optional[str]"
                ],
                "data_importer": [
                    "int",
                    "datetime.datetime",
                    "str",
                    "None",
                    "Optional[str]"
                ],
                "response_data": [
                    "int",
                    "List[str]",
                    "List[Dict[str,Any]]",
                    "List[dict[str,Any]]"
                ]
            }
        }
    },
    "tipresias-main/tipping/src/tests/unit/test_helpers.py": {
        "TestHelpers.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHelpers.test_pivot_team_matches_to_matches": {
            "name": "test_pivot_team_matches_to_matches",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHelpers.test_convert_to_dict": {
            "name": "test_convert_to_dict",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tipresias-main/tipping/src/tests/unit/test_version.py": {
        "test_lambda_version_compatibility": {
            "name": "test_lambda_version_compatibility",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tipresias-main/tipping/src/tests/unit/__init__.py": {},
    "tipresias-main/tipping/src/tests/unit/db/__init__.py": {},
    "tipresias-main/tipping/src/tests/unit/models/test_match.py": {
        "test_match_validation": {
            "name": "test_match_validation",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "attribute": [
                    "str",
                    "Dict",
                    "Optional[zerver.models.Realm]",
                    "None"
                ],
                "error_message": [
                    "str"
                ]
            }
        },
        "test_update_results": {
            "name": "test_update_results",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_update_result": [
                    "core_lib.core.models.Venue"
                ]
            }
        },
        "test_update_result": {
            "name": "test_update_result",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "start_date_time": [
                    "str",
                    "int",
                    "datetime.datetime"
                ],
                "expected_winner": [
                    "str",
                    "Dict",
                    "Dict[str,str]",
                    "List[tuple[Union[str,str]]]",
                    "List[Tuple[str,str]]",
                    "List[list]",
                    "Tuple",
                    "Dict[str,list[Any]]",
                    "Dict[str,List[Any]]",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "tipresias-main/tipping/src/tests/unit/models/test_ml_model.py": {
        "test_prediction_type_validation": {
            "name": "test_prediction_type_validation",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tipresias-main/tipping/src/tests/unit/models/test_prediction.py": {
        "test_prediction_validation": {
            "name": "test_prediction_validation",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "attribute": [
                    "str",
                    "Optional[zerver.models.Realm]",
                    "None"
                ],
                "error_message": [
                    "str"
                ]
            }
        },
        "test_update_correctness": {
            "name": "test_update_correctness",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "MockMatch": [
                    "mock.Mock"
                ],
                "has_been_played": [
                    "str",
                    "int",
                    "mock.MagicMock",
                    "mock.Mock"
                ],
                "is_draw": [
                    "str",
                    "int",
                    "mock.MagicMock",
                    "mock.Mock"
                ],
                "winner": [
                    "str",
                    "int",
                    "mock.MagicMock",
                    "mock.Mock"
                ],
                "expected_correctness": [
                    "int"
                ]
            }
        }
    },
    "tipresias-main/tipping/src/tests/unit/models/test_team.py": {
        "test_team_name_validation": {
            "name": "test_team_name_validation",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tipresias-main/tipping/src/tests/unit/models/test_team_match.py": {
        "test_team_match_validation": {
            "name": "test_team_match_validation",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "attribute": [
                    "Dict",
                    "str",
                    "Optional[zerver.models.Realm]",
                    "None"
                ],
                "error_message": [
                    "str"
                ]
            }
        },
        "test_update_score": {
            "name": "test_update_score",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tipresias-main/tipping/src/tests/unit/models/__init__.py": {},
    "tipresias-main/tipping/src/tipping/api.py": {
        "_select_matches_from_current_round": {
            "name": "_select_matches_from_current_round",
            "location": 23,
            "return": [
                "None",
                "bool",
                "Optional[float]",
                "Optional[str]"
            ],
            "arguments": {
                "fixture_data_frame": [
                    "str",
                    "Optional[datetime.datetime]",
                    "bool",
                    "Optional[Dict]",
                    "Sequence[str]",
                    "Optional[str]"
                ],
                "beginning_of_today": [
                    "int",
                    "None",
                    "Dict[str,Any]",
                    "Optional[datetime.datetime]",
                    "Optional[int]",
                    "bool",
                    "Optional[Dict[str,Any]]"
                ],
                "after": [
                    "bool",
                    "int",
                    "float",
                    "str",
                    "Optional[int]",
                    "Tuple[float,float]"
                ]
            }
        },
        "_fetch_current_round_fixture": {
            "name": "_fetch_current_round_fixture",
            "location": 63,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "verbose": [
                    "int",
                    "str",
                    "Iterable[Context]",
                    "Dict",
                    "bool"
                ],
                "after": [
                    "bool",
                    "str",
                    "Union[Callable,None]",
                    "List[int]",
                    "int"
                ]
            }
        },
        "update_fixture_data": {
            "name": "update_fixture_data",
            "location": 87,
            "return": [
                "None",
                "Optional[int]",
                "Optional[bool]",
                "Optional[float]",
                "str"
            ],
            "arguments": {
                "verbose": [
                    "int",
                    "str"
                ]
            }
        },
        "update_match_predictions": {
            "name": "update_match_predictions",
            "location": 122,
            "return": [
                "None",
                "Optional[str]",
                "Optional[bool]",
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "tips_submitters": [
                    "bool",
                    "None",
                    "str",
                    "Union[str,Pattern]",
                    "Dict[str,Dict]",
                    "Pattern",
                    "Dict[str,Any]",
                    "Dict[str,dict]"
                ],
                "verbose": [
                    "int",
                    "Tuple[float,float]",
                    "Optional[str]",
                    "str",
                    "Optional[dict]",
                    "Dict[str,object]",
                    "float"
                ],
                "ml_model_names": [
                    "Optional[str]",
                    "None",
                    "bytes",
                    "str",
                    "bool"
                ]
            }
        },
        "update_matches": {
            "name": "update_matches",
            "location": 179,
            "return": [
                "None",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "verbose": [
                    "int",
                    "float",
                    "Optional[datetime.datetime]",
                    "Dict",
                    "models.Credentials"
                ]
            }
        },
        "update_match_results": {
            "name": "update_match_results",
            "location": 215,
            "return": [
                "None",
                "Sequence[Callable]",
                "Optional[int]",
                "Optional[float]",
                "Optional[tuple]",
                "Union[str,None]",
                "models.Organization"
            ],
            "arguments": {
                "verbose": [
                    "List[int]",
                    "int"
                ]
            }
        }
    },
    "tipresias-main/tipping/src/tipping/data_export.py": {
        "_error_message": {
            "name": "_error_message",
            "location": 24,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "url": [
                    "Dict",
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "requests.Response"
                ],
                "response": [
                    "Dict",
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "requests.Response"
                ]
            }
        },
        "_send_data": {
            "name": "_send_data",
            "location": 33,
            "return": [
                "dict",
                "Optional[str]",
                "List[dict]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "List[str]"
                ],
                "body": [
                    "str",
                    "Dict",
                    "None"
                ]
            }
        },
        "update_fixture_data": {
            "name": "update_fixture_data",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "fixture_data": [
                    "Dict",
                    "Dict[int,Dict]",
                    "Dict[int,dict]"
                ],
                "upcoming_round": [
                    "Dict",
                    "Dict[int,Dict]",
                    "Dict[int,dict]"
                ]
            }
        },
        "update_match_predictions": {
            "name": "update_match_predictions",
            "location": 76,
            "return": [
                "int",
                "bool",
                "Optional[float]",
                "IO[bytes]",
                "dict",
                "str"
            ],
            "arguments": {
                "prediction_data": [
                    "Dict",
                    "bytes",
                    "Dict[str,Any]"
                ]
            }
        },
        "update_matches": {
            "name": "update_matches",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "match_data": [
                    "Dict",
                    "int",
                    "Dict[str,Any]",
                    "Dict[str,str]"
                ]
            }
        },
        "update_match_results": {
            "name": "update_match_results",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "match_results_data": [
                    "Dict"
                ]
            }
        }
    },
    "tipresias-main/tipping/src/tipping/data_import.py": {
        "DataImporter.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "float"
                ]
            }
        },
        "DataImporter.fetch_prediction_data": {
            "name": "fetch_prediction_data",
            "location": 48,
            "return": [
                "int",
                "bool",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "year_range": [
                    "bool",
                    "float",
                    "Optional[float]",
                    "None",
                    "Optional[Union[AbstractSetIntStr,MappingIntStrAny]]",
                    "str",
                    "int",
                    "Any",
                    "Optional[str]",
                    "Optional[Any]"
                ],
                "round_number": [
                    "bool",
                    "None",
                    "Optional[float]",
                    "float",
                    "Optional[Union[AbstractSetIntStr,MappingIntStrAny]]",
                    "str",
                    "int",
                    "Any",
                    "Optional[str]",
                    "Optional[Any]"
                ],
                "ml_model_names": [
                    "bool",
                    "None",
                    "Optional[float]",
                    "float",
                    "Optional[Union[AbstractSetIntStr,MappingIntStrAny]]",
                    "str",
                    "int",
                    "Any",
                    "Optional[str]",
                    "Optional[Any]"
                ],
                "train_models": [
                    "bool",
                    "Optional[float]",
                    "Optional[Union[AbstractSetIntStr,MappingIntStrAny]]",
                    "int",
                    "Optional[str]",
                    "Optional[Any]"
                ]
            }
        },
        "DataImporter.fetch_fixture_data": {
            "name": "fetch_fixture_data",
            "location": 84,
            "return": [
                "List",
                "str",
                "float",
                "Optional[int]",
                "Union[int,Tuple[int,...]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "start_date": [
                    "str",
                    "datetime.datetime",
                    "datetime.date",
                    "pandas.Timestamp"
                ],
                "end_date": [
                    "str",
                    "datetime.datetime",
                    "datetime.date",
                    "pandas.Timestamp"
                ]
            }
        },
        "DataImporter.fetch_match_data": {
            "name": "fetch_match_data",
            "location": 112,
            "return": [
                "List",
                "datetime.datetime",
                "Union[str,int]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "start_date": [
                    "str",
                    "int",
                    "datetime.datetime"
                ],
                "end_date": [
                    "str",
                    "None",
                    "int",
                    "Optional[str]",
                    "datetime.date",
                    "datetime.datetime"
                ],
                "fetch_data": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "int",
                    "pandas.DatetimeIndex"
                ]
            }
        },
        "DataImporter.fetch_match_results_data": {
            "name": "fetch_match_results_data",
            "location": 149,
            "return": [
                "List",
                "datetime.datetime",
                "pandas.DataFrame",
                "bool"
            ],
            "arguments": {
                "self": [],
                "round_number": [
                    "Dict",
                    "int",
                    "Optional[Dict]",
                    "None"
                ]
            }
        },
        "DataImporter.fetch_ml_model_info": {
            "name": "fetch_ml_model_info",
            "location": 170,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataImporter._validate_date_string": {
            "name": "_validate_date_string",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "date_string": [
                    "str",
                    "Optional[int]",
                    "Sequence[str]",
                    "int",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "DataImporter._parse_dates": {
            "name": "_parse_dates",
            "location": 189,
            "return": [
                "bool",
                "pandas.DataFrame",
                "int"
            ],
            "arguments": {
                "data_frame": [
                    "str",
                    "List[T]",
                    "parser.Parser",
                    "bool"
                ]
            }
        },
        "DataImporter._clean_datetime_param": {
            "name": "_clean_datetime_param",
            "location": 199,
            "return": [
                "str",
                "None",
                "int",
                "bool"
            ],
            "arguments": {
                "param_value": [
                    "str",
                    "bool",
                    "None",
                    "Mapping",
                    "Optional[datetime.datetime]",
                    "bytes",
                    "datetime.datetime",
                    "datetime.date"
                ]
            }
        },
        "DataImporter._clean_param_value": {
            "name": "_clean_param_value",
            "location": 208,
            "return": [
                "datetime.datetime",
                "str"
            ],
            "arguments": {
                "self": [],
                "param_value": [
                    "int",
                    "Dict",
                    "fklearn.types.UncurriedLearnerFnType"
                ]
            }
        },
        "DataImporter._fetch_data": {
            "name": "_fetch_data",
            "location": 211,
            "return": [
                "int",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "params": [
                    "str",
                    "Optional[Union[Dict,str,int,bytes]]",
                    "None",
                    "List[str]",
                    "Dict",
                    "int",
                    "bytes"
                ]
            }
        },
        "DataImporter._error_message": {
            "name": "_error_message",
            "location": 241,
            "return": [
                "str",
                "Text"
            ],
            "arguments": {
                "url": [
                    "Dict",
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "requests.Response"
                ],
                "response": [
                    "Dict",
                    "Dict[str,Any]",
                    "Dict[str,str]",
                    "requests.Response"
                ]
            }
        }
    },
    "tipresias-main/tipping/src/tipping/helpers.py": {
        "_replace_metric_col_names": {
            "name": "_replace_metric_col_names",
            "location": 11,
            "return": [
                "Callable",
                "bool",
                "Optional[str]",
                "Dict[str,Any]",
                "str",
                "Pattern"
            ],
            "arguments": {
                "team_type": [
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "Mapping[str,Any]",
                    "None",
                    "Mapping"
                ]
            }
        },
        "_replace_team_col_names": {
            "name": "_replace_team_col_names",
            "location": 15,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "team_type": [
                    "str",
                    "int",
                    "Type"
                ]
            }
        },
        "_home_away_data_frame": {
            "name": "_home_away_data_frame",
            "location": 21,
            "return": [
                "bytes",
                "bool",
                "str",
                "Callable"
            ],
            "arguments": {
                "data_frame": [
                    "Dict",
                    "pandas.DataFrame"
                ],
                "team_type": [
                    "str",
                    "bool",
                    "Match",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "pivot_team_matches_to_matches": {
            "name": "pivot_team_matches_to_matches",
            "location": 34,
            "return": [
                "Optional[numpy.ndarray]",
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "team_match_df": [
                    "Iterable[bool]",
                    "Sequence[int]",
                    "pandas.DataFrame",
                    "float",
                    "Dict"
                ]
            }
        },
        "convert_to_dict": {
            "name": "convert_to_dict",
            "location": 60,
            "return": [
                "dict",
                "int",
                "Dict[str, float]",
                "bytes",
                "Dict[str, Union[str, bool]]"
            ],
            "arguments": {
                "data_frame": [
                    "str",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "bytes",
                    "None",
                    "Dict"
                ]
            }
        }
    },
    "tipresias-main/tipping/src/tipping/settings.py": {},
    "tipresias-main/tipping/src/tipping/tipping.py": {
        "MonashSubmitter.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "competitions": [
                    "int",
                    "None",
                    "float",
                    "bool",
                    "apistar.types.RouteConfig"
                ],
                "browser": [
                    "int",
                    "None",
                    "float",
                    "bool",
                    "apistar.types.RouteConfig"
                ],
                "verbose": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ]
            }
        },
        "MonashSubmitter.submit_tips": {
            "name": "submit_tips",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "predictions": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "MonashSubmitter._transform_into_tipping_input": {
            "name": "_transform_into_tipping_input",
            "location": 75,
            "return": [
                "Dict",
                "Optional[str]",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "competition": [
                    "str"
                ],
                "predictions": [
                    "Dict",
                    "pandas.DataFrame"
                ]
            }
        },
        "MonashSubmitter._clean_numeric_input": {
            "name": "_clean_numeric_input",
            "location": 93,
            "return": [
                "str"
            ],
            "arguments": {
                "competition_prediction_type": [
                    "int",
                    "str",
                    "bool"
                ],
                "predicted_winner": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "MonashSubmitter._submit_competition_tips": {
            "name": "_submit_competition_tips",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "competition": [
                    "int",
                    "Callable",
                    "str"
                ],
                "predicted_winners": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "MonashSubmitter._login": {
            "name": "_login",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "competition": [
                    "str",
                    "Callable",
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "MonashSubmitter._submit_tipping_form": {
            "name": "_submit_tipping_form",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "predicted_winners": [
                    "int",
                    "List",
                    "pandas.DataFrame",
                    "bool"
                ]
            }
        },
        "MonashSubmitter._enter_prediction": {
            "name": "_enter_prediction",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "predicted_winners": [
                    "Dict[str, str]",
                    "Tuple[bool]",
                    "Optional[str]"
                ],
                "table_row": [
                    "bool",
                    "Iterable",
                    "List[str]",
                    "bytes",
                    "str"
                ]
            }
        },
        "MonashSubmitter._translate_team_name": {
            "name": "_translate_team_name",
            "location": 205,
            "return": [
                "str",
                "Dict[str,Any]",
                "mypy.types.Type",
                "exporwiki.types.MissionType"
            ],
            "arguments": {
                "element_text": [
                    "str"
                ]
            }
        },
        "FootyTipsSubmitter.__init__": {
            "name": "__init__",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "browser": [
                    "int",
                    "None",
                    "str",
                    "List[Dict[str,Any]]",
                    "Optional[Union[int,str]]",
                    "List[dict[str,Any]]"
                ],
                "verbose": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ]
            }
        },
        "FootyTipsSubmitter.submit_tips": {
            "name": "submit_tips",
            "location": 232,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "predictions": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "FootyTipsSubmitter._transform_into_tipping_input": {
            "name": "_transform_into_tipping_input",
            "location": 257,
            "return": [
                "Dict[,int]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "predictions": [
                    "Dict",
                    "pandas.DataFrame"
                ]
            }
        },
        "FootyTipsSubmitter._translate_team_name": {
            "name": "_translate_team_name",
            "location": 273,
            "return": [
                "str",
                "Dict[str,Any]",
                "mypy.types.Type",
                "exporwiki.types.MissionType"
            ],
            "arguments": {
                "element_text": [
                    "str"
                ]
            }
        },
        "FootyTipsSubmitter._call_splash_service": {
            "name": "_call_splash_service",
            "location": 279,
            "return": [
                "bytes",
                "str",
                "List[str]",
                "types.ServiceT",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "predictions": [
                    "Dict",
                    "str",
                    "Dict[str,Any]"
                ]
            }
        }
    },
    "tipresias-main/tipping/src/tipping/types.py": {},
    "tipresias-main/tipping/src/tipping/__init__.py": {},
    "tipresias-main/tipping/src/tipping/models/base.py": {},
    "tipresias-main/tipping/src/tipping/models/match.py": {
        "Match.from_future_fixtures": {
            "name": "from_future_fixtures",
            "location": 69,
            "return": [
                "List",
                "Dict",
                "List[Match]",
                "str",
                "Dict[int,str]",
                "Dict[str,Any]",
                "Iterable[Tuple[str,str]]",
                "List[PydanticModelField]",
                "BaseException"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "str",
                    "Type[T]",
                    "Dict[str,str]",
                    "Callable",
                    "Type[tuple]"
                ],
                "session": [
                    "Dict",
                    "bool",
                    "grouper.models.base.session.Session",
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.exdeclarative.DeclarativeMeta"
                ],
                "fixture_matches": [
                    "str",
                    "robot_server.service.session.session_types.base_session.SessionMetaData",
                    "robot_server.service.session.configuration.SessionConfiguration",
                    "float",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ],
                "upcoming_round": [
                    "Dict",
                    "bool",
                    "grouper.models.base.session.Session",
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.exdeclarative.DeclarativeMeta"
                ]
            }
        },
        "Match.get_or_new": {
            "name": "get_or_new",
            "location": 149,
            "return": [
                "datetime.datetime",
                "Type",
                "int",
                "Match",
                "None",
                "List"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "int"
                ],
                "session": [
                    "str"
                ],
                "start_date_time": [
                    "None",
                    "int",
                    "datetime.datetime",
                    "str",
                    "datetime.date",
                    "Optional[str]"
                ],
                "round_number": [
                    "str"
                ],
                "venue": [
                    "str",
                    "None"
                ]
            }
        },
        "Match.played_without_results": {
            "name": "played_without_results",
            "location": 194,
            "return": [
                "str",
                "Dict[str, str]",
                "Type"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "bool",
                    "Type[object]",
                    "str",
                    "Callable",
                    "int"
                ]
            }
        },
        "Match.earliest_without_results": {
            "name": "earliest_without_results",
            "location": 215,
            "return": [
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "List[float]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "Match.update_results": {
            "name": "update_results",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "List",
                    "int"
                ],
                "matches": [
                    "List",
                    "bool",
                    "int"
                ],
                "match_results": [
                    "list",
                    "Column",
                    "dict"
                ]
            }
        },
        "Match.update_result": {
            "name": "update_result",
            "location": 244,
            "return": [
                "None",
                "Optional[int]",
                "Optional[bool]",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "match_result": [
                    "pandas.DataFrame",
                    "Dict[str,Any]",
                    "Sequence[T]",
                    "Optional[Dict[str,Any]]",
                    "None",
                    "Callable[[T],bool]",
                    "Callable[T,bool]"
                ]
            }
        },
        "Match.has_been_played": {
            "name": "has_been_played",
            "location": 270,
            "return": [
                "bool",
                "str",
                "Union[dict,list]",
                "Callable",
                "datetime.date",
                "Dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Match.is_draw": {
            "name": "is_draw",
            "location": 276,
            "return": [
                "Callable[..., None]",
                "List[Union[\"PipeChain\", str]]",
                "Callable[[KT], VT]",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Match.has_results": {
            "name": "has_results",
            "location": 283,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Match.year": {
            "name": "year",
            "location": 288,
            "return": [
                "str",
                "datetime.date",
                "datetime.timedelta",
                "pandas.core.series.Series"
            ],
            "arguments": {
                "self": []
            }
        },
        "Match.team": {
            "name": "team",
            "location": 292,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "at_home": [
                    "Optional[str]",
                    "None",
                    "Optional[int]",
                    "str",
                    "Optional[float]",
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Match._has_score": {
            "name": "_has_score",
            "location": 304,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Match._match_scores": {
            "name": "_match_scores",
            "location": 308,
            "return": [
                "List",
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Match._save_result": {
            "name": "_save_result",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Match._calculate_margin": {
            "name": "_calculate_margin",
            "location": 315,
            "return": [
                "None",
                "Optional[str]",
                "Optional[bool]",
                "str",
                "Optional[dbadapters.base.relation.BaseRelation]",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Match._calculate_winner": {
            "name": "_calculate_winner",
            "location": 323,
            "return": [
                "None",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Match._validate_results_data_presence": {
            "name": "_validate_results_data_presence",
            "location": 330,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "match_result": [
                    "bool",
                    "float",
                    "datetime.datetime",
                    "str",
                    "pandas.DataFrame",
                    "datetime.date"
                ]
            }
        },
        "Match._validate_one_result_row": {
            "name": "_validate_one_result_row",
            "location": 365,
            "return": [
                "None"
            ],
            "arguments": {
                "match_result": [
                    "bool",
                    "pandas.DataFrame",
                    "datetime.datetime"
                ]
            }
        },
        "Match.validate_at_least_min_round": {
            "name": "validate_at_least_min_round",
            "location": 374,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "_key": [
                    "str",
                    "Union[float,int]",
                    "float",
                    "int"
                ],
                "round_number": [
                    "float",
                    "str",
                    "Optional[bytes]",
                    "Union[str,bytes]",
                    "Optional[datetime.timedelta]",
                    "Optional[float]"
                ]
            }
        },
        "Match.validate_postive_margin": {
            "name": "validate_postive_margin",
            "location": 385,
            "return": [
                "int",
                "float",
                "List[List[int]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "_key": [
                    "int",
                    "str"
                ],
                "margin": [
                    "int",
                    "float",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "Match.validate_utc": {
            "name": "validate_utc",
            "location": 395,
            "return": [
                "int",
                "str",
                "None",
                "datetime.date",
                "datetime.timedelta",
                "pandas.core.series.Series"
            ],
            "arguments": {
                "self": [],
                "_key": [
                    "bool",
                    "Hashable",
                    "Mapping",
                    "Sequence"
                ],
                "start_date_time": [
                    "int",
                    "datetime.datetime",
                    "None",
                    "pandas.DataFrame",
                    "Optional[datetime.datetime]"
                ]
            }
        }
    },
    "tipresias-main/tipping/src/tipping/models/ml_model.py": {
        "PredictionType.has_value": {
            "name": "has_value",
            "location": 27,
            "return": [
                "bool",
                "List[str]",
                "Iterable[str]",
                "str",
                "List[Dict[str,Any]]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "PredictionType.values": {
            "name": "values",
            "location": 32,
            "return": [
                "List",
                "int",
                "List[Dict[str,str]]",
                "Optional[dict]",
                "Dict[str,Any]",
                "Sequence[Any]",
                "Set[str]",
                "Optional[T]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "Union[int,float,str]",
                    "float",
                    "Type[object]",
                    "Type"
                ]
            }
        },
        "MLModel.validate_competition_attributes": {
            "name": "validate_competition_attributes",
            "location": 64,
            "return": [
                "str",
                "int",
                "Dict",
                "Dict[str,Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Dict",
                    "bool"
                ],
                "value": [
                    "str",
                    "Dict",
                    "bool"
                ]
            }
        },
        "MLModel._validate_one_principal": {
            "name": "_validate_one_principal",
            "location": 84,
            "return": [
                "None",
                "Optional[str]",
                "Type",
                "Optional[List[Any]]",
                "List"
            ],
            "arguments": {
                "self": [],
                "is_principal": [
                    "float",
                    "int"
                ]
            }
        },
        "MLModel._validate_unique_competition_prediction_type": {
            "name": "_validate_unique_competition_prediction_type",
            "location": 101,
            "return": [
                "None",
                "Optional[int]",
                "Optional[str]",
                "bool",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "used_in_competitions": [
                    "bool",
                    "None",
                    "purplship.core.models.RateDetails",
                    "Optional[nativecards.lib.dicts.models.DictionaryEntry]"
                ],
                "prediction_type": [
                    "bool",
                    "Dict[str,Any]",
                    "purplship.core.models.RateDetails"
                ]
            }
        },
        "MLModel._validate_prediction_type": {
            "name": "_validate_prediction_type",
            "location": 128,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "prediction_type": [
                    "str",
                    "int",
                    "util.image.models.ImageType"
                ]
            }
        },
        "MLModel._fetch_one": {
            "name": "_fetch_one",
            "location": 137,
            "return": [
                "str",
                "cmk.base.events.EventContext",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "sql_statement": [
                    "bool",
                    "Optional[Type]",
                    "Type",
                    "Dict[str,Any]",
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "tipresias-main/tipping/src/tipping/models/prediction.py": {
        "Prediction.update_correctness": {
            "name": "update_correctness",
            "location": 33,
            "return": [
                "None",
                "Optional[bool]",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Prediction.validate_predicted_margin": {
            "name": "validate_predicted_margin",
            "location": 46,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "_key": [
                    "str",
                    "int"
                ],
                "value": [
                    "int",
                    "Set[int]",
                    "Callable",
                    "Optional[str]",
                    "KT"
                ]
            }
        },
        "Prediction.validate_predicted_win_probability": {
            "name": "validate_predicted_win_probability",
            "location": 56,
            "return": [
                "str",
                "Type[T]",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "_key": [
                    "str",
                    "int",
                    "slice"
                ],
                "value": [
                    "str",
                    "dict"
                ]
            }
        }
    },
    "tipresias-main/tipping/src/tipping/models/team.py": {
        "TeamName.has_value": {
            "name": "has_value",
            "location": 37,
            "return": [
                "bool",
                "List[str]",
                "Iterable[str]",
                "str",
                "List[Dict[str,Any]]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "TeamName.values": {
            "name": "values",
            "location": 42,
            "return": [
                "List",
                "int",
                "List[Dict[str,str]]",
                "Optional[dict]",
                "Dict[str,Any]",
                "Sequence[Any]",
                "Set[str]",
                "Optional[T]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "Union[int,float,str]",
                    "float",
                    "Type[object]",
                    "Type"
                ]
            }
        },
        "Team.validate_team_name": {
            "name": "validate_team_name",
            "location": 56,
            "return": [
                "str",
                "List[str]",
                "Set[str]",
                "Dict[str,L]"
            ],
            "arguments": {
                "self": [],
                "_key": [
                    "str",
                    "bool",
                    "Type[T]",
                    "Type"
                ],
                "name": [
                    "str",
                    "Set[str]",
                    "Dict[str,LabwareDefinition]",
                    "Dict[str,L]"
                ]
            }
        }
    },
    "tipresias-main/tipping/src/tipping/models/team_match.py": {
        "TeamMatch.from_fixture": {
            "name": "from_fixture",
            "location": 30,
            "return": [
                "Tuple",
                "str",
                "Optional[str]",
                "Dict[str,Any]",
                "sqlalchemy.engine.Engine"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Iterable['Notification']",
                    "List[Dict]"
                ],
                "session": [
                    "Dict",
                    "List[dict]",
                    "Iterable[Notification]",
                    "List[Dict]"
                ],
                "fixture_data": [
                    "Dict",
                    "List[dict]",
                    "Iterable[Notification]",
                    "List[Dict]"
                ]
            }
        },
        "TeamMatch._single_team_match_from_fixture": {
            "name": "_single_team_match_from_fixture",
            "location": 50,
            "return": [
                "TeamMatch",
                "int",
                "Dict",
                "str",
                "pandas.DataFrame"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List",
                    "int",
                    "Dict[str,Any]",
                    "Type[T]",
                    "Type"
                ],
                "session": [
                    "Dict[str,Any]",
                    "sqlalchemy.orm.Session",
                    "alerta.database.base.Query"
                ],
                "fixture_data": [
                    "str",
                    "bool",
                    "Sequence[str]",
                    "dict",
                    "Dict[str, str]"
                ],
                "at_home": [
                    "Dict[str,Any]",
                    "Dict",
                    "Mapping[str,str]",
                    "Mapping"
                ]
            }
        },
        "TeamMatch.update_score": {
            "name": "update_score",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "match_result": [
                    "str",
                    "List[str]",
                    "Dict[str,Any]",
                    "Union[str,List[str]]"
                ]
            }
        },
        "TeamMatch.validate_postive_score": {
            "name": "validate_postive_score",
            "location": 78,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "_key": [
                    "str",
                    "Union[float,int]",
                    "float",
                    "int"
                ],
                "score": [
                    "int",
                    "Optional[str]",
                    "Optional[int]",
                    "Hashable"
                ]
            }
        }
    },
    "tipresias-main/tipping/src/tipping/models/__init__.py": {}
}
{
    "todovoodoo-master/manage.py": {},
    "todovoodoo-master/config/urls.py": {},
    "todovoodoo-master/config/wsgi.py": {},
    "todovoodoo-master/config/__init__.py": {},
    "todovoodoo-master/config/settings/base.py": {},
    "todovoodoo-master/config/settings/local.py": {},
    "todovoodoo-master/config/settings/production.py": {},
    "todovoodoo-master/config/settings/test.py": {},
    "todovoodoo-master/config/settings/__init__.py": {},
    "todovoodoo-master/todovoodoo/conftest.py": {
        "media_storage": {
            "name": "media_storage",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "settings": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None",
                    "list[str]"
                ],
                "tmpdir": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "None",
                    "list[str]"
                ]
            }
        },
        "user": {
            "name": "user",
            "location": 14,
            "return": [
                "UserFactory",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "request_factory": {
            "name": "request_factory",
            "location": 19,
            "return": [
                "RequestFactory",
                "int",
                "List[Dict[str, Any]]",
                "bool",
                "list"
            ],
            "arguments": {}
        }
    },
    "todovoodoo-master/todovoodoo/__init__.py": {},
    "todovoodoo-master/todovoodoo/api/apps.py": {},
    "todovoodoo-master/todovoodoo/api/serializers.py": {},
    "todovoodoo-master/todovoodoo/api/urls.py": {},
    "todovoodoo-master/todovoodoo/api/viewsets.py": {
        "TodoListViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 24,
            "return": [
                "Dict[str, int]",
                "djmoney.contrib.exchange.models.Rate",
                "zerver.models.Realm",
                "int",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListItemViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 33,
            "return": [
                "List[str]",
                "dict",
                "str",
                "List[Dict]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "todovoodoo-master/todovoodoo/api/__init__.py": {},
    "todovoodoo-master/todovoodoo/api/tests/test_api.py": {
        "TodoListTestCase.setUp": {
            "name": "setUp",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TodoListTestCase.test_get": {
            "name": "test_get",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListItemTestCase.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListItemTestCase.test_get": {
            "name": "test_get",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "todovoodoo-master/todovoodoo/api/tests/__init__.py": {},
    "todovoodoo-master/todovoodoo/contrib/__init__.py": {},
    "todovoodoo-master/todovoodoo/contrib/sites/__init__.py": {},
    "todovoodoo-master/todovoodoo/contrib/sites/migrations/0001_initial.py": {},
    "todovoodoo-master/todovoodoo/contrib/sites/migrations/0002_alter_domain_unique.py": {},
    "todovoodoo-master/todovoodoo/contrib/sites/migrations/0003_set_site_domain_and_name.py": {
        "update_site_forward": {
            "name": "update_site_forward",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [
                    "django.db.migrations.state.StateApps",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "schema_editor": [
                    "int",
                    "str",
                    "None",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "update_site_backward": {
            "name": "update_site_backward",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [
                    "django.db.migrations.state.StateApps",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "schema_editor": [
                    "int",
                    "str",
                    "None",
                    "Optional[bool]",
                    "bool"
                ]
            }
        }
    },
    "todovoodoo-master/todovoodoo/contrib/sites/migrations/__init__.py": {},
    "todovoodoo-master/todovoodoo/core/admin.py": {},
    "todovoodoo-master/todovoodoo/core/apps.py": {},
    "todovoodoo-master/todovoodoo/core/forms.py": {
        "ListItemForm.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "todovoodoo-master/todovoodoo/core/models.py": {
        "get_file_path": {
            "name": "get_file_path",
            "location": 141,
            "return": [
                "str"
            ],
            "arguments": {
                "instance": [
                    "str",
                    "List[str]",
                    "list[str]"
                ],
                "filename": [
                    "str",
                    "int"
                ]
            }
        },
        "ListItem.postpone": {
            "name": "postpone",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "days": [
                    "int"
                ]
            }
        },
        "ListItem.mark_complete": {
            "name": "mark_complete",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListItem._next_due_date": {
            "name": "_next_due_date",
            "location": 42,
            "return": [
                "str",
                "datetime.datetime",
                "int",
                "Optional[datetime.tzinfo]",
                "Union[datetime.datetime, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TodoList.add_todo": {
            "name": "add_todo",
            "location": 78,
            "return": [
                "ListItem"
            ],
            "arguments": {
                "self": [],
                "description": [
                    "str"
                ],
                "due_date": [
                    "datetime.date"
                ]
            }
        },
        "TodoList.as_json": {
            "name": "as_json",
            "location": 82,
            "return": [
                "int",
                "salon.models.Stylist",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Station.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 121,
            "return": [
                "str",
                "Optional[float]",
                "List[Optional[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportEntry.set_report_type": {
            "name": "set_report_type",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "todovoodoo-master/todovoodoo/core/tasks.py": {
        "send_pushover_notification": {
            "name": "send_pushover_notification",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "entry": [],
                "photo_url": []
            }
        },
        "send_message": {
            "name": "send_message",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "generate_weekly_report": {
            "name": "generate_weekly_report",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "todovoodoo-master/todovoodoo/core/tests.py": {},
    "todovoodoo-master/todovoodoo/core/urls.py": {},
    "todovoodoo-master/todovoodoo/core/__init__.py": {},
    "todovoodoo-master/todovoodoo/core/migrations/0001_initial.py": {},
    "todovoodoo-master/todovoodoo/core/migrations/0002_add_public_id.py": {},
    "todovoodoo-master/todovoodoo/core/migrations/0003_listitem_always_show.py": {},
    "todovoodoo-master/todovoodoo/core/migrations/0004_reportentry_station.py": {},
    "todovoodoo-master/todovoodoo/core/migrations/0005_station_refund_value.py": {},
    "todovoodoo-master/todovoodoo/core/migrations/0006_auto_20190928_0008.py": {},
    "todovoodoo-master/todovoodoo/core/migrations/0007_station_slug.py": {},
    "todovoodoo-master/todovoodoo/core/migrations/0008_auto_20191011_0006.py": {},
    "todovoodoo-master/todovoodoo/core/migrations/0009_auto_20191011_2242.py": {},
    "todovoodoo-master/todovoodoo/core/migrations/0010_auto_20191103_2238.py": {},
    "todovoodoo-master/todovoodoo/core/migrations/0011_auto_20191104_0104.py": {},
    "todovoodoo-master/todovoodoo/core/migrations/0012_auto_20200402_1915.py": {},
    "todovoodoo-master/todovoodoo/core/migrations/__init__.py": {},
    "todovoodoo-master/todovoodoo/core/tests/factories.py": {},
    "todovoodoo-master/todovoodoo/core/tests/test_models.py": {
        "test_mark_complete": {
            "name": "test_mark_complete",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "str",
                    "core.models.Recipe"
                ]
            }
        }
    },
    "todovoodoo-master/todovoodoo/core/tests/test_urls.py": {
        "test_delete_list": {
            "name": "test_delete_list",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_create_list": {
            "name": "test_create_list",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_lists": {
            "name": "test_lists",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_default_redirect": {
            "name": "test_default_redirect",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "todovoodoo-master/todovoodoo/core/tests/test_views.py": {
        "MasterListTests.setUp": {
            "name": "setUp",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "todovoodoo-master/todovoodoo/core/tests/__init__.py": {},
    "todovoodoo-master/todovoodoo/core/views/create.py": {
        "ReportEntryCreateView.get_context_data": {
            "name": "get_context_data",
            "location": 27,
            "return": [
                "dict[typing.Text, typing.Union[dict[str, typing.Any],dict[str, str],str,dict[str, int],dict[, ]]]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportEntryCreateView.get_success_url": {
            "name": "get_success_url",
            "location": 46,
            "return": [
                "List[str]",
                "int",
                "str",
                "Callable",
                "salon.models.Stylist"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportEntryCreateView.form_valid": {
            "name": "form_valid",
            "location": 49,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "StationView.get_context_data": {
            "name": "get_context_data",
            "location": 71,
            "return": [
                "dict[typing.Text, typing.Union[list[],StationForm]]",
                "dict[typing.Union[str,typing.Text,typing.Text,typing.Text,typing.Text,typing.Text,typing.Text,typing.Text,typing.Text], typing.Union[str,dict[, ],list[tuple[]],bool,ListItemForm,StationItemForm,StationForm]]",
                "bytes",
                "List[str]",
                "Optional[str]",
                "str",
                "List[torch.nn.utils.rnn.PackedSequence]"
            ],
            "arguments": {
                "self": [],
                "pub_id": [
                    "int",
                    "None",
                    "str",
                    "Optional[str]",
                    "typing.Mapping",
                    "bool",
                    "Mapping[str, Any]"
                ]
            }
        },
        "ListItemCreate.form_valid": {
            "name": "form_valid",
            "location": 106,
            "return": [
                "salon.models.Stylist",
                "str",
                "Tuple[int, int]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "core.board.Board",
                    "raiden.utils.Locksroot",
                    "raiden.utils.Address"
                ]
            }
        },
        "ListItemCreate.get_success_url": {
            "name": "get_success_url",
            "location": 116,
            "return": [
                "str",
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListItemDelete.get_queryset": {
            "name": "get_queryset",
            "location": 129,
            "return": [
                "List[str]",
                "dict",
                "str",
                "List[Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListItemDelete.get_success_url": {
            "name": "get_success_url",
            "location": 132,
            "return": [
                "str",
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListItemUpdate.get_queryset": {
            "name": "get_queryset",
            "location": 147,
            "return": [
                "List[str]",
                "dict",
                "str",
                "List[Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListItemUpdate.get_success_url": {
            "name": "get_success_url",
            "location": 150,
            "return": [
                "str",
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StationCreate.post": {
            "name": "post",
            "location": 165,
            "return": [
                "dict",
                "str",
                "Exception",
                "tartare.core.models.Job",
                "int",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "StationCreate.form_valid": {
            "name": "form_valid",
            "location": 174,
            "return": [
                "int",
                "List[str]",
                "str",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "str",
                    "dict",
                    "dict[, ]",
                    "Optional[Dict]",
                    "None"
                ]
            }
        },
        "StationCreate.form_invalid": {
            "name": "form_invalid",
            "location": 178,
            "return": [
                "bool",
                "Dict[str, str]",
                "Dict[str, Any]",
                "Mapping[str, Any]",
                "asgard.models.job.ScheduledJob",
                "Set[accounts.models.AccountPermissionType]"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "bool",
                    "list[dict[str, typing.Any]]",
                    "int",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "StationCreate.get_success_url": {
            "name": "get_success_url",
            "location": 182,
            "return": [
                "str",
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TodoListUpdate.get_queryset": {
            "name": "get_queryset",
            "location": 196,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "TodoListUpdate.get_success_url": {
            "name": "get_success_url",
            "location": 199,
            "return": [
                "str",
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StationDelete.get_queryset": {
            "name": "get_queryset",
            "location": 213,
            "return": [
                "str",
                "salon.models.Stylist",
                "dict",
                "cmk.utils.type_defs.UserId"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "todovoodoo-master/todovoodoo/core/views/master.py": {
        "UserReportView.get_queryset": {
            "name": "get_queryset",
            "location": 21,
            "return": [
                "dict",
                "salon.models.Stylist",
                "Union[fonduer.candidates.models.Candidate, fonduer.candidates.models.Mention, fonduer.candidates.models.span_mention.TemporarySpanMention]",
                "bytes",
                "zerver.models.Realm"
            ],
            "arguments": {
                "self": []
            }
        },
        "TagView.get_queryset": {
            "name": "get_queryset",
            "location": 36,
            "return": [
                "int",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListItemPostpone.post": {
            "name": "post",
            "location": 46,
            "return": [
                "int",
                "raiden.utils.Address",
                "core.models.Recipe",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "ListItemComplete.post": {
            "name": "post",
            "location": 72,
            "return": [
                "int",
                "raiden.utils.Address",
                "core.models.Recipe",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]",
                    "django.http.HttpRequest",
                    "dict"
                ]
            }
        }
    },
    "todovoodoo-master/todovoodoo/core/views/__init__.py": {},
    "todovoodoo-master/todovoodoo/users/adapters.py": {
        "AccountAdapter.is_open_for_signup": {
            "name": "is_open_for_signup",
            "location": 10,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]",
                    "django.http.HttpRequest",
                    "dict"
                ]
            }
        },
        "SocialAccountAdapter.is_open_for_signup": {
            "name": "is_open_for_signup",
            "location": 15,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]",
                    "django.http.HttpRequest",
                    "dict"
                ],
                "sociallogin": [
                    "dict[, ]",
                    "django.http.HttpRequest",
                    "dict"
                ]
            }
        }
    },
    "todovoodoo-master/todovoodoo/users/admin.py": {},
    "todovoodoo-master/todovoodoo/users/apps.py": {
        "UsersAppConfig.ready": {
            "name": "ready",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "todovoodoo-master/todovoodoo/users/forms.py": {
        "UserCreationForm.clean_username": {
            "name": "clean_username",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "todovoodoo-master/todovoodoo/users/models.py": {
        "User.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "todovoodoo-master/todovoodoo/users/serializers.py": {},
    "todovoodoo-master/todovoodoo/users/signals.py": {
        "after_user_signed_up": {
            "name": "after_user_signed_up",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "zerver.models.UserProfile"
                ],
                "user": [
                    "str",
                    "zerver.models.UserProfile",
                    "int",
                    "None",
                    "Union[int,str]",
                    "django.db.models.query.QuerySet",
                    "Optional[zerver.models.UserProfile]",
                    "zerver.models.Stream"
                ]
            }
        }
    },
    "todovoodoo-master/todovoodoo/users/urls.py": {},
    "todovoodoo-master/todovoodoo/users/views.py": {
        "UserUpdateView.get_success_url": {
            "name": "get_success_url",
            "location": 34,
            "return": [
                "bool",
                "Dict[int, dict]",
                "Optional[Iterable[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserUpdateView.get_object": {
            "name": "get_object",
            "location": 37,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserRedirectView.get_redirect_url": {
            "name": "get_redirect_url",
            "location": 48,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "todovoodoo-master/todovoodoo/users/__init__.py": {},
    "todovoodoo-master/todovoodoo/users/migrations/0001_initial.py": {},
    "todovoodoo-master/todovoodoo/users/migrations/0002_auto_20191103_2324.py": {},
    "todovoodoo-master/todovoodoo/users/migrations/__init__.py": {},
    "todovoodoo-master/todovoodoo/users/tests/factories.py": {
        "UserFactory.password": {
            "name": "password",
            "location": 14,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "create": [
                    "int",
                    "str",
                    "bool",
                    "typing.Callable[typing.Any, T]",
                    "Callable[[Any], T]"
                ],
                "extracted": [
                    "int",
                    "str",
                    "bool",
                    "typing.Callable[typing.Any, T]",
                    "Callable[[Any], T]"
                ]
            }
        }
    },
    "todovoodoo-master/todovoodoo/users/tests/test_forms.py": {
        "TestUserCreationForm.test_clean_username": {
            "name": "test_clean_username",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "todovoodoo-master/todovoodoo/users/tests/test_models.py": {
        "test_user_get_absolute_url": {
            "name": "test_user_get_absolute_url",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        }
    },
    "todovoodoo-master/todovoodoo/users/tests/test_urls.py": {
        "test_detail": {
            "name": "test_detail",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        },
        "test_list": {
            "name": "test_list",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_update": {
            "name": "test_update",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_redirect": {
            "name": "test_redirect",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "todovoodoo-master/todovoodoo/users/tests/test_views.py": {
        "TestUserUpdateView.test_get_success_url": {
            "name": "test_get_success_url",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "request_factory": [
                    "django.tesRequestFactory"
                ]
            }
        },
        "TestUserUpdateView.test_get_object": {
            "name": "test_get_object",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "request_factory": [
                    "django.tesRequestFactory"
                ]
            }
        },
        "TestUserRedirectView.test_get_redirect_url": {
            "name": "test_get_redirect_url",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "int",
                    "django.conf.settings.AUTH_USER_MODEL",
                    "bool"
                ],
                "request_factory": [
                    "django.tesRequestFactory"
                ]
            }
        }
    },
    "todovoodoo-master/todovoodoo/users/tests/__init__.py": {}
}
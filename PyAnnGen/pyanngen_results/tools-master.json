{
    "tools-master/www/conoha/setup.py": {},
    "tools-master/www/conoha/src/conoha.py": {
        "vm_info": {
            "name": "vm_info",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "vm_list": {
            "name": "vm_list",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "show_billing": {
            "name": "show_billing",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "power_on": {
            "name": "power_on",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "shut_off": {
            "name": "shut_off",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "reboot": {
            "name": "reboot",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "change_plan": {
            "name": "change_plan",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "getargs": {
            "name": "getargs",
            "location": 36,
            "return": [
                "Tuple",
                "argparse.Namespace",
                "Dict"
            ],
            "arguments": {}
        }
    },
    "tools-master/www/conoha/src/lib/api.py": {
        "ConoHaAPI.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "confname": [
                    "typing.Text"
                ]
            }
        },
        "ConoHaAPI.__get_token": {
            "name": "__get_token",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConoHaAPI.__do_auth": {
            "name": "__do_auth",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConoHaAPI.__get_identity": {
            "name": "__get_identity",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConoHaAPI.return_token": {
            "name": "return_token",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConoHaAPI.get_billing_invoices": {
            "name": "get_billing_invoices",
            "location": 153,
            "return": [
                "tuple[None]"
            ],
            "arguments": {
                "self": [],
                "limit": [
                    "int"
                ]
            }
        },
        "ConoHaAPI.get_vms_list": {
            "name": "get_vms_list",
            "location": 187,
            "return": [
                "tuple[None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConoHaAPI.get_vm_detail_specified": {
            "name": "get_vm_detail_specified",
            "location": 207,
            "return": [
                "tuple[None]"
            ],
            "arguments": {
                "self": [],
                "server_id": []
            }
        },
        "ConoHaAPI.get_all_vm_details": {
            "name": "get_all_vm_details",
            "location": 243,
            "return": [
                "tuple[None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConoHaAPI.wait_status": {
            "name": "wait_status",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server_id": [],
                "status": []
            }
        },
        "ConoHaAPI.power_on_vm": {
            "name": "power_on_vm",
            "location": 296,
            "return": [],
            "arguments": {
                "self": [],
                "server_id": []
            }
        },
        "ConoHaAPI.stop_cleanly_vm": {
            "name": "stop_cleanly_vm",
            "location": 333,
            "return": [],
            "arguments": {
                "self": [],
                "server_id": []
            }
        },
        "ConoHaAPI.reboot_vm": {
            "name": "reboot_vm",
            "location": 370,
            "return": [],
            "arguments": {
                "self": [],
                "server_id": []
            }
        },
        "ConoHaAPI.get_flavors_list": {
            "name": "get_flavors_list",
            "location": 413,
            "return": [
                "tuple[None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConoHaAPI.get_flavor_name": {
            "name": "get_flavor_name",
            "location": 433,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "flavor_id": []
            }
        },
        "ConoHaAPI.get_flavor_id": {
            "name": "get_flavor_id",
            "location": 451,
            "return": [],
            "arguments": {
                "self": [],
                "plan": []
            }
        },
        "ConoHaAPI.change_flavor": {
            "name": "change_flavor",
            "location": 480,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server_id": [],
                "flavor_id": []
            }
        },
        "ConoHaAPI.confirm_flavor": {
            "name": "confirm_flavor",
            "location": 527,
            "return": [],
            "arguments": {
                "self": [],
                "server_id": []
            }
        }
    },
    "tools-master/www/conoha/src/lib/cmd.py": {
        "ConoHaCmd.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "confname": [
                    "Text",
                    "Dict[str,Any]",
                    "Optional[str]",
                    "str",
                    "Dict"
                ]
            }
        },
        "ConoHaCmd.check_id_or_tag": {
            "name": "check_id_or_tag",
            "location": 14,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "str"
                ]
            }
        },
        "ConoHaCmd.return_table": {
            "name": "return_table",
            "location": 28,
            "return": [
                "float",
                "type",
                "Callable",
                "Type",
                "str"
            ],
            "arguments": {
                "self": [],
                "colums": [
                    "int",
                    "bool",
                    "List[int]",
                    "Optional[int]",
                    "Dict"
                ]
            }
        },
        "ConoHaCmd.return_vm_status_table": {
            "name": "return_vm_status_table",
            "location": 39,
            "return": [
                "str",
                "Optional[Iterable[Any]]",
                "type",
                "list",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "before": [
                    "int"
                ],
                "after": [
                    "int"
                ]
            }
        },
        "ConoHaCmd.get_vm_list": {
            "name": "get_vm_list",
            "location": 59,
            "return": [
                "Optional[str]",
                "str",
                "list",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConoHaCmd.get_vm_detail": {
            "name": "get_vm_detail",
            "location": 72,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "server_id": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "ConoHaCmd.get_server_id_from_tag": {
            "name": "get_server_id_from_tag",
            "location": 86,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "str",
                    "Sequence[Union[str,Any]]",
                    "List[Callable]",
                    "Union[str,Callable]",
                    "Callable"
                ]
            }
        },
        "ConoHaCmd.show_vm_detail": {
            "name": "show_vm_detail",
            "location": 103,
            "return": [
                "Tuple",
                "str",
                "Optional[Union[Any,Any]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "server_id": [
                    "str"
                ],
                "ipv4": [
                    "bool",
                    "int",
                    "str",
                    "Set[str]"
                ],
                "ipv6": [
                    "bool",
                    "int",
                    "str",
                    "Set[str]"
                ]
            }
        },
        "ConoHaCmd.show_billing": {
            "name": "show_billing",
            "location": 153,
            "return": [
                "float",
                "Optional[int]",
                "Optional[List[Callable]]"
            ],
            "arguments": {
                "self": [],
                "limit": [
                    "int",
                    "float",
                    "Callable[[int],None]",
                    "List[List[str]]"
                ]
            }
        },
        "ConoHaCmd.power_on_vm": {
            "name": "power_on_vm",
            "location": 181,
            "return": [
                "\"CollectionList\"",
                "bytes",
                "List[Dict[str, Any]]",
                "dict",
                "str",
                "Tuple[int, float]"
            ],
            "arguments": {
                "self": [],
                "server_id": [
                    "int",
                    "str"
                ]
            }
        },
        "ConoHaCmd.shutoff_vm": {
            "name": "shutoff_vm",
            "location": 200,
            "return": [
                "\"CollectionList\"",
                "bytes",
                "List[Dict[str, Any]]",
                "dict",
                "str",
                "Tuple[int, float]"
            ],
            "arguments": {
                "self": [],
                "server_id": [
                    "int",
                    "str"
                ]
            }
        },
        "ConoHaCmd.reboot_vm": {
            "name": "reboot_vm",
            "location": 219,
            "return": [
                "\"CollectionList\"",
                "bytes",
                "List[Dict[str, Any]]",
                "dict",
                "str",
                "Tuple[int, float]"
            ],
            "arguments": {
                "self": [],
                "server_id": [
                    "int",
                    "str"
                ]
            }
        },
        "ConoHaCmd.get_flavor_id_from_name": {
            "name": "get_flavor_id_from_name",
            "location": 238,
            "return": [
                "str",
                "Optional[str]",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "flavor_name": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "ConoHaCmd.get_flavor_name_from_id": {
            "name": "get_flavor_name_from_id",
            "location": 263,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "flavor_id": [
                    "str",
                    "int"
                ]
            }
        },
        "ConoHaCmd.change_flavor": {
            "name": "change_flavor",
            "location": 276,
            "return": [
                "None",
                "Union[int,None]",
                "Type",
                "str"
            ],
            "arguments": {
                "self": [],
                "server_id": [
                    "str",
                    "int"
                ],
                "flavor_name": [
                    "str"
                ]
            }
        }
    },
    "tools-master/www/conoha/src/lib/exceptions.py": {
        "BadStatusCodeError.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "BadRequestError.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "ConflictingRequestError.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "JsonDecodeError.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InvalidArgumentError.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "NothingFlavorIDError.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "NothingServerIDError.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "ServerNotFoundError.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "UnexceptedServerStatusError.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "tools-master/www/conoha/src/lib/__init__.py": {},
    "tools-master/www/conoha/src/tests/unittest_api.py": {
        "TestConoHaAPI.setUpClass": {
            "name": "setUpClass",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConoHaAPI.tearDownClass": {
            "name": "tearDownClass",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConoHaAPI.check_keys_in_dict": {
            "name": "check_keys_in_dict",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keys": [
                    "str",
                    "list[str]"
                ],
                "dictionary": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "TestConoHaAPI.check_response_values": {
            "name": "check_response_values",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "body": [
                    "bytes",
                    "None",
                    "bool",
                    "typing.Sequence[str]",
                    "dict[str, str]",
                    "dict[, ]"
                ],
                "status_code": [
                    "int"
                ],
                "excepted_status_code": [
                    "int"
                ]
            }
        },
        "TestConoHaAPI.test_get_identity": {
            "name": "test_get_identity",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConoHaAPI.test_get_billing_invoices": {
            "name": "test_get_billing_invoices",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConoHaAPI.test_get_vms_list": {
            "name": "test_get_vms_list",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConoHaAPI.test_get_vms_detail": {
            "name": "test_get_vms_detail",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConoHaAPI.test_get_all_vm_details": {
            "name": "test_get_all_vm_details",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConoHaAPI.test_power_on_vm": {
            "name": "test_power_on_vm",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConoHaAPI.test_stop_cleanly_vm": {
            "name": "test_stop_cleanly_vm",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConoHaAPI.test_reboot_vm": {
            "name": "test_reboot_vm",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConoHaAPI.test_get_flavors_list": {
            "name": "test_get_flavors_list",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConoHaAPI.test_get_flavor_name": {
            "name": "test_get_flavor_name",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConoHaAPI.test_get_flavor_id": {
            "name": "test_get_flavor_id",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConoHaAPI.test_change_flavor": {
            "name": "test_change_flavor",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConoHaAPI.test_confirm_flavor": {
            "name": "test_confirm_flavor",
            "location": 380,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConoHaAPI.test_init": {
            "name": "test_init",
            "location": 384,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tools-master/www/conoha/src/tests/unittest_cmd.py": {
        "TestConoHaCmd.setUpClass": {
            "name": "setUpClass",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConoHaCmd.tearDownClass": {
            "name": "tearDownClass",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConoHaCmd.test_return_table": {
            "name": "test_return_table",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConoHaCmd.test_show_vm_detail": {
            "name": "test_show_vm_detail",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConoHaCmd.test_get_server_id_from_tag": {
            "name": "test_get_server_id_from_tag",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConoHaCmd.test_show_billing": {
            "name": "test_show_billing",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConoHaCmd.check_arguments": {
            "name": "check_arguments",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "Type[T]",
                    "Type"
                ]
            }
        },
        "TestConoHaCmd.test_power_on_vm": {
            "name": "test_power_on_vm",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConoHaCmd.test_shutoff_vm": {
            "name": "test_shutoff_vm",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConoHaCmd.test_reboot_vm": {
            "name": "test_reboot_vm",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConoHaCmd.test_change_flavor": {
            "name": "test_change_flavor",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConoHaCmd.test_check_id_or_tag": {
            "name": "test_check_id_or_tag",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tools-master/www/speed_wifi_home/src/lib/speed_wifi_home.py": {
        "SpeedWifiHome.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "driver": [
                    "Text",
                    "str",
                    "Iterable[str]",
                    "Dict"
                ]
            }
        },
        "SpeedWifiHome.__check_str": {
            "name": "__check_str",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "int",
                    "str",
                    "List[str]",
                    "bytes",
                    "List"
                ]
            }
        },
        "SpeedWifiHome.__check_file_path": {
            "name": "__check_file_path",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "SpeedWifiHome.parse_conf": {
            "name": "parse_conf",
            "location": 35,
            "return": [
                "Tuple",
                "Dict",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "conf": [
                    "str",
                    "int"
                ]
            }
        },
        "SpeedWifiHome.login": {
            "name": "login",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str"
                ],
                "username": [
                    "str"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "SpeedWifiHome.get_traffic_of_last_three_days": {
            "name": "get_traffic_of_last_three_days",
            "location": 55,
            "return": [
                "bool",
                "List[str]",
                "str",
                "Dict[str, Callable[[], Any]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tools-master/www/speed_wifi_home/src/tests/speed_wifi_home.py": {
        "TestSpeedWifiHome.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSpeedWifiHome.tearDown": {
            "name": "tearDown",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSpeedWifiHome.login": {
            "name": "login",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSpeedWifiHome.__check_type": {
            "name": "__check_type",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "Callable",
                    "bool"
                ]
            }
        },
        "TestSpeedWifiHome.test_webdriver": {
            "name": "test_webdriver",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSpeedWifiHome.test_parse_conf": {
            "name": "test_parse_conf",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSpeedWifiHome.test_login": {
            "name": "test_login",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSpeedWifiHome.test_get_traffic_of_last_three_days": {
            "name": "test_get_traffic_of_last_three_days",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tools-master/www/tinyCSS/tools/compressor/src/compressor.py": {
        "main": {
            "name": "main",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
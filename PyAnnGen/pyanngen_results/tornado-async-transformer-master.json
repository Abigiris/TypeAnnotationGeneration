{
    "tornado-async-transformer-master/setup.py": {},
    "tornado-async-transformer-master/api/transform.py": {
        "transform": {
            "name": "transform",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "source": [
                    "str",
                    "bytes"
                ]
            }
        },
        "handler.do_POST": {
            "name": "do_POST",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tornado-async-transformer-master/tests/collector.py": {
        "collect_test_cases": {
            "name": "collect_test_cases",
            "location": 13,
            "return": [
                "tuple[]",
                "bool",
                "str",
                "Dict[str, Tuple[str, str]]"
            ],
            "arguments": {}
        },
        "collect_exception_cases": {
            "name": "collect_exception_cases",
            "location": 41,
            "return": [
                "tuple[]",
                "List[str]",
                "float",
                "str"
            ],
            "arguments": {}
        }
    },
    "tornado-async-transformer-master/tests/test_tornado_async_transformer.py": {
        "test_python_module": {
            "name": "test_python_module",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "test_case": [
                    "str",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "test_unsupported_python_module": {
            "name": "test_unsupported_python_module",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "exception_case": [
                    "str",
                    "IO[str]",
                    "typing.IO"
                ]
            }
        }
    },
    "tornado-async-transformer-master/tests/__init__.py": {},
    "tornado-async-transformer-master/tests/exception_cases/coroutine_gen_task.py": {
        "ping": {
            "name": "ping",
            "location": 12,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        }
    },
    "tornado-async-transformer-master/tests/exception_cases/yield_dict_call.py": {
        "get_user_friends_and_relatives": {
            "name": "get_user_friends_and_relatives",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "tornado-async-transformer-master/tests/exception_cases/yield_dict_comprehension.py": {
        "get_users_by_id": {
            "name": "get_users_by_id",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "user_ids": [
                    "int"
                ]
            }
        }
    },
    "tornado-async-transformer-master/tests/exception_cases/yield_dict_literal.py": {
        "get_two_users_by_id": {
            "name": "get_two_users_by_id",
            "location": 11,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "user_id_1": [
                    "int"
                ],
                "user_id_2": [
                    "int"
                ]
            }
        }
    },
    "tornado-async-transformer-master/tests/test_cases/coroutine_multiple_generators/after.py": {},
    "tornado-async-transformer-master/tests/test_cases/coroutine_multiple_generators/before.py": {
        "user_page": {
            "name": "user_page",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "id": [
                    "str",
                    "int",
                    "typing.Callable[str, int]",
                    "Callable[[str], int]",
                    "bool"
                ]
            }
        },
        "get_user": {
            "name": "get_user",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "id": [
                    "int",
                    "str",
                    "list[int]",
                    "List[int]",
                    "bool"
                ]
            }
        }
    },
    "tornado-async-transformer-master/tests/test_cases/coroutine_with_nested_generator_function/after.py": {
        "save_users.build_user_ids": {
            "name": "build_user_ids",
            "location": 10,
            "return": [
                "",
                "typing.Generator[str]"
            ],
            "arguments": {
                "users": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        }
    },
    "tornado-async-transformer-master/tests/test_cases/coroutine_with_nested_generator_function/before.py": {
        "save_users": {
            "name": "save_users",
            "location": 10,
            "return": [
                "",
                "typing.Generator[]"
            ],
            "arguments": {
                "users": [
                    "str"
                ]
            }
        },
        "save_users.build_user_ids": {
            "name": "build_user_ids",
            "location": 11,
            "return": [
                "",
                "typing.Generator[str]"
            ],
            "arguments": {
                "users": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        }
    },
    "tornado-async-transformer-master/tests/test_cases/gen_return_call_none/after.py": {},
    "tornado-async-transformer-master/tests/test_cases/gen_return_call_none/before.py": {
        "check_id_valid": {
            "name": "check_id_valid",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "id": [
                    "int",
                    "str",
                    "List[int]",
                    "list[int]"
                ]
            }
        }
    },
    "tornado-async-transformer-master/tests/test_cases/gen_return_call_no_args/after.py": {},
    "tornado-async-transformer-master/tests/test_cases/gen_return_call_no_args/before.py": {
        "check_id_valid": {
            "name": "check_id_valid",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "id": [
                    "int",
                    "str",
                    "List[int]",
                    "list[int]"
                ]
            }
        }
    },
    "tornado-async-transformer-master/tests/test_cases/gen_return_dict_multi_line/after.py": {},
    "tornado-async-transformer-master/tests/test_cases/gen_return_dict_multi_line/before.py": {
        "fetch_user": {
            "name": "fetch_user",
            "location": 7,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "id": [
                    "int",
                    "str",
                    "List[int]",
                    "list[int]"
                ]
            }
        }
    },
    "tornado-async-transformer-master/tests/test_cases/gen_return_statement/after.py": {},
    "tornado-async-transformer-master/tests/test_cases/gen_return_statement/before.py": {
        "check_id_valid": {
            "name": "check_id_valid",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "id": [
                    "int",
                    "str",
                    "List[int]",
                    "list[int]"
                ]
            }
        }
    },
    "tornado-async-transformer-master/tests/test_cases/gen_sleep/after.py": {},
    "tornado-async-transformer-master/tests/test_cases/gen_sleep/before.py": {
        "ping": {
            "name": "ping",
            "location": 8,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        }
    },
    "tornado-async-transformer-master/tests/test_cases/gen_test/after.py": {
        "TestMyTornadoApp.get_app": {
            "name": "get_app",
            "location": 11,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tornado-async-transformer-master/tests/test_cases/gen_test/before.py": {
        "TestMyTornadoApp.get_app": {
            "name": "get_app",
            "location": 11,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMyTornadoApp.test_ping_route": {
            "name": "test_ping_route",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tornado-async-transformer-master/tests/test_cases/module_level_raise/after.py": {},
    "tornado-async-transformer-master/tests/test_cases/module_level_raise/before.py": {},
    "tornado-async-transformer-master/tests/test_cases/nested_coroutine/after.py": {},
    "tornado-async-transformer-master/tests/test_cases/nested_coroutine/before.py": {
        "call_api": {
            "name": "call_api",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "call_api.nested_callback": {
            "name": "nested_callback",
            "location": 10,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "response": []
            }
        }
    },
    "tornado-async-transformer-master/tests/test_cases/non_coroutine_returns_coroutine/after.py": {
        "make_simple_fetch": {
            "name": "make_simple_fetch",
            "location": 7,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "url": [
                    "Dict[str, Union[str, int]]",
                    "str",
                    "dict[str, typing.Union[str,int]]",
                    "Optional[str]",
                    "None"
                ]
            }
        }
    },
    "tornado-async-transformer-master/tests/test_cases/non_coroutine_returns_coroutine/before.py": {
        "make_simple_fetch": {
            "name": "make_simple_fetch",
            "location": 7,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "url": [
                    "Dict[str, Union[str, int]]",
                    "str",
                    "dict[str, typing.Union[str,int]]",
                    "Optional[str]",
                    "None"
                ]
            }
        },
        "make_simple_fetch.my_simple_fetch": {
            "name": "my_simple_fetch",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "body": [
                    "str",
                    "int",
                    "Optional[Dict]"
                ]
            }
        }
    },
    "tornado-async-transformer-master/tests/test_cases/simple_coroutine_from_tornado_import_gen/after.py": {},
    "tornado-async-transformer-master/tests/test_cases/simple_coroutine_from_tornado_import_gen/before.py": {
        "call_api": {
            "name": "call_api",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "tornado-async-transformer-master/tests/test_cases/simple_coroutine_import_tornado/after.py": {},
    "tornado-async-transformer-master/tests/test_cases/simple_coroutine_import_tornado/before.py": {
        "call_api": {
            "name": "call_api",
            "location": 8,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "tornado-async-transformer-master/tests/test_cases/testing_gen_test/after.py": {
        "TestMyTornadoApp.get_app": {
            "name": "get_app",
            "location": 11,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tornado-async-transformer-master/tests/test_cases/testing_gen_test/before.py": {
        "TestMyTornadoApp.get_app": {
            "name": "get_app",
            "location": 11,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMyTornadoApp.test_ping_route": {
            "name": "test_ping_route",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tornado-async-transformer-master/tests/test_cases/tornado_testing_gen_test/after.py": {
        "TestMyTornadoApp.get_app": {
            "name": "get_app",
            "location": 11,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tornado-async-transformer-master/tests/test_cases/tornado_testing_gen_test/before.py": {
        "TestMyTornadoApp.get_app": {
            "name": "get_app",
            "location": 11,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMyTornadoApp.test_ping_route": {
            "name": "test_ping_route",
            "location": 15,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tornado-async-transformer-master/tests/test_cases/tornado_testing_gen_test_already_async/after.py": {
        "TestMyTornadoApp.get_app": {
            "name": "get_app",
            "location": 14,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tornado-async-transformer-master/tests/test_cases/tornado_testing_gen_test_already_async/before.py": {
        "TestMyTornadoApp.get_app": {
            "name": "get_app",
            "location": 14,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tornado-async-transformer-master/tests/test_cases/yield_list_comprehension/after.py": {},
    "tornado-async-transformer-master/tests/test_cases/yield_list_comprehension/before.py": {
        "get_users": {
            "name": "get_users",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "user_ids": [
                    "int"
                ]
            }
        }
    },
    "tornado-async-transformer-master/tests/test_cases/yield_list_of_futures/after.py": {},
    "tornado-async-transformer-master/tests/test_cases/yield_list_of_futures/before.py": {
        "get_two_users": {
            "name": "get_two_users",
            "location": 9,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "user_id_1": [
                    "str",
                    "int"
                ],
                "user_id_2": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "tornado-async-transformer-master/tornado_async_transformer/helpers.py": {
        "with_added_imports": {
            "name": "with_added_imports",
            "location": 8,
            "return": [
                "\"Task\"",
                "Optional[Set[str]]",
                "bool",
                "str",
                "float"
            ],
            "arguments": {
                "module_node": [
                    "List[Type]",
                    "AbstractSet[Any]",
                    "str",
                    "set"
                ],
                "import_nodes": [
                    "Dict[str, Any]",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "_is_import_line": {
            "name": "_is_import_line",
            "location": 29,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "line": [
                    "str"
                ]
            }
        },
        "name_attr_possibilities": {
            "name": "name_attr_possibilities",
            "location": 35,
            "return": [
                "list[]",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "tag": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "some_version_of": {
            "name": "some_version_of",
            "location": 96,
            "return": [
                "str"
            ],
            "arguments": {
                "tag": [
                    "str",
                    "Tuple[str, str]",
                    "tuple[typing.Union[str,str]]",
                    "Tuple[str, Tuple[int, int]]",
                    "tuple[typing.Union[str,tuple[typing.Union[int,int]]]]",
                    "Optional[List[str]]",
                    "list[str]",
                    "None"
                ]
            }
        },
        "name_attr_possibilities._make_name_or_attribute": {
            "name": "_make_name_or_attribute",
            "location": 74,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "parts": [
                    "List[str]",
                    "bytearray",
                    "List[Dict[str, Any]]",
                    "Callable",
                    "Type",
                    "Tuple[List[str], bool]"
                ]
            }
        }
    },
    "tornado-async-transformer-master/tornado_async_transformer/tool.py": {
        "transform_file": {
            "name": "transform_file",
            "location": 14,
            "return": [
                "None",
                "Iterator[object]",
                "Tuple[int, str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "visitor": [
                    "str",
                    "int",
                    "float",
                    "pathlib.Path"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "collect_files": {
            "name": "collect_files",
            "location": 35,
            "return": [
                "str",
                "tuple[str]",
                "pathlib.Path",
                "tuple[]"
            ],
            "arguments": {
                "base": [
                    "str"
                ]
            }
        },
        "parse_args": {
            "name": "parse_args",
            "location": 60,
            "return": [
                "argparse.Namespace",
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "collect_files.is_python_file": {
            "name": "is_python_file",
            "location": 40,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "Union[str, pathlib.Path]",
                "IO",
                "Tuple[str]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        }
    },
    "tornado-async-transformer-master/tornado_async_transformer/tornado_async_transformer.py": {
        "TornadoAsyncTransformer.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TornadoAsyncTransformer.leave_Module": {
            "name": "leave_Module",
            "location": 59,
            "return": [
                "str",
                "int",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str"
                ],
                "updated_node": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "TornadoAsyncTransformer.visit_Call": {
            "name": "visit_Call",
            "location": 70,
            "return": [
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TornadoAsyncTransformer.leave_Call": {
            "name": "leave_Call",
            "location": 78,
            "return": [
                "int",
                "str",
                "bool",
                "float",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str"
                ],
                "updated_node": [
                    "int",
                    "str"
                ]
            }
        },
        "TornadoAsyncTransformer.visit_FunctionDef": {
            "name": "visit_FunctionDef",
            "location": 90,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "TornadoAsyncTransformer.leave_FunctionDef": {
            "name": "leave_FunctionDef",
            "location": 95,
            "return": [
                "bool",
                "str",
                "Tuple[float, float, float]",
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str"
                ],
                "updated_node": [
                    "str",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "TornadoAsyncTransformer.leave_Raise": {
            "name": "leave_Raise",
            "location": 111,
            "return": [
                "bool",
                "None",
                "Optional[bool]",
                "str",
                "Optional[Sequence[str]]",
                "Optional[Callable]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "int"
                ],
                "updated_node": [
                    "bool",
                    "str",
                    "Optional[int]",
                    "None"
                ]
            }
        },
        "TornadoAsyncTransformer.leave_Yield": {
            "name": "leave_Yield",
            "location": 127,
            "return": [
                "bool",
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str"
                ],
                "updated_node": [
                    "bool"
                ]
            }
        },
        "TornadoAsyncTransformer.pluck_asyncio_gather_expression_from_yield_list_or_list_comp": {
            "name": "pluck_asyncio_gather_expression_from_yield_list_or_list_comp",
            "location": 161,
            "return": [
                "Type",
                "str",
                "Callable[..., None]"
            ],
            "arguments": {
                "node": [
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "TornadoAsyncTransformer.in_coroutine": {
            "name": "in_coroutine",
            "location": 170,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "coroutine_stack": [
                    "list[bool]",
                    "str",
                    "List[bool]",
                    "bool",
                    "Any"
                ]
            }
        },
        "TornadoAsyncTransformer.pluck_gen_return_value": {
            "name": "pluck_gen_return_value",
            "location": 177,
            "return": [
                "tuple[]",
                "bool",
                "tuple[None]",
                "int",
                "List[str]",
                "Callable"
            ],
            "arguments": {
                "node": []
            }
        },
        "TornadoAsyncTransformer.make_simple_package_import": {
            "name": "make_simple_package_import",
            "location": 187,
            "return": [
                "str",
                "Tuple[str]",
                "Optional[str]"
            ],
            "arguments": {
                "package": [
                    "str",
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ]
            }
        }
    },
    "tornado-async-transformer-master/tornado_async_transformer/__init__.py": {}
}
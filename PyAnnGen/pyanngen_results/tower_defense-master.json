{
    "tower_defense-master/tests/my_module_normal.py": {
        "my_function": {
            "name": "my_function",
            "location": 2,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "tower_defense-master/tests/my_module_relative.py": {
        "my_function": {
            "name": "my_function",
            "location": 2,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "tower_defense-master/tests/test_building.py": {
        "BuildingTest.test_render": {
            "name": "test_render",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuildingTest.test_range": {
            "name": "test_range",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuildingTest.test_cost": {
            "name": "test_cost",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuildingTest.test_shooting_frequency": {
            "name": "test_shooting_frequency",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LaserTest.test_render": {
            "name": "test_render",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CatapultTest.test_render": {
            "name": "test_render",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CatapultTest.test_update": {
            "name": "test_update",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DrillTest.test_rotate_towards": {
            "name": "test_rotate_towards",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DrillTest.test_render": {
            "name": "test_render",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DrillTest.test_update_reset_animation_speed": {
            "name": "test_update_reset_animation_speed",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DrillTest.test_update_animation_angle": {
            "name": "test_update_animation_angle",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DrillTest.test_check_for_entities": {
            "name": "test_check_for_entities",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DrillTest.test_closest_tile_angle": {
            "name": "test_closest_tile_angle",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CatapultTest.test_update.shoot": {
            "name": "shoot",
            "location": 108,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "tower_defense-master/tests/test_building_manager.py": {
        "BuildingManagerTest.test_update": {
            "name": "test_update",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuildingManagerTest.test_render": {
            "name": "test_render",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuildingManagerTest.test_shoot": {
            "name": "test_shoot",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuildingManagerTest.test_spawn_building": {
            "name": "test_spawn_building",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuildingManagerTest.test_update.dummy": {
            "name": "dummy",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "BuildingManagerTest.test_render.dummy": {
            "name": "dummy",
            "location": 41,
            "return": [
                "",
                "bool"
            ],
            "arguments": {}
        }
    },
    "tower_defense-master/tests/test_bullet.py": {
        "BulletTest.test_render": {
            "name": "test_render",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BulletTest.test_update": {
            "name": "test_update",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BulletTest.test_update_with_entity_hit": {
            "name": "test_update_with_entity_hit",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tower_defense-master/tests/test_components.py": {
        "ButtonTest.test_is_clicked": {
            "name": "test_is_clicked",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LabelTest.test_render": {
            "name": "test_render",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LabelTest.test_toggle_visibility": {
            "name": "test_toggle_visibility",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InputTest.test_is_clicked": {
            "name": "test_is_clicked",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InputTest.test_add_text": {
            "name": "test_add_text",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HighlightComponentTest.test_is_clicked": {
            "name": "test_is_clicked",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HighlightComponentTest.test_render": {
            "name": "test_render",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HighlightComponentTest.test_render_highlight": {
            "name": "test_render_highlight",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "LabelTest.test_render.dummy": {
            "name": "dummy",
            "location": 27,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "HighlightComponentTest.test_render.dummy": {
            "name": "dummy",
            "location": 100,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "tower_defense-master/tests/test_dialogs.py": {
        "DialogTest.test_render": {
            "name": "test_render",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DialogTest.test_update": {
            "name": "test_update",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DialogTest.test_open": {
            "name": "test_open",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NewMapDialogTest.test_render": {
            "name": "test_render",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NewMapDialogTest.test_update": {
            "name": "test_update",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NewMapDialogTest.test_give_exclusive_focus": {
            "name": "test_give_exclusive_focus",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NewMapDialogTest.test_cancel_func": {
            "name": "test_cancel_func",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NewMapDialogTest.test_submit_func": {
            "name": "test_submit_func",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NewMapDialogTest.test_open": {
            "name": "test_open",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NewMapDialogTest.test_mouse_click_handler": {
            "name": "test_mouse_click_handler",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoadMapDialogTest.test_update": {
            "name": "test_update",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "LoadMapDialogTest.test_refresh_maps": {
            "name": "test_refresh_maps",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoadMapDialogTest.test_open": {
            "name": "test_open",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoadMapDialogTest.test_render": {
            "name": "test_render",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoadMapDialogTest.test_mouse_click_handler": {
            "name": "test_mouse_click_handler",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NewMapDialogTest.test_render.dummy": {
            "name": "dummy",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "_": []
            }
        },
        "NewMapDialogTest.test_update.dummy": {
            "name": "dummy",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "_": []
            }
        },
        "NewMapDialogTest.test_submit_func.dummy": {
            "name": "dummy",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "NewMapDialogTest.test_mouse_click_handler.dummy": {
            "name": "dummy",
            "location": 178,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {}
        },
        "LoadMapDialogTest.test_open.dummy": {
            "name": "dummy",
            "location": 228,
            "return": [
                "tuple[int]"
            ],
            "arguments": {}
        },
        "LoadMapDialogTest.test_render.dummy": {
            "name": "dummy",
            "location": 240,
            "return": [
                "",
                "tuple[int]"
            ],
            "arguments": {}
        },
        "LoadMapDialogTest.test_mouse_click_handler.dummy_true": {
            "name": "dummy_true",
            "location": 258,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "LoadMapDialogTest.test_mouse_click_handler.dummy_false": {
            "name": "dummy_false",
            "location": 262,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "tower_defense-master/tests/test_entity.py": {
        "EntityTest.test_update_cancel": {
            "name": "test_update_cancel",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EntityTest.test_update": {
            "name": "test_update",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntityTest.test_calculate_movement": {
            "name": "test_calculate_movement",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntityTest.test_render": {
            "name": "test_render",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntityTest.test_take_damage": {
            "name": "test_take_damage",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tower_defense-master/tests/test_entity_manager.py": {
        "EntityManagerTest.test_next_wave": {
            "name": "test_next_wave",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EntityManagerTest.test_render": {
            "name": "test_render",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntityManagerTest.test_reset": {
            "name": "test_reset",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntityManagerTest.test_spawn_random_entity": {
            "name": "test_spawn_random_entity",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntityManagerTest.test_update_entities": {
            "name": "test_update_entities",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntityManagerTest.test_update_split_large_boulder": {
            "name": "test_update_split_large_boulder",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntityManagerTest.test_generate_directions_graph": {
            "name": "test_generate_directions_graph",
            "location": 92,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "EditorEntityManagerTest.test_update": {
            "name": "test_update",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EditorEntityManagerTest.test_update_spawn_entity": {
            "name": "test_update_spawn_entity",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EditorEntityManagerTest.test_update_reset_spawn_timer": {
            "name": "test_update_reset_spawn_timer",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EditorEntityManagerTest.test_reset": {
            "name": "test_reset",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameEntityManagerTest.test_wave_running": {
            "name": "test_wave_running",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameEntityManagerTest.test_next_wave": {
            "name": "test_next_wave",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntityManagerTest.test_render.render": {
            "name": "render",
            "location": 20,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "EntityManagerTest.test_update_entities.update": {
            "name": "update",
            "location": 56,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "tower_defense-master/tests/test_game_state.py": {
        "TestGameState.test_window_to_world_space": {
            "name": "test_window_to_world_space",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGameState.test_world_to_window_space": {
            "name": "test_world_to_window_space",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGameState.test_world_to_index_space": {
            "name": "test_world_to_index_space",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGameState.test_index_to_world_space": {
            "name": "test_index_to_world_space",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGameState.test_init": {
            "name": "test_init",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGameState.test_clean_up": {
            "name": "test_clean_up",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGameState.test_update_no_key_event": {
            "name": "test_update_no_key_event",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGameState.test_update_key_event_top_left": {
            "name": "test_update_key_event_top_left",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGameState.test_update_key_event_bottom_right": {
            "name": "test_update_key_event_bottom_right",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGameState.test_tick": {
            "name": "test_tick",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGameState.test_tick_game": {
            "name": "test_tick_game",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGameState.test_tick_editor": {
            "name": "test_tick_editor",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGameState.test_tick_main_menu": {
            "name": "test_tick_main_menu",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGameState.test_tick_map_menu": {
            "name": "test_tick_map_menu",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGameState.test_tick.dummy": {
            "name": "dummy",
            "location": 102,
            "return": [
                "tuple[int]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "tower_defense-master/tests/test_graphics.py": {
        "TexturesTest.test_init": {
            "name": "test_init",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MethodTest.test_render_colored_rectangle": {
            "name": "test_render_colored_rectangle",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MethodTest.test_render_textured_rectangle": {
            "name": "test_render_textured_rectangle",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MovementGroupTest.test_set_state": {
            "name": "test_set_state",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "MovementGroupTest.test_unset_state": {
            "name": "test_unset_state",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "MethodTest.test_render_colored_rectangle.add": {
            "name": "add",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "count": [],
                "mode": [],
                "group": []
            }
        },
        "MethodTest.test_render_textured_rectangle.add": {
            "name": "add",
            "location": 38,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "count": [
                    "str",
                    "list"
                ],
                "mode": [
                    "str",
                    "list"
                ],
                "group": [
                    "str",
                    "list"
                ]
            }
        }
    },
    "tower_defense-master/tests/test_helper.py": {
        "MouseClickTest.test_eq": {
            "name": "test_eq",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VectorTest.test_init": {
            "name": "test_init",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VectorTest.test_add": {
            "name": "test_add",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VectorTest.test_add_tuple": {
            "name": "test_add_tuple",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VectorTest.test_sub": {
            "name": "test_sub",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VectorTest.test_sub_tuple": {
            "name": "test_sub_tuple",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VectorTest.test_mul": {
            "name": "test_mul",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VectorTest.test_divide": {
            "name": "test_divide",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VectorTest.test_floor_divide": {
            "name": "test_floor_divide",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VectorTest.test_not_equal": {
            "name": "test_not_equal",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VectorTest.test_str": {
            "name": "test_str",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VectorTest.test_length": {
            "name": "test_length",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MethodTest.test_rect_contains_point": {
            "name": "test_rect_contains_point",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MethodTest.test_constrain_to_bounds": {
            "name": "test_constrain_to_bounds",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MethodTest.test_process_clicks": {
            "name": "test_process_clicks",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MethodTest.test_process_clicks.false_processor": {
            "name": "false_processor",
            "location": 118,
            "return": [
                "bool"
            ],
            "arguments": {
                "game_state": [
                    "zero_play.game_state.GameState",
                    "bytes",
                    "T"
                ],
                "mouse_click": [
                    "float",
                    "List[Tuple[str, str]]"
                ]
            }
        },
        "MethodTest.test_process_clicks.offset_processor": {
            "name": "offset_processor",
            "location": 124,
            "return": [
                "bool"
            ],
            "arguments": {
                "game_state": [
                    "zero_play.game_state.GameState"
                ],
                "mouse_click": [
                    "bytes"
                ]
            }
        },
        "MethodTest.test_process_clicks.true_processor": {
            "name": "true_processor",
            "location": 131,
            "return": [
                "bool"
            ],
            "arguments": {
                "game_state": [
                    "zero_play.game_state.GameState",
                    "int"
                ],
                "mouse_click": [
                    "str",
                    "List[str]",
                    "float",
                    "list"
                ]
            }
        }
    },
    "tower_defense-master/tests/test_hot_reload.py": {
        "write_module": {
            "name": "write_module",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "file_name": [
                    "str"
                ],
                "time": [
                    "str",
                    "int"
                ]
            }
        },
        "HotReloadTest.setUp": {
            "name": "setUp",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HotReloadTest.test_normal_reload": {
            "name": "test_normal_reload",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HotReloadTest.test_relative_import": {
            "name": "test_relative_import",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HotReloadTest.test_multiple_relative_import": {
            "name": "test_multiple_relative_import",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tower_defense-master/tests/test_tile.py": {
        "TileTest.test_eq": {
            "name": "test_eq",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TileTest.test_str": {
            "name": "test_str",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TileTest.test_next_type": {
            "name": "test_next_type",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TileTest.test_next_type_not_allowed": {
            "name": "test_next_type_not_allowed",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TileTest.test_render_label": {
            "name": "test_render_label",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TileTest.test_render_no_label": {
            "name": "test_render_no_label",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TileTest.test_render": {
            "name": "test_render",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TileTest.test_no_render": {
            "name": "test_no_render",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TileTest.test_render_no_arrow": {
            "name": "test_render_no_arrow",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TileTest.test_render_arrow": {
            "name": "test_render_arrow",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TileTest.test_render_highlight": {
            "name": "test_render_highlight",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TileTest.test_render_highlight.dummy": {
            "name": "dummy",
            "location": 213,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "tower_defense-master/tests/test_tile_map.py": {
        "TileMapTest.test_generate_tiles": {
            "name": "test_generate_tiles",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TileMapTest.test_new": {
            "name": "test_new",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TileMapTest.test_save": {
            "name": "test_save",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TileMapTest.test_render": {
            "name": "test_render",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TileMapTest.test_update_building": {
            "name": "test_update_building",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TileMapTest.test_update_not_building": {
            "name": "test_update_not_building",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TileMapTest.test_mouse_click_handler_not_on_map": {
            "name": "test_mouse_click_handler_not_on_map",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TileMapTest.test_path_finding_no_start": {
            "name": "test_path_finding_no_start",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TileMapTest.test_path_finding_no_finish": {
            "name": "test_path_finding_no_finish",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TileMapTest.test_path_finding_no_path": {
            "name": "test_path_finding_no_path",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TileMapTest.test_path_finding": {
            "name": "test_path_finding",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TileMapTest.test_has_start_node": {
            "name": "test_has_start_node",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TileMapTest.test_has_finish_node": {
            "name": "test_has_finish_node",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EditorTileMapTest.test_mouse_click_handler_on_map": {
            "name": "test_mouse_click_handler_on_map",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EditorTileMapTest.test_render": {
            "name": "test_render",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameTileMapTest.test_render": {
            "name": "test_render",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameTileMapTest.test_mouse_click_handler": {
            "name": "test_mouse_click_handler",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TileMapTest.test_generate_tiles.tile": {
            "name": "tile",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int"
                ],
                "y": [
                    "float",
                    "int"
                ]
            }
        },
        "TileMapTest.test_render.render": {
            "name": "render",
            "location": 64,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "game_state": [
                    "Dict[str, Any]",
                    "dict",
                    "List[bytes]"
                ],
                "batch": [
                    "float",
                    "Iterable[int]",
                    "list",
                    "List[Tuple[str, str]]"
                ]
            }
        },
        "EditorTileMapTest.test_render.dummy": {
            "name": "dummy",
            "location": 181,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        },
        "GameTileMapTest.test_render.dummy": {
            "name": "dummy",
            "location": 195,
            "return": [
                "",
                "None"
            ],
            "arguments": {}
        }
    },
    "tower_defense-master/tests/__init__.py": {},
    "tower_defense-master/tests/sub_directory/my_module_multiple_relative.py": {
        "my_function": {
            "name": "my_function",
            "location": 2,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "tower_defense-master/tests/sub_directory/__init__.py": {},
    "tower_defense-master/tower_defense/game_state.py": {
        "GameState.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameState.init": {
            "name": "init",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_path": [
                    "str"
                ]
            }
        },
        "GameState.world_to_window_space": {
            "name": "world_to_window_space",
            "location": 52,
            "return": [
                "Optional[tower_defense.helper.Vector]"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "tower_defense.helper.Vector"
                ],
                "size": [
                    "tower_defense.helper.Vector"
                ],
                "center_position": [
                    "bool"
                ]
            }
        },
        "GameState.world_to_index_space": {
            "name": "world_to_index_space",
            "location": 64,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "tower_defense.helper.Vector"
                ]
            }
        },
        "GameState.index_to_world_space": {
            "name": "index_to_world_space",
            "location": 67,
            "return": [
                "tower_defense.helper.Vector"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "tower_defense.helper.Vector"
                ]
            }
        },
        "GameState.window_to_world_space": {
            "name": "window_to_world_space",
            "location": 75,
            "return": [
                "tower_defense.helper.Vector"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "tower_defense.helper.Vector"
                ]
            }
        },
        "GameState.clean_up": {
            "name": "clean_up",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameState.update": {
            "name": "update",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameState.tick_editor": {
            "name": "tick_editor",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameState.tick_game": {
            "name": "tick_game",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameState.tick_main_menu": {
            "name": "tick_main_menu",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameState.tick_map_menu": {
            "name": "tick_map_menu",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameState.tick": {
            "name": "tick",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "window": [
                    "bool",
                    "bytes",
                    "int",
                    "float",
                    "Optional[Iterable]"
                ]
            }
        }
    },
    "tower_defense-master/tower_defense/game_types.py": {},
    "tower_defense-master/tower_defense/graphics.py": {
        "Textures.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Textures.load": {
            "name": "load",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_path": [
                    "str"
                ]
            }
        },
        "Renderer.textured_rectangle": {
            "name": "textured_rectangle",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "batch": [
                    "bool",
                    "dict[str, int]",
                    "int",
                    "Dict[str, int]"
                ],
                "texture_group": [
                    "bool",
                    "dict[str, int]",
                    "int",
                    "Dict[str, int]"
                ],
                "position": [
                    "tower_defense.helper.Vector"
                ],
                "size": [
                    "tower_defense.helper.Vector"
                ],
                "tex_max": [
                    "float"
                ],
                "tex_min": [
                    "float"
                ],
                "texture_coords": [
                    "List[float]"
                ]
            }
        },
        "Renderer.colored_rectangle": {
            "name": "colored_rectangle",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "batch": [
                    "tuple[typing.Union[int,int,int]]",
                    "int",
                    "Tuple[int, int, int]",
                    "float",
                    "str",
                    "Union[int, str]",
                    "Iterable[str]"
                ],
                "color": [
                    "Tuple[(int, int, int)]"
                ],
                "position": [
                    "tower_defense.helper.Vector"
                ],
                "size": [
                    "tower_defense.helper.Vector"
                ],
                "angle": [
                    "float"
                ],
                "group": [
                    "float",
                    "None",
                    "int",
                    "helper.Vector"
                ]
            }
        },
        "Renderer.rectangle_border": {
            "name": "rectangle_border",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "batch": [
                    "int",
                    "bytes",
                    "bool"
                ],
                "position": [
                    "tower_defense.helper.Vector"
                ],
                "rect_size": [
                    "tower_defense.helper.Vector"
                ],
                "color": [
                    "tuple[int]",
                    "int",
                    "bool",
                    "bytes"
                ],
                "border_width": [
                    "int",
                    "helper.Vector",
                    "Tuple[int, int]"
                ]
            }
        },
        "MovementGroup.__init__": {
            "name": "__init__",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "angle": [
                    "float"
                ],
                "position": [
                    "tower_defense.helper.Vector"
                ],
                "parent": [
                    "None"
                ]
            }
        },
        "MovementGroup.set_state": {
            "name": "set_state",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MovementGroup.unset_state": {
            "name": "unset_state",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Textures.load.load_image": {
            "name": "load_image",
            "location": 20,
            "return": [
                "str",
                "dict",
                "IO",
                "int"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "tower_defense-master/tower_defense/helper.py": {
        "rect_contains_point": {
            "name": "rect_contains_point",
            "location": 87,
            "return": [
                "bool"
            ],
            "arguments": {
                "point": [
                    "Vector"
                ],
                "rect_position": [
                    "Vector"
                ],
                "rect_size": [
                    "Vector"
                ]
            }
        },
        "constrain_rect_to_bounds": {
            "name": "constrain_rect_to_bounds",
            "location": 100,
            "return": [
                "Vector"
            ],
            "arguments": {
                "window_size": [
                    "Vector"
                ],
                "position": [
                    "Vector"
                ],
                "size": [
                    "Vector"
                ]
            }
        },
        "process_clicks": {
            "name": "process_clicks",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "game_state": [
                    "int",
                    "List[int]",
                    "list[int]"
                ],
                "processor": [
                    "Callable[([object, MouseClick], bool)]"
                ],
                "map_to_world_space": [
                    "bool"
                ],
                "offset": [
                    "Vector"
                ]
            }
        },
        "maps_list": {
            "name": "maps_list",
            "location": 129,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "maps_path": [
                    "str"
                ]
            }
        },
        "resolve_relative_path": {
            "name": "resolve_relative_path",
            "location": 137,
            "return": [
                "Callable[([], Any)]"
            ],
            "arguments": {
                "path_func": [
                    "bool",
                    "str",
                    "list[str]",
                    "List[str]",
                    "Iterable[Any]"
                ]
            }
        },
        "get_res_path": {
            "name": "get_res_path",
            "location": 144,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_maps_path": {
            "name": "get_maps_path",
            "location": 149,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "KeyPresses.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MouseClick.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MouseClick.__eq__": {
            "name": "__eq__",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, \"BitVec\"]",
                    "int",
                    "Tuple[int, int, int]",
                    "tuple[typing.Union[int,int,int]]"
                ]
            }
        },
        "Vector.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float"
                ],
                "y": [
                    "float"
                ],
                "point": [
                    "Tuple[(float, float)]"
                ]
            }
        },
        "Vector.length": {
            "name": "length",
            "location": 37,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vector.angle": {
            "name": "angle",
            "location": 40,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vector.copy": {
            "name": "copy",
            "location": 43,
            "return": [
                "Vector"
            ],
            "arguments": {
                "self": [
                    "_TVector"
                ]
            }
        },
        "Vector.__str__": {
            "name": "__str__",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vector.__eq__": {
            "name": "__eq__",
            "location": 49,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float"
                ]
            }
        },
        "Vector.__ne__": {
            "name": "__ne__",
            "location": 52,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict[, ]",
                    "dict",
                    "typing.AbstractSet",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "Vector.__add__": {
            "name": "__add__",
            "location": 55,
            "return": [
                "Vector"
            ],
            "arguments": {
                "self": [
                    "_TVector"
                ],
                "other": [
                    "bool",
                    "int"
                ]
            }
        },
        "Vector.__radd__": {
            "name": "__radd__",
            "location": 60,
            "return": [
                "Vector"
            ],
            "arguments": {
                "self": [
                    "_TVector"
                ],
                "other": [
                    "float"
                ]
            }
        },
        "Vector.__sub__": {
            "name": "__sub__",
            "location": 63,
            "return": [
                "Vector"
            ],
            "arguments": {
                "self": [
                    "_TVector"
                ],
                "other": [
                    "Iterable[T]",
                    "typing.Iterable[T]"
                ]
            }
        },
        "Vector.__rsub__": {
            "name": "__rsub__",
            "location": 68,
            "return": [
                "Vector"
            ],
            "arguments": {
                "self": [
                    "_TVector"
                ],
                "other": [
                    "float"
                ]
            }
        },
        "Vector.__mul__": {
            "name": "__mul__",
            "location": 71,
            "return": [
                "Vector"
            ],
            "arguments": {
                "self": [
                    "_TVector"
                ],
                "other": [
                    "float",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        },
        "Vector.__truediv__": {
            "name": "__truediv__",
            "location": 76,
            "return": [
                "Vector"
            ],
            "arguments": {
                "self": [
                    "_TVector"
                ],
                "other": [
                    "float",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        },
        "Vector.__floordiv__": {
            "name": "__floordiv__",
            "location": 81,
            "return": [
                "Vector"
            ],
            "arguments": {
                "self": [
                    "_TVector"
                ],
                "other": [
                    "float",
                    "Tuple[float, float]",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        },
        "resolve_relative_path.wrapper": {
            "name": "wrapper",
            "location": 138,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        }
    },
    "tower_defense-master/tower_defense/hot_reload.py": {
        "reload_all": {
            "name": "reload_all",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "whitelist": [
                    "str",
                    "dict",
                    "dict[, ]"
                ],
                "debug": [
                    "bool",
                    "str"
                ]
            }
        },
        "reload_module": {
            "name": "reload_module",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "module": [
                    "Optional[Dict[str, str]]",
                    "Dict[str, str]",
                    "Callable[[str], bool]"
                ],
                "debug": [
                    "bool",
                    "Optional[str]",
                    "list",
                    "dict",
                    "float"
                ],
                "lists": [
                    "bool",
                    "str",
                    "dict",
                    "Sequence[Tuple[str, str]]"
                ],
                "dicts": [
                    "bool",
                    "str",
                    "dict",
                    "Sequence[Tuple[str, str]]"
                ]
            }
        },
        "update_function": {
            "name": "update_function",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "old": [
                    "str",
                    "bool",
                    "float",
                    "List[str]",
                    "list[str]",
                    "Final",
                    "typing.Final"
                ],
                "new": [
                    "str",
                    "bool",
                    "float",
                    "List[str]",
                    "list[str]",
                    "Final",
                    "typing.Final"
                ],
                "debug": [
                    "list[]",
                    "str",
                    "list",
                    "bool",
                    "typing.Iterator",
                    "Iterator[Tuple[str, str]]",
                    "Union[str, Iterable[str]]"
                ]
            }
        },
        "old_update_function": {
            "name": "old_update_function",
            "location": 133,
            "return": [
                "None",
                "Iterator[Tuple[str, str]]",
                "int",
                "Optional[bool]",
                "Dict[str, str]",
                "Optional[str]"
            ],
            "arguments": {
                "old": [
                    "str",
                    "bool"
                ],
                "new": [
                    "List[str]",
                    "str",
                    "list[str]"
                ],
                "debug": [
                    "int",
                    "List[int]",
                    "list[int]"
                ],
                "depth": [
                    "int",
                    "List[int]"
                ],
                "visited": [
                    "Optional[List[Any]]",
                    "None",
                    "Optional[Mapping[str, Any]]",
                    "list[typing.Any]",
                    "typing.Mapping"
                ]
            }
        },
        "update_class": {
            "name": "update_class",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "old": [
                    "str",
                    "int",
                    "Union[str, Pattern]",
                    "typing.Pattern",
                    "dict",
                    "dict[, ]"
                ],
                "new": [
                    "Type[T]",
                    "typing.Type",
                    "Optional[Dict[str, str]]",
                    "dict[str, str]",
                    "None"
                ],
                "debug": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "memoryview",
                    "List[str]",
                    "list[str]",
                    "int",
                    "Mapping",
                    "typing.Mapping"
                ]
            }
        },
        "safe_str": {
            "name": "safe_str",
            "location": 238,
            "return": [
                "str"
            ],
            "arguments": {
                "obj": [
                    "bool",
                    "str",
                    "dict[, ]",
                    "dict",
                    "Union[str, int]"
                ]
            }
        }
    },
    "tower_defense-master/tower_defense/__init__.py": {},
    "tower_defense-master/tower_defense/__main__.py": {
        "handle_key": {
            "name": "handle_key",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "symbol": [
                    "str",
                    "bool",
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "modifiers": [
                    "bool",
                    "float",
                    "Optional[Any]",
                    "typing.Any",
                    "bytes",
                    "None",
                    "Optional[bool]"
                ],
                "key_down": [
                    "str",
                    "bytes",
                    "Iterable[str]",
                    "typing.Iterable[str]",
                    "Optional[Callable[[str], Any]]",
                    "typing.Callable[str, typing.Any]",
                    "Union[str, int]",
                    "None",
                    "bool",
                    "int"
                ]
            }
        },
        "show_average_time": {
            "name": "show_average_time",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "on_key_press": {
            "name": "on_key_press",
            "location": 74,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "symbol": [
                    "dict",
                    "int",
                    "dict[, ]",
                    "str",
                    "Tuple[str, str]",
                    "tuple[typing.Union[str,str]]",
                    "Optional[Any]",
                    "typing.Any",
                    "None",
                    "bool",
                    "List[int]",
                    "list[int]"
                ],
                "modifiers": [
                    "dict",
                    "int",
                    "dict[, ]",
                    "str",
                    "Tuple[str, str]",
                    "tuple[typing.Union[str,str]]",
                    "Optional[Any]",
                    "typing.Any",
                    "None",
                    "bool",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "on_key_release": {
            "name": "on_key_release",
            "location": 79,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "symbol": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]"
                ],
                "modifiers": [
                    "str",
                    "bool",
                    "List[str]",
                    "list[str]"
                ]
            }
        },
        "on_mouse_motion": {
            "name": "on_mouse_motion",
            "location": 84,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ],
                "dx": [
                    "bool",
                    "float",
                    "str",
                    "typing.Iterable[typing.Iterable[float]]",
                    "bytes",
                    "Iterable[Iterable[float]]",
                    "list",
                    "T"
                ],
                "dy": [
                    "bool",
                    "float",
                    "str",
                    "typing.Iterable[typing.Iterable[float]]",
                    "bytes",
                    "Iterable[Iterable[float]]",
                    "list",
                    "T"
                ]
            }
        },
        "on_mouse_press": {
            "name": "on_mouse_press",
            "location": 89,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ],
                "button": [
                    "dict",
                    "str",
                    "dict[, ]",
                    "int"
                ],
                "modifiers": [
                    "bool",
                    "int"
                ]
            }
        },
        "on_draw": {
            "name": "on_draw",
            "location": 98,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "_": [
                    "int",
                    "None",
                    "str",
                    "Iterable['Context']",
                    "typing.Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "tower_defense-master/tower_defense/buildings/building.py": {
        "Building.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "tower_defense.helper.Vector"
                ],
                "size": [
                    "tower_defense.helper.Vector"
                ],
                "building_type": [
                    "tower_defense.game_types.BuildingType"
                ]
            }
        },
        "Building.world_position": {
            "name": "world_position",
            "location": 19,
            "return": [
                "Vector",
                "int",
                "float",
                "Tuple[Tuple[int, Any]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Building.shooting_frequency": {
            "name": "shooting_frequency",
            "location": 23,
            "return": [
                "float",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Building.range": {
            "name": "range",
            "location": 30,
            "return": [
                "int",
                "T",
                "float",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Building.cost": {
            "name": "cost",
            "location": 42,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Building.render": {
            "name": "render",
            "location": 53,
            "return": [
                "Optional[str]",
                "None",
                "str",
                "int",
                "Optional[int]",
                "float"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "int"
                ],
                "batch": [
                    "List[List[int]]",
                    "list[list[int]]",
                    "int",
                    "defaultdict",
                    "typing.DefaultDict"
                ],
                "tex_max": [
                    "float"
                ],
                "foreground": [
                    "float",
                    "None",
                    "Iterable[int]",
                    "typing.Iterable[int]",
                    "list",
                    "List[Tuple[str, str]]"
                ],
                "background": [
                    "float",
                    "None",
                    "Iterable[int]",
                    "typing.Iterable[int]",
                    "list",
                    "List[Tuple[str, str]]"
                ]
            }
        },
        "Building.update": {
            "name": "update",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_state": []
            }
        },
        "Building.get_center_world_position": {
            "name": "get_center_world_position",
            "location": 79,
            "return": [
                "str",
                "bytearray",
                "int"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "int",
                    "bytes"
                ]
            }
        },
        "Building.get_target": {
            "name": "get_target",
            "location": 83,
            "return": [
                "generator"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "str",
                    "int",
                    "dict",
                    "dict[, ]",
                    "List[List[int]]",
                    "list[list[int]]"
                ]
            }
        },
        "Laser.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "tower_defense.helper.Vector"
                ],
                "size": [
                    "tower_defense.helper.Vector"
                ]
            }
        },
        "Laser.render": {
            "name": "render",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "int"
                ],
                "batch": [
                    "int"
                ],
                "tex_max": [
                    "float",
                    "Sequence[T]",
                    "Callable[[T], bool]",
                    "Iterable[Any]",
                    "bool",
                    "int"
                ],
                "foreground": [
                    "float",
                    "None",
                    "int",
                    "str",
                    "Iterable[List[str]]",
                    "typing.Iterable[list[str]]"
                ],
                "background": [
                    "helper.Vector",
                    "None",
                    "int",
                    "Sequence[int]",
                    "typing.Sequence[int]"
                ]
            }
        },
        "Laser.update": {
            "name": "update",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "Dict[str, Any]",
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Hammer.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "tower_defense.helper.Vector"
                ],
                "size": [
                    "tower_defense.helper.Vector"
                ]
            }
        },
        "Hammer.update": {
            "name": "update",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "int",
                    "Tuple[Union[int, slice], Union[int, slice]]",
                    "tuple[typing.Union[int,slice,int,slice]]",
                    "Callable",
                    "typing.Callable[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Hammer.render": {
            "name": "render",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "int",
                    "dict",
                    "dict[, ]"
                ],
                "batch": [],
                "tex_max": [
                    "float",
                    "Sequence[T]",
                    "Callable[[T], bool]",
                    "Iterable[Any]",
                    "bool",
                    "int"
                ],
                "foreground": [
                    "int",
                    "None",
                    "float",
                    "List[List[T]]",
                    "list[list[T]]"
                ],
                "background": [
                    "float",
                    "None",
                    "int",
                    "str",
                    "Iterable[List[str]]",
                    "typing.Iterable[list[str]]"
                ]
            }
        },
        "Drill.__init__": {
            "name": "__init__",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "tower_defense.helper.Vector"
                ],
                "size": [
                    "tower_defense.helper.Vector"
                ]
            }
        },
        "Drill.update": {
            "name": "update",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_state": []
            }
        },
        "Drill.closest_tile_angle": {
            "name": "closest_tile_angle",
            "location": 195,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "float",
                    "typing.Iterable[int]",
                    "Iterable[int]",
                    "list",
                    "List[Tuple[str, str]]"
                ]
            }
        },
        "Drill.check_for_entities": {
            "name": "check_for_entities",
            "location": 213,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "List[List[int]]",
                    "list[list[int]]"
                ]
            }
        },
        "Drill.rotate_towards": {
            "name": "rotate_towards",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "angle": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Drill.render": {
            "name": "render",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "int",
                    "dict",
                    "dict[, ]"
                ],
                "batch": [],
                "tex_max": [
                    "float"
                ],
                "foreground": [
                    "int",
                    "None",
                    "float",
                    "List[List[T]]",
                    "list[list[T]]"
                ],
                "background": [
                    "float",
                    "None",
                    "int",
                    "str",
                    "Iterable[List[str]]",
                    "typing.Iterable[list[str]]"
                ]
            }
        },
        "Drill.closest_tile_angle.test_tile": {
            "name": "test_tile",
            "location": 196,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "bool"
                ],
                "y": [
                    "int",
                    "ppb_vector.Vector",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "tower_defense-master/tower_defense/buildings/building_manager.py": {
        "BuildingManager.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuildingManager.render": {
            "name": "render",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "bool",
                    "int"
                ]
            }
        },
        "BuildingManager.update": {
            "name": "update",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "List[List[int]]",
                    "list[list[int]]"
                ]
            }
        },
        "BuildingManager.shoot": {
            "name": "shoot",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "world_position": [
                    "tower_defense.helper.Vector"
                ],
                "direction": [
                    "tower_defense.helper.Vector"
                ]
            }
        },
        "BuildingManager.spawn_building": {
            "name": "spawn_building",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "Tuple[int, int]",
                    "str",
                    "typing.Sequence[int]",
                    "bool",
                    "None",
                    "Optional[Sequence[int]]",
                    "Optional[int]"
                ],
                "tile_index": [
                    "Tuple[(int, int)]"
                ],
                "building_type": [
                    "tower_defense.game_types.BuildingType"
                ]
            }
        }
    },
    "tower_defense-master/tower_defense/buildings/__init__.py": {},
    "tower_defense-master/tower_defense/entities/bullet.py": {
        "Bullet.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "tower_defense.helper.Vector"
                ],
                "size": [
                    "tower_defense.helper.Vector"
                ],
                "velocity": [
                    "tower_defense.helper.Vector"
                ]
            }
        },
        "Bullet.damage": {
            "name": "damage",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bullet.render": {
            "name": "render",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_state": [],
                "batch": [
                    "List[List[int]]",
                    "list[list[int]]"
                ]
            }
        },
        "Bullet.update": {
            "name": "update",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "dict",
                    "bytes",
                    "dict[, ]"
                ]
            }
        }
    },
    "tower_defense-master/tower_defense/entities/entity.py": {
        "Entity.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "tower_defense.helper.Vector"
                ],
                "size": [
                    "tower_defense.helper.Vector"
                ],
                "entity_type": [
                    "tower_defense.game_types.EntityType"
                ]
            }
        },
        "Entity.update": {
            "name": "update",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "bytes"
                ]
            }
        },
        "Entity.get_movement_target": {
            "name": "get_movement_target",
            "location": 37,
            "return": [
                "bool",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "int",
                    "Union[str, int]",
                    "str"
                ]
            }
        },
        "Entity.calculate_movement": {
            "name": "calculate_movement",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "str",
                    "Dict[str, T]",
                    "dict[str, T]",
                    "List[str]",
                    "list[str]",
                    "list",
                    "list[]"
                ]
            }
        },
        "Entity.update_next_tile_index": {
            "name": "update_next_tile_index",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "defaultdict",
                    "typing.DefaultDict",
                    "List[List[int]]",
                    "list[list[int]]"
                ]
            }
        },
        "Entity.render": {
            "name": "render",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "str"
                ],
                "batch": [
                    "str",
                    "int",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "Entity.take_damage": {
            "name": "take_damage",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "damage": [
                    "int",
                    "str",
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "SmallBoulder.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "tower_defense.helper.Vector"
                ],
                "size": [
                    "tower_defense.helper.Vector"
                ],
                "path_side": [
                    "int"
                ]
            }
        },
        "SmallBoulder.get_movement_target": {
            "name": "get_movement_target",
            "location": 90,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "int",
                    "Union[str, int]",
                    "str"
                ]
            }
        }
    },
    "tower_defense-master/tower_defense/entities/entity_manager.py": {
        "EntityManager.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntityManager.render": {
            "name": "render",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "int"
                ]
            }
        },
        "EntityManager.reset": {
            "name": "reset",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntityManager.spawn_entity": {
            "name": "spawn_entity",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "int",
                    "str",
                    "bytes",
                    "TextIO",
                    "typing.TextIO"
                ],
                "entity_type": [
                    "tower_defense.game_types.EntityType"
                ],
                "position": [
                    "tower_defense.helper.Vector"
                ],
                "path_side": [
                    "int"
                ]
            }
        },
        "EntityManager.update": {
            "name": "update",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "bool",
                    "dict[str, typing.Any]",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "EntityManager.next_wave": {
            "name": "next_wave",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntityManager.update_entities": {
            "name": "update_entities",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "EntityManager.generate_directions_graph": {
            "name": "generate_directions_graph",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_state": []
            }
        },
        "EditorEntityManager.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EditorEntityManager.update": {
            "name": "update",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "bool",
                    "int"
                ]
            }
        },
        "EditorEntityManager.reset": {
            "name": "reset",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameEntityManager.__init__": {
            "name": "__init__",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameEntityManager.wave_running": {
            "name": "wave_running",
            "location": 120,
            "return": [
                "bool",
                "int",
                "List[int]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameEntityManager.next_wave": {
            "name": "next_wave",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameEntityManager.update": {
            "name": "update",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_state": []
            }
        }
    },
    "tower_defense-master/tower_defense/entities/__init__.py": {},
    "tower_defense-master/tower_defense/tiles/tile.py": {
        "Tile.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "tower_defense.helper.Vector"
                ],
                "size": [
                    "tower_defense.helper.Vector"
                ],
                "tile_type": [
                    "tower_defense.game_types.TileType"
                ]
            }
        },
        "Tile.__eq__": {
            "name": "__eq__",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, float]",
                    "int",
                    "Tuple[int, int]",
                    "float",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "Tile.__str__": {
            "name": "__str__",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tile.is_walkable": {
            "name": "is_walkable",
            "location": 34,
            "return": [
                "bool",
                "str",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tile.world_position": {
            "name": "world_position",
            "location": 38,
            "return": [
                "Vector",
                "int",
                "float",
                "Tuple[Tuple[int, Any]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tile.next_type": {
            "name": "next_type",
            "location": 41,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "allow_start": [
                    "bool"
                ],
                "allow_finish": [
                    "bool"
                ]
            }
        },
        "Tile.render_label": {
            "name": "render_label",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "int"
                ],
                "batch": [
                    "int",
                    "bool"
                ]
            }
        },
        "Tile.render_highlight": {
            "name": "render_highlight",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "int"
                ],
                "batch": [
                    "int",
                    "float",
                    "List[List[T]]",
                    "list[list[T]]"
                ]
            }
        },
        "Tile.render_arrow": {
            "name": "render_arrow",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_state": [],
                "batch": [
                    "int"
                ]
            }
        },
        "Tile.render": {
            "name": "render",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "int"
                ],
                "batch": [
                    "int",
                    "bytes",
                    "dict",
                    "dict[, ]"
                ]
            }
        }
    },
    "tower_defense-master/tower_defense/tiles/tile_map.py": {
        "TileMap.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TileMap.generate_tiles": {
            "name": "generate_tiles",
            "location": 24,
            "return": [
                "dict"
            ],
            "arguments": {
                "max_tiles": [
                    "tower_defense.helper.Vector"
                ],
                "tile_size": [
                    "tower_defense.helper.Vector"
                ]
            }
        },
        "TileMap.new": {
            "name": "new",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "Callable",
                    "bool",
                    "typing.Callable[, ]"
                ],
                "path": [
                    "str"
                ],
                "size": [
                    "tower_defense.helper.Vector"
                ]
            }
        },
        "TileMap.load": {
            "name": "load",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_state": [],
                "path": [
                    "str"
                ]
            }
        },
        "TileMap.save": {
            "name": "save",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TileMap.tile_map_width": {
            "name": "tile_map_width",
            "location": 58,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TileMap.tile_map_height": {
            "name": "tile_map_height",
            "location": 62,
            "return": [
                "int",
                "bytearray",
                "bytes",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TileMap.has_start_node": {
            "name": "has_start_node",
            "location": 66,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TileMap.has_finish_node": {
            "name": "has_finish_node",
            "location": 73,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TileMap.is_on_map": {
            "name": "is_on_map",
            "location": 79,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "tower_defense.helper.Vector"
                ]
            }
        },
        "TileMap.render": {
            "name": "render",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "int"
                ]
            }
        },
        "TileMap.update": {
            "name": "update",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "int"
                ]
            }
        },
        "TileMap.mouse_click_handler": {
            "name": "mouse_click_handler",
            "location": 100,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "click": [
                    "tower_defense.helper.MouseClick"
                ]
            }
        },
        "TileMap.path_finding": {
            "name": "path_finding",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TileMap.remove_node_from_open_directions": {
            "name": "remove_node_from_open_directions",
            "location": 220,
            "return": [
                "list"
            ],
            "arguments": {
                "node": [
                    "Tuple[(int, int)]"
                ],
                "open_directions": [
                    "list"
                ]
            }
        },
        "TileMap.select_start_node": {
            "name": "select_start_node",
            "location": 227,
            "return": [
                "tuple[typing.Union[float,float]]",
                "None",
                "Optional[str]",
                "Optional[List[str]]",
                "bool",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "paths": [
                    "list[tuple[typing.Union[float,float]]]",
                    "str",
                    "List[Tuple[float, float]]"
                ]
            }
        },
        "TileMap.get_tile_graph": {
            "name": "get_tile_graph",
            "location": 233,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "EditorTileMap.render": {
            "name": "render",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "int"
                ]
            }
        },
        "EditorTileMap.mouse_click_handler": {
            "name": "mouse_click_handler",
            "location": 269,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "click": [
                    "tower_defense.helper.MouseClick"
                ]
            }
        },
        "GameTileMap.__init__": {
            "name": "__init__",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameTileMap.render": {
            "name": "render",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "int"
                ]
            }
        },
        "GameTileMap.mouse_click_handler": {
            "name": "mouse_click_handler",
            "location": 309,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "float",
                    "typing.Iterable[int]",
                    "Iterable[int]",
                    "list",
                    "List[Tuple[str, str]]"
                ],
                "click": [
                    "tower_defense.helper.MouseClick"
                ]
            }
        }
    },
    "tower_defense-master/tower_defense/tiles/__init__.py": {},
    "tower_defense-master/tower_defense/user_interface/components.py": {
        "Widget.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "tower_defense.helper.Vector"
                ],
                "size": [
                    "tower_defense.helper.Vector"
                ],
                "visible": [
                    "bool"
                ]
            }
        },
        "Widget.disabled": {
            "name": "disabled",
            "location": 14,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Widget.toggle_visibility": {
            "name": "toggle_visibility",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Widget.is_clicked": {
            "name": "is_clicked",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "mouse_click": [
                    "tower_defense.helper.MouseClick"
                ]
            }
        },
        "Widget.render": {
            "name": "render",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "tower_defense.helper.Vector"
                ]
            }
        },
        "Label.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "position": [
                    "tower_defense.helper.Vector"
                ],
                "size": [
                    "tower_defense.helper.Vector"
                ],
                "font_size": [
                    "int"
                ],
                "visible": [
                    "bool"
                ]
            }
        },
        "Label.text": {
            "name": "text",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Label.update": {
            "name": "update",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "disabled": [
                    "bool"
                ]
            }
        },
        "Label.render": {
            "name": "render",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "tower_defense.helper.Vector"
                ]
            }
        },
        "HighlightableLabel.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "position": [
                    "tower_defense.helper.Vector"
                ],
                "size": [
                    "tower_defense.helper.Vector"
                ],
                "font_size": [
                    "int"
                ],
                "visible": [
                    "bool"
                ],
                "is_highlighted": [
                    "bool"
                ]
            }
        },
        "HighlightableLabel.is_clicked": {
            "name": "is_clicked",
            "location": 85,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "mouse_click": [
                    "str",
                    "int"
                ]
            }
        },
        "HighlightableLabel.render": {
            "name": "render",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "tower_defense.helper.Vector"
                ]
            }
        },
        "HighlightableLabel.render_highlight": {
            "name": "render_highlight",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "tower_defense.helper.Vector"
                ]
            }
        },
        "Button.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "position": [
                    "tower_defense.helper.Vector"
                ],
                "size": [
                    "tower_defense.helper.Vector"
                ],
                "font_size": [
                    "int"
                ],
                "visible": [
                    "bool"
                ]
            }
        },
        "Button.is_clicked": {
            "name": "is_clicked",
            "location": 113,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "mouse_click": [
                    "tower_defense.helper.MouseClick"
                ]
            }
        },
        "Input.__init__": {
            "name": "__init__",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "tower_defense.helper.Vector"
                ],
                "size": [
                    "tower_defense.helper.Vector"
                ],
                "font_size": [
                    "int"
                ],
                "has_focus": [
                    "bool"
                ]
            }
        },
        "Input.is_clicked": {
            "name": "is_clicked",
            "location": 124,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "mouse_click": [
                    "str",
                    "int",
                    "Callable",
                    "typing.Callable[, ]",
                    "Optional[bool]",
                    "None",
                    "type",
                    "typing.Type"
                ]
            }
        },
        "Input.add_text": {
            "name": "add_text",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key_presses": [
                    "tower_defense.helper.KeyPresses"
                ]
            }
        }
    },
    "tower_defense-master/tower_defense/user_interface/dialogs.py": {
        "Dialog.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "visible": [
                    "bool"
                ]
            }
        },
        "Dialog.open": {
            "name": "open",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "int"
                ]
            }
        },
        "Dialog.close": {
            "name": "close",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dialog.render": {
            "name": "render",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dialog.update": {
            "name": "update",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "bytes",
                    "int",
                    "List[List[int]]",
                    "list[list[int]]"
                ]
            }
        },
        "NewMapDialog.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "visible": [
                    "bool"
                ]
            }
        },
        "NewMapDialog.open": {
            "name": "open",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "Union[str, IO]",
                    "str",
                    "Callable",
                    "typing.IO",
                    "Dict[str, Any]",
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "NewMapDialog.render": {
            "name": "render",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NewMapDialog.submit_func": {
            "name": "submit_func",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_state": []
            }
        },
        "NewMapDialog.cancel_func": {
            "name": "cancel_func",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "List[Dict[str, Any]]",
                    "str",
                    "list[dict[str, typing.Any]]",
                    "int"
                ]
            }
        },
        "NewMapDialog.update": {
            "name": "update",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_state": []
            }
        },
        "NewMapDialog.mouse_click_handler": {
            "name": "mouse_click_handler",
            "location": 101,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Union[int, float]",
                    "int",
                    "float"
                ],
                "click": [
                    "tower_defense.helper.MouseClick"
                ]
            }
        },
        "NewMapDialog.give_exclusive_focus": {
            "name": "give_exclusive_focus",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_": [
                    "str"
                ]
            }
        },
        "LoadMapDialog.__init__": {
            "name": "__init__",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "visible": [
                    "bool"
                ]
            }
        },
        "LoadMapDialog.refresh_maps": {
            "name": "refresh_maps",
            "location": 125,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "self": [],
                "maps_path": [
                    "str"
                ]
            }
        },
        "LoadMapDialog.update_cancel_button": {
            "name": "update_cancel_button",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "current_index": [
                    "str",
                    "int",
                    "dict",
                    "Optional[str]"
                ],
                "height": [
                    "int",
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "LoadMapDialog.open": {
            "name": "open",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "Union[str, IO]",
                    "str",
                    "Callable",
                    "typing.IO",
                    "Dict[str, Any]",
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "LoadMapDialog.update": {
            "name": "update",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_state": []
            }
        },
        "LoadMapDialog.mouse_click_handler": {
            "name": "mouse_click_handler",
            "location": 151,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "int",
                    "List[List[int]]",
                    "list[list[int]]",
                    "dict",
                    "dict[, ]"
                ],
                "click": [
                    "float",
                    "str"
                ]
            }
        },
        "LoadMapDialog.render": {
            "name": "render",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuildingDialog.__init__": {
            "name": "__init__",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuildingDialog.open": {
            "name": "open",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "bytes",
                    "memoryview",
                    "int"
                ]
            }
        },
        "BuildingDialog.build_func": {
            "name": "build_func",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_state": []
            }
        },
        "BuildingDialog.upgrade_func": {
            "name": "upgrade_func",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "game_state": [
                    "List[Tuple[str, str]]",
                    "float",
                    "list[tuple[typing.Union[str,str]]]",
                    "list",
                    "list[]"
                ]
            }
        },
        "BuildingDialog.render_background": {
            "name": "render_background",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuildingDialog.render": {
            "name": "render",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuildingDialog.update": {
            "name": "update",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "bytes",
                    "int"
                ]
            }
        },
        "BuildingDialog.highlight_building": {
            "name": "highlight_building",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "building_type": [
                    "str",
                    "List[Tuple[str]]",
                    "list[tuple[str]]",
                    "Union[int, str]",
                    "int"
                ]
            }
        },
        "BuildingDialog.mouse_click_handler": {
            "name": "mouse_click_handler",
            "location": 254,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "int"
                ],
                "click": [
                    "tower_defense.helper.MouseClick"
                ]
            }
        }
    },
    "tower_defense-master/tower_defense/user_interface/menu.py": {
        "MainMenu.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainMenu.render": {
            "name": "render",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainMenu.update": {
            "name": "update",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "bytes",
                    "defaultdict",
                    "typing.DefaultDict"
                ]
            }
        },
        "MainMenu.game_func": {
            "name": "game_func",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "game_state": [
                    "List[Dict[str, Any]]",
                    "bytes",
                    "list[dict[str, typing.Any]]",
                    "int",
                    "Callable",
                    "typing.Callable[, ]",
                    "List[int]",
                    "list[int]"
                ]
            }
        },
        "MainMenu.editor_func": {
            "name": "editor_func",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "game_state": [
                    "int"
                ]
            }
        },
        "MainMenu.exit_func": {
            "name": "exit_func",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "game_state": [
                    "List[Tuple[str, str]]",
                    "float",
                    "list[tuple[typing.Union[str,str]]]",
                    "list",
                    "list[]"
                ]
            }
        },
        "MainMenu.mouse_click_handler": {
            "name": "mouse_click_handler",
            "location": 49,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Union[int, float]",
                    "int",
                    "float"
                ],
                "click": [
                    "tower_defense.helper.MouseClick"
                ]
            }
        },
        "MapMenu.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "map_path": [
                    "str"
                ]
            }
        },
        "MapMenu.back_func": {
            "name": "back_func",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "game_state": [
                    "int"
                ]
            }
        },
        "MapMenu.new_func": {
            "name": "new_func",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "Callable",
                    "bool",
                    "typing.Callable[, ]",
                    "BinaryIO",
                    "typing.BinaryIO",
                    "Tuple[Union[int, slice], Union[int, slice]]",
                    "tuple[typing.Union[int,slice,int,slice]]"
                ]
            }
        },
        "MapMenu.load_func": {
            "name": "load_func",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "game_state": [
                    "str",
                    "list",
                    "list[]"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "MapMenu.update": {
            "name": "update",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "bytes",
                    "str",
                    "defaultdict",
                    "typing.DefaultDict"
                ]
            }
        },
        "MapMenu.mouse_click_handler": {
            "name": "mouse_click_handler",
            "location": 111,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "bytes"
                ],
                "click": [
                    "tower_defense.helper.MouseClick"
                ]
            }
        },
        "MapMenu.refresh_maps": {
            "name": "refresh_maps",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "maps_path": [
                    "str"
                ]
            }
        },
        "MapMenu.render": {
            "name": "render",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "int"
                ]
            }
        }
    },
    "tower_defense-master/tower_defense/user_interface/user_interface.py": {
        "EditorUI.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EditorUI.menu_func": {
            "name": "menu_func",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "List[Dict[str, Any]]",
                    "str",
                    "list[dict[str, typing.Any]]",
                    "int"
                ]
            }
        },
        "EditorUI.save_func": {
            "name": "save_func",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "int",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "EditorUI.new_func": {
            "name": "new_func",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "Callable",
                    "bool",
                    "typing.Callable[, ]",
                    "BinaryIO",
                    "typing.BinaryIO",
                    "Tuple[Union[int, slice], Union[int, slice]]",
                    "tuple[typing.Union[int,slice,int,slice]]"
                ]
            }
        },
        "EditorUI.load_func": {
            "name": "load_func",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "Callable",
                    "typing.Callable[, ]",
                    "bytes",
                    "IO[bytes]",
                    "bool",
                    "typing.IO",
                    "BinaryIO",
                    "typing.BinaryIO",
                    "dict",
                    "dict[, ]",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "EditorUI.back_func": {
            "name": "back_func",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "game_state": [
                    "int"
                ]
            }
        },
        "EditorUI.entities_func": {
            "name": "entities_func",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "game_state": [
                    "int"
                ]
            }
        },
        "EditorUI.update": {
            "name": "update",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "Callable",
                    "typing.Callable[, ]"
                ]
            }
        },
        "EditorUI.mouse_click_handler": {
            "name": "mouse_click_handler",
            "location": 68,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Union[int, float]",
                    "int",
                    "float"
                ],
                "click": [
                    "bool",
                    "int"
                ]
            }
        },
        "EditorUI.toggle_map_menu": {
            "name": "toggle_map_menu",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EditorUI.render": {
            "name": "render",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameUI.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameUI.update": {
            "name": "update",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "int",
                    "Dict[str, Any]",
                    "dict[str, typing.Any]",
                    "dict",
                    "dict[, ]"
                ]
            }
        },
        "GameUI.next_wave_func": {
            "name": "next_wave_func",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "game_state": [
                    "str"
                ]
            }
        },
        "GameUI.mouse_click_handler": {
            "name": "mouse_click_handler",
            "location": 136,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "str",
                    "List[str]",
                    "list[str]",
                    "Union[int, float]",
                    "int",
                    "float"
                ],
                "click": [
                    "tower_defense.helper.MouseClick"
                ]
            }
        },
        "GameUI.render": {
            "name": "render",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "int",
                    "str",
                    "typing.Iterable['Context']",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "tower_defense-master/tower_defense/user_interface/__init__.py": {}
}
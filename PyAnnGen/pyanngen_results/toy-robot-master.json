{
    "toy-robot-master/navigation.py": {
        "NavigationSystem.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ],
                "direction": [
                    "str"
                ],
                "terrain": [
                    "table.Terrain"
                ]
            }
        },
        "NavigationSystem.set_terrain": {
            "name": "set_terrain",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "terrain": [
                    "table.Terrain"
                ]
            }
        },
        "NavigationSystem.update": {
            "name": "update",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ],
                "direction": [
                    "str"
                ],
                "terrain": [
                    "table.Terrain"
                ]
            }
        },
        "NavigationSystem.move": {
            "name": "move",
            "location": 58,
            "return": [
                "Optional[Tuple[(int, int)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NavigationSystem.left": {
            "name": "left",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NavigationSystem.right": {
            "name": "right",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NavigationSystem.__str__": {
            "name": "__str__",
            "location": 94,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "toy-robot-master/robot.py": {
        "Robot.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "terrain": [
                    "table.Terrain"
                ]
            }
        },
        "Robot.set_terrain": {
            "name": "set_terrain",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "terrain": [
                    "table.Terrain"
                ]
            }
        },
        "Robot.place": {
            "name": "place",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x_coord": [
                    "int"
                ],
                "y_coord": [
                    "int"
                ],
                "direction": [
                    "str"
                ]
            }
        },
        "Robot.position": {
            "name": "position",
            "location": 53,
            "return": [
                "Tuple[(int, int, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Robot.report": {
            "name": "report",
            "location": 60,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Robot.__str__": {
            "name": "__str__",
            "location": 66,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "toy-robot-master/run.py": {
        "RobotPrompt.do_place": {
            "name": "do_place",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "place_cmd": [
                    "str",
                    "float",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "RobotPrompt.do_move": {
            "name": "do_move",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str"
                ]
            }
        },
        "RobotPrompt.do_left": {
            "name": "do_left",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_line": [
                    "list[typing.AnyStr]",
                    "str",
                    "List[AnyStr]",
                    "list[str]",
                    "List[str]",
                    "Iterable[str]",
                    "Iterable[Sequence[str]]"
                ]
            }
        },
        "RobotPrompt.do_right": {
            "name": "do_right",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_line": [
                    "list[typing.AnyStr]",
                    "str",
                    "List[AnyStr]",
                    "list[str]",
                    "List[str]",
                    "Iterable[str]",
                    "Iterable[Sequence[str]]"
                ]
            }
        },
        "RobotPrompt.do_report": {
            "name": "do_report",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_line": [
                    "str"
                ]
            }
        },
        "RobotPrompt.precmd": {
            "name": "precmd",
            "location": 85,
            "return": [
                "str",
                "list",
                "Sequence[str]",
                "List[str]",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "toy-robot-master/table.py": {
        "Terrain.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x_pos": [
                    "float",
                    "int"
                ],
                "y_pos": [
                    "float",
                    "int"
                ]
            }
        },
        "Terrain.coordinates_within_limits": {
            "name": "coordinates_within_limits",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "_x_pos": [
                    "int"
                ],
                "_y_pos": [
                    "int"
                ]
            }
        },
        "Table.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "length": [
                    "int",
                    "float"
                ],
                "width": [
                    "int",
                    "float"
                ]
            }
        },
        "Table.coordinates_within_limits": {
            "name": "coordinates_within_limits",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "x_pos": [
                    "int"
                ],
                "y_pos": [
                    "int"
                ]
            }
        },
        "Table.__str__": {
            "name": "__str__",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "toy-robot-master/tests/test_Robot.py": {
        "RobotTest.setUp": {
            "name": "setUp",
            "location": 24,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RobotTest.test_robot_created_properly": {
            "name": "test_robot_created_properly",
            "location": 28,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RobotTest.test_robot_not_on_table": {
            "name": "test_robot_not_on_table",
            "location": 33,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RobotTest.test_placing_robot_correctly": {
            "name": "test_placing_robot_correctly",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "x_coord": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "y_coord": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ],
                "direction": [
                    "Dict[str, Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "RobotTest.test_discard_until_placing_robot": {
            "name": "test_discard_until_placing_robot",
            "location": 49,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RobotTest.test_placing_robot_trying_to_fall_down": {
            "name": "test_placing_robot_trying_to_fall_down",
            "location": 58,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "x_coord": [
                    "int",
                    "float",
                    "bool"
                ],
                "y_coord": [
                    "int",
                    "float",
                    "bool"
                ],
                "direction": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "RobotTest.test_placing_robot_incorrectly": {
            "name": "test_placing_robot_incorrectly",
            "location": 72,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "List[float]",
                    "list[float]"
                ],
                "y": [
                    "float",
                    "List[float]",
                    "list[float]"
                ],
                "direction": [
                    "float",
                    "List[float]",
                    "list[float]"
                ]
            }
        },
        "RobotTest.test_rotate_robot": {
            "name": "test_rotate_robot",
            "location": 80,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "times": [
                    "int",
                    "float",
                    "str",
                    "Callable"
                ],
                "start_d": [
                    "Callable",
                    "typing.Callable[, ]"
                ],
                "end_d_l": [
                    "Callable[[list], None]",
                    "typing.Callable[list[], None]"
                ],
                "end_d_r": [
                    "Callable[[list], None]",
                    "typing.Callable[list[], None]"
                ]
            }
        },
        "RobotTest.test_report_robot_position": {
            "name": "test_report_robot_position",
            "location": 93,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int",
                    "Iterable[int]",
                    "typing.Iterable[int]"
                ],
                "y": [
                    "float",
                    "int",
                    "Iterable[int]",
                    "typing.Iterable[int]"
                ],
                "d": [
                    "float",
                    "int",
                    "Iterable[int]",
                    "typing.Iterable[int]"
                ]
            }
        }
    },
    "toy-robot-master/tests/test_Table.py": {
        "TableTest.setUp": {
            "name": "setUp",
            "location": 18,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableTest.test_if_table_created_properly": {
            "name": "test_if_table_created_properly",
            "location": 23,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "length": [
                    "int"
                ],
                "width": [
                    "int",
                    "str"
                ]
            }
        },
        "TableTest.test_if_table_throws_valueerror": {
            "name": "test_if_table_throws_valueerror",
            "location": 31,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "length": [
                    "int",
                    "float",
                    "list",
                    "list[]"
                ],
                "width": [
                    "int",
                    "float",
                    "list",
                    "list[]"
                ]
            }
        },
        "TableTest.test_if_given_cordinates_are_on_table": {
            "name": "test_if_given_cordinates_are_on_table",
            "location": 37,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "x_pos": [
                    "bool",
                    "T"
                ],
                "y_pos": [
                    "bool",
                    "T"
                ]
            }
        },
        "TableTest.test_if_given_cordinates_are_not_on_table": {
            "name": "test_if_given_cordinates_are_not_on_table",
            "location": 43,
            "return": [
                "",
                "None"
            ],
            "arguments": {
                "self": [],
                "x_pos": [
                    "Callable",
                    "bool",
                    "typing.Callable[, ]",
                    "str",
                    "Sequence[Hashable]",
                    "typing.Sequence[typing.Hashable]"
                ],
                "y_pos": [
                    "Callable",
                    "bool",
                    "typing.Callable[, ]",
                    "str",
                    "Sequence[Hashable]",
                    "typing.Sequence[typing.Hashable]"
                ]
            }
        }
    }
}